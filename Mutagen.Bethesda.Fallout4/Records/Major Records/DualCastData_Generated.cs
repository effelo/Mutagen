/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class DualCastData :
        Fallout4MajorRecord,
        IDualCastDataInternal,
        ILoquiObjectSetter<DualCastData>,
        IEquatable<IDualCastDataGetter>
    {
        #region Ctor
        protected DualCastData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IDualCastDataGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Projectile
        public FormLink<IProjectileGetter> Projectile { get; set; } = new FormLink<IProjectileGetter>();
        #endregion
        #region Explosion
        public FormLink<IExplosionGetter> Explosion { get; set; } = new FormLink<IExplosionGetter>();
        #endregion
        #region EffectShader
        public FormLink<IEffectShaderGetter> EffectShader { get; set; } = new FormLink<IEffectShaderGetter>();
        #endregion
        #region HitEffectArt
        public FormLink<IArtObjectGetter> HitEffectArt { get; set; } = new FormLink<IArtObjectGetter>();
        #endregion
        #region ImpactDataSet
        public FormLink<IImpactDataSetGetter> ImpactDataSet { get; set; } = new FormLink<IImpactDataSetGetter>();
        #endregion
        #region InheritScale
        public DualCastData.InheritScaleType InheritScale { get; set; } = default;
        #endregion
        #region DATADataTypeState
        public DualCastData.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DualCastDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDualCastDataGetter rhs)) return false;
            return ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDualCastDataGetter? obj)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Projectile = initialValue;
                this.Explosion = initialValue;
                this.EffectShader = initialValue;
                this.HitEffectArt = initialValue;
                this.ImpactDataSet = initialValue;
                this.InheritScale = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Projectile,
                TItem Explosion,
                TItem EffectShader,
                TItem HitEffectArt,
                TItem ImpactDataSet,
                TItem InheritScale,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Projectile = Projectile;
                this.Explosion = Explosion;
                this.EffectShader = EffectShader;
                this.HitEffectArt = HitEffectArt;
                this.ImpactDataSet = ImpactDataSet;
                this.InheritScale = InheritScale;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Projectile;
            public TItem Explosion;
            public TItem EffectShader;
            public TItem HitEffectArt;
            public TItem ImpactDataSet;
            public TItem InheritScale;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Projectile, rhs.Projectile)) return false;
                if (!object.Equals(this.Explosion, rhs.Explosion)) return false;
                if (!object.Equals(this.EffectShader, rhs.EffectShader)) return false;
                if (!object.Equals(this.HitEffectArt, rhs.HitEffectArt)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.InheritScale, rhs.InheritScale)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Projectile);
                hash.Add(this.Explosion);
                hash.Add(this.EffectShader);
                hash.Add(this.HitEffectArt);
                hash.Add(this.ImpactDataSet);
                hash.Add(this.InheritScale);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Projectile)) return false;
                if (!eval(this.Explosion)) return false;
                if (!eval(this.EffectShader)) return false;
                if (!eval(this.HitEffectArt)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.InheritScale)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Projectile)) return true;
                if (eval(this.Explosion)) return true;
                if (eval(this.EffectShader)) return true;
                if (eval(this.HitEffectArt)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.InheritScale)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DualCastData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Projectile = eval(this.Projectile);
                obj.Explosion = eval(this.Explosion);
                obj.EffectShader = eval(this.EffectShader);
                obj.HitEffectArt = eval(this.HitEffectArt);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.InheritScale = eval(this.InheritScale);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DualCastData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DualCastData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DualCastData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Projectile ?? true)
                    {
                        fg.AppendItem(Projectile, "Projectile");
                    }
                    if (printMask?.Explosion ?? true)
                    {
                        fg.AppendItem(Explosion, "Explosion");
                    }
                    if (printMask?.EffectShader ?? true)
                    {
                        fg.AppendItem(EffectShader, "EffectShader");
                    }
                    if (printMask?.HitEffectArt ?? true)
                    {
                        fg.AppendItem(HitEffectArt, "HitEffectArt");
                    }
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.InheritScale ?? true)
                    {
                        fg.AppendItem(InheritScale, "InheritScale");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Projectile;
            public Exception? Explosion;
            public Exception? EffectShader;
            public Exception? HitEffectArt;
            public Exception? ImpactDataSet;
            public Exception? InheritScale;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DualCastData_FieldIndex enu = (DualCastData_FieldIndex)index;
                switch (enu)
                {
                    case DualCastData_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case DualCastData_FieldIndex.Projectile:
                        return Projectile;
                    case DualCastData_FieldIndex.Explosion:
                        return Explosion;
                    case DualCastData_FieldIndex.EffectShader:
                        return EffectShader;
                    case DualCastData_FieldIndex.HitEffectArt:
                        return HitEffectArt;
                    case DualCastData_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case DualCastData_FieldIndex.InheritScale:
                        return InheritScale;
                    case DualCastData_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DualCastData_FieldIndex enu = (DualCastData_FieldIndex)index;
                switch (enu)
                {
                    case DualCastData_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case DualCastData_FieldIndex.Projectile:
                        this.Projectile = ex;
                        break;
                    case DualCastData_FieldIndex.Explosion:
                        this.Explosion = ex;
                        break;
                    case DualCastData_FieldIndex.EffectShader:
                        this.EffectShader = ex;
                        break;
                    case DualCastData_FieldIndex.HitEffectArt:
                        this.HitEffectArt = ex;
                        break;
                    case DualCastData_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case DualCastData_FieldIndex.InheritScale:
                        this.InheritScale = ex;
                        break;
                    case DualCastData_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DualCastData_FieldIndex enu = (DualCastData_FieldIndex)index;
                switch (enu)
                {
                    case DualCastData_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case DualCastData_FieldIndex.Projectile:
                        this.Projectile = (Exception?)obj;
                        break;
                    case DualCastData_FieldIndex.Explosion:
                        this.Explosion = (Exception?)obj;
                        break;
                    case DualCastData_FieldIndex.EffectShader:
                        this.EffectShader = (Exception?)obj;
                        break;
                    case DualCastData_FieldIndex.HitEffectArt:
                        this.HitEffectArt = (Exception?)obj;
                        break;
                    case DualCastData_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case DualCastData_FieldIndex.InheritScale:
                        this.InheritScale = (Exception?)obj;
                        break;
                    case DualCastData_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Projectile != null) return true;
                if (Explosion != null) return true;
                if (EffectShader != null) return true;
                if (HitEffectArt != null) return true;
                if (ImpactDataSet != null) return true;
                if (InheritScale != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Projectile, "Projectile");
                fg.AppendItem(Explosion, "Explosion");
                fg.AppendItem(EffectShader, "EffectShader");
                fg.AppendItem(HitEffectArt, "HitEffectArt");
                fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                fg.AppendItem(InheritScale, "InheritScale");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Projectile = this.Projectile.Combine(rhs.Projectile);
                ret.Explosion = this.Explosion.Combine(rhs.Explosion);
                ret.EffectShader = this.EffectShader.Combine(rhs.EffectShader);
                ret.HitEffectArt = this.HitEffectArt.Combine(rhs.HitEffectArt);
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.InheritScale = this.InheritScale.Combine(rhs.InheritScale);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Projectile;
            public bool Explosion;
            public bool EffectShader;
            public bool HitEffectArt;
            public bool ImpactDataSet;
            public bool InheritScale;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Projectile = defaultOn;
                this.Explosion = defaultOn;
                this.EffectShader = defaultOn;
                this.HitEffectArt = defaultOn;
                this.ImpactDataSet = defaultOn;
                this.InheritScale = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Projectile, null));
                ret.Add((Explosion, null));
                ret.Add((EffectShader, null));
                ret.Add((HitEffectArt, null));
                ret.Add((ImpactDataSet, null));
                ret.Add((InheritScale, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = DualCastData_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => DualCastDataCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DualCastDataSetterCommon.Instance.RemapLinks(this, mapping);
        public DualCastData(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private DualCastData(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal DualCastData(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public DualCastData(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public DualCastData(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DualCastDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DualCastDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static DualCastData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DualCastData();
            ((DualCastDataSetterCommon)((IDualCastDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DualCastData item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((DualCastDataSetterCommon)((IDualCastDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DualCastData GetNew()
        {
            return new DualCastData();
        }

    }
    #endregion

    #region Interface
    public partial interface IDualCastData :
        IDualCastDataGetter,
        IFallout4MajorRecord,
        IObjectBounded,
        ILoquiObjectSetter<IDualCastDataInternal>,
        IFormLinkContainer
    {
        new ObjectBounds ObjectBounds { get; set; }
        new FormLink<IProjectileGetter> Projectile { get; set; }
        new FormLink<IExplosionGetter> Explosion { get; set; }
        new FormLink<IEffectShaderGetter> EffectShader { get; set; }
        new FormLink<IArtObjectGetter> HitEffectArt { get; set; }
        new FormLink<IImpactDataSetGetter> ImpactDataSet { get; set; }
        new DualCastData.InheritScaleType InheritScale { get; set; }
        new DualCastData.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IDualCastDataInternal :
        IFallout4MajorRecordInternal,
        IDualCastData,
        IDualCastDataGetter
    {
    }

    public partial interface IDualCastDataGetter :
        IFallout4MajorRecordGetter,
        IObjectBoundedGetter,
        ILoquiObject<IDualCastDataGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => DualCastData_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        FormLink<IProjectileGetter> Projectile { get; }
        FormLink<IExplosionGetter> Explosion { get; }
        FormLink<IEffectShaderGetter> EffectShader { get; }
        FormLink<IArtObjectGetter> HitEffectArt { get; }
        FormLink<IImpactDataSetGetter> ImpactDataSet { get; }
        DualCastData.InheritScaleType InheritScale { get; }
        DualCastData.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DualCastDataMixIn
    {
        public static void Clear(this IDualCastDataInternal item)
        {
            ((DualCastDataSetterCommon)((IDualCastDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DualCastData.Mask<bool> GetEqualsMask(
            this IDualCastDataGetter item,
            IDualCastDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDualCastDataGetter item,
            string? name = null,
            DualCastData.Mask<bool>? printMask = null)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDualCastDataGetter item,
            FileGeneration fg,
            string? name = null,
            DualCastData.Mask<bool>? printMask = null)
        {
            ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDualCastDataGetter item,
            IDualCastDataGetter rhs)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDualCastDataInternal lhs,
            IDualCastDataGetter rhs,
            out DualCastData.ErrorMask errorMask,
            DualCastData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DualCastData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDualCastDataInternal lhs,
            IDualCastDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DualCastData DeepCopy(
            this IDualCastDataGetter item,
            DualCastData.TranslationMask? copyMask = null)
        {
            return ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DualCastData DeepCopy(
            this IDualCastDataGetter item,
            out DualCastData.ErrorMask errorMask,
            DualCastData.TranslationMask? copyMask = null)
        {
            return ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DualCastData DeepCopy(
            this IDualCastDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static DualCastData Duplicate(
            this IDualCastDataGetter item,
            FormKey formKey,
            DualCastData.TranslationMask? copyMask = null)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDualCastDataInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DualCastDataSetterCommon)((IDualCastDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum DualCastData_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Projectile = 7,
        Explosion = 8,
        EffectShader = 9,
        HitEffectArt = 10,
        ImpactDataSet = 11,
        InheritScale = 12,
        DATADataTypeState = 13,
    }
    #endregion

    #region Registration
    public partial class DualCastData_Registration : ILoquiRegistration
    {
        public static readonly DualCastData_Registration Instance = new DualCastData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 112,
            version: 0);

        public const string GUID = "636155e6-228a-40cb-a05b-32afabd5966e";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(DualCastData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DualCastData.ErrorMask);

        public static readonly Type ClassType = typeof(DualCastData);

        public static readonly Type GetterType = typeof(IDualCastDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDualCastData);

        public static readonly Type? InternalSetterType = typeof(IDualCastDataInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.DualCastData";

        public const string Name = "DualCastData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DUAL;
        public static readonly Type BinaryWriteTranslation = typeof(DualCastDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class DualCastDataSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly DualCastDataSetterCommon Instance = new DualCastDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDualCastDataInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Projectile = FormLink<IProjectileGetter>.Null;
            item.Explosion = FormLink<IExplosionGetter>.Null;
            item.EffectShader = FormLink<IEffectShaderGetter>.Null;
            item.HitEffectArt = FormLink<IArtObjectGetter>.Null;
            item.ImpactDataSet = FormLink<IImpactDataSetGetter>.Null;
            item.InheritScale = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IDualCastDataInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDualCastDataInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IDualCastData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Projectile = obj.Projectile.Relink(mapping);
            obj.Explosion = obj.Explosion.Relink(mapping);
            obj.EffectShader = obj.EffectShader.Relink(mapping);
            obj.HitEffectArt = obj.HitEffectArt.Relink(mapping);
            obj.ImpactDataSet = obj.ImpactDataSet.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDualCastDataInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IDualCastDataInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: DualCastDataBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DualCastDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DualCastData)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DualCastData)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class DualCastDataCommon : Fallout4MajorRecordCommon
    {
        public new static readonly DualCastDataCommon Instance = new DualCastDataCommon();

        public DualCastData.Mask<bool> GetEqualsMask(
            IDualCastDataGetter item,
            IDualCastDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DualCastData.Mask<bool>(false);
            ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDualCastDataGetter item,
            IDualCastDataGetter rhs,
            DualCastData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Projectile = item.Projectile.Equals(rhs.Projectile);
            ret.Explosion = item.Explosion.Equals(rhs.Explosion);
            ret.EffectShader = item.EffectShader.Equals(rhs.EffectShader);
            ret.HitEffectArt = item.HitEffectArt.Equals(rhs.HitEffectArt);
            ret.ImpactDataSet = item.ImpactDataSet.Equals(rhs.ImpactDataSet);
            ret.InheritScale = item.InheritScale == rhs.InheritScale;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDualCastDataGetter item,
            string? name = null,
            DualCastData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDualCastDataGetter item,
            FileGeneration fg,
            string? name = null,
            DualCastData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DualCastData =>");
            }
            else
            {
                fg.AppendLine($"{name} (DualCastData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDualCastDataGetter item,
            FileGeneration fg,
            DualCastData.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if (printMask?.Projectile ?? true)
            {
                fg.AppendItem(item.Projectile.FormKey, "Projectile");
            }
            if (printMask?.Explosion ?? true)
            {
                fg.AppendItem(item.Explosion.FormKey, "Explosion");
            }
            if (printMask?.EffectShader ?? true)
            {
                fg.AppendItem(item.EffectShader.FormKey, "EffectShader");
            }
            if (printMask?.HitEffectArt ?? true)
            {
                fg.AppendItem(item.HitEffectArt.FormKey, "HitEffectArt");
            }
            if (printMask?.ImpactDataSet ?? true)
            {
                fg.AppendItem(item.ImpactDataSet.FormKey, "ImpactDataSet");
            }
            if (printMask?.InheritScale ?? true)
            {
                fg.AppendItem(item.InheritScale, "InheritScale");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static DualCastData_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DualCastData_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (DualCastData_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (DualCastData_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (DualCastData_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (DualCastData_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (DualCastData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new DualCastData_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DualCastData_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DualCastData_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (DualCastData_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DualCastData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDualCastDataGetter? lhs,
            IDualCastDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!lhs.Projectile.Equals(rhs.Projectile)) return false;
            if (!lhs.Explosion.Equals(rhs.Explosion)) return false;
            if (!lhs.EffectShader.Equals(rhs.EffectShader)) return false;
            if (!lhs.HitEffectArt.Equals(rhs.HitEffectArt)) return false;
            if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            if (lhs.InheritScale != rhs.InheritScale) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDualCastDataGetter?)lhs,
                rhs: rhs as IDualCastDataGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDualCastDataGetter?)lhs,
                rhs: rhs as IDualCastDataGetter);
        }
        
        public virtual int GetHashCode(IDualCastDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            hash.Add(item.Projectile);
            hash.Add(item.Explosion);
            hash.Add(item.EffectShader);
            hash.Add(item.HitEffectArt);
            hash.Add(item.ImpactDataSet);
            hash.Add(item.InheritScale);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IDualCastDataGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDualCastDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DualCastData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IDualCastDataGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Projectile);
            yield return FormLinkInformation.Factory(obj.Explosion);
            yield return FormLinkInformation.Factory(obj.EffectShader);
            yield return FormLinkInformation.Factory(obj.HitEffectArt);
            yield return FormLinkInformation.Factory(obj.ImpactDataSet);
            yield break;
        }
        
        #region Duplicate
        public DualCastData Duplicate(
            IDualCastDataGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new DualCastData(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDualCastData)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDualCastData)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class DualCastDataSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly DualCastDataSetterTranslationCommon Instance = new DualCastDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDualCastDataInternal item,
            IDualCastDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IDualCastData item,
            IDualCastDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)DualCastData_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)DualCastData_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.Projectile) ?? true))
            {
                item.Projectile = new FormLink<IProjectileGetter>(rhs.Projectile.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.Explosion) ?? true))
            {
                item.Explosion = new FormLink<IExplosionGetter>(rhs.Explosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.EffectShader) ?? true))
            {
                item.EffectShader = new FormLink<IEffectShaderGetter>(rhs.EffectShader.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.HitEffectArt) ?? true))
            {
                item.HitEffectArt = new FormLink<IArtObjectGetter>(rhs.HitEffectArt.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet = new FormLink<IImpactDataSetGetter>(rhs.ImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.InheritScale) ?? true))
            {
                item.InheritScale = rhs.InheritScale;
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDualCastDataInternal)item,
                rhs: (IDualCastDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDualCastData)item,
                rhs: (IDualCastDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDualCastDataInternal)item,
                rhs: (IDualCastDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDualCastData)item,
                rhs: (IDualCastDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DualCastData DeepCopy(
            IDualCastDataGetter item,
            DualCastData.TranslationMask? copyMask = null)
        {
            DualCastData ret = (DualCastData)((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).GetNew();
            ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DualCastData DeepCopy(
            IDualCastDataGetter item,
            out DualCastData.ErrorMask errorMask,
            DualCastData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DualCastData ret = (DualCastData)((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).GetNew();
            ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DualCastData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DualCastData DeepCopy(
            IDualCastDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DualCastData ret = (DualCastData)((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).GetNew();
            ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class DualCastData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DualCastData_Registration.Instance;
        public new static DualCastData_Registration Registration => DualCastData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DualCastDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DualCastDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DualCastDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class DualCastDataBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DualCastDataBinaryWriteTranslation Instance = new DualCastDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IDualCastDataGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IDualCastDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Projectile);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Explosion);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EffectShader);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HitEffectArt);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImpactDataSet);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<DualCastData.InheritScaleType>.Instance.Write(
                    writer,
                    item.InheritScale,
                    length: 4);
            }
        }

        public void Write(
            MutagenWriter writer,
            IDualCastDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.DUAL),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDualCastDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDualCastDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDualCastDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DualCastDataBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static DualCastDataBinaryCreateTranslation Instance = new DualCastDataBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.DUAL;
        public static void FillBinaryStructs(
            IDualCastDataInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IDualCastDataInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)DualCastData_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Projectile = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Explosion = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.EffectShader = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.HitEffectArt = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.ImpactDataSet = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.InheritScale = EnumBinaryTranslation<DualCastData.InheritScaleType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    return (int)DualCastData_FieldIndex.InheritScale;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class DualCastDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class DualCastDataBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IDualCastDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DualCastData_Registration.Instance;
        public new static DualCastData_Registration Registration => DualCastData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DualCastDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DualCastDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => DualCastDataCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DualCastDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DualCastDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        private int? _DATALocation;
        public DualCastData.DATADataType DATADataTypeState { get; private set; }
        #region Projectile
        private int _ProjectileLocation => _DATALocation!.Value;
        private bool _Projectile_IsSet => _DATALocation.HasValue;
        public FormLink<IProjectileGetter> Projectile => _Projectile_IsSet ? new FormLink<IProjectileGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ProjectileLocation, 0x4)))) : FormLink<IProjectileGetter>.Null;
        #endregion
        #region Explosion
        private int _ExplosionLocation => _DATALocation!.Value + 0x4;
        private bool _Explosion_IsSet => _DATALocation.HasValue;
        public FormLink<IExplosionGetter> Explosion => _Explosion_IsSet ? new FormLink<IExplosionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ExplosionLocation, 0x4)))) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region EffectShader
        private int _EffectShaderLocation => _DATALocation!.Value + 0x8;
        private bool _EffectShader_IsSet => _DATALocation.HasValue;
        public FormLink<IEffectShaderGetter> EffectShader => _EffectShader_IsSet ? new FormLink<IEffectShaderGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_EffectShaderLocation, 0x4)))) : FormLink<IEffectShaderGetter>.Null;
        #endregion
        #region HitEffectArt
        private int _HitEffectArtLocation => _DATALocation!.Value + 0xC;
        private bool _HitEffectArt_IsSet => _DATALocation.HasValue;
        public FormLink<IArtObjectGetter> HitEffectArt => _HitEffectArt_IsSet ? new FormLink<IArtObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_HitEffectArtLocation, 0x4)))) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region ImpactDataSet
        private int _ImpactDataSetLocation => _DATALocation!.Value + 0x10;
        private bool _ImpactDataSet_IsSet => _DATALocation.HasValue;
        public FormLink<IImpactDataSetGetter> ImpactDataSet => _ImpactDataSet_IsSet ? new FormLink<IImpactDataSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ImpactDataSetLocation, 0x4)))) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region InheritScale
        private int _InheritScaleLocation => _DATALocation!.Value + 0x14;
        private bool _InheritScale_IsSet => _DATALocation.HasValue;
        public DualCastData.InheritScaleType InheritScale => _InheritScale_IsSet ? (DualCastData.InheritScaleType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_InheritScaleLocation, 0x4)) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DualCastDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DualCastDataBinaryOverlay DualCastDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new DualCastDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static DualCastDataBinaryOverlay DualCastDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DualCastDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)DualCastData_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)DualCastData_FieldIndex.InheritScale;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DualCastDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDualCastDataGetter rhs)) return false;
            return ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDualCastDataGetter? obj)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

