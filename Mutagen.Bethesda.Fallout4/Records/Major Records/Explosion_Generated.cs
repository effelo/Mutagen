/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Explosion :
        Fallout4MajorRecord,
        IExplosionInternal,
        ILoquiObjectSetter<Explosion>,
        IEquatable<IExplosionGetter>
    {
        #region Ctor
        protected Explosion()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IExplosionGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IExplosionGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IExplosionGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IExplosionGetter.Model => this.Model;
        #endregion
        #region ObjectEffect
        public FormLinkNullable<IEffectRecordGetter> ObjectEffect { get; set; } = new FormLinkNullable<IEffectRecordGetter>();
        #endregion
        #region ImageSpaceModifier
        public FormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier { get; set; } = new FormLinkNullable<IImageSpaceAdapterGetter>();
        #endregion
        #region Light
        public FormLink<ILightGetter> Light { get; set; } = new FormLink<ILightGetter>();
        #endregion
        #region Sound1
        public FormLink<ISoundDescriptorGetter> Sound1 { get; set; } = new FormLink<ISoundDescriptorGetter>();
        #endregion
        #region Sound2
        public FormLink<ISoundDescriptorGetter> Sound2 { get; set; } = new FormLink<ISoundDescriptorGetter>();
        #endregion
        #region ImpactDataSet
        public FormLink<IImpactDataSetGetter> ImpactDataSet { get; set; } = new FormLink<IImpactDataSetGetter>();
        #endregion
        #region PlacedObject
        public FormLink<IFallout4MajorRecordGetter> PlacedObject { get; set; } = new FormLink<IFallout4MajorRecordGetter>();
        #endregion
        #region SpawnProjectile
        public FormLink<IProjectileGetter> SpawnProjectile { get; set; } = new FormLink<IProjectileGetter>();
        #endregion
        #region Force
        public Single Force { get; set; } = default;
        #endregion
        #region Damage
        public Single Damage { get; set; } = default;
        #endregion
        #region Radius
        public Single Radius { get; set; } = default;
        #endregion
        #region ISRadius
        public Single ISRadius { get; set; } = default;
        #endregion
        #region VerticalOffsetMult
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _VerticalOffsetMult;
        public Single VerticalOffsetMult
        {
            get => this._VerticalOffsetMult;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._VerticalOffsetMult = value;
            }
        }
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Explosion.Flag _Flags;
        public Explosion.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._Flags = value;
            }
        }
        #endregion
        #region SoundLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundLevel _SoundLevel;
        public SoundLevel SoundLevel
        {
            get => this._SoundLevel;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._SoundLevel = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public Explosion.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ExplosionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IExplosionGetter rhs)) return false;
            return ((ExplosionCommon)((IExplosionGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IExplosionGetter? obj)
        {
            return ((ExplosionCommon)((IExplosionGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ExplosionCommon)((IExplosionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.ObjectEffect = initialValue;
                this.ImageSpaceModifier = initialValue;
                this.Light = initialValue;
                this.Sound1 = initialValue;
                this.Sound2 = initialValue;
                this.ImpactDataSet = initialValue;
                this.PlacedObject = initialValue;
                this.SpawnProjectile = initialValue;
                this.Force = initialValue;
                this.Damage = initialValue;
                this.Radius = initialValue;
                this.ISRadius = initialValue;
                this.VerticalOffsetMult = initialValue;
                this.Flags = initialValue;
                this.SoundLevel = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem ObjectEffect,
                TItem ImageSpaceModifier,
                TItem Light,
                TItem Sound1,
                TItem Sound2,
                TItem ImpactDataSet,
                TItem PlacedObject,
                TItem SpawnProjectile,
                TItem Force,
                TItem Damage,
                TItem Radius,
                TItem ISRadius,
                TItem VerticalOffsetMult,
                TItem Flags,
                TItem SoundLevel,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.ObjectEffect = ObjectEffect;
                this.ImageSpaceModifier = ImageSpaceModifier;
                this.Light = Light;
                this.Sound1 = Sound1;
                this.Sound2 = Sound2;
                this.ImpactDataSet = ImpactDataSet;
                this.PlacedObject = PlacedObject;
                this.SpawnProjectile = SpawnProjectile;
                this.Force = Force;
                this.Damage = Damage;
                this.Radius = Radius;
                this.ISRadius = ISRadius;
                this.VerticalOffsetMult = VerticalOffsetMult;
                this.Flags = Flags;
                this.SoundLevel = SoundLevel;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem ObjectEffect;
            public TItem ImageSpaceModifier;
            public TItem Light;
            public TItem Sound1;
            public TItem Sound2;
            public TItem ImpactDataSet;
            public TItem PlacedObject;
            public TItem SpawnProjectile;
            public TItem Force;
            public TItem Damage;
            public TItem Radius;
            public TItem ISRadius;
            public TItem VerticalOffsetMult;
            public TItem Flags;
            public TItem SoundLevel;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.ObjectEffect, rhs.ObjectEffect)) return false;
                if (!object.Equals(this.ImageSpaceModifier, rhs.ImageSpaceModifier)) return false;
                if (!object.Equals(this.Light, rhs.Light)) return false;
                if (!object.Equals(this.Sound1, rhs.Sound1)) return false;
                if (!object.Equals(this.Sound2, rhs.Sound2)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.PlacedObject, rhs.PlacedObject)) return false;
                if (!object.Equals(this.SpawnProjectile, rhs.SpawnProjectile)) return false;
                if (!object.Equals(this.Force, rhs.Force)) return false;
                if (!object.Equals(this.Damage, rhs.Damage)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.ISRadius, rhs.ISRadius)) return false;
                if (!object.Equals(this.VerticalOffsetMult, rhs.VerticalOffsetMult)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.SoundLevel, rhs.SoundLevel)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.ObjectEffect);
                hash.Add(this.ImageSpaceModifier);
                hash.Add(this.Light);
                hash.Add(this.Sound1);
                hash.Add(this.Sound2);
                hash.Add(this.ImpactDataSet);
                hash.Add(this.PlacedObject);
                hash.Add(this.SpawnProjectile);
                hash.Add(this.Force);
                hash.Add(this.Damage);
                hash.Add(this.Radius);
                hash.Add(this.ISRadius);
                hash.Add(this.VerticalOffsetMult);
                hash.Add(this.Flags);
                hash.Add(this.SoundLevel);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.ObjectEffect)) return false;
                if (!eval(this.ImageSpaceModifier)) return false;
                if (!eval(this.Light)) return false;
                if (!eval(this.Sound1)) return false;
                if (!eval(this.Sound2)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.PlacedObject)) return false;
                if (!eval(this.SpawnProjectile)) return false;
                if (!eval(this.Force)) return false;
                if (!eval(this.Damage)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.ISRadius)) return false;
                if (!eval(this.VerticalOffsetMult)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.SoundLevel)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.ObjectEffect)) return true;
                if (eval(this.ImageSpaceModifier)) return true;
                if (eval(this.Light)) return true;
                if (eval(this.Sound1)) return true;
                if (eval(this.Sound2)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.PlacedObject)) return true;
                if (eval(this.SpawnProjectile)) return true;
                if (eval(this.Force)) return true;
                if (eval(this.Damage)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.ISRadius)) return true;
                if (eval(this.VerticalOffsetMult)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.SoundLevel)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Explosion.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.ObjectEffect = eval(this.ObjectEffect);
                obj.ImageSpaceModifier = eval(this.ImageSpaceModifier);
                obj.Light = eval(this.Light);
                obj.Sound1 = eval(this.Sound1);
                obj.Sound2 = eval(this.Sound2);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.PlacedObject = eval(this.PlacedObject);
                obj.SpawnProjectile = eval(this.SpawnProjectile);
                obj.Force = eval(this.Force);
                obj.Damage = eval(this.Damage);
                obj.Radius = eval(this.Radius);
                obj.ISRadius = eval(this.ISRadius);
                obj.VerticalOffsetMult = eval(this.VerticalOffsetMult);
                obj.Flags = eval(this.Flags);
                obj.SoundLevel = eval(this.SoundLevel);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Explosion.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Explosion.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Explosion.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.ObjectEffect ?? true)
                    {
                        fg.AppendItem(ObjectEffect, "ObjectEffect");
                    }
                    if (printMask?.ImageSpaceModifier ?? true)
                    {
                        fg.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                    }
                    if (printMask?.Light ?? true)
                    {
                        fg.AppendItem(Light, "Light");
                    }
                    if (printMask?.Sound1 ?? true)
                    {
                        fg.AppendItem(Sound1, "Sound1");
                    }
                    if (printMask?.Sound2 ?? true)
                    {
                        fg.AppendItem(Sound2, "Sound2");
                    }
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.PlacedObject ?? true)
                    {
                        fg.AppendItem(PlacedObject, "PlacedObject");
                    }
                    if (printMask?.SpawnProjectile ?? true)
                    {
                        fg.AppendItem(SpawnProjectile, "SpawnProjectile");
                    }
                    if (printMask?.Force ?? true)
                    {
                        fg.AppendItem(Force, "Force");
                    }
                    if (printMask?.Damage ?? true)
                    {
                        fg.AppendItem(Damage, "Damage");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        fg.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.ISRadius ?? true)
                    {
                        fg.AppendItem(ISRadius, "ISRadius");
                    }
                    if (printMask?.VerticalOffsetMult ?? true)
                    {
                        fg.AppendItem(VerticalOffsetMult, "VerticalOffsetMult");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.SoundLevel ?? true)
                    {
                        fg.AppendItem(SoundLevel, "SoundLevel");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? ObjectEffect;
            public Exception? ImageSpaceModifier;
            public Exception? Light;
            public Exception? Sound1;
            public Exception? Sound2;
            public Exception? ImpactDataSet;
            public Exception? PlacedObject;
            public Exception? SpawnProjectile;
            public Exception? Force;
            public Exception? Damage;
            public Exception? Radius;
            public Exception? ISRadius;
            public Exception? VerticalOffsetMult;
            public Exception? Flags;
            public Exception? SoundLevel;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Explosion_FieldIndex enu = (Explosion_FieldIndex)index;
                switch (enu)
                {
                    case Explosion_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Explosion_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Explosion_FieldIndex.Name:
                        return Name;
                    case Explosion_FieldIndex.Model:
                        return Model;
                    case Explosion_FieldIndex.ObjectEffect:
                        return ObjectEffect;
                    case Explosion_FieldIndex.ImageSpaceModifier:
                        return ImageSpaceModifier;
                    case Explosion_FieldIndex.Light:
                        return Light;
                    case Explosion_FieldIndex.Sound1:
                        return Sound1;
                    case Explosion_FieldIndex.Sound2:
                        return Sound2;
                    case Explosion_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case Explosion_FieldIndex.PlacedObject:
                        return PlacedObject;
                    case Explosion_FieldIndex.SpawnProjectile:
                        return SpawnProjectile;
                    case Explosion_FieldIndex.Force:
                        return Force;
                    case Explosion_FieldIndex.Damage:
                        return Damage;
                    case Explosion_FieldIndex.Radius:
                        return Radius;
                    case Explosion_FieldIndex.ISRadius:
                        return ISRadius;
                    case Explosion_FieldIndex.VerticalOffsetMult:
                        return VerticalOffsetMult;
                    case Explosion_FieldIndex.Flags:
                        return Flags;
                    case Explosion_FieldIndex.SoundLevel:
                        return SoundLevel;
                    case Explosion_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Explosion_FieldIndex enu = (Explosion_FieldIndex)index;
                switch (enu)
                {
                    case Explosion_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Explosion_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Explosion_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Explosion_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Explosion_FieldIndex.ObjectEffect:
                        this.ObjectEffect = ex;
                        break;
                    case Explosion_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = ex;
                        break;
                    case Explosion_FieldIndex.Light:
                        this.Light = ex;
                        break;
                    case Explosion_FieldIndex.Sound1:
                        this.Sound1 = ex;
                        break;
                    case Explosion_FieldIndex.Sound2:
                        this.Sound2 = ex;
                        break;
                    case Explosion_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case Explosion_FieldIndex.PlacedObject:
                        this.PlacedObject = ex;
                        break;
                    case Explosion_FieldIndex.SpawnProjectile:
                        this.SpawnProjectile = ex;
                        break;
                    case Explosion_FieldIndex.Force:
                        this.Force = ex;
                        break;
                    case Explosion_FieldIndex.Damage:
                        this.Damage = ex;
                        break;
                    case Explosion_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case Explosion_FieldIndex.ISRadius:
                        this.ISRadius = ex;
                        break;
                    case Explosion_FieldIndex.VerticalOffsetMult:
                        this.VerticalOffsetMult = ex;
                        break;
                    case Explosion_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Explosion_FieldIndex.SoundLevel:
                        this.SoundLevel = ex;
                        break;
                    case Explosion_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Explosion_FieldIndex enu = (Explosion_FieldIndex)index;
                switch (enu)
                {
                    case Explosion_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Explosion_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Explosion_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Explosion_FieldIndex.ObjectEffect:
                        this.ObjectEffect = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.Light:
                        this.Light = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.Sound1:
                        this.Sound1 = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.Sound2:
                        this.Sound2 = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.PlacedObject:
                        this.PlacedObject = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.SpawnProjectile:
                        this.SpawnProjectile = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.Force:
                        this.Force = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.Damage:
                        this.Damage = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.ISRadius:
                        this.ISRadius = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.VerticalOffsetMult:
                        this.VerticalOffsetMult = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.SoundLevel:
                        this.SoundLevel = (Exception?)obj;
                        break;
                    case Explosion_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (ObjectEffect != null) return true;
                if (ImageSpaceModifier != null) return true;
                if (Light != null) return true;
                if (Sound1 != null) return true;
                if (Sound2 != null) return true;
                if (ImpactDataSet != null) return true;
                if (PlacedObject != null) return true;
                if (SpawnProjectile != null) return true;
                if (Force != null) return true;
                if (Damage != null) return true;
                if (Radius != null) return true;
                if (ISRadius != null) return true;
                if (VerticalOffsetMult != null) return true;
                if (Flags != null) return true;
                if (SoundLevel != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                fg.AppendItem(ObjectEffect, "ObjectEffect");
                fg.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                fg.AppendItem(Light, "Light");
                fg.AppendItem(Sound1, "Sound1");
                fg.AppendItem(Sound2, "Sound2");
                fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                fg.AppendItem(PlacedObject, "PlacedObject");
                fg.AppendItem(SpawnProjectile, "SpawnProjectile");
                fg.AppendItem(Force, "Force");
                fg.AppendItem(Damage, "Damage");
                fg.AppendItem(Radius, "Radius");
                fg.AppendItem(ISRadius, "ISRadius");
                fg.AppendItem(VerticalOffsetMult, "VerticalOffsetMult");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(SoundLevel, "SoundLevel");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.ObjectEffect = this.ObjectEffect.Combine(rhs.ObjectEffect);
                ret.ImageSpaceModifier = this.ImageSpaceModifier.Combine(rhs.ImageSpaceModifier);
                ret.Light = this.Light.Combine(rhs.Light);
                ret.Sound1 = this.Sound1.Combine(rhs.Sound1);
                ret.Sound2 = this.Sound2.Combine(rhs.Sound2);
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.PlacedObject = this.PlacedObject.Combine(rhs.PlacedObject);
                ret.SpawnProjectile = this.SpawnProjectile.Combine(rhs.SpawnProjectile);
                ret.Force = this.Force.Combine(rhs.Force);
                ret.Damage = this.Damage.Combine(rhs.Damage);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.ISRadius = this.ISRadius.Combine(rhs.ISRadius);
                ret.VerticalOffsetMult = this.VerticalOffsetMult.Combine(rhs.VerticalOffsetMult);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.SoundLevel = this.SoundLevel.Combine(rhs.SoundLevel);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public Model.TranslationMask? Model;
            public bool ObjectEffect;
            public bool ImageSpaceModifier;
            public bool Light;
            public bool Sound1;
            public bool Sound2;
            public bool ImpactDataSet;
            public bool PlacedObject;
            public bool SpawnProjectile;
            public bool Force;
            public bool Damage;
            public bool Radius;
            public bool ISRadius;
            public bool VerticalOffsetMult;
            public bool Flags;
            public bool SoundLevel;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.ObjectEffect = defaultOn;
                this.ImageSpaceModifier = defaultOn;
                this.Light = defaultOn;
                this.Sound1 = defaultOn;
                this.Sound2 = defaultOn;
                this.ImpactDataSet = defaultOn;
                this.PlacedObject = defaultOn;
                this.SpawnProjectile = defaultOn;
                this.Force = defaultOn;
                this.Damage = defaultOn;
                this.Radius = defaultOn;
                this.ISRadius = defaultOn;
                this.VerticalOffsetMult = defaultOn;
                this.Flags = defaultOn;
                this.SoundLevel = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((ObjectEffect, null));
                ret.Add((ImageSpaceModifier, null));
                ret.Add((Light, null));
                ret.Add((Sound1, null));
                ret.Add((Sound2, null));
                ret.Add((ImpactDataSet, null));
                ret.Add((PlacedObject, null));
                ret.Add((SpawnProjectile, null));
                ret.Add((Force, null));
                ret.Add((Damage, null));
                ret.Add((Radius, null));
                ret.Add((ISRadius, null));
                ret.Add((VerticalOffsetMult, null));
                ret.Add((Flags, null));
                ret.Add((SoundLevel, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Explosion_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ExplosionCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ExplosionSetterCommon.Instance.RemapLinks(this, mapping);
        public Explosion(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Explosion(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Explosion(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Explosion(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Explosion(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
            Break0 = 1,
            Break1 = 2,
            Break2 = 4
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ExplosionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ExplosionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Explosion CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Explosion();
            ((ExplosionSetterCommon)((IExplosionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Explosion item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ExplosionSetterCommon)((IExplosionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Explosion GetNew()
        {
            return new Explosion();
        }

    }
    #endregion

    #region Interface
    public partial interface IExplosion :
        IExplosionGetter,
        IFallout4MajorRecord,
        ITranslatedNamed,
        IObjectBounded,
        ILoquiObjectSetter<IExplosionInternal>,
        IFormLinkContainer
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ObjectBounds ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new Model? Model { get; set; }
        new FormLinkNullable<IEffectRecordGetter> ObjectEffect { get; set; }
        new FormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier { get; set; }
        new FormLink<ILightGetter> Light { get; set; }
        new FormLink<ISoundDescriptorGetter> Sound1 { get; set; }
        new FormLink<ISoundDescriptorGetter> Sound2 { get; set; }
        new FormLink<IImpactDataSetGetter> ImpactDataSet { get; set; }
        new FormLink<IFallout4MajorRecordGetter> PlacedObject { get; set; }
        new FormLink<IProjectileGetter> SpawnProjectile { get; set; }
        new Single Force { get; set; }
        new Single Damage { get; set; }
        new Single Radius { get; set; }
        new Single ISRadius { get; set; }
        new Single VerticalOffsetMult { get; set; }
        new Explosion.Flag Flags { get; set; }
        new SoundLevel SoundLevel { get; set; }
        new Explosion.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IExplosionInternal :
        IFallout4MajorRecordInternal,
        IExplosion,
        IExplosionGetter
    {
    }

    public partial interface IExplosionGetter :
        IFallout4MajorRecordGetter,
        ITranslatedNamedGetter,
        IObjectBoundedGetter,
        ILoquiObject<IExplosionGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Explosion_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IObjectBoundsGetter ObjectBounds { get; }
        ITranslatedStringGetter? Name { get; }
        IModelGetter? Model { get; }
        FormLinkNullable<IEffectRecordGetter> ObjectEffect { get; }
        FormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier { get; }
        FormLink<ILightGetter> Light { get; }
        FormLink<ISoundDescriptorGetter> Sound1 { get; }
        FormLink<ISoundDescriptorGetter> Sound2 { get; }
        FormLink<IImpactDataSetGetter> ImpactDataSet { get; }
        FormLink<IFallout4MajorRecordGetter> PlacedObject { get; }
        FormLink<IProjectileGetter> SpawnProjectile { get; }
        Single Force { get; }
        Single Damage { get; }
        Single Radius { get; }
        Single ISRadius { get; }
        Single VerticalOffsetMult { get; }
        Explosion.Flag Flags { get; }
        SoundLevel SoundLevel { get; }
        Explosion.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ExplosionMixIn
    {
        public static void Clear(this IExplosionInternal item)
        {
            ((ExplosionSetterCommon)((IExplosionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Explosion.Mask<bool> GetEqualsMask(
            this IExplosionGetter item,
            IExplosionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ExplosionCommon)((IExplosionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IExplosionGetter item,
            string? name = null,
            Explosion.Mask<bool>? printMask = null)
        {
            return ((ExplosionCommon)((IExplosionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IExplosionGetter item,
            FileGeneration fg,
            string? name = null,
            Explosion.Mask<bool>? printMask = null)
        {
            ((ExplosionCommon)((IExplosionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IExplosionGetter item,
            IExplosionGetter rhs)
        {
            return ((ExplosionCommon)((IExplosionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IExplosionInternal lhs,
            IExplosionGetter rhs,
            out Explosion.ErrorMask errorMask,
            Explosion.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ExplosionSetterTranslationCommon)((IExplosionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Explosion.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IExplosionInternal lhs,
            IExplosionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ExplosionSetterTranslationCommon)((IExplosionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Explosion DeepCopy(
            this IExplosionGetter item,
            Explosion.TranslationMask? copyMask = null)
        {
            return ((ExplosionSetterTranslationCommon)((IExplosionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Explosion DeepCopy(
            this IExplosionGetter item,
            out Explosion.ErrorMask errorMask,
            Explosion.TranslationMask? copyMask = null)
        {
            return ((ExplosionSetterTranslationCommon)((IExplosionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Explosion DeepCopy(
            this IExplosionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ExplosionSetterTranslationCommon)((IExplosionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Explosion Duplicate(
            this IExplosionGetter item,
            FormKey formKey,
            Explosion.TranslationMask? copyMask = null)
        {
            return ((ExplosionCommon)((IExplosionGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IExplosionInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ExplosionSetterCommon)((IExplosionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Explosion_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        Name = 8,
        Model = 9,
        ObjectEffect = 10,
        ImageSpaceModifier = 11,
        Light = 12,
        Sound1 = 13,
        Sound2 = 14,
        ImpactDataSet = 15,
        PlacedObject = 16,
        SpawnProjectile = 17,
        Force = 18,
        Damage = 19,
        Radius = 20,
        ISRadius = 21,
        VerticalOffsetMult = 22,
        Flags = 23,
        SoundLevel = 24,
        DATADataTypeState = 25,
    }
    #endregion

    #region Registration
    public partial class Explosion_Registration : ILoquiRegistration
    {
        public static readonly Explosion_Registration Instance = new Explosion_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 109,
            version: 0);

        public const string GUID = "ce166e0d-db1e-4510-b8f6-af429a302425";

        public const ushort AdditionalFieldCount = 20;

        public const ushort FieldCount = 26;

        public static readonly Type MaskType = typeof(Explosion.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Explosion.ErrorMask);

        public static readonly Type ClassType = typeof(Explosion);

        public static readonly Type GetterType = typeof(IExplosionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IExplosion);

        public static readonly Type? InternalSetterType = typeof(IExplosionInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Explosion";

        public const string Name = "Explosion";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.EXPL;
        public static readonly Type BinaryWriteTranslation = typeof(ExplosionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ExplosionSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ExplosionSetterCommon Instance = new ExplosionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IExplosionInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Model = null;
            item.ObjectEffect = FormLinkNullable<IEffectRecordGetter>.Null;
            item.ImageSpaceModifier = FormLinkNullable<IImageSpaceAdapterGetter>.Null;
            item.Light = FormLink<ILightGetter>.Null;
            item.Sound1 = FormLink<ISoundDescriptorGetter>.Null;
            item.Sound2 = FormLink<ISoundDescriptorGetter>.Null;
            item.ImpactDataSet = FormLink<IImpactDataSetGetter>.Null;
            item.PlacedObject = FormLink<IFallout4MajorRecordGetter>.Null;
            item.SpawnProjectile = FormLink<IProjectileGetter>.Null;
            item.Force = default;
            item.Damage = default;
            item.Radius = default;
            item.ISRadius = default;
            item.VerticalOffsetMult = default;
            item.Flags = default;
            item.SoundLevel = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IExplosionInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IExplosionInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IExplosion obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.ObjectEffect = obj.ObjectEffect.Relink(mapping);
            obj.ImageSpaceModifier = obj.ImageSpaceModifier.Relink(mapping);
            obj.Light = obj.Light.Relink(mapping);
            obj.Sound1 = obj.Sound1.Relink(mapping);
            obj.Sound2 = obj.Sound2.Relink(mapping);
            obj.ImpactDataSet = obj.ImpactDataSet.Relink(mapping);
            obj.PlacedObject = obj.PlacedObject.Relink(mapping);
            obj.SpawnProjectile = obj.SpawnProjectile.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IExplosionInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IExplosionInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ExplosionBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ExplosionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Explosion)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Explosion)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ExplosionCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ExplosionCommon Instance = new ExplosionCommon();

        public Explosion.Mask<bool> GetEqualsMask(
            IExplosionGetter item,
            IExplosionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Explosion.Mask<bool>(false);
            ((ExplosionCommon)((IExplosionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IExplosionGetter item,
            IExplosionGetter rhs,
            Explosion.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectEffect = item.ObjectEffect.Equals(rhs.ObjectEffect);
            ret.ImageSpaceModifier = item.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier);
            ret.Light = item.Light.Equals(rhs.Light);
            ret.Sound1 = item.Sound1.Equals(rhs.Sound1);
            ret.Sound2 = item.Sound2.Equals(rhs.Sound2);
            ret.ImpactDataSet = item.ImpactDataSet.Equals(rhs.ImpactDataSet);
            ret.PlacedObject = item.PlacedObject.Equals(rhs.PlacedObject);
            ret.SpawnProjectile = item.SpawnProjectile.Equals(rhs.SpawnProjectile);
            ret.Force = item.Force.EqualsWithin(rhs.Force);
            ret.Damage = item.Damage.EqualsWithin(rhs.Damage);
            ret.Radius = item.Radius.EqualsWithin(rhs.Radius);
            ret.ISRadius = item.ISRadius.EqualsWithin(rhs.ISRadius);
            ret.VerticalOffsetMult = item.VerticalOffsetMult.EqualsWithin(rhs.VerticalOffsetMult);
            ret.Flags = item.Flags == rhs.Flags;
            ret.SoundLevel = item.SoundLevel == rhs.SoundLevel;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IExplosionGetter item,
            string? name = null,
            Explosion.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IExplosionGetter item,
            FileGeneration fg,
            string? name = null,
            Explosion.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Explosion =>");
            }
            else
            {
                fg.AppendLine($"{name} (Explosion) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IExplosionGetter item,
            FileGeneration fg,
            Explosion.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.ObjectEffect ?? true)
            {
                fg.AppendItem(item.ObjectEffect.FormKeyNullable, "ObjectEffect");
            }
            if (printMask?.ImageSpaceModifier ?? true)
            {
                fg.AppendItem(item.ImageSpaceModifier.FormKeyNullable, "ImageSpaceModifier");
            }
            if (printMask?.Light ?? true)
            {
                fg.AppendItem(item.Light.FormKey, "Light");
            }
            if (printMask?.Sound1 ?? true)
            {
                fg.AppendItem(item.Sound1.FormKey, "Sound1");
            }
            if (printMask?.Sound2 ?? true)
            {
                fg.AppendItem(item.Sound2.FormKey, "Sound2");
            }
            if (printMask?.ImpactDataSet ?? true)
            {
                fg.AppendItem(item.ImpactDataSet.FormKey, "ImpactDataSet");
            }
            if (printMask?.PlacedObject ?? true)
            {
                fg.AppendItem(item.PlacedObject.FormKey, "PlacedObject");
            }
            if (printMask?.SpawnProjectile ?? true)
            {
                fg.AppendItem(item.SpawnProjectile.FormKey, "SpawnProjectile");
            }
            if (printMask?.Force ?? true)
            {
                fg.AppendItem(item.Force, "Force");
            }
            if (printMask?.Damage ?? true)
            {
                fg.AppendItem(item.Damage, "Damage");
            }
            if (printMask?.Radius ?? true)
            {
                fg.AppendItem(item.Radius, "Radius");
            }
            if (printMask?.ISRadius ?? true)
            {
                fg.AppendItem(item.ISRadius, "ISRadius");
            }
            if (printMask?.VerticalOffsetMult ?? true)
            {
                fg.AppendItem(item.VerticalOffsetMult, "VerticalOffsetMult");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.SoundLevel ?? true)
            {
                fg.AppendItem(item.SoundLevel, "SoundLevel");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static Explosion_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Explosion_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Explosion_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Explosion_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Explosion_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Explosion_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Explosion_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Explosion_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Explosion_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Explosion_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Explosion_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Explosion_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IExplosionGetter? lhs,
            IExplosionGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.ObjectEffect.Equals(rhs.ObjectEffect)) return false;
            if (!lhs.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier)) return false;
            if (!lhs.Light.Equals(rhs.Light)) return false;
            if (!lhs.Sound1.Equals(rhs.Sound1)) return false;
            if (!lhs.Sound2.Equals(rhs.Sound2)) return false;
            if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            if (!lhs.PlacedObject.Equals(rhs.PlacedObject)) return false;
            if (!lhs.SpawnProjectile.Equals(rhs.SpawnProjectile)) return false;
            if (!lhs.Force.EqualsWithin(rhs.Force)) return false;
            if (!lhs.Damage.EqualsWithin(rhs.Damage)) return false;
            if (!lhs.Radius.EqualsWithin(rhs.Radius)) return false;
            if (!lhs.ISRadius.EqualsWithin(rhs.ISRadius)) return false;
            if (!lhs.VerticalOffsetMult.EqualsWithin(rhs.VerticalOffsetMult)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.SoundLevel != rhs.SoundLevel) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IExplosionGetter?)lhs,
                rhs: rhs as IExplosionGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IExplosionGetter?)lhs,
                rhs: rhs as IExplosionGetter);
        }
        
        public virtual int GetHashCode(IExplosionGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.ObjectEffect);
            hash.Add(item.ImageSpaceModifier);
            hash.Add(item.Light);
            hash.Add(item.Sound1);
            hash.Add(item.Sound2);
            hash.Add(item.ImpactDataSet);
            hash.Add(item.PlacedObject);
            hash.Add(item.SpawnProjectile);
            hash.Add(item.Force);
            hash.Add(item.Damage);
            hash.Add(item.Radius);
            hash.Add(item.ISRadius);
            hash.Add(item.VerticalOffsetMult);
            hash.Add(item.Flags);
            hash.Add(item.SoundLevel);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IExplosionGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IExplosionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Explosion.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IExplosionGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ObjectEffect.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ObjectEffect);
            }
            if (obj.ImageSpaceModifier.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ImageSpaceModifier);
            }
            yield return FormLinkInformation.Factory(obj.Light);
            yield return FormLinkInformation.Factory(obj.Sound1);
            yield return FormLinkInformation.Factory(obj.Sound2);
            yield return FormLinkInformation.Factory(obj.ImpactDataSet);
            yield return FormLinkInformation.Factory(obj.PlacedObject);
            yield return FormLinkInformation.Factory(obj.SpawnProjectile);
            yield break;
        }
        
        #region Duplicate
        public Explosion Duplicate(
            IExplosionGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Explosion(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IExplosion)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IExplosion)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ExplosionSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ExplosionSetterTranslationCommon Instance = new ExplosionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IExplosionInternal item,
            IExplosionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IExplosion item,
            IExplosionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Explosion_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Explosion_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Explosion_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Explosion_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Explosion_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Explosion_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.ObjectEffect) ?? true))
            {
                item.ObjectEffect = new FormLinkNullable<IEffectRecordGetter>(rhs.ObjectEffect.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.ImageSpaceModifier) ?? true))
            {
                item.ImageSpaceModifier = new FormLinkNullable<IImageSpaceAdapterGetter>(rhs.ImageSpaceModifier.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.Light) ?? true))
            {
                item.Light = new FormLink<ILightGetter>(rhs.Light.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.Sound1) ?? true))
            {
                item.Sound1 = new FormLink<ISoundDescriptorGetter>(rhs.Sound1.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.Sound2) ?? true))
            {
                item.Sound2 = new FormLink<ISoundDescriptorGetter>(rhs.Sound2.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet = new FormLink<IImpactDataSetGetter>(rhs.ImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.PlacedObject) ?? true))
            {
                item.PlacedObject = new FormLink<IFallout4MajorRecordGetter>(rhs.PlacedObject.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.SpawnProjectile) ?? true))
            {
                item.SpawnProjectile = new FormLink<IProjectileGetter>(rhs.SpawnProjectile.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.Force) ?? true))
            {
                item.Force = rhs.Force;
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.Damage) ?? true))
            {
                item.Damage = rhs.Damage;
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.ISRadius) ?? true))
            {
                item.ISRadius = rhs.ISRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.VerticalOffsetMult) ?? true))
            {
                item.VerticalOffsetMult = rhs.VerticalOffsetMult;
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.SoundLevel) ?? true))
            {
                item.SoundLevel = rhs.SoundLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Explosion_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IExplosionInternal)item,
                rhs: (IExplosionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IExplosion)item,
                rhs: (IExplosionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IExplosionInternal)item,
                rhs: (IExplosionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IExplosion)item,
                rhs: (IExplosionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Explosion DeepCopy(
            IExplosionGetter item,
            Explosion.TranslationMask? copyMask = null)
        {
            Explosion ret = (Explosion)((ExplosionCommon)((IExplosionGetter)item).CommonInstance()!).GetNew();
            ((ExplosionSetterTranslationCommon)((IExplosionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Explosion DeepCopy(
            IExplosionGetter item,
            out Explosion.ErrorMask errorMask,
            Explosion.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Explosion ret = (Explosion)((ExplosionCommon)((IExplosionGetter)item).CommonInstance()!).GetNew();
            ((ExplosionSetterTranslationCommon)((IExplosionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Explosion.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Explosion DeepCopy(
            IExplosionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Explosion ret = (Explosion)((ExplosionCommon)((IExplosionGetter)item).CommonInstance()!).GetNew();
            ((ExplosionSetterTranslationCommon)((IExplosionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Explosion
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Explosion_Registration.Instance;
        public new static Explosion_Registration Registration => Explosion_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ExplosionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ExplosionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ExplosionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ExplosionBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ExplosionBinaryWriteTranslation Instance = new ExplosionBinaryWriteTranslation();

        public static void WriteEmbedded(
            IExplosionGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IExplosionGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObjectEffect,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.EITM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImageSpaceModifier,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MNAM));
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Light);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound1);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound2);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImpactDataSet);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.PlacedObject);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SpawnProjectile);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Force);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Damage);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Radius);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ISRadius);
                if (!item.DATADataTypeState.HasFlag(Explosion.DATADataType.Break0))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.VerticalOffsetMult);
                    if (!item.DATADataTypeState.HasFlag(Explosion.DATADataType.Break1))
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<Explosion.Flag>.Instance.Write(
                            writer,
                            item.Flags,
                            length: 4);
                        if (!item.DATADataTypeState.HasFlag(Explosion.DATADataType.Break2))
                        {
                            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoundLevel>.Instance.Write(
                                writer,
                                item.SoundLevel,
                                length: 4);
                        }
                    }
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IExplosionGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.EXPL),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IExplosionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IExplosionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IExplosionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ExplosionBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static ExplosionBinaryCreateTranslation Instance = new ExplosionBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.EXPL;
        public static void FillBinaryStructs(
            IExplosionInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IExplosionInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)Explosion_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Explosion_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Explosion_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Explosion_FieldIndex.Model;
                }
                case RecordTypeInts.EITM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObjectEffect = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Explosion_FieldIndex.ObjectEffect;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImageSpaceModifier = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Explosion_FieldIndex.ImageSpaceModifier;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Light = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Sound1 = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Sound2 = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.ImpactDataSet = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.PlacedObject = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.SpawnProjectile = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Force = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Damage = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Radius = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ISRadius = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= Explosion.DATADataType.Break0;
                        return (int)Explosion_FieldIndex.ISRadius;
                    }
                    item.VerticalOffsetMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= Explosion.DATADataType.Break1;
                        return (int)Explosion_FieldIndex.VerticalOffsetMult;
                    }
                    item.Flags = EnumBinaryTranslation<Explosion.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= Explosion.DATADataType.Break2;
                        return (int)Explosion_FieldIndex.Flags;
                    }
                    item.SoundLevel = EnumBinaryTranslation<SoundLevel>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    return (int)Explosion_FieldIndex.SoundLevel;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ExplosionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ExplosionBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IExplosionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Explosion_Registration.Instance;
        public new static Explosion_Registration Registration => Explosion_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ExplosionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ExplosionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ExplosionCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ExplosionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ExplosionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IModelGetter? Model { get; private set; }
        #region ObjectEffect
        private int? _ObjectEffectLocation;
        public FormLinkNullable<IEffectRecordGetter> ObjectEffect => _ObjectEffectLocation.HasValue ? new FormLinkNullable<IEffectRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ObjectEffectLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEffectRecordGetter>.Null;
        #endregion
        #region ImageSpaceModifier
        private int? _ImageSpaceModifierLocation;
        public FormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier => _ImageSpaceModifierLocation.HasValue ? new FormLinkNullable<IImageSpaceAdapterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ImageSpaceModifierLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IImageSpaceAdapterGetter>.Null;
        #endregion
        private int? _DATALocation;
        public Explosion.DATADataType DATADataTypeState { get; private set; }
        #region Light
        private int _LightLocation => _DATALocation!.Value;
        private bool _Light_IsSet => _DATALocation.HasValue;
        public FormLink<ILightGetter> Light => _Light_IsSet ? new FormLink<ILightGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_LightLocation, 0x4)))) : FormLink<ILightGetter>.Null;
        #endregion
        #region Sound1
        private int _Sound1Location => _DATALocation!.Value + 0x4;
        private bool _Sound1_IsSet => _DATALocation.HasValue;
        public FormLink<ISoundDescriptorGetter> Sound1 => _Sound1_IsSet ? new FormLink<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_Sound1Location, 0x4)))) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        #region Sound2
        private int _Sound2Location => _DATALocation!.Value + 0x8;
        private bool _Sound2_IsSet => _DATALocation.HasValue;
        public FormLink<ISoundDescriptorGetter> Sound2 => _Sound2_IsSet ? new FormLink<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_Sound2Location, 0x4)))) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        #region ImpactDataSet
        private int _ImpactDataSetLocation => _DATALocation!.Value + 0xC;
        private bool _ImpactDataSet_IsSet => _DATALocation.HasValue;
        public FormLink<IImpactDataSetGetter> ImpactDataSet => _ImpactDataSet_IsSet ? new FormLink<IImpactDataSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ImpactDataSetLocation, 0x4)))) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region PlacedObject
        private int _PlacedObjectLocation => _DATALocation!.Value + 0x10;
        private bool _PlacedObject_IsSet => _DATALocation.HasValue;
        public FormLink<IFallout4MajorRecordGetter> PlacedObject => _PlacedObject_IsSet ? new FormLink<IFallout4MajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_PlacedObjectLocation, 0x4)))) : FormLink<IFallout4MajorRecordGetter>.Null;
        #endregion
        #region SpawnProjectile
        private int _SpawnProjectileLocation => _DATALocation!.Value + 0x14;
        private bool _SpawnProjectile_IsSet => _DATALocation.HasValue;
        public FormLink<IProjectileGetter> SpawnProjectile => _SpawnProjectile_IsSet ? new FormLink<IProjectileGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_SpawnProjectileLocation, 0x4)))) : FormLink<IProjectileGetter>.Null;
        #endregion
        #region Force
        private int _ForceLocation => _DATALocation!.Value + 0x18;
        private bool _Force_IsSet => _DATALocation.HasValue;
        public Single Force => _Force_IsSet ? _data.Slice(_ForceLocation, 4).Float() : default;
        #endregion
        #region Damage
        private int _DamageLocation => _DATALocation!.Value + 0x1C;
        private bool _Damage_IsSet => _DATALocation.HasValue;
        public Single Damage => _Damage_IsSet ? _data.Slice(_DamageLocation, 4).Float() : default;
        #endregion
        #region Radius
        private int _RadiusLocation => _DATALocation!.Value + 0x20;
        private bool _Radius_IsSet => _DATALocation.HasValue;
        public Single Radius => _Radius_IsSet ? _data.Slice(_RadiusLocation, 4).Float() : default;
        #endregion
        #region ISRadius
        private int _ISRadiusLocation => _DATALocation!.Value + 0x24;
        private bool _ISRadius_IsSet => _DATALocation.HasValue;
        public Single ISRadius => _ISRadius_IsSet ? _data.Slice(_ISRadiusLocation, 4).Float() : default;
        #endregion
        #region VerticalOffsetMult
        private int _VerticalOffsetMultLocation => _DATALocation!.Value + 0x28;
        private bool _VerticalOffsetMult_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Explosion.DATADataType.Break0);
        public Single VerticalOffsetMult => _VerticalOffsetMult_IsSet ? _data.Slice(_VerticalOffsetMultLocation, 4).Float() : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x2C;
        private bool _Flags_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Explosion.DATADataType.Break1);
        public Explosion.Flag Flags => _Flags_IsSet ? (Explosion.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region SoundLevel
        private int _SoundLevelLocation => _DATALocation!.Value + 0x30;
        private bool _SoundLevel_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Explosion.DATADataType.Break2);
        public SoundLevel SoundLevel => _SoundLevel_IsSet ? (SoundLevel)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_SoundLevelLocation, 0x4)) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ExplosionBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ExplosionBinaryOverlay ExplosionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new ExplosionBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ExplosionBinaryOverlay ExplosionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ExplosionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Explosion_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Explosion_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Explosion_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Explosion_FieldIndex.Model;
                }
                case RecordTypeInts.EITM:
                {
                    _ObjectEffectLocation = (stream.Position - offset);
                    return (int)Explosion_FieldIndex.ObjectEffect;
                }
                case RecordTypeInts.MNAM:
                {
                    _ImageSpaceModifierLocation = (stream.Position - offset);
                    return (int)Explosion_FieldIndex.ImageSpaceModifier;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x28)
                    {
                        this.DATADataTypeState |= Explosion.DATADataType.Break0;
                    }
                    if (subLen <= 0x2C)
                    {
                        this.DATADataTypeState |= Explosion.DATADataType.Break1;
                    }
                    if (subLen <= 0x30)
                    {
                        this.DATADataTypeState |= Explosion.DATADataType.Break2;
                    }
                    return (int)Explosion_FieldIndex.SoundLevel;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ExplosionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IExplosionGetter rhs)) return false;
            return ((ExplosionCommon)((IExplosionGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IExplosionGetter? obj)
        {
            return ((ExplosionCommon)((IExplosionGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ExplosionCommon)((IExplosionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

