/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class SoundDescriptor :
        Fallout4MajorRecord,
        ISoundDescriptorInternal,
        ILoquiObjectSetter<SoundDescriptor>,
        IEquatable<ISoundDescriptorGetter>
    {
        #region Ctor
        protected SoundDescriptor()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _CNAM;
        public MemorySlice<Byte>? CNAM
        {
            get => this._CNAM;
            set => this._CNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISoundDescriptorGetter.CNAM => this.CNAM;
        #endregion
        #region Category
        public FormLinkNullable<ISoundCategoryGetter> Category { get; set; } = new FormLinkNullable<ISoundCategoryGetter>();
        #endregion
        #region AlternateSoundFor
        public FormLinkNullable<ISoundDescriptorGetter> AlternateSoundFor { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region SoundFiles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String> _SoundFiles = new ExtendedList<String>();
        public ExtendedList<String> SoundFiles
        {
            get => this._SoundFiles;
            protected set => this._SoundFiles = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String> ISoundDescriptorGetter.SoundFiles => _SoundFiles;
        #endregion

        #endregion
        #region OutputModel
        public FormLinkNullable<ISoundOutputModelGetter> OutputModel { get; set; } = new FormLinkNullable<ISoundOutputModelGetter>();
        #endregion
        #region String
        public String? String { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISoundDescriptorGetter.String => this.String;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> ISoundDescriptorGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region LoopAndRumble
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundLoopAndRumble? _LoopAndRumble;
        public SoundLoopAndRumble? LoopAndRumble
        {
            get => _LoopAndRumble;
            set => _LoopAndRumble = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundLoopAndRumbleGetter? ISoundDescriptorGetter.LoopAndRumble => this.LoopAndRumble;
        #endregion
        #region PercentFrequencyShift
        public SByte PercentFrequencyShift { get; set; } = default;
        #endregion
        #region PercentFrequencyVariance
        public SByte PercentFrequencyVariance { get; set; } = default;
        #endregion
        #region Priority
        public SByte Priority { get; set; } = default;
        #endregion
        #region Variance
        public SByte Variance { get; set; } = default;
        #endregion
        #region StaticAttenuation
        public Single StaticAttenuation { get; set; } = default;
        #endregion
        #region BNAMDataTypeState
        public SoundDescriptor.BNAMDataType BNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoundDescriptorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISoundDescriptorGetter rhs)) return false;
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISoundDescriptorGetter? obj)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.CNAM = initialValue;
                this.Category = initialValue;
                this.AlternateSoundFor = initialValue;
                this.SoundFiles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.OutputModel = initialValue;
                this.String = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.LoopAndRumble = new MaskItem<TItem, SoundLoopAndRumble.Mask<TItem>?>(initialValue, new SoundLoopAndRumble.Mask<TItem>(initialValue));
                this.PercentFrequencyShift = initialValue;
                this.PercentFrequencyVariance = initialValue;
                this.Priority = initialValue;
                this.Variance = initialValue;
                this.StaticAttenuation = initialValue;
                this.BNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem CNAM,
                TItem Category,
                TItem AlternateSoundFor,
                TItem SoundFiles,
                TItem OutputModel,
                TItem String,
                TItem Conditions,
                TItem LoopAndRumble,
                TItem PercentFrequencyShift,
                TItem PercentFrequencyVariance,
                TItem Priority,
                TItem Variance,
                TItem StaticAttenuation,
                TItem BNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.CNAM = CNAM;
                this.Category = Category;
                this.AlternateSoundFor = AlternateSoundFor;
                this.SoundFiles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SoundFiles, Enumerable.Empty<(int Index, TItem Value)>());
                this.OutputModel = OutputModel;
                this.String = String;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.LoopAndRumble = new MaskItem<TItem, SoundLoopAndRumble.Mask<TItem>?>(LoopAndRumble, new SoundLoopAndRumble.Mask<TItem>(LoopAndRumble));
                this.PercentFrequencyShift = PercentFrequencyShift;
                this.PercentFrequencyVariance = PercentFrequencyVariance;
                this.Priority = Priority;
                this.Variance = Variance;
                this.StaticAttenuation = StaticAttenuation;
                this.BNAMDataTypeState = BNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem CNAM;
            public TItem Category;
            public TItem AlternateSoundFor;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SoundFiles;
            public TItem OutputModel;
            public TItem String;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, SoundLoopAndRumble.Mask<TItem>?>? LoopAndRumble { get; set; }
            public TItem PercentFrequencyShift;
            public TItem PercentFrequencyVariance;
            public TItem Priority;
            public TItem Variance;
            public TItem StaticAttenuation;
            public TItem BNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.CNAM, rhs.CNAM)) return false;
                if (!object.Equals(this.Category, rhs.Category)) return false;
                if (!object.Equals(this.AlternateSoundFor, rhs.AlternateSoundFor)) return false;
                if (!object.Equals(this.SoundFiles, rhs.SoundFiles)) return false;
                if (!object.Equals(this.OutputModel, rhs.OutputModel)) return false;
                if (!object.Equals(this.String, rhs.String)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.LoopAndRumble, rhs.LoopAndRumble)) return false;
                if (!object.Equals(this.PercentFrequencyShift, rhs.PercentFrequencyShift)) return false;
                if (!object.Equals(this.PercentFrequencyVariance, rhs.PercentFrequencyVariance)) return false;
                if (!object.Equals(this.Priority, rhs.Priority)) return false;
                if (!object.Equals(this.Variance, rhs.Variance)) return false;
                if (!object.Equals(this.StaticAttenuation, rhs.StaticAttenuation)) return false;
                if (!object.Equals(this.BNAMDataTypeState, rhs.BNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.CNAM);
                hash.Add(this.Category);
                hash.Add(this.AlternateSoundFor);
                hash.Add(this.SoundFiles);
                hash.Add(this.OutputModel);
                hash.Add(this.String);
                hash.Add(this.Conditions);
                hash.Add(this.LoopAndRumble);
                hash.Add(this.PercentFrequencyShift);
                hash.Add(this.PercentFrequencyVariance);
                hash.Add(this.Priority);
                hash.Add(this.Variance);
                hash.Add(this.StaticAttenuation);
                hash.Add(this.BNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.CNAM)) return false;
                if (!eval(this.Category)) return false;
                if (!eval(this.AlternateSoundFor)) return false;
                if (this.SoundFiles != null)
                {
                    if (!eval(this.SoundFiles.Overall)) return false;
                    if (this.SoundFiles.Specific != null)
                    {
                        foreach (var item in this.SoundFiles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.OutputModel)) return false;
                if (!eval(this.String)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (LoopAndRumble != null)
                {
                    if (!eval(this.LoopAndRumble.Overall)) return false;
                    if (this.LoopAndRumble.Specific != null && !this.LoopAndRumble.Specific.All(eval)) return false;
                }
                if (!eval(this.PercentFrequencyShift)) return false;
                if (!eval(this.PercentFrequencyVariance)) return false;
                if (!eval(this.Priority)) return false;
                if (!eval(this.Variance)) return false;
                if (!eval(this.StaticAttenuation)) return false;
                if (!eval(this.BNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.CNAM)) return true;
                if (eval(this.Category)) return true;
                if (eval(this.AlternateSoundFor)) return true;
                if (this.SoundFiles != null)
                {
                    if (eval(this.SoundFiles.Overall)) return true;
                    if (this.SoundFiles.Specific != null)
                    {
                        foreach (var item in this.SoundFiles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.OutputModel)) return true;
                if (eval(this.String)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (LoopAndRumble != null)
                {
                    if (eval(this.LoopAndRumble.Overall)) return true;
                    if (this.LoopAndRumble.Specific != null && this.LoopAndRumble.Specific.Any(eval)) return true;
                }
                if (eval(this.PercentFrequencyShift)) return true;
                if (eval(this.PercentFrequencyVariance)) return true;
                if (eval(this.Priority)) return true;
                if (eval(this.Variance)) return true;
                if (eval(this.StaticAttenuation)) return true;
                if (eval(this.BNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundDescriptor.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.CNAM = eval(this.CNAM);
                obj.Category = eval(this.Category);
                obj.AlternateSoundFor = eval(this.AlternateSoundFor);
                if (SoundFiles != null)
                {
                    obj.SoundFiles = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SoundFiles.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SoundFiles.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SoundFiles.Specific = l;
                        foreach (var item in SoundFiles.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.OutputModel = eval(this.OutputModel);
                obj.String = eval(this.String);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.LoopAndRumble = this.LoopAndRumble == null ? null : new MaskItem<R, SoundLoopAndRumble.Mask<R>?>(eval(this.LoopAndRumble.Overall), this.LoopAndRumble.Specific?.Translate(eval));
                obj.PercentFrequencyShift = eval(this.PercentFrequencyShift);
                obj.PercentFrequencyVariance = eval(this.PercentFrequencyVariance);
                obj.Priority = eval(this.Priority);
                obj.Variance = eval(this.Variance);
                obj.StaticAttenuation = eval(this.StaticAttenuation);
                obj.BNAMDataTypeState = eval(this.BNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SoundDescriptor.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SoundDescriptor.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SoundDescriptor.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.CNAM ?? true)
                    {
                        fg.AppendItem(CNAM, "CNAM");
                    }
                    if (printMask?.Category ?? true)
                    {
                        fg.AppendItem(Category, "Category");
                    }
                    if (printMask?.AlternateSoundFor ?? true)
                    {
                        fg.AppendItem(AlternateSoundFor, "AlternateSoundFor");
                    }
                    if ((printMask?.SoundFiles?.Overall ?? true)
                        && SoundFiles.TryGet(out var SoundFilesItem))
                    {
                        fg.AppendLine("SoundFiles =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SoundFilesItem.Overall);
                            if (SoundFilesItem.Specific != null)
                            {
                                foreach (var subItem in SoundFilesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.OutputModel ?? true)
                    {
                        fg.AppendItem(OutputModel, "OutputModel");
                    }
                    if (printMask?.String ?? true)
                    {
                        fg.AppendItem(String, "String");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.LoopAndRumble?.Overall ?? true)
                    {
                        LoopAndRumble?.ToString(fg);
                    }
                    if (printMask?.PercentFrequencyShift ?? true)
                    {
                        fg.AppendItem(PercentFrequencyShift, "PercentFrequencyShift");
                    }
                    if (printMask?.PercentFrequencyVariance ?? true)
                    {
                        fg.AppendItem(PercentFrequencyVariance, "PercentFrequencyVariance");
                    }
                    if (printMask?.Priority ?? true)
                    {
                        fg.AppendItem(Priority, "Priority");
                    }
                    if (printMask?.Variance ?? true)
                    {
                        fg.AppendItem(Variance, "Variance");
                    }
                    if (printMask?.StaticAttenuation ?? true)
                    {
                        fg.AppendItem(StaticAttenuation, "StaticAttenuation");
                    }
                    if (printMask?.BNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(BNAMDataTypeState, "BNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? CNAM;
            public Exception? Category;
            public Exception? AlternateSoundFor;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SoundFiles;
            public Exception? OutputModel;
            public Exception? String;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, SoundLoopAndRumble.ErrorMask?>? LoopAndRumble;
            public Exception? PercentFrequencyShift;
            public Exception? PercentFrequencyVariance;
            public Exception? Priority;
            public Exception? Variance;
            public Exception? StaticAttenuation;
            public Exception? BNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoundDescriptor_FieldIndex enu = (SoundDescriptor_FieldIndex)index;
                switch (enu)
                {
                    case SoundDescriptor_FieldIndex.CNAM:
                        return CNAM;
                    case SoundDescriptor_FieldIndex.Category:
                        return Category;
                    case SoundDescriptor_FieldIndex.AlternateSoundFor:
                        return AlternateSoundFor;
                    case SoundDescriptor_FieldIndex.SoundFiles:
                        return SoundFiles;
                    case SoundDescriptor_FieldIndex.OutputModel:
                        return OutputModel;
                    case SoundDescriptor_FieldIndex.String:
                        return String;
                    case SoundDescriptor_FieldIndex.Conditions:
                        return Conditions;
                    case SoundDescriptor_FieldIndex.LoopAndRumble:
                        return LoopAndRumble;
                    case SoundDescriptor_FieldIndex.PercentFrequencyShift:
                        return PercentFrequencyShift;
                    case SoundDescriptor_FieldIndex.PercentFrequencyVariance:
                        return PercentFrequencyVariance;
                    case SoundDescriptor_FieldIndex.Priority:
                        return Priority;
                    case SoundDescriptor_FieldIndex.Variance:
                        return Variance;
                    case SoundDescriptor_FieldIndex.StaticAttenuation:
                        return StaticAttenuation;
                    case SoundDescriptor_FieldIndex.BNAMDataTypeState:
                        return BNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoundDescriptor_FieldIndex enu = (SoundDescriptor_FieldIndex)index;
                switch (enu)
                {
                    case SoundDescriptor_FieldIndex.CNAM:
                        this.CNAM = ex;
                        break;
                    case SoundDescriptor_FieldIndex.Category:
                        this.Category = ex;
                        break;
                    case SoundDescriptor_FieldIndex.AlternateSoundFor:
                        this.AlternateSoundFor = ex;
                        break;
                    case SoundDescriptor_FieldIndex.SoundFiles:
                        this.SoundFiles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SoundDescriptor_FieldIndex.OutputModel:
                        this.OutputModel = ex;
                        break;
                    case SoundDescriptor_FieldIndex.String:
                        this.String = ex;
                        break;
                    case SoundDescriptor_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case SoundDescriptor_FieldIndex.LoopAndRumble:
                        this.LoopAndRumble = new MaskItem<Exception?, SoundLoopAndRumble.ErrorMask?>(ex, null);
                        break;
                    case SoundDescriptor_FieldIndex.PercentFrequencyShift:
                        this.PercentFrequencyShift = ex;
                        break;
                    case SoundDescriptor_FieldIndex.PercentFrequencyVariance:
                        this.PercentFrequencyVariance = ex;
                        break;
                    case SoundDescriptor_FieldIndex.Priority:
                        this.Priority = ex;
                        break;
                    case SoundDescriptor_FieldIndex.Variance:
                        this.Variance = ex;
                        break;
                    case SoundDescriptor_FieldIndex.StaticAttenuation:
                        this.StaticAttenuation = ex;
                        break;
                    case SoundDescriptor_FieldIndex.BNAMDataTypeState:
                        this.BNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoundDescriptor_FieldIndex enu = (SoundDescriptor_FieldIndex)index;
                switch (enu)
                {
                    case SoundDescriptor_FieldIndex.CNAM:
                        this.CNAM = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.Category:
                        this.Category = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.AlternateSoundFor:
                        this.AlternateSoundFor = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.SoundFiles:
                        this.SoundFiles = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SoundDescriptor_FieldIndex.OutputModel:
                        this.OutputModel = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.String:
                        this.String = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case SoundDescriptor_FieldIndex.LoopAndRumble:
                        this.LoopAndRumble = (MaskItem<Exception?, SoundLoopAndRumble.ErrorMask?>?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.PercentFrequencyShift:
                        this.PercentFrequencyShift = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.PercentFrequencyVariance:
                        this.PercentFrequencyVariance = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.Priority:
                        this.Priority = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.Variance:
                        this.Variance = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.StaticAttenuation:
                        this.StaticAttenuation = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.BNAMDataTypeState:
                        this.BNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (CNAM != null) return true;
                if (Category != null) return true;
                if (AlternateSoundFor != null) return true;
                if (SoundFiles != null) return true;
                if (OutputModel != null) return true;
                if (String != null) return true;
                if (Conditions != null) return true;
                if (LoopAndRumble != null) return true;
                if (PercentFrequencyShift != null) return true;
                if (PercentFrequencyVariance != null) return true;
                if (Priority != null) return true;
                if (Variance != null) return true;
                if (StaticAttenuation != null) return true;
                if (BNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(CNAM, "CNAM");
                fg.AppendItem(Category, "Category");
                fg.AppendItem(AlternateSoundFor, "AlternateSoundFor");
                if (SoundFiles.TryGet(out var SoundFilesItem))
                {
                    fg.AppendLine("SoundFiles =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SoundFilesItem.Overall);
                        if (SoundFilesItem.Specific != null)
                        {
                            foreach (var subItem in SoundFilesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(OutputModel, "OutputModel");
                fg.AppendItem(String, "String");
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                LoopAndRumble?.ToString(fg);
                fg.AppendItem(PercentFrequencyShift, "PercentFrequencyShift");
                fg.AppendItem(PercentFrequencyVariance, "PercentFrequencyVariance");
                fg.AppendItem(Priority, "Priority");
                fg.AppendItem(Variance, "Variance");
                fg.AppendItem(StaticAttenuation, "StaticAttenuation");
                fg.AppendItem(BNAMDataTypeState, "BNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.CNAM = this.CNAM.Combine(rhs.CNAM);
                ret.Category = this.Category.Combine(rhs.Category);
                ret.AlternateSoundFor = this.AlternateSoundFor.Combine(rhs.AlternateSoundFor);
                ret.SoundFiles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.SoundFiles?.Overall, rhs.SoundFiles?.Overall), ExceptionExt.Combine(this.SoundFiles?.Specific, rhs.SoundFiles?.Specific));
                ret.OutputModel = this.OutputModel.Combine(rhs.OutputModel);
                ret.String = this.String.Combine(rhs.String);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.LoopAndRumble = this.LoopAndRumble.Combine(rhs.LoopAndRumble, (l, r) => l.Combine(r));
                ret.PercentFrequencyShift = this.PercentFrequencyShift.Combine(rhs.PercentFrequencyShift);
                ret.PercentFrequencyVariance = this.PercentFrequencyVariance.Combine(rhs.PercentFrequencyVariance);
                ret.Priority = this.Priority.Combine(rhs.Priority);
                ret.Variance = this.Variance.Combine(rhs.Variance);
                ret.StaticAttenuation = this.StaticAttenuation.Combine(rhs.StaticAttenuation);
                ret.BNAMDataTypeState = this.BNAMDataTypeState.Combine(rhs.BNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool CNAM;
            public bool Category;
            public bool AlternateSoundFor;
            public bool SoundFiles;
            public bool OutputModel;
            public bool String;
            public Condition.TranslationMask? Conditions;
            public SoundLoopAndRumble.TranslationMask? LoopAndRumble;
            public bool PercentFrequencyShift;
            public bool PercentFrequencyVariance;
            public bool Priority;
            public bool Variance;
            public bool StaticAttenuation;
            public bool BNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.CNAM = defaultOn;
                this.Category = defaultOn;
                this.AlternateSoundFor = defaultOn;
                this.SoundFiles = defaultOn;
                this.OutputModel = defaultOn;
                this.String = defaultOn;
                this.PercentFrequencyShift = defaultOn;
                this.PercentFrequencyVariance = defaultOn;
                this.Priority = defaultOn;
                this.Variance = defaultOn;
                this.StaticAttenuation = defaultOn;
                this.BNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((CNAM, null));
                ret.Add((Category, null));
                ret.Add((AlternateSoundFor, null));
                ret.Add((SoundFiles, null));
                ret.Add((OutputModel, null));
                ret.Add((String, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((LoopAndRumble != null ? LoopAndRumble.OnOverall : DefaultOn, LoopAndRumble?.GetCrystal()));
                ret.Add((PercentFrequencyShift, null));
                ret.Add((PercentFrequencyVariance, null));
                ret.Add((Priority, null));
                ret.Add((Variance, null));
                ret.Add((StaticAttenuation, null));
                ret.Add((BNAMDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SoundDescriptor_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => SoundDescriptorCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoundDescriptorSetterCommon.Instance.RemapLinks(this, mapping);
        public SoundDescriptor(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private SoundDescriptor(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal SoundDescriptor(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SoundDescriptor(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public SoundDescriptor(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum BNAMDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundDescriptorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundDescriptorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static SoundDescriptor CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SoundDescriptor();
            ((SoundDescriptorSetterCommon)((ISoundDescriptorGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundDescriptor item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((SoundDescriptorSetterCommon)((ISoundDescriptorGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoundDescriptor GetNew()
        {
            return new SoundDescriptor();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundDescriptor :
        ISoundDescriptorGetter,
        IFallout4MajorRecord,
        ISound,
        ILoquiObjectSetter<ISoundDescriptorInternal>,
        IFormLinkContainer
    {
        new MemorySlice<Byte>? CNAM { get; set; }
        new FormLinkNullable<ISoundCategoryGetter> Category { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> AlternateSoundFor { get; set; }
        new ExtendedList<String> SoundFiles { get; }
        new FormLinkNullable<ISoundOutputModelGetter> OutputModel { get; set; }
        new String? String { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new SoundLoopAndRumble? LoopAndRumble { get; set; }
        new SByte PercentFrequencyShift { get; set; }
        new SByte PercentFrequencyVariance { get; set; }
        new SByte Priority { get; set; }
        new SByte Variance { get; set; }
        new Single StaticAttenuation { get; set; }
        new SoundDescriptor.BNAMDataType BNAMDataTypeState { get; set; }
    }

    public partial interface ISoundDescriptorInternal :
        IFallout4MajorRecordInternal,
        ISoundDescriptor,
        ISoundDescriptorGetter
    {
    }

    public partial interface ISoundDescriptorGetter :
        IFallout4MajorRecordGetter,
        ISoundGetter,
        ILoquiObject<ISoundDescriptorGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => SoundDescriptor_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? CNAM { get; }
        FormLinkNullable<ISoundCategoryGetter> Category { get; }
        FormLinkNullable<ISoundDescriptorGetter> AlternateSoundFor { get; }
        IReadOnlyList<String> SoundFiles { get; }
        FormLinkNullable<ISoundOutputModelGetter> OutputModel { get; }
        String? String { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        ISoundLoopAndRumbleGetter? LoopAndRumble { get; }
        SByte PercentFrequencyShift { get; }
        SByte PercentFrequencyVariance { get; }
        SByte Priority { get; }
        SByte Variance { get; }
        Single StaticAttenuation { get; }
        SoundDescriptor.BNAMDataType BNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundDescriptorMixIn
    {
        public static void Clear(this ISoundDescriptorInternal item)
        {
            ((SoundDescriptorSetterCommon)((ISoundDescriptorGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundDescriptor.Mask<bool> GetEqualsMask(
            this ISoundDescriptorGetter item,
            ISoundDescriptorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISoundDescriptorGetter item,
            string? name = null,
            SoundDescriptor.Mask<bool>? printMask = null)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISoundDescriptorGetter item,
            FileGeneration fg,
            string? name = null,
            SoundDescriptor.Mask<bool>? printMask = null)
        {
            ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundDescriptorGetter item,
            ISoundDescriptorGetter rhs)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISoundDescriptorInternal lhs,
            ISoundDescriptorGetter rhs,
            out SoundDescriptor.ErrorMask errorMask,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundDescriptor.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundDescriptorInternal lhs,
            ISoundDescriptorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundDescriptor DeepCopy(
            this ISoundDescriptorGetter item,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            return ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundDescriptor DeepCopy(
            this ISoundDescriptorGetter item,
            out SoundDescriptor.ErrorMask errorMask,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            return ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundDescriptor DeepCopy(
            this ISoundDescriptorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SoundDescriptor Duplicate(
            this ISoundDescriptorGetter item,
            FormKey formKey,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundDescriptorInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundDescriptorSetterCommon)((ISoundDescriptorGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum SoundDescriptor_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        CNAM = 6,
        Category = 7,
        AlternateSoundFor = 8,
        SoundFiles = 9,
        OutputModel = 10,
        String = 11,
        Conditions = 12,
        LoopAndRumble = 13,
        PercentFrequencyShift = 14,
        PercentFrequencyVariance = 15,
        Priority = 16,
        Variance = 17,
        StaticAttenuation = 18,
        BNAMDataTypeState = 19,
    }
    #endregion

    #region Registration
    public partial class SoundDescriptor_Registration : ILoquiRegistration
    {
        public static readonly SoundDescriptor_Registration Instance = new SoundDescriptor_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 82,
            version: 0);

        public const string GUID = "8ef28a33-b4e1-488e-bd9a-9231e58a3aad";

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(SoundDescriptor.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundDescriptor.ErrorMask);

        public static readonly Type ClassType = typeof(SoundDescriptor);

        public static readonly Type GetterType = typeof(ISoundDescriptorGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundDescriptor);

        public static readonly Type? InternalSetterType = typeof(ISoundDescriptorInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.SoundDescriptor";

        public const string Name = "SoundDescriptor";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SNDR;
        public static readonly Type BinaryWriteTranslation = typeof(SoundDescriptorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class SoundDescriptorSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly SoundDescriptorSetterCommon Instance = new SoundDescriptorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundDescriptorInternal item)
        {
            ClearPartial();
            item.CNAM = default;
            item.Category = FormLinkNullable<ISoundCategoryGetter>.Null;
            item.AlternateSoundFor = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.SoundFiles.Clear();
            item.OutputModel = FormLinkNullable<ISoundOutputModelGetter>.Null;
            item.String = default;
            item.Conditions.Clear();
            item.LoopAndRumble = null;
            item.PercentFrequencyShift = default;
            item.PercentFrequencyVariance = default;
            item.Priority = default;
            item.Variance = default;
            item.StaticAttenuation = default;
            item.BNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ISoundDescriptorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISoundDescriptorInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISoundDescriptor obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Category = obj.Category.Relink(mapping);
            obj.AlternateSoundFor = obj.AlternateSoundFor.Relink(mapping);
            obj.OutputModel = obj.OutputModel.Relink(mapping);
            obj.Conditions.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundDescriptorInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ISoundDescriptorInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: SoundDescriptorBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SoundDescriptorBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (SoundDescriptor)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (SoundDescriptor)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class SoundDescriptorCommon : Fallout4MajorRecordCommon
    {
        public new static readonly SoundDescriptorCommon Instance = new SoundDescriptorCommon();

        public SoundDescriptor.Mask<bool> GetEqualsMask(
            ISoundDescriptorGetter item,
            ISoundDescriptorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundDescriptor.Mask<bool>(false);
            ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundDescriptorGetter item,
            ISoundDescriptorGetter rhs,
            SoundDescriptor.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.CNAM = MemorySliceExt.Equal(item.CNAM, rhs.CNAM);
            ret.Category = item.Category.Equals(rhs.Category);
            ret.AlternateSoundFor = item.AlternateSoundFor.Equals(rhs.AlternateSoundFor);
            ret.SoundFiles = item.SoundFiles.CollectionEqualsHelper(
                rhs.SoundFiles,
                (l, r) => string.Equals(l, r),
                include);
            ret.OutputModel = item.OutputModel.Equals(rhs.OutputModel);
            ret.String = string.Equals(item.String, rhs.String);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LoopAndRumble = EqualsMaskHelper.EqualsHelper(
                item.LoopAndRumble,
                rhs.LoopAndRumble,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PercentFrequencyShift = item.PercentFrequencyShift == rhs.PercentFrequencyShift;
            ret.PercentFrequencyVariance = item.PercentFrequencyVariance == rhs.PercentFrequencyVariance;
            ret.Priority = item.Priority == rhs.Priority;
            ret.Variance = item.Variance == rhs.Variance;
            ret.StaticAttenuation = item.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation);
            ret.BNAMDataTypeState = item.BNAMDataTypeState == rhs.BNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ISoundDescriptorGetter item,
            string? name = null,
            SoundDescriptor.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISoundDescriptorGetter item,
            FileGeneration fg,
            string? name = null,
            SoundDescriptor.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SoundDescriptor =>");
            }
            else
            {
                fg.AppendLine($"{name} (SoundDescriptor) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISoundDescriptorGetter item,
            FileGeneration fg,
            SoundDescriptor.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.CNAM ?? true)
                && item.CNAM.TryGet(out var CNAMItem))
            {
                fg.AppendLine($"CNAM => {SpanExt.ToHexString(CNAMItem)}");
            }
            if (printMask?.Category ?? true)
            {
                fg.AppendItem(item.Category.FormKeyNullable, "Category");
            }
            if (printMask?.AlternateSoundFor ?? true)
            {
                fg.AppendItem(item.AlternateSoundFor.FormKeyNullable, "AlternateSoundFor");
            }
            if (printMask?.SoundFiles?.Overall ?? true)
            {
                fg.AppendLine("SoundFiles =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SoundFiles)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.OutputModel ?? true)
            {
                fg.AppendItem(item.OutputModel.FormKeyNullable, "OutputModel");
            }
            if ((printMask?.String ?? true)
                && item.String.TryGet(out var StringItem))
            {
                fg.AppendItem(StringItem, "String");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.LoopAndRumble?.Overall ?? true)
                && item.LoopAndRumble.TryGet(out var LoopAndRumbleItem))
            {
                LoopAndRumbleItem?.ToString(fg, "LoopAndRumble");
            }
            if (printMask?.PercentFrequencyShift ?? true)
            {
                fg.AppendItem(item.PercentFrequencyShift, "PercentFrequencyShift");
            }
            if (printMask?.PercentFrequencyVariance ?? true)
            {
                fg.AppendItem(item.PercentFrequencyVariance, "PercentFrequencyVariance");
            }
            if (printMask?.Priority ?? true)
            {
                fg.AppendItem(item.Priority, "Priority");
            }
            if (printMask?.Variance ?? true)
            {
                fg.AppendItem(item.Variance, "Variance");
            }
            if (printMask?.StaticAttenuation ?? true)
            {
                fg.AppendItem(item.StaticAttenuation, "StaticAttenuation");
            }
            if (printMask?.BNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.BNAMDataTypeState, "BNAMDataTypeState");
            }
        }
        
        public static SoundDescriptor_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (SoundDescriptor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new SoundDescriptor_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SoundDescriptor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundDescriptorGetter? lhs,
            ISoundDescriptorGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!MemorySliceExt.Equal(lhs.CNAM, rhs.CNAM)) return false;
            if (!lhs.Category.Equals(rhs.Category)) return false;
            if (!lhs.AlternateSoundFor.Equals(rhs.AlternateSoundFor)) return false;
            if (!lhs.SoundFiles.SequenceEqualNullable(rhs.SoundFiles)) return false;
            if (!lhs.OutputModel.Equals(rhs.OutputModel)) return false;
            if (!string.Equals(lhs.String, rhs.String)) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            if (!object.Equals(lhs.LoopAndRumble, rhs.LoopAndRumble)) return false;
            if (lhs.PercentFrequencyShift != rhs.PercentFrequencyShift) return false;
            if (lhs.PercentFrequencyVariance != rhs.PercentFrequencyVariance) return false;
            if (lhs.Priority != rhs.Priority) return false;
            if (lhs.Variance != rhs.Variance) return false;
            if (!lhs.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation)) return false;
            if (lhs.BNAMDataTypeState != rhs.BNAMDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISoundDescriptorGetter?)lhs,
                rhs: rhs as ISoundDescriptorGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISoundDescriptorGetter?)lhs,
                rhs: rhs as ISoundDescriptorGetter);
        }
        
        public virtual int GetHashCode(ISoundDescriptorGetter item)
        {
            var hash = new HashCode();
            if (item.CNAM.TryGet(out var CNAMItem))
            {
                hash.Add(CNAMItem);
            }
            hash.Add(item.Category);
            hash.Add(item.AlternateSoundFor);
            hash.Add(item.SoundFiles);
            hash.Add(item.OutputModel);
            if (item.String.TryGet(out var Stringitem))
            {
                hash.Add(Stringitem);
            }
            hash.Add(item.Conditions);
            if (item.LoopAndRumble.TryGet(out var LoopAndRumbleitem))
            {
                hash.Add(LoopAndRumbleitem);
            }
            hash.Add(item.PercentFrequencyShift);
            hash.Add(item.PercentFrequencyVariance);
            hash.Add(item.Priority);
            hash.Add(item.Variance);
            hash.Add(item.StaticAttenuation);
            hash.Add(item.BNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundDescriptorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundDescriptorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoundDescriptor.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ISoundDescriptorGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Category.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Category);
            }
            if (obj.AlternateSoundFor.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AlternateSoundFor);
            }
            if (obj.OutputModel.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.OutputModel);
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public SoundDescriptor Duplicate(
            ISoundDescriptorGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SoundDescriptor(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundDescriptor)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundDescriptor)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class SoundDescriptorSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly SoundDescriptorSetterTranslationCommon Instance = new SoundDescriptorSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundDescriptorInternal item,
            ISoundDescriptorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISoundDescriptor item,
            ISoundDescriptorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.CNAM) ?? true))
            {
                if(rhs.CNAM.TryGet(out var CNAMrhs))
                {
                    item.CNAM = CNAMrhs.ToArray();
                }
                else
                {
                    item.CNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Category) ?? true))
            {
                item.Category = new FormLinkNullable<ISoundCategoryGetter>(rhs.Category.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.AlternateSoundFor) ?? true))
            {
                item.AlternateSoundFor = new FormLinkNullable<ISoundDescriptorGetter>(rhs.AlternateSoundFor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.SoundFiles) ?? true))
            {
                errorMask?.PushIndex((int)SoundDescriptor_FieldIndex.SoundFiles);
                try
                {
                    item.SoundFiles.SetTo(rhs.SoundFiles);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.OutputModel) ?? true))
            {
                item.OutputModel = new FormLinkNullable<ISoundOutputModelGetter>(rhs.OutputModel.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.String) ?? true))
            {
                item.String = rhs.String;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)SoundDescriptor_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.LoopAndRumble) ?? true))
            {
                errorMask?.PushIndex((int)SoundDescriptor_FieldIndex.LoopAndRumble);
                try
                {
                    if(rhs.LoopAndRumble.TryGet(out var rhsLoopAndRumble))
                    {
                        item.LoopAndRumble = rhsLoopAndRumble.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoundDescriptor_FieldIndex.LoopAndRumble));
                    }
                    else
                    {
                        item.LoopAndRumble = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.PercentFrequencyShift) ?? true))
            {
                item.PercentFrequencyShift = rhs.PercentFrequencyShift;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.PercentFrequencyVariance) ?? true))
            {
                item.PercentFrequencyVariance = rhs.PercentFrequencyVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Priority) ?? true))
            {
                item.Priority = rhs.Priority;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Variance) ?? true))
            {
                item.Variance = rhs.Variance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.StaticAttenuation) ?? true))
            {
                item.StaticAttenuation = rhs.StaticAttenuation;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.BNAMDataTypeState) ?? true))
            {
                item.BNAMDataTypeState = rhs.BNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundDescriptorInternal)item,
                rhs: (ISoundDescriptorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundDescriptor)item,
                rhs: (ISoundDescriptorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundDescriptorInternal)item,
                rhs: (ISoundDescriptorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundDescriptor)item,
                rhs: (ISoundDescriptorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SoundDescriptor DeepCopy(
            ISoundDescriptorGetter item,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            SoundDescriptor ret = (SoundDescriptor)((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).GetNew();
            ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundDescriptor DeepCopy(
            ISoundDescriptorGetter item,
            out SoundDescriptor.ErrorMask errorMask,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundDescriptor ret = (SoundDescriptor)((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).GetNew();
            ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundDescriptor.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundDescriptor DeepCopy(
            ISoundDescriptorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundDescriptor ret = (SoundDescriptor)((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).GetNew();
            ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundDescriptor
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundDescriptor_Registration.Instance;
        public new static SoundDescriptor_Registration Registration => SoundDescriptor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundDescriptorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoundDescriptorSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundDescriptorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SoundDescriptorBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SoundDescriptorBinaryWriteTranslation Instance = new SoundDescriptorBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            ISoundDescriptorGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            ISoundDescriptorGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            ISoundDescriptorGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ISoundDescriptorGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Category,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.GNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AlternateSoundFor,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.WritePerItem(
                writer: writer,
                items: item.SoundFiles,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM),
                transl: StringBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OutputModel,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ONAM));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.String,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM),
                binaryType: StringBinaryType.NullTerminate);
            SoundDescriptorBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            if (item.LoopAndRumble.TryGet(out var LoopAndRumbleItem))
            {
                ((SoundLoopAndRumbleBinaryWriteTranslation)((IBinaryItem)LoopAndRumbleItem).BinaryWriteTranslator).Write(
                    item: LoopAndRumbleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.BNAM)))
            {
                writer.Write(item.PercentFrequencyShift);
                writer.Write(item.PercentFrequencyVariance);
                writer.Write(item.Priority);
                writer.Write(item.Variance);
                FloatBinaryTranslation.Write(
                    writer: writer,
                    item: item.StaticAttenuation,
                    integerType: FloatIntegerType.UShort,
                    multiplier: 0.01);
            }
        }

        public void Write(
            MutagenWriter writer,
            ISoundDescriptorGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.SNDR),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoundDescriptorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoundDescriptorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoundDescriptorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SoundDescriptorBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static SoundDescriptorBinaryCreateTranslation Instance = new SoundDescriptorBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SNDR;
        public static void FillBinaryStructs(
            ISoundDescriptorInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ISoundDescriptorInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)SoundDescriptor_FieldIndex.CNAM;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Category = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)SoundDescriptor_FieldIndex.Category;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AlternateSoundFor = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)SoundDescriptor_FieldIndex.AlternateSoundFor;
                }
                case RecordTypeInts.ANAM:
                {
                    item.SoundFiles.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM),
                            transl: StringBinaryTranslation.Instance.Parse));
                    return (int)SoundDescriptor_FieldIndex.SoundFiles;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OutputModel = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)SoundDescriptor_FieldIndex.OutputModel;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.String = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)SoundDescriptor_FieldIndex.String;
                }
                case RecordTypeInts.CTDA:
                {
                    SoundDescriptorBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)SoundDescriptor_FieldIndex.Conditions;
                }
                case RecordTypeInts.LNAM:
                {
                    item.LoopAndRumble = Mutagen.Bethesda.Fallout4.SoundLoopAndRumble.CreateFromBinary(frame: frame);
                    return (int)SoundDescriptor_FieldIndex.LoopAndRumble;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.PercentFrequencyShift = dataFrame.ReadInt8();
                    item.PercentFrequencyVariance = dataFrame.ReadInt8();
                    item.Priority = dataFrame.ReadInt8();
                    item.Variance = dataFrame.ReadInt8();
                    item.StaticAttenuation = FloatBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.UShort,
                        multiplier: 0.01);
                    return (int)SoundDescriptor_FieldIndex.StaticAttenuation;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            ISoundDescriptorInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SoundDescriptorBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SoundDescriptorBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ISoundDescriptorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundDescriptor_Registration.Instance;
        public new static SoundDescriptor_Registration Registration => SoundDescriptor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundDescriptorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundDescriptorSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => SoundDescriptorCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundDescriptorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundDescriptorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region CNAM
        private int? _CNAMLocation;
        public ReadOnlyMemorySlice<Byte>? CNAM => _CNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _CNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Category
        private int? _CategoryLocation;
        public FormLinkNullable<ISoundCategoryGetter> Category => _CategoryLocation.HasValue ? new FormLinkNullable<ISoundCategoryGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CategoryLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundCategoryGetter>.Null;
        #endregion
        #region AlternateSoundFor
        private int? _AlternateSoundForLocation;
        public FormLinkNullable<ISoundDescriptorGetter> AlternateSoundFor => _AlternateSoundForLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AlternateSoundForLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        public IReadOnlyList<String> SoundFiles { get; private set; } = ListExt.Empty<String>();
        #region OutputModel
        private int? _OutputModelLocation;
        public FormLinkNullable<ISoundOutputModelGetter> OutputModel => _OutputModelLocation.HasValue ? new FormLinkNullable<ISoundOutputModelGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _OutputModelLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundOutputModelGetter>.Null;
        #endregion
        #region String
        private int? _StringLocation;
        public String? String => _StringLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _StringLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        #region LoopAndRumble
        private RangeInt32? _LoopAndRumbleLocation;
        public ISoundLoopAndRumbleGetter? LoopAndRumble => _LoopAndRumbleLocation.HasValue ? SoundLoopAndRumbleBinaryOverlay.SoundLoopAndRumbleFactory(new OverlayStream(_data.Slice(_LoopAndRumbleLocation!.Value.Min), _package), _package) : default;
        #endregion
        private int? _BNAMLocation;
        public SoundDescriptor.BNAMDataType BNAMDataTypeState { get; private set; }
        #region PercentFrequencyShift
        private int _PercentFrequencyShiftLocation => _BNAMLocation!.Value;
        private bool _PercentFrequencyShift_IsSet => _BNAMLocation.HasValue;
        public SByte PercentFrequencyShift => _PercentFrequencyShift_IsSet ? (sbyte)_data.Slice(_PercentFrequencyShiftLocation, 1)[0] : default;
        #endregion
        #region PercentFrequencyVariance
        private int _PercentFrequencyVarianceLocation => _BNAMLocation!.Value + 0x1;
        private bool _PercentFrequencyVariance_IsSet => _BNAMLocation.HasValue;
        public SByte PercentFrequencyVariance => _PercentFrequencyVariance_IsSet ? (sbyte)_data.Slice(_PercentFrequencyVarianceLocation, 1)[0] : default;
        #endregion
        #region Priority
        private int _PriorityLocation => _BNAMLocation!.Value + 0x2;
        private bool _Priority_IsSet => _BNAMLocation.HasValue;
        public SByte Priority => _Priority_IsSet ? (sbyte)_data.Slice(_PriorityLocation, 1)[0] : default;
        #endregion
        #region Variance
        private int _VarianceLocation => _BNAMLocation!.Value + 0x3;
        private bool _Variance_IsSet => _BNAMLocation.HasValue;
        public SByte Variance => _Variance_IsSet ? (sbyte)_data.Slice(_VarianceLocation, 1)[0] : default;
        #endregion
        #region StaticAttenuation
        private int _StaticAttenuationLocation => _BNAMLocation!.Value + 0x4;
        private bool _StaticAttenuation_IsSet => _BNAMLocation.HasValue;
        public Single StaticAttenuation => _StaticAttenuation_IsSet ? FloatBinaryTranslation.GetFloat(_data.Slice(_StaticAttenuationLocation, 2), FloatIntegerType.UShort, 0.01) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundDescriptorBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static SoundDescriptorBinaryOverlay SoundDescriptorFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new SoundDescriptorBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static SoundDescriptorBinaryOverlay SoundDescriptorFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return SoundDescriptorFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = (stream.Position - offset);
                    return (int)SoundDescriptor_FieldIndex.CNAM;
                }
                case RecordTypeInts.GNAM:
                {
                    _CategoryLocation = (stream.Position - offset);
                    return (int)SoundDescriptor_FieldIndex.Category;
                }
                case RecordTypeInts.SNAM:
                {
                    _AlternateSoundForLocation = (stream.Position - offset);
                    return (int)SoundDescriptor_FieldIndex.AlternateSoundFor;
                }
                case RecordTypeInts.ANAM:
                {
                    this.SoundFiles = BinaryOverlayList.FactoryByArray<String>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ProcessWholeToZString(p.MetaData.Constants.SubrecordFrame(s).Content),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: false,
                            recordTypeConverter: recordTypeConverter));
                    return (int)SoundDescriptor_FieldIndex.SoundFiles;
                }
                case RecordTypeInts.ONAM:
                {
                    _OutputModelLocation = (stream.Position - offset);
                    return (int)SoundDescriptor_FieldIndex.OutputModel;
                }
                case RecordTypeInts.FNAM:
                {
                    _StringLocation = (stream.Position - offset);
                    return (int)SoundDescriptor_FieldIndex.String;
                }
                case RecordTypeInts.CTDA:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)SoundDescriptor_FieldIndex.Conditions;
                }
                case RecordTypeInts.LNAM:
                {
                    _LoopAndRumbleLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)SoundDescriptor_FieldIndex.LoopAndRumble;
                }
                case RecordTypeInts.BNAM:
                {
                    _BNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)SoundDescriptor_FieldIndex.StaticAttenuation;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoundDescriptorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISoundDescriptorGetter rhs)) return false;
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISoundDescriptorGetter? obj)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

