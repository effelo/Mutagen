/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PackageDataLocation :
        APackageData,
        IPackageDataLocation,
        ILoquiObjectSetter<PackageDataLocation>,
        IEquatable<IPackageDataLocationGetter>
    {
        #region Ctor
        public PackageDataLocation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Location
        public LocationTargetRadius Location { get; set; } = new LocationTargetRadius();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationTargetRadiusGetter IPackageDataLocationGetter.Location => Location;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageDataLocationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPackageDataLocationGetter rhs)) return false;
            return ((PackageDataLocationCommon)((IPackageDataLocationGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPackageDataLocationGetter? obj)
        {
            return ((PackageDataLocationCommon)((IPackageDataLocationGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PackageDataLocationCommon)((IPackageDataLocationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APackageData.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Location = new MaskItem<TItem, LocationTargetRadius.Mask<TItem>?>(initialValue, new LocationTargetRadius.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Name,
                TItem Flags,
                TItem Location)
            : base(
                Name: Name,
                Flags: Flags)
            {
                this.Location = new MaskItem<TItem, LocationTargetRadius.Mask<TItem>?>(Location, new LocationTargetRadius.Mask<TItem>(Location));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, LocationTargetRadius.Mask<TItem>?>? Location { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Location);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Location != null)
                {
                    if (!eval(this.Location.Overall)) return false;
                    if (this.Location.Specific != null && !this.Location.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Location != null)
                {
                    if (eval(this.Location.Overall)) return true;
                    if (this.Location.Specific != null && this.Location.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PackageDataLocation.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Location = this.Location == null ? null : new MaskItem<R, LocationTargetRadius.Mask<R>?>(eval(this.Location.Overall), this.Location.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PackageDataLocation.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PackageDataLocation.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PackageDataLocation.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Location?.Overall ?? true)
                    {
                        Location?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APackageData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, LocationTargetRadius.ErrorMask?>? Location;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PackageDataLocation_FieldIndex enu = (PackageDataLocation_FieldIndex)index;
                switch (enu)
                {
                    case PackageDataLocation_FieldIndex.Location:
                        return Location;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PackageDataLocation_FieldIndex enu = (PackageDataLocation_FieldIndex)index;
                switch (enu)
                {
                    case PackageDataLocation_FieldIndex.Location:
                        this.Location = new MaskItem<Exception?, LocationTargetRadius.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PackageDataLocation_FieldIndex enu = (PackageDataLocation_FieldIndex)index;
                switch (enu)
                {
                    case PackageDataLocation_FieldIndex.Location:
                        this.Location = (MaskItem<Exception?, LocationTargetRadius.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Location != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Location?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Location = this.Location.Combine(rhs.Location, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APackageData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public LocationTargetRadius.TranslationMask? Location;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Location != null ? Location.OnOverall : DefaultOn, Location?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PackageDataLocationCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PackageDataLocationSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PackageDataLocationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageDataLocationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static PackageDataLocation CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PackageDataLocation();
            ((PackageDataLocationSetterCommon)((IPackageDataLocationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PackageDataLocation item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PackageDataLocationSetterCommon)((IPackageDataLocationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PackageDataLocation GetNew()
        {
            return new PackageDataLocation();
        }

    }
    #endregion

    #region Interface
    public partial interface IPackageDataLocation :
        IPackageDataLocationGetter,
        IAPackageData,
        ILoquiObjectSetter<IPackageDataLocation>,
        IFormLinkContainer
    {
        new LocationTargetRadius Location { get; set; }
    }

    public partial interface IPackageDataLocationGetter :
        IAPackageDataGetter,
        ILoquiObject<IPackageDataLocationGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => PackageDataLocation_Registration.Instance;
        ILocationTargetRadiusGetter Location { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PackageDataLocationMixIn
    {
        public static void Clear(this IPackageDataLocation item)
        {
            ((PackageDataLocationSetterCommon)((IPackageDataLocationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PackageDataLocation.Mask<bool> GetEqualsMask(
            this IPackageDataLocationGetter item,
            IPackageDataLocationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PackageDataLocationCommon)((IPackageDataLocationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPackageDataLocationGetter item,
            string? name = null,
            PackageDataLocation.Mask<bool>? printMask = null)
        {
            return ((PackageDataLocationCommon)((IPackageDataLocationGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPackageDataLocationGetter item,
            FileGeneration fg,
            string? name = null,
            PackageDataLocation.Mask<bool>? printMask = null)
        {
            ((PackageDataLocationCommon)((IPackageDataLocationGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPackageDataLocationGetter item,
            IPackageDataLocationGetter rhs)
        {
            return ((PackageDataLocationCommon)((IPackageDataLocationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPackageDataLocation lhs,
            IPackageDataLocationGetter rhs,
            out PackageDataLocation.ErrorMask errorMask,
            PackageDataLocation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PackageDataLocationSetterTranslationCommon)((IPackageDataLocationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PackageDataLocation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPackageDataLocation lhs,
            IPackageDataLocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PackageDataLocationSetterTranslationCommon)((IPackageDataLocationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PackageDataLocation DeepCopy(
            this IPackageDataLocationGetter item,
            PackageDataLocation.TranslationMask? copyMask = null)
        {
            return ((PackageDataLocationSetterTranslationCommon)((IPackageDataLocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PackageDataLocation DeepCopy(
            this IPackageDataLocationGetter item,
            out PackageDataLocation.ErrorMask errorMask,
            PackageDataLocation.TranslationMask? copyMask = null)
        {
            return ((PackageDataLocationSetterTranslationCommon)((IPackageDataLocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PackageDataLocation DeepCopy(
            this IPackageDataLocationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PackageDataLocationSetterTranslationCommon)((IPackageDataLocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPackageDataLocation item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageDataLocationSetterCommon)((IPackageDataLocationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PackageDataLocation_FieldIndex
    {
        Name = 0,
        Flags = 1,
        Location = 2,
    }
    #endregion

    #region Registration
    public partial class PackageDataLocation_Registration : ILoquiRegistration
    {
        public static readonly PackageDataLocation_Registration Instance = new PackageDataLocation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 391,
            version: 0);

        public const string GUID = "947ddb8a-c1b6-41cc-a7bf-c50b627aa80a";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(PackageDataLocation.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PackageDataLocation.ErrorMask);

        public static readonly Type ClassType = typeof(PackageDataLocation);

        public static readonly Type GetterType = typeof(IPackageDataLocationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPackageDataLocation);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PackageDataLocation";

        public const string Name = "PackageDataLocation";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.BNAM,
                        RecordTypes.PNAM
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(PackageDataLocationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PackageDataLocationSetterCommon : APackageDataSetterCommon
    {
        public new static readonly PackageDataLocationSetterCommon Instance = new PackageDataLocationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPackageDataLocation item)
        {
            ClearPartial();
            item.Location.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAPackageData item)
        {
            Clear(item: (IPackageDataLocation)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPackageDataLocation obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Location.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPackageDataLocation item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PackageDataLocationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PackageDataLocationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPackageData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PackageDataLocation)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PackageDataLocationCommon : APackageDataCommon
    {
        public new static readonly PackageDataLocationCommon Instance = new PackageDataLocationCommon();

        public PackageDataLocation.Mask<bool> GetEqualsMask(
            IPackageDataLocationGetter item,
            IPackageDataLocationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PackageDataLocation.Mask<bool>(false);
            ((PackageDataLocationCommon)((IPackageDataLocationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPackageDataLocationGetter item,
            IPackageDataLocationGetter rhs,
            PackageDataLocation.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Location = MaskItemExt.Factory(item.Location.GetEqualsMask(rhs.Location, include), include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPackageDataLocationGetter item,
            string? name = null,
            PackageDataLocation.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPackageDataLocationGetter item,
            FileGeneration fg,
            string? name = null,
            PackageDataLocation.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PackageDataLocation =>");
            }
            else
            {
                fg.AppendLine($"{name} (PackageDataLocation) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPackageDataLocationGetter item,
            FileGeneration fg,
            PackageDataLocation.Mask<bool>? printMask = null)
        {
            APackageDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Location?.Overall ?? true)
            {
                item.Location?.ToString(fg, "Location");
            }
        }
        
        public static PackageDataLocation_FieldIndex ConvertFieldIndex(APackageData_FieldIndex index)
        {
            switch (index)
            {
                case APackageData_FieldIndex.Name:
                    return (PackageDataLocation_FieldIndex)((int)index);
                case APackageData_FieldIndex.Flags:
                    return (PackageDataLocation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPackageDataLocationGetter? lhs,
            IPackageDataLocationGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAPackageDataGetter)lhs, (IAPackageDataGetter)rhs)) return false;
            if (!object.Equals(lhs.Location, rhs.Location)) return false;
            return true;
        }
        
        public override bool Equals(
            IAPackageDataGetter? lhs,
            IAPackageDataGetter? rhs)
        {
            return Equals(
                lhs: (IPackageDataLocationGetter?)lhs,
                rhs: rhs as IPackageDataLocationGetter);
        }
        
        public virtual int GetHashCode(IPackageDataLocationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Location);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPackageDataGetter item)
        {
            return GetHashCode(item: (IPackageDataLocationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PackageDataLocation.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPackageDataLocationGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Location is IFormLinkContainerGetter LocationlinkCont)
            {
                foreach (var item in LocationlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class PackageDataLocationSetterTranslationCommon : APackageDataSetterTranslationCommon
    {
        public new static readonly PackageDataLocationSetterTranslationCommon Instance = new PackageDataLocationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPackageDataLocation item,
            IPackageDataLocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPackageData)item,
                (IAPackageDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PackageDataLocation_FieldIndex.Location) ?? true))
            {
                errorMask?.PushIndex((int)PackageDataLocation_FieldIndex.Location);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)PackageDataLocation_FieldIndex.Location) ?? true))
                    {
                        item.Location = rhs.Location.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)PackageDataLocation_FieldIndex.Location),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IAPackageData item,
            IAPackageDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPackageDataLocation)item,
                rhs: (IPackageDataLocationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PackageDataLocation DeepCopy(
            IPackageDataLocationGetter item,
            PackageDataLocation.TranslationMask? copyMask = null)
        {
            PackageDataLocation ret = (PackageDataLocation)((PackageDataLocationCommon)((IPackageDataLocationGetter)item).CommonInstance()!).GetNew();
            ((PackageDataLocationSetterTranslationCommon)((IPackageDataLocationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PackageDataLocation DeepCopy(
            IPackageDataLocationGetter item,
            out PackageDataLocation.ErrorMask errorMask,
            PackageDataLocation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PackageDataLocation ret = (PackageDataLocation)((PackageDataLocationCommon)((IPackageDataLocationGetter)item).CommonInstance()!).GetNew();
            ((PackageDataLocationSetterTranslationCommon)((IPackageDataLocationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PackageDataLocation.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PackageDataLocation DeepCopy(
            IPackageDataLocationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PackageDataLocation ret = (PackageDataLocation)((PackageDataLocationCommon)((IPackageDataLocationGetter)item).CommonInstance()!).GetNew();
            ((PackageDataLocationSetterTranslationCommon)((IPackageDataLocationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PackageDataLocation
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageDataLocation_Registration.Instance;
        public new static PackageDataLocation_Registration Registration => PackageDataLocation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PackageDataLocationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PackageDataLocationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PackageDataLocationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PackageDataLocationBinaryWriteTranslation :
        APackageDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PackageDataLocationBinaryWriteTranslation Instance = new PackageDataLocationBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IPackageDataLocationGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            APackageDataBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            IPackageDataLocationGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageDataLocationGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPackageDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageDataLocationGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PackageDataLocationBinaryCreateTranslation : APackageDataBinaryCreateTranslation
    {
        public new readonly static PackageDataLocationBinaryCreateTranslation Instance = new PackageDataLocationBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IPackageDataLocation item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                default:
                    return APackageDataBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PackageDataLocationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PackageDataLocationBinaryOverlay :
        APackageDataBinaryOverlay,
        IPackageDataLocationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageDataLocation_Registration.Instance;
        public new static PackageDataLocation_Registration Registration => PackageDataLocation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PackageDataLocationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PackageDataLocationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PackageDataLocationCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PackageDataLocationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageDataLocationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PackageDataLocationBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PackageDataLocationBinaryOverlay PackageDataLocationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PackageDataLocationBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PackageDataLocationBinaryOverlay PackageDataLocationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PackageDataLocationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageDataLocationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPackageDataLocationGetter rhs)) return false;
            return ((PackageDataLocationCommon)((IPackageDataLocationGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPackageDataLocationGetter? obj)
        {
            return ((PackageDataLocationCommon)((IPackageDataLocationGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PackageDataLocationCommon)((IPackageDataLocationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

