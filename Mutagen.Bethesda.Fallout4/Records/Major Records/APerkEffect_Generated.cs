/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    /// <summary>
    /// Implemented by: [PerkQuestEffect, PerkAbilityEffect, APerkEntryPointEffect]
    /// </summary>
    public abstract partial class APerkEffect :
        IAPerkEffect,
        ILoquiObjectSetter<APerkEffect>,
        IEquatable<IAPerkEffectGetter>
    {
        #region Ctor
        public APerkEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Rank
        public Byte Rank { get; set; } = default;
        #endregion
        #region Priority
        public Byte Priority { get; set; } = default;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PerkCondition> _Conditions = new ExtendedList<PerkCondition>();
        public ExtendedList<PerkCondition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPerkConditionGetter> IAPerkEffectGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region PRKEDataTypeState
        public APerkEffect.PRKEDataType PRKEDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            APerkEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAPerkEffectGetter rhs)) return false;
            return ((APerkEffectCommon)((IAPerkEffectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAPerkEffectGetter? obj)
        {
            return ((APerkEffectCommon)((IAPerkEffectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((APerkEffectCommon)((IAPerkEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Rank = initialValue;
                this.Priority = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkCondition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PerkCondition.Mask<TItem>?>>());
                this.PRKEDataTypeState = initialValue;
            }

            public Mask(
                TItem Rank,
                TItem Priority,
                TItem Conditions,
                TItem PRKEDataTypeState)
            {
                this.Rank = Rank;
                this.Priority = Priority;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkCondition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, PerkCondition.Mask<TItem>?>>());
                this.PRKEDataTypeState = PRKEDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Rank;
            public TItem Priority;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkCondition.Mask<TItem>?>>?>? Conditions;
            public TItem PRKEDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Rank, rhs.Rank)) return false;
                if (!object.Equals(this.Priority, rhs.Priority)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.PRKEDataTypeState, rhs.PRKEDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Rank);
                hash.Add(this.Priority);
                hash.Add(this.Conditions);
                hash.Add(this.PRKEDataTypeState);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Rank)) return false;
                if (!eval(this.Priority)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.PRKEDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Rank)) return true;
                if (eval(this.Priority)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.PRKEDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new APerkEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Rank = eval(this.Rank);
                obj.Priority = eval(this.Priority);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PerkCondition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, PerkCondition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PerkCondition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, PerkCondition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, PerkCondition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.PRKEDataTypeState = eval(this.PRKEDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(APerkEffect.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, APerkEffect.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(APerkEffect.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Rank ?? true)
                    {
                        fg.AppendItem(Rank, "Rank");
                    }
                    if (printMask?.Priority ?? true)
                    {
                        fg.AppendItem(Priority, "Priority");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.PRKEDataTypeState ?? true)
                    {
                        fg.AppendItem(PRKEDataTypeState, "PRKEDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Rank;
            public Exception? Priority;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkCondition.ErrorMask?>>?>? Conditions;
            public Exception? PRKEDataTypeState;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                APerkEffect_FieldIndex enu = (APerkEffect_FieldIndex)index;
                switch (enu)
                {
                    case APerkEffect_FieldIndex.Rank:
                        return Rank;
                    case APerkEffect_FieldIndex.Priority:
                        return Priority;
                    case APerkEffect_FieldIndex.Conditions:
                        return Conditions;
                    case APerkEffect_FieldIndex.PRKEDataTypeState:
                        return PRKEDataTypeState;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                APerkEffect_FieldIndex enu = (APerkEffect_FieldIndex)index;
                switch (enu)
                {
                    case APerkEffect_FieldIndex.Rank:
                        this.Rank = ex;
                        break;
                    case APerkEffect_FieldIndex.Priority:
                        this.Priority = ex;
                        break;
                    case APerkEffect_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkCondition.ErrorMask?>>?>(ex, null);
                        break;
                    case APerkEffect_FieldIndex.PRKEDataTypeState:
                        this.PRKEDataTypeState = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                APerkEffect_FieldIndex enu = (APerkEffect_FieldIndex)index;
                switch (enu)
                {
                    case APerkEffect_FieldIndex.Rank:
                        this.Rank = (Exception?)obj;
                        break;
                    case APerkEffect_FieldIndex.Priority:
                        this.Priority = (Exception?)obj;
                        break;
                    case APerkEffect_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkCondition.ErrorMask?>>?>)obj;
                        break;
                    case APerkEffect_FieldIndex.PRKEDataTypeState:
                        this.PRKEDataTypeState = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (Rank != null) return true;
                if (Priority != null) return true;
                if (Conditions != null) return true;
                if (PRKEDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public virtual void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected virtual void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Rank, "Rank");
                fg.AppendItem(Priority, "Priority");
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(PRKEDataTypeState, "PRKEDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Rank = this.Rank.Combine(rhs.Rank);
                ret.Priority = this.Priority.Combine(rhs.Priority);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkCondition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.PRKEDataTypeState = this.PRKEDataTypeState.Combine(rhs.PRKEDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Rank;
            public bool Priority;
            public PerkCondition.TranslationMask? Conditions;
            public bool PRKEDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Rank = defaultOn;
                this.Priority = defaultOn;
                this.PRKEDataTypeState = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Rank, null));
                ret.Add((Priority, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((PRKEDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = APerkEffect_Registration.TriggeringRecordType;
        public virtual IEnumerable<FormLinkInformation> ContainedFormLinks => APerkEffectCommon.Instance.GetContainedFormLinks(this);
        public virtual void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APerkEffectSetterCommon.Instance.RemapLinks(this, mapping);
        [Flags]
        public enum PRKEDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => APerkEffectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APerkEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((APerkEffectSetterCommon)((IAPerkEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static APerkEffect GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [PerkQuestEffect, PerkAbilityEffect, APerkEntryPointEffect]
    /// </summary>
    public partial interface IAPerkEffect :
        IAPerkEffectGetter,
        ILoquiObjectSetter<IAPerkEffect>,
        IFormLinkContainer
    {
        new Byte Rank { get; set; }
        new Byte Priority { get; set; }
        new ExtendedList<PerkCondition> Conditions { get; }
        new APerkEffect.PRKEDataType PRKEDataTypeState { get; set; }
    }

    /// <summary>
    /// Implemented by: [PerkQuestEffect, PerkAbilityEffect, APerkEntryPointEffect]
    /// </summary>
    public partial interface IAPerkEffectGetter :
        ILoquiObject,
        ILoquiObject<IAPerkEffectGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => APerkEffect_Registration.Instance;
        Byte Rank { get; }
        Byte Priority { get; }
        IReadOnlyList<IPerkConditionGetter> Conditions { get; }
        APerkEffect.PRKEDataType PRKEDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class APerkEffectMixIn
    {
        public static void Clear(this IAPerkEffect item)
        {
            ((APerkEffectSetterCommon)((IAPerkEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static APerkEffect.Mask<bool> GetEqualsMask(
            this IAPerkEffectGetter item,
            IAPerkEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((APerkEffectCommon)((IAPerkEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAPerkEffectGetter item,
            string? name = null,
            APerkEffect.Mask<bool>? printMask = null)
        {
            return ((APerkEffectCommon)((IAPerkEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAPerkEffectGetter item,
            FileGeneration fg,
            string? name = null,
            APerkEffect.Mask<bool>? printMask = null)
        {
            ((APerkEffectCommon)((IAPerkEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAPerkEffectGetter item,
            IAPerkEffectGetter rhs)
        {
            return ((APerkEffectCommon)((IAPerkEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAPerkEffect lhs,
            IAPerkEffectGetter rhs)
        {
            ((APerkEffectSetterTranslationCommon)((IAPerkEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAPerkEffect lhs,
            IAPerkEffectGetter rhs,
            APerkEffect.TranslationMask? copyMask = null)
        {
            ((APerkEffectSetterTranslationCommon)((IAPerkEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAPerkEffect lhs,
            IAPerkEffectGetter rhs,
            out APerkEffect.ErrorMask errorMask,
            APerkEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((APerkEffectSetterTranslationCommon)((IAPerkEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = APerkEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAPerkEffect lhs,
            IAPerkEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((APerkEffectSetterTranslationCommon)((IAPerkEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static APerkEffect DeepCopy(
            this IAPerkEffectGetter item,
            APerkEffect.TranslationMask? copyMask = null)
        {
            return ((APerkEffectSetterTranslationCommon)((IAPerkEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static APerkEffect DeepCopy(
            this IAPerkEffectGetter item,
            out APerkEffect.ErrorMask errorMask,
            APerkEffect.TranslationMask? copyMask = null)
        {
            return ((APerkEffectSetterTranslationCommon)((IAPerkEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static APerkEffect DeepCopy(
            this IAPerkEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((APerkEffectSetterTranslationCommon)((IAPerkEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAPerkEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APerkEffectSetterCommon)((IAPerkEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum APerkEffect_FieldIndex
    {
        Rank = 0,
        Priority = 1,
        Conditions = 2,
        PRKEDataTypeState = 3,
    }
    #endregion

    #region Registration
    public partial class APerkEffect_Registration : ILoquiRegistration
    {
        public static readonly APerkEffect_Registration Instance = new APerkEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 412,
            version: 0);

        public const string GUID = "ca92253c-f8d1-4417-ad3a-024af6646d9f";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(APerkEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(APerkEffect.ErrorMask);

        public static readonly Type ClassType = typeof(APerkEffect);

        public static readonly Type GetterType = typeof(IAPerkEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAPerkEffect);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.APerkEffect";

        public const string Name = "APerkEffect";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PRKE;
        public static readonly Type BinaryWriteTranslation = typeof(APerkEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class APerkEffectSetterCommon
    {
        public static readonly APerkEffectSetterCommon Instance = new APerkEffectSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAPerkEffect item)
        {
            ClearPartial();
            item.Rank = default;
            item.Priority = default;
            item.Conditions.Clear();
            item.PRKEDataTypeState = default;
        }
        
        #region Mutagen
        public void RemapLinks(IAPerkEffect obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Conditions.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAPerkEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
        }
        
        #endregion
        
    }
    public partial class APerkEffectCommon
    {
        public static readonly APerkEffectCommon Instance = new APerkEffectCommon();

        public APerkEffect.Mask<bool> GetEqualsMask(
            IAPerkEffectGetter item,
            IAPerkEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new APerkEffect.Mask<bool>(false);
            ((APerkEffectCommon)((IAPerkEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAPerkEffectGetter item,
            IAPerkEffectGetter rhs,
            APerkEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Rank = item.Rank == rhs.Rank;
            ret.Priority = item.Priority == rhs.Priority;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.PRKEDataTypeState = item.PRKEDataTypeState == rhs.PRKEDataTypeState;
        }
        
        public string ToString(
            IAPerkEffectGetter item,
            string? name = null,
            APerkEffect.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAPerkEffectGetter item,
            FileGeneration fg,
            string? name = null,
            APerkEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"APerkEffect =>");
            }
            else
            {
                fg.AppendLine($"{name} (APerkEffect) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAPerkEffectGetter item,
            FileGeneration fg,
            APerkEffect.Mask<bool>? printMask = null)
        {
            if (printMask?.Rank ?? true)
            {
                fg.AppendItem(item.Rank, "Rank");
            }
            if (printMask?.Priority ?? true)
            {
                fg.AppendItem(item.Priority, "Priority");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.PRKEDataTypeState ?? true)
            {
                fg.AppendItem(item.PRKEDataTypeState, "PRKEDataTypeState");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAPerkEffectGetter? lhs,
            IAPerkEffectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Rank != rhs.Rank) return false;
            if (lhs.Priority != rhs.Priority) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            if (lhs.PRKEDataTypeState != rhs.PRKEDataTypeState) return false;
            return true;
        }
        
        public virtual int GetHashCode(IAPerkEffectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Rank);
            hash.Add(item.Priority);
            hash.Add(item.Conditions);
            hash.Add(item.PRKEDataTypeState);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return APerkEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IAPerkEffectGetter obj)
        {
            foreach (var item in obj.Conditions.WhereCastable<IPerkConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class APerkEffectSetterTranslationCommon
    {
        public static readonly APerkEffectSetterTranslationCommon Instance = new APerkEffectSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IAPerkEffect item,
            IAPerkEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)APerkEffect_FieldIndex.Rank) ?? true))
            {
                item.Rank = rhs.Rank;
            }
            if ((copyMask?.GetShouldTranslate((int)APerkEffect_FieldIndex.Priority) ?? true))
            {
                item.Priority = rhs.Priority;
            }
            if ((copyMask?.GetShouldTranslate((int)APerkEffect_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)APerkEffect_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APerkEffect_FieldIndex.PRKEDataTypeState) ?? true))
            {
                item.PRKEDataTypeState = rhs.PRKEDataTypeState;
            }
        }
        
        #endregion
        
        public APerkEffect DeepCopy(
            IAPerkEffectGetter item,
            APerkEffect.TranslationMask? copyMask = null)
        {
            APerkEffect ret = (APerkEffect)((APerkEffectCommon)((IAPerkEffectGetter)item).CommonInstance()!).GetNew();
            ((APerkEffectSetterTranslationCommon)((IAPerkEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public APerkEffect DeepCopy(
            IAPerkEffectGetter item,
            out APerkEffect.ErrorMask errorMask,
            APerkEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            APerkEffect ret = (APerkEffect)((APerkEffectCommon)((IAPerkEffectGetter)item).CommonInstance()!).GetNew();
            ((APerkEffectSetterTranslationCommon)((IAPerkEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = APerkEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public APerkEffect DeepCopy(
            IAPerkEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            APerkEffect ret = (APerkEffect)((APerkEffectCommon)((IAPerkEffectGetter)item).CommonInstance()!).GetNew();
            ((APerkEffectSetterTranslationCommon)((IAPerkEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class APerkEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APerkEffect_Registration.Instance;
        public static APerkEffect_Registration Registration => APerkEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => APerkEffectCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return APerkEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => APerkEffectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAPerkEffectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAPerkEffectGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAPerkEffectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class APerkEffectBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static APerkEffectBinaryWriteTranslation Instance = new APerkEffectBinaryWriteTranslation();

        public static void WriteEmbedded(
            IAPerkEffectGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IAPerkEffectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.PRKE)))
            {
            }
            using (HeaderExport.Subrecord(writer, RecordTypes.PRKF)) { } // End Marker
        }

        public virtual void Write(
            MutagenWriter writer,
            IAPerkEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAPerkEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class APerkEffectBinaryCreateTranslation
    {
        public readonly static APerkEffectBinaryCreateTranslation Instance = new APerkEffectBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAPerkEffect item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IAPerkEffect item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.PRKE:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)APerkEffect_FieldIndex.Priority) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    return (int)APerkEffect_FieldIndex.Priority;
                }
                case RecordTypeInts.PRKF: // End Marker
                {
                    frame.ReadSubrecordFrame();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class APerkEffectBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAPerkEffectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APerkEffectBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class APerkEffectBinaryOverlay :
        BinaryOverlay,
        IAPerkEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APerkEffect_Registration.Instance;
        public static APerkEffect_Registration Registration => APerkEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => APerkEffectCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => APerkEffectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAPerkEffectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAPerkEffectGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAPerkEffectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public virtual IEnumerable<FormLinkInformation> ContainedFormLinks => APerkEffectCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => APerkEffectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APerkEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        private int? _PRKELocation;
        public APerkEffect.PRKEDataType PRKEDataTypeState { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected APerkEffectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }


        public virtual ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.PRKE:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)APerkEffect_FieldIndex.Priority) return ParseResult.Stop;
                    _PRKELocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)APerkEffect_FieldIndex.Priority;
                }
                case RecordTypeInts.PRKF: // End Marker
                {
                    stream.ReadSubrecordFrame();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            APerkEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAPerkEffectGetter rhs)) return false;
            return ((APerkEffectCommon)((IAPerkEffectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAPerkEffectGetter? obj)
        {
            return ((APerkEffectCommon)((IAPerkEffectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((APerkEffectCommon)((IAPerkEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

