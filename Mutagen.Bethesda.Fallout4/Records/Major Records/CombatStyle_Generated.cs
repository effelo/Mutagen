/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class CombatStyle :
        Fallout4MajorRecord,
        ICombatStyleInternal,
        ILoquiObjectSetter<CombatStyle>,
        IEquatable<ICombatStyleGetter>
    {
        #region Ctor
        protected CombatStyle()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region OffensiveMult
        public Single OffensiveMult { get; set; } = default;
        #endregion
        #region DefensiveMult
        public Single DefensiveMult { get; set; } = default;
        #endregion
        #region GroupOffensiveMult
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _GroupOffensiveMult;
        public Single GroupOffensiveMult
        {
            get => this._GroupOffensiveMult;
            set
            {
                this.CSGDDataTypeState &= ~CSGDDataType.Break0;
                this._GroupOffensiveMult = value;
            }
        }
        #endregion
        #region EquipmentScoreMultMelee
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EquipmentScoreMultMelee;
        public Single EquipmentScoreMultMelee
        {
            get => this._EquipmentScoreMultMelee;
            set
            {
                this.CSGDDataTypeState &= ~CSGDDataType.Break0;
                this._EquipmentScoreMultMelee = value;
            }
        }
        #endregion
        #region EquipmentScoreMultMagic
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EquipmentScoreMultMagic;
        public Single EquipmentScoreMultMagic
        {
            get => this._EquipmentScoreMultMagic;
            set
            {
                this.CSGDDataTypeState &= ~CSGDDataType.Break0;
                this._EquipmentScoreMultMagic = value;
            }
        }
        #endregion
        #region EquipmentScoreMultRanged
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EquipmentScoreMultRanged;
        public Single EquipmentScoreMultRanged
        {
            get => this._EquipmentScoreMultRanged;
            set
            {
                this.CSGDDataTypeState &= ~CSGDDataType.Break0;
                this._EquipmentScoreMultRanged = value;
            }
        }
        #endregion
        #region EquipmentScoreMultShout
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EquipmentScoreMultShout;
        public Single EquipmentScoreMultShout
        {
            get => this._EquipmentScoreMultShout;
            set
            {
                this.CSGDDataTypeState &= ~CSGDDataType.Break0;
                this._EquipmentScoreMultShout = value;
            }
        }
        #endregion
        #region EquipmentScoreMultUnarmed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EquipmentScoreMultUnarmed;
        public Single EquipmentScoreMultUnarmed
        {
            get => this._EquipmentScoreMultUnarmed;
            set
            {
                this.CSGDDataTypeState &= ~CSGDDataType.Break0;
                this._EquipmentScoreMultUnarmed = value;
            }
        }
        #endregion
        #region EquipmentScoreMultStaff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EquipmentScoreMultStaff;
        public Single EquipmentScoreMultStaff
        {
            get => this._EquipmentScoreMultStaff;
            set
            {
                this.CSGDDataTypeState &= ~CSGDDataType.Break0;
                this.CSGDDataTypeState &= ~CSGDDataType.Break1;
                this._EquipmentScoreMultStaff = value;
            }
        }
        #endregion
        #region AvoidThreatChance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _AvoidThreatChance;
        public Single AvoidThreatChance
        {
            get => this._AvoidThreatChance;
            set
            {
                this.CSGDDataTypeState &= ~CSGDDataType.Break0;
                this.CSGDDataTypeState &= ~CSGDDataType.Break1;
                this._AvoidThreatChance = value;
            }
        }
        #endregion
        #region CSMD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _CSMD;
        public MemorySlice<Byte>? CSMD
        {
            get => this._CSMD;
            set => this._CSMD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICombatStyleGetter.CSMD => this.CSMD;
        #endregion
        #region Melee
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CombatStyleMelee? _Melee;
        public CombatStyleMelee? Melee
        {
            get => _Melee;
            set => _Melee = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICombatStyleMeleeGetter? ICombatStyleGetter.Melee => this.Melee;
        #endregion
        #region CloseRange
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CombatStyleCloseRange? _CloseRange;
        public CombatStyleCloseRange? CloseRange
        {
            get => _CloseRange;
            set => _CloseRange = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICombatStyleCloseRangeGetter? ICombatStyleGetter.CloseRange => this.CloseRange;
        #endregion
        #region LongRangeStrafeMult
        public Single? LongRangeStrafeMult { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICombatStyleGetter.LongRangeStrafeMult => this.LongRangeStrafeMult;
        #endregion
        #region Flight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CombatStyleFlight? _Flight;
        public CombatStyleFlight? Flight
        {
            get => _Flight;
            set => _Flight = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICombatStyleFlightGetter? ICombatStyleGetter.Flight => this.Flight;
        #endregion
        #region Flags
        public CombatStyle.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        CombatStyle.Flag? ICombatStyleGetter.Flags => this.Flags;
        #endregion
        #region CSGDDataTypeState
        public CombatStyle.CSGDDataType CSGDDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CombatStyleMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICombatStyleGetter rhs)) return false;
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICombatStyleGetter? obj)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.OffensiveMult = initialValue;
                this.DefensiveMult = initialValue;
                this.GroupOffensiveMult = initialValue;
                this.EquipmentScoreMultMelee = initialValue;
                this.EquipmentScoreMultMagic = initialValue;
                this.EquipmentScoreMultRanged = initialValue;
                this.EquipmentScoreMultShout = initialValue;
                this.EquipmentScoreMultUnarmed = initialValue;
                this.EquipmentScoreMultStaff = initialValue;
                this.AvoidThreatChance = initialValue;
                this.CSMD = initialValue;
                this.Melee = new MaskItem<TItem, CombatStyleMelee.Mask<TItem>?>(initialValue, new CombatStyleMelee.Mask<TItem>(initialValue));
                this.CloseRange = new MaskItem<TItem, CombatStyleCloseRange.Mask<TItem>?>(initialValue, new CombatStyleCloseRange.Mask<TItem>(initialValue));
                this.LongRangeStrafeMult = initialValue;
                this.Flight = new MaskItem<TItem, CombatStyleFlight.Mask<TItem>?>(initialValue, new CombatStyleFlight.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.CSGDDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem OffensiveMult,
                TItem DefensiveMult,
                TItem GroupOffensiveMult,
                TItem EquipmentScoreMultMelee,
                TItem EquipmentScoreMultMagic,
                TItem EquipmentScoreMultRanged,
                TItem EquipmentScoreMultShout,
                TItem EquipmentScoreMultUnarmed,
                TItem EquipmentScoreMultStaff,
                TItem AvoidThreatChance,
                TItem CSMD,
                TItem Melee,
                TItem CloseRange,
                TItem LongRangeStrafeMult,
                TItem Flight,
                TItem Flags,
                TItem CSGDDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.OffensiveMult = OffensiveMult;
                this.DefensiveMult = DefensiveMult;
                this.GroupOffensiveMult = GroupOffensiveMult;
                this.EquipmentScoreMultMelee = EquipmentScoreMultMelee;
                this.EquipmentScoreMultMagic = EquipmentScoreMultMagic;
                this.EquipmentScoreMultRanged = EquipmentScoreMultRanged;
                this.EquipmentScoreMultShout = EquipmentScoreMultShout;
                this.EquipmentScoreMultUnarmed = EquipmentScoreMultUnarmed;
                this.EquipmentScoreMultStaff = EquipmentScoreMultStaff;
                this.AvoidThreatChance = AvoidThreatChance;
                this.CSMD = CSMD;
                this.Melee = new MaskItem<TItem, CombatStyleMelee.Mask<TItem>?>(Melee, new CombatStyleMelee.Mask<TItem>(Melee));
                this.CloseRange = new MaskItem<TItem, CombatStyleCloseRange.Mask<TItem>?>(CloseRange, new CombatStyleCloseRange.Mask<TItem>(CloseRange));
                this.LongRangeStrafeMult = LongRangeStrafeMult;
                this.Flight = new MaskItem<TItem, CombatStyleFlight.Mask<TItem>?>(Flight, new CombatStyleFlight.Mask<TItem>(Flight));
                this.Flags = Flags;
                this.CSGDDataTypeState = CSGDDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem OffensiveMult;
            public TItem DefensiveMult;
            public TItem GroupOffensiveMult;
            public TItem EquipmentScoreMultMelee;
            public TItem EquipmentScoreMultMagic;
            public TItem EquipmentScoreMultRanged;
            public TItem EquipmentScoreMultShout;
            public TItem EquipmentScoreMultUnarmed;
            public TItem EquipmentScoreMultStaff;
            public TItem AvoidThreatChance;
            public TItem CSMD;
            public MaskItem<TItem, CombatStyleMelee.Mask<TItem>?>? Melee { get; set; }
            public MaskItem<TItem, CombatStyleCloseRange.Mask<TItem>?>? CloseRange { get; set; }
            public TItem LongRangeStrafeMult;
            public MaskItem<TItem, CombatStyleFlight.Mask<TItem>?>? Flight { get; set; }
            public TItem Flags;
            public TItem CSGDDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.OffensiveMult, rhs.OffensiveMult)) return false;
                if (!object.Equals(this.DefensiveMult, rhs.DefensiveMult)) return false;
                if (!object.Equals(this.GroupOffensiveMult, rhs.GroupOffensiveMult)) return false;
                if (!object.Equals(this.EquipmentScoreMultMelee, rhs.EquipmentScoreMultMelee)) return false;
                if (!object.Equals(this.EquipmentScoreMultMagic, rhs.EquipmentScoreMultMagic)) return false;
                if (!object.Equals(this.EquipmentScoreMultRanged, rhs.EquipmentScoreMultRanged)) return false;
                if (!object.Equals(this.EquipmentScoreMultShout, rhs.EquipmentScoreMultShout)) return false;
                if (!object.Equals(this.EquipmentScoreMultUnarmed, rhs.EquipmentScoreMultUnarmed)) return false;
                if (!object.Equals(this.EquipmentScoreMultStaff, rhs.EquipmentScoreMultStaff)) return false;
                if (!object.Equals(this.AvoidThreatChance, rhs.AvoidThreatChance)) return false;
                if (!object.Equals(this.CSMD, rhs.CSMD)) return false;
                if (!object.Equals(this.Melee, rhs.Melee)) return false;
                if (!object.Equals(this.CloseRange, rhs.CloseRange)) return false;
                if (!object.Equals(this.LongRangeStrafeMult, rhs.LongRangeStrafeMult)) return false;
                if (!object.Equals(this.Flight, rhs.Flight)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.CSGDDataTypeState, rhs.CSGDDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.OffensiveMult);
                hash.Add(this.DefensiveMult);
                hash.Add(this.GroupOffensiveMult);
                hash.Add(this.EquipmentScoreMultMelee);
                hash.Add(this.EquipmentScoreMultMagic);
                hash.Add(this.EquipmentScoreMultRanged);
                hash.Add(this.EquipmentScoreMultShout);
                hash.Add(this.EquipmentScoreMultUnarmed);
                hash.Add(this.EquipmentScoreMultStaff);
                hash.Add(this.AvoidThreatChance);
                hash.Add(this.CSMD);
                hash.Add(this.Melee);
                hash.Add(this.CloseRange);
                hash.Add(this.LongRangeStrafeMult);
                hash.Add(this.Flight);
                hash.Add(this.Flags);
                hash.Add(this.CSGDDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.OffensiveMult)) return false;
                if (!eval(this.DefensiveMult)) return false;
                if (!eval(this.GroupOffensiveMult)) return false;
                if (!eval(this.EquipmentScoreMultMelee)) return false;
                if (!eval(this.EquipmentScoreMultMagic)) return false;
                if (!eval(this.EquipmentScoreMultRanged)) return false;
                if (!eval(this.EquipmentScoreMultShout)) return false;
                if (!eval(this.EquipmentScoreMultUnarmed)) return false;
                if (!eval(this.EquipmentScoreMultStaff)) return false;
                if (!eval(this.AvoidThreatChance)) return false;
                if (!eval(this.CSMD)) return false;
                if (Melee != null)
                {
                    if (!eval(this.Melee.Overall)) return false;
                    if (this.Melee.Specific != null && !this.Melee.Specific.All(eval)) return false;
                }
                if (CloseRange != null)
                {
                    if (!eval(this.CloseRange.Overall)) return false;
                    if (this.CloseRange.Specific != null && !this.CloseRange.Specific.All(eval)) return false;
                }
                if (!eval(this.LongRangeStrafeMult)) return false;
                if (Flight != null)
                {
                    if (!eval(this.Flight.Overall)) return false;
                    if (this.Flight.Specific != null && !this.Flight.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.CSGDDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.OffensiveMult)) return true;
                if (eval(this.DefensiveMult)) return true;
                if (eval(this.GroupOffensiveMult)) return true;
                if (eval(this.EquipmentScoreMultMelee)) return true;
                if (eval(this.EquipmentScoreMultMagic)) return true;
                if (eval(this.EquipmentScoreMultRanged)) return true;
                if (eval(this.EquipmentScoreMultShout)) return true;
                if (eval(this.EquipmentScoreMultUnarmed)) return true;
                if (eval(this.EquipmentScoreMultStaff)) return true;
                if (eval(this.AvoidThreatChance)) return true;
                if (eval(this.CSMD)) return true;
                if (Melee != null)
                {
                    if (eval(this.Melee.Overall)) return true;
                    if (this.Melee.Specific != null && this.Melee.Specific.Any(eval)) return true;
                }
                if (CloseRange != null)
                {
                    if (eval(this.CloseRange.Overall)) return true;
                    if (this.CloseRange.Specific != null && this.CloseRange.Specific.Any(eval)) return true;
                }
                if (eval(this.LongRangeStrafeMult)) return true;
                if (Flight != null)
                {
                    if (eval(this.Flight.Overall)) return true;
                    if (this.Flight.Specific != null && this.Flight.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.CSGDDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CombatStyle.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.OffensiveMult = eval(this.OffensiveMult);
                obj.DefensiveMult = eval(this.DefensiveMult);
                obj.GroupOffensiveMult = eval(this.GroupOffensiveMult);
                obj.EquipmentScoreMultMelee = eval(this.EquipmentScoreMultMelee);
                obj.EquipmentScoreMultMagic = eval(this.EquipmentScoreMultMagic);
                obj.EquipmentScoreMultRanged = eval(this.EquipmentScoreMultRanged);
                obj.EquipmentScoreMultShout = eval(this.EquipmentScoreMultShout);
                obj.EquipmentScoreMultUnarmed = eval(this.EquipmentScoreMultUnarmed);
                obj.EquipmentScoreMultStaff = eval(this.EquipmentScoreMultStaff);
                obj.AvoidThreatChance = eval(this.AvoidThreatChance);
                obj.CSMD = eval(this.CSMD);
                obj.Melee = this.Melee == null ? null : new MaskItem<R, CombatStyleMelee.Mask<R>?>(eval(this.Melee.Overall), this.Melee.Specific?.Translate(eval));
                obj.CloseRange = this.CloseRange == null ? null : new MaskItem<R, CombatStyleCloseRange.Mask<R>?>(eval(this.CloseRange.Overall), this.CloseRange.Specific?.Translate(eval));
                obj.LongRangeStrafeMult = eval(this.LongRangeStrafeMult);
                obj.Flight = this.Flight == null ? null : new MaskItem<R, CombatStyleFlight.Mask<R>?>(eval(this.Flight.Overall), this.Flight.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.CSGDDataTypeState = eval(this.CSGDDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CombatStyle.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CombatStyle.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CombatStyle.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.OffensiveMult ?? true)
                    {
                        fg.AppendItem(OffensiveMult, "OffensiveMult");
                    }
                    if (printMask?.DefensiveMult ?? true)
                    {
                        fg.AppendItem(DefensiveMult, "DefensiveMult");
                    }
                    if (printMask?.GroupOffensiveMult ?? true)
                    {
                        fg.AppendItem(GroupOffensiveMult, "GroupOffensiveMult");
                    }
                    if (printMask?.EquipmentScoreMultMelee ?? true)
                    {
                        fg.AppendItem(EquipmentScoreMultMelee, "EquipmentScoreMultMelee");
                    }
                    if (printMask?.EquipmentScoreMultMagic ?? true)
                    {
                        fg.AppendItem(EquipmentScoreMultMagic, "EquipmentScoreMultMagic");
                    }
                    if (printMask?.EquipmentScoreMultRanged ?? true)
                    {
                        fg.AppendItem(EquipmentScoreMultRanged, "EquipmentScoreMultRanged");
                    }
                    if (printMask?.EquipmentScoreMultShout ?? true)
                    {
                        fg.AppendItem(EquipmentScoreMultShout, "EquipmentScoreMultShout");
                    }
                    if (printMask?.EquipmentScoreMultUnarmed ?? true)
                    {
                        fg.AppendItem(EquipmentScoreMultUnarmed, "EquipmentScoreMultUnarmed");
                    }
                    if (printMask?.EquipmentScoreMultStaff ?? true)
                    {
                        fg.AppendItem(EquipmentScoreMultStaff, "EquipmentScoreMultStaff");
                    }
                    if (printMask?.AvoidThreatChance ?? true)
                    {
                        fg.AppendItem(AvoidThreatChance, "AvoidThreatChance");
                    }
                    if (printMask?.CSMD ?? true)
                    {
                        fg.AppendItem(CSMD, "CSMD");
                    }
                    if (printMask?.Melee?.Overall ?? true)
                    {
                        Melee?.ToString(fg);
                    }
                    if (printMask?.CloseRange?.Overall ?? true)
                    {
                        CloseRange?.ToString(fg);
                    }
                    if (printMask?.LongRangeStrafeMult ?? true)
                    {
                        fg.AppendItem(LongRangeStrafeMult, "LongRangeStrafeMult");
                    }
                    if (printMask?.Flight?.Overall ?? true)
                    {
                        Flight?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.CSGDDataTypeState ?? true)
                    {
                        fg.AppendItem(CSGDDataTypeState, "CSGDDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? OffensiveMult;
            public Exception? DefensiveMult;
            public Exception? GroupOffensiveMult;
            public Exception? EquipmentScoreMultMelee;
            public Exception? EquipmentScoreMultMagic;
            public Exception? EquipmentScoreMultRanged;
            public Exception? EquipmentScoreMultShout;
            public Exception? EquipmentScoreMultUnarmed;
            public Exception? EquipmentScoreMultStaff;
            public Exception? AvoidThreatChance;
            public Exception? CSMD;
            public MaskItem<Exception?, CombatStyleMelee.ErrorMask?>? Melee;
            public MaskItem<Exception?, CombatStyleCloseRange.ErrorMask?>? CloseRange;
            public Exception? LongRangeStrafeMult;
            public MaskItem<Exception?, CombatStyleFlight.ErrorMask?>? Flight;
            public Exception? Flags;
            public Exception? CSGDDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyle_FieldIndex.OffensiveMult:
                        return OffensiveMult;
                    case CombatStyle_FieldIndex.DefensiveMult:
                        return DefensiveMult;
                    case CombatStyle_FieldIndex.GroupOffensiveMult:
                        return GroupOffensiveMult;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMelee:
                        return EquipmentScoreMultMelee;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMagic:
                        return EquipmentScoreMultMagic;
                    case CombatStyle_FieldIndex.EquipmentScoreMultRanged:
                        return EquipmentScoreMultRanged;
                    case CombatStyle_FieldIndex.EquipmentScoreMultShout:
                        return EquipmentScoreMultShout;
                    case CombatStyle_FieldIndex.EquipmentScoreMultUnarmed:
                        return EquipmentScoreMultUnarmed;
                    case CombatStyle_FieldIndex.EquipmentScoreMultStaff:
                        return EquipmentScoreMultStaff;
                    case CombatStyle_FieldIndex.AvoidThreatChance:
                        return AvoidThreatChance;
                    case CombatStyle_FieldIndex.CSMD:
                        return CSMD;
                    case CombatStyle_FieldIndex.Melee:
                        return Melee;
                    case CombatStyle_FieldIndex.CloseRange:
                        return CloseRange;
                    case CombatStyle_FieldIndex.LongRangeStrafeMult:
                        return LongRangeStrafeMult;
                    case CombatStyle_FieldIndex.Flight:
                        return Flight;
                    case CombatStyle_FieldIndex.Flags:
                        return Flags;
                    case CombatStyle_FieldIndex.CSGDDataTypeState:
                        return CSGDDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyle_FieldIndex.OffensiveMult:
                        this.OffensiveMult = ex;
                        break;
                    case CombatStyle_FieldIndex.DefensiveMult:
                        this.DefensiveMult = ex;
                        break;
                    case CombatStyle_FieldIndex.GroupOffensiveMult:
                        this.GroupOffensiveMult = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMelee:
                        this.EquipmentScoreMultMelee = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMagic:
                        this.EquipmentScoreMultMagic = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultRanged:
                        this.EquipmentScoreMultRanged = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultShout:
                        this.EquipmentScoreMultShout = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultUnarmed:
                        this.EquipmentScoreMultUnarmed = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultStaff:
                        this.EquipmentScoreMultStaff = ex;
                        break;
                    case CombatStyle_FieldIndex.AvoidThreatChance:
                        this.AvoidThreatChance = ex;
                        break;
                    case CombatStyle_FieldIndex.CSMD:
                        this.CSMD = ex;
                        break;
                    case CombatStyle_FieldIndex.Melee:
                        this.Melee = new MaskItem<Exception?, CombatStyleMelee.ErrorMask?>(ex, null);
                        break;
                    case CombatStyle_FieldIndex.CloseRange:
                        this.CloseRange = new MaskItem<Exception?, CombatStyleCloseRange.ErrorMask?>(ex, null);
                        break;
                    case CombatStyle_FieldIndex.LongRangeStrafeMult:
                        this.LongRangeStrafeMult = ex;
                        break;
                    case CombatStyle_FieldIndex.Flight:
                        this.Flight = new MaskItem<Exception?, CombatStyleFlight.ErrorMask?>(ex, null);
                        break;
                    case CombatStyle_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case CombatStyle_FieldIndex.CSGDDataTypeState:
                        this.CSGDDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyle_FieldIndex.OffensiveMult:
                        this.OffensiveMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.DefensiveMult:
                        this.DefensiveMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.GroupOffensiveMult:
                        this.GroupOffensiveMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMelee:
                        this.EquipmentScoreMultMelee = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMagic:
                        this.EquipmentScoreMultMagic = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultRanged:
                        this.EquipmentScoreMultRanged = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultShout:
                        this.EquipmentScoreMultShout = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultUnarmed:
                        this.EquipmentScoreMultUnarmed = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultStaff:
                        this.EquipmentScoreMultStaff = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.AvoidThreatChance:
                        this.AvoidThreatChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CSMD:
                        this.CSMD = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.Melee:
                        this.Melee = (MaskItem<Exception?, CombatStyleMelee.ErrorMask?>?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRange:
                        this.CloseRange = (MaskItem<Exception?, CombatStyleCloseRange.ErrorMask?>?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeStrafeMult:
                        this.LongRangeStrafeMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.Flight:
                        this.Flight = (MaskItem<Exception?, CombatStyleFlight.ErrorMask?>?)obj;
                        break;
                    case CombatStyle_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CSGDDataTypeState:
                        this.CSGDDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (OffensiveMult != null) return true;
                if (DefensiveMult != null) return true;
                if (GroupOffensiveMult != null) return true;
                if (EquipmentScoreMultMelee != null) return true;
                if (EquipmentScoreMultMagic != null) return true;
                if (EquipmentScoreMultRanged != null) return true;
                if (EquipmentScoreMultShout != null) return true;
                if (EquipmentScoreMultUnarmed != null) return true;
                if (EquipmentScoreMultStaff != null) return true;
                if (AvoidThreatChance != null) return true;
                if (CSMD != null) return true;
                if (Melee != null) return true;
                if (CloseRange != null) return true;
                if (LongRangeStrafeMult != null) return true;
                if (Flight != null) return true;
                if (Flags != null) return true;
                if (CSGDDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(OffensiveMult, "OffensiveMult");
                fg.AppendItem(DefensiveMult, "DefensiveMult");
                fg.AppendItem(GroupOffensiveMult, "GroupOffensiveMult");
                fg.AppendItem(EquipmentScoreMultMelee, "EquipmentScoreMultMelee");
                fg.AppendItem(EquipmentScoreMultMagic, "EquipmentScoreMultMagic");
                fg.AppendItem(EquipmentScoreMultRanged, "EquipmentScoreMultRanged");
                fg.AppendItem(EquipmentScoreMultShout, "EquipmentScoreMultShout");
                fg.AppendItem(EquipmentScoreMultUnarmed, "EquipmentScoreMultUnarmed");
                fg.AppendItem(EquipmentScoreMultStaff, "EquipmentScoreMultStaff");
                fg.AppendItem(AvoidThreatChance, "AvoidThreatChance");
                fg.AppendItem(CSMD, "CSMD");
                Melee?.ToString(fg);
                CloseRange?.ToString(fg);
                fg.AppendItem(LongRangeStrafeMult, "LongRangeStrafeMult");
                Flight?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(CSGDDataTypeState, "CSGDDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.OffensiveMult = this.OffensiveMult.Combine(rhs.OffensiveMult);
                ret.DefensiveMult = this.DefensiveMult.Combine(rhs.DefensiveMult);
                ret.GroupOffensiveMult = this.GroupOffensiveMult.Combine(rhs.GroupOffensiveMult);
                ret.EquipmentScoreMultMelee = this.EquipmentScoreMultMelee.Combine(rhs.EquipmentScoreMultMelee);
                ret.EquipmentScoreMultMagic = this.EquipmentScoreMultMagic.Combine(rhs.EquipmentScoreMultMagic);
                ret.EquipmentScoreMultRanged = this.EquipmentScoreMultRanged.Combine(rhs.EquipmentScoreMultRanged);
                ret.EquipmentScoreMultShout = this.EquipmentScoreMultShout.Combine(rhs.EquipmentScoreMultShout);
                ret.EquipmentScoreMultUnarmed = this.EquipmentScoreMultUnarmed.Combine(rhs.EquipmentScoreMultUnarmed);
                ret.EquipmentScoreMultStaff = this.EquipmentScoreMultStaff.Combine(rhs.EquipmentScoreMultStaff);
                ret.AvoidThreatChance = this.AvoidThreatChance.Combine(rhs.AvoidThreatChance);
                ret.CSMD = this.CSMD.Combine(rhs.CSMD);
                ret.Melee = this.Melee.Combine(rhs.Melee, (l, r) => l.Combine(r));
                ret.CloseRange = this.CloseRange.Combine(rhs.CloseRange, (l, r) => l.Combine(r));
                ret.LongRangeStrafeMult = this.LongRangeStrafeMult.Combine(rhs.LongRangeStrafeMult);
                ret.Flight = this.Flight.Combine(rhs.Flight, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.CSGDDataTypeState = this.CSGDDataTypeState.Combine(rhs.CSGDDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool OffensiveMult;
            public bool DefensiveMult;
            public bool GroupOffensiveMult;
            public bool EquipmentScoreMultMelee;
            public bool EquipmentScoreMultMagic;
            public bool EquipmentScoreMultRanged;
            public bool EquipmentScoreMultShout;
            public bool EquipmentScoreMultUnarmed;
            public bool EquipmentScoreMultStaff;
            public bool AvoidThreatChance;
            public bool CSMD;
            public CombatStyleMelee.TranslationMask? Melee;
            public CombatStyleCloseRange.TranslationMask? CloseRange;
            public bool LongRangeStrafeMult;
            public CombatStyleFlight.TranslationMask? Flight;
            public bool Flags;
            public bool CSGDDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.OffensiveMult = defaultOn;
                this.DefensiveMult = defaultOn;
                this.GroupOffensiveMult = defaultOn;
                this.EquipmentScoreMultMelee = defaultOn;
                this.EquipmentScoreMultMagic = defaultOn;
                this.EquipmentScoreMultRanged = defaultOn;
                this.EquipmentScoreMultShout = defaultOn;
                this.EquipmentScoreMultUnarmed = defaultOn;
                this.EquipmentScoreMultStaff = defaultOn;
                this.AvoidThreatChance = defaultOn;
                this.CSMD = defaultOn;
                this.LongRangeStrafeMult = defaultOn;
                this.Flags = defaultOn;
                this.CSGDDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((OffensiveMult, null));
                ret.Add((DefensiveMult, null));
                ret.Add((GroupOffensiveMult, null));
                ret.Add((EquipmentScoreMultMelee, null));
                ret.Add((EquipmentScoreMultMagic, null));
                ret.Add((EquipmentScoreMultRanged, null));
                ret.Add((EquipmentScoreMultShout, null));
                ret.Add((EquipmentScoreMultUnarmed, null));
                ret.Add((EquipmentScoreMultStaff, null));
                ret.Add((AvoidThreatChance, null));
                ret.Add((CSMD, null));
                ret.Add((Melee != null ? Melee.OnOverall : DefaultOn, Melee?.GetCrystal()));
                ret.Add((CloseRange != null ? CloseRange.OnOverall : DefaultOn, CloseRange?.GetCrystal()));
                ret.Add((LongRangeStrafeMult, null));
                ret.Add((Flight != null ? Flight.OnOverall : DefaultOn, Flight?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((CSGDDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CombatStyle_Registration.TriggeringRecordType;
        public CombatStyle(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private CombatStyle(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal CombatStyle(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public CombatStyle(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public CombatStyle(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum CSGDDataType
        {
            Break0 = 1,
            Break1 = 2
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CombatStyleBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static CombatStyle CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CombatStyle();
            ((CombatStyleSetterCommon)((ICombatStyleGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CombatStyle item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new CombatStyle GetNew()
        {
            return new CombatStyle();
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStyle :
        ICombatStyleGetter,
        IFallout4MajorRecord,
        ILoquiObjectSetter<ICombatStyleInternal>
    {
        new Single OffensiveMult { get; set; }
        new Single DefensiveMult { get; set; }
        new Single GroupOffensiveMult { get; set; }
        new Single EquipmentScoreMultMelee { get; set; }
        new Single EquipmentScoreMultMagic { get; set; }
        new Single EquipmentScoreMultRanged { get; set; }
        new Single EquipmentScoreMultShout { get; set; }
        new Single EquipmentScoreMultUnarmed { get; set; }
        new Single EquipmentScoreMultStaff { get; set; }
        new Single AvoidThreatChance { get; set; }
        new MemorySlice<Byte>? CSMD { get; set; }
        new CombatStyleMelee? Melee { get; set; }
        new CombatStyleCloseRange? CloseRange { get; set; }
        new Single? LongRangeStrafeMult { get; set; }
        new CombatStyleFlight? Flight { get; set; }
        new CombatStyle.Flag? Flags { get; set; }
        new CombatStyle.CSGDDataType CSGDDataTypeState { get; set; }
        #region Mutagen
        new CombatStyle.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ICombatStyleInternal :
        IFallout4MajorRecordInternal,
        ICombatStyle,
        ICombatStyleGetter
    {
    }

    public partial interface ICombatStyleGetter :
        IFallout4MajorRecordGetter,
        ILoquiObject<ICombatStyleGetter>,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => CombatStyle_Registration.Instance;
        Single OffensiveMult { get; }
        Single DefensiveMult { get; }
        Single GroupOffensiveMult { get; }
        Single EquipmentScoreMultMelee { get; }
        Single EquipmentScoreMultMagic { get; }
        Single EquipmentScoreMultRanged { get; }
        Single EquipmentScoreMultShout { get; }
        Single EquipmentScoreMultUnarmed { get; }
        Single EquipmentScoreMultStaff { get; }
        Single AvoidThreatChance { get; }
        ReadOnlyMemorySlice<Byte>? CSMD { get; }
        ICombatStyleMeleeGetter? Melee { get; }
        ICombatStyleCloseRangeGetter? CloseRange { get; }
        Single? LongRangeStrafeMult { get; }
        ICombatStyleFlightGetter? Flight { get; }
        CombatStyle.Flag? Flags { get; }
        CombatStyle.CSGDDataType CSGDDataTypeState { get; }

        #region Mutagen
        CombatStyle.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class CombatStyleMixIn
    {
        public static void Clear(this ICombatStyleInternal item)
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CombatStyle.Mask<bool> GetEqualsMask(
            this ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICombatStyleGetter item,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICombatStyleGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICombatStyleGetter item,
            ICombatStyleGetter rhs)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICombatStyleInternal lhs,
            ICombatStyleGetter rhs,
            out CombatStyle.ErrorMask errorMask,
            CombatStyle.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CombatStyle.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICombatStyleInternal lhs,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            CombatStyle.TranslationMask? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            out CombatStyle.ErrorMask errorMask,
            CombatStyle.TranslationMask? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static CombatStyle Duplicate(
            this ICombatStyleGetter item,
            FormKey formKey,
            CombatStyle.TranslationMask? copyMask = null)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICombatStyleInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum CombatStyle_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        OffensiveMult = 6,
        DefensiveMult = 7,
        GroupOffensiveMult = 8,
        EquipmentScoreMultMelee = 9,
        EquipmentScoreMultMagic = 10,
        EquipmentScoreMultRanged = 11,
        EquipmentScoreMultShout = 12,
        EquipmentScoreMultUnarmed = 13,
        EquipmentScoreMultStaff = 14,
        AvoidThreatChance = 15,
        CSMD = 16,
        Melee = 17,
        CloseRange = 18,
        LongRangeStrafeMult = 19,
        Flight = 20,
        Flags = 21,
        CSGDDataTypeState = 22,
    }
    #endregion

    #region Registration
    public partial class CombatStyle_Registration : ILoquiRegistration
    {
        public static readonly CombatStyle_Registration Instance = new CombatStyle_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 208,
            version: 0);

        public const string GUID = "13dc9a9a-040d-459c-82f4-53985876bc3c";

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(CombatStyle.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyle.ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyle);

        public static readonly Type GetterType = typeof(ICombatStyleGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStyle);

        public static readonly Type? InternalSetterType = typeof(ICombatStyleInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.CombatStyle";

        public const string Name = "CombatStyle";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CSTY;
        public static readonly Type BinaryWriteTranslation = typeof(CombatStyleBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CombatStyleSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly CombatStyleSetterCommon Instance = new CombatStyleSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICombatStyleInternal item)
        {
            ClearPartial();
            item.OffensiveMult = default;
            item.DefensiveMult = default;
            item.GroupOffensiveMult = default;
            item.EquipmentScoreMultMelee = default;
            item.EquipmentScoreMultMagic = default;
            item.EquipmentScoreMultRanged = default;
            item.EquipmentScoreMultShout = default;
            item.EquipmentScoreMultUnarmed = default;
            item.EquipmentScoreMultStaff = default;
            item.AvoidThreatChance = default;
            item.CSMD = default;
            item.Melee = null;
            item.CloseRange = null;
            item.LongRangeStrafeMult = default;
            item.Flight = null;
            item.Flags = default;
            item.CSGDDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ICombatStyleInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICombatStyleInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ICombatStyle obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICombatStyleInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ICombatStyleInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CombatStyleBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CombatStyleBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (CombatStyle)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (CombatStyle)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class CombatStyleCommon : Fallout4MajorRecordCommon
    {
        public new static readonly CombatStyleCommon Instance = new CombatStyleCommon();

        public CombatStyle.Mask<bool> GetEqualsMask(
            ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStyle.Mask<bool>(false);
            ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            CombatStyle.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.OffensiveMult = item.OffensiveMult.EqualsWithin(rhs.OffensiveMult);
            ret.DefensiveMult = item.DefensiveMult.EqualsWithin(rhs.DefensiveMult);
            ret.GroupOffensiveMult = item.GroupOffensiveMult.EqualsWithin(rhs.GroupOffensiveMult);
            ret.EquipmentScoreMultMelee = item.EquipmentScoreMultMelee.EqualsWithin(rhs.EquipmentScoreMultMelee);
            ret.EquipmentScoreMultMagic = item.EquipmentScoreMultMagic.EqualsWithin(rhs.EquipmentScoreMultMagic);
            ret.EquipmentScoreMultRanged = item.EquipmentScoreMultRanged.EqualsWithin(rhs.EquipmentScoreMultRanged);
            ret.EquipmentScoreMultShout = item.EquipmentScoreMultShout.EqualsWithin(rhs.EquipmentScoreMultShout);
            ret.EquipmentScoreMultUnarmed = item.EquipmentScoreMultUnarmed.EqualsWithin(rhs.EquipmentScoreMultUnarmed);
            ret.EquipmentScoreMultStaff = item.EquipmentScoreMultStaff.EqualsWithin(rhs.EquipmentScoreMultStaff);
            ret.AvoidThreatChance = item.AvoidThreatChance.EqualsWithin(rhs.AvoidThreatChance);
            ret.CSMD = MemorySliceExt.Equal(item.CSMD, rhs.CSMD);
            ret.Melee = EqualsMaskHelper.EqualsHelper(
                item.Melee,
                rhs.Melee,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.CloseRange = EqualsMaskHelper.EqualsHelper(
                item.CloseRange,
                rhs.CloseRange,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LongRangeStrafeMult = item.LongRangeStrafeMult.EqualsWithin(rhs.LongRangeStrafeMult);
            ret.Flight = EqualsMaskHelper.EqualsHelper(
                item.Flight,
                rhs.Flight,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.CSGDDataTypeState = item.CSGDDataTypeState == rhs.CSGDDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICombatStyleGetter item,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICombatStyleGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CombatStyle =>");
            }
            else
            {
                fg.AppendLine($"{name} (CombatStyle) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICombatStyleGetter item,
            FileGeneration fg,
            CombatStyle.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.OffensiveMult ?? true)
            {
                fg.AppendItem(item.OffensiveMult, "OffensiveMult");
            }
            if (printMask?.DefensiveMult ?? true)
            {
                fg.AppendItem(item.DefensiveMult, "DefensiveMult");
            }
            if (printMask?.GroupOffensiveMult ?? true)
            {
                fg.AppendItem(item.GroupOffensiveMult, "GroupOffensiveMult");
            }
            if (printMask?.EquipmentScoreMultMelee ?? true)
            {
                fg.AppendItem(item.EquipmentScoreMultMelee, "EquipmentScoreMultMelee");
            }
            if (printMask?.EquipmentScoreMultMagic ?? true)
            {
                fg.AppendItem(item.EquipmentScoreMultMagic, "EquipmentScoreMultMagic");
            }
            if (printMask?.EquipmentScoreMultRanged ?? true)
            {
                fg.AppendItem(item.EquipmentScoreMultRanged, "EquipmentScoreMultRanged");
            }
            if (printMask?.EquipmentScoreMultShout ?? true)
            {
                fg.AppendItem(item.EquipmentScoreMultShout, "EquipmentScoreMultShout");
            }
            if (printMask?.EquipmentScoreMultUnarmed ?? true)
            {
                fg.AppendItem(item.EquipmentScoreMultUnarmed, "EquipmentScoreMultUnarmed");
            }
            if (printMask?.EquipmentScoreMultStaff ?? true)
            {
                fg.AppendItem(item.EquipmentScoreMultStaff, "EquipmentScoreMultStaff");
            }
            if (printMask?.AvoidThreatChance ?? true)
            {
                fg.AppendItem(item.AvoidThreatChance, "AvoidThreatChance");
            }
            if ((printMask?.CSMD ?? true)
                && item.CSMD.TryGet(out var CSMDItem))
            {
                fg.AppendLine($"CSMD => {SpanExt.ToHexString(CSMDItem)}");
            }
            if ((printMask?.Melee?.Overall ?? true)
                && item.Melee.TryGet(out var MeleeItem))
            {
                MeleeItem?.ToString(fg, "Melee");
            }
            if ((printMask?.CloseRange?.Overall ?? true)
                && item.CloseRange.TryGet(out var CloseRangeItem))
            {
                CloseRangeItem?.ToString(fg, "CloseRange");
            }
            if ((printMask?.LongRangeStrafeMult ?? true)
                && item.LongRangeStrafeMult.TryGet(out var LongRangeStrafeMultItem))
            {
                fg.AppendItem(LongRangeStrafeMultItem, "LongRangeStrafeMult");
            }
            if ((printMask?.Flight?.Overall ?? true)
                && item.Flight.TryGet(out var FlightItem))
            {
                FlightItem?.ToString(fg, "Flight");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.CSGDDataTypeState ?? true)
            {
                fg.AppendItem(item.CSGDDataTypeState, "CSGDDataTypeState");
            }
        }
        
        public static CombatStyle_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CombatStyle_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (CombatStyle_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (CombatStyle_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (CombatStyle_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (CombatStyle_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (CombatStyle_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new CombatStyle_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (CombatStyle_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICombatStyleGetter? lhs,
            ICombatStyleGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!lhs.OffensiveMult.EqualsWithin(rhs.OffensiveMult)) return false;
            if (!lhs.DefensiveMult.EqualsWithin(rhs.DefensiveMult)) return false;
            if (!lhs.GroupOffensiveMult.EqualsWithin(rhs.GroupOffensiveMult)) return false;
            if (!lhs.EquipmentScoreMultMelee.EqualsWithin(rhs.EquipmentScoreMultMelee)) return false;
            if (!lhs.EquipmentScoreMultMagic.EqualsWithin(rhs.EquipmentScoreMultMagic)) return false;
            if (!lhs.EquipmentScoreMultRanged.EqualsWithin(rhs.EquipmentScoreMultRanged)) return false;
            if (!lhs.EquipmentScoreMultShout.EqualsWithin(rhs.EquipmentScoreMultShout)) return false;
            if (!lhs.EquipmentScoreMultUnarmed.EqualsWithin(rhs.EquipmentScoreMultUnarmed)) return false;
            if (!lhs.EquipmentScoreMultStaff.EqualsWithin(rhs.EquipmentScoreMultStaff)) return false;
            if (!lhs.AvoidThreatChance.EqualsWithin(rhs.AvoidThreatChance)) return false;
            if (!MemorySliceExt.Equal(lhs.CSMD, rhs.CSMD)) return false;
            if (!object.Equals(lhs.Melee, rhs.Melee)) return false;
            if (!object.Equals(lhs.CloseRange, rhs.CloseRange)) return false;
            if (!lhs.LongRangeStrafeMult.EqualsWithin(rhs.LongRangeStrafeMult)) return false;
            if (!object.Equals(lhs.Flight, rhs.Flight)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.CSGDDataTypeState != rhs.CSGDDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICombatStyleGetter?)lhs,
                rhs: rhs as ICombatStyleGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICombatStyleGetter?)lhs,
                rhs: rhs as ICombatStyleGetter);
        }
        
        public virtual int GetHashCode(ICombatStyleGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.OffensiveMult);
            hash.Add(item.DefensiveMult);
            hash.Add(item.GroupOffensiveMult);
            hash.Add(item.EquipmentScoreMultMelee);
            hash.Add(item.EquipmentScoreMultMagic);
            hash.Add(item.EquipmentScoreMultRanged);
            hash.Add(item.EquipmentScoreMultShout);
            hash.Add(item.EquipmentScoreMultUnarmed);
            hash.Add(item.EquipmentScoreMultStaff);
            hash.Add(item.AvoidThreatChance);
            if (item.CSMD.TryGet(out var CSMDItem))
            {
                hash.Add(CSMDItem);
            }
            if (item.Melee.TryGet(out var Meleeitem))
            {
                hash.Add(Meleeitem);
            }
            if (item.CloseRange.TryGet(out var CloseRangeitem))
            {
                hash.Add(CloseRangeitem);
            }
            if (item.LongRangeStrafeMult.TryGet(out var LongRangeStrafeMultitem))
            {
                hash.Add(LongRangeStrafeMultitem);
            }
            if (item.Flight.TryGet(out var Flightitem))
            {
                hash.Add(Flightitem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.CSGDDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ICombatStyleGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICombatStyleGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return CombatStyle.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ICombatStyleGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public CombatStyle Duplicate(
            ICombatStyleGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new CombatStyle(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICombatStyle)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICombatStyle)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class CombatStyleSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly CombatStyleSetterTranslationCommon Instance = new CombatStyleSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICombatStyleInternal item,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ICombatStyle item,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.OffensiveMult) ?? true))
            {
                item.OffensiveMult = rhs.OffensiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DefensiveMult) ?? true))
            {
                item.DefensiveMult = rhs.DefensiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroupOffensiveMult) ?? true))
            {
                item.GroupOffensiveMult = rhs.GroupOffensiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultMelee) ?? true))
            {
                item.EquipmentScoreMultMelee = rhs.EquipmentScoreMultMelee;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultMagic) ?? true))
            {
                item.EquipmentScoreMultMagic = rhs.EquipmentScoreMultMagic;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultRanged) ?? true))
            {
                item.EquipmentScoreMultRanged = rhs.EquipmentScoreMultRanged;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultShout) ?? true))
            {
                item.EquipmentScoreMultShout = rhs.EquipmentScoreMultShout;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultUnarmed) ?? true))
            {
                item.EquipmentScoreMultUnarmed = rhs.EquipmentScoreMultUnarmed;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultStaff) ?? true))
            {
                item.EquipmentScoreMultStaff = rhs.EquipmentScoreMultStaff;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.AvoidThreatChance) ?? true))
            {
                item.AvoidThreatChance = rhs.AvoidThreatChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CSMD) ?? true))
            {
                if(rhs.CSMD.TryGet(out var CSMDrhs))
                {
                    item.CSMD = CSMDrhs.ToArray();
                }
                else
                {
                    item.CSMD = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Melee) ?? true))
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.Melee);
                try
                {
                    if(rhs.Melee.TryGet(out var rhsMelee))
                    {
                        item.Melee = rhsMelee.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)CombatStyle_FieldIndex.Melee));
                    }
                    else
                    {
                        item.Melee = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRange) ?? true))
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.CloseRange);
                try
                {
                    if(rhs.CloseRange.TryGet(out var rhsCloseRange))
                    {
                        item.CloseRange = rhsCloseRange.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)CombatStyle_FieldIndex.CloseRange));
                    }
                    else
                    {
                        item.CloseRange = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeStrafeMult) ?? true))
            {
                item.LongRangeStrafeMult = rhs.LongRangeStrafeMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Flight) ?? true))
            {
                errorMask?.PushIndex((int)CombatStyle_FieldIndex.Flight);
                try
                {
                    if(rhs.Flight.TryGet(out var rhsFlight))
                    {
                        item.Flight = rhsFlight.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)CombatStyle_FieldIndex.Flight));
                    }
                    else
                    {
                        item.Flight = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CSGDDataTypeState) ?? true))
            {
                item.CSGDDataTypeState = rhs.CSGDDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyleInternal)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyle)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyleInternal)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyle)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            CombatStyle.TranslationMask? copyMask = null)
        {
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            out CombatStyle.ErrorMask errorMask,
            CombatStyle.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CombatStyle.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class CombatStyle
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyle_Registration.Instance;
        public new static CombatStyle_Registration Registration => CombatStyle_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CombatStyleCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CombatStyleSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CombatStyleSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CombatStyleBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CombatStyleBinaryWriteTranslation Instance = new CombatStyleBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICombatStyleGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ICombatStyleGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.CSGD)))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OffensiveMult);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DefensiveMult);
                if (!item.CSGDDataTypeState.HasFlag(CombatStyle.CSGDDataType.Break0))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.GroupOffensiveMult);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EquipmentScoreMultMelee);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EquipmentScoreMultMagic);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EquipmentScoreMultRanged);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EquipmentScoreMultShout);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EquipmentScoreMultUnarmed);
                    if (!item.CSGDDataTypeState.HasFlag(CombatStyle.CSGDDataType.Break1))
                    {
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.EquipmentScoreMultStaff);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.AvoidThreatChance);
                    }
                }
            }
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CSMD,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CSMD));
            if (item.Melee.TryGet(out var MeleeItem))
            {
                ((CombatStyleMeleeBinaryWriteTranslation)((IBinaryItem)MeleeItem).BinaryWriteTranslator).Write(
                    item: MeleeItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.CloseRange.TryGet(out var CloseRangeItem))
            {
                ((CombatStyleCloseRangeBinaryWriteTranslation)((IBinaryItem)CloseRangeItem).BinaryWriteTranslator).Write(
                    item: CloseRangeItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LongRangeStrafeMult,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CSLR));
            if (item.Flight.TryGet(out var FlightItem))
            {
                ((CombatStyleFlightBinaryWriteTranslation)((IBinaryItem)FlightItem).BinaryWriteTranslator).Write(
                    item: FlightItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<CombatStyle.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DATA));
        }

        public void Write(
            MutagenWriter writer,
            ICombatStyleGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.CSTY),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICombatStyleGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICombatStyleGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICombatStyleGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CombatStyleBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static CombatStyleBinaryCreateTranslation Instance = new CombatStyleBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CSTY;
        public static void FillBinaryStructs(
            ICombatStyleInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ICombatStyleInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CSGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.OffensiveMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.DefensiveMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.CSGDDataTypeState |= CombatStyle.CSGDDataType.Break0;
                        return (int)CombatStyle_FieldIndex.DefensiveMult;
                    }
                    item.GroupOffensiveMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EquipmentScoreMultMelee = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EquipmentScoreMultMagic = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EquipmentScoreMultRanged = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EquipmentScoreMultShout = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EquipmentScoreMultUnarmed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.CSGDDataTypeState |= CombatStyle.CSGDDataType.Break1;
                        return (int)CombatStyle_FieldIndex.EquipmentScoreMultUnarmed;
                    }
                    item.EquipmentScoreMultStaff = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.AvoidThreatChance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)CombatStyle_FieldIndex.AvoidThreatChance;
                }
                case RecordTypeInts.CSMD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CSMD = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)CombatStyle_FieldIndex.CSMD;
                }
                case RecordTypeInts.CSME:
                {
                    item.Melee = Mutagen.Bethesda.Fallout4.CombatStyleMelee.CreateFromBinary(frame: frame);
                    return (int)CombatStyle_FieldIndex.Melee;
                }
                case RecordTypeInts.CSCR:
                {
                    item.CloseRange = Mutagen.Bethesda.Fallout4.CombatStyleCloseRange.CreateFromBinary(frame: frame);
                    return (int)CombatStyle_FieldIndex.CloseRange;
                }
                case RecordTypeInts.CSLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LongRangeStrafeMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)CombatStyle_FieldIndex.LongRangeStrafeMult;
                }
                case RecordTypeInts.CSFL:
                {
                    item.Flight = Mutagen.Bethesda.Fallout4.CombatStyleFlight.CreateFromBinary(frame: frame);
                    return (int)CombatStyle_FieldIndex.Flight;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<CombatStyle.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)CombatStyle_FieldIndex.Flags;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class CombatStyleBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CombatStyleBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ICombatStyleGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyle_Registration.Instance;
        public new static CombatStyle_Registration Registration => CombatStyle_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CombatStyleCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CombatStyleSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CombatStyleBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public CombatStyle.MajorFlag MajorFlags => (CombatStyle.MajorFlag)this.MajorRecordFlagsRaw;

        private int? _CSGDLocation;
        public CombatStyle.CSGDDataType CSGDDataTypeState { get; private set; }
        #region OffensiveMult
        private int _OffensiveMultLocation => _CSGDLocation!.Value;
        private bool _OffensiveMult_IsSet => _CSGDLocation.HasValue;
        public Single OffensiveMult => _OffensiveMult_IsSet ? _data.Slice(_OffensiveMultLocation, 4).Float() : default;
        #endregion
        #region DefensiveMult
        private int _DefensiveMultLocation => _CSGDLocation!.Value + 0x4;
        private bool _DefensiveMult_IsSet => _CSGDLocation.HasValue;
        public Single DefensiveMult => _DefensiveMult_IsSet ? _data.Slice(_DefensiveMultLocation, 4).Float() : default;
        #endregion
        #region GroupOffensiveMult
        private int _GroupOffensiveMultLocation => _CSGDLocation!.Value + 0x8;
        private bool _GroupOffensiveMult_IsSet => _CSGDLocation.HasValue && !CSGDDataTypeState.HasFlag(CombatStyle.CSGDDataType.Break0);
        public Single GroupOffensiveMult => _GroupOffensiveMult_IsSet ? _data.Slice(_GroupOffensiveMultLocation, 4).Float() : default;
        #endregion
        #region EquipmentScoreMultMelee
        private int _EquipmentScoreMultMeleeLocation => _CSGDLocation!.Value + 0xC;
        private bool _EquipmentScoreMultMelee_IsSet => _CSGDLocation.HasValue && !CSGDDataTypeState.HasFlag(CombatStyle.CSGDDataType.Break0);
        public Single EquipmentScoreMultMelee => _EquipmentScoreMultMelee_IsSet ? _data.Slice(_EquipmentScoreMultMeleeLocation, 4).Float() : default;
        #endregion
        #region EquipmentScoreMultMagic
        private int _EquipmentScoreMultMagicLocation => _CSGDLocation!.Value + 0x10;
        private bool _EquipmentScoreMultMagic_IsSet => _CSGDLocation.HasValue && !CSGDDataTypeState.HasFlag(CombatStyle.CSGDDataType.Break0);
        public Single EquipmentScoreMultMagic => _EquipmentScoreMultMagic_IsSet ? _data.Slice(_EquipmentScoreMultMagicLocation, 4).Float() : default;
        #endregion
        #region EquipmentScoreMultRanged
        private int _EquipmentScoreMultRangedLocation => _CSGDLocation!.Value + 0x14;
        private bool _EquipmentScoreMultRanged_IsSet => _CSGDLocation.HasValue && !CSGDDataTypeState.HasFlag(CombatStyle.CSGDDataType.Break0);
        public Single EquipmentScoreMultRanged => _EquipmentScoreMultRanged_IsSet ? _data.Slice(_EquipmentScoreMultRangedLocation, 4).Float() : default;
        #endregion
        #region EquipmentScoreMultShout
        private int _EquipmentScoreMultShoutLocation => _CSGDLocation!.Value + 0x18;
        private bool _EquipmentScoreMultShout_IsSet => _CSGDLocation.HasValue && !CSGDDataTypeState.HasFlag(CombatStyle.CSGDDataType.Break0);
        public Single EquipmentScoreMultShout => _EquipmentScoreMultShout_IsSet ? _data.Slice(_EquipmentScoreMultShoutLocation, 4).Float() : default;
        #endregion
        #region EquipmentScoreMultUnarmed
        private int _EquipmentScoreMultUnarmedLocation => _CSGDLocation!.Value + 0x1C;
        private bool _EquipmentScoreMultUnarmed_IsSet => _CSGDLocation.HasValue && !CSGDDataTypeState.HasFlag(CombatStyle.CSGDDataType.Break0);
        public Single EquipmentScoreMultUnarmed => _EquipmentScoreMultUnarmed_IsSet ? _data.Slice(_EquipmentScoreMultUnarmedLocation, 4).Float() : default;
        #endregion
        #region EquipmentScoreMultStaff
        private int _EquipmentScoreMultStaffLocation => _CSGDLocation!.Value + 0x20;
        private bool _EquipmentScoreMultStaff_IsSet => _CSGDLocation.HasValue && !CSGDDataTypeState.HasFlag(CombatStyle.CSGDDataType.Break1);
        public Single EquipmentScoreMultStaff => _EquipmentScoreMultStaff_IsSet ? _data.Slice(_EquipmentScoreMultStaffLocation, 4).Float() : default;
        #endregion
        #region AvoidThreatChance
        private int _AvoidThreatChanceLocation => _CSGDLocation!.Value + 0x24;
        private bool _AvoidThreatChance_IsSet => _CSGDLocation.HasValue && !CSGDDataTypeState.HasFlag(CombatStyle.CSGDDataType.Break1);
        public Single AvoidThreatChance => _AvoidThreatChance_IsSet ? _data.Slice(_AvoidThreatChanceLocation, 4).Float() : default;
        #endregion
        #region CSMD
        private int? _CSMDLocation;
        public ReadOnlyMemorySlice<Byte>? CSMD => _CSMDLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _CSMDLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Melee
        private RangeInt32? _MeleeLocation;
        public ICombatStyleMeleeGetter? Melee => _MeleeLocation.HasValue ? CombatStyleMeleeBinaryOverlay.CombatStyleMeleeFactory(new OverlayStream(_data.Slice(_MeleeLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region CloseRange
        private RangeInt32? _CloseRangeLocation;
        public ICombatStyleCloseRangeGetter? CloseRange => _CloseRangeLocation.HasValue ? CombatStyleCloseRangeBinaryOverlay.CombatStyleCloseRangeFactory(new OverlayStream(_data.Slice(_CloseRangeLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region LongRangeStrafeMult
        private int? _LongRangeStrafeMultLocation;
        public Single? LongRangeStrafeMult => _LongRangeStrafeMultLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _LongRangeStrafeMultLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Flight
        private RangeInt32? _FlightLocation;
        public ICombatStyleFlightGetter? Flight => _FlightLocation.HasValue ? CombatStyleFlightBinaryOverlay.CombatStyleFlightFactory(new OverlayStream(_data.Slice(_FlightLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public CombatStyle.Flag? Flags => _FlagsLocation.HasValue ? (CombatStyle.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(CombatStyle.Flag?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CombatStyleBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CombatStyleBinaryOverlay CombatStyleFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new CombatStyleBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static CombatStyleBinaryOverlay CombatStyleFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CombatStyleFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CSGD:
                {
                    _CSGDLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x8)
                    {
                        this.CSGDDataTypeState |= CombatStyle.CSGDDataType.Break0;
                    }
                    if (subLen <= 0x20)
                    {
                        this.CSGDDataTypeState |= CombatStyle.CSGDDataType.Break1;
                    }
                    return (int)CombatStyle_FieldIndex.AvoidThreatChance;
                }
                case RecordTypeInts.CSMD:
                {
                    _CSMDLocation = (stream.Position - offset);
                    return (int)CombatStyle_FieldIndex.CSMD;
                }
                case RecordTypeInts.CSME:
                {
                    _MeleeLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)CombatStyle_FieldIndex.Melee;
                }
                case RecordTypeInts.CSCR:
                {
                    _CloseRangeLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)CombatStyle_FieldIndex.CloseRange;
                }
                case RecordTypeInts.CSLR:
                {
                    _LongRangeStrafeMultLocation = (stream.Position - offset);
                    return (int)CombatStyle_FieldIndex.LongRangeStrafeMult;
                }
                case RecordTypeInts.CSFL:
                {
                    _FlightLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)CombatStyle_FieldIndex.Flight;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)CombatStyle_FieldIndex.Flags;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CombatStyleMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICombatStyleGetter rhs)) return false;
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICombatStyleGetter? obj)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

