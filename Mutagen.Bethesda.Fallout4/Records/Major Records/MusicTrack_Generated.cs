/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class MusicTrack :
        Fallout4MajorRecord,
        IMusicTrackInternal,
        ILoquiObjectSetter<MusicTrack>,
        IEquatable<IMusicTrackGetter>
    {
        #region Ctor
        protected MusicTrack()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Type
        public MusicTrack.TypeEnum Type { get; set; } = default;
        #endregion
        #region Duration
        public Single? Duration { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IMusicTrackGetter.Duration => this.Duration;
        #endregion
        #region FadeOut
        public Single? FadeOut { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IMusicTrackGetter.FadeOut => this.FadeOut;
        #endregion
        #region TrackFilename
        public String? TrackFilename { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMusicTrackGetter.TrackFilename => this.TrackFilename;
        #endregion
        #region FinaleFilename
        public String? FinaleFilename { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMusicTrackGetter.FinaleFilename => this.FinaleFilename;
        #endregion
        #region LoopData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MusicTrackLoopData? _LoopData;
        public MusicTrackLoopData? LoopData
        {
            get => _LoopData;
            set => _LoopData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMusicTrackLoopDataGetter? IMusicTrackGetter.LoopData => this.LoopData;
        #endregion
        #region CuePoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Single>? _CuePoints;
        public ExtendedList<Single>? CuePoints
        {
            get => this._CuePoints;
            set => this._CuePoints = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Single>? IMusicTrackGetter.CuePoints => _CuePoints;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IMusicTrackGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Tracks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IMusicTrackGetter>>? _Tracks;
        public ExtendedList<IFormLink<IMusicTrackGetter>>? Tracks
        {
            get => this._Tracks;
            set => this._Tracks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IMusicTrackGetter>>? IMusicTrackGetter.Tracks => _Tracks;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MusicTrackMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMusicTrackGetter rhs)) return false;
            return ((MusicTrackCommon)((IMusicTrackGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IMusicTrackGetter? obj)
        {
            return ((MusicTrackCommon)((IMusicTrackGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MusicTrackCommon)((IMusicTrackGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Type = initialValue;
                this.Duration = initialValue;
                this.FadeOut = initialValue;
                this.TrackFilename = initialValue;
                this.FinaleFilename = initialValue;
                this.LoopData = new MaskItem<TItem, MusicTrackLoopData.Mask<TItem>?>(initialValue, new MusicTrackLoopData.Mask<TItem>(initialValue));
                this.CuePoints = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Tracks = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Type,
                TItem Duration,
                TItem FadeOut,
                TItem TrackFilename,
                TItem FinaleFilename,
                TItem LoopData,
                TItem CuePoints,
                TItem Conditions,
                TItem Tracks)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Type = Type;
                this.Duration = Duration;
                this.FadeOut = FadeOut;
                this.TrackFilename = TrackFilename;
                this.FinaleFilename = FinaleFilename;
                this.LoopData = new MaskItem<TItem, MusicTrackLoopData.Mask<TItem>?>(LoopData, new MusicTrackLoopData.Mask<TItem>(LoopData));
                this.CuePoints = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(CuePoints, Enumerable.Empty<(int Index, TItem Value)>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Tracks = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Tracks, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Type;
            public TItem Duration;
            public TItem FadeOut;
            public TItem TrackFilename;
            public TItem FinaleFilename;
            public MaskItem<TItem, MusicTrackLoopData.Mask<TItem>?>? LoopData { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? CuePoints;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Tracks;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Duration, rhs.Duration)) return false;
                if (!object.Equals(this.FadeOut, rhs.FadeOut)) return false;
                if (!object.Equals(this.TrackFilename, rhs.TrackFilename)) return false;
                if (!object.Equals(this.FinaleFilename, rhs.FinaleFilename)) return false;
                if (!object.Equals(this.LoopData, rhs.LoopData)) return false;
                if (!object.Equals(this.CuePoints, rhs.CuePoints)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Tracks, rhs.Tracks)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Type);
                hash.Add(this.Duration);
                hash.Add(this.FadeOut);
                hash.Add(this.TrackFilename);
                hash.Add(this.FinaleFilename);
                hash.Add(this.LoopData);
                hash.Add(this.CuePoints);
                hash.Add(this.Conditions);
                hash.Add(this.Tracks);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.Duration)) return false;
                if (!eval(this.FadeOut)) return false;
                if (!eval(this.TrackFilename)) return false;
                if (!eval(this.FinaleFilename)) return false;
                if (LoopData != null)
                {
                    if (!eval(this.LoopData.Overall)) return false;
                    if (this.LoopData.Specific != null && !this.LoopData.Specific.All(eval)) return false;
                }
                if (this.CuePoints != null)
                {
                    if (!eval(this.CuePoints.Overall)) return false;
                    if (this.CuePoints.Specific != null)
                    {
                        foreach (var item in this.CuePoints.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Tracks != null)
                {
                    if (!eval(this.Tracks.Overall)) return false;
                    if (this.Tracks.Specific != null)
                    {
                        foreach (var item in this.Tracks.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.Duration)) return true;
                if (eval(this.FadeOut)) return true;
                if (eval(this.TrackFilename)) return true;
                if (eval(this.FinaleFilename)) return true;
                if (LoopData != null)
                {
                    if (eval(this.LoopData.Overall)) return true;
                    if (this.LoopData.Specific != null && this.LoopData.Specific.Any(eval)) return true;
                }
                if (this.CuePoints != null)
                {
                    if (eval(this.CuePoints.Overall)) return true;
                    if (this.CuePoints.Specific != null)
                    {
                        foreach (var item in this.CuePoints.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Tracks != null)
                {
                    if (eval(this.Tracks.Overall)) return true;
                    if (this.Tracks.Specific != null)
                    {
                        foreach (var item in this.Tracks.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MusicTrack.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Type = eval(this.Type);
                obj.Duration = eval(this.Duration);
                obj.FadeOut = eval(this.FadeOut);
                obj.TrackFilename = eval(this.TrackFilename);
                obj.FinaleFilename = eval(this.FinaleFilename);
                obj.LoopData = this.LoopData == null ? null : new MaskItem<R, MusicTrackLoopData.Mask<R>?>(eval(this.LoopData.Overall), this.LoopData.Specific?.Translate(eval));
                if (CuePoints != null)
                {
                    obj.CuePoints = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.CuePoints.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (CuePoints.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.CuePoints.Specific = l;
                        foreach (var item in CuePoints.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Tracks != null)
                {
                    obj.Tracks = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Tracks.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Tracks.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Tracks.Specific = l;
                        foreach (var item in Tracks.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MusicTrack.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MusicTrack.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MusicTrack.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.Duration ?? true)
                    {
                        fg.AppendItem(Duration, "Duration");
                    }
                    if (printMask?.FadeOut ?? true)
                    {
                        fg.AppendItem(FadeOut, "FadeOut");
                    }
                    if (printMask?.TrackFilename ?? true)
                    {
                        fg.AppendItem(TrackFilename, "TrackFilename");
                    }
                    if (printMask?.FinaleFilename ?? true)
                    {
                        fg.AppendItem(FinaleFilename, "FinaleFilename");
                    }
                    if (printMask?.LoopData?.Overall ?? true)
                    {
                        LoopData?.ToString(fg);
                    }
                    if ((printMask?.CuePoints?.Overall ?? true)
                        && CuePoints.TryGet(out var CuePointsItem))
                    {
                        fg.AppendLine("CuePoints =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(CuePointsItem.Overall);
                            if (CuePointsItem.Specific != null)
                            {
                                foreach (var subItem in CuePointsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Tracks?.Overall ?? true)
                        && Tracks.TryGet(out var TracksItem))
                    {
                        fg.AppendLine("Tracks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TracksItem.Overall);
                            if (TracksItem.Specific != null)
                            {
                                foreach (var subItem in TracksItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Type;
            public Exception? Duration;
            public Exception? FadeOut;
            public Exception? TrackFilename;
            public Exception? FinaleFilename;
            public MaskItem<Exception?, MusicTrackLoopData.ErrorMask?>? LoopData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? CuePoints;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Tracks;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MusicTrack_FieldIndex enu = (MusicTrack_FieldIndex)index;
                switch (enu)
                {
                    case MusicTrack_FieldIndex.Type:
                        return Type;
                    case MusicTrack_FieldIndex.Duration:
                        return Duration;
                    case MusicTrack_FieldIndex.FadeOut:
                        return FadeOut;
                    case MusicTrack_FieldIndex.TrackFilename:
                        return TrackFilename;
                    case MusicTrack_FieldIndex.FinaleFilename:
                        return FinaleFilename;
                    case MusicTrack_FieldIndex.LoopData:
                        return LoopData;
                    case MusicTrack_FieldIndex.CuePoints:
                        return CuePoints;
                    case MusicTrack_FieldIndex.Conditions:
                        return Conditions;
                    case MusicTrack_FieldIndex.Tracks:
                        return Tracks;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MusicTrack_FieldIndex enu = (MusicTrack_FieldIndex)index;
                switch (enu)
                {
                    case MusicTrack_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case MusicTrack_FieldIndex.Duration:
                        this.Duration = ex;
                        break;
                    case MusicTrack_FieldIndex.FadeOut:
                        this.FadeOut = ex;
                        break;
                    case MusicTrack_FieldIndex.TrackFilename:
                        this.TrackFilename = ex;
                        break;
                    case MusicTrack_FieldIndex.FinaleFilename:
                        this.FinaleFilename = ex;
                        break;
                    case MusicTrack_FieldIndex.LoopData:
                        this.LoopData = new MaskItem<Exception?, MusicTrackLoopData.ErrorMask?>(ex, null);
                        break;
                    case MusicTrack_FieldIndex.CuePoints:
                        this.CuePoints = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case MusicTrack_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case MusicTrack_FieldIndex.Tracks:
                        this.Tracks = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MusicTrack_FieldIndex enu = (MusicTrack_FieldIndex)index;
                switch (enu)
                {
                    case MusicTrack_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case MusicTrack_FieldIndex.Duration:
                        this.Duration = (Exception?)obj;
                        break;
                    case MusicTrack_FieldIndex.FadeOut:
                        this.FadeOut = (Exception?)obj;
                        break;
                    case MusicTrack_FieldIndex.TrackFilename:
                        this.TrackFilename = (Exception?)obj;
                        break;
                    case MusicTrack_FieldIndex.FinaleFilename:
                        this.FinaleFilename = (Exception?)obj;
                        break;
                    case MusicTrack_FieldIndex.LoopData:
                        this.LoopData = (MaskItem<Exception?, MusicTrackLoopData.ErrorMask?>?)obj;
                        break;
                    case MusicTrack_FieldIndex.CuePoints:
                        this.CuePoints = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case MusicTrack_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case MusicTrack_FieldIndex.Tracks:
                        this.Tracks = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Type != null) return true;
                if (Duration != null) return true;
                if (FadeOut != null) return true;
                if (TrackFilename != null) return true;
                if (FinaleFilename != null) return true;
                if (LoopData != null) return true;
                if (CuePoints != null) return true;
                if (Conditions != null) return true;
                if (Tracks != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Type, "Type");
                fg.AppendItem(Duration, "Duration");
                fg.AppendItem(FadeOut, "FadeOut");
                fg.AppendItem(TrackFilename, "TrackFilename");
                fg.AppendItem(FinaleFilename, "FinaleFilename");
                LoopData?.ToString(fg);
                if (CuePoints.TryGet(out var CuePointsItem))
                {
                    fg.AppendLine("CuePoints =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(CuePointsItem.Overall);
                        if (CuePointsItem.Specific != null)
                        {
                            foreach (var subItem in CuePointsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Tracks.TryGet(out var TracksItem))
                {
                    fg.AppendLine("Tracks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TracksItem.Overall);
                        if (TracksItem.Specific != null)
                        {
                            foreach (var subItem in TracksItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Duration = this.Duration.Combine(rhs.Duration);
                ret.FadeOut = this.FadeOut.Combine(rhs.FadeOut);
                ret.TrackFilename = this.TrackFilename.Combine(rhs.TrackFilename);
                ret.FinaleFilename = this.FinaleFilename.Combine(rhs.FinaleFilename);
                ret.LoopData = this.LoopData.Combine(rhs.LoopData, (l, r) => l.Combine(r));
                ret.CuePoints = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.CuePoints?.Overall, rhs.CuePoints?.Overall), ExceptionExt.Combine(this.CuePoints?.Specific, rhs.CuePoints?.Specific));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Tracks = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Tracks?.Overall, rhs.Tracks?.Overall), ExceptionExt.Combine(this.Tracks?.Specific, rhs.Tracks?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Type;
            public bool Duration;
            public bool FadeOut;
            public bool TrackFilename;
            public bool FinaleFilename;
            public MusicTrackLoopData.TranslationMask? LoopData;
            public bool CuePoints;
            public Condition.TranslationMask? Conditions;
            public bool Tracks;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Type = defaultOn;
                this.Duration = defaultOn;
                this.FadeOut = defaultOn;
                this.TrackFilename = defaultOn;
                this.FinaleFilename = defaultOn;
                this.CuePoints = defaultOn;
                this.Tracks = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Type, null));
                ret.Add((Duration, null));
                ret.Add((FadeOut, null));
                ret.Add((TrackFilename, null));
                ret.Add((FinaleFilename, null));
                ret.Add((LoopData != null ? LoopData.OnOverall : DefaultOn, LoopData?.GetCrystal()));
                ret.Add((CuePoints, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Tracks, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = MusicTrack_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => MusicTrackCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MusicTrackSetterCommon.Instance.RemapLinks(this, mapping);
        public MusicTrack(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private MusicTrack(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal MusicTrack(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public MusicTrack(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public MusicTrack(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MusicTrackBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MusicTrackBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static MusicTrack CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MusicTrack();
            ((MusicTrackSetterCommon)((IMusicTrackGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MusicTrack item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((MusicTrackSetterCommon)((IMusicTrackGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MusicTrack GetNew()
        {
            return new MusicTrack();
        }

    }
    #endregion

    #region Interface
    public partial interface IMusicTrack :
        IMusicTrackGetter,
        IFallout4MajorRecord,
        ILoquiObjectSetter<IMusicTrackInternal>,
        IFormLinkContainer
    {
        new MusicTrack.TypeEnum Type { get; set; }
        new Single? Duration { get; set; }
        new Single? FadeOut { get; set; }
        new String? TrackFilename { get; set; }
        new String? FinaleFilename { get; set; }
        new MusicTrackLoopData? LoopData { get; set; }
        new ExtendedList<Single>? CuePoints { get; set; }
        new ExtendedList<Condition>? Conditions { get; set; }
        new ExtendedList<IFormLink<IMusicTrackGetter>>? Tracks { get; set; }
    }

    public partial interface IMusicTrackInternal :
        IFallout4MajorRecordInternal,
        IMusicTrack,
        IMusicTrackGetter
    {
    }

    public partial interface IMusicTrackGetter :
        IFallout4MajorRecordGetter,
        ILoquiObject<IMusicTrackGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => MusicTrack_Registration.Instance;
        MusicTrack.TypeEnum Type { get; }
        Single? Duration { get; }
        Single? FadeOut { get; }
        String? TrackFilename { get; }
        String? FinaleFilename { get; }
        IMusicTrackLoopDataGetter? LoopData { get; }
        IReadOnlyList<Single>? CuePoints { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }
        IReadOnlyList<IFormLink<IMusicTrackGetter>>? Tracks { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MusicTrackMixIn
    {
        public static void Clear(this IMusicTrackInternal item)
        {
            ((MusicTrackSetterCommon)((IMusicTrackGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MusicTrack.Mask<bool> GetEqualsMask(
            this IMusicTrackGetter item,
            IMusicTrackGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MusicTrackCommon)((IMusicTrackGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMusicTrackGetter item,
            string? name = null,
            MusicTrack.Mask<bool>? printMask = null)
        {
            return ((MusicTrackCommon)((IMusicTrackGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMusicTrackGetter item,
            FileGeneration fg,
            string? name = null,
            MusicTrack.Mask<bool>? printMask = null)
        {
            ((MusicTrackCommon)((IMusicTrackGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMusicTrackGetter item,
            IMusicTrackGetter rhs)
        {
            return ((MusicTrackCommon)((IMusicTrackGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IMusicTrackInternal lhs,
            IMusicTrackGetter rhs,
            out MusicTrack.ErrorMask errorMask,
            MusicTrack.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MusicTrackSetterTranslationCommon)((IMusicTrackGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MusicTrack.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMusicTrackInternal lhs,
            IMusicTrackGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MusicTrackSetterTranslationCommon)((IMusicTrackGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MusicTrack DeepCopy(
            this IMusicTrackGetter item,
            MusicTrack.TranslationMask? copyMask = null)
        {
            return ((MusicTrackSetterTranslationCommon)((IMusicTrackGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MusicTrack DeepCopy(
            this IMusicTrackGetter item,
            out MusicTrack.ErrorMask errorMask,
            MusicTrack.TranslationMask? copyMask = null)
        {
            return ((MusicTrackSetterTranslationCommon)((IMusicTrackGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MusicTrack DeepCopy(
            this IMusicTrackGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MusicTrackSetterTranslationCommon)((IMusicTrackGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static MusicTrack Duplicate(
            this IMusicTrackGetter item,
            FormKey formKey,
            MusicTrack.TranslationMask? copyMask = null)
        {
            return ((MusicTrackCommon)((IMusicTrackGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMusicTrackInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MusicTrackSetterCommon)((IMusicTrackGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum MusicTrack_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Type = 6,
        Duration = 7,
        FadeOut = 8,
        TrackFilename = 9,
        FinaleFilename = 10,
        LoopData = 11,
        CuePoints = 12,
        Conditions = 13,
        Tracks = 14,
    }
    #endregion

    #region Registration
    public partial class MusicTrack_Registration : ILoquiRegistration
    {
        public static readonly MusicTrack_Registration Instance = new MusicTrack_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 450,
            version: 0);

        public const string GUID = "be0b125f-644b-4d58-bcd9-94649f4fa209";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(MusicTrack.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MusicTrack.ErrorMask);

        public static readonly Type ClassType = typeof(MusicTrack);

        public static readonly Type GetterType = typeof(IMusicTrackGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMusicTrack);

        public static readonly Type? InternalSetterType = typeof(IMusicTrackInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.MusicTrack";

        public const string Name = "MusicTrack";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MUST;
        public static readonly Type BinaryWriteTranslation = typeof(MusicTrackBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class MusicTrackSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly MusicTrackSetterCommon Instance = new MusicTrackSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMusicTrackInternal item)
        {
            ClearPartial();
            item.Type = default;
            item.Duration = default;
            item.FadeOut = default;
            item.TrackFilename = default;
            item.FinaleFilename = default;
            item.LoopData = null;
            item.CuePoints = null;
            item.Conditions = null;
            item.Tracks = null;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IMusicTrackInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMusicTrackInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMusicTrack obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Conditions?.RemapLinks(mapping);
            obj.Tracks?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMusicTrackInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IMusicTrackInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: MusicTrackBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MusicTrackBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (MusicTrack)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (MusicTrack)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class MusicTrackCommon : Fallout4MajorRecordCommon
    {
        public new static readonly MusicTrackCommon Instance = new MusicTrackCommon();

        public MusicTrack.Mask<bool> GetEqualsMask(
            IMusicTrackGetter item,
            IMusicTrackGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MusicTrack.Mask<bool>(false);
            ((MusicTrackCommon)((IMusicTrackGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMusicTrackGetter item,
            IMusicTrackGetter rhs,
            MusicTrack.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Type = item.Type == rhs.Type;
            ret.Duration = item.Duration.EqualsWithin(rhs.Duration);
            ret.FadeOut = item.FadeOut.EqualsWithin(rhs.FadeOut);
            ret.TrackFilename = string.Equals(item.TrackFilename, rhs.TrackFilename);
            ret.FinaleFilename = string.Equals(item.FinaleFilename, rhs.FinaleFilename);
            ret.LoopData = EqualsMaskHelper.EqualsHelper(
                item.LoopData,
                rhs.LoopData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.CuePoints = item.CuePoints.CollectionEqualsHelper(
                rhs.CuePoints,
                (l, r) => l.EqualsWithin(r),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Tracks = item.Tracks.CollectionEqualsHelper(
                rhs.Tracks,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IMusicTrackGetter item,
            string? name = null,
            MusicTrack.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMusicTrackGetter item,
            FileGeneration fg,
            string? name = null,
            MusicTrack.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MusicTrack =>");
            }
            else
            {
                fg.AppendLine($"{name} (MusicTrack) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMusicTrackGetter item,
            FileGeneration fg,
            MusicTrack.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if ((printMask?.Duration ?? true)
                && item.Duration.TryGet(out var DurationItem))
            {
                fg.AppendItem(DurationItem, "Duration");
            }
            if ((printMask?.FadeOut ?? true)
                && item.FadeOut.TryGet(out var FadeOutItem))
            {
                fg.AppendItem(FadeOutItem, "FadeOut");
            }
            if ((printMask?.TrackFilename ?? true)
                && item.TrackFilename.TryGet(out var TrackFilenameItem))
            {
                fg.AppendItem(TrackFilenameItem, "TrackFilename");
            }
            if ((printMask?.FinaleFilename ?? true)
                && item.FinaleFilename.TryGet(out var FinaleFilenameItem))
            {
                fg.AppendItem(FinaleFilenameItem, "FinaleFilename");
            }
            if ((printMask?.LoopData?.Overall ?? true)
                && item.LoopData.TryGet(out var LoopDataItem))
            {
                LoopDataItem?.ToString(fg, "LoopData");
            }
            if ((printMask?.CuePoints?.Overall ?? true)
                && item.CuePoints.TryGet(out var CuePointsItem))
            {
                fg.AppendLine("CuePoints =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in CuePointsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions.TryGet(out var ConditionsItem))
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Tracks?.Overall ?? true)
                && item.Tracks.TryGet(out var TracksItem))
            {
                fg.AppendLine("Tracks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in TracksItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static MusicTrack_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MusicTrack_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (MusicTrack_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (MusicTrack_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (MusicTrack_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (MusicTrack_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (MusicTrack_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new MusicTrack_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MusicTrack_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MusicTrack_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (MusicTrack_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MusicTrack_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMusicTrackGetter? lhs,
            IMusicTrackGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (lhs.Type != rhs.Type) return false;
            if (!lhs.Duration.EqualsWithin(rhs.Duration)) return false;
            if (!lhs.FadeOut.EqualsWithin(rhs.FadeOut)) return false;
            if (!string.Equals(lhs.TrackFilename, rhs.TrackFilename)) return false;
            if (!string.Equals(lhs.FinaleFilename, rhs.FinaleFilename)) return false;
            if (!object.Equals(lhs.LoopData, rhs.LoopData)) return false;
            if (!lhs.CuePoints.SequenceEqualNullable(rhs.CuePoints)) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            if (!lhs.Tracks.SequenceEqualNullable(rhs.Tracks)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IMusicTrackGetter?)lhs,
                rhs: rhs as IMusicTrackGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IMusicTrackGetter?)lhs,
                rhs: rhs as IMusicTrackGetter);
        }
        
        public virtual int GetHashCode(IMusicTrackGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Type);
            if (item.Duration.TryGet(out var Durationitem))
            {
                hash.Add(Durationitem);
            }
            if (item.FadeOut.TryGet(out var FadeOutitem))
            {
                hash.Add(FadeOutitem);
            }
            if (item.TrackFilename.TryGet(out var TrackFilenameitem))
            {
                hash.Add(TrackFilenameitem);
            }
            if (item.FinaleFilename.TryGet(out var FinaleFilenameitem))
            {
                hash.Add(FinaleFilenameitem);
            }
            if (item.LoopData.TryGet(out var LoopDataitem))
            {
                hash.Add(LoopDataitem);
            }
            hash.Add(item.CuePoints);
            hash.Add(item.Conditions);
            hash.Add(item.Tracks);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IMusicTrackGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMusicTrackGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MusicTrack.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IMusicTrackGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Conditions.TryGet(out var ConditionsItem))
            {
                foreach (var item in ConditionsItem.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Tracks.TryGet(out var TracksItem))
            {
                foreach (var item in TracksItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public MusicTrack Duplicate(
            IMusicTrackGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new MusicTrack(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMusicTrack)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMusicTrack)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class MusicTrackSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly MusicTrackSetterTranslationCommon Instance = new MusicTrackSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMusicTrackInternal item,
            IMusicTrackGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IMusicTrack item,
            IMusicTrackGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)MusicTrack_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)MusicTrack_FieldIndex.Duration) ?? true))
            {
                item.Duration = rhs.Duration;
            }
            if ((copyMask?.GetShouldTranslate((int)MusicTrack_FieldIndex.FadeOut) ?? true))
            {
                item.FadeOut = rhs.FadeOut;
            }
            if ((copyMask?.GetShouldTranslate((int)MusicTrack_FieldIndex.TrackFilename) ?? true))
            {
                item.TrackFilename = rhs.TrackFilename;
            }
            if ((copyMask?.GetShouldTranslate((int)MusicTrack_FieldIndex.FinaleFilename) ?? true))
            {
                item.FinaleFilename = rhs.FinaleFilename;
            }
            if ((copyMask?.GetShouldTranslate((int)MusicTrack_FieldIndex.LoopData) ?? true))
            {
                errorMask?.PushIndex((int)MusicTrack_FieldIndex.LoopData);
                try
                {
                    if(rhs.LoopData.TryGet(out var rhsLoopData))
                    {
                        item.LoopData = rhsLoopData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MusicTrack_FieldIndex.LoopData));
                    }
                    else
                    {
                        item.LoopData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MusicTrack_FieldIndex.CuePoints) ?? true))
            {
                errorMask?.PushIndex((int)MusicTrack_FieldIndex.CuePoints);
                try
                {
                    if ((rhs.CuePoints != null))
                    {
                        item.CuePoints = 
                            rhs.CuePoints
                            .ToExtendedList<Single>();
                    }
                    else
                    {
                        item.CuePoints = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MusicTrack_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)MusicTrack_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MusicTrack_FieldIndex.Tracks) ?? true))
            {
                errorMask?.PushIndex((int)MusicTrack_FieldIndex.Tracks);
                try
                {
                    if ((rhs.Tracks != null))
                    {
                        item.Tracks = 
                            rhs.Tracks
                            .Select(r => (IFormLink<IMusicTrackGetter>)new FormLink<IMusicTrackGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<IMusicTrackGetter>>();
                    }
                    else
                    {
                        item.Tracks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMusicTrackInternal)item,
                rhs: (IMusicTrackGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMusicTrack)item,
                rhs: (IMusicTrackGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMusicTrackInternal)item,
                rhs: (IMusicTrackGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMusicTrack)item,
                rhs: (IMusicTrackGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public MusicTrack DeepCopy(
            IMusicTrackGetter item,
            MusicTrack.TranslationMask? copyMask = null)
        {
            MusicTrack ret = (MusicTrack)((MusicTrackCommon)((IMusicTrackGetter)item).CommonInstance()!).GetNew();
            ((MusicTrackSetterTranslationCommon)((IMusicTrackGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MusicTrack DeepCopy(
            IMusicTrackGetter item,
            out MusicTrack.ErrorMask errorMask,
            MusicTrack.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MusicTrack ret = (MusicTrack)((MusicTrackCommon)((IMusicTrackGetter)item).CommonInstance()!).GetNew();
            ((MusicTrackSetterTranslationCommon)((IMusicTrackGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MusicTrack.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MusicTrack DeepCopy(
            IMusicTrackGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MusicTrack ret = (MusicTrack)((MusicTrackCommon)((IMusicTrackGetter)item).CommonInstance()!).GetNew();
            ((MusicTrackSetterTranslationCommon)((IMusicTrackGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class MusicTrack
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MusicTrack_Registration.Instance;
        public new static MusicTrack_Registration Registration => MusicTrack_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MusicTrackCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MusicTrackSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MusicTrackSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MusicTrackBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static MusicTrackBinaryWriteTranslation Instance = new MusicTrackBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IMusicTrackGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IMusicTrackGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IMusicTrackGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicTrack.TypeEnum>.Instance.Write(
                writer,
                item.Type,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Duration,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FLTV));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FadeOut,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TrackFilename,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FinaleFilename,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.BNAM),
                binaryType: StringBinaryType.NullTerminate);
            if (item.LoopData.TryGet(out var LoopDataItem))
            {
                ((MusicTrackLoopDataBinaryWriteTranslation)((IBinaryItem)LoopDataItem).BinaryWriteTranslator).Write(
                    item: LoopDataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Single>.Instance.Write(
                writer: writer,
                items: item.CuePoints,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM),
                transl: FloatBinaryTranslation.Instance.Write);
            MusicTrackBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IMusicTrackGetter>>.Instance.Write(
                writer: writer,
                items: item.Tracks,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM),
                transl: (MutagenWriter subWriter, IFormLink<IMusicTrackGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public void Write(
            MutagenWriter writer,
            IMusicTrackGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.MUST),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMusicTrackGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMusicTrackGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMusicTrackGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class MusicTrackBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static MusicTrackBinaryCreateTranslation Instance = new MusicTrackBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.MUST;
        public static void FillBinaryStructs(
            IMusicTrackInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IMusicTrackInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Type = EnumBinaryTranslation<MusicTrack.TypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)MusicTrack_FieldIndex.Type;
                }
                case RecordTypeInts.FLTV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Duration = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)MusicTrack_FieldIndex.Duration;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FadeOut = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)MusicTrack_FieldIndex.FadeOut;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TrackFilename = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)MusicTrack_FieldIndex.TrackFilename;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FinaleFilename = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)MusicTrack_FieldIndex.FinaleFilename;
                }
                case RecordTypeInts.LNAM:
                {
                    item.LoopData = Mutagen.Bethesda.Fallout4.MusicTrackLoopData.CreateFromBinary(frame: frame);
                    return (int)MusicTrack_FieldIndex.LoopData;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CuePoints = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Single>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FloatBinaryTranslation.Instance.Parse)
                        .CastExtendedList<Single>();
                    return (int)MusicTrack_FieldIndex.CuePoints;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    MusicTrackBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)MusicTrack_FieldIndex.Conditions;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Tracks = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IMusicTrackGetter>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<IMusicTrackGetter>>();
                    return (int)MusicTrack_FieldIndex.Tracks;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IMusicTrackInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class MusicTrackBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MusicTrackBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IMusicTrackGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MusicTrack_Registration.Instance;
        public new static MusicTrack_Registration Registration => MusicTrack_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MusicTrackCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MusicTrackSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => MusicTrackCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MusicTrackBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MusicTrackBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Type
        private int? _TypeLocation;
        public MusicTrack.TypeEnum Type => _TypeLocation.HasValue ? (MusicTrack.TypeEnum)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _TypeLocation!.Value, _package.MetaData.Constants)) : default(MusicTrack.TypeEnum);
        #endregion
        #region Duration
        private int? _DurationLocation;
        public Single? Duration => _DurationLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _DurationLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region FadeOut
        private int? _FadeOutLocation;
        public Single? FadeOut => _FadeOutLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _FadeOutLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region TrackFilename
        private int? _TrackFilenameLocation;
        public String? TrackFilename => _TrackFilenameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _TrackFilenameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region FinaleFilename
        private int? _FinaleFilenameLocation;
        public String? FinaleFilename => _FinaleFilenameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FinaleFilenameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region LoopData
        private RangeInt32? _LoopDataLocation;
        public IMusicTrackLoopDataGetter? LoopData => _LoopDataLocation.HasValue ? MusicTrackLoopDataBinaryOverlay.MusicTrackLoopDataFactory(new OverlayStream(_data.Slice(_LoopDataLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IReadOnlyList<Single>? CuePoints { get; private set; }
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        public IReadOnlyList<IFormLink<IMusicTrackGetter>>? Tracks { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MusicTrackBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static MusicTrackBinaryOverlay MusicTrackFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new MusicTrackBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static MusicTrackBinaryOverlay MusicTrackFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return MusicTrackFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    _TypeLocation = (stream.Position - offset);
                    return (int)MusicTrack_FieldIndex.Type;
                }
                case RecordTypeInts.FLTV:
                {
                    _DurationLocation = (stream.Position - offset);
                    return (int)MusicTrack_FieldIndex.Duration;
                }
                case RecordTypeInts.DNAM:
                {
                    _FadeOutLocation = (stream.Position - offset);
                    return (int)MusicTrack_FieldIndex.FadeOut;
                }
                case RecordTypeInts.ANAM:
                {
                    _TrackFilenameLocation = (stream.Position - offset);
                    return (int)MusicTrack_FieldIndex.TrackFilename;
                }
                case RecordTypeInts.BNAM:
                {
                    _FinaleFilenameLocation = (stream.Position - offset);
                    return (int)MusicTrack_FieldIndex.FinaleFilename;
                }
                case RecordTypeInts.LNAM:
                {
                    _LoopDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)MusicTrack_FieldIndex.LoopData;
                }
                case RecordTypeInts.FNAM:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.CuePoints = BinaryOverlayList.FactoryByStartIndex<Single>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => s.Float());
                    stream.Position += subLen;
                    return (int)MusicTrack_FieldIndex.CuePoints;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)MusicTrack_FieldIndex.Conditions;
                }
                case RecordTypeInts.SNAM:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.Tracks = BinaryOverlayList.FactoryByStartIndex<IFormLink<IMusicTrackGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IMusicTrackGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return (int)MusicTrack_FieldIndex.Tracks;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MusicTrackMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMusicTrackGetter rhs)) return false;
            return ((MusicTrackCommon)((IMusicTrackGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IMusicTrackGetter? obj)
        {
            return ((MusicTrackCommon)((IMusicTrackGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MusicTrackCommon)((IMusicTrackGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

