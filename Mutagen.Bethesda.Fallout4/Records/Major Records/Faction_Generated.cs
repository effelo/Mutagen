/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Faction :
        Fallout4MajorRecord,
        IFactionInternal,
        ILoquiObjectSetter<Faction>,
        IEquatable<IFactionGetter>
    {
        #region Ctor
        protected Faction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IFactionGetter.Name => this.Name;
        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Relation> _Relations = new ExtendedList<Relation>();
        public ExtendedList<Relation> Relations
        {
            get => this._Relations;
            protected set => this._Relations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRelationGetter> IFactionGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Flags
        public Faction.FactionFlag Flags { get; set; } = default;
        #endregion
        #region ExteriorJailMarker
        public FormLinkNullable<IPlacedObjectGetter> ExteriorJailMarker { get; set; } = new FormLinkNullable<IPlacedObjectGetter>();
        #endregion
        #region FollowerWaitMarker
        public FormLinkNullable<IPlacedObjectGetter> FollowerWaitMarker { get; set; } = new FormLinkNullable<IPlacedObjectGetter>();
        #endregion
        #region StolenGoodsContainer
        public FormLinkNullable<IPlacedObjectGetter> StolenGoodsContainer { get; set; } = new FormLinkNullable<IPlacedObjectGetter>();
        #endregion
        #region PlayerInventoryContainer
        public FormLinkNullable<IPlacedObjectGetter> PlayerInventoryContainer { get; set; } = new FormLinkNullable<IPlacedObjectGetter>();
        #endregion
        #region SharedCrimeFactionList
        public FormLinkNullable<IFormListGetter> SharedCrimeFactionList { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region JailOutfit
        public FormLinkNullable<IOutfitGetter> JailOutfit { get; set; } = new FormLinkNullable<IOutfitGetter>();
        #endregion
        #region CrimeValues
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CrimeValues? _CrimeValues;
        public CrimeValues? CrimeValues
        {
            get => _CrimeValues;
            set => _CrimeValues = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICrimeValuesGetter? IFactionGetter.CrimeValues => this.CrimeValues;
        #endregion
        #region Ranks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Rank> _Ranks = new ExtendedList<Rank>();
        public ExtendedList<Rank> Ranks
        {
            get => this._Ranks;
            protected set => this._Ranks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRankGetter> IFactionGetter.Ranks => _Ranks;
        #endregion

        #endregion
        #region VendorBuySellList
        public FormLinkNullable<IFormListGetter> VendorBuySellList { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region MerchantContainer
        public FormLinkNullable<IPlacedObjectGetter> MerchantContainer { get; set; } = new FormLinkNullable<IPlacedObjectGetter>();
        #endregion
        #region VendorValues
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VendorValues? _VendorValues;
        public VendorValues? VendorValues
        {
            get => _VendorValues;
            set => _VendorValues = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVendorValuesGetter? IFactionGetter.VendorValues => this.VendorValues;
        #endregion
        #region VendorLocation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LocationTargetRadius? _VendorLocation;
        public LocationTargetRadius? VendorLocation
        {
            get => _VendorLocation;
            set => _VendorLocation = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationTargetRadiusGetter? IFactionGetter.VendorLocation => this.VendorLocation;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IFactionGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FactionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFactionGetter rhs)) return false;
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IFactionGetter? obj)
        {
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FactionCommon)((IFactionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>());
                this.Flags = initialValue;
                this.ExteriorJailMarker = initialValue;
                this.FollowerWaitMarker = initialValue;
                this.StolenGoodsContainer = initialValue;
                this.PlayerInventoryContainer = initialValue;
                this.SharedCrimeFactionList = initialValue;
                this.JailOutfit = initialValue;
                this.CrimeValues = new MaskItem<TItem, CrimeValues.Mask<TItem>?>(initialValue, new CrimeValues.Mask<TItem>(initialValue));
                this.Ranks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>());
                this.VendorBuySellList = initialValue;
                this.MerchantContainer = initialValue;
                this.VendorValues = new MaskItem<TItem, VendorValues.Mask<TItem>?>(initialValue, new VendorValues.Mask<TItem>(initialValue));
                this.VendorLocation = new MaskItem<TItem, LocationTargetRadius.Mask<TItem>?>(initialValue, new LocationTargetRadius.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem Relations,
                TItem Flags,
                TItem ExteriorJailMarker,
                TItem FollowerWaitMarker,
                TItem StolenGoodsContainer,
                TItem PlayerInventoryContainer,
                TItem SharedCrimeFactionList,
                TItem JailOutfit,
                TItem CrimeValues,
                TItem Ranks,
                TItem VendorBuySellList,
                TItem MerchantContainer,
                TItem VendorValues,
                TItem VendorLocation,
                TItem Conditions)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>(Relations, Enumerable.Empty<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>());
                this.Flags = Flags;
                this.ExteriorJailMarker = ExteriorJailMarker;
                this.FollowerWaitMarker = FollowerWaitMarker;
                this.StolenGoodsContainer = StolenGoodsContainer;
                this.PlayerInventoryContainer = PlayerInventoryContainer;
                this.SharedCrimeFactionList = SharedCrimeFactionList;
                this.JailOutfit = JailOutfit;
                this.CrimeValues = new MaskItem<TItem, CrimeValues.Mask<TItem>?>(CrimeValues, new CrimeValues.Mask<TItem>(CrimeValues));
                this.Ranks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>?>(Ranks, Enumerable.Empty<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>());
                this.VendorBuySellList = VendorBuySellList;
                this.MerchantContainer = MerchantContainer;
                this.VendorValues = new MaskItem<TItem, VendorValues.Mask<TItem>?>(VendorValues, new VendorValues.Mask<TItem>(VendorValues));
                this.VendorLocation = new MaskItem<TItem, LocationTargetRadius.Mask<TItem>?>(VendorLocation, new LocationTargetRadius.Mask<TItem>(VendorLocation));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>? Relations;
            public TItem Flags;
            public TItem ExteriorJailMarker;
            public TItem FollowerWaitMarker;
            public TItem StolenGoodsContainer;
            public TItem PlayerInventoryContainer;
            public TItem SharedCrimeFactionList;
            public TItem JailOutfit;
            public MaskItem<TItem, CrimeValues.Mask<TItem>?>? CrimeValues { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>?>? Ranks;
            public TItem VendorBuySellList;
            public TItem MerchantContainer;
            public MaskItem<TItem, VendorValues.Mask<TItem>?>? VendorValues { get; set; }
            public MaskItem<TItem, LocationTargetRadius.Mask<TItem>?>? VendorLocation { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Relations, rhs.Relations)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ExteriorJailMarker, rhs.ExteriorJailMarker)) return false;
                if (!object.Equals(this.FollowerWaitMarker, rhs.FollowerWaitMarker)) return false;
                if (!object.Equals(this.StolenGoodsContainer, rhs.StolenGoodsContainer)) return false;
                if (!object.Equals(this.PlayerInventoryContainer, rhs.PlayerInventoryContainer)) return false;
                if (!object.Equals(this.SharedCrimeFactionList, rhs.SharedCrimeFactionList)) return false;
                if (!object.Equals(this.JailOutfit, rhs.JailOutfit)) return false;
                if (!object.Equals(this.CrimeValues, rhs.CrimeValues)) return false;
                if (!object.Equals(this.Ranks, rhs.Ranks)) return false;
                if (!object.Equals(this.VendorBuySellList, rhs.VendorBuySellList)) return false;
                if (!object.Equals(this.MerchantContainer, rhs.MerchantContainer)) return false;
                if (!object.Equals(this.VendorValues, rhs.VendorValues)) return false;
                if (!object.Equals(this.VendorLocation, rhs.VendorLocation)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Relations);
                hash.Add(this.Flags);
                hash.Add(this.ExteriorJailMarker);
                hash.Add(this.FollowerWaitMarker);
                hash.Add(this.StolenGoodsContainer);
                hash.Add(this.PlayerInventoryContainer);
                hash.Add(this.SharedCrimeFactionList);
                hash.Add(this.JailOutfit);
                hash.Add(this.CrimeValues);
                hash.Add(this.Ranks);
                hash.Add(this.VendorBuySellList);
                hash.Add(this.MerchantContainer);
                hash.Add(this.VendorValues);
                hash.Add(this.VendorLocation);
                hash.Add(this.Conditions);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (this.Relations != null)
                {
                    if (!eval(this.Relations.Overall)) return false;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.ExteriorJailMarker)) return false;
                if (!eval(this.FollowerWaitMarker)) return false;
                if (!eval(this.StolenGoodsContainer)) return false;
                if (!eval(this.PlayerInventoryContainer)) return false;
                if (!eval(this.SharedCrimeFactionList)) return false;
                if (!eval(this.JailOutfit)) return false;
                if (CrimeValues != null)
                {
                    if (!eval(this.CrimeValues.Overall)) return false;
                    if (this.CrimeValues.Specific != null && !this.CrimeValues.Specific.All(eval)) return false;
                }
                if (this.Ranks != null)
                {
                    if (!eval(this.Ranks.Overall)) return false;
                    if (this.Ranks.Specific != null)
                    {
                        foreach (var item in this.Ranks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.VendorBuySellList)) return false;
                if (!eval(this.MerchantContainer)) return false;
                if (VendorValues != null)
                {
                    if (!eval(this.VendorValues.Overall)) return false;
                    if (this.VendorValues.Specific != null && !this.VendorValues.Specific.All(eval)) return false;
                }
                if (VendorLocation != null)
                {
                    if (!eval(this.VendorLocation.Overall)) return false;
                    if (this.VendorLocation.Specific != null && !this.VendorLocation.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (this.Relations != null)
                {
                    if (eval(this.Relations.Overall)) return true;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.ExteriorJailMarker)) return true;
                if (eval(this.FollowerWaitMarker)) return true;
                if (eval(this.StolenGoodsContainer)) return true;
                if (eval(this.PlayerInventoryContainer)) return true;
                if (eval(this.SharedCrimeFactionList)) return true;
                if (eval(this.JailOutfit)) return true;
                if (CrimeValues != null)
                {
                    if (eval(this.CrimeValues.Overall)) return true;
                    if (this.CrimeValues.Specific != null && this.CrimeValues.Specific.Any(eval)) return true;
                }
                if (this.Ranks != null)
                {
                    if (eval(this.Ranks.Overall)) return true;
                    if (this.Ranks.Specific != null)
                    {
                        foreach (var item in this.Ranks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.VendorBuySellList)) return true;
                if (eval(this.MerchantContainer)) return true;
                if (VendorValues != null)
                {
                    if (eval(this.VendorValues.Overall)) return true;
                    if (this.VendorValues.Specific != null && this.VendorValues.Specific.Any(eval)) return true;
                }
                if (VendorLocation != null)
                {
                    if (eval(this.VendorLocation.Overall)) return true;
                    if (this.VendorLocation.Specific != null && this.VendorLocation.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Faction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                if (Relations != null)
                {
                    obj.Relations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Relation.Mask<R>?>>?>(eval(this.Relations.Overall), Enumerable.Empty<MaskItemIndexed<R, Relation.Mask<R>?>>());
                    if (Relations.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Relation.Mask<R>?>>();
                        obj.Relations.Specific = l;
                        foreach (var item in Relations.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Relation.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Relation.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.ExteriorJailMarker = eval(this.ExteriorJailMarker);
                obj.FollowerWaitMarker = eval(this.FollowerWaitMarker);
                obj.StolenGoodsContainer = eval(this.StolenGoodsContainer);
                obj.PlayerInventoryContainer = eval(this.PlayerInventoryContainer);
                obj.SharedCrimeFactionList = eval(this.SharedCrimeFactionList);
                obj.JailOutfit = eval(this.JailOutfit);
                obj.CrimeValues = this.CrimeValues == null ? null : new MaskItem<R, CrimeValues.Mask<R>?>(eval(this.CrimeValues.Overall), this.CrimeValues.Specific?.Translate(eval));
                if (Ranks != null)
                {
                    obj.Ranks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Rank.Mask<R>?>>?>(eval(this.Ranks.Overall), Enumerable.Empty<MaskItemIndexed<R, Rank.Mask<R>?>>());
                    if (Ranks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Rank.Mask<R>?>>();
                        obj.Ranks.Specific = l;
                        foreach (var item in Ranks.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Rank.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Rank.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.VendorBuySellList = eval(this.VendorBuySellList);
                obj.MerchantContainer = eval(this.MerchantContainer);
                obj.VendorValues = this.VendorValues == null ? null : new MaskItem<R, VendorValues.Mask<R>?>(eval(this.VendorValues.Overall), this.VendorValues.Specific?.Translate(eval));
                obj.VendorLocation = this.VendorLocation == null ? null : new MaskItem<R, LocationTargetRadius.Mask<R>?>(eval(this.VendorLocation.Overall), this.VendorLocation.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Faction.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Faction.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Faction.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Relations?.Overall ?? true)
                        && Relations.TryGet(out var RelationsItem))
                    {
                        fg.AppendLine("Relations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RelationsItem.Overall);
                            if (RelationsItem.Specific != null)
                            {
                                foreach (var subItem in RelationsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ExteriorJailMarker ?? true)
                    {
                        fg.AppendItem(ExteriorJailMarker, "ExteriorJailMarker");
                    }
                    if (printMask?.FollowerWaitMarker ?? true)
                    {
                        fg.AppendItem(FollowerWaitMarker, "FollowerWaitMarker");
                    }
                    if (printMask?.StolenGoodsContainer ?? true)
                    {
                        fg.AppendItem(StolenGoodsContainer, "StolenGoodsContainer");
                    }
                    if (printMask?.PlayerInventoryContainer ?? true)
                    {
                        fg.AppendItem(PlayerInventoryContainer, "PlayerInventoryContainer");
                    }
                    if (printMask?.SharedCrimeFactionList ?? true)
                    {
                        fg.AppendItem(SharedCrimeFactionList, "SharedCrimeFactionList");
                    }
                    if (printMask?.JailOutfit ?? true)
                    {
                        fg.AppendItem(JailOutfit, "JailOutfit");
                    }
                    if (printMask?.CrimeValues?.Overall ?? true)
                    {
                        CrimeValues?.ToString(fg);
                    }
                    if ((printMask?.Ranks?.Overall ?? true)
                        && Ranks.TryGet(out var RanksItem))
                    {
                        fg.AppendLine("Ranks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RanksItem.Overall);
                            if (RanksItem.Specific != null)
                            {
                                foreach (var subItem in RanksItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.VendorBuySellList ?? true)
                    {
                        fg.AppendItem(VendorBuySellList, "VendorBuySellList");
                    }
                    if (printMask?.MerchantContainer ?? true)
                    {
                        fg.AppendItem(MerchantContainer, "MerchantContainer");
                    }
                    if (printMask?.VendorValues?.Overall ?? true)
                    {
                        VendorValues?.ToString(fg);
                    }
                    if (printMask?.VendorLocation?.Overall ?? true)
                    {
                        VendorLocation?.ToString(fg);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>? Relations;
            public Exception? Flags;
            public Exception? ExteriorJailMarker;
            public Exception? FollowerWaitMarker;
            public Exception? StolenGoodsContainer;
            public Exception? PlayerInventoryContainer;
            public Exception? SharedCrimeFactionList;
            public Exception? JailOutfit;
            public MaskItem<Exception?, CrimeValues.ErrorMask?>? CrimeValues;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>? Ranks;
            public Exception? VendorBuySellList;
            public Exception? MerchantContainer;
            public MaskItem<Exception?, VendorValues.ErrorMask?>? VendorValues;
            public MaskItem<Exception?, LocationTargetRadius.ErrorMask?>? VendorLocation;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        return Name;
                    case Faction_FieldIndex.Relations:
                        return Relations;
                    case Faction_FieldIndex.Flags:
                        return Flags;
                    case Faction_FieldIndex.ExteriorJailMarker:
                        return ExteriorJailMarker;
                    case Faction_FieldIndex.FollowerWaitMarker:
                        return FollowerWaitMarker;
                    case Faction_FieldIndex.StolenGoodsContainer:
                        return StolenGoodsContainer;
                    case Faction_FieldIndex.PlayerInventoryContainer:
                        return PlayerInventoryContainer;
                    case Faction_FieldIndex.SharedCrimeFactionList:
                        return SharedCrimeFactionList;
                    case Faction_FieldIndex.JailOutfit:
                        return JailOutfit;
                    case Faction_FieldIndex.CrimeValues:
                        return CrimeValues;
                    case Faction_FieldIndex.Ranks:
                        return Ranks;
                    case Faction_FieldIndex.VendorBuySellList:
                        return VendorBuySellList;
                    case Faction_FieldIndex.MerchantContainer:
                        return MerchantContainer;
                    case Faction_FieldIndex.VendorValues:
                        return VendorValues;
                    case Faction_FieldIndex.VendorLocation:
                        return VendorLocation;
                    case Faction_FieldIndex.Conditions:
                        return Conditions;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Faction_FieldIndex.Relations:
                        this.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>(ex, null);
                        break;
                    case Faction_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Faction_FieldIndex.ExteriorJailMarker:
                        this.ExteriorJailMarker = ex;
                        break;
                    case Faction_FieldIndex.FollowerWaitMarker:
                        this.FollowerWaitMarker = ex;
                        break;
                    case Faction_FieldIndex.StolenGoodsContainer:
                        this.StolenGoodsContainer = ex;
                        break;
                    case Faction_FieldIndex.PlayerInventoryContainer:
                        this.PlayerInventoryContainer = ex;
                        break;
                    case Faction_FieldIndex.SharedCrimeFactionList:
                        this.SharedCrimeFactionList = ex;
                        break;
                    case Faction_FieldIndex.JailOutfit:
                        this.JailOutfit = ex;
                        break;
                    case Faction_FieldIndex.CrimeValues:
                        this.CrimeValues = new MaskItem<Exception?, CrimeValues.ErrorMask?>(ex, null);
                        break;
                    case Faction_FieldIndex.Ranks:
                        this.Ranks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>(ex, null);
                        break;
                    case Faction_FieldIndex.VendorBuySellList:
                        this.VendorBuySellList = ex;
                        break;
                    case Faction_FieldIndex.MerchantContainer:
                        this.MerchantContainer = ex;
                        break;
                    case Faction_FieldIndex.VendorValues:
                        this.VendorValues = new MaskItem<Exception?, VendorValues.ErrorMask?>(ex, null);
                        break;
                    case Faction_FieldIndex.VendorLocation:
                        this.VendorLocation = new MaskItem<Exception?, LocationTargetRadius.ErrorMask?>(ex, null);
                        break;
                    case Faction_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.Relations:
                        this.Relations = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>)obj;
                        break;
                    case Faction_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.ExteriorJailMarker:
                        this.ExteriorJailMarker = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.FollowerWaitMarker:
                        this.FollowerWaitMarker = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.StolenGoodsContainer:
                        this.StolenGoodsContainer = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.PlayerInventoryContainer:
                        this.PlayerInventoryContainer = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.SharedCrimeFactionList:
                        this.SharedCrimeFactionList = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.JailOutfit:
                        this.JailOutfit = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.CrimeValues:
                        this.CrimeValues = (MaskItem<Exception?, CrimeValues.ErrorMask?>?)obj;
                        break;
                    case Faction_FieldIndex.Ranks:
                        this.Ranks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>)obj;
                        break;
                    case Faction_FieldIndex.VendorBuySellList:
                        this.VendorBuySellList = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.MerchantContainer:
                        this.MerchantContainer = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.VendorValues:
                        this.VendorValues = (MaskItem<Exception?, VendorValues.ErrorMask?>?)obj;
                        break;
                    case Faction_FieldIndex.VendorLocation:
                        this.VendorLocation = (MaskItem<Exception?, LocationTargetRadius.ErrorMask?>?)obj;
                        break;
                    case Faction_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Relations != null) return true;
                if (Flags != null) return true;
                if (ExteriorJailMarker != null) return true;
                if (FollowerWaitMarker != null) return true;
                if (StolenGoodsContainer != null) return true;
                if (PlayerInventoryContainer != null) return true;
                if (SharedCrimeFactionList != null) return true;
                if (JailOutfit != null) return true;
                if (CrimeValues != null) return true;
                if (Ranks != null) return true;
                if (VendorBuySellList != null) return true;
                if (MerchantContainer != null) return true;
                if (VendorValues != null) return true;
                if (VendorLocation != null) return true;
                if (Conditions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                if (Relations.TryGet(out var RelationsItem))
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RelationsItem.Overall);
                        if (RelationsItem.Specific != null)
                        {
                            foreach (var subItem in RelationsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(ExteriorJailMarker, "ExteriorJailMarker");
                fg.AppendItem(FollowerWaitMarker, "FollowerWaitMarker");
                fg.AppendItem(StolenGoodsContainer, "StolenGoodsContainer");
                fg.AppendItem(PlayerInventoryContainer, "PlayerInventoryContainer");
                fg.AppendItem(SharedCrimeFactionList, "SharedCrimeFactionList");
                fg.AppendItem(JailOutfit, "JailOutfit");
                CrimeValues?.ToString(fg);
                if (Ranks.TryGet(out var RanksItem))
                {
                    fg.AppendLine("Ranks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RanksItem.Overall);
                        if (RanksItem.Specific != null)
                        {
                            foreach (var subItem in RanksItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(VendorBuySellList, "VendorBuySellList");
                fg.AppendItem(MerchantContainer, "MerchantContainer");
                VendorValues?.ToString(fg);
                VendorLocation?.ToString(fg);
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>(ExceptionExt.Combine(this.Relations?.Overall, rhs.Relations?.Overall), ExceptionExt.Combine(this.Relations?.Specific, rhs.Relations?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ExteriorJailMarker = this.ExteriorJailMarker.Combine(rhs.ExteriorJailMarker);
                ret.FollowerWaitMarker = this.FollowerWaitMarker.Combine(rhs.FollowerWaitMarker);
                ret.StolenGoodsContainer = this.StolenGoodsContainer.Combine(rhs.StolenGoodsContainer);
                ret.PlayerInventoryContainer = this.PlayerInventoryContainer.Combine(rhs.PlayerInventoryContainer);
                ret.SharedCrimeFactionList = this.SharedCrimeFactionList.Combine(rhs.SharedCrimeFactionList);
                ret.JailOutfit = this.JailOutfit.Combine(rhs.JailOutfit);
                ret.CrimeValues = this.CrimeValues.Combine(rhs.CrimeValues, (l, r) => l.Combine(r));
                ret.Ranks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>(ExceptionExt.Combine(this.Ranks?.Overall, rhs.Ranks?.Overall), ExceptionExt.Combine(this.Ranks?.Specific, rhs.Ranks?.Specific));
                ret.VendorBuySellList = this.VendorBuySellList.Combine(rhs.VendorBuySellList);
                ret.MerchantContainer = this.MerchantContainer.Combine(rhs.MerchantContainer);
                ret.VendorValues = this.VendorValues.Combine(rhs.VendorValues, (l, r) => l.Combine(r));
                ret.VendorLocation = this.VendorLocation.Combine(rhs.VendorLocation, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public Relation.TranslationMask? Relations;
            public bool Flags;
            public bool ExteriorJailMarker;
            public bool FollowerWaitMarker;
            public bool StolenGoodsContainer;
            public bool PlayerInventoryContainer;
            public bool SharedCrimeFactionList;
            public bool JailOutfit;
            public CrimeValues.TranslationMask? CrimeValues;
            public Rank.TranslationMask? Ranks;
            public bool VendorBuySellList;
            public bool MerchantContainer;
            public VendorValues.TranslationMask? VendorValues;
            public LocationTargetRadius.TranslationMask? VendorLocation;
            public Condition.TranslationMask? Conditions;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.ExteriorJailMarker = defaultOn;
                this.FollowerWaitMarker = defaultOn;
                this.StolenGoodsContainer = defaultOn;
                this.PlayerInventoryContainer = defaultOn;
                this.SharedCrimeFactionList = defaultOn;
                this.JailOutfit = defaultOn;
                this.VendorBuySellList = defaultOn;
                this.MerchantContainer = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Relations == null ? DefaultOn : !Relations.GetCrystal().CopyNothing, Relations?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((ExteriorJailMarker, null));
                ret.Add((FollowerWaitMarker, null));
                ret.Add((StolenGoodsContainer, null));
                ret.Add((PlayerInventoryContainer, null));
                ret.Add((SharedCrimeFactionList, null));
                ret.Add((JailOutfit, null));
                ret.Add((CrimeValues != null ? CrimeValues.OnOverall : DefaultOn, CrimeValues?.GetCrystal()));
                ret.Add((Ranks == null ? DefaultOn : !Ranks.GetCrystal().CopyNothing, Ranks?.GetCrystal()));
                ret.Add((VendorBuySellList, null));
                ret.Add((MerchantContainer, null));
                ret.Add((VendorValues != null ? VendorValues.OnOverall : DefaultOn, VendorValues?.GetCrystal()));
                ret.Add((VendorLocation != null ? VendorLocation.OnOverall : DefaultOn, VendorLocation?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Faction_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => FactionCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FactionSetterCommon.Instance.RemapLinks(this, mapping);
        public Faction(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Faction(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Faction(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Faction(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Faction(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Faction CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Faction();
            ((FactionSetterCommon)((IFactionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Faction item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((FactionSetterCommon)((IFactionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Faction GetNew()
        {
            return new Faction();
        }

    }
    #endregion

    #region Interface
    public partial interface IFaction :
        IFactionGetter,
        IFallout4MajorRecord,
        IOwner,
        IObjectId,
        IRelatable,
        ITranslatedNamed,
        ILoquiObjectSetter<IFactionInternal>,
        IFormLinkContainer
    {
        new TranslatedString? Name { get; set; }
        new ExtendedList<Relation> Relations { get; }
        new Faction.FactionFlag Flags { get; set; }
        new FormLinkNullable<IPlacedObjectGetter> ExteriorJailMarker { get; set; }
        new FormLinkNullable<IPlacedObjectGetter> FollowerWaitMarker { get; set; }
        new FormLinkNullable<IPlacedObjectGetter> StolenGoodsContainer { get; set; }
        new FormLinkNullable<IPlacedObjectGetter> PlayerInventoryContainer { get; set; }
        new FormLinkNullable<IFormListGetter> SharedCrimeFactionList { get; set; }
        new FormLinkNullable<IOutfitGetter> JailOutfit { get; set; }
        new CrimeValues? CrimeValues { get; set; }
        new ExtendedList<Rank> Ranks { get; }
        new FormLinkNullable<IFormListGetter> VendorBuySellList { get; set; }
        new FormLinkNullable<IPlacedObjectGetter> MerchantContainer { get; set; }
        new VendorValues? VendorValues { get; set; }
        new LocationTargetRadius? VendorLocation { get; set; }
        new ExtendedList<Condition>? Conditions { get; set; }
    }

    public partial interface IFactionInternal :
        IFallout4MajorRecordInternal,
        IFaction,
        IFactionGetter
    {
    }

    public partial interface IFactionGetter :
        IFallout4MajorRecordGetter,
        IOwnerGetter,
        IObjectIdGetter,
        IRelatableGetter,
        ITranslatedNamedGetter,
        ILoquiObject<IFactionGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Faction_Registration.Instance;
        ITranslatedStringGetter? Name { get; }
        IReadOnlyList<IRelationGetter> Relations { get; }
        Faction.FactionFlag Flags { get; }
        FormLinkNullable<IPlacedObjectGetter> ExteriorJailMarker { get; }
        FormLinkNullable<IPlacedObjectGetter> FollowerWaitMarker { get; }
        FormLinkNullable<IPlacedObjectGetter> StolenGoodsContainer { get; }
        FormLinkNullable<IPlacedObjectGetter> PlayerInventoryContainer { get; }
        FormLinkNullable<IFormListGetter> SharedCrimeFactionList { get; }
        FormLinkNullable<IOutfitGetter> JailOutfit { get; }
        ICrimeValuesGetter? CrimeValues { get; }
        IReadOnlyList<IRankGetter> Ranks { get; }
        FormLinkNullable<IFormListGetter> VendorBuySellList { get; }
        FormLinkNullable<IPlacedObjectGetter> MerchantContainer { get; }
        IVendorValuesGetter? VendorValues { get; }
        ILocationTargetRadiusGetter? VendorLocation { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FactionMixIn
    {
        public static void Clear(this IFactionInternal item)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Faction.Mask<bool> GetEqualsMask(
            this IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFactionGetter item,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFactionGetter item,
            FileGeneration fg,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFactionGetter item,
            IFactionGetter rhs)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Faction Duplicate(
            this IFactionGetter item,
            FormKey formKey,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFactionInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Faction_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        Relations = 7,
        Flags = 8,
        ExteriorJailMarker = 9,
        FollowerWaitMarker = 10,
        StolenGoodsContainer = 11,
        PlayerInventoryContainer = 12,
        SharedCrimeFactionList = 13,
        JailOutfit = 14,
        CrimeValues = 15,
        Ranks = 16,
        VendorBuySellList = 17,
        MerchantContainer = 18,
        VendorValues = 19,
        VendorLocation = 20,
        Conditions = 21,
    }
    #endregion

    #region Registration
    public partial class Faction_Registration : ILoquiRegistration
    {
        public static readonly Faction_Registration Instance = new Faction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 27,
            version: 0);

        public const string GUID = "db110917-5be4-4ea2-b679-55c8ac5b6179";

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(Faction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Faction.ErrorMask);

        public static readonly Type ClassType = typeof(Faction);

        public static readonly Type GetterType = typeof(IFactionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaction);

        public static readonly Type? InternalSetterType = typeof(IFactionInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Faction";

        public const string Name = "Faction";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.FACT;
        public static readonly Type BinaryWriteTranslation = typeof(FactionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class FactionSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly FactionSetterCommon Instance = new FactionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFactionInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Relations.Clear();
            item.Flags = default;
            item.ExteriorJailMarker = FormLinkNullable<IPlacedObjectGetter>.Null;
            item.FollowerWaitMarker = FormLinkNullable<IPlacedObjectGetter>.Null;
            item.StolenGoodsContainer = FormLinkNullable<IPlacedObjectGetter>.Null;
            item.PlayerInventoryContainer = FormLinkNullable<IPlacedObjectGetter>.Null;
            item.SharedCrimeFactionList = FormLinkNullable<IFormListGetter>.Null;
            item.JailOutfit = FormLinkNullable<IOutfitGetter>.Null;
            item.CrimeValues = null;
            item.Ranks.Clear();
            item.VendorBuySellList = FormLinkNullable<IFormListGetter>.Null;
            item.MerchantContainer = FormLinkNullable<IPlacedObjectGetter>.Null;
            item.VendorValues = null;
            item.VendorLocation = null;
            item.Conditions = null;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFaction obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Relations.RemapLinks(mapping);
            obj.ExteriorJailMarker = obj.ExteriorJailMarker.Relink(mapping);
            obj.FollowerWaitMarker = obj.FollowerWaitMarker.Relink(mapping);
            obj.StolenGoodsContainer = obj.StolenGoodsContainer.Relink(mapping);
            obj.PlayerInventoryContainer = obj.PlayerInventoryContainer.Relink(mapping);
            obj.SharedCrimeFactionList = obj.SharedCrimeFactionList.Relink(mapping);
            obj.JailOutfit = obj.JailOutfit.Relink(mapping);
            obj.VendorBuySellList = obj.VendorBuySellList.Relink(mapping);
            obj.MerchantContainer = obj.MerchantContainer.Relink(mapping);
            obj.VendorLocation?.RemapLinks(mapping);
            obj.Conditions?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFactionInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IFactionInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FactionBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FactionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Faction)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Faction)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class FactionCommon : Fallout4MajorRecordCommon
    {
        public new static readonly FactionCommon Instance = new FactionCommon();

        public Faction.Mask<bool> GetEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Faction.Mask<bool>(false);
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            Faction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Relations = item.Relations.CollectionEqualsHelper(
                rhs.Relations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ExteriorJailMarker = item.ExteriorJailMarker.Equals(rhs.ExteriorJailMarker);
            ret.FollowerWaitMarker = item.FollowerWaitMarker.Equals(rhs.FollowerWaitMarker);
            ret.StolenGoodsContainer = item.StolenGoodsContainer.Equals(rhs.StolenGoodsContainer);
            ret.PlayerInventoryContainer = item.PlayerInventoryContainer.Equals(rhs.PlayerInventoryContainer);
            ret.SharedCrimeFactionList = item.SharedCrimeFactionList.Equals(rhs.SharedCrimeFactionList);
            ret.JailOutfit = item.JailOutfit.Equals(rhs.JailOutfit);
            ret.CrimeValues = EqualsMaskHelper.EqualsHelper(
                item.CrimeValues,
                rhs.CrimeValues,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Ranks = item.Ranks.CollectionEqualsHelper(
                rhs.Ranks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.VendorBuySellList = item.VendorBuySellList.Equals(rhs.VendorBuySellList);
            ret.MerchantContainer = item.MerchantContainer.Equals(rhs.MerchantContainer);
            ret.VendorValues = EqualsMaskHelper.EqualsHelper(
                item.VendorValues,
                rhs.VendorValues,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.VendorLocation = EqualsMaskHelper.EqualsHelper(
                item.VendorLocation,
                rhs.VendorLocation,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFactionGetter item,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFactionGetter item,
            FileGeneration fg,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Faction =>");
            }
            else
            {
                fg.AppendLine($"{name} (Faction) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFactionGetter item,
            FileGeneration fg,
            Faction.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.Relations?.Overall ?? true)
            {
                fg.AppendLine("Relations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Relations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.ExteriorJailMarker ?? true)
            {
                fg.AppendItem(item.ExteriorJailMarker.FormKeyNullable, "ExteriorJailMarker");
            }
            if (printMask?.FollowerWaitMarker ?? true)
            {
                fg.AppendItem(item.FollowerWaitMarker.FormKeyNullable, "FollowerWaitMarker");
            }
            if (printMask?.StolenGoodsContainer ?? true)
            {
                fg.AppendItem(item.StolenGoodsContainer.FormKeyNullable, "StolenGoodsContainer");
            }
            if (printMask?.PlayerInventoryContainer ?? true)
            {
                fg.AppendItem(item.PlayerInventoryContainer.FormKeyNullable, "PlayerInventoryContainer");
            }
            if (printMask?.SharedCrimeFactionList ?? true)
            {
                fg.AppendItem(item.SharedCrimeFactionList.FormKeyNullable, "SharedCrimeFactionList");
            }
            if (printMask?.JailOutfit ?? true)
            {
                fg.AppendItem(item.JailOutfit.FormKeyNullable, "JailOutfit");
            }
            if ((printMask?.CrimeValues?.Overall ?? true)
                && item.CrimeValues.TryGet(out var CrimeValuesItem))
            {
                CrimeValuesItem?.ToString(fg, "CrimeValues");
            }
            if (printMask?.Ranks?.Overall ?? true)
            {
                fg.AppendLine("Ranks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Ranks)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.VendorBuySellList ?? true)
            {
                fg.AppendItem(item.VendorBuySellList.FormKeyNullable, "VendorBuySellList");
            }
            if (printMask?.MerchantContainer ?? true)
            {
                fg.AppendItem(item.MerchantContainer.FormKeyNullable, "MerchantContainer");
            }
            if ((printMask?.VendorValues?.Overall ?? true)
                && item.VendorValues.TryGet(out var VendorValuesItem))
            {
                VendorValuesItem?.ToString(fg, "VendorValues");
            }
            if ((printMask?.VendorLocation?.Overall ?? true)
                && item.VendorLocation.TryGet(out var VendorLocationItem))
            {
                VendorLocationItem?.ToString(fg, "VendorLocation");
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions.TryGet(out var ConditionsItem))
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static Faction_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Faction_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Faction_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Faction_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFactionGetter? lhs,
            IFactionGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Relations.SequenceEqualNullable(rhs.Relations)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.ExteriorJailMarker.Equals(rhs.ExteriorJailMarker)) return false;
            if (!lhs.FollowerWaitMarker.Equals(rhs.FollowerWaitMarker)) return false;
            if (!lhs.StolenGoodsContainer.Equals(rhs.StolenGoodsContainer)) return false;
            if (!lhs.PlayerInventoryContainer.Equals(rhs.PlayerInventoryContainer)) return false;
            if (!lhs.SharedCrimeFactionList.Equals(rhs.SharedCrimeFactionList)) return false;
            if (!lhs.JailOutfit.Equals(rhs.JailOutfit)) return false;
            if (!object.Equals(lhs.CrimeValues, rhs.CrimeValues)) return false;
            if (!lhs.Ranks.SequenceEqualNullable(rhs.Ranks)) return false;
            if (!lhs.VendorBuySellList.Equals(rhs.VendorBuySellList)) return false;
            if (!lhs.MerchantContainer.Equals(rhs.MerchantContainer)) return false;
            if (!object.Equals(lhs.VendorValues, rhs.VendorValues)) return false;
            if (!object.Equals(lhs.VendorLocation, rhs.VendorLocation)) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFactionGetter?)lhs,
                rhs: rhs as IFactionGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFactionGetter?)lhs,
                rhs: rhs as IFactionGetter);
        }
        
        public virtual int GetHashCode(IFactionGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Relations);
            hash.Add(item.Flags);
            hash.Add(item.ExteriorJailMarker);
            hash.Add(item.FollowerWaitMarker);
            hash.Add(item.StolenGoodsContainer);
            hash.Add(item.PlayerInventoryContainer);
            hash.Add(item.SharedCrimeFactionList);
            hash.Add(item.JailOutfit);
            if (item.CrimeValues.TryGet(out var CrimeValuesitem))
            {
                hash.Add(CrimeValuesitem);
            }
            hash.Add(item.Ranks);
            hash.Add(item.VendorBuySellList);
            hash.Add(item.MerchantContainer);
            if (item.VendorValues.TryGet(out var VendorValuesitem))
            {
                hash.Add(VendorValuesitem);
            }
            if (item.VendorLocation.TryGet(out var VendorLocationitem))
            {
                hash.Add(VendorLocationitem);
            }
            hash.Add(item.Conditions);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Faction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IFactionGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Relations.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.ExteriorJailMarker.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ExteriorJailMarker);
            }
            if (obj.FollowerWaitMarker.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.FollowerWaitMarker);
            }
            if (obj.StolenGoodsContainer.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.StolenGoodsContainer);
            }
            if (obj.PlayerInventoryContainer.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PlayerInventoryContainer);
            }
            if (obj.SharedCrimeFactionList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.SharedCrimeFactionList);
            }
            if (obj.JailOutfit.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.JailOutfit);
            }
            if (obj.VendorBuySellList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.VendorBuySellList);
            }
            if (obj.MerchantContainer.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.MerchantContainer);
            }
            if (obj.VendorLocation is IFormLinkContainerGetter VendorLocationlinkCont)
            {
                foreach (var item in VendorLocationlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Conditions.TryGet(out var ConditionsItem))
            {
                foreach (var item in ConditionsItem.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Faction Duplicate(
            IFactionGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Faction(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFaction)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFaction)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class FactionSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly FactionSetterTranslationCommon Instance = new FactionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFactionInternal item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IFaction item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Relations) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Relations);
                try
                {
                    item.Relations.SetTo(
                        rhs.Relations
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.ExteriorJailMarker) ?? true))
            {
                item.ExteriorJailMarker = new FormLinkNullable<IPlacedObjectGetter>(rhs.ExteriorJailMarker.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.FollowerWaitMarker) ?? true))
            {
                item.FollowerWaitMarker = new FormLinkNullable<IPlacedObjectGetter>(rhs.FollowerWaitMarker.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.StolenGoodsContainer) ?? true))
            {
                item.StolenGoodsContainer = new FormLinkNullable<IPlacedObjectGetter>(rhs.StolenGoodsContainer.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.PlayerInventoryContainer) ?? true))
            {
                item.PlayerInventoryContainer = new FormLinkNullable<IPlacedObjectGetter>(rhs.PlayerInventoryContainer.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.SharedCrimeFactionList) ?? true))
            {
                item.SharedCrimeFactionList = new FormLinkNullable<IFormListGetter>(rhs.SharedCrimeFactionList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.JailOutfit) ?? true))
            {
                item.JailOutfit = new FormLinkNullable<IOutfitGetter>(rhs.JailOutfit.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.CrimeValues) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.CrimeValues);
                try
                {
                    if(rhs.CrimeValues.TryGet(out var rhsCrimeValues))
                    {
                        item.CrimeValues = rhsCrimeValues.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Faction_FieldIndex.CrimeValues));
                    }
                    else
                    {
                        item.CrimeValues = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Ranks) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Ranks);
                try
                {
                    item.Ranks.SetTo(
                        rhs.Ranks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorBuySellList) ?? true))
            {
                item.VendorBuySellList = new FormLinkNullable<IFormListGetter>(rhs.VendorBuySellList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.MerchantContainer) ?? true))
            {
                item.MerchantContainer = new FormLinkNullable<IPlacedObjectGetter>(rhs.MerchantContainer.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorValues) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.VendorValues);
                try
                {
                    if(rhs.VendorValues.TryGet(out var rhsVendorValues))
                    {
                        item.VendorValues = rhsVendorValues.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Faction_FieldIndex.VendorValues));
                    }
                    else
                    {
                        item.VendorValues = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorLocation) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.VendorLocation);
                try
                {
                    if(rhs.VendorLocation.TryGet(out var rhsVendorLocation))
                    {
                        item.VendorLocation = rhsVendorLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Faction_FieldIndex.VendorLocation));
                    }
                    else
                    {
                        item.VendorLocation = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFactionInternal)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFaction)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFactionInternal)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFaction)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Faction DeepCopy(
            IFactionGetter item,
            Faction.TranslationMask? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ((FactionSetterTranslationCommon)((IFactionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Faction DeepCopy(
            IFactionGetter item,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ((FactionSetterTranslationCommon)((IFactionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Faction DeepCopy(
            IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ((FactionSetterTranslationCommon)((IFactionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Faction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static Faction_Registration Registration => Faction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FactionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class FactionBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FactionBinaryWriteTranslation Instance = new FactionBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IFactionGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IFactionGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IFactionGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRelationGetter>.Instance.Write(
                writer: writer,
                items: item.Relations,
                transl: (MutagenWriter subWriter, IRelationGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((RelationBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Faction.FactionFlag>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DATA));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ExteriorJailMarker,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.JAIL));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FollowerWaitMarker,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.WAIT));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.StolenGoodsContainer,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.STOL));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PlayerInventoryContainer,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.PLCN));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SharedCrimeFactionList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CRGR));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.JailOutfit,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.JOUT));
            if (item.CrimeValues.TryGet(out var CrimeValuesItem))
            {
                ((CrimeValuesBinaryWriteTranslation)((IBinaryItem)CrimeValuesItem).BinaryWriteTranslator).Write(
                    item: CrimeValuesItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRankGetter>.Instance.Write(
                writer: writer,
                items: item.Ranks,
                transl: (MutagenWriter subWriter, IRankGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((RankBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VendorBuySellList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.VEND));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MerchantContainer,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.VENC));
            if (item.VendorValues.TryGet(out var VendorValuesItem))
            {
                ((VendorValuesBinaryWriteTranslation)((IBinaryItem)VendorValuesItem).BinaryWriteTranslator).Write(
                    item: VendorValuesItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.VendorLocation.TryGet(out var VendorLocationItem))
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.PLVD))
                {
                    ((LocationTargetRadiusBinaryWriteTranslation)((IBinaryItem)VendorLocationItem).BinaryWriteTranslator).Write(
                        item: VendorLocationItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            FactionBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IFactionGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.FACT),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FactionBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static FactionBinaryCreateTranslation Instance = new FactionBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.FACT;
        public static void FillBinaryStructs(
            IFactionInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IFactionInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Faction_FieldIndex.Name;
                }
                case RecordTypeInts.XNAM:
                {
                    item.Relations.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Relation>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.XNAM,
                            recordTypeConverter: recordTypeConverter,
                            transl: Relation.TryCreateFromBinary));
                    return (int)Faction_FieldIndex.Relations;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Faction.FactionFlag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Faction_FieldIndex.Flags;
                }
                case RecordTypeInts.JAIL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ExteriorJailMarker = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Faction_FieldIndex.ExteriorJailMarker;
                }
                case RecordTypeInts.WAIT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FollowerWaitMarker = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Faction_FieldIndex.FollowerWaitMarker;
                }
                case RecordTypeInts.STOL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.StolenGoodsContainer = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Faction_FieldIndex.StolenGoodsContainer;
                }
                case RecordTypeInts.PLCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PlayerInventoryContainer = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Faction_FieldIndex.PlayerInventoryContainer;
                }
                case RecordTypeInts.CRGR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SharedCrimeFactionList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Faction_FieldIndex.SharedCrimeFactionList;
                }
                case RecordTypeInts.JOUT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.JailOutfit = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Faction_FieldIndex.JailOutfit;
                }
                case RecordTypeInts.CRVA:
                {
                    item.CrimeValues = Mutagen.Bethesda.Fallout4.CrimeValues.CreateFromBinary(frame: frame);
                    return (int)Faction_FieldIndex.CrimeValues;
                }
                case RecordTypeInts.RNAM:
                case RecordTypeInts.MNAM:
                case RecordTypeInts.FNAM:
                case RecordTypeInts.INAM:
                {
                    item.Ranks.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Rank>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Rank_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: Rank.TryCreateFromBinary));
                    return (int)Faction_FieldIndex.Ranks;
                }
                case RecordTypeInts.VEND:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VendorBuySellList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Faction_FieldIndex.VendorBuySellList;
                }
                case RecordTypeInts.VENC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MerchantContainer = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Faction_FieldIndex.MerchantContainer;
                }
                case RecordTypeInts.VENV:
                {
                    item.VendorValues = Mutagen.Bethesda.Fallout4.VendorValues.CreateFromBinary(frame: frame);
                    return (int)Faction_FieldIndex.VendorValues;
                }
                case RecordTypeInts.PLVD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.VendorLocation = Mutagen.Bethesda.Fallout4.LocationTargetRadius.CreateFromBinary(frame: frame);
                    return (int)Faction_FieldIndex.VendorLocation;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    FactionBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Faction_FieldIndex.Conditions;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IFactionInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class FactionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class FactionBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IFactionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static Faction_Registration Registration => Faction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => FactionCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IRelationGetter> Relations { get; private set; } = ListExt.Empty<RelationBinaryOverlay>();
        #region Flags
        private int? _FlagsLocation;
        public Faction.FactionFlag Flags => _FlagsLocation.HasValue ? (Faction.FactionFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(Faction.FactionFlag);
        #endregion
        #region ExteriorJailMarker
        private int? _ExteriorJailMarkerLocation;
        public FormLinkNullable<IPlacedObjectGetter> ExteriorJailMarker => _ExteriorJailMarkerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ExteriorJailMarkerLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region FollowerWaitMarker
        private int? _FollowerWaitMarkerLocation;
        public FormLinkNullable<IPlacedObjectGetter> FollowerWaitMarker => _FollowerWaitMarkerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FollowerWaitMarkerLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region StolenGoodsContainer
        private int? _StolenGoodsContainerLocation;
        public FormLinkNullable<IPlacedObjectGetter> StolenGoodsContainer => _StolenGoodsContainerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _StolenGoodsContainerLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region PlayerInventoryContainer
        private int? _PlayerInventoryContainerLocation;
        public FormLinkNullable<IPlacedObjectGetter> PlayerInventoryContainer => _PlayerInventoryContainerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PlayerInventoryContainerLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region SharedCrimeFactionList
        private int? _SharedCrimeFactionListLocation;
        public FormLinkNullable<IFormListGetter> SharedCrimeFactionList => _SharedCrimeFactionListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SharedCrimeFactionListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region JailOutfit
        private int? _JailOutfitLocation;
        public FormLinkNullable<IOutfitGetter> JailOutfit => _JailOutfitLocation.HasValue ? new FormLinkNullable<IOutfitGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _JailOutfitLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IOutfitGetter>.Null;
        #endregion
        #region CrimeValues
        private RangeInt32? _CrimeValuesLocation;
        public ICrimeValuesGetter? CrimeValues => _CrimeValuesLocation.HasValue ? CrimeValuesBinaryOverlay.CrimeValuesFactory(new OverlayStream(_data.Slice(_CrimeValuesLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IReadOnlyList<IRankGetter> Ranks { get; private set; } = ListExt.Empty<RankBinaryOverlay>();
        #region VendorBuySellList
        private int? _VendorBuySellListLocation;
        public FormLinkNullable<IFormListGetter> VendorBuySellList => _VendorBuySellListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _VendorBuySellListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region MerchantContainer
        private int? _MerchantContainerLocation;
        public FormLinkNullable<IPlacedObjectGetter> MerchantContainer => _MerchantContainerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MerchantContainerLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region VendorValues
        private RangeInt32? _VendorValuesLocation;
        public IVendorValuesGetter? VendorValues => _VendorValuesLocation.HasValue ? VendorValuesBinaryOverlay.VendorValuesFactory(new OverlayStream(_data.Slice(_VendorValuesLocation!.Value.Min), _package), _package) : default;
        #endregion
        public ILocationTargetRadiusGetter? VendorLocation { get; private set; }
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FactionBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static FactionBinaryOverlay FactionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new FactionBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static FactionBinaryOverlay FactionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return FactionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.Name;
                }
                case RecordTypeInts.XNAM:
                {
                    this.Relations = BinaryOverlayList.FactoryByArray<RelationBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => RelationBinaryOverlay.RelationFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Faction_FieldIndex.Relations;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.Flags;
                }
                case RecordTypeInts.JAIL:
                {
                    _ExteriorJailMarkerLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.ExteriorJailMarker;
                }
                case RecordTypeInts.WAIT:
                {
                    _FollowerWaitMarkerLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.FollowerWaitMarker;
                }
                case RecordTypeInts.STOL:
                {
                    _StolenGoodsContainerLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.StolenGoodsContainer;
                }
                case RecordTypeInts.PLCN:
                {
                    _PlayerInventoryContainerLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.PlayerInventoryContainer;
                }
                case RecordTypeInts.CRGR:
                {
                    _SharedCrimeFactionListLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.SharedCrimeFactionList;
                }
                case RecordTypeInts.JOUT:
                {
                    _JailOutfitLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.JailOutfit;
                }
                case RecordTypeInts.CRVA:
                {
                    _CrimeValuesLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Faction_FieldIndex.CrimeValues;
                }
                case RecordTypeInts.RNAM:
                case RecordTypeInts.MNAM:
                case RecordTypeInts.FNAM:
                case RecordTypeInts.INAM:
                {
                    this.Ranks = this.ParseRepeatedTypelessSubrecord<RankBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: Rank_Registration.TriggeringRecordTypes,
                        factory:  RankBinaryOverlay.RankFactory);
                    return (int)Faction_FieldIndex.Ranks;
                }
                case RecordTypeInts.VEND:
                {
                    _VendorBuySellListLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.VendorBuySellList;
                }
                case RecordTypeInts.VENC:
                {
                    _MerchantContainerLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.MerchantContainer;
                }
                case RecordTypeInts.VENV:
                {
                    _VendorValuesLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Faction_FieldIndex.VendorValues;
                }
                case RecordTypeInts.PLVD:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.VendorLocation = LocationTargetRadiusBinaryOverlay.LocationTargetRadiusFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Faction_FieldIndex.VendorLocation;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Faction_FieldIndex.Conditions;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FactionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFactionGetter rhs)) return false;
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IFactionGetter? obj)
        {
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FactionCommon)((IFactionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

