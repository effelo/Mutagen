/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Tree :
        Fallout4MajorRecord,
        ITreeInternal,
        ILoquiObjectSetter<Tree>,
        IEquatable<ITreeGetter>
    {
        #region Ctor
        protected Tree()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? ITreeGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ITreeGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ITreeGetter.Model => this.Model;
        #endregion
        #region Ingredient
        public FormLinkNullable<IHarvestTargetGetter> Ingredient { get; set; } = new FormLinkNullable<IHarvestTargetGetter>();
        #endregion
        #region HarvestSound
        public FormLinkNullable<ISoundDescriptorGetter> HarvestSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region Production
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SeasonalIngredientProduction? _Production;
        public SeasonalIngredientProduction? Production
        {
            get => _Production;
            set => _Production = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISeasonalIngredientProductionGetter? ITreeGetter.Production => this.Production;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITreeGetter.Name => this.Name;
        #endregion
        #region TrunkFlexibility
        public Single TrunkFlexibility { get; set; } = default;
        #endregion
        #region BranchFlexibility
        public Single BranchFlexibility { get; set; } = default;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown = new byte[32];
        public MemorySlice<Byte> Unknown
        {
            get => _Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ITreeGetter.Unknown => this.Unknown;
        #endregion
        #region LeafAmplitude
        public Single LeafAmplitude { get; set; } = default;
        #endregion
        #region LeafFrequency
        public Single LeafFrequency { get; set; } = default;
        #endregion
        #region CNAMDataTypeState
        public Tree.CNAMDataType CNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TreeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITreeGetter rhs)) return false;
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ITreeGetter? obj)
        {
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TreeCommon)((ITreeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Ingredient = initialValue;
                this.HarvestSound = initialValue;
                this.Production = new MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>(initialValue, new SeasonalIngredientProduction.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.TrunkFlexibility = initialValue;
                this.BranchFlexibility = initialValue;
                this.Unknown = initialValue;
                this.LeafAmplitude = initialValue;
                this.LeafFrequency = initialValue;
                this.CNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Model,
                TItem Ingredient,
                TItem HarvestSound,
                TItem Production,
                TItem Name,
                TItem TrunkFlexibility,
                TItem BranchFlexibility,
                TItem Unknown,
                TItem LeafAmplitude,
                TItem LeafFrequency,
                TItem CNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Ingredient = Ingredient;
                this.HarvestSound = HarvestSound;
                this.Production = new MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>(Production, new SeasonalIngredientProduction.Mask<TItem>(Production));
                this.Name = Name;
                this.TrunkFlexibility = TrunkFlexibility;
                this.BranchFlexibility = BranchFlexibility;
                this.Unknown = Unknown;
                this.LeafAmplitude = LeafAmplitude;
                this.LeafFrequency = LeafFrequency;
                this.CNAMDataTypeState = CNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Ingredient;
            public TItem HarvestSound;
            public MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>? Production { get; set; }
            public TItem Name;
            public TItem TrunkFlexibility;
            public TItem BranchFlexibility;
            public TItem Unknown;
            public TItem LeafAmplitude;
            public TItem LeafFrequency;
            public TItem CNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Ingredient, rhs.Ingredient)) return false;
                if (!object.Equals(this.HarvestSound, rhs.HarvestSound)) return false;
                if (!object.Equals(this.Production, rhs.Production)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.TrunkFlexibility, rhs.TrunkFlexibility)) return false;
                if (!object.Equals(this.BranchFlexibility, rhs.BranchFlexibility)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.LeafAmplitude, rhs.LeafAmplitude)) return false;
                if (!object.Equals(this.LeafFrequency, rhs.LeafFrequency)) return false;
                if (!object.Equals(this.CNAMDataTypeState, rhs.CNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Model);
                hash.Add(this.Ingredient);
                hash.Add(this.HarvestSound);
                hash.Add(this.Production);
                hash.Add(this.Name);
                hash.Add(this.TrunkFlexibility);
                hash.Add(this.BranchFlexibility);
                hash.Add(this.Unknown);
                hash.Add(this.LeafAmplitude);
                hash.Add(this.LeafFrequency);
                hash.Add(this.CNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Ingredient)) return false;
                if (!eval(this.HarvestSound)) return false;
                if (Production != null)
                {
                    if (!eval(this.Production.Overall)) return false;
                    if (this.Production.Specific != null && !this.Production.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.TrunkFlexibility)) return false;
                if (!eval(this.BranchFlexibility)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.LeafAmplitude)) return false;
                if (!eval(this.LeafFrequency)) return false;
                if (!eval(this.CNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Ingredient)) return true;
                if (eval(this.HarvestSound)) return true;
                if (Production != null)
                {
                    if (eval(this.Production.Overall)) return true;
                    if (this.Production.Specific != null && this.Production.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.TrunkFlexibility)) return true;
                if (eval(this.BranchFlexibility)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.LeafAmplitude)) return true;
                if (eval(this.LeafFrequency)) return true;
                if (eval(this.CNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Tree.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Ingredient = eval(this.Ingredient);
                obj.HarvestSound = eval(this.HarvestSound);
                obj.Production = this.Production == null ? null : new MaskItem<R, SeasonalIngredientProduction.Mask<R>?>(eval(this.Production.Overall), this.Production.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.TrunkFlexibility = eval(this.TrunkFlexibility);
                obj.BranchFlexibility = eval(this.BranchFlexibility);
                obj.Unknown = eval(this.Unknown);
                obj.LeafAmplitude = eval(this.LeafAmplitude);
                obj.LeafFrequency = eval(this.LeafFrequency);
                obj.CNAMDataTypeState = eval(this.CNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Tree.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Tree.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Tree.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Ingredient ?? true)
                    {
                        fg.AppendItem(Ingredient, "Ingredient");
                    }
                    if (printMask?.HarvestSound ?? true)
                    {
                        fg.AppendItem(HarvestSound, "HarvestSound");
                    }
                    if (printMask?.Production?.Overall ?? true)
                    {
                        Production?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.TrunkFlexibility ?? true)
                    {
                        fg.AppendItem(TrunkFlexibility, "TrunkFlexibility");
                    }
                    if (printMask?.BranchFlexibility ?? true)
                    {
                        fg.AppendItem(BranchFlexibility, "BranchFlexibility");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.LeafAmplitude ?? true)
                    {
                        fg.AppendItem(LeafAmplitude, "LeafAmplitude");
                    }
                    if (printMask?.LeafFrequency ?? true)
                    {
                        fg.AppendItem(LeafFrequency, "LeafFrequency");
                    }
                    if (printMask?.CNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(CNAMDataTypeState, "CNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Ingredient;
            public Exception? HarvestSound;
            public MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>? Production;
            public Exception? Name;
            public Exception? TrunkFlexibility;
            public Exception? BranchFlexibility;
            public Exception? Unknown;
            public Exception? LeafAmplitude;
            public Exception? LeafFrequency;
            public Exception? CNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Tree_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Tree_FieldIndex.Model:
                        return Model;
                    case Tree_FieldIndex.Ingredient:
                        return Ingredient;
                    case Tree_FieldIndex.HarvestSound:
                        return HarvestSound;
                    case Tree_FieldIndex.Production:
                        return Production;
                    case Tree_FieldIndex.Name:
                        return Name;
                    case Tree_FieldIndex.TrunkFlexibility:
                        return TrunkFlexibility;
                    case Tree_FieldIndex.BranchFlexibility:
                        return BranchFlexibility;
                    case Tree_FieldIndex.Unknown:
                        return Unknown;
                    case Tree_FieldIndex.LeafAmplitude:
                        return LeafAmplitude;
                    case Tree_FieldIndex.LeafFrequency:
                        return LeafFrequency;
                    case Tree_FieldIndex.CNAMDataTypeState:
                        return CNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.Ingredient:
                        this.Ingredient = ex;
                        break;
                    case Tree_FieldIndex.HarvestSound:
                        this.HarvestSound = ex;
                        break;
                    case Tree_FieldIndex.Production:
                        this.Production = new MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Tree_FieldIndex.TrunkFlexibility:
                        this.TrunkFlexibility = ex;
                        break;
                    case Tree_FieldIndex.BranchFlexibility:
                        this.BranchFlexibility = ex;
                        break;
                    case Tree_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Tree_FieldIndex.LeafAmplitude:
                        this.LeafAmplitude = ex;
                        break;
                    case Tree_FieldIndex.LeafFrequency:
                        this.LeafFrequency = ex;
                        break;
                    case Tree_FieldIndex.CNAMDataTypeState:
                        this.CNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.Ingredient:
                        this.Ingredient = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.HarvestSound:
                        this.HarvestSound = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.Production:
                        this.Production = (MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.TrunkFlexibility:
                        this.TrunkFlexibility = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.BranchFlexibility:
                        this.BranchFlexibility = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.LeafAmplitude:
                        this.LeafAmplitude = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.LeafFrequency:
                        this.LeafFrequency = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.CNAMDataTypeState:
                        this.CNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Model != null) return true;
                if (Ingredient != null) return true;
                if (HarvestSound != null) return true;
                if (Production != null) return true;
                if (Name != null) return true;
                if (TrunkFlexibility != null) return true;
                if (BranchFlexibility != null) return true;
                if (Unknown != null) return true;
                if (LeafAmplitude != null) return true;
                if (LeafFrequency != null) return true;
                if (CNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                Model?.ToString(fg);
                fg.AppendItem(Ingredient, "Ingredient");
                fg.AppendItem(HarvestSound, "HarvestSound");
                Production?.ToString(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(TrunkFlexibility, "TrunkFlexibility");
                fg.AppendItem(BranchFlexibility, "BranchFlexibility");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(LeafAmplitude, "LeafAmplitude");
                fg.AppendItem(LeafFrequency, "LeafFrequency");
                fg.AppendItem(CNAMDataTypeState, "CNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Ingredient = this.Ingredient.Combine(rhs.Ingredient);
                ret.HarvestSound = this.HarvestSound.Combine(rhs.HarvestSound);
                ret.Production = this.Production.Combine(rhs.Production, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.TrunkFlexibility = this.TrunkFlexibility.Combine(rhs.TrunkFlexibility);
                ret.BranchFlexibility = this.BranchFlexibility.Combine(rhs.BranchFlexibility);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.LeafAmplitude = this.LeafAmplitude.Combine(rhs.LeafAmplitude);
                ret.LeafFrequency = this.LeafFrequency.Combine(rhs.LeafFrequency);
                ret.CNAMDataTypeState = this.CNAMDataTypeState.Combine(rhs.CNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public Model.TranslationMask? Model;
            public bool Ingredient;
            public bool HarvestSound;
            public SeasonalIngredientProduction.TranslationMask? Production;
            public bool Name;
            public bool TrunkFlexibility;
            public bool BranchFlexibility;
            public bool Unknown;
            public bool LeafAmplitude;
            public bool LeafFrequency;
            public bool CNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Ingredient = defaultOn;
                this.HarvestSound = defaultOn;
                this.Name = defaultOn;
                this.TrunkFlexibility = defaultOn;
                this.BranchFlexibility = defaultOn;
                this.Unknown = defaultOn;
                this.LeafAmplitude = defaultOn;
                this.LeafFrequency = defaultOn;
                this.CNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Ingredient, null));
                ret.Add((HarvestSound, null));
                ret.Add((Production != null ? Production.OnOverall : DefaultOn, Production?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((TrunkFlexibility, null));
                ret.Add((BranchFlexibility, null));
                ret.Add((Unknown, null));
                ret.Add((LeafAmplitude, null));
                ret.Add((LeafFrequency, null));
                ret.Add((CNAMDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Tree_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => TreeCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TreeSetterCommon.Instance.RemapLinks(this, mapping);
        public Tree(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Tree(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Tree(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Tree(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Tree(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum CNAMDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Tree CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Tree();
            ((TreeSetterCommon)((ITreeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Tree item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((TreeSetterCommon)((ITreeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Tree GetNew()
        {
            return new Tree();
        }

    }
    #endregion

    #region Interface
    public partial interface ITree :
        ITreeGetter,
        IFallout4MajorRecord,
        IRegionTarget,
        ITranslatedNamed,
        IHarvestable,
        IModeled,
        IObjectBounded,
        ILoquiObjectSetter<ITreeInternal>,
        IFormLinkContainer
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ObjectBounds ObjectBounds { get; set; }
        new Model? Model { get; set; }
        new FormLinkNullable<IHarvestTargetGetter> Ingredient { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> HarvestSound { get; set; }
        new SeasonalIngredientProduction? Production { get; set; }
        new TranslatedString? Name { get; set; }
        new Single TrunkFlexibility { get; set; }
        new Single BranchFlexibility { get; set; }
        new MemorySlice<Byte> Unknown { get; set; }
        new Single LeafAmplitude { get; set; }
        new Single LeafFrequency { get; set; }
        new Tree.CNAMDataType CNAMDataTypeState { get; set; }
        #region Mutagen
        new Tree.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ITreeInternal :
        IFallout4MajorRecordInternal,
        ITree,
        ITreeGetter
    {
    }

    public partial interface ITreeGetter :
        IFallout4MajorRecordGetter,
        IRegionTargetGetter,
        ITranslatedNamedGetter,
        IHarvestableGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        ILoquiObject<ITreeGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Tree_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IObjectBoundsGetter ObjectBounds { get; }
        IModelGetter? Model { get; }
        FormLinkNullable<IHarvestTargetGetter> Ingredient { get; }
        FormLinkNullable<ISoundDescriptorGetter> HarvestSound { get; }
        ISeasonalIngredientProductionGetter? Production { get; }
        ITranslatedStringGetter? Name { get; }
        Single TrunkFlexibility { get; }
        Single BranchFlexibility { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }
        Single LeafAmplitude { get; }
        Single LeafFrequency { get; }
        Tree.CNAMDataType CNAMDataTypeState { get; }

        #region Mutagen
        Tree.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class TreeMixIn
    {
        public static void Clear(this ITreeInternal item)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Tree.Mask<bool> GetEqualsMask(
            this ITreeGetter item,
            ITreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITreeGetter item,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITreeGetter item,
            FileGeneration fg,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITreeGetter item,
            ITreeGetter rhs)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITreeInternal lhs,
            ITreeGetter rhs,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TreeSetterTranslationCommon)((ITreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITreeInternal lhs,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TreeSetterTranslationCommon)((ITreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Tree Duplicate(
            this ITreeGetter item,
            FormKey formKey,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITreeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Tree_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        Model = 8,
        Ingredient = 9,
        HarvestSound = 10,
        Production = 11,
        Name = 12,
        TrunkFlexibility = 13,
        BranchFlexibility = 14,
        Unknown = 15,
        LeafAmplitude = 16,
        LeafFrequency = 17,
        CNAMDataTypeState = 18,
    }
    #endregion

    #region Registration
    public partial class Tree_Registration : ILoquiRegistration
    {
        public static readonly Tree_Registration Instance = new Tree_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 188,
            version: 0);

        public const string GUID = "5353e43a-3c33-49d9-b5a7-fc971ba96d88";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(Tree.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Tree.ErrorMask);

        public static readonly Type ClassType = typeof(Tree);

        public static readonly Type GetterType = typeof(ITreeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITree);

        public static readonly Type? InternalSetterType = typeof(ITreeInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Tree";

        public const string Name = "Tree";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TREE;
        public static readonly Type BinaryWriteTranslation = typeof(TreeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class TreeSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly TreeSetterCommon Instance = new TreeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITreeInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Model = null;
            item.Ingredient = FormLinkNullable<IHarvestTargetGetter>.Null;
            item.HarvestSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.Production = null;
            item.Name = default;
            item.TrunkFlexibility = default;
            item.BranchFlexibility = default;
            item.Unknown = new byte[32];
            item.LeafAmplitude = default;
            item.LeafFrequency = default;
            item.CNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ITree obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Ingredient = obj.Ingredient.Relink(mapping);
            obj.HarvestSound = obj.HarvestSound.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITreeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ITreeInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: TreeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TreeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Tree)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Tree)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class TreeCommon : Fallout4MajorRecordCommon
    {
        public new static readonly TreeCommon Instance = new TreeCommon();

        public Tree.Mask<bool> GetEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Tree.Mask<bool>(false);
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            Tree.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Ingredient = item.Ingredient.Equals(rhs.Ingredient);
            ret.HarvestSound = item.HarvestSound.Equals(rhs.HarvestSound);
            ret.Production = EqualsMaskHelper.EqualsHelper(
                item.Production,
                rhs.Production,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.TrunkFlexibility = item.TrunkFlexibility.EqualsWithin(rhs.TrunkFlexibility);
            ret.BranchFlexibility = item.BranchFlexibility.EqualsWithin(rhs.BranchFlexibility);
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
            ret.LeafAmplitude = item.LeafAmplitude.EqualsWithin(rhs.LeafAmplitude);
            ret.LeafFrequency = item.LeafFrequency.EqualsWithin(rhs.LeafFrequency);
            ret.CNAMDataTypeState = item.CNAMDataTypeState == rhs.CNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ITreeGetter item,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITreeGetter item,
            FileGeneration fg,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Tree =>");
            }
            else
            {
                fg.AppendLine($"{name} (Tree) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITreeGetter item,
            FileGeneration fg,
            Tree.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.Ingredient ?? true)
            {
                fg.AppendItem(item.Ingredient.FormKeyNullable, "Ingredient");
            }
            if (printMask?.HarvestSound ?? true)
            {
                fg.AppendItem(item.HarvestSound.FormKeyNullable, "HarvestSound");
            }
            if ((printMask?.Production?.Overall ?? true)
                && item.Production.TryGet(out var ProductionItem))
            {
                ProductionItem?.ToString(fg, "Production");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.TrunkFlexibility ?? true)
            {
                fg.AppendItem(item.TrunkFlexibility, "TrunkFlexibility");
            }
            if (printMask?.BranchFlexibility ?? true)
            {
                fg.AppendItem(item.BranchFlexibility, "BranchFlexibility");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.LeafAmplitude ?? true)
            {
                fg.AppendItem(item.LeafAmplitude, "LeafAmplitude");
            }
            if (printMask?.LeafFrequency ?? true)
            {
                fg.AppendItem(item.LeafFrequency, "LeafFrequency");
            }
            if (printMask?.CNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.CNAMDataTypeState, "CNAMDataTypeState");
            }
        }
        
        public static Tree_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Tree_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Tree_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Tree_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITreeGetter? lhs,
            ITreeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.Ingredient.Equals(rhs.Ingredient)) return false;
            if (!lhs.HarvestSound.Equals(rhs.HarvestSound)) return false;
            if (!object.Equals(lhs.Production, rhs.Production)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.TrunkFlexibility.EqualsWithin(rhs.TrunkFlexibility)) return false;
            if (!lhs.BranchFlexibility.EqualsWithin(rhs.BranchFlexibility)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            if (!lhs.LeafAmplitude.EqualsWithin(rhs.LeafAmplitude)) return false;
            if (!lhs.LeafFrequency.EqualsWithin(rhs.LeafFrequency)) return false;
            if (lhs.CNAMDataTypeState != rhs.CNAMDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITreeGetter?)lhs,
                rhs: rhs as ITreeGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITreeGetter?)lhs,
                rhs: rhs as ITreeGetter);
        }
        
        public virtual int GetHashCode(ITreeGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Ingredient);
            hash.Add(item.HarvestSound);
            if (item.Production.TryGet(out var Productionitem))
            {
                hash.Add(Productionitem);
            }
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.TrunkFlexibility);
            hash.Add(item.BranchFlexibility);
            hash.Add(item.Unknown);
            hash.Add(item.LeafAmplitude);
            hash.Add(item.LeafFrequency);
            hash.Add(item.CNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ITreeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITreeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Tree.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ITreeGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Ingredient.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Ingredient);
            }
            if (obj.HarvestSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.HarvestSound);
            }
            yield break;
        }
        
        #region Duplicate
        public Tree Duplicate(
            ITreeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Tree(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITree)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITree)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class TreeSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly TreeSetterTranslationCommon Instance = new TreeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITreeInternal item,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ITree item,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Tree_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Ingredient) ?? true))
            {
                item.Ingredient = new FormLinkNullable<IHarvestTargetGetter>(rhs.Ingredient.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.HarvestSound) ?? true))
            {
                item.HarvestSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.HarvestSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Production) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Production);
                try
                {
                    if(rhs.Production.TryGet(out var rhsProduction))
                    {
                        item.Production = rhsProduction.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.Production));
                    }
                    else
                    {
                        item.Production = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.TrunkFlexibility) ?? true))
            {
                item.TrunkFlexibility = rhs.TrunkFlexibility;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.BranchFlexibility) ?? true))
            {
                item.BranchFlexibility = rhs.BranchFlexibility;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafAmplitude) ?? true))
            {
                item.LeafAmplitude = rhs.LeafAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafFrequency) ?? true))
            {
                item.LeafFrequency = rhs.LeafFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.CNAMDataTypeState) ?? true))
            {
                item.CNAMDataTypeState = rhs.CNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITreeInternal)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITree)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITreeInternal)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITree)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Tree DeepCopy(
            ITreeGetter item,
            Tree.TranslationMask? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ((TreeSetterTranslationCommon)((ITreeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Tree DeepCopy(
            ITreeGetter item,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ((TreeSetterTranslationCommon)((ITreeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Tree DeepCopy(
            ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ((TreeSetterTranslationCommon)((ITreeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Tree
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TreeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TreeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class TreeBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static TreeBinaryWriteTranslation Instance = new TreeBinaryWriteTranslation();

        public static void WriteEmbedded(
            ITreeGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ITreeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Ingredient,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.PFIG));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HarvestSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            if (item.Production.TryGet(out var ProductionItem))
            {
                ((SeasonalIngredientProductionBinaryWriteTranslation)((IBinaryItem)ProductionItem).BinaryWriteTranslator).Write(
                    item: ProductionItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.CNAM)))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TrunkFlexibility);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BranchFlexibility);
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LeafAmplitude);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LeafFrequency);
            }
        }

        public void Write(
            MutagenWriter writer,
            ITreeGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.TREE),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TreeBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static TreeBinaryCreateTranslation Instance = new TreeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.TREE;
        public static void FillBinaryStructs(
            ITreeInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ITreeInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)Tree_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Tree_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Tree_FieldIndex.Model;
                }
                case RecordTypeInts.PFIG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Ingredient = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Tree_FieldIndex.Ingredient;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HarvestSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Tree_FieldIndex.HarvestSound;
                }
                case RecordTypeInts.PFPC:
                {
                    item.Production = Mutagen.Bethesda.Fallout4.SeasonalIngredientProduction.CreateFromBinary(frame: frame);
                    return (int)Tree_FieldIndex.Production;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Tree_FieldIndex.Name;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.TrunkFlexibility = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.BranchFlexibility = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Unknown = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(32));
                    item.LeafAmplitude = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.LeafFrequency = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)Tree_FieldIndex.LeafFrequency;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class TreeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class TreeBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ITreeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TreeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => TreeCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Tree.MajorFlag MajorFlags => (Tree.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Ingredient
        private int? _IngredientLocation;
        public FormLinkNullable<IHarvestTargetGetter> Ingredient => _IngredientLocation.HasValue ? new FormLinkNullable<IHarvestTargetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _IngredientLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IHarvestTargetGetter>.Null;
        #endregion
        #region HarvestSound
        private int? _HarvestSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> HarvestSound => _HarvestSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _HarvestSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region Production
        private RangeInt32? _ProductionLocation;
        public ISeasonalIngredientProductionGetter? Production => _ProductionLocation.HasValue ? SeasonalIngredientProductionBinaryOverlay.SeasonalIngredientProductionFactory(new OverlayStream(_data.Slice(_ProductionLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        private int? _CNAMLocation;
        public Tree.CNAMDataType CNAMDataTypeState { get; private set; }
        #region TrunkFlexibility
        private int _TrunkFlexibilityLocation => _CNAMLocation!.Value;
        private bool _TrunkFlexibility_IsSet => _CNAMLocation.HasValue;
        public Single TrunkFlexibility => _TrunkFlexibility_IsSet ? _data.Slice(_TrunkFlexibilityLocation, 4).Float() : default;
        #endregion
        #region BranchFlexibility
        private int _BranchFlexibilityLocation => _CNAMLocation!.Value + 0x4;
        private bool _BranchFlexibility_IsSet => _CNAMLocation.HasValue;
        public Single BranchFlexibility => _BranchFlexibility_IsSet ? _data.Slice(_BranchFlexibilityLocation, 4).Float() : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _CNAMLocation!.Value + 0x8;
        private bool _Unknown_IsSet => _CNAMLocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown => _Unknown_IsSet ? _data.Span.Slice(_UnknownLocation, 32).ToArray() : default(ReadOnlyMemorySlice<byte>);
        #endregion
        #region LeafAmplitude
        private int _LeafAmplitudeLocation => _CNAMLocation!.Value + 0x28;
        private bool _LeafAmplitude_IsSet => _CNAMLocation.HasValue;
        public Single LeafAmplitude => _LeafAmplitude_IsSet ? _data.Slice(_LeafAmplitudeLocation, 4).Float() : default;
        #endregion
        #region LeafFrequency
        private int _LeafFrequencyLocation => _CNAMLocation!.Value + 0x2C;
        private bool _LeafFrequency_IsSet => _CNAMLocation.HasValue;
        public Single LeafFrequency => _LeafFrequency_IsSet ? _data.Slice(_LeafFrequencyLocation, 4).Float() : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TreeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static TreeBinaryOverlay TreeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new TreeBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static TreeBinaryOverlay TreeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return TreeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Tree_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Tree_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Tree_FieldIndex.Model;
                }
                case RecordTypeInts.PFIG:
                {
                    _IngredientLocation = (stream.Position - offset);
                    return (int)Tree_FieldIndex.Ingredient;
                }
                case RecordTypeInts.SNAM:
                {
                    _HarvestSoundLocation = (stream.Position - offset);
                    return (int)Tree_FieldIndex.HarvestSound;
                }
                case RecordTypeInts.PFPC:
                {
                    _ProductionLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Tree_FieldIndex.Production;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Tree_FieldIndex.Name;
                }
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Tree_FieldIndex.LeafFrequency;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TreeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITreeGetter rhs)) return false;
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ITreeGetter? obj)
        {
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TreeCommon)((ITreeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

