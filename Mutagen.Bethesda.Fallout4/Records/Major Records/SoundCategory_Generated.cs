/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class SoundCategory :
        Fallout4MajorRecord,
        ISoundCategoryInternal,
        ILoquiObjectSetter<SoundCategory>,
        IEquatable<ISoundCategoryGetter>
    {
        #region Ctor
        protected SoundCategory()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ISoundCategoryGetter.Name => this.Name;
        #endregion
        #region Flags
        public SoundCategory.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SoundCategory.Flag? ISoundCategoryGetter.Flags => this.Flags;
        #endregion
        #region Parent
        public FormLinkNullable<ISoundDescriptorGetter> Parent { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region StaticVolumeMultiplier
        public Single? StaticVolumeMultiplier { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ISoundCategoryGetter.StaticVolumeMultiplier => this.StaticVolumeMultiplier;
        #endregion
        #region DefaultMenuVolume
        public Single? DefaultMenuVolume { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ISoundCategoryGetter.DefaultMenuVolume => this.DefaultMenuVolume;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoundCategoryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISoundCategoryGetter rhs)) return false;
            return ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISoundCategoryGetter? obj)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Flags = initialValue;
                this.Parent = initialValue;
                this.StaticVolumeMultiplier = initialValue;
                this.DefaultMenuVolume = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem Flags,
                TItem Parent,
                TItem StaticVolumeMultiplier,
                TItem DefaultMenuVolume)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Flags = Flags;
                this.Parent = Parent;
                this.StaticVolumeMultiplier = StaticVolumeMultiplier;
                this.DefaultMenuVolume = DefaultMenuVolume;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Flags;
            public TItem Parent;
            public TItem StaticVolumeMultiplier;
            public TItem DefaultMenuVolume;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.StaticVolumeMultiplier, rhs.StaticVolumeMultiplier)) return false;
                if (!object.Equals(this.DefaultMenuVolume, rhs.DefaultMenuVolume)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.Parent);
                hash.Add(this.StaticVolumeMultiplier);
                hash.Add(this.DefaultMenuVolume);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Parent)) return false;
                if (!eval(this.StaticVolumeMultiplier)) return false;
                if (!eval(this.DefaultMenuVolume)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Parent)) return true;
                if (eval(this.StaticVolumeMultiplier)) return true;
                if (eval(this.DefaultMenuVolume)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundCategory.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.Parent = eval(this.Parent);
                obj.StaticVolumeMultiplier = eval(this.StaticVolumeMultiplier);
                obj.DefaultMenuVolume = eval(this.DefaultMenuVolume);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SoundCategory.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SoundCategory.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SoundCategory.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Parent ?? true)
                    {
                        fg.AppendItem(Parent, "Parent");
                    }
                    if (printMask?.StaticVolumeMultiplier ?? true)
                    {
                        fg.AppendItem(StaticVolumeMultiplier, "StaticVolumeMultiplier");
                    }
                    if (printMask?.DefaultMenuVolume ?? true)
                    {
                        fg.AppendItem(DefaultMenuVolume, "DefaultMenuVolume");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Flags;
            public Exception? Parent;
            public Exception? StaticVolumeMultiplier;
            public Exception? DefaultMenuVolume;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoundCategory_FieldIndex enu = (SoundCategory_FieldIndex)index;
                switch (enu)
                {
                    case SoundCategory_FieldIndex.Name:
                        return Name;
                    case SoundCategory_FieldIndex.Flags:
                        return Flags;
                    case SoundCategory_FieldIndex.Parent:
                        return Parent;
                    case SoundCategory_FieldIndex.StaticVolumeMultiplier:
                        return StaticVolumeMultiplier;
                    case SoundCategory_FieldIndex.DefaultMenuVolume:
                        return DefaultMenuVolume;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoundCategory_FieldIndex enu = (SoundCategory_FieldIndex)index;
                switch (enu)
                {
                    case SoundCategory_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case SoundCategory_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case SoundCategory_FieldIndex.Parent:
                        this.Parent = ex;
                        break;
                    case SoundCategory_FieldIndex.StaticVolumeMultiplier:
                        this.StaticVolumeMultiplier = ex;
                        break;
                    case SoundCategory_FieldIndex.DefaultMenuVolume:
                        this.DefaultMenuVolume = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoundCategory_FieldIndex enu = (SoundCategory_FieldIndex)index;
                switch (enu)
                {
                    case SoundCategory_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case SoundCategory_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case SoundCategory_FieldIndex.Parent:
                        this.Parent = (Exception?)obj;
                        break;
                    case SoundCategory_FieldIndex.StaticVolumeMultiplier:
                        this.StaticVolumeMultiplier = (Exception?)obj;
                        break;
                    case SoundCategory_FieldIndex.DefaultMenuVolume:
                        this.DefaultMenuVolume = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (Parent != null) return true;
                if (StaticVolumeMultiplier != null) return true;
                if (DefaultMenuVolume != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Parent, "Parent");
                fg.AppendItem(StaticVolumeMultiplier, "StaticVolumeMultiplier");
                fg.AppendItem(DefaultMenuVolume, "DefaultMenuVolume");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Parent = this.Parent.Combine(rhs.Parent);
                ret.StaticVolumeMultiplier = this.StaticVolumeMultiplier.Combine(rhs.StaticVolumeMultiplier);
                ret.DefaultMenuVolume = this.DefaultMenuVolume.Combine(rhs.DefaultMenuVolume);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Flags;
            public bool Parent;
            public bool StaticVolumeMultiplier;
            public bool DefaultMenuVolume;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.Parent = defaultOn;
                this.StaticVolumeMultiplier = defaultOn;
                this.DefaultMenuVolume = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((Parent, null));
                ret.Add((StaticVolumeMultiplier, null));
                ret.Add((DefaultMenuVolume, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SoundCategory_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => SoundCategoryCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoundCategorySetterCommon.Instance.RemapLinks(this, mapping);
        public SoundCategory(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private SoundCategory(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal SoundCategory(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SoundCategory(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public SoundCategory(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundCategoryBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundCategoryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static SoundCategory CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SoundCategory();
            ((SoundCategorySetterCommon)((ISoundCategoryGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundCategory item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((SoundCategorySetterCommon)((ISoundCategoryGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoundCategory GetNew()
        {
            return new SoundCategory();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundCategory :
        ISoundCategoryGetter,
        IFallout4MajorRecord,
        ITranslatedNamed,
        ILoquiObjectSetter<ISoundCategoryInternal>,
        IFormLinkContainer
    {
        new TranslatedString? Name { get; set; }
        new SoundCategory.Flag? Flags { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> Parent { get; set; }
        new Single? StaticVolumeMultiplier { get; set; }
        new Single? DefaultMenuVolume { get; set; }
    }

    public partial interface ISoundCategoryInternal :
        IFallout4MajorRecordInternal,
        ISoundCategory,
        ISoundCategoryGetter
    {
    }

    public partial interface ISoundCategoryGetter :
        IFallout4MajorRecordGetter,
        ITranslatedNamedGetter,
        ILoquiObject<ISoundCategoryGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => SoundCategory_Registration.Instance;
        ITranslatedStringGetter? Name { get; }
        SoundCategory.Flag? Flags { get; }
        FormLinkNullable<ISoundDescriptorGetter> Parent { get; }
        Single? StaticVolumeMultiplier { get; }
        Single? DefaultMenuVolume { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundCategoryMixIn
    {
        public static void Clear(this ISoundCategoryInternal item)
        {
            ((SoundCategorySetterCommon)((ISoundCategoryGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundCategory.Mask<bool> GetEqualsMask(
            this ISoundCategoryGetter item,
            ISoundCategoryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISoundCategoryGetter item,
            string? name = null,
            SoundCategory.Mask<bool>? printMask = null)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISoundCategoryGetter item,
            FileGeneration fg,
            string? name = null,
            SoundCategory.Mask<bool>? printMask = null)
        {
            ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundCategoryGetter item,
            ISoundCategoryGetter rhs)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISoundCategoryInternal lhs,
            ISoundCategoryGetter rhs,
            out SoundCategory.ErrorMask errorMask,
            SoundCategory.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundCategory.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundCategoryInternal lhs,
            ISoundCategoryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundCategory DeepCopy(
            this ISoundCategoryGetter item,
            SoundCategory.TranslationMask? copyMask = null)
        {
            return ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundCategory DeepCopy(
            this ISoundCategoryGetter item,
            out SoundCategory.ErrorMask errorMask,
            SoundCategory.TranslationMask? copyMask = null)
        {
            return ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundCategory DeepCopy(
            this ISoundCategoryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SoundCategory Duplicate(
            this ISoundCategoryGetter item,
            FormKey formKey,
            SoundCategory.TranslationMask? copyMask = null)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundCategoryInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundCategorySetterCommon)((ISoundCategoryGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum SoundCategory_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        Flags = 7,
        Parent = 8,
        StaticVolumeMultiplier = 9,
        DefaultMenuVolume = 10,
    }
    #endregion

    #region Registration
    public partial class SoundCategory_Registration : ILoquiRegistration
    {
        public static readonly SoundCategory_Registration Instance = new SoundCategory_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 473,
            version: 0);

        public const string GUID = "d8233f0e-3b58-4f2a-b259-5eba0478da71";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(SoundCategory.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundCategory.ErrorMask);

        public static readonly Type ClassType = typeof(SoundCategory);

        public static readonly Type GetterType = typeof(ISoundCategoryGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundCategory);

        public static readonly Type? InternalSetterType = typeof(ISoundCategoryInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.SoundCategory";

        public const string Name = "SoundCategory";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SNCT;
        public static readonly Type BinaryWriteTranslation = typeof(SoundCategoryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class SoundCategorySetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly SoundCategorySetterCommon Instance = new SoundCategorySetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundCategoryInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Flags = default;
            item.Parent = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.StaticVolumeMultiplier = default;
            item.DefaultMenuVolume = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ISoundCategoryInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISoundCategoryInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISoundCategory obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Parent = obj.Parent.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundCategoryInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ISoundCategoryInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: SoundCategoryBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SoundCategoryBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (SoundCategory)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (SoundCategory)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class SoundCategoryCommon : Fallout4MajorRecordCommon
    {
        public new static readonly SoundCategoryCommon Instance = new SoundCategoryCommon();

        public SoundCategory.Mask<bool> GetEqualsMask(
            ISoundCategoryGetter item,
            ISoundCategoryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundCategory.Mask<bool>(false);
            ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundCategoryGetter item,
            ISoundCategoryGetter rhs,
            SoundCategory.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Parent = item.Parent.Equals(rhs.Parent);
            ret.StaticVolumeMultiplier = item.StaticVolumeMultiplier.EqualsWithin(rhs.StaticVolumeMultiplier);
            ret.DefaultMenuVolume = item.DefaultMenuVolume.EqualsWithin(rhs.DefaultMenuVolume);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ISoundCategoryGetter item,
            string? name = null,
            SoundCategory.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISoundCategoryGetter item,
            FileGeneration fg,
            string? name = null,
            SoundCategory.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SoundCategory =>");
            }
            else
            {
                fg.AppendLine($"{name} (SoundCategory) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISoundCategoryGetter item,
            FileGeneration fg,
            SoundCategory.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.Parent ?? true)
            {
                fg.AppendItem(item.Parent.FormKeyNullable, "Parent");
            }
            if ((printMask?.StaticVolumeMultiplier ?? true)
                && item.StaticVolumeMultiplier.TryGet(out var StaticVolumeMultiplierItem))
            {
                fg.AppendItem(StaticVolumeMultiplierItem, "StaticVolumeMultiplier");
            }
            if ((printMask?.DefaultMenuVolume ?? true)
                && item.DefaultMenuVolume.TryGet(out var DefaultMenuVolumeItem))
            {
                fg.AppendItem(DefaultMenuVolumeItem, "DefaultMenuVolume");
            }
        }
        
        public static SoundCategory_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundCategory_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (SoundCategory_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (SoundCategory_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (SoundCategory_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (SoundCategory_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (SoundCategory_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new SoundCategory_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundCategory_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SoundCategory_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SoundCategory_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SoundCategory_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundCategoryGetter? lhs,
            ISoundCategoryGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.Parent.Equals(rhs.Parent)) return false;
            if (!lhs.StaticVolumeMultiplier.EqualsWithin(rhs.StaticVolumeMultiplier)) return false;
            if (!lhs.DefaultMenuVolume.EqualsWithin(rhs.DefaultMenuVolume)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISoundCategoryGetter?)lhs,
                rhs: rhs as ISoundCategoryGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISoundCategoryGetter?)lhs,
                rhs: rhs as ISoundCategoryGetter);
        }
        
        public virtual int GetHashCode(ISoundCategoryGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.Parent);
            if (item.StaticVolumeMultiplier.TryGet(out var StaticVolumeMultiplieritem))
            {
                hash.Add(StaticVolumeMultiplieritem);
            }
            if (item.DefaultMenuVolume.TryGet(out var DefaultMenuVolumeitem))
            {
                hash.Add(DefaultMenuVolumeitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundCategoryGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundCategoryGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoundCategory.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ISoundCategoryGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Parent.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Parent);
            }
            yield break;
        }
        
        #region Duplicate
        public SoundCategory Duplicate(
            ISoundCategoryGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SoundCategory(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundCategory)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundCategory)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class SoundCategorySetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly SoundCategorySetterTranslationCommon Instance = new SoundCategorySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundCategoryInternal item,
            ISoundCategoryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISoundCategory item,
            ISoundCategoryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.Parent) ?? true))
            {
                item.Parent = new FormLinkNullable<ISoundDescriptorGetter>(rhs.Parent.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.StaticVolumeMultiplier) ?? true))
            {
                item.StaticVolumeMultiplier = rhs.StaticVolumeMultiplier;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.DefaultMenuVolume) ?? true))
            {
                item.DefaultMenuVolume = rhs.DefaultMenuVolume;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundCategoryInternal)item,
                rhs: (ISoundCategoryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundCategory)item,
                rhs: (ISoundCategoryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundCategoryInternal)item,
                rhs: (ISoundCategoryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundCategory)item,
                rhs: (ISoundCategoryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SoundCategory DeepCopy(
            ISoundCategoryGetter item,
            SoundCategory.TranslationMask? copyMask = null)
        {
            SoundCategory ret = (SoundCategory)((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).GetNew();
            ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundCategory DeepCopy(
            ISoundCategoryGetter item,
            out SoundCategory.ErrorMask errorMask,
            SoundCategory.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundCategory ret = (SoundCategory)((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).GetNew();
            ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundCategory.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundCategory DeepCopy(
            ISoundCategoryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundCategory ret = (SoundCategory)((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).GetNew();
            ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundCategory
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundCategory_Registration.Instance;
        public new static SoundCategory_Registration Registration => SoundCategory_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundCategoryCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoundCategorySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundCategorySetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SoundCategoryBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SoundCategoryBinaryWriteTranslation Instance = new SoundCategoryBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ISoundCategoryGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoundCategory.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Parent,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.PNAM));
            FloatBinaryTranslation.Write(
                writer: writer,
                item: item.StaticVolumeMultiplier,
                integerType: FloatIntegerType.UShort,
                multiplier: 1.5259021896696422E-05,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.VNAM));
            FloatBinaryTranslation.Write(
                writer: writer,
                item: item.DefaultMenuVolume,
                integerType: FloatIntegerType.UShort,
                multiplier: 1.5259021896696422E-05,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.UNAM));
        }

        public void Write(
            MutagenWriter writer,
            ISoundCategoryGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.SNCT),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoundCategoryGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoundCategoryGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoundCategoryGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SoundCategoryBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static SoundCategoryBinaryCreateTranslation Instance = new SoundCategoryBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SNCT;
        public static void FillBinaryStructs(
            ISoundCategoryInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ISoundCategoryInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)SoundCategory_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<SoundCategory.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)SoundCategory_FieldIndex.Flags;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Parent = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)SoundCategory_FieldIndex.Parent;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.StaticVolumeMultiplier = FloatBinaryTranslation.Parse(
                        frame: frame,
                        integerType: FloatIntegerType.UShort,
                        multiplier: 1.5259021896696422E-05);
                    return (int)SoundCategory_FieldIndex.StaticVolumeMultiplier;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultMenuVolume = FloatBinaryTranslation.Parse(
                        frame: frame,
                        integerType: FloatIntegerType.UShort,
                        multiplier: 1.5259021896696422E-05);
                    return (int)SoundCategory_FieldIndex.DefaultMenuVolume;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SoundCategoryBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SoundCategoryBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ISoundCategoryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundCategory_Registration.Instance;
        public new static SoundCategory_Registration Registration => SoundCategory_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundCategoryCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundCategorySetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => SoundCategoryCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundCategoryBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundCategoryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public SoundCategory.Flag? Flags => _FlagsLocation.HasValue ? (SoundCategory.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(SoundCategory.Flag?);
        #endregion
        #region Parent
        private int? _ParentLocation;
        public FormLinkNullable<ISoundDescriptorGetter> Parent => _ParentLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ParentLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region StaticVolumeMultiplier
        private int? _StaticVolumeMultiplierLocation;
        public Single? StaticVolumeMultiplier => _StaticVolumeMultiplierLocation.HasValue ? FloatBinaryTranslation.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _StaticVolumeMultiplierLocation.Value, _package.MetaData.Constants), FloatIntegerType.UShort, 1.5259021896696422E-05) : default(Single?);
        #endregion
        #region DefaultMenuVolume
        private int? _DefaultMenuVolumeLocation;
        public Single? DefaultMenuVolume => _DefaultMenuVolumeLocation.HasValue ? FloatBinaryTranslation.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _DefaultMenuVolumeLocation.Value, _package.MetaData.Constants), FloatIntegerType.UShort, 1.5259021896696422E-05) : default(Single?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundCategoryBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static SoundCategoryBinaryOverlay SoundCategoryFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new SoundCategoryBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static SoundCategoryBinaryOverlay SoundCategoryFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return SoundCategoryFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.Flags;
                }
                case RecordTypeInts.PNAM:
                {
                    _ParentLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.Parent;
                }
                case RecordTypeInts.VNAM:
                {
                    _StaticVolumeMultiplierLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.StaticVolumeMultiplier;
                }
                case RecordTypeInts.UNAM:
                {
                    _DefaultMenuVolumeLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.DefaultMenuVolume;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoundCategoryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISoundCategoryGetter rhs)) return false;
            return ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISoundCategoryGetter? obj)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

