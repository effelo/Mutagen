/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class DialogResponse :
        IDialogResponse,
        ILoquiObjectSetter<DialogResponse>,
        IEquatable<IDialogResponseGetter>
    {
        #region Ctor
        public DialogResponse()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Emotion
        public Emotion Emotion { get; set; } = default;
        #endregion
        #region EmotionValue
        public UInt32 EmotionValue { get; set; } = default;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default;
        #endregion
        #region ResponseNumber
        public Byte ResponseNumber { get; set; } = default;
        #endregion
        #region Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown2 = new byte[3];
        public MemorySlice<Byte> Unknown2
        {
            get => _Unknown2;
            set => this._Unknown2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IDialogResponseGetter.Unknown2 => this.Unknown2;
        #endregion
        #region Sound
        public FormLink<ISoundDescriptorGetter> Sound { get; set; } = new FormLink<ISoundDescriptorGetter>();
        #endregion
        #region Flags
        public DialogResponse.Flag Flags { get; set; } = default;
        #endregion
        #region Unknown3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown3 = new byte[3];
        public MemorySlice<Byte> Unknown3
        {
            get => _Unknown3;
            set => this._Unknown3 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IDialogResponseGetter.Unknown3 => this.Unknown3;
        #endregion
        #region Text
        public TranslatedString Text { get; set; } = string.Empty;
        ITranslatedStringGetter IDialogResponseGetter.Text => this.Text;
        #endregion
        #region ScriptNotes
        public String ScriptNotes { get; set; } = string.Empty;
        #endregion
        #region Edits
        public String Edits { get; set; } = string.Empty;
        #endregion
        #region SpeakerIdleAnimation
        public FormLinkNullable<IIdleAnimationGetter> SpeakerIdleAnimation { get; set; } = new FormLinkNullable<IIdleAnimationGetter>();
        #endregion
        #region ListenerIdleAnimation
        public FormLinkNullable<IIdleAnimationGetter> ListenerIdleAnimation { get; set; } = new FormLinkNullable<IIdleAnimationGetter>();
        #endregion
        #region TRDTDataTypeState
        public DialogResponse.TRDTDataType TRDTDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogResponseMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogResponseGetter rhs)) return false;
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDialogResponseGetter? obj)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Emotion = initialValue;
                this.EmotionValue = initialValue;
                this.Unknown = initialValue;
                this.ResponseNumber = initialValue;
                this.Unknown2 = initialValue;
                this.Sound = initialValue;
                this.Flags = initialValue;
                this.Unknown3 = initialValue;
                this.Text = initialValue;
                this.ScriptNotes = initialValue;
                this.Edits = initialValue;
                this.SpeakerIdleAnimation = initialValue;
                this.ListenerIdleAnimation = initialValue;
                this.TRDTDataTypeState = initialValue;
            }

            public Mask(
                TItem Emotion,
                TItem EmotionValue,
                TItem Unknown,
                TItem ResponseNumber,
                TItem Unknown2,
                TItem Sound,
                TItem Flags,
                TItem Unknown3,
                TItem Text,
                TItem ScriptNotes,
                TItem Edits,
                TItem SpeakerIdleAnimation,
                TItem ListenerIdleAnimation,
                TItem TRDTDataTypeState)
            {
                this.Emotion = Emotion;
                this.EmotionValue = EmotionValue;
                this.Unknown = Unknown;
                this.ResponseNumber = ResponseNumber;
                this.Unknown2 = Unknown2;
                this.Sound = Sound;
                this.Flags = Flags;
                this.Unknown3 = Unknown3;
                this.Text = Text;
                this.ScriptNotes = ScriptNotes;
                this.Edits = Edits;
                this.SpeakerIdleAnimation = SpeakerIdleAnimation;
                this.ListenerIdleAnimation = ListenerIdleAnimation;
                this.TRDTDataTypeState = TRDTDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Emotion;
            public TItem EmotionValue;
            public TItem Unknown;
            public TItem ResponseNumber;
            public TItem Unknown2;
            public TItem Sound;
            public TItem Flags;
            public TItem Unknown3;
            public TItem Text;
            public TItem ScriptNotes;
            public TItem Edits;
            public TItem SpeakerIdleAnimation;
            public TItem ListenerIdleAnimation;
            public TItem TRDTDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Emotion, rhs.Emotion)) return false;
                if (!object.Equals(this.EmotionValue, rhs.EmotionValue)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.ResponseNumber, rhs.ResponseNumber)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.Text, rhs.Text)) return false;
                if (!object.Equals(this.ScriptNotes, rhs.ScriptNotes)) return false;
                if (!object.Equals(this.Edits, rhs.Edits)) return false;
                if (!object.Equals(this.SpeakerIdleAnimation, rhs.SpeakerIdleAnimation)) return false;
                if (!object.Equals(this.ListenerIdleAnimation, rhs.ListenerIdleAnimation)) return false;
                if (!object.Equals(this.TRDTDataTypeState, rhs.TRDTDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Emotion);
                hash.Add(this.EmotionValue);
                hash.Add(this.Unknown);
                hash.Add(this.ResponseNumber);
                hash.Add(this.Unknown2);
                hash.Add(this.Sound);
                hash.Add(this.Flags);
                hash.Add(this.Unknown3);
                hash.Add(this.Text);
                hash.Add(this.ScriptNotes);
                hash.Add(this.Edits);
                hash.Add(this.SpeakerIdleAnimation);
                hash.Add(this.ListenerIdleAnimation);
                hash.Add(this.TRDTDataTypeState);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Emotion)) return false;
                if (!eval(this.EmotionValue)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.ResponseNumber)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.Sound)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.Text)) return false;
                if (!eval(this.ScriptNotes)) return false;
                if (!eval(this.Edits)) return false;
                if (!eval(this.SpeakerIdleAnimation)) return false;
                if (!eval(this.ListenerIdleAnimation)) return false;
                if (!eval(this.TRDTDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Emotion)) return true;
                if (eval(this.EmotionValue)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.ResponseNumber)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.Sound)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.Text)) return true;
                if (eval(this.ScriptNotes)) return true;
                if (eval(this.Edits)) return true;
                if (eval(this.SpeakerIdleAnimation)) return true;
                if (eval(this.ListenerIdleAnimation)) return true;
                if (eval(this.TRDTDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponse.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Emotion = eval(this.Emotion);
                obj.EmotionValue = eval(this.EmotionValue);
                obj.Unknown = eval(this.Unknown);
                obj.ResponseNumber = eval(this.ResponseNumber);
                obj.Unknown2 = eval(this.Unknown2);
                obj.Sound = eval(this.Sound);
                obj.Flags = eval(this.Flags);
                obj.Unknown3 = eval(this.Unknown3);
                obj.Text = eval(this.Text);
                obj.ScriptNotes = eval(this.ScriptNotes);
                obj.Edits = eval(this.Edits);
                obj.SpeakerIdleAnimation = eval(this.SpeakerIdleAnimation);
                obj.ListenerIdleAnimation = eval(this.ListenerIdleAnimation);
                obj.TRDTDataTypeState = eval(this.TRDTDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DialogResponse.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DialogResponse.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DialogResponse.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Emotion ?? true)
                    {
                        fg.AppendItem(Emotion, "Emotion");
                    }
                    if (printMask?.EmotionValue ?? true)
                    {
                        fg.AppendItem(EmotionValue, "EmotionValue");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.ResponseNumber ?? true)
                    {
                        fg.AppendItem(ResponseNumber, "ResponseNumber");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.Sound ?? true)
                    {
                        fg.AppendItem(Sound, "Sound");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        fg.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.Text ?? true)
                    {
                        fg.AppendItem(Text, "Text");
                    }
                    if (printMask?.ScriptNotes ?? true)
                    {
                        fg.AppendItem(ScriptNotes, "ScriptNotes");
                    }
                    if (printMask?.Edits ?? true)
                    {
                        fg.AppendItem(Edits, "Edits");
                    }
                    if (printMask?.SpeakerIdleAnimation ?? true)
                    {
                        fg.AppendItem(SpeakerIdleAnimation, "SpeakerIdleAnimation");
                    }
                    if (printMask?.ListenerIdleAnimation ?? true)
                    {
                        fg.AppendItem(ListenerIdleAnimation, "ListenerIdleAnimation");
                    }
                    if (printMask?.TRDTDataTypeState ?? true)
                    {
                        fg.AppendItem(TRDTDataTypeState, "TRDTDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Emotion;
            public Exception? EmotionValue;
            public Exception? Unknown;
            public Exception? ResponseNumber;
            public Exception? Unknown2;
            public Exception? Sound;
            public Exception? Flags;
            public Exception? Unknown3;
            public Exception? Text;
            public Exception? ScriptNotes;
            public Exception? Edits;
            public Exception? SpeakerIdleAnimation;
            public Exception? ListenerIdleAnimation;
            public Exception? TRDTDataTypeState;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        return Emotion;
                    case DialogResponse_FieldIndex.EmotionValue:
                        return EmotionValue;
                    case DialogResponse_FieldIndex.Unknown:
                        return Unknown;
                    case DialogResponse_FieldIndex.ResponseNumber:
                        return ResponseNumber;
                    case DialogResponse_FieldIndex.Unknown2:
                        return Unknown2;
                    case DialogResponse_FieldIndex.Sound:
                        return Sound;
                    case DialogResponse_FieldIndex.Flags:
                        return Flags;
                    case DialogResponse_FieldIndex.Unknown3:
                        return Unknown3;
                    case DialogResponse_FieldIndex.Text:
                        return Text;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        return ScriptNotes;
                    case DialogResponse_FieldIndex.Edits:
                        return Edits;
                    case DialogResponse_FieldIndex.SpeakerIdleAnimation:
                        return SpeakerIdleAnimation;
                    case DialogResponse_FieldIndex.ListenerIdleAnimation:
                        return ListenerIdleAnimation;
                    case DialogResponse_FieldIndex.TRDTDataTypeState:
                        return TRDTDataTypeState;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        this.Emotion = ex;
                        break;
                    case DialogResponse_FieldIndex.EmotionValue:
                        this.EmotionValue = ex;
                        break;
                    case DialogResponse_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case DialogResponse_FieldIndex.ResponseNumber:
                        this.ResponseNumber = ex;
                        break;
                    case DialogResponse_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case DialogResponse_FieldIndex.Sound:
                        this.Sound = ex;
                        break;
                    case DialogResponse_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case DialogResponse_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case DialogResponse_FieldIndex.Text:
                        this.Text = ex;
                        break;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        this.ScriptNotes = ex;
                        break;
                    case DialogResponse_FieldIndex.Edits:
                        this.Edits = ex;
                        break;
                    case DialogResponse_FieldIndex.SpeakerIdleAnimation:
                        this.SpeakerIdleAnimation = ex;
                        break;
                    case DialogResponse_FieldIndex.ListenerIdleAnimation:
                        this.ListenerIdleAnimation = ex;
                        break;
                    case DialogResponse_FieldIndex.TRDTDataTypeState:
                        this.TRDTDataTypeState = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        this.Emotion = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.EmotionValue:
                        this.EmotionValue = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.ResponseNumber:
                        this.ResponseNumber = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Sound:
                        this.Sound = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Text:
                        this.Text = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        this.ScriptNotes = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Edits:
                        this.Edits = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.SpeakerIdleAnimation:
                        this.SpeakerIdleAnimation = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.ListenerIdleAnimation:
                        this.ListenerIdleAnimation = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.TRDTDataTypeState:
                        this.TRDTDataTypeState = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Emotion != null) return true;
                if (EmotionValue != null) return true;
                if (Unknown != null) return true;
                if (ResponseNumber != null) return true;
                if (Unknown2 != null) return true;
                if (Sound != null) return true;
                if (Flags != null) return true;
                if (Unknown3 != null) return true;
                if (Text != null) return true;
                if (ScriptNotes != null) return true;
                if (Edits != null) return true;
                if (SpeakerIdleAnimation != null) return true;
                if (ListenerIdleAnimation != null) return true;
                if (TRDTDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Emotion, "Emotion");
                fg.AppendItem(EmotionValue, "EmotionValue");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(ResponseNumber, "ResponseNumber");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(Sound, "Sound");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Unknown3, "Unknown3");
                fg.AppendItem(Text, "Text");
                fg.AppendItem(ScriptNotes, "ScriptNotes");
                fg.AppendItem(Edits, "Edits");
                fg.AppendItem(SpeakerIdleAnimation, "SpeakerIdleAnimation");
                fg.AppendItem(ListenerIdleAnimation, "ListenerIdleAnimation");
                fg.AppendItem(TRDTDataTypeState, "TRDTDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Emotion = this.Emotion.Combine(rhs.Emotion);
                ret.EmotionValue = this.EmotionValue.Combine(rhs.EmotionValue);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.ResponseNumber = this.ResponseNumber.Combine(rhs.ResponseNumber);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.Sound = this.Sound.Combine(rhs.Sound);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.Text = this.Text.Combine(rhs.Text);
                ret.ScriptNotes = this.ScriptNotes.Combine(rhs.ScriptNotes);
                ret.Edits = this.Edits.Combine(rhs.Edits);
                ret.SpeakerIdleAnimation = this.SpeakerIdleAnimation.Combine(rhs.SpeakerIdleAnimation);
                ret.ListenerIdleAnimation = this.ListenerIdleAnimation.Combine(rhs.ListenerIdleAnimation);
                ret.TRDTDataTypeState = this.TRDTDataTypeState.Combine(rhs.TRDTDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Emotion;
            public bool EmotionValue;
            public bool Unknown;
            public bool ResponseNumber;
            public bool Unknown2;
            public bool Sound;
            public bool Flags;
            public bool Unknown3;
            public bool Text;
            public bool ScriptNotes;
            public bool Edits;
            public bool SpeakerIdleAnimation;
            public bool ListenerIdleAnimation;
            public bool TRDTDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Emotion = defaultOn;
                this.EmotionValue = defaultOn;
                this.Unknown = defaultOn;
                this.ResponseNumber = defaultOn;
                this.Unknown2 = defaultOn;
                this.Sound = defaultOn;
                this.Flags = defaultOn;
                this.Unknown3 = defaultOn;
                this.Text = defaultOn;
                this.ScriptNotes = defaultOn;
                this.Edits = defaultOn;
                this.SpeakerIdleAnimation = defaultOn;
                this.ListenerIdleAnimation = defaultOn;
                this.TRDTDataTypeState = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Emotion, null));
                ret.Add((EmotionValue, null));
                ret.Add((Unknown, null));
                ret.Add((ResponseNumber, null));
                ret.Add((Unknown2, null));
                ret.Add((Sound, null));
                ret.Add((Flags, null));
                ret.Add((Unknown3, null));
                ret.Add((Text, null));
                ret.Add((ScriptNotes, null));
                ret.Add((Edits, null));
                ret.Add((SpeakerIdleAnimation, null));
                ret.Add((ListenerIdleAnimation, null));
                ret.Add((TRDTDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = DialogResponse_Registration.TriggeringRecordType;
        public IEnumerable<FormLinkInformation> ContainedFormLinks => DialogResponseCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponseSetterCommon.Instance.RemapLinks(this, mapping);
        [Flags]
        public enum TRDTDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static DialogResponse CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DialogResponse();
            ((DialogResponseSetterCommon)((IDialogResponseGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogResponse item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DialogResponse GetNew()
        {
            return new DialogResponse();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponse :
        IDialogResponseGetter,
        ILoquiObjectSetter<IDialogResponse>,
        IFormLinkContainer
    {
        new Emotion Emotion { get; set; }
        new UInt32 EmotionValue { get; set; }
        new Int32 Unknown { get; set; }
        new Byte ResponseNumber { get; set; }
        new MemorySlice<Byte> Unknown2 { get; set; }
        new FormLink<ISoundDescriptorGetter> Sound { get; set; }
        new DialogResponse.Flag Flags { get; set; }
        new MemorySlice<Byte> Unknown3 { get; set; }
        new TranslatedString Text { get; set; }
        new String ScriptNotes { get; set; }
        new String Edits { get; set; }
        new FormLinkNullable<IIdleAnimationGetter> SpeakerIdleAnimation { get; set; }
        new FormLinkNullable<IIdleAnimationGetter> ListenerIdleAnimation { get; set; }
        new DialogResponse.TRDTDataType TRDTDataTypeState { get; set; }
    }

    public partial interface IDialogResponseGetter :
        ILoquiObject,
        ILoquiObject<IDialogResponseGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => DialogResponse_Registration.Instance;
        Emotion Emotion { get; }
        UInt32 EmotionValue { get; }
        Int32 Unknown { get; }
        Byte ResponseNumber { get; }
        ReadOnlyMemorySlice<Byte> Unknown2 { get; }
        FormLink<ISoundDescriptorGetter> Sound { get; }
        DialogResponse.Flag Flags { get; }
        ReadOnlyMemorySlice<Byte> Unknown3 { get; }
        ITranslatedStringGetter Text { get; }
        String ScriptNotes { get; }
        String Edits { get; }
        FormLinkNullable<IIdleAnimationGetter> SpeakerIdleAnimation { get; }
        FormLinkNullable<IIdleAnimationGetter> ListenerIdleAnimation { get; }
        DialogResponse.TRDTDataType TRDTDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponseMixIn
    {
        public static void Clear(this IDialogResponse item)
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponse.Mask<bool> GetEqualsMask(
            this IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogResponseGetter item,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogResponseGetter item,
            FileGeneration fg,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogResponseGetter item,
            IDialogResponseGetter rhs)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            DialogResponse.TranslationMask? copyMask = null)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogResponse.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            DialogResponse.TranslationMask? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogResponse item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum DialogResponse_FieldIndex
    {
        Emotion = 0,
        EmotionValue = 1,
        Unknown = 2,
        ResponseNumber = 3,
        Unknown2 = 4,
        Sound = 5,
        Flags = 6,
        Unknown3 = 7,
        Text = 8,
        ScriptNotes = 9,
        Edits = 10,
        SpeakerIdleAnimation = 11,
        ListenerIdleAnimation = 12,
        TRDTDataTypeState = 13,
    }
    #endregion

    #region Registration
    public partial class DialogResponse_Registration : ILoquiRegistration
    {
        public static readonly DialogResponse_Registration Instance = new DialogResponse_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 356,
            version: 0);

        public const string GUID = "a48dd14d-639a-47de-b96d-4517394936b7";

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(DialogResponse.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponse.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponse);

        public static readonly Type GetterType = typeof(IDialogResponseGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponse);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.DialogResponse";

        public const string Name = "DialogResponse";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TRDT;
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponseBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogResponseSetterCommon
    {
        public static readonly DialogResponseSetterCommon Instance = new DialogResponseSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponse item)
        {
            ClearPartial();
            item.Emotion = default;
            item.EmotionValue = default;
            item.Unknown = default;
            item.ResponseNumber = default;
            item.Unknown2 = new byte[3];
            item.Sound = FormLink<ISoundDescriptorGetter>.Null;
            item.Flags = default;
            item.Unknown3 = new byte[3];
            item.Text.Clear();
            item.ScriptNotes = string.Empty;
            item.Edits = string.Empty;
            item.SpeakerIdleAnimation = FormLinkNullable<IIdleAnimationGetter>.Null;
            item.ListenerIdleAnimation = FormLinkNullable<IIdleAnimationGetter>.Null;
            item.TRDTDataTypeState = default;
        }
        
        #region Mutagen
        public void RemapLinks(IDialogResponse obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Sound = obj.Sound.Relink(mapping);
            obj.SpeakerIdleAnimation = obj.SpeakerIdleAnimation.Relink(mapping);
            obj.ListenerIdleAnimation = obj.ListenerIdleAnimation.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogResponse item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: DialogResponseBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogResponseBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class DialogResponseCommon
    {
        public static readonly DialogResponseCommon Instance = new DialogResponseCommon();

        public DialogResponse.Mask<bool> GetEqualsMask(
            IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponse.Mask<bool>(false);
            ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            DialogResponse.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Emotion = item.Emotion == rhs.Emotion;
            ret.EmotionValue = item.EmotionValue == rhs.EmotionValue;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.ResponseNumber = item.ResponseNumber == rhs.ResponseNumber;
            ret.Unknown2 = MemoryExtensions.SequenceEqual(item.Unknown2.Span, rhs.Unknown2.Span);
            ret.Sound = item.Sound.Equals(rhs.Sound);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Unknown3 = MemoryExtensions.SequenceEqual(item.Unknown3.Span, rhs.Unknown3.Span);
            ret.Text = object.Equals(item.Text, rhs.Text);
            ret.ScriptNotes = string.Equals(item.ScriptNotes, rhs.ScriptNotes);
            ret.Edits = string.Equals(item.Edits, rhs.Edits);
            ret.SpeakerIdleAnimation = item.SpeakerIdleAnimation.Equals(rhs.SpeakerIdleAnimation);
            ret.ListenerIdleAnimation = item.ListenerIdleAnimation.Equals(rhs.ListenerIdleAnimation);
            ret.TRDTDataTypeState = item.TRDTDataTypeState == rhs.TRDTDataTypeState;
        }
        
        public string ToString(
            IDialogResponseGetter item,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDialogResponseGetter item,
            FileGeneration fg,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogResponse =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogResponse) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDialogResponseGetter item,
            FileGeneration fg,
            DialogResponse.Mask<bool>? printMask = null)
        {
            if (printMask?.Emotion ?? true)
            {
                fg.AppendItem(item.Emotion, "Emotion");
            }
            if (printMask?.EmotionValue ?? true)
            {
                fg.AppendItem(item.EmotionValue, "EmotionValue");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.ResponseNumber ?? true)
            {
                fg.AppendItem(item.ResponseNumber, "ResponseNumber");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendLine($"Unknown2 => {SpanExt.ToHexString(item.Unknown2)}");
            }
            if (printMask?.Sound ?? true)
            {
                fg.AppendItem(item.Sound.FormKey, "Sound");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Unknown3 ?? true)
            {
                fg.AppendLine($"Unknown3 => {SpanExt.ToHexString(item.Unknown3)}");
            }
            if (printMask?.Text ?? true)
            {
                fg.AppendItem(item.Text, "Text");
            }
            if (printMask?.ScriptNotes ?? true)
            {
                fg.AppendItem(item.ScriptNotes, "ScriptNotes");
            }
            if (printMask?.Edits ?? true)
            {
                fg.AppendItem(item.Edits, "Edits");
            }
            if (printMask?.SpeakerIdleAnimation ?? true)
            {
                fg.AppendItem(item.SpeakerIdleAnimation.FormKeyNullable, "SpeakerIdleAnimation");
            }
            if (printMask?.ListenerIdleAnimation ?? true)
            {
                fg.AppendItem(item.ListenerIdleAnimation.FormKeyNullable, "ListenerIdleAnimation");
            }
            if (printMask?.TRDTDataTypeState ?? true)
            {
                fg.AppendItem(item.TRDTDataTypeState, "TRDTDataTypeState");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponseGetter? lhs,
            IDialogResponseGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Emotion != rhs.Emotion) return false;
            if (lhs.EmotionValue != rhs.EmotionValue) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.ResponseNumber != rhs.ResponseNumber) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown2.Span, rhs.Unknown2.Span)) return false;
            if (!lhs.Sound.Equals(rhs.Sound)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown3.Span, rhs.Unknown3.Span)) return false;
            if (!object.Equals(lhs.Text, rhs.Text)) return false;
            if (!string.Equals(lhs.ScriptNotes, rhs.ScriptNotes)) return false;
            if (!string.Equals(lhs.Edits, rhs.Edits)) return false;
            if (!lhs.SpeakerIdleAnimation.Equals(rhs.SpeakerIdleAnimation)) return false;
            if (!lhs.ListenerIdleAnimation.Equals(rhs.ListenerIdleAnimation)) return false;
            if (lhs.TRDTDataTypeState != rhs.TRDTDataTypeState) return false;
            return true;
        }
        
        public virtual int GetHashCode(IDialogResponseGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Emotion);
            hash.Add(item.EmotionValue);
            hash.Add(item.Unknown);
            hash.Add(item.ResponseNumber);
            hash.Add(item.Unknown2);
            hash.Add(item.Sound);
            hash.Add(item.Flags);
            hash.Add(item.Unknown3);
            hash.Add(item.Text);
            hash.Add(item.ScriptNotes);
            hash.Add(item.Edits);
            hash.Add(item.SpeakerIdleAnimation);
            hash.Add(item.ListenerIdleAnimation);
            hash.Add(item.TRDTDataTypeState);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DialogResponse.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IDialogResponseGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Sound);
            if (obj.SpeakerIdleAnimation.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.SpeakerIdleAnimation);
            }
            if (obj.ListenerIdleAnimation.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ListenerIdleAnimation);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class DialogResponseSetterTranslationCommon
    {
        public static readonly DialogResponseSetterTranslationCommon Instance = new DialogResponseSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogResponse item,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Emotion) ?? true))
            {
                item.Emotion = rhs.Emotion;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.EmotionValue) ?? true))
            {
                item.EmotionValue = rhs.EmotionValue;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ResponseNumber) ?? true))
            {
                item.ResponseNumber = rhs.ResponseNumber;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Sound) ?? true))
            {
                item.Sound = new FormLink<ISoundDescriptorGetter>(rhs.Sound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Text) ?? true))
            {
                item.Text = rhs.Text.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ScriptNotes) ?? true))
            {
                item.ScriptNotes = rhs.ScriptNotes;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Edits) ?? true))
            {
                item.Edits = rhs.Edits;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.SpeakerIdleAnimation) ?? true))
            {
                item.SpeakerIdleAnimation = new FormLinkNullable<IIdleAnimationGetter>(rhs.SpeakerIdleAnimation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ListenerIdleAnimation) ?? true))
            {
                item.ListenerIdleAnimation = new FormLinkNullable<IIdleAnimationGetter>(rhs.ListenerIdleAnimation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TRDTDataTypeState) ?? true))
            {
                item.TRDTDataTypeState = rhs.TRDTDataTypeState;
            }
        }
        
        #endregion
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            DialogResponse.TranslationMask? copyMask = null)
        {
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogResponse.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class DialogResponse
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static DialogResponse_Registration Registration => DialogResponse_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DialogResponseSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class DialogResponseBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static DialogResponseBinaryWriteTranslation Instance = new DialogResponseBinaryWriteTranslation();

        public static void WriteEmbedded(
            IDialogResponseGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IDialogResponseGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.TRDT)))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Emotion>.Instance.Write(
                    writer,
                    item.Emotion,
                    length: 4);
                writer.Write(item.EmotionValue);
                writer.Write(item.Unknown);
                writer.Write(item.ResponseNumber);
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown2);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogResponse.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown3);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Text,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.IL);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ScriptNotes,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM2),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Edits,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM3),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpeakerIdleAnimation,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ListenerIdleAnimation,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.LNAM));
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponseGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogResponseGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DialogResponseBinaryCreateTranslation
    {
        public readonly static DialogResponseBinaryCreateTranslation Instance = new DialogResponseBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IDialogResponse item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IDialogResponse item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TRDT:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)DialogResponse_FieldIndex.Unknown3) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Emotion = EnumBinaryTranslation<Emotion>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.EmotionValue = dataFrame.ReadUInt32();
                    item.Unknown = dataFrame.ReadInt32();
                    item.ResponseNumber = dataFrame.ReadUInt8();
                    item.Unknown2 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(3));
                    item.Sound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Flags = EnumBinaryTranslation<DialogResponse.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Unknown3 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(3));
                    return (int)DialogResponse_FieldIndex.Unknown3;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Text = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.IL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)DialogResponse_FieldIndex.Text;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ScriptNotes = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)DialogResponse_FieldIndex.ScriptNotes;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Edits = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)DialogResponse_FieldIndex.Edits;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpeakerIdleAnimation = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)DialogResponse_FieldIndex.SpeakerIdleAnimation;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ListenerIdleAnimation = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)DialogResponse_FieldIndex.ListenerIdleAnimation;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class DialogResponseBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDialogResponseGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponseBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class DialogResponseBinaryOverlay :
        BinaryOverlay,
        IDialogResponseGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static DialogResponse_Registration Registration => DialogResponse_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDialogResponseGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => DialogResponseCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        private int? _TRDTLocation;
        public DialogResponse.TRDTDataType TRDTDataTypeState { get; private set; }
        #region Emotion
        private int _EmotionLocation => _TRDTLocation!.Value;
        private bool _Emotion_IsSet => _TRDTLocation.HasValue;
        public Emotion Emotion => _Emotion_IsSet ? (Emotion)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_EmotionLocation, 0x4)) : default;
        #endregion
        #region EmotionValue
        private int _EmotionValueLocation => _TRDTLocation!.Value + 0x4;
        private bool _EmotionValue_IsSet => _TRDTLocation.HasValue;
        public UInt32 EmotionValue => _EmotionValue_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_EmotionValueLocation, 4)) : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _TRDTLocation!.Value + 0x8;
        private bool _Unknown_IsSet => _TRDTLocation.HasValue;
        public Int32 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(_UnknownLocation, 4)) : default;
        #endregion
        #region ResponseNumber
        private int _ResponseNumberLocation => _TRDTLocation!.Value + 0xC;
        private bool _ResponseNumber_IsSet => _TRDTLocation.HasValue;
        public Byte ResponseNumber => _ResponseNumber_IsSet ? _data.Span[_ResponseNumberLocation] : default;
        #endregion
        #region Unknown2
        private int _Unknown2Location => _TRDTLocation!.Value + 0xD;
        private bool _Unknown2_IsSet => _TRDTLocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown2 => _Unknown2_IsSet ? _data.Span.Slice(_Unknown2Location, 3).ToArray() : default(ReadOnlyMemorySlice<byte>);
        #endregion
        #region Sound
        private int _SoundLocation => _TRDTLocation!.Value + 0x10;
        private bool _Sound_IsSet => _TRDTLocation.HasValue;
        public FormLink<ISoundDescriptorGetter> Sound => _Sound_IsSet ? new FormLink<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_SoundLocation, 0x4)))) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        #region Flags
        private int _FlagsLocation => _TRDTLocation!.Value + 0x14;
        private bool _Flags_IsSet => _TRDTLocation.HasValue;
        public DialogResponse.Flag Flags => _Flags_IsSet ? (DialogResponse.Flag)_data.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region Unknown3
        private int _Unknown3Location => _TRDTLocation!.Value + 0x15;
        private bool _Unknown3_IsSet => _TRDTLocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown3 => _Unknown3_IsSet ? _data.Span.Slice(_Unknown3Location, 3).ToArray() : default(ReadOnlyMemorySlice<byte>);
        #endregion
        #region Text
        private int? _TextLocation;
        public ITranslatedStringGetter Text => _TextLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _TextLocation.Value, _package.MetaData.Constants), StringsSource.IL, _package.MetaData.StringsLookup) : TranslatedString.Empty;
        #endregion
        #region ScriptNotes
        private int? _ScriptNotesLocation;
        public String ScriptNotes => _ScriptNotesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _ScriptNotesLocation.Value, _package.MetaData.Constants)) : string.Empty;
        #endregion
        #region Edits
        private int? _EditsLocation;
        public String Edits => _EditsLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _EditsLocation.Value, _package.MetaData.Constants)) : string.Empty;
        #endregion
        #region SpeakerIdleAnimation
        private int? _SpeakerIdleAnimationLocation;
        public FormLinkNullable<IIdleAnimationGetter> SpeakerIdleAnimation => _SpeakerIdleAnimationLocation.HasValue ? new FormLinkNullable<IIdleAnimationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SpeakerIdleAnimationLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IIdleAnimationGetter>.Null;
        #endregion
        #region ListenerIdleAnimation
        private int? _ListenerIdleAnimationLocation;
        public FormLinkNullable<IIdleAnimationGetter> ListenerIdleAnimation => _ListenerIdleAnimationLocation.HasValue ? new FormLinkNullable<IIdleAnimationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ListenerIdleAnimationLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IIdleAnimationGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogResponseBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DialogResponseBinaryOverlay DialogResponseFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DialogResponseBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static DialogResponseBinaryOverlay DialogResponseFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DialogResponseFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TRDT:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)DialogResponse_FieldIndex.Unknown3) return ParseResult.Stop;
                    _TRDTLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)DialogResponse_FieldIndex.Unknown3;
                }
                case RecordTypeInts.NAM1:
                {
                    _TextLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.Text;
                }
                case RecordTypeInts.NAM2:
                {
                    _ScriptNotesLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.ScriptNotes;
                }
                case RecordTypeInts.NAM3:
                {
                    _EditsLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.Edits;
                }
                case RecordTypeInts.SNAM:
                {
                    _SpeakerIdleAnimationLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.SpeakerIdleAnimation;
                }
                case RecordTypeInts.LNAM:
                {
                    _ListenerIdleAnimationLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.ListenerIdleAnimation;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogResponseMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogResponseGetter rhs)) return false;
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDialogResponseGetter? obj)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

