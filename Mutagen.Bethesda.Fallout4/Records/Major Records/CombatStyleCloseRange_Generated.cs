/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class CombatStyleCloseRange :
        ICombatStyleCloseRange,
        ILoquiObjectSetter<CombatStyleCloseRange>,
        IEquatable<ICombatStyleCloseRangeGetter>
    {
        #region Ctor
        public CombatStyleCloseRange()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public CombatStyleCloseRange.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region CircleMult
        public Single CircleMult { get; set; } = default;
        #endregion
        #region FallbackMult
        public Single FallbackMult { get; set; } = default;
        #endregion
        #region FlankDistance
        public Single FlankDistance { get; set; } = default;
        #endregion
        #region StalkTime
        public Single StalkTime { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CombatStyleCloseRangeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICombatStyleCloseRangeGetter rhs)) return false;
            return ((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICombatStyleCloseRangeGetter? obj)
        {
            return ((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.CircleMult = initialValue;
                this.FallbackMult = initialValue;
                this.FlankDistance = initialValue;
                this.StalkTime = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem CircleMult,
                TItem FallbackMult,
                TItem FlankDistance,
                TItem StalkTime)
            {
                this.Versioning = Versioning;
                this.CircleMult = CircleMult;
                this.FallbackMult = FallbackMult;
                this.FlankDistance = FlankDistance;
                this.StalkTime = StalkTime;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem CircleMult;
            public TItem FallbackMult;
            public TItem FlankDistance;
            public TItem StalkTime;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.CircleMult, rhs.CircleMult)) return false;
                if (!object.Equals(this.FallbackMult, rhs.FallbackMult)) return false;
                if (!object.Equals(this.FlankDistance, rhs.FlankDistance)) return false;
                if (!object.Equals(this.StalkTime, rhs.StalkTime)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.CircleMult);
                hash.Add(this.FallbackMult);
                hash.Add(this.FlankDistance);
                hash.Add(this.StalkTime);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.CircleMult)) return false;
                if (!eval(this.FallbackMult)) return false;
                if (!eval(this.FlankDistance)) return false;
                if (!eval(this.StalkTime)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.CircleMult)) return true;
                if (eval(this.FallbackMult)) return true;
                if (eval(this.FlankDistance)) return true;
                if (eval(this.StalkTime)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CombatStyleCloseRange.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.CircleMult = eval(this.CircleMult);
                obj.FallbackMult = eval(this.FallbackMult);
                obj.FlankDistance = eval(this.FlankDistance);
                obj.StalkTime = eval(this.StalkTime);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CombatStyleCloseRange.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CombatStyleCloseRange.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CombatStyleCloseRange.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.CircleMult ?? true)
                    {
                        fg.AppendItem(CircleMult, "CircleMult");
                    }
                    if (printMask?.FallbackMult ?? true)
                    {
                        fg.AppendItem(FallbackMult, "FallbackMult");
                    }
                    if (printMask?.FlankDistance ?? true)
                    {
                        fg.AppendItem(FlankDistance, "FlankDistance");
                    }
                    if (printMask?.StalkTime ?? true)
                    {
                        fg.AppendItem(StalkTime, "StalkTime");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? CircleMult;
            public Exception? FallbackMult;
            public Exception? FlankDistance;
            public Exception? StalkTime;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CombatStyleCloseRange_FieldIndex enu = (CombatStyleCloseRange_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleCloseRange_FieldIndex.Versioning:
                        return Versioning;
                    case CombatStyleCloseRange_FieldIndex.CircleMult:
                        return CircleMult;
                    case CombatStyleCloseRange_FieldIndex.FallbackMult:
                        return FallbackMult;
                    case CombatStyleCloseRange_FieldIndex.FlankDistance:
                        return FlankDistance;
                    case CombatStyleCloseRange_FieldIndex.StalkTime:
                        return StalkTime;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CombatStyleCloseRange_FieldIndex enu = (CombatStyleCloseRange_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleCloseRange_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case CombatStyleCloseRange_FieldIndex.CircleMult:
                        this.CircleMult = ex;
                        break;
                    case CombatStyleCloseRange_FieldIndex.FallbackMult:
                        this.FallbackMult = ex;
                        break;
                    case CombatStyleCloseRange_FieldIndex.FlankDistance:
                        this.FlankDistance = ex;
                        break;
                    case CombatStyleCloseRange_FieldIndex.StalkTime:
                        this.StalkTime = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CombatStyleCloseRange_FieldIndex enu = (CombatStyleCloseRange_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleCloseRange_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case CombatStyleCloseRange_FieldIndex.CircleMult:
                        this.CircleMult = (Exception?)obj;
                        break;
                    case CombatStyleCloseRange_FieldIndex.FallbackMult:
                        this.FallbackMult = (Exception?)obj;
                        break;
                    case CombatStyleCloseRange_FieldIndex.FlankDistance:
                        this.FlankDistance = (Exception?)obj;
                        break;
                    case CombatStyleCloseRange_FieldIndex.StalkTime:
                        this.StalkTime = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (CircleMult != null) return true;
                if (FallbackMult != null) return true;
                if (FlankDistance != null) return true;
                if (StalkTime != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(CircleMult, "CircleMult");
                fg.AppendItem(FallbackMult, "FallbackMult");
                fg.AppendItem(FlankDistance, "FlankDistance");
                fg.AppendItem(StalkTime, "StalkTime");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.CircleMult = this.CircleMult.Combine(rhs.CircleMult);
                ret.FallbackMult = this.FallbackMult.Combine(rhs.FallbackMult);
                ret.FlankDistance = this.FlankDistance.Combine(rhs.FlankDistance);
                ret.StalkTime = this.StalkTime.Combine(rhs.StalkTime);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool CircleMult;
            public bool FallbackMult;
            public bool FlankDistance;
            public bool StalkTime;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.CircleMult = defaultOn;
                this.FallbackMult = defaultOn;
                this.FlankDistance = defaultOn;
                this.StalkTime = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((CircleMult, null));
                ret.Add((FallbackMult, null));
                ret.Add((FlankDistance, null));
                ret.Add((StalkTime, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CombatStyleCloseRange_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleCloseRangeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleCloseRangeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static CombatStyleCloseRange CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CombatStyleCloseRange();
            ((CombatStyleCloseRangeSetterCommon)((ICombatStyleCloseRangeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CombatStyleCloseRange item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CombatStyleCloseRangeSetterCommon)((ICombatStyleCloseRangeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CombatStyleCloseRange GetNew()
        {
            return new CombatStyleCloseRange();
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStyleCloseRange :
        ICombatStyleCloseRangeGetter,
        ILoquiObjectSetter<ICombatStyleCloseRange>
    {
        new CombatStyleCloseRange.VersioningBreaks Versioning { get; set; }
        new Single CircleMult { get; set; }
        new Single FallbackMult { get; set; }
        new Single FlankDistance { get; set; }
        new Single StalkTime { get; set; }
    }

    public partial interface ICombatStyleCloseRangeGetter :
        ILoquiObject,
        ILoquiObject<ICombatStyleCloseRangeGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => CombatStyleCloseRange_Registration.Instance;
        CombatStyleCloseRange.VersioningBreaks Versioning { get; }
        Single CircleMult { get; }
        Single FallbackMult { get; }
        Single FlankDistance { get; }
        Single StalkTime { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CombatStyleCloseRangeMixIn
    {
        public static void Clear(this ICombatStyleCloseRange item)
        {
            ((CombatStyleCloseRangeSetterCommon)((ICombatStyleCloseRangeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CombatStyleCloseRange.Mask<bool> GetEqualsMask(
            this ICombatStyleCloseRangeGetter item,
            ICombatStyleCloseRangeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICombatStyleCloseRangeGetter item,
            string? name = null,
            CombatStyleCloseRange.Mask<bool>? printMask = null)
        {
            return ((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICombatStyleCloseRangeGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyleCloseRange.Mask<bool>? printMask = null)
        {
            ((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICombatStyleCloseRangeGetter item,
            ICombatStyleCloseRangeGetter rhs)
        {
            return ((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICombatStyleCloseRange lhs,
            ICombatStyleCloseRangeGetter rhs)
        {
            ((CombatStyleCloseRangeSetterTranslationCommon)((ICombatStyleCloseRangeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStyleCloseRange lhs,
            ICombatStyleCloseRangeGetter rhs,
            CombatStyleCloseRange.TranslationMask? copyMask = null)
        {
            ((CombatStyleCloseRangeSetterTranslationCommon)((ICombatStyleCloseRangeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStyleCloseRange lhs,
            ICombatStyleCloseRangeGetter rhs,
            out CombatStyleCloseRange.ErrorMask errorMask,
            CombatStyleCloseRange.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleCloseRangeSetterTranslationCommon)((ICombatStyleCloseRangeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CombatStyleCloseRange.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICombatStyleCloseRange lhs,
            ICombatStyleCloseRangeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CombatStyleCloseRangeSetterTranslationCommon)((ICombatStyleCloseRangeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CombatStyleCloseRange DeepCopy(
            this ICombatStyleCloseRangeGetter item,
            CombatStyleCloseRange.TranslationMask? copyMask = null)
        {
            return ((CombatStyleCloseRangeSetterTranslationCommon)((ICombatStyleCloseRangeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CombatStyleCloseRange DeepCopy(
            this ICombatStyleCloseRangeGetter item,
            out CombatStyleCloseRange.ErrorMask errorMask,
            CombatStyleCloseRange.TranslationMask? copyMask = null)
        {
            return ((CombatStyleCloseRangeSetterTranslationCommon)((ICombatStyleCloseRangeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CombatStyleCloseRange DeepCopy(
            this ICombatStyleCloseRangeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CombatStyleCloseRangeSetterTranslationCommon)((ICombatStyleCloseRangeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICombatStyleCloseRange item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleCloseRangeSetterCommon)((ICombatStyleCloseRangeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum CombatStyleCloseRange_FieldIndex
    {
        Versioning = 0,
        CircleMult = 1,
        FallbackMult = 2,
        FlankDistance = 3,
        StalkTime = 4,
    }
    #endregion

    #region Registration
    public partial class CombatStyleCloseRange_Registration : ILoquiRegistration
    {
        public static readonly CombatStyleCloseRange_Registration Instance = new CombatStyleCloseRange_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 397,
            version: 0);

        public const string GUID = "6bd80eb8-1071-44f3-a309-4b0c6f04ac7d";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(CombatStyleCloseRange.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyleCloseRange.ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyleCloseRange);

        public static readonly Type GetterType = typeof(ICombatStyleCloseRangeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStyleCloseRange);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.CombatStyleCloseRange";

        public const string Name = "CombatStyleCloseRange";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CSCR;
        public static readonly Type BinaryWriteTranslation = typeof(CombatStyleCloseRangeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CombatStyleCloseRangeSetterCommon
    {
        public static readonly CombatStyleCloseRangeSetterCommon Instance = new CombatStyleCloseRangeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICombatStyleCloseRange item)
        {
            ClearPartial();
            item.Versioning = default;
            item.CircleMult = default;
            item.FallbackMult = default;
            item.FlankDistance = default;
            item.StalkTime = default;
        }
        
        #region Mutagen
        public void RemapLinks(ICombatStyleCloseRange obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICombatStyleCloseRange item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.CSCR)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CombatStyleCloseRangeBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CombatStyleCloseRangeCommon
    {
        public static readonly CombatStyleCloseRangeCommon Instance = new CombatStyleCloseRangeCommon();

        public CombatStyleCloseRange.Mask<bool> GetEqualsMask(
            ICombatStyleCloseRangeGetter item,
            ICombatStyleCloseRangeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStyleCloseRange.Mask<bool>(false);
            ((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICombatStyleCloseRangeGetter item,
            ICombatStyleCloseRangeGetter rhs,
            CombatStyleCloseRange.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.CircleMult = item.CircleMult.EqualsWithin(rhs.CircleMult);
            ret.FallbackMult = item.FallbackMult.EqualsWithin(rhs.FallbackMult);
            ret.FlankDistance = item.FlankDistance.EqualsWithin(rhs.FlankDistance);
            ret.StalkTime = item.StalkTime.EqualsWithin(rhs.StalkTime);
        }
        
        public string ToString(
            ICombatStyleCloseRangeGetter item,
            string? name = null,
            CombatStyleCloseRange.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICombatStyleCloseRangeGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyleCloseRange.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CombatStyleCloseRange =>");
            }
            else
            {
                fg.AppendLine($"{name} (CombatStyleCloseRange) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICombatStyleCloseRangeGetter item,
            FileGeneration fg,
            CombatStyleCloseRange.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.CircleMult ?? true)
            {
                fg.AppendItem(item.CircleMult, "CircleMult");
            }
            if (printMask?.FallbackMult ?? true)
            {
                fg.AppendItem(item.FallbackMult, "FallbackMult");
            }
            if (printMask?.FlankDistance ?? true)
            {
                fg.AppendItem(item.FlankDistance, "FlankDistance");
            }
            if (printMask?.StalkTime ?? true)
            {
                fg.AppendItem(item.StalkTime, "StalkTime");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICombatStyleCloseRangeGetter? lhs,
            ICombatStyleCloseRangeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (!lhs.CircleMult.EqualsWithin(rhs.CircleMult)) return false;
            if (!lhs.FallbackMult.EqualsWithin(rhs.FallbackMult)) return false;
            if (!lhs.FlankDistance.EqualsWithin(rhs.FlankDistance)) return false;
            if (!lhs.StalkTime.EqualsWithin(rhs.StalkTime)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ICombatStyleCloseRangeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.CircleMult);
            hash.Add(item.FallbackMult);
            hash.Add(item.FlankDistance);
            hash.Add(item.StalkTime);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CombatStyleCloseRange.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ICombatStyleCloseRangeGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class CombatStyleCloseRangeSetterTranslationCommon
    {
        public static readonly CombatStyleCloseRangeSetterTranslationCommon Instance = new CombatStyleCloseRangeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICombatStyleCloseRange item,
            ICombatStyleCloseRangeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CombatStyleCloseRange_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleCloseRange_FieldIndex.CircleMult) ?? true))
            {
                item.CircleMult = rhs.CircleMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleCloseRange_FieldIndex.FallbackMult) ?? true))
            {
                item.FallbackMult = rhs.FallbackMult;
            }
            if (rhs.Versioning.HasFlag(CombatStyleCloseRange.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)CombatStyleCloseRange_FieldIndex.FlankDistance) ?? true))
            {
                item.FlankDistance = rhs.FlankDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleCloseRange_FieldIndex.StalkTime) ?? true))
            {
                item.StalkTime = rhs.StalkTime;
            }
        }
        
        #endregion
        
        public CombatStyleCloseRange DeepCopy(
            ICombatStyleCloseRangeGetter item,
            CombatStyleCloseRange.TranslationMask? copyMask = null)
        {
            CombatStyleCloseRange ret = (CombatStyleCloseRange)((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleCloseRangeSetterTranslationCommon)((ICombatStyleCloseRangeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CombatStyleCloseRange DeepCopy(
            ICombatStyleCloseRangeGetter item,
            out CombatStyleCloseRange.ErrorMask errorMask,
            CombatStyleCloseRange.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CombatStyleCloseRange ret = (CombatStyleCloseRange)((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleCloseRangeSetterTranslationCommon)((ICombatStyleCloseRangeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CombatStyleCloseRange.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CombatStyleCloseRange DeepCopy(
            ICombatStyleCloseRangeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CombatStyleCloseRange ret = (CombatStyleCloseRange)((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleCloseRangeSetterTranslationCommon)((ICombatStyleCloseRangeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class CombatStyleCloseRange
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleCloseRange_Registration.Instance;
        public static CombatStyleCloseRange_Registration Registration => CombatStyleCloseRange_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleCloseRangeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CombatStyleCloseRangeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleCloseRangeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleCloseRangeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICombatStyleCloseRangeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICombatStyleCloseRangeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CombatStyleCloseRangeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CombatStyleCloseRangeBinaryWriteTranslation Instance = new CombatStyleCloseRangeBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICombatStyleCloseRangeGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CircleMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FallbackMult);
            if (!item.Versioning.HasFlag(CombatStyleCloseRange.VersioningBreaks.Break0))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FlankDistance);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.StalkTime);
            }
        }

        public void Write(
            MutagenWriter writer,
            ICombatStyleCloseRangeGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.CSCR),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICombatStyleCloseRangeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CombatStyleCloseRangeBinaryCreateTranslation
    {
        public readonly static CombatStyleCloseRangeBinaryCreateTranslation Instance = new CombatStyleCloseRangeBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICombatStyleCloseRange item,
            MutagenFrame frame)
        {
            item.CircleMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FallbackMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= CombatStyleCloseRange.VersioningBreaks.Break0;
                return;
            }
            item.FlankDistance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.StalkTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class CombatStyleCloseRangeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICombatStyleCloseRangeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleCloseRangeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CombatStyleCloseRangeBinaryOverlay :
        BinaryOverlay,
        ICombatStyleCloseRangeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleCloseRange_Registration.Instance;
        public static CombatStyleCloseRange_Registration Registration => CombatStyleCloseRange_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleCloseRangeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleCloseRangeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleCloseRangeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICombatStyleCloseRangeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICombatStyleCloseRangeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleCloseRangeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleCloseRangeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public CombatStyleCloseRange.VersioningBreaks Versioning { get; private set; }
        public Single CircleMult => _data.Slice(0x0, 0x4).Float();
        public Single FallbackMult => _data.Slice(0x4, 0x4).Float();
        public Single FlankDistance => _data.Slice(0x8, 0x4).Float();
        public Single StalkTime => _data.Slice(0xC, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CombatStyleCloseRangeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CombatStyleCloseRangeBinaryOverlay CombatStyleCloseRangeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CombatStyleCloseRangeBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0x8)
            {
                ret.Versioning |= CombatStyleCloseRange.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CombatStyleCloseRangeBinaryOverlay CombatStyleCloseRangeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CombatStyleCloseRangeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CombatStyleCloseRangeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICombatStyleCloseRangeGetter rhs)) return false;
            return ((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICombatStyleCloseRangeGetter? obj)
        {
            return ((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CombatStyleCloseRangeCommon)((ICombatStyleCloseRangeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

