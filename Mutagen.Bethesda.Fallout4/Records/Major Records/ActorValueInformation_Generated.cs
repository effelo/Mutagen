/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ActorValueInformation :
        Fallout4MajorRecord,
        IActorValueInformationInternal,
        ILoquiObjectSetter<ActorValueInformation>,
        IEquatable<IActorValueInformationGetter>
    {
        #region Ctor
        protected ActorValueInformation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IActorValueInformationGetter.Name => this.Name;
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IActorValueInformationGetter.Description => this.Description;
        #endregion
        #region Abbreviation
        public String? Abbreviation { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IActorValueInformationGetter.Abbreviation => this.Abbreviation;
        #endregion
        #region CNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _CNAM;
        public MemorySlice<Byte>? CNAM
        {
            get => this._CNAM;
            set => this._CNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IActorValueInformationGetter.CNAM => this.CNAM;
        #endregion
        #region Skill
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValueSkill? _Skill;
        public ActorValueSkill? Skill
        {
            get => _Skill;
            set => _Skill = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IActorValueSkillGetter? IActorValueInformationGetter.Skill => this.Skill;
        #endregion
        #region PerkTree
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ActorValuePerkNode> _PerkTree = new ExtendedList<ActorValuePerkNode>();
        public ExtendedList<ActorValuePerkNode> PerkTree
        {
            get => this._PerkTree;
            protected set => this._PerkTree = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IActorValuePerkNodeGetter> IActorValueInformationGetter.PerkTree => _PerkTree;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ActorValueInformationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IActorValueInformationGetter rhs)) return false;
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IActorValueInformationGetter? obj)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.Abbreviation = initialValue;
                this.CNAM = initialValue;
                this.Skill = new MaskItem<TItem, ActorValueSkill.Mask<TItem>?>(initialValue, new ActorValueSkill.Mask<TItem>(initialValue));
                this.PerkTree = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ActorValuePerkNode.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ActorValuePerkNode.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem Description,
                TItem Abbreviation,
                TItem CNAM,
                TItem Skill,
                TItem PerkTree)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Description = Description;
                this.Abbreviation = Abbreviation;
                this.CNAM = CNAM;
                this.Skill = new MaskItem<TItem, ActorValueSkill.Mask<TItem>?>(Skill, new ActorValueSkill.Mask<TItem>(Skill));
                this.PerkTree = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ActorValuePerkNode.Mask<TItem>?>>?>(PerkTree, Enumerable.Empty<MaskItemIndexed<TItem, ActorValuePerkNode.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public TItem Abbreviation;
            public TItem CNAM;
            public MaskItem<TItem, ActorValueSkill.Mask<TItem>?>? Skill { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ActorValuePerkNode.Mask<TItem>?>>?>? PerkTree;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Abbreviation, rhs.Abbreviation)) return false;
                if (!object.Equals(this.CNAM, rhs.CNAM)) return false;
                if (!object.Equals(this.Skill, rhs.Skill)) return false;
                if (!object.Equals(this.PerkTree, rhs.PerkTree)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.Abbreviation);
                hash.Add(this.CNAM);
                hash.Add(this.Skill);
                hash.Add(this.PerkTree);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Abbreviation)) return false;
                if (!eval(this.CNAM)) return false;
                if (Skill != null)
                {
                    if (!eval(this.Skill.Overall)) return false;
                    if (this.Skill.Specific != null && !this.Skill.Specific.All(eval)) return false;
                }
                if (this.PerkTree != null)
                {
                    if (!eval(this.PerkTree.Overall)) return false;
                    if (this.PerkTree.Specific != null)
                    {
                        foreach (var item in this.PerkTree.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.Abbreviation)) return true;
                if (eval(this.CNAM)) return true;
                if (Skill != null)
                {
                    if (eval(this.Skill.Overall)) return true;
                    if (this.Skill.Specific != null && this.Skill.Specific.Any(eval)) return true;
                }
                if (this.PerkTree != null)
                {
                    if (eval(this.PerkTree.Overall)) return true;
                    if (this.PerkTree.Specific != null)
                    {
                        foreach (var item in this.PerkTree.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ActorValueInformation.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                obj.Abbreviation = eval(this.Abbreviation);
                obj.CNAM = eval(this.CNAM);
                obj.Skill = this.Skill == null ? null : new MaskItem<R, ActorValueSkill.Mask<R>?>(eval(this.Skill.Overall), this.Skill.Specific?.Translate(eval));
                if (PerkTree != null)
                {
                    obj.PerkTree = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ActorValuePerkNode.Mask<R>?>>?>(eval(this.PerkTree.Overall), Enumerable.Empty<MaskItemIndexed<R, ActorValuePerkNode.Mask<R>?>>());
                    if (PerkTree.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ActorValuePerkNode.Mask<R>?>>();
                        obj.PerkTree.Specific = l;
                        foreach (var item in PerkTree.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ActorValuePerkNode.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ActorValuePerkNode.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ActorValueInformation.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ActorValueInformation.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ActorValueInformation.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.Abbreviation ?? true)
                    {
                        fg.AppendItem(Abbreviation, "Abbreviation");
                    }
                    if (printMask?.CNAM ?? true)
                    {
                        fg.AppendItem(CNAM, "CNAM");
                    }
                    if (printMask?.Skill?.Overall ?? true)
                    {
                        Skill?.ToString(fg);
                    }
                    if ((printMask?.PerkTree?.Overall ?? true)
                        && PerkTree.TryGet(out var PerkTreeItem))
                    {
                        fg.AppendLine("PerkTree =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PerkTreeItem.Overall);
                            if (PerkTreeItem.Specific != null)
                            {
                                foreach (var subItem in PerkTreeItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public Exception? Abbreviation;
            public Exception? CNAM;
            public MaskItem<Exception?, ActorValueSkill.ErrorMask?>? Skill;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorValuePerkNode.ErrorMask?>>?>? PerkTree;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ActorValueInformation_FieldIndex enu = (ActorValueInformation_FieldIndex)index;
                switch (enu)
                {
                    case ActorValueInformation_FieldIndex.Name:
                        return Name;
                    case ActorValueInformation_FieldIndex.Description:
                        return Description;
                    case ActorValueInformation_FieldIndex.Abbreviation:
                        return Abbreviation;
                    case ActorValueInformation_FieldIndex.CNAM:
                        return CNAM;
                    case ActorValueInformation_FieldIndex.Skill:
                        return Skill;
                    case ActorValueInformation_FieldIndex.PerkTree:
                        return PerkTree;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ActorValueInformation_FieldIndex enu = (ActorValueInformation_FieldIndex)index;
                switch (enu)
                {
                    case ActorValueInformation_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ActorValueInformation_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case ActorValueInformation_FieldIndex.Abbreviation:
                        this.Abbreviation = ex;
                        break;
                    case ActorValueInformation_FieldIndex.CNAM:
                        this.CNAM = ex;
                        break;
                    case ActorValueInformation_FieldIndex.Skill:
                        this.Skill = new MaskItem<Exception?, ActorValueSkill.ErrorMask?>(ex, null);
                        break;
                    case ActorValueInformation_FieldIndex.PerkTree:
                        this.PerkTree = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorValuePerkNode.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ActorValueInformation_FieldIndex enu = (ActorValueInformation_FieldIndex)index;
                switch (enu)
                {
                    case ActorValueInformation_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.Abbreviation:
                        this.Abbreviation = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.CNAM:
                        this.CNAM = (Exception?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.Skill:
                        this.Skill = (MaskItem<Exception?, ActorValueSkill.ErrorMask?>?)obj;
                        break;
                    case ActorValueInformation_FieldIndex.PerkTree:
                        this.PerkTree = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorValuePerkNode.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (Abbreviation != null) return true;
                if (CNAM != null) return true;
                if (Skill != null) return true;
                if (PerkTree != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Description, "Description");
                fg.AppendItem(Abbreviation, "Abbreviation");
                fg.AppendItem(CNAM, "CNAM");
                Skill?.ToString(fg);
                if (PerkTree.TryGet(out var PerkTreeItem))
                {
                    fg.AppendLine("PerkTree =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PerkTreeItem.Overall);
                        if (PerkTreeItem.Specific != null)
                        {
                            foreach (var subItem in PerkTreeItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Abbreviation = this.Abbreviation.Combine(rhs.Abbreviation);
                ret.CNAM = this.CNAM.Combine(rhs.CNAM);
                ret.Skill = this.Skill.Combine(rhs.Skill, (l, r) => l.Combine(r));
                ret.PerkTree = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ActorValuePerkNode.ErrorMask?>>?>(ExceptionExt.Combine(this.PerkTree?.Overall, rhs.PerkTree?.Overall), ExceptionExt.Combine(this.PerkTree?.Specific, rhs.PerkTree?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool Abbreviation;
            public bool CNAM;
            public ActorValueSkill.TranslationMask? Skill;
            public ActorValuePerkNode.TranslationMask? PerkTree;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Abbreviation = defaultOn;
                this.CNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((Abbreviation, null));
                ret.Add((CNAM, null));
                ret.Add((Skill != null ? Skill.OnOverall : DefaultOn, Skill?.GetCrystal()));
                ret.Add((PerkTree == null ? DefaultOn : !PerkTree.GetCrystal().CopyNothing, PerkTree?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ActorValueInformation_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ActorValueInformationCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ActorValueInformationSetterCommon.Instance.RemapLinks(this, mapping);
        public ActorValueInformation(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private ActorValueInformation(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal ActorValueInformation(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ActorValueInformation(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public ActorValueInformation(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ActorValueInformationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ActorValueInformationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static ActorValueInformation CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ActorValueInformation();
            ((ActorValueInformationSetterCommon)((IActorValueInformationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ActorValueInformation item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ActorValueInformationSetterCommon)((IActorValueInformationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ActorValueInformation GetNew()
        {
            return new ActorValueInformation();
        }

    }
    #endregion

    #region Interface
    public partial interface IActorValueInformation :
        IActorValueInformationGetter,
        IFallout4MajorRecord,
        ITranslatedNamed,
        ILoquiObjectSetter<IActorValueInformationInternal>,
        IFormLinkContainer
    {
        new TranslatedString? Name { get; set; }
        new TranslatedString? Description { get; set; }
        new String? Abbreviation { get; set; }
        new MemorySlice<Byte>? CNAM { get; set; }
        new ActorValueSkill? Skill { get; set; }
        new ExtendedList<ActorValuePerkNode> PerkTree { get; }
    }

    public partial interface IActorValueInformationInternal :
        IFallout4MajorRecordInternal,
        IActorValueInformation,
        IActorValueInformationGetter
    {
    }

    public partial interface IActorValueInformationGetter :
        IFallout4MajorRecordGetter,
        ITranslatedNamedGetter,
        ILoquiObject<IActorValueInformationGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => ActorValueInformation_Registration.Instance;
        ITranslatedStringGetter? Name { get; }
        ITranslatedStringGetter? Description { get; }
        String? Abbreviation { get; }
        ReadOnlyMemorySlice<Byte>? CNAM { get; }
        IActorValueSkillGetter? Skill { get; }
        IReadOnlyList<IActorValuePerkNodeGetter> PerkTree { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ActorValueInformationMixIn
    {
        public static void Clear(this IActorValueInformationInternal item)
        {
            ((ActorValueInformationSetterCommon)((IActorValueInformationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ActorValueInformation.Mask<bool> GetEqualsMask(
            this IActorValueInformationGetter item,
            IActorValueInformationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IActorValueInformationGetter item,
            string? name = null,
            ActorValueInformation.Mask<bool>? printMask = null)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IActorValueInformationGetter item,
            FileGeneration fg,
            string? name = null,
            ActorValueInformation.Mask<bool>? printMask = null)
        {
            ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IActorValueInformationGetter item,
            IActorValueInformationGetter rhs)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IActorValueInformationInternal lhs,
            IActorValueInformationGetter rhs,
            out ActorValueInformation.ErrorMask errorMask,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ActorValueInformation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IActorValueInformationInternal lhs,
            IActorValueInformationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ActorValueInformation DeepCopy(
            this IActorValueInformationGetter item,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            return ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ActorValueInformation DeepCopy(
            this IActorValueInformationGetter item,
            out ActorValueInformation.ErrorMask errorMask,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            return ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ActorValueInformation DeepCopy(
            this IActorValueInformationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ActorValueInformation Duplicate(
            this IActorValueInformationGetter item,
            FormKey formKey,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IActorValueInformationInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ActorValueInformationSetterCommon)((IActorValueInformationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ActorValueInformation_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        Description = 7,
        Abbreviation = 8,
        CNAM = 9,
        Skill = 10,
        PerkTree = 11,
    }
    #endregion

    #region Registration
    public partial class ActorValueInformation_Registration : ILoquiRegistration
    {
        public static readonly ActorValueInformation_Registration Instance = new ActorValueInformation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 434,
            version: 0);

        public const string GUID = "18758352-21f6-4d31-8846-afe6d29f48f8";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(ActorValueInformation.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ActorValueInformation.ErrorMask);

        public static readonly Type ClassType = typeof(ActorValueInformation);

        public static readonly Type GetterType = typeof(IActorValueInformationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IActorValueInformation);

        public static readonly Type? InternalSetterType = typeof(IActorValueInformationInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.ActorValueInformation";

        public const string Name = "ActorValueInformation";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AVIF;
        public static readonly Type BinaryWriteTranslation = typeof(ActorValueInformationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ActorValueInformationSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ActorValueInformationSetterCommon Instance = new ActorValueInformationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IActorValueInformationInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description = default;
            item.Abbreviation = default;
            item.CNAM = default;
            item.Skill = null;
            item.PerkTree.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IActorValueInformationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IActorValueInformationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IActorValueInformation obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.PerkTree.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IActorValueInformationInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IActorValueInformationInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ActorValueInformationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ActorValueInformationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ActorValueInformation)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ActorValueInformation)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ActorValueInformationCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ActorValueInformationCommon Instance = new ActorValueInformationCommon();

        public ActorValueInformation.Mask<bool> GetEqualsMask(
            IActorValueInformationGetter item,
            IActorValueInformationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ActorValueInformation.Mask<bool>(false);
            ((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IActorValueInformationGetter item,
            IActorValueInformationGetter rhs,
            ActorValueInformation.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Abbreviation = string.Equals(item.Abbreviation, rhs.Abbreviation);
            ret.CNAM = MemorySliceExt.Equal(item.CNAM, rhs.CNAM);
            ret.Skill = EqualsMaskHelper.EqualsHelper(
                item.Skill,
                rhs.Skill,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PerkTree = item.PerkTree.CollectionEqualsHelper(
                rhs.PerkTree,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IActorValueInformationGetter item,
            string? name = null,
            ActorValueInformation.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IActorValueInformationGetter item,
            FileGeneration fg,
            string? name = null,
            ActorValueInformation.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ActorValueInformation =>");
            }
            else
            {
                fg.AppendLine($"{name} (ActorValueInformation) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IActorValueInformationGetter item,
            FileGeneration fg,
            ActorValueInformation.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.Abbreviation ?? true)
                && item.Abbreviation.TryGet(out var AbbreviationItem))
            {
                fg.AppendItem(AbbreviationItem, "Abbreviation");
            }
            if ((printMask?.CNAM ?? true)
                && item.CNAM.TryGet(out var CNAMItem))
            {
                fg.AppendLine($"CNAM => {SpanExt.ToHexString(CNAMItem)}");
            }
            if ((printMask?.Skill?.Overall ?? true)
                && item.Skill.TryGet(out var SkillItem))
            {
                SkillItem?.ToString(fg, "Skill");
            }
            if (printMask?.PerkTree?.Overall ?? true)
            {
                fg.AppendLine("PerkTree =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.PerkTree)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static ActorValueInformation_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (ActorValueInformation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new ActorValueInformation_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ActorValueInformation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ActorValueInformation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IActorValueInformationGetter? lhs,
            IActorValueInformationGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Description, rhs.Description)) return false;
            if (!string.Equals(lhs.Abbreviation, rhs.Abbreviation)) return false;
            if (!MemorySliceExt.Equal(lhs.CNAM, rhs.CNAM)) return false;
            if (!object.Equals(lhs.Skill, rhs.Skill)) return false;
            if (!lhs.PerkTree.SequenceEqualNullable(rhs.PerkTree)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IActorValueInformationGetter?)lhs,
                rhs: rhs as IActorValueInformationGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IActorValueInformationGetter?)lhs,
                rhs: rhs as IActorValueInformationGetter);
        }
        
        public virtual int GetHashCode(IActorValueInformationGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                hash.Add(Descriptionitem);
            }
            if (item.Abbreviation.TryGet(out var Abbreviationitem))
            {
                hash.Add(Abbreviationitem);
            }
            if (item.CNAM.TryGet(out var CNAMItem))
            {
                hash.Add(CNAMItem);
            }
            if (item.Skill.TryGet(out var Skillitem))
            {
                hash.Add(Skillitem);
            }
            hash.Add(item.PerkTree);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IActorValueInformationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IActorValueInformationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ActorValueInformation.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IActorValueInformationGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.PerkTree.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public ActorValueInformation Duplicate(
            IActorValueInformationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ActorValueInformation(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IActorValueInformation)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IActorValueInformation)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ActorValueInformationSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ActorValueInformationSetterTranslationCommon Instance = new ActorValueInformationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IActorValueInformationInternal item,
            IActorValueInformationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IActorValueInformation item,
            IActorValueInformationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Abbreviation) ?? true))
            {
                item.Abbreviation = rhs.Abbreviation;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.CNAM) ?? true))
            {
                if(rhs.CNAM.TryGet(out var CNAMrhs))
                {
                    item.CNAM = CNAMrhs.ToArray();
                }
                else
                {
                    item.CNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.Skill) ?? true))
            {
                errorMask?.PushIndex((int)ActorValueInformation_FieldIndex.Skill);
                try
                {
                    if(rhs.Skill.TryGet(out var rhsSkill))
                    {
                        item.Skill = rhsSkill.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ActorValueInformation_FieldIndex.Skill));
                    }
                    else
                    {
                        item.Skill = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValueInformation_FieldIndex.PerkTree) ?? true))
            {
                errorMask?.PushIndex((int)ActorValueInformation_FieldIndex.PerkTree);
                try
                {
                    item.PerkTree.SetTo(
                        rhs.PerkTree
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueInformationInternal)item,
                rhs: (IActorValueInformationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueInformation)item,
                rhs: (IActorValueInformationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueInformationInternal)item,
                rhs: (IActorValueInformationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IActorValueInformation)item,
                rhs: (IActorValueInformationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ActorValueInformation DeepCopy(
            IActorValueInformationGetter item,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            ActorValueInformation ret = (ActorValueInformation)((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).GetNew();
            ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ActorValueInformation DeepCopy(
            IActorValueInformationGetter item,
            out ActorValueInformation.ErrorMask errorMask,
            ActorValueInformation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ActorValueInformation ret = (ActorValueInformation)((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).GetNew();
            ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ActorValueInformation.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ActorValueInformation DeepCopy(
            IActorValueInformationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ActorValueInformation ret = (ActorValueInformation)((ActorValueInformationCommon)((IActorValueInformationGetter)item).CommonInstance()!).GetNew();
            ((ActorValueInformationSetterTranslationCommon)((IActorValueInformationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ActorValueInformation
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ActorValueInformation_Registration.Instance;
        public new static ActorValueInformation_Registration Registration => ActorValueInformation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ActorValueInformationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ActorValueInformationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ActorValueInformationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ActorValueInformationBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ActorValueInformationBinaryWriteTranslation Instance = new ActorValueInformationBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IActorValueInformationGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Abbreviation,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM));
            if (item.Skill.TryGet(out var SkillItem))
            {
                ((ActorValueSkillBinaryWriteTranslation)((IBinaryItem)SkillItem).BinaryWriteTranslator).Write(
                    item: SkillItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IActorValuePerkNodeGetter>.Instance.Write(
                writer: writer,
                items: item.PerkTree,
                transl: (MutagenWriter subWriter, IActorValuePerkNodeGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((ActorValuePerkNodeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IActorValueInformationGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.AVIF),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IActorValueInformationGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IActorValueInformationGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IActorValueInformationGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ActorValueInformationBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static ActorValueInformationBinaryCreateTranslation Instance = new ActorValueInformationBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.AVIF;
        public static void FillBinaryStructs(
            IActorValueInformationInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IActorValueInformationInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)ActorValueInformation_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)ActorValueInformation_FieldIndex.Description;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Abbreviation = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)ActorValueInformation_FieldIndex.Abbreviation;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)ActorValueInformation_FieldIndex.CNAM;
                }
                case RecordTypeInts.AVSK:
                {
                    item.Skill = Mutagen.Bethesda.Fallout4.ActorValueSkill.CreateFromBinary(frame: frame);
                    return (int)ActorValueInformation_FieldIndex.Skill;
                }
                case RecordTypeInts.PNAM:
                {
                    item.PerkTree.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValuePerkNode>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.PNAM,
                            recordTypeConverter: recordTypeConverter,
                            transl: ActorValuePerkNode.TryCreateFromBinary));
                    return (int)ActorValueInformation_FieldIndex.PerkTree;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ActorValueInformationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ActorValueInformationBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IActorValueInformationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ActorValueInformation_Registration.Instance;
        public new static ActorValueInformation_Registration Registration => ActorValueInformation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ActorValueInformationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ActorValueInformationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ActorValueInformationCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ActorValueInformationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ActorValueInformationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Abbreviation
        private int? _AbbreviationLocation;
        public String? Abbreviation => _AbbreviationLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _AbbreviationLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region CNAM
        private int? _CNAMLocation;
        public ReadOnlyMemorySlice<Byte>? CNAM => _CNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _CNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Skill
        private RangeInt32? _SkillLocation;
        public IActorValueSkillGetter? Skill => _SkillLocation.HasValue ? ActorValueSkillBinaryOverlay.ActorValueSkillFactory(new OverlayStream(_data.Slice(_SkillLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IReadOnlyList<IActorValuePerkNodeGetter> PerkTree { get; private set; } = ListExt.Empty<ActorValuePerkNodeBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ActorValueInformationBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ActorValueInformationBinaryOverlay ActorValueInformationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new ActorValueInformationBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ActorValueInformationBinaryOverlay ActorValueInformationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ActorValueInformationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.Description;
                }
                case RecordTypeInts.ANAM:
                {
                    _AbbreviationLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.Abbreviation;
                }
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = (stream.Position - offset);
                    return (int)ActorValueInformation_FieldIndex.CNAM;
                }
                case RecordTypeInts.AVSK:
                {
                    _SkillLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)ActorValueInformation_FieldIndex.Skill;
                }
                case RecordTypeInts.PNAM:
                {
                    this.PerkTree = this.ParseRepeatedTypelessSubrecord<ActorValuePerkNodeBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: RecordTypes.PNAM,
                        factory:  ActorValuePerkNodeBinaryOverlay.ActorValuePerkNodeFactory);
                    return (int)ActorValueInformation_FieldIndex.PerkTree;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ActorValueInformationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IActorValueInformationGetter rhs)) return false;
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IActorValueInformationGetter? obj)
        {
            return ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ActorValueInformationCommon)((IActorValueInformationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

