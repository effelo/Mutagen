/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ActorValuePerkNode :
        IActorValuePerkNode,
        ILoquiObjectSetter<ActorValuePerkNode>,
        IEquatable<IActorValuePerkNodeGetter>
    {
        #region Ctor
        public ActorValuePerkNode()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Perk
        public FormLink<IPerkGetter> Perk { get; set; } = new FormLink<IPerkGetter>();
        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNAM;
        public MemorySlice<Byte>? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IActorValuePerkNodeGetter.FNAM => this.FNAM;
        #endregion
        #region PerkGridX
        public UInt32? PerkGridX { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IActorValuePerkNodeGetter.PerkGridX => this.PerkGridX;
        #endregion
        #region PerkGridY
        public UInt32? PerkGridY { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IActorValuePerkNodeGetter.PerkGridY => this.PerkGridY;
        #endregion
        #region HorizontalPosition
        public Single? HorizontalPosition { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IActorValuePerkNodeGetter.HorizontalPosition => this.HorizontalPosition;
        #endregion
        #region VerticalPosition
        public Single? VerticalPosition { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IActorValuePerkNodeGetter.VerticalPosition => this.VerticalPosition;
        #endregion
        #region AssociatedSkill
        public FormLinkNullable<IActorValueInformationGetter> AssociatedSkill { get; set; } = new FormLinkNullable<IActorValueInformationGetter>();
        #endregion
        #region ConnectionLineToIndices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<UInt32> _ConnectionLineToIndices = new ExtendedList<UInt32>();
        public ExtendedList<UInt32> ConnectionLineToIndices
        {
            get => this._ConnectionLineToIndices;
            protected set => this._ConnectionLineToIndices = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<UInt32> IActorValuePerkNodeGetter.ConnectionLineToIndices => _ConnectionLineToIndices;
        #endregion

        #endregion
        #region Index
        public UInt32? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IActorValuePerkNodeGetter.Index => this.Index;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ActorValuePerkNodeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IActorValuePerkNodeGetter rhs)) return false;
            return ((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IActorValuePerkNodeGetter? obj)
        {
            return ((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Perk = initialValue;
                this.FNAM = initialValue;
                this.PerkGridX = initialValue;
                this.PerkGridY = initialValue;
                this.HorizontalPosition = initialValue;
                this.VerticalPosition = initialValue;
                this.AssociatedSkill = initialValue;
                this.ConnectionLineToIndices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Index = initialValue;
            }

            public Mask(
                TItem Perk,
                TItem FNAM,
                TItem PerkGridX,
                TItem PerkGridY,
                TItem HorizontalPosition,
                TItem VerticalPosition,
                TItem AssociatedSkill,
                TItem ConnectionLineToIndices,
                TItem Index)
            {
                this.Perk = Perk;
                this.FNAM = FNAM;
                this.PerkGridX = PerkGridX;
                this.PerkGridY = PerkGridY;
                this.HorizontalPosition = HorizontalPosition;
                this.VerticalPosition = VerticalPosition;
                this.AssociatedSkill = AssociatedSkill;
                this.ConnectionLineToIndices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ConnectionLineToIndices, Enumerable.Empty<(int Index, TItem Value)>());
                this.Index = Index;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Perk;
            public TItem FNAM;
            public TItem PerkGridX;
            public TItem PerkGridY;
            public TItem HorizontalPosition;
            public TItem VerticalPosition;
            public TItem AssociatedSkill;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ConnectionLineToIndices;
            public TItem Index;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Perk, rhs.Perk)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.PerkGridX, rhs.PerkGridX)) return false;
                if (!object.Equals(this.PerkGridY, rhs.PerkGridY)) return false;
                if (!object.Equals(this.HorizontalPosition, rhs.HorizontalPosition)) return false;
                if (!object.Equals(this.VerticalPosition, rhs.VerticalPosition)) return false;
                if (!object.Equals(this.AssociatedSkill, rhs.AssociatedSkill)) return false;
                if (!object.Equals(this.ConnectionLineToIndices, rhs.ConnectionLineToIndices)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Perk);
                hash.Add(this.FNAM);
                hash.Add(this.PerkGridX);
                hash.Add(this.PerkGridY);
                hash.Add(this.HorizontalPosition);
                hash.Add(this.VerticalPosition);
                hash.Add(this.AssociatedSkill);
                hash.Add(this.ConnectionLineToIndices);
                hash.Add(this.Index);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Perk)) return false;
                if (!eval(this.FNAM)) return false;
                if (!eval(this.PerkGridX)) return false;
                if (!eval(this.PerkGridY)) return false;
                if (!eval(this.HorizontalPosition)) return false;
                if (!eval(this.VerticalPosition)) return false;
                if (!eval(this.AssociatedSkill)) return false;
                if (this.ConnectionLineToIndices != null)
                {
                    if (!eval(this.ConnectionLineToIndices.Overall)) return false;
                    if (this.ConnectionLineToIndices.Specific != null)
                    {
                        foreach (var item in this.ConnectionLineToIndices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Index)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Perk)) return true;
                if (eval(this.FNAM)) return true;
                if (eval(this.PerkGridX)) return true;
                if (eval(this.PerkGridY)) return true;
                if (eval(this.HorizontalPosition)) return true;
                if (eval(this.VerticalPosition)) return true;
                if (eval(this.AssociatedSkill)) return true;
                if (this.ConnectionLineToIndices != null)
                {
                    if (eval(this.ConnectionLineToIndices.Overall)) return true;
                    if (this.ConnectionLineToIndices.Specific != null)
                    {
                        foreach (var item in this.ConnectionLineToIndices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Index)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ActorValuePerkNode.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Perk = eval(this.Perk);
                obj.FNAM = eval(this.FNAM);
                obj.PerkGridX = eval(this.PerkGridX);
                obj.PerkGridY = eval(this.PerkGridY);
                obj.HorizontalPosition = eval(this.HorizontalPosition);
                obj.VerticalPosition = eval(this.VerticalPosition);
                obj.AssociatedSkill = eval(this.AssociatedSkill);
                if (ConnectionLineToIndices != null)
                {
                    obj.ConnectionLineToIndices = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ConnectionLineToIndices.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ConnectionLineToIndices.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ConnectionLineToIndices.Specific = l;
                        foreach (var item in ConnectionLineToIndices.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Index = eval(this.Index);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ActorValuePerkNode.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ActorValuePerkNode.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ActorValuePerkNode.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Perk ?? true)
                    {
                        fg.AppendItem(Perk, "Perk");
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        fg.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.PerkGridX ?? true)
                    {
                        fg.AppendItem(PerkGridX, "PerkGridX");
                    }
                    if (printMask?.PerkGridY ?? true)
                    {
                        fg.AppendItem(PerkGridY, "PerkGridY");
                    }
                    if (printMask?.HorizontalPosition ?? true)
                    {
                        fg.AppendItem(HorizontalPosition, "HorizontalPosition");
                    }
                    if (printMask?.VerticalPosition ?? true)
                    {
                        fg.AppendItem(VerticalPosition, "VerticalPosition");
                    }
                    if (printMask?.AssociatedSkill ?? true)
                    {
                        fg.AppendItem(AssociatedSkill, "AssociatedSkill");
                    }
                    if ((printMask?.ConnectionLineToIndices?.Overall ?? true)
                        && ConnectionLineToIndices.TryGet(out var ConnectionLineToIndicesItem))
                    {
                        fg.AppendLine("ConnectionLineToIndices =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConnectionLineToIndicesItem.Overall);
                            if (ConnectionLineToIndicesItem.Specific != null)
                            {
                                foreach (var subItem in ConnectionLineToIndicesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Index ?? true)
                    {
                        fg.AppendItem(Index, "Index");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Perk;
            public Exception? FNAM;
            public Exception? PerkGridX;
            public Exception? PerkGridY;
            public Exception? HorizontalPosition;
            public Exception? VerticalPosition;
            public Exception? AssociatedSkill;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ConnectionLineToIndices;
            public Exception? Index;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ActorValuePerkNode_FieldIndex enu = (ActorValuePerkNode_FieldIndex)index;
                switch (enu)
                {
                    case ActorValuePerkNode_FieldIndex.Perk:
                        return Perk;
                    case ActorValuePerkNode_FieldIndex.FNAM:
                        return FNAM;
                    case ActorValuePerkNode_FieldIndex.PerkGridX:
                        return PerkGridX;
                    case ActorValuePerkNode_FieldIndex.PerkGridY:
                        return PerkGridY;
                    case ActorValuePerkNode_FieldIndex.HorizontalPosition:
                        return HorizontalPosition;
                    case ActorValuePerkNode_FieldIndex.VerticalPosition:
                        return VerticalPosition;
                    case ActorValuePerkNode_FieldIndex.AssociatedSkill:
                        return AssociatedSkill;
                    case ActorValuePerkNode_FieldIndex.ConnectionLineToIndices:
                        return ConnectionLineToIndices;
                    case ActorValuePerkNode_FieldIndex.Index:
                        return Index;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ActorValuePerkNode_FieldIndex enu = (ActorValuePerkNode_FieldIndex)index;
                switch (enu)
                {
                    case ActorValuePerkNode_FieldIndex.Perk:
                        this.Perk = ex;
                        break;
                    case ActorValuePerkNode_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case ActorValuePerkNode_FieldIndex.PerkGridX:
                        this.PerkGridX = ex;
                        break;
                    case ActorValuePerkNode_FieldIndex.PerkGridY:
                        this.PerkGridY = ex;
                        break;
                    case ActorValuePerkNode_FieldIndex.HorizontalPosition:
                        this.HorizontalPosition = ex;
                        break;
                    case ActorValuePerkNode_FieldIndex.VerticalPosition:
                        this.VerticalPosition = ex;
                        break;
                    case ActorValuePerkNode_FieldIndex.AssociatedSkill:
                        this.AssociatedSkill = ex;
                        break;
                    case ActorValuePerkNode_FieldIndex.ConnectionLineToIndices:
                        this.ConnectionLineToIndices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ActorValuePerkNode_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ActorValuePerkNode_FieldIndex enu = (ActorValuePerkNode_FieldIndex)index;
                switch (enu)
                {
                    case ActorValuePerkNode_FieldIndex.Perk:
                        this.Perk = (Exception?)obj;
                        break;
                    case ActorValuePerkNode_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case ActorValuePerkNode_FieldIndex.PerkGridX:
                        this.PerkGridX = (Exception?)obj;
                        break;
                    case ActorValuePerkNode_FieldIndex.PerkGridY:
                        this.PerkGridY = (Exception?)obj;
                        break;
                    case ActorValuePerkNode_FieldIndex.HorizontalPosition:
                        this.HorizontalPosition = (Exception?)obj;
                        break;
                    case ActorValuePerkNode_FieldIndex.VerticalPosition:
                        this.VerticalPosition = (Exception?)obj;
                        break;
                    case ActorValuePerkNode_FieldIndex.AssociatedSkill:
                        this.AssociatedSkill = (Exception?)obj;
                        break;
                    case ActorValuePerkNode_FieldIndex.ConnectionLineToIndices:
                        this.ConnectionLineToIndices = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ActorValuePerkNode_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Perk != null) return true;
                if (FNAM != null) return true;
                if (PerkGridX != null) return true;
                if (PerkGridY != null) return true;
                if (HorizontalPosition != null) return true;
                if (VerticalPosition != null) return true;
                if (AssociatedSkill != null) return true;
                if (ConnectionLineToIndices != null) return true;
                if (Index != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Perk, "Perk");
                fg.AppendItem(FNAM, "FNAM");
                fg.AppendItem(PerkGridX, "PerkGridX");
                fg.AppendItem(PerkGridY, "PerkGridY");
                fg.AppendItem(HorizontalPosition, "HorizontalPosition");
                fg.AppendItem(VerticalPosition, "VerticalPosition");
                fg.AppendItem(AssociatedSkill, "AssociatedSkill");
                if (ConnectionLineToIndices.TryGet(out var ConnectionLineToIndicesItem))
                {
                    fg.AppendLine("ConnectionLineToIndices =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConnectionLineToIndicesItem.Overall);
                        if (ConnectionLineToIndicesItem.Specific != null)
                        {
                            foreach (var subItem in ConnectionLineToIndicesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Index, "Index");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Perk = this.Perk.Combine(rhs.Perk);
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.PerkGridX = this.PerkGridX.Combine(rhs.PerkGridX);
                ret.PerkGridY = this.PerkGridY.Combine(rhs.PerkGridY);
                ret.HorizontalPosition = this.HorizontalPosition.Combine(rhs.HorizontalPosition);
                ret.VerticalPosition = this.VerticalPosition.Combine(rhs.VerticalPosition);
                ret.AssociatedSkill = this.AssociatedSkill.Combine(rhs.AssociatedSkill);
                ret.ConnectionLineToIndices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.ConnectionLineToIndices?.Overall, rhs.ConnectionLineToIndices?.Overall), ExceptionExt.Combine(this.ConnectionLineToIndices?.Specific, rhs.ConnectionLineToIndices?.Specific));
                ret.Index = this.Index.Combine(rhs.Index);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Perk;
            public bool FNAM;
            public bool PerkGridX;
            public bool PerkGridY;
            public bool HorizontalPosition;
            public bool VerticalPosition;
            public bool AssociatedSkill;
            public bool ConnectionLineToIndices;
            public bool Index;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Perk = defaultOn;
                this.FNAM = defaultOn;
                this.PerkGridX = defaultOn;
                this.PerkGridY = defaultOn;
                this.HorizontalPosition = defaultOn;
                this.VerticalPosition = defaultOn;
                this.AssociatedSkill = defaultOn;
                this.ConnectionLineToIndices = defaultOn;
                this.Index = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Perk, null));
                ret.Add((FNAM, null));
                ret.Add((PerkGridX, null));
                ret.Add((PerkGridY, null));
                ret.Add((HorizontalPosition, null));
                ret.Add((VerticalPosition, null));
                ret.Add((AssociatedSkill, null));
                ret.Add((ConnectionLineToIndices, null));
                ret.Add((Index, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ActorValuePerkNode_Registration.TriggeringRecordType;
        public IEnumerable<FormLinkInformation> ContainedFormLinks => ActorValuePerkNodeCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ActorValuePerkNodeSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ActorValuePerkNodeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ActorValuePerkNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static ActorValuePerkNode CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ActorValuePerkNode();
            ((ActorValuePerkNodeSetterCommon)((IActorValuePerkNodeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ActorValuePerkNode item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ActorValuePerkNodeSetterCommon)((IActorValuePerkNodeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ActorValuePerkNode GetNew()
        {
            return new ActorValuePerkNode();
        }

    }
    #endregion

    #region Interface
    public partial interface IActorValuePerkNode :
        IActorValuePerkNodeGetter,
        ILoquiObjectSetter<IActorValuePerkNode>,
        IFormLinkContainer
    {
        new FormLink<IPerkGetter> Perk { get; set; }
        new MemorySlice<Byte>? FNAM { get; set; }
        new UInt32? PerkGridX { get; set; }
        new UInt32? PerkGridY { get; set; }
        new Single? HorizontalPosition { get; set; }
        new Single? VerticalPosition { get; set; }
        new FormLinkNullable<IActorValueInformationGetter> AssociatedSkill { get; set; }
        new ExtendedList<UInt32> ConnectionLineToIndices { get; }
        new UInt32? Index { get; set; }
    }

    public partial interface IActorValuePerkNodeGetter :
        ILoquiObject,
        ILoquiObject<IActorValuePerkNodeGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ActorValuePerkNode_Registration.Instance;
        FormLink<IPerkGetter> Perk { get; }
        ReadOnlyMemorySlice<Byte>? FNAM { get; }
        UInt32? PerkGridX { get; }
        UInt32? PerkGridY { get; }
        Single? HorizontalPosition { get; }
        Single? VerticalPosition { get; }
        FormLinkNullable<IActorValueInformationGetter> AssociatedSkill { get; }
        IReadOnlyList<UInt32> ConnectionLineToIndices { get; }
        UInt32? Index { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ActorValuePerkNodeMixIn
    {
        public static void Clear(this IActorValuePerkNode item)
        {
            ((ActorValuePerkNodeSetterCommon)((IActorValuePerkNodeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ActorValuePerkNode.Mask<bool> GetEqualsMask(
            this IActorValuePerkNodeGetter item,
            IActorValuePerkNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IActorValuePerkNodeGetter item,
            string? name = null,
            ActorValuePerkNode.Mask<bool>? printMask = null)
        {
            return ((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IActorValuePerkNodeGetter item,
            FileGeneration fg,
            string? name = null,
            ActorValuePerkNode.Mask<bool>? printMask = null)
        {
            ((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IActorValuePerkNodeGetter item,
            IActorValuePerkNodeGetter rhs)
        {
            return ((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IActorValuePerkNode lhs,
            IActorValuePerkNodeGetter rhs)
        {
            ((ActorValuePerkNodeSetterTranslationCommon)((IActorValuePerkNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IActorValuePerkNode lhs,
            IActorValuePerkNodeGetter rhs,
            ActorValuePerkNode.TranslationMask? copyMask = null)
        {
            ((ActorValuePerkNodeSetterTranslationCommon)((IActorValuePerkNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IActorValuePerkNode lhs,
            IActorValuePerkNodeGetter rhs,
            out ActorValuePerkNode.ErrorMask errorMask,
            ActorValuePerkNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ActorValuePerkNodeSetterTranslationCommon)((IActorValuePerkNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ActorValuePerkNode.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IActorValuePerkNode lhs,
            IActorValuePerkNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ActorValuePerkNodeSetterTranslationCommon)((IActorValuePerkNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ActorValuePerkNode DeepCopy(
            this IActorValuePerkNodeGetter item,
            ActorValuePerkNode.TranslationMask? copyMask = null)
        {
            return ((ActorValuePerkNodeSetterTranslationCommon)((IActorValuePerkNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ActorValuePerkNode DeepCopy(
            this IActorValuePerkNodeGetter item,
            out ActorValuePerkNode.ErrorMask errorMask,
            ActorValuePerkNode.TranslationMask? copyMask = null)
        {
            return ((ActorValuePerkNodeSetterTranslationCommon)((IActorValuePerkNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ActorValuePerkNode DeepCopy(
            this IActorValuePerkNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ActorValuePerkNodeSetterTranslationCommon)((IActorValuePerkNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IActorValuePerkNode item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ActorValuePerkNodeSetterCommon)((IActorValuePerkNodeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ActorValuePerkNode_FieldIndex
    {
        Perk = 0,
        FNAM = 1,
        PerkGridX = 2,
        PerkGridY = 3,
        HorizontalPosition = 4,
        VerticalPosition = 5,
        AssociatedSkill = 6,
        ConnectionLineToIndices = 7,
        Index = 8,
    }
    #endregion

    #region Registration
    public partial class ActorValuePerkNode_Registration : ILoquiRegistration
    {
        public static readonly ActorValuePerkNode_Registration Instance = new ActorValuePerkNode_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 436,
            version: 0);

        public const string GUID = "a537929f-fd15-415b-8cc7-8a3047e4c986";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(ActorValuePerkNode.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ActorValuePerkNode.ErrorMask);

        public static readonly Type ClassType = typeof(ActorValuePerkNode);

        public static readonly Type GetterType = typeof(IActorValuePerkNodeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IActorValuePerkNode);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ActorValuePerkNode";

        public const string Name = "ActorValuePerkNode";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PNAM;
        public static readonly Type BinaryWriteTranslation = typeof(ActorValuePerkNodeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ActorValuePerkNodeSetterCommon
    {
        public static readonly ActorValuePerkNodeSetterCommon Instance = new ActorValuePerkNodeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IActorValuePerkNode item)
        {
            ClearPartial();
            item.Perk = FormLink<IPerkGetter>.Null;
            item.FNAM = default;
            item.PerkGridX = default;
            item.PerkGridY = default;
            item.HorizontalPosition = default;
            item.VerticalPosition = default;
            item.AssociatedSkill = FormLinkNullable<IActorValueInformationGetter>.Null;
            item.ConnectionLineToIndices.Clear();
            item.Index = default;
        }
        
        #region Mutagen
        public void RemapLinks(IActorValuePerkNode obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Perk = obj.Perk.Relink(mapping);
            obj.AssociatedSkill = obj.AssociatedSkill.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IActorValuePerkNode item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ActorValuePerkNodeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ActorValuePerkNodeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ActorValuePerkNodeCommon
    {
        public static readonly ActorValuePerkNodeCommon Instance = new ActorValuePerkNodeCommon();

        public ActorValuePerkNode.Mask<bool> GetEqualsMask(
            IActorValuePerkNodeGetter item,
            IActorValuePerkNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ActorValuePerkNode.Mask<bool>(false);
            ((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IActorValuePerkNodeGetter item,
            IActorValuePerkNodeGetter rhs,
            ActorValuePerkNode.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Perk = item.Perk.Equals(rhs.Perk);
            ret.FNAM = MemorySliceExt.Equal(item.FNAM, rhs.FNAM);
            ret.PerkGridX = item.PerkGridX == rhs.PerkGridX;
            ret.PerkGridY = item.PerkGridY == rhs.PerkGridY;
            ret.HorizontalPosition = item.HorizontalPosition.EqualsWithin(rhs.HorizontalPosition);
            ret.VerticalPosition = item.VerticalPosition.EqualsWithin(rhs.VerticalPosition);
            ret.AssociatedSkill = item.AssociatedSkill.Equals(rhs.AssociatedSkill);
            ret.ConnectionLineToIndices = item.ConnectionLineToIndices.CollectionEqualsHelper(
                rhs.ConnectionLineToIndices,
                (l, r) => l == r,
                include);
            ret.Index = item.Index == rhs.Index;
        }
        
        public string ToString(
            IActorValuePerkNodeGetter item,
            string? name = null,
            ActorValuePerkNode.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IActorValuePerkNodeGetter item,
            FileGeneration fg,
            string? name = null,
            ActorValuePerkNode.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ActorValuePerkNode =>");
            }
            else
            {
                fg.AppendLine($"{name} (ActorValuePerkNode) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IActorValuePerkNodeGetter item,
            FileGeneration fg,
            ActorValuePerkNode.Mask<bool>? printMask = null)
        {
            if (printMask?.Perk ?? true)
            {
                fg.AppendItem(item.Perk.FormKey, "Perk");
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM.TryGet(out var FNAMItem))
            {
                fg.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
            if ((printMask?.PerkGridX ?? true)
                && item.PerkGridX.TryGet(out var PerkGridXItem))
            {
                fg.AppendItem(PerkGridXItem, "PerkGridX");
            }
            if ((printMask?.PerkGridY ?? true)
                && item.PerkGridY.TryGet(out var PerkGridYItem))
            {
                fg.AppendItem(PerkGridYItem, "PerkGridY");
            }
            if ((printMask?.HorizontalPosition ?? true)
                && item.HorizontalPosition.TryGet(out var HorizontalPositionItem))
            {
                fg.AppendItem(HorizontalPositionItem, "HorizontalPosition");
            }
            if ((printMask?.VerticalPosition ?? true)
                && item.VerticalPosition.TryGet(out var VerticalPositionItem))
            {
                fg.AppendItem(VerticalPositionItem, "VerticalPosition");
            }
            if (printMask?.AssociatedSkill ?? true)
            {
                fg.AppendItem(item.AssociatedSkill.FormKeyNullable, "AssociatedSkill");
            }
            if (printMask?.ConnectionLineToIndices?.Overall ?? true)
            {
                fg.AppendLine("ConnectionLineToIndices =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.ConnectionLineToIndices)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Index ?? true)
                && item.Index.TryGet(out var IndexItem))
            {
                fg.AppendItem(IndexItem, "Index");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IActorValuePerkNodeGetter? lhs,
            IActorValuePerkNodeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Perk.Equals(rhs.Perk)) return false;
            if (!MemorySliceExt.Equal(lhs.FNAM, rhs.FNAM)) return false;
            if (lhs.PerkGridX != rhs.PerkGridX) return false;
            if (lhs.PerkGridY != rhs.PerkGridY) return false;
            if (!lhs.HorizontalPosition.EqualsWithin(rhs.HorizontalPosition)) return false;
            if (!lhs.VerticalPosition.EqualsWithin(rhs.VerticalPosition)) return false;
            if (!lhs.AssociatedSkill.Equals(rhs.AssociatedSkill)) return false;
            if (!lhs.ConnectionLineToIndices.SequenceEqualNullable(rhs.ConnectionLineToIndices)) return false;
            if (lhs.Index != rhs.Index) return false;
            return true;
        }
        
        public virtual int GetHashCode(IActorValuePerkNodeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Perk);
            if (item.FNAM.TryGet(out var FNAMItem))
            {
                hash.Add(FNAMItem);
            }
            if (item.PerkGridX.TryGet(out var PerkGridXitem))
            {
                hash.Add(PerkGridXitem);
            }
            if (item.PerkGridY.TryGet(out var PerkGridYitem))
            {
                hash.Add(PerkGridYitem);
            }
            if (item.HorizontalPosition.TryGet(out var HorizontalPositionitem))
            {
                hash.Add(HorizontalPositionitem);
            }
            if (item.VerticalPosition.TryGet(out var VerticalPositionitem))
            {
                hash.Add(VerticalPositionitem);
            }
            hash.Add(item.AssociatedSkill);
            hash.Add(item.ConnectionLineToIndices);
            if (item.Index.TryGet(out var Indexitem))
            {
                hash.Add(Indexitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ActorValuePerkNode.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IActorValuePerkNodeGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Perk);
            if (obj.AssociatedSkill.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AssociatedSkill);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ActorValuePerkNodeSetterTranslationCommon
    {
        public static readonly ActorValuePerkNodeSetterTranslationCommon Instance = new ActorValuePerkNodeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IActorValuePerkNode item,
            IActorValuePerkNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ActorValuePerkNode_FieldIndex.Perk) ?? true))
            {
                item.Perk = new FormLink<IPerkGetter>(rhs.Perk.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValuePerkNode_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM.TryGet(out var FNAMrhs))
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValuePerkNode_FieldIndex.PerkGridX) ?? true))
            {
                item.PerkGridX = rhs.PerkGridX;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValuePerkNode_FieldIndex.PerkGridY) ?? true))
            {
                item.PerkGridY = rhs.PerkGridY;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValuePerkNode_FieldIndex.HorizontalPosition) ?? true))
            {
                item.HorizontalPosition = rhs.HorizontalPosition;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValuePerkNode_FieldIndex.VerticalPosition) ?? true))
            {
                item.VerticalPosition = rhs.VerticalPosition;
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValuePerkNode_FieldIndex.AssociatedSkill) ?? true))
            {
                item.AssociatedSkill = new FormLinkNullable<IActorValueInformationGetter>(rhs.AssociatedSkill.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValuePerkNode_FieldIndex.ConnectionLineToIndices) ?? true))
            {
                errorMask?.PushIndex((int)ActorValuePerkNode_FieldIndex.ConnectionLineToIndices);
                try
                {
                    item.ConnectionLineToIndices.SetTo(rhs.ConnectionLineToIndices);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ActorValuePerkNode_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
        }
        
        #endregion
        
        public ActorValuePerkNode DeepCopy(
            IActorValuePerkNodeGetter item,
            ActorValuePerkNode.TranslationMask? copyMask = null)
        {
            ActorValuePerkNode ret = (ActorValuePerkNode)((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)item).CommonInstance()!).GetNew();
            ((ActorValuePerkNodeSetterTranslationCommon)((IActorValuePerkNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ActorValuePerkNode DeepCopy(
            IActorValuePerkNodeGetter item,
            out ActorValuePerkNode.ErrorMask errorMask,
            ActorValuePerkNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ActorValuePerkNode ret = (ActorValuePerkNode)((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)item).CommonInstance()!).GetNew();
            ((ActorValuePerkNodeSetterTranslationCommon)((IActorValuePerkNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ActorValuePerkNode.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ActorValuePerkNode DeepCopy(
            IActorValuePerkNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ActorValuePerkNode ret = (ActorValuePerkNode)((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)item).CommonInstance()!).GetNew();
            ((ActorValuePerkNodeSetterTranslationCommon)((IActorValuePerkNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ActorValuePerkNode
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ActorValuePerkNode_Registration.Instance;
        public static ActorValuePerkNode_Registration Registration => ActorValuePerkNode_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ActorValuePerkNodeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ActorValuePerkNodeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ActorValuePerkNodeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IActorValuePerkNodeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IActorValuePerkNodeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IActorValuePerkNodeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ActorValuePerkNodeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ActorValuePerkNodeBinaryWriteTranslation Instance = new ActorValuePerkNodeBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IActorValuePerkNodeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Perk,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.PNAM));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PerkGridX,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XNAM));
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PerkGridY,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.YNAM));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HorizontalPosition,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.HNAM));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VerticalPosition,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.VNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AssociatedSkill,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32>.Instance.WritePerItem(
                writer: writer,
                items: item.ConnectionLineToIndices,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM),
                transl: UInt32BinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.INAM));
        }

        public void Write(
            MutagenWriter writer,
            IActorValuePerkNodeGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IActorValuePerkNodeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ActorValuePerkNodeBinaryCreateTranslation
    {
        public readonly static ActorValuePerkNodeBinaryCreateTranslation Instance = new ActorValuePerkNodeBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IActorValuePerkNode item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IActorValuePerkNode item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.PNAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ActorValuePerkNode_FieldIndex.Perk) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Perk = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)ActorValuePerkNode_FieldIndex.Perk;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)ActorValuePerkNode_FieldIndex.FNAM;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PerkGridX = frame.ReadUInt32();
                    return (int)ActorValuePerkNode_FieldIndex.PerkGridX;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PerkGridY = frame.ReadUInt32();
                    return (int)ActorValuePerkNode_FieldIndex.PerkGridY;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HorizontalPosition = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)ActorValuePerkNode_FieldIndex.HorizontalPosition;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VerticalPosition = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)ActorValuePerkNode_FieldIndex.VerticalPosition;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AssociatedSkill = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)ActorValuePerkNode_FieldIndex.AssociatedSkill;
                }
                case RecordTypeInts.CNAM:
                {
                    item.ConnectionLineToIndices.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM),
                            transl: UInt32BinaryTranslation.Instance.Parse));
                    return (int)ActorValuePerkNode_FieldIndex.ConnectionLineToIndices;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt32();
                    return (int)ActorValuePerkNode_FieldIndex.Index;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ActorValuePerkNodeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IActorValuePerkNodeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ActorValuePerkNodeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ActorValuePerkNodeBinaryOverlay :
        BinaryOverlay,
        IActorValuePerkNodeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ActorValuePerkNode_Registration.Instance;
        public static ActorValuePerkNode_Registration Registration => ActorValuePerkNode_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ActorValuePerkNodeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ActorValuePerkNodeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IActorValuePerkNodeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IActorValuePerkNodeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IActorValuePerkNodeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => ActorValuePerkNodeCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ActorValuePerkNodeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ActorValuePerkNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Perk
        private int? _PerkLocation;
        public FormLink<IPerkGetter> Perk => _PerkLocation.HasValue ? new FormLink<IPerkGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PerkLocation.Value, _package.MetaData.Constants)))) : FormLink<IPerkGetter>.Null;
        #endregion
        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _FNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region PerkGridX
        private int? _PerkGridXLocation;
        public UInt32? PerkGridX => _PerkGridXLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PerkGridXLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region PerkGridY
        private int? _PerkGridYLocation;
        public UInt32? PerkGridY => _PerkGridYLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PerkGridYLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region HorizontalPosition
        private int? _HorizontalPositionLocation;
        public Single? HorizontalPosition => _HorizontalPositionLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _HorizontalPositionLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region VerticalPosition
        private int? _VerticalPositionLocation;
        public Single? VerticalPosition => _VerticalPositionLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _VerticalPositionLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region AssociatedSkill
        private int? _AssociatedSkillLocation;
        public FormLinkNullable<IActorValueInformationGetter> AssociatedSkill => _AssociatedSkillLocation.HasValue ? new FormLinkNullable<IActorValueInformationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AssociatedSkillLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IActorValueInformationGetter>.Null;
        #endregion
        public IReadOnlyList<UInt32> ConnectionLineToIndices { get; private set; } = ListExt.Empty<UInt32>();
        #region Index
        private int? _IndexLocation;
        public UInt32? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ActorValuePerkNodeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ActorValuePerkNodeBinaryOverlay ActorValuePerkNodeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ActorValuePerkNodeBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ActorValuePerkNodeBinaryOverlay ActorValuePerkNodeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ActorValuePerkNodeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.PNAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ActorValuePerkNode_FieldIndex.Perk) return ParseResult.Stop;
                    _PerkLocation = (stream.Position - offset);
                    return (int)ActorValuePerkNode_FieldIndex.Perk;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)ActorValuePerkNode_FieldIndex.FNAM;
                }
                case RecordTypeInts.XNAM:
                {
                    _PerkGridXLocation = (stream.Position - offset);
                    return (int)ActorValuePerkNode_FieldIndex.PerkGridX;
                }
                case RecordTypeInts.YNAM:
                {
                    _PerkGridYLocation = (stream.Position - offset);
                    return (int)ActorValuePerkNode_FieldIndex.PerkGridY;
                }
                case RecordTypeInts.HNAM:
                {
                    _HorizontalPositionLocation = (stream.Position - offset);
                    return (int)ActorValuePerkNode_FieldIndex.HorizontalPosition;
                }
                case RecordTypeInts.VNAM:
                {
                    _VerticalPositionLocation = (stream.Position - offset);
                    return (int)ActorValuePerkNode_FieldIndex.VerticalPosition;
                }
                case RecordTypeInts.SNAM:
                {
                    _AssociatedSkillLocation = (stream.Position - offset);
                    return (int)ActorValuePerkNode_FieldIndex.AssociatedSkill;
                }
                case RecordTypeInts.CNAM:
                {
                    this.ConnectionLineToIndices = BinaryOverlayList.FactoryByArray<UInt32>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryPrimitives.ReadUInt32LittleEndian(s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)ActorValuePerkNode_FieldIndex.ConnectionLineToIndices;
                }
                case RecordTypeInts.INAM:
                {
                    _IndexLocation = (stream.Position - offset);
                    return (int)ActorValuePerkNode_FieldIndex.Index;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ActorValuePerkNodeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IActorValuePerkNodeGetter rhs)) return false;
            return ((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IActorValuePerkNodeGetter? obj)
        {
            return ((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ActorValuePerkNodeCommon)((IActorValuePerkNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

