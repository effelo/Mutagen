/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class DialogResponses :
        Fallout4MajorRecord,
        IDialogResponsesInternal,
        ILoquiObjectSetter<DialogResponses>,
        IEquatable<IDialogResponsesGetter>
    {
        #region Ctor
        protected DialogResponses()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogResponsesAdapter? _VirtualMachineAdapter;
        public DialogResponsesAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDialogResponsesAdapterGetter? IDialogResponsesGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region DATA
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DATA;
        public MemorySlice<Byte>? DATA
        {
            get => this._DATA;
            set => this._DATA = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponsesGetter.DATA => this.DATA;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogResponseFlags? _Flags;
        public DialogResponseFlags? Flags
        {
            get => _Flags;
            set => _Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDialogResponseFlagsGetter? IDialogResponsesGetter.Flags => this.Flags;
        #endregion
        #region Topic
        public FormLinkNullable<IDialogTopicGetter> Topic { get; set; } = new FormLinkNullable<IDialogTopicGetter>();
        #endregion
        #region PreviousDialog
        public FormLinkNullable<IDialogResponsesGetter> PreviousDialog { get; set; } = new FormLinkNullable<IDialogResponsesGetter>();
        #endregion
        #region FavorLevel
        public FavorLevel? FavorLevel { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FavorLevel? IDialogResponsesGetter.FavorLevel => this.FavorLevel;
        #endregion
        #region LinkTo
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IDialogGetter>> _LinkTo = new ExtendedList<IFormLink<IDialogGetter>>();
        public ExtendedList<IFormLink<IDialogGetter>> LinkTo
        {
            get => this._LinkTo;
            protected set => this._LinkTo = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IDialogGetter>> IDialogResponsesGetter.LinkTo => _LinkTo;
        #endregion

        #endregion
        #region ResponseData
        public FormLinkNullable<IDialogResponsesGetter> ResponseData { get; set; } = new FormLinkNullable<IDialogResponsesGetter>();
        #endregion
        #region Responses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponse> _Responses = new ExtendedList<DialogResponse>();
        public ExtendedList<DialogResponse> Responses
        {
            get => this._Responses;
            protected set => this._Responses = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponseGetter> IDialogResponsesGetter.Responses => _Responses;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IDialogResponsesGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region UnknownData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponsesUnknownData> _UnknownData = new ExtendedList<DialogResponsesUnknownData>();
        public ExtendedList<DialogResponsesUnknownData> UnknownData
        {
            get => this._UnknownData;
            protected set => this._UnknownData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponsesUnknownDataGetter> IDialogResponsesGetter.UnknownData => _UnknownData;
        #endregion

        #endregion
        #region Prompt
        public TranslatedString? Prompt { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IDialogResponsesGetter.Prompt => this.Prompt;
        #endregion
        #region Speaker
        public FormLinkNullable<INpcGetter> Speaker { get; set; } = new FormLinkNullable<INpcGetter>();
        #endregion
        #region WalkAwayTopic
        public FormLinkNullable<IDialogTopicGetter> WalkAwayTopic { get; set; } = new FormLinkNullable<IDialogTopicGetter>();
        #endregion
        #region AudioOutputOverride
        public FormLinkNullable<ISoundOutputModelGetter> AudioOutputOverride { get; set; } = new FormLinkNullable<ISoundOutputModelGetter>();
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogResponsesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogResponsesGetter rhs)) return false;
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDialogResponsesGetter? obj)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, DialogResponsesAdapter.Mask<TItem>?>(initialValue, new DialogResponsesAdapter.Mask<TItem>(initialValue));
                this.DATA = initialValue;
                this.Flags = new MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>(initialValue, new DialogResponseFlags.Mask<TItem>(initialValue));
                this.Topic = initialValue;
                this.PreviousDialog = initialValue;
                this.FavorLevel = initialValue;
                this.LinkTo = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ResponseData = initialValue;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.UnknownData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>());
                this.Prompt = initialValue;
                this.Speaker = initialValue;
                this.WalkAwayTopic = initialValue;
                this.AudioOutputOverride = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem DATA,
                TItem Flags,
                TItem Topic,
                TItem PreviousDialog,
                TItem FavorLevel,
                TItem LinkTo,
                TItem ResponseData,
                TItem Responses,
                TItem Conditions,
                TItem UnknownData,
                TItem Prompt,
                TItem Speaker,
                TItem WalkAwayTopic,
                TItem AudioOutputOverride)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, DialogResponsesAdapter.Mask<TItem>?>(VirtualMachineAdapter, new DialogResponsesAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.DATA = DATA;
                this.Flags = new MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>(Flags, new DialogResponseFlags.Mask<TItem>(Flags));
                this.Topic = Topic;
                this.PreviousDialog = PreviousDialog;
                this.FavorLevel = FavorLevel;
                this.LinkTo = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LinkTo, Enumerable.Empty<(int Index, TItem Value)>());
                this.ResponseData = ResponseData;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(Responses, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.UnknownData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>?>(UnknownData, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>());
                this.Prompt = Prompt;
                this.Speaker = Speaker;
                this.WalkAwayTopic = WalkAwayTopic;
                this.AudioOutputOverride = AudioOutputOverride;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, DialogResponsesAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem DATA;
            public MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>? Flags { get; set; }
            public TItem Topic;
            public TItem PreviousDialog;
            public TItem FavorLevel;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LinkTo;
            public TItem ResponseData;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>? Responses;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>?>? UnknownData;
            public TItem Prompt;
            public TItem Speaker;
            public TItem WalkAwayTopic;
            public TItem AudioOutputOverride;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.DATA, rhs.DATA)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Topic, rhs.Topic)) return false;
                if (!object.Equals(this.PreviousDialog, rhs.PreviousDialog)) return false;
                if (!object.Equals(this.FavorLevel, rhs.FavorLevel)) return false;
                if (!object.Equals(this.LinkTo, rhs.LinkTo)) return false;
                if (!object.Equals(this.ResponseData, rhs.ResponseData)) return false;
                if (!object.Equals(this.Responses, rhs.Responses)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.UnknownData, rhs.UnknownData)) return false;
                if (!object.Equals(this.Prompt, rhs.Prompt)) return false;
                if (!object.Equals(this.Speaker, rhs.Speaker)) return false;
                if (!object.Equals(this.WalkAwayTopic, rhs.WalkAwayTopic)) return false;
                if (!object.Equals(this.AudioOutputOverride, rhs.AudioOutputOverride)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.DATA);
                hash.Add(this.Flags);
                hash.Add(this.Topic);
                hash.Add(this.PreviousDialog);
                hash.Add(this.FavorLevel);
                hash.Add(this.LinkTo);
                hash.Add(this.ResponseData);
                hash.Add(this.Responses);
                hash.Add(this.Conditions);
                hash.Add(this.UnknownData);
                hash.Add(this.Prompt);
                hash.Add(this.Speaker);
                hash.Add(this.WalkAwayTopic);
                hash.Add(this.AudioOutputOverride);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.DATA)) return false;
                if (Flags != null)
                {
                    if (!eval(this.Flags.Overall)) return false;
                    if (this.Flags.Specific != null && !this.Flags.Specific.All(eval)) return false;
                }
                if (!eval(this.Topic)) return false;
                if (!eval(this.PreviousDialog)) return false;
                if (!eval(this.FavorLevel)) return false;
                if (this.LinkTo != null)
                {
                    if (!eval(this.LinkTo.Overall)) return false;
                    if (this.LinkTo.Specific != null)
                    {
                        foreach (var item in this.LinkTo.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ResponseData)) return false;
                if (this.Responses != null)
                {
                    if (!eval(this.Responses.Overall)) return false;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnknownData != null)
                {
                    if (!eval(this.UnknownData.Overall)) return false;
                    if (this.UnknownData.Specific != null)
                    {
                        foreach (var item in this.UnknownData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Prompt)) return false;
                if (!eval(this.Speaker)) return false;
                if (!eval(this.WalkAwayTopic)) return false;
                if (!eval(this.AudioOutputOverride)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.DATA)) return true;
                if (Flags != null)
                {
                    if (eval(this.Flags.Overall)) return true;
                    if (this.Flags.Specific != null && this.Flags.Specific.Any(eval)) return true;
                }
                if (eval(this.Topic)) return true;
                if (eval(this.PreviousDialog)) return true;
                if (eval(this.FavorLevel)) return true;
                if (this.LinkTo != null)
                {
                    if (eval(this.LinkTo.Overall)) return true;
                    if (this.LinkTo.Specific != null)
                    {
                        foreach (var item in this.LinkTo.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ResponseData)) return true;
                if (this.Responses != null)
                {
                    if (eval(this.Responses.Overall)) return true;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnknownData != null)
                {
                    if (eval(this.UnknownData.Overall)) return true;
                    if (this.UnknownData.Specific != null)
                    {
                        foreach (var item in this.UnknownData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Prompt)) return true;
                if (eval(this.Speaker)) return true;
                if (eval(this.WalkAwayTopic)) return true;
                if (eval(this.AudioOutputOverride)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponses.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, DialogResponsesAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.DATA = eval(this.DATA);
                obj.Flags = this.Flags == null ? null : new MaskItem<R, DialogResponseFlags.Mask<R>?>(eval(this.Flags.Overall), this.Flags.Specific?.Translate(eval));
                obj.Topic = eval(this.Topic);
                obj.PreviousDialog = eval(this.PreviousDialog);
                obj.FavorLevel = eval(this.FavorLevel);
                if (LinkTo != null)
                {
                    obj.LinkTo = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LinkTo.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LinkTo.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LinkTo.Specific = l;
                        foreach (var item in LinkTo.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ResponseData = eval(this.ResponseData);
                if (Responses != null)
                {
                    obj.Responses = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponse.Mask<R>?>>?>(eval(this.Responses.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponse.Mask<R>?>>());
                    if (Responses.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponse.Mask<R>?>>();
                        obj.Responses.Specific = l;
                        foreach (var item in Responses.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DialogResponse.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DialogResponse.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (UnknownData != null)
                {
                    obj.UnknownData = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>>?>(eval(this.UnknownData.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>>());
                    if (UnknownData.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>>();
                        obj.UnknownData.Specific = l;
                        foreach (var item in UnknownData.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Prompt = eval(this.Prompt);
                obj.Speaker = eval(this.Speaker);
                obj.WalkAwayTopic = eval(this.WalkAwayTopic);
                obj.AudioOutputOverride = eval(this.AudioOutputOverride);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DialogResponses.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DialogResponses.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DialogResponses.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.DATA ?? true)
                    {
                        fg.AppendItem(DATA, "DATA");
                    }
                    if (printMask?.Flags?.Overall ?? true)
                    {
                        Flags?.ToString(fg);
                    }
                    if (printMask?.Topic ?? true)
                    {
                        fg.AppendItem(Topic, "Topic");
                    }
                    if (printMask?.PreviousDialog ?? true)
                    {
                        fg.AppendItem(PreviousDialog, "PreviousDialog");
                    }
                    if (printMask?.FavorLevel ?? true)
                    {
                        fg.AppendItem(FavorLevel, "FavorLevel");
                    }
                    if ((printMask?.LinkTo?.Overall ?? true)
                        && LinkTo.TryGet(out var LinkToItem))
                    {
                        fg.AppendLine("LinkTo =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LinkToItem.Overall);
                            if (LinkToItem.Specific != null)
                            {
                                foreach (var subItem in LinkToItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ResponseData ?? true)
                    {
                        fg.AppendItem(ResponseData, "ResponseData");
                    }
                    if ((printMask?.Responses?.Overall ?? true)
                        && Responses.TryGet(out var ResponsesItem))
                    {
                        fg.AppendLine("Responses =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ResponsesItem.Overall);
                            if (ResponsesItem.Specific != null)
                            {
                                foreach (var subItem in ResponsesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.UnknownData?.Overall ?? true)
                        && UnknownData.TryGet(out var UnknownDataItem))
                    {
                        fg.AppendLine("UnknownData =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(UnknownDataItem.Overall);
                            if (UnknownDataItem.Specific != null)
                            {
                                foreach (var subItem in UnknownDataItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Prompt ?? true)
                    {
                        fg.AppendItem(Prompt, "Prompt");
                    }
                    if (printMask?.Speaker ?? true)
                    {
                        fg.AppendItem(Speaker, "Speaker");
                    }
                    if (printMask?.WalkAwayTopic ?? true)
                    {
                        fg.AppendItem(WalkAwayTopic, "WalkAwayTopic");
                    }
                    if (printMask?.AudioOutputOverride ?? true)
                    {
                        fg.AppendItem(AudioOutputOverride, "AudioOutputOverride");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, DialogResponsesAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? DATA;
            public MaskItem<Exception?, DialogResponseFlags.ErrorMask?>? Flags;
            public Exception? Topic;
            public Exception? PreviousDialog;
            public Exception? FavorLevel;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LinkTo;
            public Exception? ResponseData;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>? Responses;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>? UnknownData;
            public Exception? Prompt;
            public Exception? Speaker;
            public Exception? WalkAwayTopic;
            public Exception? AudioOutputOverride;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case DialogResponses_FieldIndex.DATA:
                        return DATA;
                    case DialogResponses_FieldIndex.Flags:
                        return Flags;
                    case DialogResponses_FieldIndex.Topic:
                        return Topic;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        return PreviousDialog;
                    case DialogResponses_FieldIndex.FavorLevel:
                        return FavorLevel;
                    case DialogResponses_FieldIndex.LinkTo:
                        return LinkTo;
                    case DialogResponses_FieldIndex.ResponseData:
                        return ResponseData;
                    case DialogResponses_FieldIndex.Responses:
                        return Responses;
                    case DialogResponses_FieldIndex.Conditions:
                        return Conditions;
                    case DialogResponses_FieldIndex.UnknownData:
                        return UnknownData;
                    case DialogResponses_FieldIndex.Prompt:
                        return Prompt;
                    case DialogResponses_FieldIndex.Speaker:
                        return Speaker;
                    case DialogResponses_FieldIndex.WalkAwayTopic:
                        return WalkAwayTopic;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        return AudioOutputOverride;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, DialogResponsesAdapter.ErrorMask?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.DATA:
                        this.DATA = ex;
                        break;
                    case DialogResponses_FieldIndex.Flags:
                        this.Flags = new MaskItem<Exception?, DialogResponseFlags.ErrorMask?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Topic:
                        this.Topic = ex;
                        break;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        this.PreviousDialog = ex;
                        break;
                    case DialogResponses_FieldIndex.FavorLevel:
                        this.FavorLevel = ex;
                        break;
                    case DialogResponses_FieldIndex.LinkTo:
                        this.LinkTo = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.ResponseData:
                        this.ResponseData = ex;
                        break;
                    case DialogResponses_FieldIndex.Responses:
                        this.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.UnknownData:
                        this.UnknownData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Prompt:
                        this.Prompt = ex;
                        break;
                    case DialogResponses_FieldIndex.Speaker:
                        this.Speaker = ex;
                        break;
                    case DialogResponses_FieldIndex.WalkAwayTopic:
                        this.WalkAwayTopic = ex;
                        break;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        this.AudioOutputOverride = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, DialogResponsesAdapter.ErrorMask?>?)obj;
                        break;
                    case DialogResponses_FieldIndex.DATA:
                        this.DATA = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Flags:
                        this.Flags = (MaskItem<Exception?, DialogResponseFlags.ErrorMask?>?)obj;
                        break;
                    case DialogResponses_FieldIndex.Topic:
                        this.Topic = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        this.PreviousDialog = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.FavorLevel:
                        this.FavorLevel = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.LinkTo:
                        this.LinkTo = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.ResponseData:
                        this.ResponseData = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Responses:
                        this.Responses = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.UnknownData:
                        this.UnknownData = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.Prompt:
                        this.Prompt = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Speaker:
                        this.Speaker = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.WalkAwayTopic:
                        this.WalkAwayTopic = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        this.AudioOutputOverride = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (DATA != null) return true;
                if (Flags != null) return true;
                if (Topic != null) return true;
                if (PreviousDialog != null) return true;
                if (FavorLevel != null) return true;
                if (LinkTo != null) return true;
                if (ResponseData != null) return true;
                if (Responses != null) return true;
                if (Conditions != null) return true;
                if (UnknownData != null) return true;
                if (Prompt != null) return true;
                if (Speaker != null) return true;
                if (WalkAwayTopic != null) return true;
                if (AudioOutputOverride != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(DATA, "DATA");
                Flags?.ToString(fg);
                fg.AppendItem(Topic, "Topic");
                fg.AppendItem(PreviousDialog, "PreviousDialog");
                fg.AppendItem(FavorLevel, "FavorLevel");
                if (LinkTo.TryGet(out var LinkToItem))
                {
                    fg.AppendLine("LinkTo =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LinkToItem.Overall);
                        if (LinkToItem.Specific != null)
                        {
                            foreach (var subItem in LinkToItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(ResponseData, "ResponseData");
                if (Responses.TryGet(out var ResponsesItem))
                {
                    fg.AppendLine("Responses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ResponsesItem.Overall);
                        if (ResponsesItem.Specific != null)
                        {
                            foreach (var subItem in ResponsesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (UnknownData.TryGet(out var UnknownDataItem))
                {
                    fg.AppendLine("UnknownData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(UnknownDataItem.Overall);
                        if (UnknownDataItem.Specific != null)
                        {
                            foreach (var subItem in UnknownDataItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Prompt, "Prompt");
                fg.AppendItem(Speaker, "Speaker");
                fg.AppendItem(WalkAwayTopic, "WalkAwayTopic");
                fg.AppendItem(AudioOutputOverride, "AudioOutputOverride");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.DATA = this.DATA.Combine(rhs.DATA);
                ret.Flags = this.Flags.Combine(rhs.Flags, (l, r) => l.Combine(r));
                ret.Topic = this.Topic.Combine(rhs.Topic);
                ret.PreviousDialog = this.PreviousDialog.Combine(rhs.PreviousDialog);
                ret.FavorLevel = this.FavorLevel.Combine(rhs.FavorLevel);
                ret.LinkTo = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.LinkTo?.Overall, rhs.LinkTo?.Overall), ExceptionExt.Combine(this.LinkTo?.Specific, rhs.LinkTo?.Specific));
                ret.ResponseData = this.ResponseData.Combine(rhs.ResponseData);
                ret.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(ExceptionExt.Combine(this.Responses?.Overall, rhs.Responses?.Overall), ExceptionExt.Combine(this.Responses?.Specific, rhs.Responses?.Specific));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.UnknownData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>(ExceptionExt.Combine(this.UnknownData?.Overall, rhs.UnknownData?.Overall), ExceptionExt.Combine(this.UnknownData?.Specific, rhs.UnknownData?.Specific));
                ret.Prompt = this.Prompt.Combine(rhs.Prompt);
                ret.Speaker = this.Speaker.Combine(rhs.Speaker);
                ret.WalkAwayTopic = this.WalkAwayTopic.Combine(rhs.WalkAwayTopic);
                ret.AudioOutputOverride = this.AudioOutputOverride.Combine(rhs.AudioOutputOverride);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public DialogResponsesAdapter.TranslationMask? VirtualMachineAdapter;
            public bool DATA;
            public DialogResponseFlags.TranslationMask? Flags;
            public bool Topic;
            public bool PreviousDialog;
            public bool FavorLevel;
            public bool LinkTo;
            public bool ResponseData;
            public DialogResponse.TranslationMask? Responses;
            public Condition.TranslationMask? Conditions;
            public DialogResponsesUnknownData.TranslationMask? UnknownData;
            public bool Prompt;
            public bool Speaker;
            public bool WalkAwayTopic;
            public bool AudioOutputOverride;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DATA = defaultOn;
                this.Topic = defaultOn;
                this.PreviousDialog = defaultOn;
                this.FavorLevel = defaultOn;
                this.LinkTo = defaultOn;
                this.ResponseData = defaultOn;
                this.Prompt = defaultOn;
                this.Speaker = defaultOn;
                this.WalkAwayTopic = defaultOn;
                this.AudioOutputOverride = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((DATA, null));
                ret.Add((Flags != null ? Flags.OnOverall : DefaultOn, Flags?.GetCrystal()));
                ret.Add((Topic, null));
                ret.Add((PreviousDialog, null));
                ret.Add((FavorLevel, null));
                ret.Add((LinkTo, null));
                ret.Add((ResponseData, null));
                ret.Add((Responses == null ? DefaultOn : !Responses.GetCrystal().CopyNothing, Responses?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((UnknownData == null ? DefaultOn : !UnknownData.GetCrystal().CopyNothing, UnknownData?.GetCrystal()));
                ret.Add((Prompt, null));
                ret.Add((Speaker, null));
                ret.Add((WalkAwayTopic, null));
                ret.Add((AudioOutputOverride, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = DialogResponses_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => DialogResponsesCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponsesSetterCommon.Instance.RemapLinks(this, mapping);
        public DialogResponses(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private DialogResponses(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal DialogResponses(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public DialogResponses(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public DialogResponses(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogResponsesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponsesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static DialogResponses CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DialogResponses();
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogResponses item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogResponses GetNew()
        {
            return new DialogResponses();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponses :
        IDialogResponsesGetter,
        IFallout4MajorRecord,
        IDialog,
        ILoquiObjectSetter<IDialogResponsesInternal>,
        IFormLinkContainer
    {
        new DialogResponsesAdapter? VirtualMachineAdapter { get; set; }
        new MemorySlice<Byte>? DATA { get; set; }
        new DialogResponseFlags? Flags { get; set; }
        new FormLinkNullable<IDialogTopicGetter> Topic { get; set; }
        new FormLinkNullable<IDialogResponsesGetter> PreviousDialog { get; set; }
        new FavorLevel? FavorLevel { get; set; }
        new ExtendedList<IFormLink<IDialogGetter>> LinkTo { get; }
        new FormLinkNullable<IDialogResponsesGetter> ResponseData { get; set; }
        new ExtendedList<DialogResponse> Responses { get; }
        new ExtendedList<Condition> Conditions { get; }
        new ExtendedList<DialogResponsesUnknownData> UnknownData { get; }
        new TranslatedString? Prompt { get; set; }
        new FormLinkNullable<INpcGetter> Speaker { get; set; }
        new FormLinkNullable<IDialogTopicGetter> WalkAwayTopic { get; set; }
        new FormLinkNullable<ISoundOutputModelGetter> AudioOutputOverride { get; set; }
        #region Mutagen
        new DialogResponses.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IDialogResponsesInternal :
        IFallout4MajorRecordInternal,
        IDialogResponses,
        IDialogResponsesGetter
    {
    }

    public partial interface IDialogResponsesGetter :
        IFallout4MajorRecordGetter,
        IDialogGetter,
        ILoquiObject<IDialogResponsesGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => DialogResponses_Registration.Instance;
        IDialogResponsesAdapterGetter? VirtualMachineAdapter { get; }
        ReadOnlyMemorySlice<Byte>? DATA { get; }
        IDialogResponseFlagsGetter? Flags { get; }
        FormLinkNullable<IDialogTopicGetter> Topic { get; }
        FormLinkNullable<IDialogResponsesGetter> PreviousDialog { get; }
        FavorLevel? FavorLevel { get; }
        IReadOnlyList<IFormLink<IDialogGetter>> LinkTo { get; }
        FormLinkNullable<IDialogResponsesGetter> ResponseData { get; }
        IReadOnlyList<IDialogResponseGetter> Responses { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IReadOnlyList<IDialogResponsesUnknownDataGetter> UnknownData { get; }
        ITranslatedStringGetter? Prompt { get; }
        FormLinkNullable<INpcGetter> Speaker { get; }
        FormLinkNullable<IDialogTopicGetter> WalkAwayTopic { get; }
        FormLinkNullable<ISoundOutputModelGetter> AudioOutputOverride { get; }

        #region Mutagen
        DialogResponses.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponsesMixIn
    {
        public static void Clear(this IDialogResponsesInternal item)
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponses.Mask<bool> GetEqualsMask(
            this IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogResponsesGetter item,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogResponsesGetter item,
            FileGeneration fg,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogResponsesGetter item,
            IDialogResponsesGetter rhs)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDialogResponsesInternal lhs,
            IDialogResponsesGetter rhs,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogResponses.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponsesInternal lhs,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            DialogResponses.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static DialogResponses Duplicate(
            this IDialogResponsesGetter item,
            FormKey formKey,
            DialogResponses.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogResponsesInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum DialogResponses_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        DATA = 7,
        Flags = 8,
        Topic = 9,
        PreviousDialog = 10,
        FavorLevel = 11,
        LinkTo = 12,
        ResponseData = 13,
        Responses = 14,
        Conditions = 15,
        UnknownData = 16,
        Prompt = 17,
        Speaker = 18,
        WalkAwayTopic = 19,
        AudioOutputOverride = 20,
    }
    #endregion

    #region Registration
    public partial class DialogResponses_Registration : ILoquiRegistration
    {
        public static readonly DialogResponses_Registration Instance = new DialogResponses_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 350,
            version: 0);

        public const string GUID = "39a0ccd0-da05-4f90-b32a-20fcdb7a9ea3";

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 21;

        public static readonly Type MaskType = typeof(DialogResponses.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponses.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponses);

        public static readonly Type GetterType = typeof(IDialogResponsesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponses);

        public static readonly Type? InternalSetterType = typeof(IDialogResponsesInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.DialogResponses";

        public const string Name = "DialogResponses";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.INFO;
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponsesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogResponsesSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly DialogResponsesSetterCommon Instance = new DialogResponsesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponsesInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.DATA = default;
            item.Flags = null;
            item.Topic = FormLinkNullable<IDialogTopicGetter>.Null;
            item.PreviousDialog = FormLinkNullable<IDialogResponsesGetter>.Null;
            item.FavorLevel = default;
            item.LinkTo.Clear();
            item.ResponseData = FormLinkNullable<IDialogResponsesGetter>.Null;
            item.Responses.Clear();
            item.Conditions.Clear();
            item.UnknownData.Clear();
            item.Prompt = default;
            item.Speaker = FormLinkNullable<INpcGetter>.Null;
            item.WalkAwayTopic = FormLinkNullable<IDialogTopicGetter>.Null;
            item.AudioOutputOverride = FormLinkNullable<ISoundOutputModelGetter>.Null;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IDialogResponsesInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogResponsesInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IDialogResponses obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Topic = obj.Topic.Relink(mapping);
            obj.PreviousDialog = obj.PreviousDialog.Relink(mapping);
            obj.LinkTo.RemapLinks(mapping);
            obj.ResponseData = obj.ResponseData.Relink(mapping);
            obj.Responses.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.UnknownData.RemapLinks(mapping);
            obj.Speaker = obj.Speaker.Relink(mapping);
            obj.WalkAwayTopic = obj.WalkAwayTopic.Relink(mapping);
            obj.AudioOutputOverride = obj.AudioOutputOverride.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogResponsesInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IDialogResponsesInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: DialogResponsesBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogResponsesBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogResponses)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogResponses)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class DialogResponsesCommon : Fallout4MajorRecordCommon
    {
        public new static readonly DialogResponsesCommon Instance = new DialogResponsesCommon();

        public DialogResponses.Mask<bool> GetEqualsMask(
            IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponses.Mask<bool>(false);
            ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            DialogResponses.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DATA = MemorySliceExt.Equal(item.DATA, rhs.DATA);
            ret.Flags = EqualsMaskHelper.EqualsHelper(
                item.Flags,
                rhs.Flags,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Topic = item.Topic.Equals(rhs.Topic);
            ret.PreviousDialog = item.PreviousDialog.Equals(rhs.PreviousDialog);
            ret.FavorLevel = item.FavorLevel == rhs.FavorLevel;
            ret.LinkTo = item.LinkTo.CollectionEqualsHelper(
                rhs.LinkTo,
                (l, r) => object.Equals(l, r),
                include);
            ret.ResponseData = item.ResponseData.Equals(rhs.ResponseData);
            ret.Responses = item.Responses.CollectionEqualsHelper(
                rhs.Responses,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UnknownData = item.UnknownData.CollectionEqualsHelper(
                rhs.UnknownData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Prompt = object.Equals(item.Prompt, rhs.Prompt);
            ret.Speaker = item.Speaker.Equals(rhs.Speaker);
            ret.WalkAwayTopic = item.WalkAwayTopic.Equals(rhs.WalkAwayTopic);
            ret.AudioOutputOverride = item.AudioOutputOverride.Equals(rhs.AudioOutputOverride);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDialogResponsesGetter item,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDialogResponsesGetter item,
            FileGeneration fg,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogResponses =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogResponses) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDialogResponsesGetter item,
            FileGeneration fg,
            DialogResponses.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if ((printMask?.DATA ?? true)
                && item.DATA.TryGet(out var DATAItem))
            {
                fg.AppendLine($"DATA => {SpanExt.ToHexString(DATAItem)}");
            }
            if ((printMask?.Flags?.Overall ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                FlagsItem?.ToString(fg, "Flags");
            }
            if (printMask?.Topic ?? true)
            {
                fg.AppendItem(item.Topic.FormKeyNullable, "Topic");
            }
            if (printMask?.PreviousDialog ?? true)
            {
                fg.AppendItem(item.PreviousDialog.FormKeyNullable, "PreviousDialog");
            }
            if ((printMask?.FavorLevel ?? true)
                && item.FavorLevel.TryGet(out var FavorLevelItem))
            {
                fg.AppendItem(FavorLevelItem, "FavorLevel");
            }
            if (printMask?.LinkTo?.Overall ?? true)
            {
                fg.AppendLine("LinkTo =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LinkTo)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.ResponseData ?? true)
            {
                fg.AppendItem(item.ResponseData.FormKeyNullable, "ResponseData");
            }
            if (printMask?.Responses?.Overall ?? true)
            {
                fg.AppendLine("Responses =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Responses)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.UnknownData?.Overall ?? true)
            {
                fg.AppendLine("UnknownData =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.UnknownData)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Prompt ?? true)
                && item.Prompt.TryGet(out var PromptItem))
            {
                fg.AppendItem(PromptItem, "Prompt");
            }
            if (printMask?.Speaker ?? true)
            {
                fg.AppendItem(item.Speaker.FormKeyNullable, "Speaker");
            }
            if (printMask?.WalkAwayTopic ?? true)
            {
                fg.AppendItem(item.WalkAwayTopic.FormKeyNullable, "WalkAwayTopic");
            }
            if (printMask?.AudioOutputOverride ?? true)
            {
                fg.AppendItem(item.AudioOutputOverride.FormKeyNullable, "AudioOutputOverride");
            }
        }
        
        public static DialogResponses_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogResponses_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (DialogResponses_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (DialogResponses_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (DialogResponses_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (DialogResponses_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (DialogResponses_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new DialogResponses_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogResponses_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponsesGetter? lhs,
            IDialogResponsesGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!MemorySliceExt.Equal(lhs.DATA, rhs.DATA)) return false;
            if (!object.Equals(lhs.Flags, rhs.Flags)) return false;
            if (!lhs.Topic.Equals(rhs.Topic)) return false;
            if (!lhs.PreviousDialog.Equals(rhs.PreviousDialog)) return false;
            if (lhs.FavorLevel != rhs.FavorLevel) return false;
            if (!lhs.LinkTo.SequenceEqualNullable(rhs.LinkTo)) return false;
            if (!lhs.ResponseData.Equals(rhs.ResponseData)) return false;
            if (!lhs.Responses.SequenceEqualNullable(rhs.Responses)) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            if (!lhs.UnknownData.SequenceEqualNullable(rhs.UnknownData)) return false;
            if (!object.Equals(lhs.Prompt, rhs.Prompt)) return false;
            if (!lhs.Speaker.Equals(rhs.Speaker)) return false;
            if (!lhs.WalkAwayTopic.Equals(rhs.WalkAwayTopic)) return false;
            if (!lhs.AudioOutputOverride.Equals(rhs.AudioOutputOverride)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogResponsesGetter?)lhs,
                rhs: rhs as IDialogResponsesGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogResponsesGetter?)lhs,
                rhs: rhs as IDialogResponsesGetter);
        }
        
        public virtual int GetHashCode(IDialogResponsesGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.DATA.TryGet(out var DATAItem))
            {
                hash.Add(DATAItem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.Topic);
            hash.Add(item.PreviousDialog);
            if (item.FavorLevel.TryGet(out var FavorLevelitem))
            {
                hash.Add(FavorLevelitem);
            }
            hash.Add(item.LinkTo);
            hash.Add(item.ResponseData);
            hash.Add(item.Responses);
            hash.Add(item.Conditions);
            hash.Add(item.UnknownData);
            if (item.Prompt.TryGet(out var Promptitem))
            {
                hash.Add(Promptitem);
            }
            hash.Add(item.Speaker);
            hash.Add(item.WalkAwayTopic);
            hash.Add(item.AudioOutputOverride);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogResponsesGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogResponsesGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogResponses.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IDialogResponsesGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Topic.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Topic);
            }
            if (obj.PreviousDialog.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PreviousDialog);
            }
            foreach (var item in obj.LinkTo)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.ResponseData.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ResponseData);
            }
            foreach (var item in obj.Responses.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.UnknownData.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Speaker.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Speaker);
            }
            if (obj.WalkAwayTopic.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.WalkAwayTopic);
            }
            if (obj.AudioOutputOverride.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AudioOutputOverride);
            }
            yield break;
        }
        
        #region Duplicate
        public DialogResponses Duplicate(
            IDialogResponsesGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new DialogResponses(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogResponses)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogResponses)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class DialogResponsesSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly DialogResponsesSetterTranslationCommon Instance = new DialogResponsesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogResponsesInternal item,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IDialogResponses item,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponses_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.DATA) ?? true))
            {
                if(rhs.DATA.TryGet(out var DATArhs))
                {
                    item.DATA = DATArhs.ToArray();
                }
                else
                {
                    item.DATA = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Flags) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Flags);
                try
                {
                    if(rhs.Flags.TryGet(out var rhsFlags))
                    {
                        item.Flags = rhsFlags.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Flags));
                    }
                    else
                    {
                        item.Flags = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Topic) ?? true))
            {
                item.Topic = new FormLinkNullable<IDialogTopicGetter>(rhs.Topic.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.PreviousDialog) ?? true))
            {
                item.PreviousDialog = new FormLinkNullable<IDialogResponsesGetter>(rhs.PreviousDialog.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.FavorLevel) ?? true))
            {
                item.FavorLevel = rhs.FavorLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.LinkTo) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.LinkTo);
                try
                {
                    item.LinkTo.SetTo(
                        rhs.LinkTo
                        .Select(r => (IFormLink<IDialogGetter>)new FormLink<IDialogGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.ResponseData) ?? true))
            {
                item.ResponseData = new FormLinkNullable<IDialogResponsesGetter>(rhs.ResponseData.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Responses) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Responses);
                try
                {
                    item.Responses.SetTo(
                        rhs.Responses
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.UnknownData) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.UnknownData);
                try
                {
                    item.UnknownData.SetTo(
                        rhs.UnknownData
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Prompt) ?? true))
            {
                item.Prompt = rhs.Prompt?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Speaker) ?? true))
            {
                item.Speaker = new FormLinkNullable<INpcGetter>(rhs.Speaker.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.WalkAwayTopic) ?? true))
            {
                item.WalkAwayTopic = new FormLinkNullable<IDialogTopicGetter>(rhs.WalkAwayTopic.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.AudioOutputOverride) ?? true))
            {
                item.AudioOutputOverride = new FormLinkNullable<ISoundOutputModelGetter>(rhs.AudioOutputOverride.FormKeyNullable);
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponsesInternal)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponses)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponsesInternal)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponses)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            DialogResponses.TranslationMask? copyMask = null)
        {
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogResponses.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class DialogResponses
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponses_Registration.Instance;
        public new static DialogResponses_Registration Registration => DialogResponses_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogResponsesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogResponsesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogResponsesSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class DialogResponsesBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DialogResponsesBinaryWriteTranslation Instance = new DialogResponsesBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IDialogResponsesGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IDialogResponsesGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IDialogResponsesGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((DialogResponsesAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DATA,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DATA));
            if (item.Flags.TryGet(out var FlagsItem))
            {
                ((DialogResponseFlagsBinaryWriteTranslation)((IBinaryItem)FlagsItem).BinaryWriteTranslator).Write(
                    item: FlagsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Topic,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TPIC));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PreviousDialog,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.PNAM));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<FavorLevel>.Instance.WriteNullable(
                writer,
                item.FavorLevel,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IDialogGetter>>.Instance.Write(
                writer: writer,
                items: item.LinkTo,
                transl: (MutagenWriter subWriter, IFormLink<IDialogGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.TCLT));
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ResponseData,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IDialogResponseGetter>.Instance.Write(
                writer: writer,
                items: item.Responses,
                transl: (MutagenWriter subWriter, IDialogResponseGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((DialogResponseBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            DialogResponsesBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IDialogResponsesUnknownDataGetter>.Instance.Write(
                writer: writer,
                items: item.UnknownData,
                transl: (MutagenWriter subWriter, IDialogResponsesUnknownDataGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((DialogResponsesUnknownDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Prompt,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.RNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Speaker,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WalkAwayTopic,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TWAT));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AudioOutputOverride,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ONAM));
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponsesGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.INFO),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DialogResponsesBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static DialogResponsesBinaryCreateTranslation Instance = new DialogResponsesBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.INFO;
        public static void FillBinaryStructs(
            IDialogResponsesInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IDialogResponsesInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.DialogResponsesAdapter.CreateFromBinary(frame: frame);
                    return (int)DialogResponses_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DATA = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponses_FieldIndex.DATA;
                }
                case RecordTypeInts.ENAM:
                {
                    item.Flags = Mutagen.Bethesda.Fallout4.DialogResponseFlags.CreateFromBinary(frame: frame);
                    return (int)DialogResponses_FieldIndex.Flags;
                }
                case RecordTypeInts.TPIC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Topic = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)DialogResponses_FieldIndex.Topic;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreviousDialog = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)DialogResponses_FieldIndex.PreviousDialog;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FavorLevel = EnumBinaryTranslation<FavorLevel>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponses_FieldIndex.FavorLevel;
                }
                case RecordTypeInts.TCLT:
                {
                    item.LinkTo.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IDialogGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.TCLT),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)DialogResponses_FieldIndex.LinkTo;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ResponseData = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)DialogResponses_FieldIndex.ResponseData;
                }
                case RecordTypeInts.TRDT:
                {
                    item.Responses.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<DialogResponse>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.TRDT,
                            recordTypeConverter: recordTypeConverter,
                            transl: DialogResponse.TryCreateFromBinary));
                    return (int)DialogResponses_FieldIndex.Responses;
                }
                case RecordTypeInts.CTDA:
                {
                    DialogResponsesBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)DialogResponses_FieldIndex.Conditions;
                }
                case RecordTypeInts.SCHR:
                case RecordTypeInts.QNAM:
                case RecordTypeInts.NEXT:
                {
                    item.UnknownData.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<DialogResponsesUnknownData>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: DialogResponsesUnknownData_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: DialogResponsesUnknownData.TryCreateFromBinary));
                    return (int)DialogResponses_FieldIndex.UnknownData;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Prompt = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)DialogResponses_FieldIndex.Prompt;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Speaker = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)DialogResponses_FieldIndex.Speaker;
                }
                case RecordTypeInts.TWAT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WalkAwayTopic = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)DialogResponses_FieldIndex.WalkAwayTopic;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AudioOutputOverride = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)DialogResponses_FieldIndex.AudioOutputOverride;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IDialogResponsesInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class DialogResponsesBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class DialogResponsesBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IDialogResponsesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponses_Registration.Instance;
        public new static DialogResponses_Registration Registration => DialogResponses_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogResponsesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogResponsesSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => DialogResponsesCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogResponsesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponsesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public DialogResponses.MajorFlag MajorFlags => (DialogResponses.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IDialogResponsesAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? DialogResponsesAdapterBinaryOverlay.DialogResponsesAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region DATA
        private int? _DATALocation;
        public ReadOnlyMemorySlice<Byte>? DATA => _DATALocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _DATALocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Flags
        private RangeInt32? _FlagsLocation;
        public IDialogResponseFlagsGetter? Flags => _FlagsLocation.HasValue ? DialogResponseFlagsBinaryOverlay.DialogResponseFlagsFactory(new OverlayStream(_data.Slice(_FlagsLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Topic
        private int? _TopicLocation;
        public FormLinkNullable<IDialogTopicGetter> Topic => _TopicLocation.HasValue ? new FormLinkNullable<IDialogTopicGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _TopicLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogTopicGetter>.Null;
        #endregion
        #region PreviousDialog
        private int? _PreviousDialogLocation;
        public FormLinkNullable<IDialogResponsesGetter> PreviousDialog => _PreviousDialogLocation.HasValue ? new FormLinkNullable<IDialogResponsesGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PreviousDialogLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogResponsesGetter>.Null;
        #endregion
        #region FavorLevel
        private int? _FavorLevelLocation;
        public FavorLevel? FavorLevel => _FavorLevelLocation.HasValue ? (FavorLevel)HeaderTranslation.ExtractSubrecordMemory(_data, _FavorLevelLocation!.Value, _package.MetaData.Constants)[0] : default(FavorLevel?);
        #endregion
        public IReadOnlyList<IFormLink<IDialogGetter>> LinkTo { get; private set; } = ListExt.Empty<IFormLink<IDialogGetter>>();
        #region ResponseData
        private int? _ResponseDataLocation;
        public FormLinkNullable<IDialogResponsesGetter> ResponseData => _ResponseDataLocation.HasValue ? new FormLinkNullable<IDialogResponsesGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ResponseDataLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogResponsesGetter>.Null;
        #endregion
        public IReadOnlyList<IDialogResponseGetter> Responses { get; private set; } = ListExt.Empty<DialogResponseBinaryOverlay>();
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        public IReadOnlyList<IDialogResponsesUnknownDataGetter> UnknownData { get; private set; } = ListExt.Empty<DialogResponsesUnknownDataBinaryOverlay>();
        #region Prompt
        private int? _PromptLocation;
        public ITranslatedStringGetter? Prompt => _PromptLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _PromptLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Speaker
        private int? _SpeakerLocation;
        public FormLinkNullable<INpcGetter> Speaker => _SpeakerLocation.HasValue ? new FormLinkNullable<INpcGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SpeakerLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<INpcGetter>.Null;
        #endregion
        #region WalkAwayTopic
        private int? _WalkAwayTopicLocation;
        public FormLinkNullable<IDialogTopicGetter> WalkAwayTopic => _WalkAwayTopicLocation.HasValue ? new FormLinkNullable<IDialogTopicGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _WalkAwayTopicLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogTopicGetter>.Null;
        #endregion
        #region AudioOutputOverride
        private int? _AudioOutputOverrideLocation;
        public FormLinkNullable<ISoundOutputModelGetter> AudioOutputOverride => _AudioOutputOverrideLocation.HasValue ? new FormLinkNullable<ISoundOutputModelGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AudioOutputOverrideLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundOutputModelGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogResponsesBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DialogResponsesBinaryOverlay DialogResponsesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new DialogResponsesBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static DialogResponsesBinaryOverlay DialogResponsesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DialogResponsesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)DialogResponses_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.DATA;
                }
                case RecordTypeInts.ENAM:
                {
                    _FlagsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)DialogResponses_FieldIndex.Flags;
                }
                case RecordTypeInts.TPIC:
                {
                    _TopicLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.Topic;
                }
                case RecordTypeInts.PNAM:
                {
                    _PreviousDialogLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.PreviousDialog;
                }
                case RecordTypeInts.CNAM:
                {
                    _FavorLevelLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.FavorLevel;
                }
                case RecordTypeInts.TCLT:
                {
                    this.LinkTo = BinaryOverlayList.FactoryByArray<IFormLink<IDialogGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IDialogGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)DialogResponses_FieldIndex.LinkTo;
                }
                case RecordTypeInts.DNAM:
                {
                    _ResponseDataLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.ResponseData;
                }
                case RecordTypeInts.TRDT:
                {
                    this.Responses = this.ParseRepeatedTypelessSubrecord<DialogResponseBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: RecordTypes.TRDT,
                        factory:  DialogResponseBinaryOverlay.DialogResponseFactory);
                    return (int)DialogResponses_FieldIndex.Responses;
                }
                case RecordTypeInts.CTDA:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)DialogResponses_FieldIndex.Conditions;
                }
                case RecordTypeInts.SCHR:
                case RecordTypeInts.QNAM:
                case RecordTypeInts.NEXT:
                {
                    this.UnknownData = this.ParseRepeatedTypelessSubrecord<DialogResponsesUnknownDataBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: DialogResponsesUnknownData_Registration.TriggeringRecordTypes,
                        factory:  DialogResponsesUnknownDataBinaryOverlay.DialogResponsesUnknownDataFactory);
                    return (int)DialogResponses_FieldIndex.UnknownData;
                }
                case RecordTypeInts.RNAM:
                {
                    _PromptLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.Prompt;
                }
                case RecordTypeInts.ANAM:
                {
                    _SpeakerLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.Speaker;
                }
                case RecordTypeInts.TWAT:
                {
                    _WalkAwayTopicLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.WalkAwayTopic;
                }
                case RecordTypeInts.ONAM:
                {
                    _AudioOutputOverrideLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.AudioOutputOverride;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogResponsesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogResponsesGetter rhs)) return false;
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDialogResponsesGetter? obj)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

