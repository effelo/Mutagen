/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Cell :
        Fallout4MajorRecord,
        ICellInternal,
        ILoquiObjectSetter<Cell>,
        IEquatable<ICellGetter>
    {
        #region Ctor
        protected Cell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ICellGetter.Name => this.Name;
        #endregion
        #region Flags
        public Cell.Flag Flags { get; set; } = default;
        #endregion
        #region Grid
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CellGrid? _Grid;
        public CellGrid? Grid
        {
            get => _Grid;
            set => _Grid = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellGridGetter? ICellGetter.Grid => this.Grid;
        #endregion
        #region Lighting
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CellLighting? _Lighting;
        public CellLighting? Lighting
        {
            get => _Lighting;
            set => _Lighting = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellLightingGetter? ICellGetter.Lighting => this.Lighting;
        #endregion
        #region OcclusionData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _OcclusionData;
        public MemorySlice<Byte>? OcclusionData
        {
            get => this._OcclusionData;
            set => this._OcclusionData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICellGetter.OcclusionData => this.OcclusionData;
        #endregion
        #region MaxHeightData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _MaxHeightData;
        public MemorySlice<Byte>? MaxHeightData
        {
            get => this._MaxHeightData;
            set => this._MaxHeightData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICellGetter.MaxHeightData => this.MaxHeightData;
        #endregion
        #region LightingTemplate
        public FormLink<ILightingTemplateGetter> LightingTemplate { get; set; } = new FormLink<ILightingTemplateGetter>();
        #endregion
        #region LNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _LNAM;
        public MemorySlice<Byte>? LNAM
        {
            get => this._LNAM;
            set => this._LNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICellGetter.LNAM => this.LNAM;
        #endregion
        #region WaterHeight
        public Single? WaterHeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICellGetter.WaterHeight => this.WaterHeight;
        #endregion
        #region WaterNoiseTexture
        public String? WaterNoiseTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICellGetter.WaterNoiseTexture => this.WaterNoiseTexture;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IRegionGetter>>? _Regions;
        public ExtendedList<IFormLink<IRegionGetter>>? Regions
        {
            get => this._Regions;
            set => this._Regions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IRegionGetter>>? ICellGetter.Regions => _Regions;
        #endregion

        #endregion
        #region Location
        public FormLinkNullable<ILocationGetter> Location { get; set; } = new FormLinkNullable<ILocationGetter>();
        #endregion
        #region XWCN
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XWCN;
        public MemorySlice<Byte>? XWCN
        {
            get => this._XWCN;
            set => this._XWCN = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICellGetter.XWCN => this.XWCN;
        #endregion
        #region XWCS
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XWCS;
        public MemorySlice<Byte>? XWCS
        {
            get => this._XWCS;
            set => this._XWCS = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICellGetter.XWCS => this.XWCS;
        #endregion
        #region WaterVelocity
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CellWaterVelocity? _WaterVelocity;
        public CellWaterVelocity? WaterVelocity
        {
            get => _WaterVelocity;
            set => _WaterVelocity = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellWaterVelocityGetter? ICellGetter.WaterVelocity => this.WaterVelocity;
        #endregion
        #region Water
        public FormLinkNullable<IWaterGetter> Water { get; set; } = new FormLinkNullable<IWaterGetter>();
        #endregion
        #region Ownership
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Ownership? _Ownership;
        public Ownership? Ownership
        {
            get => _Ownership;
            set => _Ownership = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOwnershipGetter? ICellGetter.Ownership => this.Ownership;
        #endregion
        #region LockList
        public FormLinkNullable<ILockListGetter> LockList { get; set; } = new FormLinkNullable<ILockListGetter>();
        #endregion
        #region WaterEnvironmentMap
        public String? WaterEnvironmentMap { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICellGetter.WaterEnvironmentMap => this.WaterEnvironmentMap;
        #endregion
        #region SkyAndWeatherFromRegion
        public FormLinkNullable<IRegionGetter> SkyAndWeatherFromRegion { get; set; } = new FormLinkNullable<IRegionGetter>();
        #endregion
        #region AcousticSpace
        public FormLinkNullable<IAcousticSpaceGetter> AcousticSpace { get; set; } = new FormLinkNullable<IAcousticSpaceGetter>();
        #endregion
        #region EncounterZone
        public FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; } = new FormLinkNullable<IEncounterZoneGetter>();
        #endregion
        #region Music
        public FormLinkNullable<IMusicTypeGetter> Music { get; set; } = new FormLinkNullable<IMusicTypeGetter>();
        #endregion
        #region ImageSpace
        public FormLinkNullable<IImageSpaceAdapterGetter> ImageSpace { get; set; } = new FormLinkNullable<IImageSpaceAdapterGetter>();
        #endregion
        #region Landscape
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Landscape? _Landscape;
        public Landscape? Landscape
        {
            get => _Landscape;
            set => _Landscape = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILandscapeGetter? ICellGetter.Landscape => this.Landscape;
        #endregion
        #region NavigationMeshes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ANavigationMesh> _NavigationMeshes = new ExtendedList<ANavigationMesh>();
        public ExtendedList<ANavigationMesh> NavigationMeshes
        {
            get => this._NavigationMeshes;
            protected set => this._NavigationMeshes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IANavigationMeshGetter> ICellGetter.NavigationMeshes => _NavigationMeshes;
        #endregion

        #endregion
        #region Timestamp
        public Int32 Timestamp { get; set; } = default;
        #endregion
        #region UnknownGroupData
        public Int32 UnknownGroupData { get; set; } = default;
        #endregion
        #region PersistentTimestamp
        public Int32 PersistentTimestamp { get; set; } = default;
        #endregion
        #region PersistentUnknownGroupData
        public Int32 PersistentUnknownGroupData { get; set; } = default;
        #endregion
        #region Persistent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IPlaced> _Persistent = new ExtendedList<IPlaced>();
        public ExtendedList<IPlaced> Persistent
        {
            get => this._Persistent;
            protected set => this._Persistent = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlacedGetter> ICellGetter.Persistent => _Persistent;
        #endregion

        #endregion
        #region TemporaryTimestamp
        public Int32 TemporaryTimestamp { get; set; } = default;
        #endregion
        #region TemporaryUnknownGroupData
        public Int32 TemporaryUnknownGroupData { get; set; } = default;
        #endregion
        #region Temporary
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IPlaced> _Temporary = new ExtendedList<IPlaced>();
        public ExtendedList<IPlaced> Temporary
        {
            get => this._Temporary;
            protected set => this._Temporary = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlacedGetter> ICellGetter.Temporary => _Temporary;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICellGetter rhs)) return false;
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICellGetter? obj)
        {
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CellCommon)((ICellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Flags = initialValue;
                this.Grid = new MaskItem<TItem, CellGrid.Mask<TItem>?>(initialValue, new CellGrid.Mask<TItem>(initialValue));
                this.Lighting = new MaskItem<TItem, CellLighting.Mask<TItem>?>(initialValue, new CellLighting.Mask<TItem>(initialValue));
                this.OcclusionData = initialValue;
                this.MaxHeightData = initialValue;
                this.LightingTemplate = initialValue;
                this.LNAM = initialValue;
                this.WaterHeight = initialValue;
                this.WaterNoiseTexture = initialValue;
                this.Regions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Location = initialValue;
                this.XWCN = initialValue;
                this.XWCS = initialValue;
                this.WaterVelocity = new MaskItem<TItem, CellWaterVelocity.Mask<TItem>?>(initialValue, new CellWaterVelocity.Mask<TItem>(initialValue));
                this.Water = initialValue;
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(initialValue, new Ownership.Mask<TItem>(initialValue));
                this.LockList = initialValue;
                this.WaterEnvironmentMap = initialValue;
                this.SkyAndWeatherFromRegion = initialValue;
                this.AcousticSpace = initialValue;
                this.EncounterZone = initialValue;
                this.Music = initialValue;
                this.ImageSpace = initialValue;
                this.Landscape = new MaskItem<TItem, Landscape.Mask<TItem>?>(initialValue, new Landscape.Mask<TItem>(initialValue));
                this.NavigationMeshes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ANavigationMesh.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ANavigationMesh.Mask<TItem>?>>());
                this.Timestamp = initialValue;
                this.UnknownGroupData = initialValue;
                this.PersistentTimestamp = initialValue;
                this.PersistentUnknownGroupData = initialValue;
                this.Persistent = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.TemporaryTimestamp = initialValue;
                this.TemporaryUnknownGroupData = initialValue;
                this.Temporary = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem Flags,
                TItem Grid,
                TItem Lighting,
                TItem OcclusionData,
                TItem MaxHeightData,
                TItem LightingTemplate,
                TItem LNAM,
                TItem WaterHeight,
                TItem WaterNoiseTexture,
                TItem Regions,
                TItem Location,
                TItem XWCN,
                TItem XWCS,
                TItem WaterVelocity,
                TItem Water,
                TItem Ownership,
                TItem LockList,
                TItem WaterEnvironmentMap,
                TItem SkyAndWeatherFromRegion,
                TItem AcousticSpace,
                TItem EncounterZone,
                TItem Music,
                TItem ImageSpace,
                TItem Landscape,
                TItem NavigationMeshes,
                TItem Timestamp,
                TItem UnknownGroupData,
                TItem PersistentTimestamp,
                TItem PersistentUnknownGroupData,
                TItem Persistent,
                TItem TemporaryTimestamp,
                TItem TemporaryUnknownGroupData,
                TItem Temporary)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Flags = Flags;
                this.Grid = new MaskItem<TItem, CellGrid.Mask<TItem>?>(Grid, new CellGrid.Mask<TItem>(Grid));
                this.Lighting = new MaskItem<TItem, CellLighting.Mask<TItem>?>(Lighting, new CellLighting.Mask<TItem>(Lighting));
                this.OcclusionData = OcclusionData;
                this.MaxHeightData = MaxHeightData;
                this.LightingTemplate = LightingTemplate;
                this.LNAM = LNAM;
                this.WaterHeight = WaterHeight;
                this.WaterNoiseTexture = WaterNoiseTexture;
                this.Regions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Regions, Enumerable.Empty<(int Index, TItem Value)>());
                this.Location = Location;
                this.XWCN = XWCN;
                this.XWCS = XWCS;
                this.WaterVelocity = new MaskItem<TItem, CellWaterVelocity.Mask<TItem>?>(WaterVelocity, new CellWaterVelocity.Mask<TItem>(WaterVelocity));
                this.Water = Water;
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(Ownership, new Ownership.Mask<TItem>(Ownership));
                this.LockList = LockList;
                this.WaterEnvironmentMap = WaterEnvironmentMap;
                this.SkyAndWeatherFromRegion = SkyAndWeatherFromRegion;
                this.AcousticSpace = AcousticSpace;
                this.EncounterZone = EncounterZone;
                this.Music = Music;
                this.ImageSpace = ImageSpace;
                this.Landscape = new MaskItem<TItem, Landscape.Mask<TItem>?>(Landscape, new Landscape.Mask<TItem>(Landscape));
                this.NavigationMeshes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ANavigationMesh.Mask<TItem>?>>?>(NavigationMeshes, Enumerable.Empty<MaskItemIndexed<TItem, ANavigationMesh.Mask<TItem>?>>());
                this.Timestamp = Timestamp;
                this.UnknownGroupData = UnknownGroupData;
                this.PersistentTimestamp = PersistentTimestamp;
                this.PersistentUnknownGroupData = PersistentUnknownGroupData;
                this.Persistent = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(Persistent, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.TemporaryTimestamp = TemporaryTimestamp;
                this.TemporaryUnknownGroupData = TemporaryUnknownGroupData;
                this.Temporary = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(Temporary, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Flags;
            public MaskItem<TItem, CellGrid.Mask<TItem>?>? Grid { get; set; }
            public MaskItem<TItem, CellLighting.Mask<TItem>?>? Lighting { get; set; }
            public TItem OcclusionData;
            public TItem MaxHeightData;
            public TItem LightingTemplate;
            public TItem LNAM;
            public TItem WaterHeight;
            public TItem WaterNoiseTexture;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Regions;
            public TItem Location;
            public TItem XWCN;
            public TItem XWCS;
            public MaskItem<TItem, CellWaterVelocity.Mask<TItem>?>? WaterVelocity { get; set; }
            public TItem Water;
            public MaskItem<TItem, Ownership.Mask<TItem>?>? Ownership { get; set; }
            public TItem LockList;
            public TItem WaterEnvironmentMap;
            public TItem SkyAndWeatherFromRegion;
            public TItem AcousticSpace;
            public TItem EncounterZone;
            public TItem Music;
            public TItem ImageSpace;
            public MaskItem<TItem, Landscape.Mask<TItem>?>? Landscape { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ANavigationMesh.Mask<TItem>?>>?>? NavigationMeshes;
            public TItem Timestamp;
            public TItem UnknownGroupData;
            public TItem PersistentTimestamp;
            public TItem PersistentUnknownGroupData;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>? Persistent;
            public TItem TemporaryTimestamp;
            public TItem TemporaryUnknownGroupData;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>? Temporary;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Grid, rhs.Grid)) return false;
                if (!object.Equals(this.Lighting, rhs.Lighting)) return false;
                if (!object.Equals(this.OcclusionData, rhs.OcclusionData)) return false;
                if (!object.Equals(this.MaxHeightData, rhs.MaxHeightData)) return false;
                if (!object.Equals(this.LightingTemplate, rhs.LightingTemplate)) return false;
                if (!object.Equals(this.LNAM, rhs.LNAM)) return false;
                if (!object.Equals(this.WaterHeight, rhs.WaterHeight)) return false;
                if (!object.Equals(this.WaterNoiseTexture, rhs.WaterNoiseTexture)) return false;
                if (!object.Equals(this.Regions, rhs.Regions)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.XWCN, rhs.XWCN)) return false;
                if (!object.Equals(this.XWCS, rhs.XWCS)) return false;
                if (!object.Equals(this.WaterVelocity, rhs.WaterVelocity)) return false;
                if (!object.Equals(this.Water, rhs.Water)) return false;
                if (!object.Equals(this.Ownership, rhs.Ownership)) return false;
                if (!object.Equals(this.LockList, rhs.LockList)) return false;
                if (!object.Equals(this.WaterEnvironmentMap, rhs.WaterEnvironmentMap)) return false;
                if (!object.Equals(this.SkyAndWeatherFromRegion, rhs.SkyAndWeatherFromRegion)) return false;
                if (!object.Equals(this.AcousticSpace, rhs.AcousticSpace)) return false;
                if (!object.Equals(this.EncounterZone, rhs.EncounterZone)) return false;
                if (!object.Equals(this.Music, rhs.Music)) return false;
                if (!object.Equals(this.ImageSpace, rhs.ImageSpace)) return false;
                if (!object.Equals(this.Landscape, rhs.Landscape)) return false;
                if (!object.Equals(this.NavigationMeshes, rhs.NavigationMeshes)) return false;
                if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
                if (!object.Equals(this.UnknownGroupData, rhs.UnknownGroupData)) return false;
                if (!object.Equals(this.PersistentTimestamp, rhs.PersistentTimestamp)) return false;
                if (!object.Equals(this.PersistentUnknownGroupData, rhs.PersistentUnknownGroupData)) return false;
                if (!object.Equals(this.Persistent, rhs.Persistent)) return false;
                if (!object.Equals(this.TemporaryTimestamp, rhs.TemporaryTimestamp)) return false;
                if (!object.Equals(this.TemporaryUnknownGroupData, rhs.TemporaryUnknownGroupData)) return false;
                if (!object.Equals(this.Temporary, rhs.Temporary)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.Grid);
                hash.Add(this.Lighting);
                hash.Add(this.OcclusionData);
                hash.Add(this.MaxHeightData);
                hash.Add(this.LightingTemplate);
                hash.Add(this.LNAM);
                hash.Add(this.WaterHeight);
                hash.Add(this.WaterNoiseTexture);
                hash.Add(this.Regions);
                hash.Add(this.Location);
                hash.Add(this.XWCN);
                hash.Add(this.XWCS);
                hash.Add(this.WaterVelocity);
                hash.Add(this.Water);
                hash.Add(this.Ownership);
                hash.Add(this.LockList);
                hash.Add(this.WaterEnvironmentMap);
                hash.Add(this.SkyAndWeatherFromRegion);
                hash.Add(this.AcousticSpace);
                hash.Add(this.EncounterZone);
                hash.Add(this.Music);
                hash.Add(this.ImageSpace);
                hash.Add(this.Landscape);
                hash.Add(this.NavigationMeshes);
                hash.Add(this.Timestamp);
                hash.Add(this.UnknownGroupData);
                hash.Add(this.PersistentTimestamp);
                hash.Add(this.PersistentUnknownGroupData);
                hash.Add(this.Persistent);
                hash.Add(this.TemporaryTimestamp);
                hash.Add(this.TemporaryUnknownGroupData);
                hash.Add(this.Temporary);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (Grid != null)
                {
                    if (!eval(this.Grid.Overall)) return false;
                    if (this.Grid.Specific != null && !this.Grid.Specific.All(eval)) return false;
                }
                if (Lighting != null)
                {
                    if (!eval(this.Lighting.Overall)) return false;
                    if (this.Lighting.Specific != null && !this.Lighting.Specific.All(eval)) return false;
                }
                if (!eval(this.OcclusionData)) return false;
                if (!eval(this.MaxHeightData)) return false;
                if (!eval(this.LightingTemplate)) return false;
                if (!eval(this.LNAM)) return false;
                if (!eval(this.WaterHeight)) return false;
                if (!eval(this.WaterNoiseTexture)) return false;
                if (this.Regions != null)
                {
                    if (!eval(this.Regions.Overall)) return false;
                    if (this.Regions.Specific != null)
                    {
                        foreach (var item in this.Regions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Location)) return false;
                if (!eval(this.XWCN)) return false;
                if (!eval(this.XWCS)) return false;
                if (WaterVelocity != null)
                {
                    if (!eval(this.WaterVelocity.Overall)) return false;
                    if (this.WaterVelocity.Specific != null && !this.WaterVelocity.Specific.All(eval)) return false;
                }
                if (!eval(this.Water)) return false;
                if (Ownership != null)
                {
                    if (!eval(this.Ownership.Overall)) return false;
                    if (this.Ownership.Specific != null && !this.Ownership.Specific.All(eval)) return false;
                }
                if (!eval(this.LockList)) return false;
                if (!eval(this.WaterEnvironmentMap)) return false;
                if (!eval(this.SkyAndWeatherFromRegion)) return false;
                if (!eval(this.AcousticSpace)) return false;
                if (!eval(this.EncounterZone)) return false;
                if (!eval(this.Music)) return false;
                if (!eval(this.ImageSpace)) return false;
                if (Landscape != null)
                {
                    if (!eval(this.Landscape.Overall)) return false;
                    if (this.Landscape.Specific != null && !this.Landscape.Specific.All(eval)) return false;
                }
                if (this.NavigationMeshes != null)
                {
                    if (!eval(this.NavigationMeshes.Overall)) return false;
                    if (this.NavigationMeshes.Specific != null)
                    {
                        foreach (var item in this.NavigationMeshes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Timestamp)) return false;
                if (!eval(this.UnknownGroupData)) return false;
                if (!eval(this.PersistentTimestamp)) return false;
                if (!eval(this.PersistentUnknownGroupData)) return false;
                if (this.Persistent != null)
                {
                    if (!eval(this.Persistent.Overall)) return false;
                    if (this.Persistent.Specific != null)
                    {
                        foreach (var item in this.Persistent.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (!eval(this.TemporaryTimestamp)) return false;
                if (!eval(this.TemporaryUnknownGroupData)) return false;
                if (this.Temporary != null)
                {
                    if (!eval(this.Temporary.Overall)) return false;
                    if (this.Temporary.Specific != null)
                    {
                        foreach (var item in this.Temporary.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (Grid != null)
                {
                    if (eval(this.Grid.Overall)) return true;
                    if (this.Grid.Specific != null && this.Grid.Specific.Any(eval)) return true;
                }
                if (Lighting != null)
                {
                    if (eval(this.Lighting.Overall)) return true;
                    if (this.Lighting.Specific != null && this.Lighting.Specific.Any(eval)) return true;
                }
                if (eval(this.OcclusionData)) return true;
                if (eval(this.MaxHeightData)) return true;
                if (eval(this.LightingTemplate)) return true;
                if (eval(this.LNAM)) return true;
                if (eval(this.WaterHeight)) return true;
                if (eval(this.WaterNoiseTexture)) return true;
                if (this.Regions != null)
                {
                    if (eval(this.Regions.Overall)) return true;
                    if (this.Regions.Specific != null)
                    {
                        foreach (var item in this.Regions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Location)) return true;
                if (eval(this.XWCN)) return true;
                if (eval(this.XWCS)) return true;
                if (WaterVelocity != null)
                {
                    if (eval(this.WaterVelocity.Overall)) return true;
                    if (this.WaterVelocity.Specific != null && this.WaterVelocity.Specific.Any(eval)) return true;
                }
                if (eval(this.Water)) return true;
                if (Ownership != null)
                {
                    if (eval(this.Ownership.Overall)) return true;
                    if (this.Ownership.Specific != null && this.Ownership.Specific.Any(eval)) return true;
                }
                if (eval(this.LockList)) return true;
                if (eval(this.WaterEnvironmentMap)) return true;
                if (eval(this.SkyAndWeatherFromRegion)) return true;
                if (eval(this.AcousticSpace)) return true;
                if (eval(this.EncounterZone)) return true;
                if (eval(this.Music)) return true;
                if (eval(this.ImageSpace)) return true;
                if (Landscape != null)
                {
                    if (eval(this.Landscape.Overall)) return true;
                    if (this.Landscape.Specific != null && this.Landscape.Specific.Any(eval)) return true;
                }
                if (this.NavigationMeshes != null)
                {
                    if (eval(this.NavigationMeshes.Overall)) return true;
                    if (this.NavigationMeshes.Specific != null)
                    {
                        foreach (var item in this.NavigationMeshes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Timestamp)) return true;
                if (eval(this.UnknownGroupData)) return true;
                if (eval(this.PersistentTimestamp)) return true;
                if (eval(this.PersistentUnknownGroupData)) return true;
                if (this.Persistent != null)
                {
                    if (eval(this.Persistent.Overall)) return true;
                    if (this.Persistent.Specific != null)
                    {
                        foreach (var item in this.Persistent.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (eval(this.TemporaryTimestamp)) return true;
                if (eval(this.TemporaryUnknownGroupData)) return true;
                if (this.Temporary != null)
                {
                    if (eval(this.Temporary.Overall)) return true;
                    if (this.Temporary.Specific != null)
                    {
                        foreach (var item in this.Temporary.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Cell.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.Grid = this.Grid == null ? null : new MaskItem<R, CellGrid.Mask<R>?>(eval(this.Grid.Overall), this.Grid.Specific?.Translate(eval));
                obj.Lighting = this.Lighting == null ? null : new MaskItem<R, CellLighting.Mask<R>?>(eval(this.Lighting.Overall), this.Lighting.Specific?.Translate(eval));
                obj.OcclusionData = eval(this.OcclusionData);
                obj.MaxHeightData = eval(this.MaxHeightData);
                obj.LightingTemplate = eval(this.LightingTemplate);
                obj.LNAM = eval(this.LNAM);
                obj.WaterHeight = eval(this.WaterHeight);
                obj.WaterNoiseTexture = eval(this.WaterNoiseTexture);
                if (Regions != null)
                {
                    obj.Regions = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Regions.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Regions.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Regions.Specific = l;
                        foreach (var item in Regions.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Location = eval(this.Location);
                obj.XWCN = eval(this.XWCN);
                obj.XWCS = eval(this.XWCS);
                obj.WaterVelocity = this.WaterVelocity == null ? null : new MaskItem<R, CellWaterVelocity.Mask<R>?>(eval(this.WaterVelocity.Overall), this.WaterVelocity.Specific?.Translate(eval));
                obj.Water = eval(this.Water);
                obj.Ownership = this.Ownership == null ? null : new MaskItem<R, Ownership.Mask<R>?>(eval(this.Ownership.Overall), this.Ownership.Specific?.Translate(eval));
                obj.LockList = eval(this.LockList);
                obj.WaterEnvironmentMap = eval(this.WaterEnvironmentMap);
                obj.SkyAndWeatherFromRegion = eval(this.SkyAndWeatherFromRegion);
                obj.AcousticSpace = eval(this.AcousticSpace);
                obj.EncounterZone = eval(this.EncounterZone);
                obj.Music = eval(this.Music);
                obj.ImageSpace = eval(this.ImageSpace);
                obj.Landscape = this.Landscape == null ? null : new MaskItem<R, Landscape.Mask<R>?>(eval(this.Landscape.Overall), this.Landscape.Specific?.Translate(eval));
                if (NavigationMeshes != null)
                {
                    obj.NavigationMeshes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ANavigationMesh.Mask<R>?>>?>(eval(this.NavigationMeshes.Overall), Enumerable.Empty<MaskItemIndexed<R, ANavigationMesh.Mask<R>?>>());
                    if (NavigationMeshes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ANavigationMesh.Mask<R>?>>();
                        obj.NavigationMeshes.Specific = l;
                        foreach (var item in NavigationMeshes.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ANavigationMesh.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ANavigationMesh.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Timestamp = eval(this.Timestamp);
                obj.UnknownGroupData = eval(this.UnknownGroupData);
                obj.PersistentTimestamp = eval(this.PersistentTimestamp);
                obj.PersistentUnknownGroupData = eval(this.PersistentUnknownGroupData);
                if (Persistent != null)
                {
                    obj.Persistent = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>?>(eval(this.Persistent.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (Persistent.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.Persistent.Specific = l;
                        foreach (var item in Persistent.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.TemporaryTimestamp = eval(this.TemporaryTimestamp);
                obj.TemporaryUnknownGroupData = eval(this.TemporaryUnknownGroupData);
                if (Temporary != null)
                {
                    obj.Temporary = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>?>(eval(this.Temporary.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (Temporary.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.Temporary.Specific = l;
                        foreach (var item in Temporary.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Cell.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Cell.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Cell.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Grid?.Overall ?? true)
                    {
                        Grid?.ToString(fg);
                    }
                    if (printMask?.Lighting?.Overall ?? true)
                    {
                        Lighting?.ToString(fg);
                    }
                    if (printMask?.OcclusionData ?? true)
                    {
                        fg.AppendItem(OcclusionData, "OcclusionData");
                    }
                    if (printMask?.MaxHeightData ?? true)
                    {
                        fg.AppendItem(MaxHeightData, "MaxHeightData");
                    }
                    if (printMask?.LightingTemplate ?? true)
                    {
                        fg.AppendItem(LightingTemplate, "LightingTemplate");
                    }
                    if (printMask?.LNAM ?? true)
                    {
                        fg.AppendItem(LNAM, "LNAM");
                    }
                    if (printMask?.WaterHeight ?? true)
                    {
                        fg.AppendItem(WaterHeight, "WaterHeight");
                    }
                    if (printMask?.WaterNoiseTexture ?? true)
                    {
                        fg.AppendItem(WaterNoiseTexture, "WaterNoiseTexture");
                    }
                    if ((printMask?.Regions?.Overall ?? true)
                        && Regions.TryGet(out var RegionsItem))
                    {
                        fg.AppendLine("Regions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RegionsItem.Overall);
                            if (RegionsItem.Specific != null)
                            {
                                foreach (var subItem in RegionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Location ?? true)
                    {
                        fg.AppendItem(Location, "Location");
                    }
                    if (printMask?.XWCN ?? true)
                    {
                        fg.AppendItem(XWCN, "XWCN");
                    }
                    if (printMask?.XWCS ?? true)
                    {
                        fg.AppendItem(XWCS, "XWCS");
                    }
                    if (printMask?.WaterVelocity?.Overall ?? true)
                    {
                        WaterVelocity?.ToString(fg);
                    }
                    if (printMask?.Water ?? true)
                    {
                        fg.AppendItem(Water, "Water");
                    }
                    if (printMask?.Ownership?.Overall ?? true)
                    {
                        Ownership?.ToString(fg);
                    }
                    if (printMask?.LockList ?? true)
                    {
                        fg.AppendItem(LockList, "LockList");
                    }
                    if (printMask?.WaterEnvironmentMap ?? true)
                    {
                        fg.AppendItem(WaterEnvironmentMap, "WaterEnvironmentMap");
                    }
                    if (printMask?.SkyAndWeatherFromRegion ?? true)
                    {
                        fg.AppendItem(SkyAndWeatherFromRegion, "SkyAndWeatherFromRegion");
                    }
                    if (printMask?.AcousticSpace ?? true)
                    {
                        fg.AppendItem(AcousticSpace, "AcousticSpace");
                    }
                    if (printMask?.EncounterZone ?? true)
                    {
                        fg.AppendItem(EncounterZone, "EncounterZone");
                    }
                    if (printMask?.Music ?? true)
                    {
                        fg.AppendItem(Music, "Music");
                    }
                    if (printMask?.ImageSpace ?? true)
                    {
                        fg.AppendItem(ImageSpace, "ImageSpace");
                    }
                    if (printMask?.Landscape?.Overall ?? true)
                    {
                        Landscape?.ToString(fg);
                    }
                    if ((printMask?.NavigationMeshes?.Overall ?? true)
                        && NavigationMeshes.TryGet(out var NavigationMeshesItem))
                    {
                        fg.AppendLine("NavigationMeshes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(NavigationMeshesItem.Overall);
                            if (NavigationMeshesItem.Specific != null)
                            {
                                foreach (var subItem in NavigationMeshesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Timestamp ?? true)
                    {
                        fg.AppendItem(Timestamp, "Timestamp");
                    }
                    if (printMask?.UnknownGroupData ?? true)
                    {
                        fg.AppendItem(UnknownGroupData, "UnknownGroupData");
                    }
                    if (printMask?.PersistentTimestamp ?? true)
                    {
                        fg.AppendItem(PersistentTimestamp, "PersistentTimestamp");
                    }
                    if (printMask?.PersistentUnknownGroupData ?? true)
                    {
                        fg.AppendItem(PersistentUnknownGroupData, "PersistentUnknownGroupData");
                    }
                    if ((printMask?.Persistent?.Overall ?? true)
                        && Persistent.TryGet(out var PersistentItem))
                    {
                        fg.AppendLine("Persistent =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PersistentItem.Overall);
                            if (PersistentItem.Specific != null)
                            {
                                foreach (var subItem in PersistentItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.TemporaryTimestamp ?? true)
                    {
                        fg.AppendItem(TemporaryTimestamp, "TemporaryTimestamp");
                    }
                    if (printMask?.TemporaryUnknownGroupData ?? true)
                    {
                        fg.AppendItem(TemporaryUnknownGroupData, "TemporaryUnknownGroupData");
                    }
                    if ((printMask?.Temporary?.Overall ?? true)
                        && Temporary.TryGet(out var TemporaryItem))
                    {
                        fg.AppendLine("Temporary =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TemporaryItem.Overall);
                            if (TemporaryItem.Specific != null)
                            {
                                foreach (var subItem in TemporaryItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Flags;
            public MaskItem<Exception?, CellGrid.ErrorMask?>? Grid;
            public MaskItem<Exception?, CellLighting.ErrorMask?>? Lighting;
            public Exception? OcclusionData;
            public Exception? MaxHeightData;
            public Exception? LightingTemplate;
            public Exception? LNAM;
            public Exception? WaterHeight;
            public Exception? WaterNoiseTexture;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Regions;
            public Exception? Location;
            public Exception? XWCN;
            public Exception? XWCS;
            public MaskItem<Exception?, CellWaterVelocity.ErrorMask?>? WaterVelocity;
            public Exception? Water;
            public MaskItem<Exception?, Ownership.ErrorMask?>? Ownership;
            public Exception? LockList;
            public Exception? WaterEnvironmentMap;
            public Exception? SkyAndWeatherFromRegion;
            public Exception? AcousticSpace;
            public Exception? EncounterZone;
            public Exception? Music;
            public Exception? ImageSpace;
            public MaskItem<Exception?, Landscape.ErrorMask?>? Landscape;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ANavigationMesh.ErrorMask?>>?>? NavigationMeshes;
            public Exception? Timestamp;
            public Exception? UnknownGroupData;
            public Exception? PersistentTimestamp;
            public Exception? PersistentUnknownGroupData;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? Persistent;
            public Exception? TemporaryTimestamp;
            public Exception? TemporaryUnknownGroupData;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? Temporary;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        return Name;
                    case Cell_FieldIndex.Flags:
                        return Flags;
                    case Cell_FieldIndex.Grid:
                        return Grid;
                    case Cell_FieldIndex.Lighting:
                        return Lighting;
                    case Cell_FieldIndex.OcclusionData:
                        return OcclusionData;
                    case Cell_FieldIndex.MaxHeightData:
                        return MaxHeightData;
                    case Cell_FieldIndex.LightingTemplate:
                        return LightingTemplate;
                    case Cell_FieldIndex.LNAM:
                        return LNAM;
                    case Cell_FieldIndex.WaterHeight:
                        return WaterHeight;
                    case Cell_FieldIndex.WaterNoiseTexture:
                        return WaterNoiseTexture;
                    case Cell_FieldIndex.Regions:
                        return Regions;
                    case Cell_FieldIndex.Location:
                        return Location;
                    case Cell_FieldIndex.XWCN:
                        return XWCN;
                    case Cell_FieldIndex.XWCS:
                        return XWCS;
                    case Cell_FieldIndex.WaterVelocity:
                        return WaterVelocity;
                    case Cell_FieldIndex.Water:
                        return Water;
                    case Cell_FieldIndex.Ownership:
                        return Ownership;
                    case Cell_FieldIndex.LockList:
                        return LockList;
                    case Cell_FieldIndex.WaterEnvironmentMap:
                        return WaterEnvironmentMap;
                    case Cell_FieldIndex.SkyAndWeatherFromRegion:
                        return SkyAndWeatherFromRegion;
                    case Cell_FieldIndex.AcousticSpace:
                        return AcousticSpace;
                    case Cell_FieldIndex.EncounterZone:
                        return EncounterZone;
                    case Cell_FieldIndex.Music:
                        return Music;
                    case Cell_FieldIndex.ImageSpace:
                        return ImageSpace;
                    case Cell_FieldIndex.Landscape:
                        return Landscape;
                    case Cell_FieldIndex.NavigationMeshes:
                        return NavigationMeshes;
                    case Cell_FieldIndex.Timestamp:
                        return Timestamp;
                    case Cell_FieldIndex.UnknownGroupData:
                        return UnknownGroupData;
                    case Cell_FieldIndex.PersistentTimestamp:
                        return PersistentTimestamp;
                    case Cell_FieldIndex.PersistentUnknownGroupData:
                        return PersistentUnknownGroupData;
                    case Cell_FieldIndex.Persistent:
                        return Persistent;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        return TemporaryTimestamp;
                    case Cell_FieldIndex.TemporaryUnknownGroupData:
                        return TemporaryUnknownGroupData;
                    case Cell_FieldIndex.Temporary:
                        return Temporary;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Cell_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Cell_FieldIndex.Grid:
                        this.Grid = new MaskItem<Exception?, CellGrid.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Lighting:
                        this.Lighting = new MaskItem<Exception?, CellLighting.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.OcclusionData:
                        this.OcclusionData = ex;
                        break;
                    case Cell_FieldIndex.MaxHeightData:
                        this.MaxHeightData = ex;
                        break;
                    case Cell_FieldIndex.LightingTemplate:
                        this.LightingTemplate = ex;
                        break;
                    case Cell_FieldIndex.LNAM:
                        this.LNAM = ex;
                        break;
                    case Cell_FieldIndex.WaterHeight:
                        this.WaterHeight = ex;
                        break;
                    case Cell_FieldIndex.WaterNoiseTexture:
                        this.WaterNoiseTexture = ex;
                        break;
                    case Cell_FieldIndex.Regions:
                        this.Regions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Cell_FieldIndex.Location:
                        this.Location = ex;
                        break;
                    case Cell_FieldIndex.XWCN:
                        this.XWCN = ex;
                        break;
                    case Cell_FieldIndex.XWCS:
                        this.XWCS = ex;
                        break;
                    case Cell_FieldIndex.WaterVelocity:
                        this.WaterVelocity = new MaskItem<Exception?, CellWaterVelocity.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Water:
                        this.Water = ex;
                        break;
                    case Cell_FieldIndex.Ownership:
                        this.Ownership = new MaskItem<Exception?, Ownership.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.LockList:
                        this.LockList = ex;
                        break;
                    case Cell_FieldIndex.WaterEnvironmentMap:
                        this.WaterEnvironmentMap = ex;
                        break;
                    case Cell_FieldIndex.SkyAndWeatherFromRegion:
                        this.SkyAndWeatherFromRegion = ex;
                        break;
                    case Cell_FieldIndex.AcousticSpace:
                        this.AcousticSpace = ex;
                        break;
                    case Cell_FieldIndex.EncounterZone:
                        this.EncounterZone = ex;
                        break;
                    case Cell_FieldIndex.Music:
                        this.Music = ex;
                        break;
                    case Cell_FieldIndex.ImageSpace:
                        this.ImageSpace = ex;
                        break;
                    case Cell_FieldIndex.Landscape:
                        this.Landscape = new MaskItem<Exception?, Landscape.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.NavigationMeshes:
                        this.NavigationMeshes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ANavigationMesh.ErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.Timestamp:
                        this.Timestamp = ex;
                        break;
                    case Cell_FieldIndex.UnknownGroupData:
                        this.UnknownGroupData = ex;
                        break;
                    case Cell_FieldIndex.PersistentTimestamp:
                        this.PersistentTimestamp = ex;
                        break;
                    case Cell_FieldIndex.PersistentUnknownGroupData:
                        this.PersistentUnknownGroupData = ex;
                        break;
                    case Cell_FieldIndex.Persistent:
                        this.Persistent = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        this.TemporaryTimestamp = ex;
                        break;
                    case Cell_FieldIndex.TemporaryUnknownGroupData:
                        this.TemporaryUnknownGroupData = ex;
                        break;
                    case Cell_FieldIndex.Temporary:
                        this.Temporary = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Grid:
                        this.Grid = (MaskItem<Exception?, CellGrid.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Lighting:
                        this.Lighting = (MaskItem<Exception?, CellLighting.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.OcclusionData:
                        this.OcclusionData = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.MaxHeightData:
                        this.MaxHeightData = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.LightingTemplate:
                        this.LightingTemplate = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.LNAM:
                        this.LNAM = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.WaterHeight:
                        this.WaterHeight = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.WaterNoiseTexture:
                        this.WaterNoiseTexture = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Regions:
                        this.Regions = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Cell_FieldIndex.Location:
                        this.Location = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.XWCN:
                        this.XWCN = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.XWCS:
                        this.XWCS = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.WaterVelocity:
                        this.WaterVelocity = (MaskItem<Exception?, CellWaterVelocity.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Water:
                        this.Water = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Ownership:
                        this.Ownership = (MaskItem<Exception?, Ownership.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.LockList:
                        this.LockList = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.WaterEnvironmentMap:
                        this.WaterEnvironmentMap = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.SkyAndWeatherFromRegion:
                        this.SkyAndWeatherFromRegion = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.AcousticSpace:
                        this.AcousticSpace = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.EncounterZone:
                        this.EncounterZone = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Music:
                        this.Music = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.ImageSpace:
                        this.ImageSpace = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Landscape:
                        this.Landscape = (MaskItem<Exception?, Landscape.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.NavigationMeshes:
                        this.NavigationMeshes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ANavigationMesh.ErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.Timestamp:
                        this.Timestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.UnknownGroupData:
                        this.UnknownGroupData = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.PersistentTimestamp:
                        this.PersistentTimestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.PersistentUnknownGroupData:
                        this.PersistentUnknownGroupData = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Persistent:
                        this.Persistent = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        this.TemporaryTimestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.TemporaryUnknownGroupData:
                        this.TemporaryUnknownGroupData = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Temporary:
                        this.Temporary = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (Grid != null) return true;
                if (Lighting != null) return true;
                if (OcclusionData != null) return true;
                if (MaxHeightData != null) return true;
                if (LightingTemplate != null) return true;
                if (LNAM != null) return true;
                if (WaterHeight != null) return true;
                if (WaterNoiseTexture != null) return true;
                if (Regions != null) return true;
                if (Location != null) return true;
                if (XWCN != null) return true;
                if (XWCS != null) return true;
                if (WaterVelocity != null) return true;
                if (Water != null) return true;
                if (Ownership != null) return true;
                if (LockList != null) return true;
                if (WaterEnvironmentMap != null) return true;
                if (SkyAndWeatherFromRegion != null) return true;
                if (AcousticSpace != null) return true;
                if (EncounterZone != null) return true;
                if (Music != null) return true;
                if (ImageSpace != null) return true;
                if (Landscape != null) return true;
                if (NavigationMeshes != null) return true;
                if (Timestamp != null) return true;
                if (UnknownGroupData != null) return true;
                if (PersistentTimestamp != null) return true;
                if (PersistentUnknownGroupData != null) return true;
                if (Persistent != null) return true;
                if (TemporaryTimestamp != null) return true;
                if (TemporaryUnknownGroupData != null) return true;
                if (Temporary != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Flags, "Flags");
                Grid?.ToString(fg);
                Lighting?.ToString(fg);
                fg.AppendItem(OcclusionData, "OcclusionData");
                fg.AppendItem(MaxHeightData, "MaxHeightData");
                fg.AppendItem(LightingTemplate, "LightingTemplate");
                fg.AppendItem(LNAM, "LNAM");
                fg.AppendItem(WaterHeight, "WaterHeight");
                fg.AppendItem(WaterNoiseTexture, "WaterNoiseTexture");
                if (Regions.TryGet(out var RegionsItem))
                {
                    fg.AppendLine("Regions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RegionsItem.Overall);
                        if (RegionsItem.Specific != null)
                        {
                            foreach (var subItem in RegionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Location, "Location");
                fg.AppendItem(XWCN, "XWCN");
                fg.AppendItem(XWCS, "XWCS");
                WaterVelocity?.ToString(fg);
                fg.AppendItem(Water, "Water");
                Ownership?.ToString(fg);
                fg.AppendItem(LockList, "LockList");
                fg.AppendItem(WaterEnvironmentMap, "WaterEnvironmentMap");
                fg.AppendItem(SkyAndWeatherFromRegion, "SkyAndWeatherFromRegion");
                fg.AppendItem(AcousticSpace, "AcousticSpace");
                fg.AppendItem(EncounterZone, "EncounterZone");
                fg.AppendItem(Music, "Music");
                fg.AppendItem(ImageSpace, "ImageSpace");
                Landscape?.ToString(fg);
                if (NavigationMeshes.TryGet(out var NavigationMeshesItem))
                {
                    fg.AppendLine("NavigationMeshes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(NavigationMeshesItem.Overall);
                        if (NavigationMeshesItem.Specific != null)
                        {
                            foreach (var subItem in NavigationMeshesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Timestamp, "Timestamp");
                fg.AppendItem(UnknownGroupData, "UnknownGroupData");
                fg.AppendItem(PersistentTimestamp, "PersistentTimestamp");
                fg.AppendItem(PersistentUnknownGroupData, "PersistentUnknownGroupData");
                if (Persistent.TryGet(out var PersistentItem))
                {
                    fg.AppendLine("Persistent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PersistentItem.Overall);
                        if (PersistentItem.Specific != null)
                        {
                            foreach (var subItem in PersistentItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(TemporaryTimestamp, "TemporaryTimestamp");
                fg.AppendItem(TemporaryUnknownGroupData, "TemporaryUnknownGroupData");
                if (Temporary.TryGet(out var TemporaryItem))
                {
                    fg.AppendLine("Temporary =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TemporaryItem.Overall);
                        if (TemporaryItem.Specific != null)
                        {
                            foreach (var subItem in TemporaryItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Grid = this.Grid.Combine(rhs.Grid, (l, r) => l.Combine(r));
                ret.Lighting = this.Lighting.Combine(rhs.Lighting, (l, r) => l.Combine(r));
                ret.OcclusionData = this.OcclusionData.Combine(rhs.OcclusionData);
                ret.MaxHeightData = this.MaxHeightData.Combine(rhs.MaxHeightData);
                ret.LightingTemplate = this.LightingTemplate.Combine(rhs.LightingTemplate);
                ret.LNAM = this.LNAM.Combine(rhs.LNAM);
                ret.WaterHeight = this.WaterHeight.Combine(rhs.WaterHeight);
                ret.WaterNoiseTexture = this.WaterNoiseTexture.Combine(rhs.WaterNoiseTexture);
                ret.Regions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Regions?.Overall, rhs.Regions?.Overall), ExceptionExt.Combine(this.Regions?.Specific, rhs.Regions?.Specific));
                ret.Location = this.Location.Combine(rhs.Location);
                ret.XWCN = this.XWCN.Combine(rhs.XWCN);
                ret.XWCS = this.XWCS.Combine(rhs.XWCS);
                ret.WaterVelocity = this.WaterVelocity.Combine(rhs.WaterVelocity, (l, r) => l.Combine(r));
                ret.Water = this.Water.Combine(rhs.Water);
                ret.Ownership = this.Ownership.Combine(rhs.Ownership, (l, r) => l.Combine(r));
                ret.LockList = this.LockList.Combine(rhs.LockList);
                ret.WaterEnvironmentMap = this.WaterEnvironmentMap.Combine(rhs.WaterEnvironmentMap);
                ret.SkyAndWeatherFromRegion = this.SkyAndWeatherFromRegion.Combine(rhs.SkyAndWeatherFromRegion);
                ret.AcousticSpace = this.AcousticSpace.Combine(rhs.AcousticSpace);
                ret.EncounterZone = this.EncounterZone.Combine(rhs.EncounterZone);
                ret.Music = this.Music.Combine(rhs.Music);
                ret.ImageSpace = this.ImageSpace.Combine(rhs.ImageSpace);
                ret.Landscape = this.Landscape.Combine(rhs.Landscape, (l, r) => l.Combine(r));
                ret.NavigationMeshes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ANavigationMesh.ErrorMask?>>?>(ExceptionExt.Combine(this.NavigationMeshes?.Overall, rhs.NavigationMeshes?.Overall), ExceptionExt.Combine(this.NavigationMeshes?.Specific, rhs.NavigationMeshes?.Specific));
                ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
                ret.UnknownGroupData = this.UnknownGroupData.Combine(rhs.UnknownGroupData);
                ret.PersistentTimestamp = this.PersistentTimestamp.Combine(rhs.PersistentTimestamp);
                ret.PersistentUnknownGroupData = this.PersistentUnknownGroupData.Combine(rhs.PersistentUnknownGroupData);
                ret.Persistent = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ExceptionExt.Combine(this.Persistent?.Overall, rhs.Persistent?.Overall), ExceptionExt.Combine(this.Persistent?.Specific, rhs.Persistent?.Specific));
                ret.TemporaryTimestamp = this.TemporaryTimestamp.Combine(rhs.TemporaryTimestamp);
                ret.TemporaryUnknownGroupData = this.TemporaryUnknownGroupData.Combine(rhs.TemporaryUnknownGroupData);
                ret.Temporary = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ExceptionExt.Combine(this.Temporary?.Overall, rhs.Temporary?.Overall), ExceptionExt.Combine(this.Temporary?.Specific, rhs.Temporary?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Flags;
            public CellGrid.TranslationMask? Grid;
            public CellLighting.TranslationMask? Lighting;
            public bool OcclusionData;
            public bool MaxHeightData;
            public bool LightingTemplate;
            public bool LNAM;
            public bool WaterHeight;
            public bool WaterNoiseTexture;
            public bool Regions;
            public bool Location;
            public bool XWCN;
            public bool XWCS;
            public CellWaterVelocity.TranslationMask? WaterVelocity;
            public bool Water;
            public Ownership.TranslationMask? Ownership;
            public bool LockList;
            public bool WaterEnvironmentMap;
            public bool SkyAndWeatherFromRegion;
            public bool AcousticSpace;
            public bool EncounterZone;
            public bool Music;
            public bool ImageSpace;
            public Landscape.TranslationMask? Landscape;
            public ANavigationMesh.TranslationMask? NavigationMeshes;
            public bool Timestamp;
            public bool UnknownGroupData;
            public bool PersistentTimestamp;
            public bool PersistentUnknownGroupData;
            public bool Persistent;
            public bool TemporaryTimestamp;
            public bool TemporaryUnknownGroupData;
            public bool Temporary;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.OcclusionData = defaultOn;
                this.MaxHeightData = defaultOn;
                this.LightingTemplate = defaultOn;
                this.LNAM = defaultOn;
                this.WaterHeight = defaultOn;
                this.WaterNoiseTexture = defaultOn;
                this.Regions = defaultOn;
                this.Location = defaultOn;
                this.XWCN = defaultOn;
                this.XWCS = defaultOn;
                this.Water = defaultOn;
                this.LockList = defaultOn;
                this.WaterEnvironmentMap = defaultOn;
                this.SkyAndWeatherFromRegion = defaultOn;
                this.AcousticSpace = defaultOn;
                this.EncounterZone = defaultOn;
                this.Music = defaultOn;
                this.ImageSpace = defaultOn;
                this.Timestamp = defaultOn;
                this.UnknownGroupData = defaultOn;
                this.PersistentTimestamp = defaultOn;
                this.PersistentUnknownGroupData = defaultOn;
                this.Persistent = defaultOn;
                this.TemporaryTimestamp = defaultOn;
                this.TemporaryUnknownGroupData = defaultOn;
                this.Temporary = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((Grid != null ? Grid.OnOverall : DefaultOn, Grid?.GetCrystal()));
                ret.Add((Lighting != null ? Lighting.OnOverall : DefaultOn, Lighting?.GetCrystal()));
                ret.Add((OcclusionData, null));
                ret.Add((MaxHeightData, null));
                ret.Add((LightingTemplate, null));
                ret.Add((LNAM, null));
                ret.Add((WaterHeight, null));
                ret.Add((WaterNoiseTexture, null));
                ret.Add((Regions, null));
                ret.Add((Location, null));
                ret.Add((XWCN, null));
                ret.Add((XWCS, null));
                ret.Add((WaterVelocity != null ? WaterVelocity.OnOverall : DefaultOn, WaterVelocity?.GetCrystal()));
                ret.Add((Water, null));
                ret.Add((Ownership != null ? Ownership.OnOverall : DefaultOn, Ownership?.GetCrystal()));
                ret.Add((LockList, null));
                ret.Add((WaterEnvironmentMap, null));
                ret.Add((SkyAndWeatherFromRegion, null));
                ret.Add((AcousticSpace, null));
                ret.Add((EncounterZone, null));
                ret.Add((Music, null));
                ret.Add((ImageSpace, null));
                ret.Add((Landscape != null ? Landscape.OnOverall : DefaultOn, Landscape?.GetCrystal()));
                ret.Add((NavigationMeshes == null ? DefaultOn : !NavigationMeshes.GetCrystal().CopyNothing, NavigationMeshes?.GetCrystal()));
                ret.Add((Timestamp, null));
                ret.Add((UnknownGroupData, null));
                ret.Add((PersistentTimestamp, null));
                ret.Add((PersistentUnknownGroupData, null));
                ret.Add((Persistent, null));
                ret.Add((TemporaryTimestamp, null));
                ret.Add((TemporaryUnknownGroupData, null));
                ret.Add((Temporary, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Cell_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => CellCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CellSetterCommon.Instance.RemapLinks(this, mapping);
        public Cell(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Cell(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Cell(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Cell(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Cell(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Cell CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Cell();
            ((CellSetterCommon)((ICellGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Cell item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CellSetterCommon)((ICellGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Cell GetNew()
        {
            return new Cell();
        }

    }
    #endregion

    #region Interface
    public partial interface ICell :
        ICellGetter,
        IFallout4MajorRecord,
        IComplexLocation,
        ITranslatedNamed,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<ICellInternal>,
        IFormLinkContainer
    {
        new TranslatedString? Name { get; set; }
        new Cell.Flag Flags { get; set; }
        new CellGrid? Grid { get; set; }
        new CellLighting? Lighting { get; set; }
        new MemorySlice<Byte>? OcclusionData { get; set; }
        new MemorySlice<Byte>? MaxHeightData { get; set; }
        new FormLink<ILightingTemplateGetter> LightingTemplate { get; set; }
        new MemorySlice<Byte>? LNAM { get; set; }
        new Single? WaterHeight { get; set; }
        new String? WaterNoiseTexture { get; set; }
        new ExtendedList<IFormLink<IRegionGetter>>? Regions { get; set; }
        new FormLinkNullable<ILocationGetter> Location { get; set; }
        new MemorySlice<Byte>? XWCN { get; set; }
        new MemorySlice<Byte>? XWCS { get; set; }
        new CellWaterVelocity? WaterVelocity { get; set; }
        new FormLinkNullable<IWaterGetter> Water { get; set; }
        new Ownership? Ownership { get; set; }
        new FormLinkNullable<ILockListGetter> LockList { get; set; }
        new String? WaterEnvironmentMap { get; set; }
        new FormLinkNullable<IRegionGetter> SkyAndWeatherFromRegion { get; set; }
        new FormLinkNullable<IAcousticSpaceGetter> AcousticSpace { get; set; }
        new FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; }
        new FormLinkNullable<IMusicTypeGetter> Music { get; set; }
        new FormLinkNullable<IImageSpaceAdapterGetter> ImageSpace { get; set; }
        new Landscape? Landscape { get; set; }
        new ExtendedList<ANavigationMesh> NavigationMeshes { get; }
        new Int32 Timestamp { get; set; }
        new Int32 UnknownGroupData { get; set; }
        new Int32 PersistentTimestamp { get; set; }
        new Int32 PersistentUnknownGroupData { get; set; }
        new ExtendedList<IPlaced> Persistent { get; }
        new Int32 TemporaryTimestamp { get; set; }
        new Int32 TemporaryUnknownGroupData { get; set; }
        new ExtendedList<IPlaced> Temporary { get; }
        #region Mutagen
        new Cell.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ICellInternal :
        IFallout4MajorRecordInternal,
        ICell,
        ICellGetter
    {
    }

    public partial interface ICellGetter :
        IFallout4MajorRecordGetter,
        IComplexLocationGetter,
        ITranslatedNamedGetter,
        IMajorRecordGetterEnumerable,
        ILoquiObject<ICellGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Cell_Registration.Instance;
        ITranslatedStringGetter? Name { get; }
        Cell.Flag Flags { get; }
        ICellGridGetter? Grid { get; }
        ICellLightingGetter? Lighting { get; }
        ReadOnlyMemorySlice<Byte>? OcclusionData { get; }
        ReadOnlyMemorySlice<Byte>? MaxHeightData { get; }
        FormLink<ILightingTemplateGetter> LightingTemplate { get; }
        ReadOnlyMemorySlice<Byte>? LNAM { get; }
        Single? WaterHeight { get; }
        String? WaterNoiseTexture { get; }
        IReadOnlyList<IFormLink<IRegionGetter>>? Regions { get; }
        FormLinkNullable<ILocationGetter> Location { get; }
        ReadOnlyMemorySlice<Byte>? XWCN { get; }
        ReadOnlyMemorySlice<Byte>? XWCS { get; }
        ICellWaterVelocityGetter? WaterVelocity { get; }
        FormLinkNullable<IWaterGetter> Water { get; }
        IOwnershipGetter? Ownership { get; }
        FormLinkNullable<ILockListGetter> LockList { get; }
        String? WaterEnvironmentMap { get; }
        FormLinkNullable<IRegionGetter> SkyAndWeatherFromRegion { get; }
        FormLinkNullable<IAcousticSpaceGetter> AcousticSpace { get; }
        FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; }
        FormLinkNullable<IMusicTypeGetter> Music { get; }
        FormLinkNullable<IImageSpaceAdapterGetter> ImageSpace { get; }
        ILandscapeGetter? Landscape { get; }
        IReadOnlyList<IANavigationMeshGetter> NavigationMeshes { get; }
        Int32 Timestamp { get; }
        Int32 UnknownGroupData { get; }
        Int32 PersistentTimestamp { get; }
        Int32 PersistentUnknownGroupData { get; }
        IReadOnlyList<IPlacedGetter> Persistent { get; }
        Int32 TemporaryTimestamp { get; }
        Int32 TemporaryUnknownGroupData { get; }
        IReadOnlyList<IPlacedGetter> Temporary { get; }

        #region Mutagen
        Cell.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class CellMixIn
    {
        public static void Clear(this ICellInternal item)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Cell.Mask<bool> GetEqualsMask(
            this ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICellGetter item,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICellGetter item,
            FileGeneration fg,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            ((CellCommon)((ICellGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICellGetter item,
            ICellGetter rhs)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICellInternal lhs,
            ICellGetter rhs,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICellInternal lhs,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this ICellGetter obj)
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this ICellGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            this ICellGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommonGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this ICellInternal obj)
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ICellInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(
            this ICellInternal obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommon)m);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            IEnumerable<FormKey> keys)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            HashSet<FormKey> keys)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        public static Cell Duplicate(
            this ICellGetter item,
            FormKey formKey,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICellInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Cell_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        Flags = 7,
        Grid = 8,
        Lighting = 9,
        OcclusionData = 10,
        MaxHeightData = 11,
        LightingTemplate = 12,
        LNAM = 13,
        WaterHeight = 14,
        WaterNoiseTexture = 15,
        Regions = 16,
        Location = 17,
        XWCN = 18,
        XWCS = 19,
        WaterVelocity = 20,
        Water = 21,
        Ownership = 22,
        LockList = 23,
        WaterEnvironmentMap = 24,
        SkyAndWeatherFromRegion = 25,
        AcousticSpace = 26,
        EncounterZone = 27,
        Music = 28,
        ImageSpace = 29,
        Landscape = 30,
        NavigationMeshes = 31,
        Timestamp = 32,
        UnknownGroupData = 33,
        PersistentTimestamp = 34,
        PersistentUnknownGroupData = 35,
        Persistent = 36,
        TemporaryTimestamp = 37,
        TemporaryUnknownGroupData = 38,
        Temporary = 39,
    }
    #endregion

    #region Registration
    public partial class Cell_Registration : ILoquiRegistration
    {
        public static readonly Cell_Registration Instance = new Cell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 229,
            version: 0);

        public const string GUID = "cc9052c9-5f1f-4624-b5ad-16ffbce0f78e";

        public const ushort AdditionalFieldCount = 34;

        public const ushort FieldCount = 40;

        public static readonly Type MaskType = typeof(Cell.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Cell.ErrorMask);

        public static readonly Type ClassType = typeof(Cell);

        public static readonly Type GetterType = typeof(ICellGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICell);

        public static readonly Type? InternalSetterType = typeof(ICellInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Cell";

        public const string Name = "Cell";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CELL;
        public static readonly Type BinaryWriteTranslation = typeof(CellBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CellSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly CellSetterCommon Instance = new CellSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICellInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Flags = default;
            item.Grid = null;
            item.Lighting = null;
            item.OcclusionData = default;
            item.MaxHeightData = default;
            item.LightingTemplate = FormLink<ILightingTemplateGetter>.Null;
            item.LNAM = default;
            item.WaterHeight = default;
            item.WaterNoiseTexture = default;
            item.Regions = null;
            item.Location = FormLinkNullable<ILocationGetter>.Null;
            item.XWCN = default;
            item.XWCS = default;
            item.WaterVelocity = null;
            item.Water = FormLinkNullable<IWaterGetter>.Null;
            item.Ownership = null;
            item.LockList = FormLinkNullable<ILockListGetter>.Null;
            item.WaterEnvironmentMap = default;
            item.SkyAndWeatherFromRegion = FormLinkNullable<IRegionGetter>.Null;
            item.AcousticSpace = FormLinkNullable<IAcousticSpaceGetter>.Null;
            item.EncounterZone = FormLinkNullable<IEncounterZoneGetter>.Null;
            item.Music = FormLinkNullable<IMusicTypeGetter>.Null;
            item.ImageSpace = FormLinkNullable<IImageSpaceAdapterGetter>.Null;
            item.Landscape = null;
            item.NavigationMeshes.Clear();
            item.Timestamp = default;
            item.UnknownGroupData = default;
            item.PersistentTimestamp = default;
            item.PersistentUnknownGroupData = default;
            item.Persistent.Clear();
            item.TemporaryTimestamp = default;
            item.TemporaryUnknownGroupData = default;
            item.Temporary.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ICell obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.LightingTemplate = obj.LightingTemplate.Relink(mapping);
            obj.Regions?.RemapLinks(mapping);
            obj.Location = obj.Location.Relink(mapping);
            obj.Water = obj.Water.Relink(mapping);
            obj.Ownership?.RemapLinks(mapping);
            obj.LockList = obj.LockList.Relink(mapping);
            obj.SkyAndWeatherFromRegion = obj.SkyAndWeatherFromRegion.Relink(mapping);
            obj.AcousticSpace = obj.AcousticSpace.Relink(mapping);
            obj.EncounterZone = obj.EncounterZone.Relink(mapping);
            obj.Music = obj.Music.Relink(mapping);
            obj.ImageSpace = obj.ImageSpace.Relink(mapping);
            obj.Landscape?.RemapLinks(mapping);
            obj.NavigationMeshes.RemapLinks(mapping);
            obj.Persistent.RemapLinks(mapping);
            obj.Temporary.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(ICellInternal obj)
        {
            foreach (var item in CellCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            ICellInternal obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in CellCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            ICellInternal obj,
            HashSet<FormKey> keys)
        {
            if (obj.Landscape != null && keys.Contains(obj.Landscape.FormKey))
            {
                obj.Landscape = null;
            }
            obj.NavigationMeshes.Remove(keys);
            obj.Persistent.Remove(keys);
            obj.Temporary.Remove(keys);
        }
        
        public void Remove(
            ICellInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.Landscape.TryGet(out var Landscapeitem))
                        {
                            Landscapeitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    obj.NavigationMeshes.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "APlaced":
                case "IAPlacedGetter":
                case "IAPlaced":
                case "IAPlacedInternal":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICellInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ICellInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CellBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CellBinaryCreateTranslation.FillBinaryRecordTypes);
            CellBinaryCreateTranslation.CustomBinaryEndImportPublic(
                frame: frame,
                obj: item);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Cell)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Cell)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class CellCommon : Fallout4MajorRecordCommon
    {
        public new static readonly CellCommon Instance = new CellCommon();

        public Cell.Mask<bool> GetEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Cell.Mask<bool>(false);
            ((CellCommon)((ICellGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            Cell.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Grid = EqualsMaskHelper.EqualsHelper(
                item.Grid,
                rhs.Grid,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Lighting = EqualsMaskHelper.EqualsHelper(
                item.Lighting,
                rhs.Lighting,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.OcclusionData = MemorySliceExt.Equal(item.OcclusionData, rhs.OcclusionData);
            ret.MaxHeightData = MemorySliceExt.Equal(item.MaxHeightData, rhs.MaxHeightData);
            ret.LightingTemplate = item.LightingTemplate.Equals(rhs.LightingTemplate);
            ret.LNAM = MemorySliceExt.Equal(item.LNAM, rhs.LNAM);
            ret.WaterHeight = item.WaterHeight.EqualsWithin(rhs.WaterHeight);
            ret.WaterNoiseTexture = string.Equals(item.WaterNoiseTexture, rhs.WaterNoiseTexture);
            ret.Regions = item.Regions.CollectionEqualsHelper(
                rhs.Regions,
                (l, r) => object.Equals(l, r),
                include);
            ret.Location = item.Location.Equals(rhs.Location);
            ret.XWCN = MemorySliceExt.Equal(item.XWCN, rhs.XWCN);
            ret.XWCS = MemorySliceExt.Equal(item.XWCS, rhs.XWCS);
            ret.WaterVelocity = EqualsMaskHelper.EqualsHelper(
                item.WaterVelocity,
                rhs.WaterVelocity,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Water = item.Water.Equals(rhs.Water);
            ret.Ownership = EqualsMaskHelper.EqualsHelper(
                item.Ownership,
                rhs.Ownership,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LockList = item.LockList.Equals(rhs.LockList);
            ret.WaterEnvironmentMap = string.Equals(item.WaterEnvironmentMap, rhs.WaterEnvironmentMap);
            ret.SkyAndWeatherFromRegion = item.SkyAndWeatherFromRegion.Equals(rhs.SkyAndWeatherFromRegion);
            ret.AcousticSpace = item.AcousticSpace.Equals(rhs.AcousticSpace);
            ret.EncounterZone = item.EncounterZone.Equals(rhs.EncounterZone);
            ret.Music = item.Music.Equals(rhs.Music);
            ret.ImageSpace = item.ImageSpace.Equals(rhs.ImageSpace);
            ret.Landscape = EqualsMaskHelper.EqualsHelper(
                item.Landscape,
                rhs.Landscape,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.NavigationMeshes = item.NavigationMeshes.CollectionEqualsHelper(
                rhs.NavigationMeshes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Timestamp = item.Timestamp == rhs.Timestamp;
            ret.UnknownGroupData = item.UnknownGroupData == rhs.UnknownGroupData;
            ret.PersistentTimestamp = item.PersistentTimestamp == rhs.PersistentTimestamp;
            ret.PersistentUnknownGroupData = item.PersistentUnknownGroupData == rhs.PersistentUnknownGroupData;
            ret.Persistent = item.Persistent.CollectionEqualsHelper(
                rhs.Persistent,
                (loqLhs, loqRhs) => (IMask<bool>)loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.TemporaryTimestamp = item.TemporaryTimestamp == rhs.TemporaryTimestamp;
            ret.TemporaryUnknownGroupData = item.TemporaryUnknownGroupData == rhs.TemporaryUnknownGroupData;
            ret.Temporary = item.Temporary.CollectionEqualsHelper(
                rhs.Temporary,
                (loqLhs, loqRhs) => (IMask<bool>)loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICellGetter item,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICellGetter item,
            FileGeneration fg,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Cell =>");
            }
            else
            {
                fg.AppendLine($"{name} (Cell) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICellGetter item,
            FileGeneration fg,
            Cell.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.Grid?.Overall ?? true)
                && item.Grid.TryGet(out var GridItem))
            {
                GridItem?.ToString(fg, "Grid");
            }
            if ((printMask?.Lighting?.Overall ?? true)
                && item.Lighting.TryGet(out var LightingItem))
            {
                LightingItem?.ToString(fg, "Lighting");
            }
            if ((printMask?.OcclusionData ?? true)
                && item.OcclusionData.TryGet(out var OcclusionDataItem))
            {
                fg.AppendLine($"OcclusionData => {SpanExt.ToHexString(OcclusionDataItem)}");
            }
            if ((printMask?.MaxHeightData ?? true)
                && item.MaxHeightData.TryGet(out var MaxHeightDataItem))
            {
                fg.AppendLine($"MaxHeightData => {SpanExt.ToHexString(MaxHeightDataItem)}");
            }
            if (printMask?.LightingTemplate ?? true)
            {
                fg.AppendItem(item.LightingTemplate.FormKey, "LightingTemplate");
            }
            if ((printMask?.LNAM ?? true)
                && item.LNAM.TryGet(out var LNAMItem))
            {
                fg.AppendLine($"LNAM => {SpanExt.ToHexString(LNAMItem)}");
            }
            if ((printMask?.WaterHeight ?? true)
                && item.WaterHeight.TryGet(out var WaterHeightItem))
            {
                fg.AppendItem(WaterHeightItem, "WaterHeight");
            }
            if ((printMask?.WaterNoiseTexture ?? true)
                && item.WaterNoiseTexture.TryGet(out var WaterNoiseTextureItem))
            {
                fg.AppendItem(WaterNoiseTextureItem, "WaterNoiseTexture");
            }
            if ((printMask?.Regions?.Overall ?? true)
                && item.Regions.TryGet(out var RegionsItem))
            {
                fg.AppendLine("Regions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in RegionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Location ?? true)
            {
                fg.AppendItem(item.Location.FormKeyNullable, "Location");
            }
            if ((printMask?.XWCN ?? true)
                && item.XWCN.TryGet(out var XWCNItem))
            {
                fg.AppendLine($"XWCN => {SpanExt.ToHexString(XWCNItem)}");
            }
            if ((printMask?.XWCS ?? true)
                && item.XWCS.TryGet(out var XWCSItem))
            {
                fg.AppendLine($"XWCS => {SpanExt.ToHexString(XWCSItem)}");
            }
            if ((printMask?.WaterVelocity?.Overall ?? true)
                && item.WaterVelocity.TryGet(out var WaterVelocityItem))
            {
                WaterVelocityItem?.ToString(fg, "WaterVelocity");
            }
            if (printMask?.Water ?? true)
            {
                fg.AppendItem(item.Water.FormKeyNullable, "Water");
            }
            if ((printMask?.Ownership?.Overall ?? true)
                && item.Ownership.TryGet(out var OwnershipItem))
            {
                OwnershipItem?.ToString(fg, "Ownership");
            }
            if (printMask?.LockList ?? true)
            {
                fg.AppendItem(item.LockList.FormKeyNullable, "LockList");
            }
            if ((printMask?.WaterEnvironmentMap ?? true)
                && item.WaterEnvironmentMap.TryGet(out var WaterEnvironmentMapItem))
            {
                fg.AppendItem(WaterEnvironmentMapItem, "WaterEnvironmentMap");
            }
            if (printMask?.SkyAndWeatherFromRegion ?? true)
            {
                fg.AppendItem(item.SkyAndWeatherFromRegion.FormKeyNullable, "SkyAndWeatherFromRegion");
            }
            if (printMask?.AcousticSpace ?? true)
            {
                fg.AppendItem(item.AcousticSpace.FormKeyNullable, "AcousticSpace");
            }
            if (printMask?.EncounterZone ?? true)
            {
                fg.AppendItem(item.EncounterZone.FormKeyNullable, "EncounterZone");
            }
            if (printMask?.Music ?? true)
            {
                fg.AppendItem(item.Music.FormKeyNullable, "Music");
            }
            if (printMask?.ImageSpace ?? true)
            {
                fg.AppendItem(item.ImageSpace.FormKeyNullable, "ImageSpace");
            }
            if ((printMask?.Landscape?.Overall ?? true)
                && item.Landscape.TryGet(out var LandscapeItem))
            {
                LandscapeItem?.ToString(fg, "Landscape");
            }
            if (printMask?.NavigationMeshes?.Overall ?? true)
            {
                fg.AppendLine("NavigationMeshes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.NavigationMeshes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Timestamp ?? true)
            {
                fg.AppendItem(item.Timestamp, "Timestamp");
            }
            if (printMask?.UnknownGroupData ?? true)
            {
                fg.AppendItem(item.UnknownGroupData, "UnknownGroupData");
            }
            if (printMask?.PersistentTimestamp ?? true)
            {
                fg.AppendItem(item.PersistentTimestamp, "PersistentTimestamp");
            }
            if (printMask?.PersistentUnknownGroupData ?? true)
            {
                fg.AppendItem(item.PersistentUnknownGroupData, "PersistentUnknownGroupData");
            }
            if (printMask?.Persistent?.Overall ?? true)
            {
                fg.AppendLine("Persistent =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Persistent)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.TemporaryTimestamp ?? true)
            {
                fg.AppendItem(item.TemporaryTimestamp, "TemporaryTimestamp");
            }
            if (printMask?.TemporaryUnknownGroupData ?? true)
            {
                fg.AppendItem(item.TemporaryUnknownGroupData, "TemporaryUnknownGroupData");
            }
            if (printMask?.Temporary?.Overall ?? true)
            {
                fg.AppendLine("Temporary =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Temporary)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static Cell_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Cell_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Cell_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Cell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellGetter? lhs,
            ICellGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!object.Equals(lhs.Grid, rhs.Grid)) return false;
            if (!object.Equals(lhs.Lighting, rhs.Lighting)) return false;
            if (!MemorySliceExt.Equal(lhs.OcclusionData, rhs.OcclusionData)) return false;
            if (!MemorySliceExt.Equal(lhs.MaxHeightData, rhs.MaxHeightData)) return false;
            if (!lhs.LightingTemplate.Equals(rhs.LightingTemplate)) return false;
            if (!MemorySliceExt.Equal(lhs.LNAM, rhs.LNAM)) return false;
            if (!lhs.WaterHeight.EqualsWithin(rhs.WaterHeight)) return false;
            if (!string.Equals(lhs.WaterNoiseTexture, rhs.WaterNoiseTexture)) return false;
            if (!lhs.Regions.SequenceEqualNullable(rhs.Regions)) return false;
            if (!lhs.Location.Equals(rhs.Location)) return false;
            if (!MemorySliceExt.Equal(lhs.XWCN, rhs.XWCN)) return false;
            if (!MemorySliceExt.Equal(lhs.XWCS, rhs.XWCS)) return false;
            if (!object.Equals(lhs.WaterVelocity, rhs.WaterVelocity)) return false;
            if (!lhs.Water.Equals(rhs.Water)) return false;
            if (!object.Equals(lhs.Ownership, rhs.Ownership)) return false;
            if (!lhs.LockList.Equals(rhs.LockList)) return false;
            if (!string.Equals(lhs.WaterEnvironmentMap, rhs.WaterEnvironmentMap)) return false;
            if (!lhs.SkyAndWeatherFromRegion.Equals(rhs.SkyAndWeatherFromRegion)) return false;
            if (!lhs.AcousticSpace.Equals(rhs.AcousticSpace)) return false;
            if (!lhs.EncounterZone.Equals(rhs.EncounterZone)) return false;
            if (!lhs.Music.Equals(rhs.Music)) return false;
            if (!lhs.ImageSpace.Equals(rhs.ImageSpace)) return false;
            if (!object.Equals(lhs.Landscape, rhs.Landscape)) return false;
            if (!lhs.NavigationMeshes.SequenceEqualNullable(rhs.NavigationMeshes)) return false;
            if (lhs.Timestamp != rhs.Timestamp) return false;
            if (lhs.UnknownGroupData != rhs.UnknownGroupData) return false;
            if (lhs.PersistentTimestamp != rhs.PersistentTimestamp) return false;
            if (lhs.PersistentUnknownGroupData != rhs.PersistentUnknownGroupData) return false;
            if (!lhs.Persistent.SequenceEqualNullable(rhs.Persistent)) return false;
            if (lhs.TemporaryTimestamp != rhs.TemporaryTimestamp) return false;
            if (lhs.TemporaryUnknownGroupData != rhs.TemporaryUnknownGroupData) return false;
            if (!lhs.Temporary.SequenceEqualNullable(rhs.Temporary)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter);
        }
        
        public virtual int GetHashCode(ICellGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Flags);
            if (item.Grid.TryGet(out var Griditem))
            {
                hash.Add(Griditem);
            }
            if (item.Lighting.TryGet(out var Lightingitem))
            {
                hash.Add(Lightingitem);
            }
            if (item.OcclusionData.TryGet(out var OcclusionDataItem))
            {
                hash.Add(OcclusionDataItem);
            }
            if (item.MaxHeightData.TryGet(out var MaxHeightDataItem))
            {
                hash.Add(MaxHeightDataItem);
            }
            hash.Add(item.LightingTemplate);
            if (item.LNAM.TryGet(out var LNAMItem))
            {
                hash.Add(LNAMItem);
            }
            if (item.WaterHeight.TryGet(out var WaterHeightitem))
            {
                hash.Add(WaterHeightitem);
            }
            if (item.WaterNoiseTexture.TryGet(out var WaterNoiseTextureitem))
            {
                hash.Add(WaterNoiseTextureitem);
            }
            hash.Add(item.Regions);
            hash.Add(item.Location);
            if (item.XWCN.TryGet(out var XWCNItem))
            {
                hash.Add(XWCNItem);
            }
            if (item.XWCS.TryGet(out var XWCSItem))
            {
                hash.Add(XWCSItem);
            }
            if (item.WaterVelocity.TryGet(out var WaterVelocityitem))
            {
                hash.Add(WaterVelocityitem);
            }
            hash.Add(item.Water);
            if (item.Ownership.TryGet(out var Ownershipitem))
            {
                hash.Add(Ownershipitem);
            }
            hash.Add(item.LockList);
            if (item.WaterEnvironmentMap.TryGet(out var WaterEnvironmentMapitem))
            {
                hash.Add(WaterEnvironmentMapitem);
            }
            hash.Add(item.SkyAndWeatherFromRegion);
            hash.Add(item.AcousticSpace);
            hash.Add(item.EncounterZone);
            hash.Add(item.Music);
            hash.Add(item.ImageSpace);
            if (item.Landscape.TryGet(out var Landscapeitem))
            {
                hash.Add(Landscapeitem);
            }
            hash.Add(item.NavigationMeshes);
            hash.Add(item.Timestamp);
            hash.Add(item.UnknownGroupData);
            hash.Add(item.PersistentTimestamp);
            hash.Add(item.PersistentUnknownGroupData);
            hash.Add(item.Persistent);
            hash.Add(item.TemporaryTimestamp);
            hash.Add(item.TemporaryUnknownGroupData);
            hash.Add(item.Temporary);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Cell.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ICellGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.LightingTemplate);
            if (obj.Regions.TryGet(out var RegionsItem))
            {
                foreach (var item in RegionsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Location.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Location);
            }
            if (obj.Water.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Water);
            }
            if (obj.Ownership.TryGet(out var OwnershipItems))
            {
                foreach (var item in OwnershipItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LockList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.LockList);
            }
            if (obj.SkyAndWeatherFromRegion.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.SkyAndWeatherFromRegion);
            }
            if (obj.AcousticSpace.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AcousticSpace);
            }
            if (obj.EncounterZone.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.EncounterZone);
            }
            if (obj.Music.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Music);
            }
            if (obj.ImageSpace.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ImageSpace);
            }
            if (obj.Landscape.TryGet(out var LandscapeItems))
            {
                foreach (var item in LandscapeItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.NavigationMeshes.WhereCastable<IANavigationMeshGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Persistent.WhereCastable<IPlacedGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Temporary.WhereCastable<IPlacedGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(ICellGetter obj)
        {
            if ((obj.Landscape != null))
            {
                if (obj.Landscape.TryGet(out var Landscapeitem))
                {
                    yield return Landscapeitem;
                    foreach (var item in Landscapeitem.EnumerateMajorRecords())
                    {
                        yield return item;
                    }
                }
            }
            foreach (var subItem in obj.NavigationMeshes)
            {
                yield return subItem;
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
            foreach (var subItem in obj.Persistent)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.Temporary)
            {
                yield return subItem;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            ICellGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.Landscape.TryGet(out var Landscapeitem))
                        {
                            yield return Landscapeitem;
                            foreach (var item in Landscapeitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    yield break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    foreach (var subItem in obj.NavigationMeshes)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "IPlacedGetter":
                case "IPlaced":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "APlaced":
                case "IAPlacedGetter":
                case "IAPlaced":
                case "IAPlacedInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "ILocationTargetable":
                {
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                case "ILocationTargetableGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                case "IOwner":
                {
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                case "IOwnerGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                case "IKeywordLinkedReference":
                {
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                case "IKeywordLinkedReferenceGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                case "ILinkedReference":
                {
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                case "ILinkedReferenceGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                case "IPlacedSimple":
                {
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                case "IPlacedSimpleGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                case "IPlacedThing":
                {
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                case "IPlacedThingGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                }
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            ICellGetter obj,
            ILinkCache linkCache,
            ModKey modKey,
            IModContext? parent,
            Func<IFallout4Mod, ICellGetter, ICell> getOrAddAsOverride,
            Func<IFallout4Mod, ICellGetter, string?, ICell> duplicateInto)
        {
            var curContext = new ModContext<IFallout4Mod, ICell, ICellGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            {
                if (obj.Landscape.TryGet(out var CellLandscapeitem))
                {
                    yield return new ModContext<IFallout4Mod, ILandscapeInternal, ILandscapeGetter>(
                        modKey: modKey,
                        record: CellLandscapeitem,
                        parent: curContext,
                        getOrAddAsOverride: (m, r) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                            if (baseRec.Landscape != null) return baseRec.Landscape;
                            var copy = r.DeepCopy(ModContextExt.LandscapeCopyMask);
                            baseRec.Landscape = copy;
                            return copy;
                        },
                        duplicateInto: (m, r, e) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                            var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.LandscapeCopyMask);
                            baseRec.Landscape = dupRec;
                            return dupRec;
                        });
                }
            }
            foreach (var subItem in obj.NavigationMeshes)
            {
                yield return new ModContext<IFallout4Mod, IANavigationMeshInternal, IANavigationMeshGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var copy = (ANavigationMesh)((IANavigationMeshGetter)r).DeepCopy();
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).NavigationMeshes.Add(copy);
                        return copy;
                    },
                    duplicateInto: (m, r, e) =>
                    {
                        var dup = (ANavigationMesh)((IANavigationMeshGetter)r).Duplicate(m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).NavigationMeshes.Add(dup);
                        return dup;
                    });
            }
            foreach (var subItem in obj.Persistent)
            {
                yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                        return copy;
                    },
                    duplicateInto: (m, r, e) =>
                    {
                        var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                        return dup;
                    });
            }
            foreach (var subItem in obj.Temporary)
            {
                yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                        return copy;
                    },
                    duplicateInto: (m, r, e) =>
                    {
                        var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                        return dup;
                    });
            }
        }
        
        public IEnumerable<IModContext<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            ICellGetter obj,
            ILinkCache linkCache,
            Type type,
            ModKey modKey,
            IModContext? parent,
            bool throwIfUnknown,
            Func<IFallout4Mod, ICellGetter, ICell> getOrAddAsOverride,
            Func<IFallout4Mod, ICellGetter, string?, ICell> duplicateInto)
        {
            var curContext = new ModContext<IFallout4Mod, ICell, ICellGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.Landscape.TryGet(out var CellLandscapeitem))
                        {
                            yield return new ModContext<IFallout4Mod, ILandscapeInternal, ILandscapeGetter>(
                                modKey: modKey,
                                record: CellLandscapeitem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    if (baseRec.Landscape != null) return baseRec.Landscape;
                                    var copy = r.DeepCopy(ModContextExt.LandscapeCopyMask);
                                    baseRec.Landscape = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.LandscapeCopyMask);
                                    baseRec.Landscape = dupRec;
                                    return dupRec;
                                });
                        }
                    }
                    yield break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    foreach (var subItem in obj.NavigationMeshes)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IANavigationMeshInternal, IANavigationMeshGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (ANavigationMesh)((IANavigationMeshGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).NavigationMeshes.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (ANavigationMesh)((IANavigationMeshGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).NavigationMeshes.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "IPlacedGetter":
                case "IPlaced":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "APlaced":
                case "IAPlacedGetter":
                case "IAPlaced":
                case "IAPlacedInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "ILocationTargetable":
                case "ILocationTargetableGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                }
                case "IOwner":
                case "IOwnerGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                }
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                }
                case "ILinkedReference":
                case "ILinkedReferenceGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                }
                case "IPlacedSimple":
                case "IPlacedSimpleGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                }
                case "IPlacedThing":
                case "IPlacedThingGetter":
                {
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                }
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        #region Duplicate
        public Cell Duplicate(
            ICellGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Cell(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICell)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICell)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class CellSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly CellSetterTranslationCommon Instance = new CellSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICellInternal item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ICell item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Grid);
                try
                {
                    if(rhs.Grid.TryGet(out var rhsGrid))
                    {
                        item.Grid = rhsGrid.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.Grid));
                    }
                    else
                    {
                        item.Grid = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                try
                {
                    if(rhs.Lighting.TryGet(out var rhsLighting))
                    {
                        item.Lighting = rhsLighting.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
                    }
                    else
                    {
                        item.Lighting = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.OcclusionData) ?? true))
            {
                if(rhs.OcclusionData.TryGet(out var OcclusionDatarhs))
                {
                    item.OcclusionData = OcclusionDatarhs.ToArray();
                }
                else
                {
                    item.OcclusionData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.MaxHeightData) ?? true))
            {
                if(rhs.MaxHeightData.TryGet(out var MaxHeightDatarhs))
                {
                    item.MaxHeightData = MaxHeightDatarhs.ToArray();
                }
                else
                {
                    item.MaxHeightData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.LightingTemplate) ?? true))
            {
                item.LightingTemplate = new FormLink<ILightingTemplateGetter>(rhs.LightingTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.LNAM) ?? true))
            {
                if(rhs.LNAM.TryGet(out var LNAMrhs))
                {
                    item.LNAM = LNAMrhs.ToArray();
                }
                else
                {
                    item.LNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                item.WaterHeight = rhs.WaterHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterNoiseTexture) ?? true))
            {
                item.WaterNoiseTexture = rhs.WaterNoiseTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Regions);
                try
                {
                    if ((rhs.Regions != null))
                    {
                        item.Regions = 
                            rhs.Regions
                            .Select(r => (IFormLink<IRegionGetter>)new FormLink<IRegionGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<IRegionGetter>>();
                    }
                    else
                    {
                        item.Regions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Location) ?? true))
            {
                item.Location = new FormLinkNullable<ILocationGetter>(rhs.Location.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.XWCN) ?? true))
            {
                if(rhs.XWCN.TryGet(out var XWCNrhs))
                {
                    item.XWCN = XWCNrhs.ToArray();
                }
                else
                {
                    item.XWCN = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.XWCS) ?? true))
            {
                if(rhs.XWCS.TryGet(out var XWCSrhs))
                {
                    item.XWCS = XWCSrhs.ToArray();
                }
                else
                {
                    item.XWCS = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterVelocity) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.WaterVelocity);
                try
                {
                    if(rhs.WaterVelocity.TryGet(out var rhsWaterVelocity))
                    {
                        item.WaterVelocity = rhsWaterVelocity.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.WaterVelocity));
                    }
                    else
                    {
                        item.WaterVelocity = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                item.Water = new FormLinkNullable<IWaterGetter>(rhs.Water.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Ownership) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Ownership);
                try
                {
                    if(rhs.Ownership.TryGet(out var rhsOwnership))
                    {
                        item.Ownership = rhsOwnership.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.Ownership));
                    }
                    else
                    {
                        item.Ownership = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.LockList) ?? true))
            {
                item.LockList = new FormLinkNullable<ILockListGetter>(rhs.LockList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterEnvironmentMap) ?? true))
            {
                item.WaterEnvironmentMap = rhs.WaterEnvironmentMap;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.SkyAndWeatherFromRegion) ?? true))
            {
                item.SkyAndWeatherFromRegion = new FormLinkNullable<IRegionGetter>(rhs.SkyAndWeatherFromRegion.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.AcousticSpace) ?? true))
            {
                item.AcousticSpace = new FormLinkNullable<IAcousticSpaceGetter>(rhs.AcousticSpace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.EncounterZone) ?? true))
            {
                item.EncounterZone = new FormLinkNullable<IEncounterZoneGetter>(rhs.EncounterZone.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Music) ?? true))
            {
                item.Music = new FormLinkNullable<IMusicTypeGetter>(rhs.Music.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.ImageSpace) ?? true))
            {
                item.ImageSpace = new FormLinkNullable<IImageSpaceAdapterGetter>(rhs.ImageSpace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Landscape) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Landscape);
                try
                {
                    if(rhs.Landscape.TryGet(out var rhsLandscape))
                    {
                        item.Landscape = (Landscape)rhsLandscape.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape),
                            errorMask: errorMask);
                    }
                    else
                    {
                        item.Landscape = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.NavigationMeshes) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.NavigationMeshes);
                try
                {
                    item.NavigationMeshes.SetTo(
                        rhs.NavigationMeshes
                        .Select(r =>
                        {
                            return (ANavigationMesh)r.DeepCopy(
                                copyMask: default(TranslationCrystal),
                                errorMask: errorMask);
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Timestamp) ?? true))
            {
                item.Timestamp = rhs.Timestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.UnknownGroupData) ?? true))
            {
                item.UnknownGroupData = rhs.UnknownGroupData;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentTimestamp) ?? true))
            {
                item.PersistentTimestamp = rhs.PersistentTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentUnknownGroupData) ?? true))
            {
                item.PersistentUnknownGroupData = rhs.PersistentUnknownGroupData;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Persistent);
                try
                {
                    item.Persistent.SetTo(
                        rhs.Persistent
                        .Select(r =>
                        {
                            return (r.DeepCopy() as IPlaced)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryTimestamp) ?? true))
            {
                item.TemporaryTimestamp = rhs.TemporaryTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryUnknownGroupData) ?? true))
            {
                item.TemporaryUnknownGroupData = rhs.TemporaryUnknownGroupData;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Temporary);
                try
                {
                    item.Temporary.SetTo(
                        rhs.Temporary
                        .Select(r =>
                        {
                            return (r.DeepCopy() as IPlaced)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Cell DeepCopy(
            ICellGetter item,
            Cell.TranslationMask? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ((CellSetterTranslationCommon)((ICellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ((CellSetterTranslationCommon)((ICellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ((CellSetterTranslationCommon)((ICellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Cell
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static Cell_Registration Registration => Cell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CellSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CellBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CellBinaryWriteTranslation Instance = new CellBinaryWriteTranslation();

        static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            ICellGetter obj);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            ICellGetter obj)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj);
        }
        public static void WriteEmbedded(
            ICellGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ICellGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Cell.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 2,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DATA));
            if (item.Grid.TryGet(out var GridItem))
            {
                ((CellGridBinaryWriteTranslation)((IBinaryItem)GridItem).BinaryWriteTranslator).Write(
                    item: GridItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Lighting.TryGet(out var LightingItem))
            {
                ((CellLightingBinaryWriteTranslation)((IBinaryItem)LightingItem).BinaryWriteTranslator).Write(
                    item: LightingItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.OcclusionData,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TVDT));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaxHeightData,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MHDT));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LightingTemplate,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.LTMP));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.LNAM));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WaterHeight,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCLW));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WaterNoiseTexture,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IRegionGetter>>.Instance.Write(
                writer: writer,
                items: item.Regions,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.XCLR),
                transl: (MutagenWriter subWriter, IFormLink<IRegionGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Location,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLCN));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.XWCN,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XWCN));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.XWCS,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XWCS));
            if (item.WaterVelocity.TryGet(out var WaterVelocityItem))
            {
                ((CellWaterVelocityBinaryWriteTranslation)((IBinaryItem)WaterVelocityItem).BinaryWriteTranslator).Write(
                    item: WaterVelocityItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Water,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCWT));
            if (item.Ownership.TryGet(out var OwnershipItem))
            {
                ((OwnershipBinaryWriteTranslation)((IBinaryItem)OwnershipItem).BinaryWriteTranslator).Write(
                    item: OwnershipItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LockList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XILL));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WaterEnvironmentMap,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XWEM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SkyAndWeatherFromRegion,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCCM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AcousticSpace,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCAS));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EncounterZone,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XEZN));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Music,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCMO));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImageSpace,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCIM));
        }

        public void Write(
            MutagenWriter writer,
            ICellGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.CELL),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CellBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static CellBinaryCreateTranslation Instance = new CellBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CELL;
        public static void FillBinaryStructs(
            ICellInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ICellInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Cell_FieldIndex.Name;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Cell.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.Flags;
                }
                case RecordTypeInts.XCLC:
                {
                    item.Grid = Mutagen.Bethesda.Fallout4.CellGrid.CreateFromBinary(frame: frame);
                    return (int)Cell_FieldIndex.Grid;
                }
                case RecordTypeInts.XCLL:
                {
                    item.Lighting = Mutagen.Bethesda.Fallout4.CellLighting.CreateFromBinary(frame: frame);
                    return (int)Cell_FieldIndex.Lighting;
                }
                case RecordTypeInts.TVDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OcclusionData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.OcclusionData;
                }
                case RecordTypeInts.MHDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaxHeightData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.MaxHeightData;
                }
                case RecordTypeInts.LTMP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LightingTemplate = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.LightingTemplate;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.LNAM;
                }
                case RecordTypeInts.XCLW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterHeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.WaterHeight;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterNoiseTexture = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Cell_FieldIndex.WaterNoiseTexture;
                }
                case RecordTypeInts.XCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Regions = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IRegionGetter>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<IRegionGetter>>();
                    return (int)Cell_FieldIndex.Regions;
                }
                case RecordTypeInts.XLCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Location = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.Location;
                }
                case RecordTypeInts.XWCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XWCN = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.XWCN;
                }
                case RecordTypeInts.XWCS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XWCS = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.XWCS;
                }
                case RecordTypeInts.XWCU:
                {
                    item.WaterVelocity = Mutagen.Bethesda.Fallout4.CellWaterVelocity.CreateFromBinary(frame: frame);
                    return (int)Cell_FieldIndex.WaterVelocity;
                }
                case RecordTypeInts.XCWT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Water = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.Water;
                }
                case RecordTypeInts.XOWN:
                case RecordTypeInts.XRNK:
                {
                    item.Ownership = Mutagen.Bethesda.Fallout4.Ownership.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Cell_FieldIndex.Ownership;
                }
                case RecordTypeInts.XILL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LockList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.LockList;
                }
                case RecordTypeInts.XWEM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterEnvironmentMap = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Cell_FieldIndex.WaterEnvironmentMap;
                }
                case RecordTypeInts.XCCM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SkyAndWeatherFromRegion = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.SkyAndWeatherFromRegion;
                }
                case RecordTypeInts.XCAS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AcousticSpace = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.AcousticSpace;
                }
                case RecordTypeInts.XEZN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EncounterZone = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XCMO:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Music = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.Music;
                }
                case RecordTypeInts.XCIM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImageSpace = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Cell_FieldIndex.ImageSpace;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void CustomBinaryEndImport(
            MutagenFrame frame,
            ICellInternal obj);
        public static void CustomBinaryEndImportPublic(
            MutagenFrame frame,
            ICellInternal obj)
        {
            CustomBinaryEndImport(
                frame: frame,
                obj: obj);
        }
    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class CellBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CellBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ICellGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static Cell_Registration Registration => Cell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => CellCommon.Instance.GetContainedFormLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Cell.MajorFlag MajorFlags => (Cell.MajorFlag)this.MajorRecordFlagsRaw;

        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Flags
        partial void FlagsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public Cell.Flag Flags => GetFlagsCustom();
        #endregion
        #region Grid
        private RangeInt32? _GridLocation;
        public ICellGridGetter? Grid => _GridLocation.HasValue ? CellGridBinaryOverlay.CellGridFactory(new OverlayStream(_data.Slice(_GridLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Lighting
        private RangeInt32? _LightingLocation;
        public ICellLightingGetter? Lighting => _LightingLocation.HasValue ? CellLightingBinaryOverlay.CellLightingFactory(new OverlayStream(_data.Slice(_LightingLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region OcclusionData
        private int? _OcclusionDataLocation;
        public ReadOnlyMemorySlice<Byte>? OcclusionData => _OcclusionDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _OcclusionDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region MaxHeightData
        private int? _MaxHeightDataLocation;
        public ReadOnlyMemorySlice<Byte>? MaxHeightData => _MaxHeightDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _MaxHeightDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region LightingTemplate
        private int? _LightingTemplateLocation;
        public FormLink<ILightingTemplateGetter> LightingTemplate => _LightingTemplateLocation.HasValue ? new FormLink<ILightingTemplateGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LightingTemplateLocation.Value, _package.MetaData.Constants)))) : FormLink<ILightingTemplateGetter>.Null;
        #endregion
        #region LNAM
        private int? _LNAMLocation;
        public ReadOnlyMemorySlice<Byte>? LNAM => _LNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _LNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region WaterHeight
        private int? _WaterHeightLocation;
        public Single? WaterHeight => _WaterHeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _WaterHeightLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region WaterNoiseTexture
        private int? _WaterNoiseTextureLocation;
        public String? WaterNoiseTexture => _WaterNoiseTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _WaterNoiseTextureLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IReadOnlyList<IFormLink<IRegionGetter>>? Regions { get; private set; }
        #region Location
        private int? _LocationLocation;
        public FormLinkNullable<ILocationGetter> Location => _LocationLocation.HasValue ? new FormLinkNullable<ILocationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LocationLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationGetter>.Null;
        #endregion
        #region XWCN
        private int? _XWCNLocation;
        public ReadOnlyMemorySlice<Byte>? XWCN => _XWCNLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _XWCNLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region XWCS
        private int? _XWCSLocation;
        public ReadOnlyMemorySlice<Byte>? XWCS => _XWCSLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _XWCSLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region WaterVelocity
        private RangeInt32? _WaterVelocityLocation;
        public ICellWaterVelocityGetter? WaterVelocity => _WaterVelocityLocation.HasValue ? CellWaterVelocityBinaryOverlay.CellWaterVelocityFactory(new OverlayStream(_data.Slice(_WaterVelocityLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Water
        private int? _WaterLocation;
        public FormLinkNullable<IWaterGetter> Water => _WaterLocation.HasValue ? new FormLinkNullable<IWaterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _WaterLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IWaterGetter>.Null;
        #endregion
        public IOwnershipGetter? Ownership { get; private set; }
        #region LockList
        private int? _LockListLocation;
        public FormLinkNullable<ILockListGetter> LockList => _LockListLocation.HasValue ? new FormLinkNullable<ILockListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LockListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILockListGetter>.Null;
        #endregion
        #region WaterEnvironmentMap
        private int? _WaterEnvironmentMapLocation;
        public String? WaterEnvironmentMap => _WaterEnvironmentMapLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _WaterEnvironmentMapLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region SkyAndWeatherFromRegion
        private int? _SkyAndWeatherFromRegionLocation;
        public FormLinkNullable<IRegionGetter> SkyAndWeatherFromRegion => _SkyAndWeatherFromRegionLocation.HasValue ? new FormLinkNullable<IRegionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SkyAndWeatherFromRegionLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IRegionGetter>.Null;
        #endregion
        #region AcousticSpace
        private int? _AcousticSpaceLocation;
        public FormLinkNullable<IAcousticSpaceGetter> AcousticSpace => _AcousticSpaceLocation.HasValue ? new FormLinkNullable<IAcousticSpaceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AcousticSpaceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IAcousticSpaceGetter>.Null;
        #endregion
        #region EncounterZone
        private int? _EncounterZoneLocation;
        public FormLinkNullable<IEncounterZoneGetter> EncounterZone => _EncounterZoneLocation.HasValue ? new FormLinkNullable<IEncounterZoneGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EncounterZoneLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEncounterZoneGetter>.Null;
        #endregion
        #region Music
        private int? _MusicLocation;
        public FormLinkNullable<IMusicTypeGetter> Music => _MusicLocation.HasValue ? new FormLinkNullable<IMusicTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MusicLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IMusicTypeGetter>.Null;
        #endregion
        #region ImageSpace
        private int? _ImageSpaceLocation;
        public FormLinkNullable<IImageSpaceAdapterGetter> ImageSpace => _ImageSpaceLocation.HasValue ? new FormLinkNullable<IImageSpaceAdapterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ImageSpaceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IImageSpaceAdapterGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CellBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CellBinaryOverlay CellFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var origStream = stream;
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new CellBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: origStream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CellBinaryOverlay CellFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CellFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Name;
                }
                case RecordTypeInts.DATA:
                {
                    FlagsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)Cell_FieldIndex.Flags;
                }
                case RecordTypeInts.XCLC:
                {
                    _GridLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Cell_FieldIndex.Grid;
                }
                case RecordTypeInts.XCLL:
                {
                    _LightingLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Cell_FieldIndex.Lighting;
                }
                case RecordTypeInts.TVDT:
                {
                    _OcclusionDataLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.OcclusionData;
                }
                case RecordTypeInts.MHDT:
                {
                    _MaxHeightDataLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.MaxHeightData;
                }
                case RecordTypeInts.LTMP:
                {
                    _LightingTemplateLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.LightingTemplate;
                }
                case RecordTypeInts.LNAM:
                {
                    _LNAMLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.LNAM;
                }
                case RecordTypeInts.XCLW:
                {
                    _WaterHeightLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.WaterHeight;
                }
                case RecordTypeInts.XNAM:
                {
                    _WaterNoiseTextureLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.WaterNoiseTexture;
                }
                case RecordTypeInts.XCLR:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.Regions = BinaryOverlayList.FactoryByStartIndex<IFormLink<IRegionGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IRegionGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return (int)Cell_FieldIndex.Regions;
                }
                case RecordTypeInts.XLCN:
                {
                    _LocationLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Location;
                }
                case RecordTypeInts.XWCN:
                {
                    _XWCNLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.XWCN;
                }
                case RecordTypeInts.XWCS:
                {
                    _XWCSLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.XWCS;
                }
                case RecordTypeInts.XWCU:
                {
                    _WaterVelocityLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Cell_FieldIndex.WaterVelocity;
                }
                case RecordTypeInts.XCWT:
                {
                    _WaterLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Water;
                }
                case RecordTypeInts.XOWN:
                case RecordTypeInts.XRNK:
                {
                    this.Ownership = OwnershipBinaryOverlay.OwnershipFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Cell_FieldIndex.Ownership;
                }
                case RecordTypeInts.XILL:
                {
                    _LockListLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.LockList;
                }
                case RecordTypeInts.XWEM:
                {
                    _WaterEnvironmentMapLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.WaterEnvironmentMap;
                }
                case RecordTypeInts.XCCM:
                {
                    _SkyAndWeatherFromRegionLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.SkyAndWeatherFromRegion;
                }
                case RecordTypeInts.XCAS:
                {
                    _AcousticSpaceLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.AcousticSpace;
                }
                case RecordTypeInts.XEZN:
                {
                    _EncounterZoneLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XCMO:
                {
                    _MusicLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Music;
                }
                case RecordTypeInts.XCIM:
                {
                    _ImageSpaceLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.ImageSpace;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICellGetter rhs)) return false;
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICellGetter? obj)
        {
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CellCommon)((ICellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

