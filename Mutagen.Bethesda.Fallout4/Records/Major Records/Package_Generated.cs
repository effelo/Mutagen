/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Package :
        Fallout4MajorRecord,
        IPackageInternal,
        ILoquiObjectSetter<Package>,
        IEquatable<IPackageGetter>
    {
        #region Ctor
        protected Package()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageAdapter? _VirtualMachineAdapter;
        public PackageAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageAdapterGetter? IPackageGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Flags
        public Package.Flag Flags { get; set; } = default;
        #endregion
        #region Type
        public Package.Types Type { get; set; } = default;
        #endregion
        #region InterruptOverride
        public Package.Interrupt InterruptOverride { get; set; } = default;
        #endregion
        #region PreferredSpeed
        public Package.Speed PreferredSpeed { get; set; } = default;
        #endregion
        #region Unknown
        public Byte Unknown { get; set; } = default;
        #endregion
        #region InteruptFlags
        public Package.InterruptFlag InteruptFlags { get; set; } = default;
        #endregion
        #region Unknown2
        public UInt16 Unknown2 { get; set; } = default;
        #endregion
        #region ScheduleMonth
        public SByte ScheduleMonth { get; set; } = default;
        #endregion
        #region ScheduleDayOfWeek
        public Package.DayOfWeek ScheduleDayOfWeek { get; set; } = default;
        #endregion
        #region ScheduleDate
        public Byte ScheduleDate { get; set; } = default;
        #endregion
        #region ScheduleHour
        public SByte ScheduleHour { get; set; } = default;
        #endregion
        #region ScheduleMinute
        public SByte ScheduleMinute { get; set; } = default;
        #endregion
        #region Unknown3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown3 = new byte[3];
        public MemorySlice<Byte> Unknown3
        {
            get => _Unknown3;
            set => this._Unknown3 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IPackageGetter.Unknown3 => this.Unknown3;
        #endregion
        #region ScheduleDurationInMinutes
        public Int32 ScheduleDurationInMinutes { get; set; } = default;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IPackageGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Unknown4
        public Int32? Unknown4 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPackageGetter.Unknown4 => this.Unknown4;
        #endregion
        #region IdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageIdles? _IdleAnimations;
        public PackageIdles? IdleAnimations
        {
            get => _IdleAnimations;
            set => _IdleAnimations = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageIdlesGetter? IPackageGetter.IdleAnimations => this.IdleAnimations;
        #endregion
        #region CombatStyle
        public FormLinkNullable<ICombatStyleGetter> CombatStyle { get; set; } = new FormLinkNullable<ICombatStyleGetter>();
        #endregion
        #region OwnerQuest
        public FormLinkNullable<IQuestGetter> OwnerQuest { get; set; } = new FormLinkNullable<IQuestGetter>();
        #endregion
        #region PackageTemplate
        public FormLink<IPackageGetter> PackageTemplate { get; set; } = new FormLink<IPackageGetter>();
        #endregion
        #region DataInputVersion
        public Int32 DataInputVersion { get; set; } = default;
        #endregion
        #region Data
        private readonly Dictionary<SByte, APackageData> _Data = new Dictionary<SByte, APackageData>();
        public IDictionary<SByte, APackageData> Data => _Data;
        #region Interface Members
        IDictionary<SByte, APackageData> IPackage.Data => _Data;
        IReadOnlyDictionary<SByte, IAPackageDataGetter> IPackageGetter.Data => _Data.Covariant<SByte, APackageData, IAPackageDataGetter>();
        #endregion

        #endregion
        #region XnamMarker
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _XnamMarker = new byte[0];
        public MemorySlice<Byte> XnamMarker
        {
            get => _XnamMarker;
            set => this._XnamMarker = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IPackageGetter.XnamMarker => this.XnamMarker;
        #endregion
        #region ProcedureTree
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PackageBranch> _ProcedureTree = new ExtendedList<PackageBranch>();
        public ExtendedList<PackageBranch> ProcedureTree
        {
            get => this._ProcedureTree;
            protected set => this._ProcedureTree = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPackageBranchGetter> IPackageGetter.ProcedureTree => _ProcedureTree;
        #endregion

        #endregion
        #region OnBegin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageEvent? _OnBegin;
        public PackageEvent? OnBegin
        {
            get => _OnBegin;
            set => _OnBegin = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageEventGetter? IPackageGetter.OnBegin => this.OnBegin;
        #endregion
        #region OnEnd
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageEvent? _OnEnd;
        public PackageEvent? OnEnd
        {
            get => _OnEnd;
            set => _OnEnd = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageEventGetter? IPackageGetter.OnEnd => this.OnEnd;
        #endregion
        #region OnChange
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageEvent? _OnChange;
        public PackageEvent? OnChange
        {
            get => _OnChange;
            set => _OnChange = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageEventGetter? IPackageGetter.OnChange => this.OnChange;
        #endregion
        #region PKDTDataTypeState
        public Package.PKDTDataType PKDTDataTypeState { get; set; } = default;
        #endregion
        #region PSDTDataTypeState
        public Package.PSDTDataType PSDTDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPackageGetter rhs)) return false;
            return ((PackageCommon)((IPackageGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPackageGetter? obj)
        {
            return ((PackageCommon)((IPackageGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PackageCommon)((IPackageGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, PackageAdapter.Mask<TItem>?>(initialValue, new PackageAdapter.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.Type = initialValue;
                this.InterruptOverride = initialValue;
                this.PreferredSpeed = initialValue;
                this.Unknown = initialValue;
                this.InteruptFlags = initialValue;
                this.Unknown2 = initialValue;
                this.ScheduleMonth = initialValue;
                this.ScheduleDayOfWeek = initialValue;
                this.ScheduleDate = initialValue;
                this.ScheduleHour = initialValue;
                this.ScheduleMinute = initialValue;
                this.Unknown3 = initialValue;
                this.ScheduleDurationInMinutes = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Unknown4 = initialValue;
                this.IdleAnimations = new MaskItem<TItem, PackageIdles.Mask<TItem>?>(initialValue, new PackageIdles.Mask<TItem>(initialValue));
                this.CombatStyle = initialValue;
                this.OwnerQuest = initialValue;
                this.PackageTemplate = initialValue;
                this.DataInputVersion = initialValue;
                this.Data = new MaskItem<TItem, IEnumerable<MaskItemIndexed<SByte, TItem, APackageData.Mask<TItem>?>>?>(initialValue, null);
                this.XnamMarker = initialValue;
                this.ProcedureTree = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PackageBranch.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PackageBranch.Mask<TItem>?>>());
                this.OnBegin = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(initialValue, new PackageEvent.Mask<TItem>(initialValue));
                this.OnEnd = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(initialValue, new PackageEvent.Mask<TItem>(initialValue));
                this.OnChange = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(initialValue, new PackageEvent.Mask<TItem>(initialValue));
                this.PKDTDataTypeState = initialValue;
                this.PSDTDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem Flags,
                TItem Type,
                TItem InterruptOverride,
                TItem PreferredSpeed,
                TItem Unknown,
                TItem InteruptFlags,
                TItem Unknown2,
                TItem ScheduleMonth,
                TItem ScheduleDayOfWeek,
                TItem ScheduleDate,
                TItem ScheduleHour,
                TItem ScheduleMinute,
                TItem Unknown3,
                TItem ScheduleDurationInMinutes,
                TItem Conditions,
                TItem Unknown4,
                TItem IdleAnimations,
                TItem CombatStyle,
                TItem OwnerQuest,
                TItem PackageTemplate,
                TItem DataInputVersion,
                TItem Data,
                TItem XnamMarker,
                TItem ProcedureTree,
                TItem OnBegin,
                TItem OnEnd,
                TItem OnChange,
                TItem PKDTDataTypeState,
                TItem PSDTDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, PackageAdapter.Mask<TItem>?>(VirtualMachineAdapter, new PackageAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Flags = Flags;
                this.Type = Type;
                this.InterruptOverride = InterruptOverride;
                this.PreferredSpeed = PreferredSpeed;
                this.Unknown = Unknown;
                this.InteruptFlags = InteruptFlags;
                this.Unknown2 = Unknown2;
                this.ScheduleMonth = ScheduleMonth;
                this.ScheduleDayOfWeek = ScheduleDayOfWeek;
                this.ScheduleDate = ScheduleDate;
                this.ScheduleHour = ScheduleHour;
                this.ScheduleMinute = ScheduleMinute;
                this.Unknown3 = Unknown3;
                this.ScheduleDurationInMinutes = ScheduleDurationInMinutes;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Unknown4 = Unknown4;
                this.IdleAnimations = new MaskItem<TItem, PackageIdles.Mask<TItem>?>(IdleAnimations, new PackageIdles.Mask<TItem>(IdleAnimations));
                this.CombatStyle = CombatStyle;
                this.OwnerQuest = OwnerQuest;
                this.PackageTemplate = PackageTemplate;
                this.DataInputVersion = DataInputVersion;
                this.Data = new MaskItem<TItem, IEnumerable<MaskItemIndexed<SByte, TItem, APackageData.Mask<TItem>?>>?>(Data, null);
                this.XnamMarker = XnamMarker;
                this.ProcedureTree = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PackageBranch.Mask<TItem>?>>?>(ProcedureTree, Enumerable.Empty<MaskItemIndexed<TItem, PackageBranch.Mask<TItem>?>>());
                this.OnBegin = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(OnBegin, new PackageEvent.Mask<TItem>(OnBegin));
                this.OnEnd = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(OnEnd, new PackageEvent.Mask<TItem>(OnEnd));
                this.OnChange = new MaskItem<TItem, PackageEvent.Mask<TItem>?>(OnChange, new PackageEvent.Mask<TItem>(OnChange));
                this.PKDTDataTypeState = PKDTDataTypeState;
                this.PSDTDataTypeState = PSDTDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, PackageAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Flags;
            public TItem Type;
            public TItem InterruptOverride;
            public TItem PreferredSpeed;
            public TItem Unknown;
            public TItem InteruptFlags;
            public TItem Unknown2;
            public TItem ScheduleMonth;
            public TItem ScheduleDayOfWeek;
            public TItem ScheduleDate;
            public TItem ScheduleHour;
            public TItem ScheduleMinute;
            public TItem Unknown3;
            public TItem ScheduleDurationInMinutes;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem Unknown4;
            public MaskItem<TItem, PackageIdles.Mask<TItem>?>? IdleAnimations { get; set; }
            public TItem CombatStyle;
            public TItem OwnerQuest;
            public TItem PackageTemplate;
            public TItem DataInputVersion;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<SByte, TItem, APackageData.Mask<TItem>?>>?>? Data;
            public TItem XnamMarker;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PackageBranch.Mask<TItem>?>>?>? ProcedureTree;
            public MaskItem<TItem, PackageEvent.Mask<TItem>?>? OnBegin { get; set; }
            public MaskItem<TItem, PackageEvent.Mask<TItem>?>? OnEnd { get; set; }
            public MaskItem<TItem, PackageEvent.Mask<TItem>?>? OnChange { get; set; }
            public TItem PKDTDataTypeState;
            public TItem PSDTDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.InterruptOverride, rhs.InterruptOverride)) return false;
                if (!object.Equals(this.PreferredSpeed, rhs.PreferredSpeed)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.InteruptFlags, rhs.InteruptFlags)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.ScheduleMonth, rhs.ScheduleMonth)) return false;
                if (!object.Equals(this.ScheduleDayOfWeek, rhs.ScheduleDayOfWeek)) return false;
                if (!object.Equals(this.ScheduleDate, rhs.ScheduleDate)) return false;
                if (!object.Equals(this.ScheduleHour, rhs.ScheduleHour)) return false;
                if (!object.Equals(this.ScheduleMinute, rhs.ScheduleMinute)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.ScheduleDurationInMinutes, rhs.ScheduleDurationInMinutes)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Unknown4, rhs.Unknown4)) return false;
                if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
                if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
                if (!object.Equals(this.OwnerQuest, rhs.OwnerQuest)) return false;
                if (!object.Equals(this.PackageTemplate, rhs.PackageTemplate)) return false;
                if (!object.Equals(this.DataInputVersion, rhs.DataInputVersion)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.XnamMarker, rhs.XnamMarker)) return false;
                if (!object.Equals(this.ProcedureTree, rhs.ProcedureTree)) return false;
                if (!object.Equals(this.OnBegin, rhs.OnBegin)) return false;
                if (!object.Equals(this.OnEnd, rhs.OnEnd)) return false;
                if (!object.Equals(this.OnChange, rhs.OnChange)) return false;
                if (!object.Equals(this.PKDTDataTypeState, rhs.PKDTDataTypeState)) return false;
                if (!object.Equals(this.PSDTDataTypeState, rhs.PSDTDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.InterruptOverride);
                hash.Add(this.PreferredSpeed);
                hash.Add(this.Unknown);
                hash.Add(this.InteruptFlags);
                hash.Add(this.Unknown2);
                hash.Add(this.ScheduleMonth);
                hash.Add(this.ScheduleDayOfWeek);
                hash.Add(this.ScheduleDate);
                hash.Add(this.ScheduleHour);
                hash.Add(this.ScheduleMinute);
                hash.Add(this.Unknown3);
                hash.Add(this.ScheduleDurationInMinutes);
                hash.Add(this.Conditions);
                hash.Add(this.Unknown4);
                hash.Add(this.IdleAnimations);
                hash.Add(this.CombatStyle);
                hash.Add(this.OwnerQuest);
                hash.Add(this.PackageTemplate);
                hash.Add(this.DataInputVersion);
                hash.Add(this.Data);
                hash.Add(this.XnamMarker);
                hash.Add(this.ProcedureTree);
                hash.Add(this.OnBegin);
                hash.Add(this.OnEnd);
                hash.Add(this.OnChange);
                hash.Add(this.PKDTDataTypeState);
                hash.Add(this.PSDTDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.InterruptOverride)) return false;
                if (!eval(this.PreferredSpeed)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.InteruptFlags)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.ScheduleMonth)) return false;
                if (!eval(this.ScheduleDayOfWeek)) return false;
                if (!eval(this.ScheduleDate)) return false;
                if (!eval(this.ScheduleHour)) return false;
                if (!eval(this.ScheduleMinute)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.ScheduleDurationInMinutes)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Unknown4)) return false;
                if (IdleAnimations != null)
                {
                    if (!eval(this.IdleAnimations.Overall)) return false;
                    if (this.IdleAnimations.Specific != null && !this.IdleAnimations.Specific.All(eval)) return false;
                }
                if (!eval(this.CombatStyle)) return false;
                if (!eval(this.OwnerQuest)) return false;
                if (!eval(this.PackageTemplate)) return false;
                if (!eval(this.DataInputVersion)) return false;
                if (this.Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null)
                    {
                        foreach (var item in this.Data.Specific)
                        {
                            if (item.Specific != null)
                            {
                                if (!eval(item.Overall)) return false;
                                if (!item.Specific?.All(eval) ?? false) return false;
                            }
                        }
                    }
                }
                if (!eval(this.XnamMarker)) return false;
                if (this.ProcedureTree != null)
                {
                    if (!eval(this.ProcedureTree.Overall)) return false;
                    if (this.ProcedureTree.Specific != null)
                    {
                        foreach (var item in this.ProcedureTree.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (OnBegin != null)
                {
                    if (!eval(this.OnBegin.Overall)) return false;
                    if (this.OnBegin.Specific != null && !this.OnBegin.Specific.All(eval)) return false;
                }
                if (OnEnd != null)
                {
                    if (!eval(this.OnEnd.Overall)) return false;
                    if (this.OnEnd.Specific != null && !this.OnEnd.Specific.All(eval)) return false;
                }
                if (OnChange != null)
                {
                    if (!eval(this.OnChange.Overall)) return false;
                    if (this.OnChange.Specific != null && !this.OnChange.Specific.All(eval)) return false;
                }
                if (!eval(this.PKDTDataTypeState)) return false;
                if (!eval(this.PSDTDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.InterruptOverride)) return true;
                if (eval(this.PreferredSpeed)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.InteruptFlags)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.ScheduleMonth)) return true;
                if (eval(this.ScheduleDayOfWeek)) return true;
                if (eval(this.ScheduleDate)) return true;
                if (eval(this.ScheduleHour)) return true;
                if (eval(this.ScheduleMinute)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.ScheduleDurationInMinutes)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Unknown4)) return true;
                if (IdleAnimations != null)
                {
                    if (eval(this.IdleAnimations.Overall)) return true;
                    if (this.IdleAnimations.Specific != null && this.IdleAnimations.Specific.Any(eval)) return true;
                }
                if (eval(this.CombatStyle)) return true;
                if (eval(this.OwnerQuest)) return true;
                if (eval(this.PackageTemplate)) return true;
                if (eval(this.DataInputVersion)) return true;
                if (this.Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null)
                    {
                        foreach (var item in this.Data.Specific)
                        {
                            if (item.Specific != null)
                            {
                                if (eval(item.Overall)) return true;
                                if (item.Specific?.Any(eval) ?? false) return true;
                            }
                        }
                    }
                }
                if (eval(this.XnamMarker)) return true;
                if (this.ProcedureTree != null)
                {
                    if (eval(this.ProcedureTree.Overall)) return true;
                    if (this.ProcedureTree.Specific != null)
                    {
                        foreach (var item in this.ProcedureTree.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (OnBegin != null)
                {
                    if (eval(this.OnBegin.Overall)) return true;
                    if (this.OnBegin.Specific != null && this.OnBegin.Specific.Any(eval)) return true;
                }
                if (OnEnd != null)
                {
                    if (eval(this.OnEnd.Overall)) return true;
                    if (this.OnEnd.Specific != null && this.OnEnd.Specific.Any(eval)) return true;
                }
                if (OnChange != null)
                {
                    if (eval(this.OnChange.Overall)) return true;
                    if (this.OnChange.Specific != null && this.OnChange.Specific.Any(eval)) return true;
                }
                if (eval(this.PKDTDataTypeState)) return true;
                if (eval(this.PSDTDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Package.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, PackageAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.InterruptOverride = eval(this.InterruptOverride);
                obj.PreferredSpeed = eval(this.PreferredSpeed);
                obj.Unknown = eval(this.Unknown);
                obj.InteruptFlags = eval(this.InteruptFlags);
                obj.Unknown2 = eval(this.Unknown2);
                obj.ScheduleMonth = eval(this.ScheduleMonth);
                obj.ScheduleDayOfWeek = eval(this.ScheduleDayOfWeek);
                obj.ScheduleDate = eval(this.ScheduleDate);
                obj.ScheduleHour = eval(this.ScheduleHour);
                obj.ScheduleMinute = eval(this.ScheduleMinute);
                obj.Unknown3 = eval(this.Unknown3);
                obj.ScheduleDurationInMinutes = eval(this.ScheduleDurationInMinutes);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Unknown4 = eval(this.Unknown4);
                obj.IdleAnimations = this.IdleAnimations == null ? null : new MaskItem<R, PackageIdles.Mask<R>?>(eval(this.IdleAnimations.Overall), this.IdleAnimations.Specific?.Translate(eval));
                obj.CombatStyle = eval(this.CombatStyle);
                obj.OwnerQuest = eval(this.OwnerQuest);
                obj.PackageTemplate = eval(this.PackageTemplate);
                obj.DataInputVersion = eval(this.DataInputVersion);
                if (Data != null)
                {
                    obj.Data = new MaskItem<R, IEnumerable<MaskItemIndexed<SByte, R, APackageData.Mask<R>?>>?>(eval(this.Data.Overall), default);
                    if (Data.Specific != null)
                    {
                        List<MaskItemIndexed<SByte, R, APackageData.Mask<R>?>> l = new List<MaskItemIndexed<SByte, R, APackageData.Mask<R>?>>();
                        obj.Data.Specific = l;
                        foreach (var item in Data.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                obj.XnamMarker = eval(this.XnamMarker);
                if (ProcedureTree != null)
                {
                    obj.ProcedureTree = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PackageBranch.Mask<R>?>>?>(eval(this.ProcedureTree.Overall), Enumerable.Empty<MaskItemIndexed<R, PackageBranch.Mask<R>?>>());
                    if (ProcedureTree.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PackageBranch.Mask<R>?>>();
                        obj.ProcedureTree.Specific = l;
                        foreach (var item in ProcedureTree.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, PackageBranch.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, PackageBranch.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.OnBegin = this.OnBegin == null ? null : new MaskItem<R, PackageEvent.Mask<R>?>(eval(this.OnBegin.Overall), this.OnBegin.Specific?.Translate(eval));
                obj.OnEnd = this.OnEnd == null ? null : new MaskItem<R, PackageEvent.Mask<R>?>(eval(this.OnEnd.Overall), this.OnEnd.Specific?.Translate(eval));
                obj.OnChange = this.OnChange == null ? null : new MaskItem<R, PackageEvent.Mask<R>?>(eval(this.OnChange.Overall), this.OnChange.Specific?.Translate(eval));
                obj.PKDTDataTypeState = eval(this.PKDTDataTypeState);
                obj.PSDTDataTypeState = eval(this.PSDTDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Package.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Package.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Package.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.InterruptOverride ?? true)
                    {
                        fg.AppendItem(InterruptOverride, "InterruptOverride");
                    }
                    if (printMask?.PreferredSpeed ?? true)
                    {
                        fg.AppendItem(PreferredSpeed, "PreferredSpeed");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.InteruptFlags ?? true)
                    {
                        fg.AppendItem(InteruptFlags, "InteruptFlags");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.ScheduleMonth ?? true)
                    {
                        fg.AppendItem(ScheduleMonth, "ScheduleMonth");
                    }
                    if (printMask?.ScheduleDayOfWeek ?? true)
                    {
                        fg.AppendItem(ScheduleDayOfWeek, "ScheduleDayOfWeek");
                    }
                    if (printMask?.ScheduleDate ?? true)
                    {
                        fg.AppendItem(ScheduleDate, "ScheduleDate");
                    }
                    if (printMask?.ScheduleHour ?? true)
                    {
                        fg.AppendItem(ScheduleHour, "ScheduleHour");
                    }
                    if (printMask?.ScheduleMinute ?? true)
                    {
                        fg.AppendItem(ScheduleMinute, "ScheduleMinute");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        fg.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.ScheduleDurationInMinutes ?? true)
                    {
                        fg.AppendItem(ScheduleDurationInMinutes, "ScheduleDurationInMinutes");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Unknown4 ?? true)
                    {
                        fg.AppendItem(Unknown4, "Unknown4");
                    }
                    if (printMask?.IdleAnimations?.Overall ?? true)
                    {
                        IdleAnimations?.ToString(fg);
                    }
                    if (printMask?.CombatStyle ?? true)
                    {
                        fg.AppendItem(CombatStyle, "CombatStyle");
                    }
                    if (printMask?.OwnerQuest ?? true)
                    {
                        fg.AppendItem(OwnerQuest, "OwnerQuest");
                    }
                    if (printMask?.PackageTemplate ?? true)
                    {
                        fg.AppendItem(PackageTemplate, "PackageTemplate");
                    }
                    if (printMask?.DataInputVersion ?? true)
                    {
                        fg.AppendItem(DataInputVersion, "DataInputVersion");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        fg.AppendLine("Data =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Data != null)
                            {
                                if (Data.Overall != null)
                                {
                                    fg.AppendLine(Data.Overall.ToString());
                                }
                                if (Data.Specific != null)
                                {
                                    foreach (var subItem in Data.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine("Key => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Index);
                                            }
                                            fg.AppendLine("]");
                                            fg.AppendLine("Value => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                subItem.Specific?.ToString(fg);
                                            }
                                            fg.AppendLine("]");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.XnamMarker ?? true)
                    {
                        fg.AppendItem(XnamMarker, "XnamMarker");
                    }
                    if ((printMask?.ProcedureTree?.Overall ?? true)
                        && ProcedureTree.TryGet(out var ProcedureTreeItem))
                    {
                        fg.AppendLine("ProcedureTree =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ProcedureTreeItem.Overall);
                            if (ProcedureTreeItem.Specific != null)
                            {
                                foreach (var subItem in ProcedureTreeItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.OnBegin?.Overall ?? true)
                    {
                        OnBegin?.ToString(fg);
                    }
                    if (printMask?.OnEnd?.Overall ?? true)
                    {
                        OnEnd?.ToString(fg);
                    }
                    if (printMask?.OnChange?.Overall ?? true)
                    {
                        OnChange?.ToString(fg);
                    }
                    if (printMask?.PKDTDataTypeState ?? true)
                    {
                        fg.AppendItem(PKDTDataTypeState, "PKDTDataTypeState");
                    }
                    if (printMask?.PSDTDataTypeState ?? true)
                    {
                        fg.AppendItem(PSDTDataTypeState, "PSDTDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, PackageAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Flags;
            public Exception? Type;
            public Exception? InterruptOverride;
            public Exception? PreferredSpeed;
            public Exception? Unknown;
            public Exception? InteruptFlags;
            public Exception? Unknown2;
            public Exception? ScheduleMonth;
            public Exception? ScheduleDayOfWeek;
            public Exception? ScheduleDate;
            public Exception? ScheduleHour;
            public Exception? ScheduleMinute;
            public Exception? Unknown3;
            public Exception? ScheduleDurationInMinutes;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? Unknown4;
            public MaskItem<Exception?, PackageIdles.ErrorMask?>? IdleAnimations;
            public Exception? CombatStyle;
            public Exception? OwnerQuest;
            public Exception? PackageTemplate;
            public Exception? DataInputVersion;
            public MaskItem<Exception?, IEnumerable<MaskItemIndexed<SByte, Exception?, APackageData.ErrorMask?>>?>? Data;
            public Exception? XnamMarker;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PackageBranch.ErrorMask?>>?>? ProcedureTree;
            public MaskItem<Exception?, PackageEvent.ErrorMask?>? OnBegin;
            public MaskItem<Exception?, PackageEvent.ErrorMask?>? OnEnd;
            public MaskItem<Exception?, PackageEvent.ErrorMask?>? OnChange;
            public Exception? PKDTDataTypeState;
            public Exception? PSDTDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Package_FieldIndex enu = (Package_FieldIndex)index;
                switch (enu)
                {
                    case Package_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Package_FieldIndex.Flags:
                        return Flags;
                    case Package_FieldIndex.Type:
                        return Type;
                    case Package_FieldIndex.InterruptOverride:
                        return InterruptOverride;
                    case Package_FieldIndex.PreferredSpeed:
                        return PreferredSpeed;
                    case Package_FieldIndex.Unknown:
                        return Unknown;
                    case Package_FieldIndex.InteruptFlags:
                        return InteruptFlags;
                    case Package_FieldIndex.Unknown2:
                        return Unknown2;
                    case Package_FieldIndex.ScheduleMonth:
                        return ScheduleMonth;
                    case Package_FieldIndex.ScheduleDayOfWeek:
                        return ScheduleDayOfWeek;
                    case Package_FieldIndex.ScheduleDate:
                        return ScheduleDate;
                    case Package_FieldIndex.ScheduleHour:
                        return ScheduleHour;
                    case Package_FieldIndex.ScheduleMinute:
                        return ScheduleMinute;
                    case Package_FieldIndex.Unknown3:
                        return Unknown3;
                    case Package_FieldIndex.ScheduleDurationInMinutes:
                        return ScheduleDurationInMinutes;
                    case Package_FieldIndex.Conditions:
                        return Conditions;
                    case Package_FieldIndex.Unknown4:
                        return Unknown4;
                    case Package_FieldIndex.IdleAnimations:
                        return IdleAnimations;
                    case Package_FieldIndex.CombatStyle:
                        return CombatStyle;
                    case Package_FieldIndex.OwnerQuest:
                        return OwnerQuest;
                    case Package_FieldIndex.PackageTemplate:
                        return PackageTemplate;
                    case Package_FieldIndex.DataInputVersion:
                        return DataInputVersion;
                    case Package_FieldIndex.Data:
                        return Data;
                    case Package_FieldIndex.XnamMarker:
                        return XnamMarker;
                    case Package_FieldIndex.ProcedureTree:
                        return ProcedureTree;
                    case Package_FieldIndex.OnBegin:
                        return OnBegin;
                    case Package_FieldIndex.OnEnd:
                        return OnEnd;
                    case Package_FieldIndex.OnChange:
                        return OnChange;
                    case Package_FieldIndex.PKDTDataTypeState:
                        return PKDTDataTypeState;
                    case Package_FieldIndex.PSDTDataTypeState:
                        return PSDTDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Package_FieldIndex enu = (Package_FieldIndex)index;
                switch (enu)
                {
                    case Package_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, PackageAdapter.ErrorMask?>(ex, null);
                        break;
                    case Package_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Package_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Package_FieldIndex.InterruptOverride:
                        this.InterruptOverride = ex;
                        break;
                    case Package_FieldIndex.PreferredSpeed:
                        this.PreferredSpeed = ex;
                        break;
                    case Package_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Package_FieldIndex.InteruptFlags:
                        this.InteruptFlags = ex;
                        break;
                    case Package_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case Package_FieldIndex.ScheduleMonth:
                        this.ScheduleMonth = ex;
                        break;
                    case Package_FieldIndex.ScheduleDayOfWeek:
                        this.ScheduleDayOfWeek = ex;
                        break;
                    case Package_FieldIndex.ScheduleDate:
                        this.ScheduleDate = ex;
                        break;
                    case Package_FieldIndex.ScheduleHour:
                        this.ScheduleHour = ex;
                        break;
                    case Package_FieldIndex.ScheduleMinute:
                        this.ScheduleMinute = ex;
                        break;
                    case Package_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case Package_FieldIndex.ScheduleDurationInMinutes:
                        this.ScheduleDurationInMinutes = ex;
                        break;
                    case Package_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Package_FieldIndex.Unknown4:
                        this.Unknown4 = ex;
                        break;
                    case Package_FieldIndex.IdleAnimations:
                        this.IdleAnimations = new MaskItem<Exception?, PackageIdles.ErrorMask?>(ex, null);
                        break;
                    case Package_FieldIndex.CombatStyle:
                        this.CombatStyle = ex;
                        break;
                    case Package_FieldIndex.OwnerQuest:
                        this.OwnerQuest = ex;
                        break;
                    case Package_FieldIndex.PackageTemplate:
                        this.PackageTemplate = ex;
                        break;
                    case Package_FieldIndex.DataInputVersion:
                        this.DataInputVersion = ex;
                        break;
                    case Package_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, IEnumerable<MaskItemIndexed<SByte, Exception?, APackageData.ErrorMask?>>?>(ex, null);
                        break;
                    case Package_FieldIndex.XnamMarker:
                        this.XnamMarker = ex;
                        break;
                    case Package_FieldIndex.ProcedureTree:
                        this.ProcedureTree = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PackageBranch.ErrorMask?>>?>(ex, null);
                        break;
                    case Package_FieldIndex.OnBegin:
                        this.OnBegin = new MaskItem<Exception?, PackageEvent.ErrorMask?>(ex, null);
                        break;
                    case Package_FieldIndex.OnEnd:
                        this.OnEnd = new MaskItem<Exception?, PackageEvent.ErrorMask?>(ex, null);
                        break;
                    case Package_FieldIndex.OnChange:
                        this.OnChange = new MaskItem<Exception?, PackageEvent.ErrorMask?>(ex, null);
                        break;
                    case Package_FieldIndex.PKDTDataTypeState:
                        this.PKDTDataTypeState = ex;
                        break;
                    case Package_FieldIndex.PSDTDataTypeState:
                        this.PSDTDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Package_FieldIndex enu = (Package_FieldIndex)index;
                switch (enu)
                {
                    case Package_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, PackageAdapter.ErrorMask?>?)obj;
                        break;
                    case Package_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Package_FieldIndex.InterruptOverride:
                        this.InterruptOverride = (Exception?)obj;
                        break;
                    case Package_FieldIndex.PreferredSpeed:
                        this.PreferredSpeed = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Package_FieldIndex.InteruptFlags:
                        this.InteruptFlags = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleMonth:
                        this.ScheduleMonth = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleDayOfWeek:
                        this.ScheduleDayOfWeek = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleDate:
                        this.ScheduleDate = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleHour:
                        this.ScheduleHour = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleMinute:
                        this.ScheduleMinute = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ScheduleDurationInMinutes:
                        this.ScheduleDurationInMinutes = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Package_FieldIndex.Unknown4:
                        this.Unknown4 = (Exception?)obj;
                        break;
                    case Package_FieldIndex.IdleAnimations:
                        this.IdleAnimations = (MaskItem<Exception?, PackageIdles.ErrorMask?>?)obj;
                        break;
                    case Package_FieldIndex.CombatStyle:
                        this.CombatStyle = (Exception?)obj;
                        break;
                    case Package_FieldIndex.OwnerQuest:
                        this.OwnerQuest = (Exception?)obj;
                        break;
                    case Package_FieldIndex.PackageTemplate:
                        this.PackageTemplate = (Exception?)obj;
                        break;
                    case Package_FieldIndex.DataInputVersion:
                        this.DataInputVersion = (Exception?)obj;
                        break;
                    case Package_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, IEnumerable<MaskItemIndexed<SByte, Exception?, APackageData.ErrorMask?>>?>)obj;
                        break;
                    case Package_FieldIndex.XnamMarker:
                        this.XnamMarker = (Exception?)obj;
                        break;
                    case Package_FieldIndex.ProcedureTree:
                        this.ProcedureTree = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PackageBranch.ErrorMask?>>?>)obj;
                        break;
                    case Package_FieldIndex.OnBegin:
                        this.OnBegin = (MaskItem<Exception?, PackageEvent.ErrorMask?>?)obj;
                        break;
                    case Package_FieldIndex.OnEnd:
                        this.OnEnd = (MaskItem<Exception?, PackageEvent.ErrorMask?>?)obj;
                        break;
                    case Package_FieldIndex.OnChange:
                        this.OnChange = (MaskItem<Exception?, PackageEvent.ErrorMask?>?)obj;
                        break;
                    case Package_FieldIndex.PKDTDataTypeState:
                        this.PKDTDataTypeState = (Exception?)obj;
                        break;
                    case Package_FieldIndex.PSDTDataTypeState:
                        this.PSDTDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (InterruptOverride != null) return true;
                if (PreferredSpeed != null) return true;
                if (Unknown != null) return true;
                if (InteruptFlags != null) return true;
                if (Unknown2 != null) return true;
                if (ScheduleMonth != null) return true;
                if (ScheduleDayOfWeek != null) return true;
                if (ScheduleDate != null) return true;
                if (ScheduleHour != null) return true;
                if (ScheduleMinute != null) return true;
                if (Unknown3 != null) return true;
                if (ScheduleDurationInMinutes != null) return true;
                if (Conditions != null) return true;
                if (Unknown4 != null) return true;
                if (IdleAnimations != null) return true;
                if (CombatStyle != null) return true;
                if (OwnerQuest != null) return true;
                if (PackageTemplate != null) return true;
                if (DataInputVersion != null) return true;
                if (Data != null) return true;
                if (XnamMarker != null) return true;
                if (ProcedureTree != null) return true;
                if (OnBegin != null) return true;
                if (OnEnd != null) return true;
                if (OnChange != null) return true;
                if (PKDTDataTypeState != null) return true;
                if (PSDTDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Type, "Type");
                fg.AppendItem(InterruptOverride, "InterruptOverride");
                fg.AppendItem(PreferredSpeed, "PreferredSpeed");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(InteruptFlags, "InteruptFlags");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(ScheduleMonth, "ScheduleMonth");
                fg.AppendItem(ScheduleDayOfWeek, "ScheduleDayOfWeek");
                fg.AppendItem(ScheduleDate, "ScheduleDate");
                fg.AppendItem(ScheduleHour, "ScheduleHour");
                fg.AppendItem(ScheduleMinute, "ScheduleMinute");
                fg.AppendItem(Unknown3, "Unknown3");
                fg.AppendItem(ScheduleDurationInMinutes, "ScheduleDurationInMinutes");
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Unknown4, "Unknown4");
                IdleAnimations?.ToString(fg);
                fg.AppendItem(CombatStyle, "CombatStyle");
                fg.AppendItem(OwnerQuest, "OwnerQuest");
                fg.AppendItem(PackageTemplate, "PackageTemplate");
                fg.AppendItem(DataInputVersion, "DataInputVersion");
                fg.AppendLine("Data =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Data != null)
                    {
                        if (Data.Overall != null)
                        {
                            fg.AppendLine(Data.Overall.ToString());
                        }
                        if (Data.Specific != null)
                        {
                            foreach (var subItem in Data.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Index);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Specific?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendItem(XnamMarker, "XnamMarker");
                if (ProcedureTree.TryGet(out var ProcedureTreeItem))
                {
                    fg.AppendLine("ProcedureTree =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ProcedureTreeItem.Overall);
                        if (ProcedureTreeItem.Specific != null)
                        {
                            foreach (var subItem in ProcedureTreeItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                OnBegin?.ToString(fg);
                OnEnd?.ToString(fg);
                OnChange?.ToString(fg);
                fg.AppendItem(PKDTDataTypeState, "PKDTDataTypeState");
                fg.AppendItem(PSDTDataTypeState, "PSDTDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.InterruptOverride = this.InterruptOverride.Combine(rhs.InterruptOverride);
                ret.PreferredSpeed = this.PreferredSpeed.Combine(rhs.PreferredSpeed);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.InteruptFlags = this.InteruptFlags.Combine(rhs.InteruptFlags);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.ScheduleMonth = this.ScheduleMonth.Combine(rhs.ScheduleMonth);
                ret.ScheduleDayOfWeek = this.ScheduleDayOfWeek.Combine(rhs.ScheduleDayOfWeek);
                ret.ScheduleDate = this.ScheduleDate.Combine(rhs.ScheduleDate);
                ret.ScheduleHour = this.ScheduleHour.Combine(rhs.ScheduleHour);
                ret.ScheduleMinute = this.ScheduleMinute.Combine(rhs.ScheduleMinute);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.ScheduleDurationInMinutes = this.ScheduleDurationInMinutes.Combine(rhs.ScheduleDurationInMinutes);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Unknown4 = this.Unknown4.Combine(rhs.Unknown4);
                ret.IdleAnimations = this.IdleAnimations.Combine(rhs.IdleAnimations, (l, r) => l.Combine(r));
                ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
                ret.OwnerQuest = this.OwnerQuest.Combine(rhs.OwnerQuest);
                ret.PackageTemplate = this.PackageTemplate.Combine(rhs.PackageTemplate);
                ret.DataInputVersion = this.DataInputVersion.Combine(rhs.DataInputVersion);
                ret.Data = new MaskItem<Exception?, IEnumerable<MaskItemIndexed<SByte, Exception?, APackageData.ErrorMask?>>?>(ExceptionExt.Combine(this.Data?.Overall, rhs.Data?.Overall), ExceptionExt.Combine(this.Data?.Specific, rhs.Data?.Specific));
                ret.XnamMarker = this.XnamMarker.Combine(rhs.XnamMarker);
                ret.ProcedureTree = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PackageBranch.ErrorMask?>>?>(ExceptionExt.Combine(this.ProcedureTree?.Overall, rhs.ProcedureTree?.Overall), ExceptionExt.Combine(this.ProcedureTree?.Specific, rhs.ProcedureTree?.Specific));
                ret.OnBegin = this.OnBegin.Combine(rhs.OnBegin, (l, r) => l.Combine(r));
                ret.OnEnd = this.OnEnd.Combine(rhs.OnEnd, (l, r) => l.Combine(r));
                ret.OnChange = this.OnChange.Combine(rhs.OnChange, (l, r) => l.Combine(r));
                ret.PKDTDataTypeState = this.PKDTDataTypeState.Combine(rhs.PKDTDataTypeState);
                ret.PSDTDataTypeState = this.PSDTDataTypeState.Combine(rhs.PSDTDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public PackageAdapter.TranslationMask? VirtualMachineAdapter;
            public bool Flags;
            public bool Type;
            public bool InterruptOverride;
            public bool PreferredSpeed;
            public bool Unknown;
            public bool InteruptFlags;
            public bool Unknown2;
            public bool ScheduleMonth;
            public bool ScheduleDayOfWeek;
            public bool ScheduleDate;
            public bool ScheduleHour;
            public bool ScheduleMinute;
            public bool Unknown3;
            public bool ScheduleDurationInMinutes;
            public Condition.TranslationMask? Conditions;
            public bool Unknown4;
            public PackageIdles.TranslationMask? IdleAnimations;
            public bool CombatStyle;
            public bool OwnerQuest;
            public bool PackageTemplate;
            public bool DataInputVersion;
            public APackageData.TranslationMask? Data;
            public bool XnamMarker;
            public PackageBranch.TranslationMask? ProcedureTree;
            public PackageEvent.TranslationMask? OnBegin;
            public PackageEvent.TranslationMask? OnEnd;
            public PackageEvent.TranslationMask? OnChange;
            public bool PKDTDataTypeState;
            public bool PSDTDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.InterruptOverride = defaultOn;
                this.PreferredSpeed = defaultOn;
                this.Unknown = defaultOn;
                this.InteruptFlags = defaultOn;
                this.Unknown2 = defaultOn;
                this.ScheduleMonth = defaultOn;
                this.ScheduleDayOfWeek = defaultOn;
                this.ScheduleDate = defaultOn;
                this.ScheduleHour = defaultOn;
                this.ScheduleMinute = defaultOn;
                this.Unknown3 = defaultOn;
                this.ScheduleDurationInMinutes = defaultOn;
                this.Unknown4 = defaultOn;
                this.CombatStyle = defaultOn;
                this.OwnerQuest = defaultOn;
                this.PackageTemplate = defaultOn;
                this.DataInputVersion = defaultOn;
                this.XnamMarker = defaultOn;
                this.PKDTDataTypeState = defaultOn;
                this.PSDTDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((InterruptOverride, null));
                ret.Add((PreferredSpeed, null));
                ret.Add((Unknown, null));
                ret.Add((InteruptFlags, null));
                ret.Add((Unknown2, null));
                ret.Add((ScheduleMonth, null));
                ret.Add((ScheduleDayOfWeek, null));
                ret.Add((ScheduleDate, null));
                ret.Add((ScheduleHour, null));
                ret.Add((ScheduleMinute, null));
                ret.Add((Unknown3, null));
                ret.Add((ScheduleDurationInMinutes, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Unknown4, null));
                ret.Add((IdleAnimations != null ? IdleAnimations.OnOverall : DefaultOn, IdleAnimations?.GetCrystal()));
                ret.Add((CombatStyle, null));
                ret.Add((OwnerQuest, null));
                ret.Add((PackageTemplate, null));
                ret.Add((DataInputVersion, null));
                ret.Add((Data != null || DefaultOn, Data?.GetCrystal()));
                ret.Add((XnamMarker, null));
                ret.Add((ProcedureTree == null ? DefaultOn : !ProcedureTree.GetCrystal().CopyNothing, ProcedureTree?.GetCrystal()));
                ret.Add((OnBegin != null ? OnBegin.OnOverall : DefaultOn, OnBegin?.GetCrystal()));
                ret.Add((OnEnd != null ? OnEnd.OnOverall : DefaultOn, OnEnd?.GetCrystal()));
                ret.Add((OnChange != null ? OnChange.OnOverall : DefaultOn, OnChange?.GetCrystal()));
                ret.Add((PKDTDataTypeState, null));
                ret.Add((PSDTDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Package_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PackageCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PackageSetterCommon.Instance.RemapLinks(this, mapping);
        public Package(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Package(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Package(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Package(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Package(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum PKDTDataType
        {
        }
        [Flags]
        public enum PSDTDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PackageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Package CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Package();
            ((PackageSetterCommon)((IPackageGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Package item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PackageSetterCommon)((IPackageGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Package GetNew()
        {
            return new Package();
        }

    }
    #endregion

    #region Interface
    public partial interface IPackage :
        IPackageGetter,
        IFallout4MajorRecord,
        ILoquiObjectSetter<IPackageInternal>,
        IFormLinkContainer
    {
        new PackageAdapter? VirtualMachineAdapter { get; set; }
        new Package.Flag Flags { get; set; }
        new Package.Types Type { get; set; }
        new Package.Interrupt InterruptOverride { get; set; }
        new Package.Speed PreferredSpeed { get; set; }
        new Byte Unknown { get; set; }
        new Package.InterruptFlag InteruptFlags { get; set; }
        new UInt16 Unknown2 { get; set; }
        new SByte ScheduleMonth { get; set; }
        new Package.DayOfWeek ScheduleDayOfWeek { get; set; }
        new Byte ScheduleDate { get; set; }
        new SByte ScheduleHour { get; set; }
        new SByte ScheduleMinute { get; set; }
        new MemorySlice<Byte> Unknown3 { get; set; }
        new Int32 ScheduleDurationInMinutes { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new Int32? Unknown4 { get; set; }
        new PackageIdles? IdleAnimations { get; set; }
        new FormLinkNullable<ICombatStyleGetter> CombatStyle { get; set; }
        new FormLinkNullable<IQuestGetter> OwnerQuest { get; set; }
        new FormLink<IPackageGetter> PackageTemplate { get; set; }
        new Int32 DataInputVersion { get; set; }
        new IDictionary<SByte, APackageData> Data { get; }
        new MemorySlice<Byte> XnamMarker { get; set; }
        new ExtendedList<PackageBranch> ProcedureTree { get; }
        new PackageEvent? OnBegin { get; set; }
        new PackageEvent? OnEnd { get; set; }
        new PackageEvent? OnChange { get; set; }
        new Package.PKDTDataType PKDTDataTypeState { get; set; }
        new Package.PSDTDataType PSDTDataTypeState { get; set; }
    }

    public partial interface IPackageInternal :
        IFallout4MajorRecordInternal,
        IPackage,
        IPackageGetter
    {
        new IDictionary<SByte, APackageData> Data { get; }
    }

    public partial interface IPackageGetter :
        IFallout4MajorRecordGetter,
        ILoquiObject<IPackageGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Package_Registration.Instance;
        IPackageAdapterGetter? VirtualMachineAdapter { get; }
        Package.Flag Flags { get; }
        Package.Types Type { get; }
        Package.Interrupt InterruptOverride { get; }
        Package.Speed PreferredSpeed { get; }
        Byte Unknown { get; }
        Package.InterruptFlag InteruptFlags { get; }
        UInt16 Unknown2 { get; }
        SByte ScheduleMonth { get; }
        Package.DayOfWeek ScheduleDayOfWeek { get; }
        Byte ScheduleDate { get; }
        SByte ScheduleHour { get; }
        SByte ScheduleMinute { get; }
        ReadOnlyMemorySlice<Byte> Unknown3 { get; }
        Int32 ScheduleDurationInMinutes { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        Int32? Unknown4 { get; }
        IPackageIdlesGetter? IdleAnimations { get; }
        FormLinkNullable<ICombatStyleGetter> CombatStyle { get; }
        FormLinkNullable<IQuestGetter> OwnerQuest { get; }
        FormLink<IPackageGetter> PackageTemplate { get; }
        Int32 DataInputVersion { get; }
        IReadOnlyDictionary<SByte, IAPackageDataGetter> Data { get; }
        ReadOnlyMemorySlice<Byte> XnamMarker { get; }
        IReadOnlyList<IPackageBranchGetter> ProcedureTree { get; }
        IPackageEventGetter? OnBegin { get; }
        IPackageEventGetter? OnEnd { get; }
        IPackageEventGetter? OnChange { get; }
        Package.PKDTDataType PKDTDataTypeState { get; }
        Package.PSDTDataType PSDTDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PackageMixIn
    {
        public static void Clear(this IPackageInternal item)
        {
            ((PackageSetterCommon)((IPackageGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Package.Mask<bool> GetEqualsMask(
            this IPackageGetter item,
            IPackageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PackageCommon)((IPackageGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPackageGetter item,
            string? name = null,
            Package.Mask<bool>? printMask = null)
        {
            return ((PackageCommon)((IPackageGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPackageGetter item,
            FileGeneration fg,
            string? name = null,
            Package.Mask<bool>? printMask = null)
        {
            ((PackageCommon)((IPackageGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPackageGetter item,
            IPackageGetter rhs)
        {
            return ((PackageCommon)((IPackageGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPackageInternal lhs,
            IPackageGetter rhs,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PackageSetterTranslationCommon)((IPackageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Package.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPackageInternal lhs,
            IPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PackageSetterTranslationCommon)((IPackageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Package DeepCopy(
            this IPackageGetter item,
            Package.TranslationMask? copyMask = null)
        {
            return ((PackageSetterTranslationCommon)((IPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Package DeepCopy(
            this IPackageGetter item,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? copyMask = null)
        {
            return ((PackageSetterTranslationCommon)((IPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Package DeepCopy(
            this IPackageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PackageSetterTranslationCommon)((IPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Package Duplicate(
            this IPackageGetter item,
            FormKey formKey,
            Package.TranslationMask? copyMask = null)
        {
            return ((PackageCommon)((IPackageGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPackageInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageSetterCommon)((IPackageGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Package_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        Flags = 7,
        Type = 8,
        InterruptOverride = 9,
        PreferredSpeed = 10,
        Unknown = 11,
        InteruptFlags = 12,
        Unknown2 = 13,
        ScheduleMonth = 14,
        ScheduleDayOfWeek = 15,
        ScheduleDate = 16,
        ScheduleHour = 17,
        ScheduleMinute = 18,
        Unknown3 = 19,
        ScheduleDurationInMinutes = 20,
        Conditions = 21,
        Unknown4 = 22,
        IdleAnimations = 23,
        CombatStyle = 24,
        OwnerQuest = 25,
        PackageTemplate = 26,
        DataInputVersion = 27,
        Data = 28,
        XnamMarker = 29,
        ProcedureTree = 30,
        OnBegin = 31,
        OnEnd = 32,
        OnChange = 33,
        PKDTDataTypeState = 34,
        PSDTDataTypeState = 35,
    }
    #endregion

    #region Registration
    public partial class Package_Registration : ILoquiRegistration
    {
        public static readonly Package_Registration Instance = new Package_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 215,
            version: 0);

        public const string GUID = "b5148cf5-ebc6-439e-b0d2-7b254b24f3eb";

        public const ushort AdditionalFieldCount = 30;

        public const ushort FieldCount = 36;

        public static readonly Type MaskType = typeof(Package.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Package.ErrorMask);

        public static readonly Type ClassType = typeof(Package);

        public static readonly Type GetterType = typeof(IPackageGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPackage);

        public static readonly Type? InternalSetterType = typeof(IPackageInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Package";

        public const string Name = "Package";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PACK;
        public static readonly Type BinaryWriteTranslation = typeof(PackageBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PackageSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly PackageSetterCommon Instance = new PackageSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPackageInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Flags = default;
            item.Type = default;
            item.InterruptOverride = default;
            item.PreferredSpeed = default;
            item.Unknown = default;
            item.InteruptFlags = default;
            item.Unknown2 = default;
            item.ScheduleMonth = default;
            item.ScheduleDayOfWeek = default;
            item.ScheduleDate = default;
            item.ScheduleHour = default;
            item.ScheduleMinute = default;
            item.Unknown3 = new byte[3];
            item.ScheduleDurationInMinutes = default;
            item.Conditions.Clear();
            item.Unknown4 = default;
            item.IdleAnimations = null;
            item.CombatStyle = FormLinkNullable<ICombatStyleGetter>.Null;
            item.OwnerQuest = FormLinkNullable<IQuestGetter>.Null;
            item.PackageTemplate = FormLink<IPackageGetter>.Null;
            item.DataInputVersion = default;
            item.Data.Clear();
            item.XnamMarker = new byte[0];
            item.ProcedureTree.Clear();
            item.OnBegin = null;
            item.OnEnd = null;
            item.OnChange = null;
            item.PKDTDataTypeState = default;
            item.PSDTDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IPackageInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPackageInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPackage obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.IdleAnimations?.RemapLinks(mapping);
            obj.CombatStyle = obj.CombatStyle.Relink(mapping);
            obj.OwnerQuest = obj.OwnerQuest.Relink(mapping);
            obj.PackageTemplate = obj.PackageTemplate.Relink(mapping);
            obj.ProcedureTree.RemapLinks(mapping);
            obj.OnBegin?.RemapLinks(mapping);
            obj.OnEnd?.RemapLinks(mapping);
            obj.OnChange?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPackageInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IPackageInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PackageBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PackageBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Package)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Package)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PackageCommon : Fallout4MajorRecordCommon
    {
        public new static readonly PackageCommon Instance = new PackageCommon();

        public Package.Mask<bool> GetEqualsMask(
            IPackageGetter item,
            IPackageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Package.Mask<bool>(false);
            ((PackageCommon)((IPackageGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPackageGetter item,
            IPackageGetter rhs,
            Package.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.InterruptOverride = item.InterruptOverride == rhs.InterruptOverride;
            ret.PreferredSpeed = item.PreferredSpeed == rhs.PreferredSpeed;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.InteruptFlags = item.InteruptFlags == rhs.InteruptFlags;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.ScheduleMonth = item.ScheduleMonth == rhs.ScheduleMonth;
            ret.ScheduleDayOfWeek = item.ScheduleDayOfWeek == rhs.ScheduleDayOfWeek;
            ret.ScheduleDate = item.ScheduleDate == rhs.ScheduleDate;
            ret.ScheduleHour = item.ScheduleHour == rhs.ScheduleHour;
            ret.ScheduleMinute = item.ScheduleMinute == rhs.ScheduleMinute;
            ret.Unknown3 = MemoryExtensions.SequenceEqual(item.Unknown3.Span, rhs.Unknown3.Span);
            ret.ScheduleDurationInMinutes = item.ScheduleDurationInMinutes == rhs.ScheduleDurationInMinutes;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Unknown4 = item.Unknown4 == rhs.Unknown4;
            ret.IdleAnimations = EqualsMaskHelper.EqualsHelper(
                item.IdleAnimations,
                rhs.IdleAnimations,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.CombatStyle = item.CombatStyle.Equals(rhs.CombatStyle);
            ret.OwnerQuest = item.OwnerQuest.Equals(rhs.OwnerQuest);
            ret.PackageTemplate = item.PackageTemplate.Equals(rhs.PackageTemplate);
            ret.DataInputVersion = item.DataInputVersion == rhs.DataInputVersion;
            ret.Data = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.Data,
                rhs: rhs.Data,
                maskGetter: (k, l, r) => l.GetEqualsMask(r, include),
                include: include);
            ret.XnamMarker = MemoryExtensions.SequenceEqual(item.XnamMarker.Span, rhs.XnamMarker.Span);
            ret.ProcedureTree = item.ProcedureTree.CollectionEqualsHelper(
                rhs.ProcedureTree,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.OnBegin = EqualsMaskHelper.EqualsHelper(
                item.OnBegin,
                rhs.OnBegin,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.OnEnd = EqualsMaskHelper.EqualsHelper(
                item.OnEnd,
                rhs.OnEnd,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.OnChange = EqualsMaskHelper.EqualsHelper(
                item.OnChange,
                rhs.OnChange,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PKDTDataTypeState = item.PKDTDataTypeState == rhs.PKDTDataTypeState;
            ret.PSDTDataTypeState = item.PSDTDataTypeState == rhs.PSDTDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPackageGetter item,
            string? name = null,
            Package.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPackageGetter item,
            FileGeneration fg,
            string? name = null,
            Package.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Package =>");
            }
            else
            {
                fg.AppendLine($"{name} (Package) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPackageGetter item,
            FileGeneration fg,
            Package.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if (printMask?.InterruptOverride ?? true)
            {
                fg.AppendItem(item.InterruptOverride, "InterruptOverride");
            }
            if (printMask?.PreferredSpeed ?? true)
            {
                fg.AppendItem(item.PreferredSpeed, "PreferredSpeed");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.InteruptFlags ?? true)
            {
                fg.AppendItem(item.InteruptFlags, "InteruptFlags");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.ScheduleMonth ?? true)
            {
                fg.AppendItem(item.ScheduleMonth, "ScheduleMonth");
            }
            if (printMask?.ScheduleDayOfWeek ?? true)
            {
                fg.AppendItem(item.ScheduleDayOfWeek, "ScheduleDayOfWeek");
            }
            if (printMask?.ScheduleDate ?? true)
            {
                fg.AppendItem(item.ScheduleDate, "ScheduleDate");
            }
            if (printMask?.ScheduleHour ?? true)
            {
                fg.AppendItem(item.ScheduleHour, "ScheduleHour");
            }
            if (printMask?.ScheduleMinute ?? true)
            {
                fg.AppendItem(item.ScheduleMinute, "ScheduleMinute");
            }
            if (printMask?.Unknown3 ?? true)
            {
                fg.AppendLine($"Unknown3 => {SpanExt.ToHexString(item.Unknown3)}");
            }
            if (printMask?.ScheduleDurationInMinutes ?? true)
            {
                fg.AppendItem(item.ScheduleDurationInMinutes, "ScheduleDurationInMinutes");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Unknown4 ?? true)
                && item.Unknown4.TryGet(out var Unknown4Item))
            {
                fg.AppendItem(Unknown4Item, "Unknown4");
            }
            if ((printMask?.IdleAnimations?.Overall ?? true)
                && item.IdleAnimations.TryGet(out var IdleAnimationsItem))
            {
                IdleAnimationsItem?.ToString(fg, "IdleAnimations");
            }
            if (printMask?.CombatStyle ?? true)
            {
                fg.AppendItem(item.CombatStyle.FormKeyNullable, "CombatStyle");
            }
            if (printMask?.OwnerQuest ?? true)
            {
                fg.AppendItem(item.OwnerQuest.FormKeyNullable, "OwnerQuest");
            }
            if (printMask?.PackageTemplate ?? true)
            {
                fg.AppendItem(item.PackageTemplate.FormKey, "PackageTemplate");
            }
            if (printMask?.DataInputVersion ?? true)
            {
                fg.AppendItem(item.DataInputVersion, "DataInputVersion");
            }
            if (printMask?.Data?.Overall ?? true)
            {
                fg.AppendLine("Data =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Data)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.Key);
                            subItem.Value?.ToString(fg, "Value");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.XnamMarker ?? true)
            {
                fg.AppendLine($"XnamMarker => {SpanExt.ToHexString(item.XnamMarker)}");
            }
            if (printMask?.ProcedureTree?.Overall ?? true)
            {
                fg.AppendLine("ProcedureTree =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.ProcedureTree)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.OnBegin?.Overall ?? true)
                && item.OnBegin.TryGet(out var OnBeginItem))
            {
                OnBeginItem?.ToString(fg, "OnBegin");
            }
            if ((printMask?.OnEnd?.Overall ?? true)
                && item.OnEnd.TryGet(out var OnEndItem))
            {
                OnEndItem?.ToString(fg, "OnEnd");
            }
            if ((printMask?.OnChange?.Overall ?? true)
                && item.OnChange.TryGet(out var OnChangeItem))
            {
                OnChangeItem?.ToString(fg, "OnChange");
            }
            if (printMask?.PKDTDataTypeState ?? true)
            {
                fg.AppendItem(item.PKDTDataTypeState, "PKDTDataTypeState");
            }
            if (printMask?.PSDTDataTypeState ?? true)
            {
                fg.AppendItem(item.PSDTDataTypeState, "PSDTDataTypeState");
            }
        }
        
        public static Package_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Package_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Package_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Package_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Package_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Package_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Package_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Package_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Package_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Package_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Package_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Package_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPackageGetter? lhs,
            IPackageGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Type != rhs.Type) return false;
            if (lhs.InterruptOverride != rhs.InterruptOverride) return false;
            if (lhs.PreferredSpeed != rhs.PreferredSpeed) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.InteruptFlags != rhs.InteruptFlags) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            if (lhs.ScheduleMonth != rhs.ScheduleMonth) return false;
            if (lhs.ScheduleDayOfWeek != rhs.ScheduleDayOfWeek) return false;
            if (lhs.ScheduleDate != rhs.ScheduleDate) return false;
            if (lhs.ScheduleHour != rhs.ScheduleHour) return false;
            if (lhs.ScheduleMinute != rhs.ScheduleMinute) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown3.Span, rhs.Unknown3.Span)) return false;
            if (lhs.ScheduleDurationInMinutes != rhs.ScheduleDurationInMinutes) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            if (lhs.Unknown4 != rhs.Unknown4) return false;
            if (!object.Equals(lhs.IdleAnimations, rhs.IdleAnimations)) return false;
            if (!lhs.CombatStyle.Equals(rhs.CombatStyle)) return false;
            if (!lhs.OwnerQuest.Equals(rhs.OwnerQuest)) return false;
            if (!lhs.PackageTemplate.Equals(rhs.PackageTemplate)) return false;
            if (lhs.DataInputVersion != rhs.DataInputVersion) return false;
            if (!lhs.Data.SequenceEqualNullable(rhs.Data)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.XnamMarker.Span, rhs.XnamMarker.Span)) return false;
            if (!lhs.ProcedureTree.SequenceEqualNullable(rhs.ProcedureTree)) return false;
            if (!object.Equals(lhs.OnBegin, rhs.OnBegin)) return false;
            if (!object.Equals(lhs.OnEnd, rhs.OnEnd)) return false;
            if (!object.Equals(lhs.OnChange, rhs.OnChange)) return false;
            if (lhs.PKDTDataTypeState != rhs.PKDTDataTypeState) return false;
            if (lhs.PSDTDataTypeState != rhs.PSDTDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPackageGetter?)lhs,
                rhs: rhs as IPackageGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPackageGetter?)lhs,
                rhs: rhs as IPackageGetter);
        }
        
        public virtual int GetHashCode(IPackageGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.Flags);
            hash.Add(item.Type);
            hash.Add(item.InterruptOverride);
            hash.Add(item.PreferredSpeed);
            hash.Add(item.Unknown);
            hash.Add(item.InteruptFlags);
            hash.Add(item.Unknown2);
            hash.Add(item.ScheduleMonth);
            hash.Add(item.ScheduleDayOfWeek);
            hash.Add(item.ScheduleDate);
            hash.Add(item.ScheduleHour);
            hash.Add(item.ScheduleMinute);
            hash.Add(item.Unknown3);
            hash.Add(item.ScheduleDurationInMinutes);
            hash.Add(item.Conditions);
            if (item.Unknown4.TryGet(out var Unknown4item))
            {
                hash.Add(Unknown4item);
            }
            if (item.IdleAnimations.TryGet(out var IdleAnimationsitem))
            {
                hash.Add(IdleAnimationsitem);
            }
            hash.Add(item.CombatStyle);
            hash.Add(item.OwnerQuest);
            hash.Add(item.PackageTemplate);
            hash.Add(item.DataInputVersion);
            hash.Add(item.Data);
            hash.Add(item.XnamMarker);
            hash.Add(item.ProcedureTree);
            if (item.OnBegin.TryGet(out var OnBeginitem))
            {
                hash.Add(OnBeginitem);
            }
            if (item.OnEnd.TryGet(out var OnEnditem))
            {
                hash.Add(OnEnditem);
            }
            if (item.OnChange.TryGet(out var OnChangeitem))
            {
                hash.Add(OnChangeitem);
            }
            hash.Add(item.PKDTDataTypeState);
            hash.Add(item.PSDTDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IPackageGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPackageGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Package.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPackageGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.IdleAnimations.TryGet(out var IdleAnimationsItems))
            {
                foreach (var item in IdleAnimationsItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.CombatStyle.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.CombatStyle);
            }
            if (obj.OwnerQuest.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.OwnerQuest);
            }
            yield return FormLinkInformation.Factory(obj.PackageTemplate);
            foreach (var item in obj.ProcedureTree.WhereCastable<IPackageBranchGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.OnBegin.TryGet(out var OnBeginItems))
            {
                foreach (var item in OnBeginItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.OnEnd.TryGet(out var OnEndItems))
            {
                foreach (var item in OnEndItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.OnChange.TryGet(out var OnChangeItems))
            {
                foreach (var item in OnChangeItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Package Duplicate(
            IPackageGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Package(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPackage)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPackage)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class PackageSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly PackageSetterTranslationCommon Instance = new PackageSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPackageInternal item,
            IPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPackage item,
            IPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Package_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.InterruptOverride) ?? true))
            {
                item.InterruptOverride = rhs.InterruptOverride;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.PreferredSpeed) ?? true))
            {
                item.PreferredSpeed = rhs.PreferredSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.InteruptFlags) ?? true))
            {
                item.InteruptFlags = rhs.InteruptFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleMonth) ?? true))
            {
                item.ScheduleMonth = rhs.ScheduleMonth;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleDayOfWeek) ?? true))
            {
                item.ScheduleDayOfWeek = rhs.ScheduleDayOfWeek;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleDate) ?? true))
            {
                item.ScheduleDate = rhs.ScheduleDate;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleHour) ?? true))
            {
                item.ScheduleHour = rhs.ScheduleHour;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleMinute) ?? true))
            {
                item.ScheduleMinute = rhs.ScheduleMinute;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ScheduleDurationInMinutes) ?? true))
            {
                item.ScheduleDurationInMinutes = rhs.ScheduleDurationInMinutes;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Unknown4) ?? true))
            {
                item.Unknown4 = rhs.Unknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.IdleAnimations) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.IdleAnimations);
                try
                {
                    if(rhs.IdleAnimations.TryGet(out var rhsIdleAnimations))
                    {
                        item.IdleAnimations = rhsIdleAnimations.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Package_FieldIndex.IdleAnimations));
                    }
                    else
                    {
                        item.IdleAnimations = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.CombatStyle) ?? true))
            {
                item.CombatStyle = new FormLinkNullable<ICombatStyleGetter>(rhs.CombatStyle.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.OwnerQuest) ?? true))
            {
                item.OwnerQuest = new FormLinkNullable<IQuestGetter>(rhs.OwnerQuest.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.PackageTemplate) ?? true))
            {
                item.PackageTemplate = new FormLink<IPackageGetter>(rhs.PackageTemplate.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.DataInputVersion) ?? true))
            {
                item.DataInputVersion = rhs.DataInputVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.Data) ?? true))
            {
                item.Data.SetTo(
                    rhs.Data
                        .Select((r) =>
                        {
                            var value = r.Value.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                            return new KeyValuePair<SByte, APackageData>(r.Key, value);
                        }));
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.XnamMarker) ?? true))
            {
                item.XnamMarker = rhs.XnamMarker.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.ProcedureTree) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.ProcedureTree);
                try
                {
                    item.ProcedureTree.SetTo(
                        rhs.ProcedureTree
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.OnBegin) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.OnBegin);
                try
                {
                    if(rhs.OnBegin.TryGet(out var rhsOnBegin))
                    {
                        item.OnBegin = rhsOnBegin.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Package_FieldIndex.OnBegin));
                    }
                    else
                    {
                        item.OnBegin = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.OnEnd) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.OnEnd);
                try
                {
                    if(rhs.OnEnd.TryGet(out var rhsOnEnd))
                    {
                        item.OnEnd = rhsOnEnd.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Package_FieldIndex.OnEnd));
                    }
                    else
                    {
                        item.OnEnd = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.OnChange) ?? true))
            {
                errorMask?.PushIndex((int)Package_FieldIndex.OnChange);
                try
                {
                    if(rhs.OnChange.TryGet(out var rhsOnChange))
                    {
                        item.OnChange = rhsOnChange.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Package_FieldIndex.OnChange));
                    }
                    else
                    {
                        item.OnChange = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.PKDTDataTypeState) ?? true))
            {
                item.PKDTDataTypeState = rhs.PKDTDataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Package_FieldIndex.PSDTDataTypeState) ?? true))
            {
                item.PSDTDataTypeState = rhs.PSDTDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPackageInternal)item,
                rhs: (IPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPackage)item,
                rhs: (IPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPackageInternal)item,
                rhs: (IPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPackage)item,
                rhs: (IPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Package DeepCopy(
            IPackageGetter item,
            Package.TranslationMask? copyMask = null)
        {
            Package ret = (Package)((PackageCommon)((IPackageGetter)item).CommonInstance()!).GetNew();
            ((PackageSetterTranslationCommon)((IPackageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Package DeepCopy(
            IPackageGetter item,
            out Package.ErrorMask errorMask,
            Package.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Package ret = (Package)((PackageCommon)((IPackageGetter)item).CommonInstance()!).GetNew();
            ((PackageSetterTranslationCommon)((IPackageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Package.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Package DeepCopy(
            IPackageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Package ret = (Package)((PackageCommon)((IPackageGetter)item).CommonInstance()!).GetNew();
            ((PackageSetterTranslationCommon)((IPackageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Package
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Package_Registration.Instance;
        public new static Package_Registration Registration => Package_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PackageCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PackageSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PackageSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PackageBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PackageBinaryWriteTranslation Instance = new PackageBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IPackageGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IPackageGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryPackageTemplateCustom(
            MutagenWriter writer,
            IPackageGetter item);

        public static void WriteBinaryPackageTemplate(
            MutagenWriter writer,
            IPackageGetter item)
        {
            WriteBinaryPackageTemplateCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryXnamMarkerCustom(
            MutagenWriter writer,
            IPackageGetter item);

        public static void WriteBinaryXnamMarker(
            MutagenWriter writer,
            IPackageGetter item)
        {
            WriteBinaryXnamMarkerCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IPackageGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IPackageGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((PackageAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.PKDT)))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.Types>.Instance.Write(
                    writer,
                    item.Type,
                    length: 1);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.Interrupt>.Instance.Write(
                    writer,
                    item.InterruptOverride,
                    length: 1);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.Speed>.Instance.Write(
                    writer,
                    item.PreferredSpeed,
                    length: 1);
                writer.Write(item.Unknown);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.InterruptFlag>.Instance.Write(
                    writer,
                    item.InteruptFlags,
                    length: 2);
                writer.Write(item.Unknown2);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.PSDT)))
            {
                writer.Write(item.ScheduleMonth);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Package.DayOfWeek>.Instance.Write(
                    writer,
                    item.ScheduleDayOfWeek,
                    length: 1);
                writer.Write(item.ScheduleDate);
                writer.Write(item.ScheduleHour);
                writer.Write(item.ScheduleMinute);
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown3);
                writer.Write(item.ScheduleDurationInMinutes);
            }
            PackageBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Unknown4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.IDLB));
            if (item.IdleAnimations.TryGet(out var IdleAnimationsItem))
            {
                ((PackageIdlesBinaryWriteTranslation)((IBinaryItem)IdleAnimationsItem).BinaryWriteTranslator).Write(
                    item: IdleAnimationsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatStyle,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OwnerQuest,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.QNAM));
            PackageBinaryWriteTranslation.WriteBinaryPackageTemplate(
                writer: writer,
                item: item);
            PackageBinaryWriteTranslation.WriteBinaryXnamMarker(
                writer: writer,
                item: item);
            if (item.OnBegin.TryGet(out var OnBeginItem))
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.POBA)) { }
                ((PackageEventBinaryWriteTranslation)((IBinaryItem)OnBeginItem).BinaryWriteTranslator).Write(
                    item: OnBeginItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.OnEnd.TryGet(out var OnEndItem))
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.POEA)) { }
                ((PackageEventBinaryWriteTranslation)((IBinaryItem)OnEndItem).BinaryWriteTranslator).Write(
                    item: OnEndItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.OnChange.TryGet(out var OnChangeItem))
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.POCA)) { }
                ((PackageEventBinaryWriteTranslation)((IBinaryItem)OnChangeItem).BinaryWriteTranslator).Write(
                    item: OnChangeItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IPackageGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.PACK),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PackageBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static PackageBinaryCreateTranslation Instance = new PackageBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PACK;
        public static void FillBinaryStructs(
            IPackageInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IPackageInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.PackageAdapter.CreateFromBinary(frame: frame);
                    return (int)Package_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.PKDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Flags = EnumBinaryTranslation<Package.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Type = EnumBinaryTranslation<Package.Types>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.InterruptOverride = EnumBinaryTranslation<Package.Interrupt>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.PreferredSpeed = EnumBinaryTranslation<Package.Speed>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Unknown = dataFrame.ReadUInt8();
                    item.InteruptFlags = EnumBinaryTranslation<Package.InterruptFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    item.Unknown2 = dataFrame.ReadUInt16();
                    return (int)Package_FieldIndex.Unknown2;
                }
                case RecordTypeInts.PSDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.ScheduleMonth = dataFrame.ReadInt8();
                    item.ScheduleDayOfWeek = EnumBinaryTranslation<Package.DayOfWeek>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.ScheduleDate = dataFrame.ReadUInt8();
                    item.ScheduleHour = dataFrame.ReadInt8();
                    item.ScheduleMinute = dataFrame.ReadInt8();
                    item.Unknown3 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(3));
                    item.ScheduleDurationInMinutes = dataFrame.ReadInt32();
                    return (int)Package_FieldIndex.ScheduleDurationInMinutes;
                }
                case RecordTypeInts.CTDA:
                {
                    PackageBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Package_FieldIndex.Conditions;
                }
                case RecordTypeInts.IDLB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Unknown4 = frame.ReadInt32();
                    return (int)Package_FieldIndex.Unknown4;
                }
                case RecordTypeInts.IDLF:
                {
                    item.IdleAnimations = Mutagen.Bethesda.Fallout4.PackageIdles.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Package_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatStyle = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Package_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OwnerQuest = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Package_FieldIndex.OwnerQuest;
                }
                case RecordTypeInts.PKCU:
                {
                    PackageBinaryCreateTranslation.FillBinaryPackageTemplateCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Package_FieldIndex.PackageTemplate;
                }
                case RecordTypeInts.XNAM:
                {
                    PackageBinaryCreateTranslation.FillBinaryXnamMarkerCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Package_FieldIndex.XnamMarker;
                }
                case RecordTypeInts.POBA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.OnBegin = Mutagen.Bethesda.Fallout4.PackageEvent.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Package_FieldIndex.OnBegin;
                }
                case RecordTypeInts.POEA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.OnEnd = Mutagen.Bethesda.Fallout4.PackageEvent.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Package_FieldIndex.OnEnd;
                }
                case RecordTypeInts.POCA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.OnChange = Mutagen.Bethesda.Fallout4.PackageEvent.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Package_FieldIndex.OnChange;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IPackageInternal item);

        static partial void FillBinaryPackageTemplateCustom(
            MutagenFrame frame,
            IPackageInternal item);

        static partial void FillBinaryXnamMarkerCustom(
            MutagenFrame frame,
            IPackageInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PackageBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PackageBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IPackageGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Package_Registration.Instance;
        public new static Package_Registration Registration => Package_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PackageCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PackageSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PackageCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PackageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IPackageAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? PackageAdapterBinaryOverlay.PackageAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        private int? _PKDTLocation;
        public Package.PKDTDataType PKDTDataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _PKDTLocation!.Value;
        private bool _Flags_IsSet => _PKDTLocation.HasValue;
        public Package.Flag Flags => _Flags_IsSet ? (Package.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region Type
        private int _TypeLocation => _PKDTLocation!.Value + 0x4;
        private bool _Type_IsSet => _PKDTLocation.HasValue;
        public Package.Types Type => _Type_IsSet ? (Package.Types)_data.Span.Slice(_TypeLocation, 0x1)[0] : default;
        #endregion
        #region InterruptOverride
        private int _InterruptOverrideLocation => _PKDTLocation!.Value + 0x5;
        private bool _InterruptOverride_IsSet => _PKDTLocation.HasValue;
        public Package.Interrupt InterruptOverride => _InterruptOverride_IsSet ? (Package.Interrupt)_data.Span.Slice(_InterruptOverrideLocation, 0x1)[0] : default;
        #endregion
        #region PreferredSpeed
        private int _PreferredSpeedLocation => _PKDTLocation!.Value + 0x6;
        private bool _PreferredSpeed_IsSet => _PKDTLocation.HasValue;
        public Package.Speed PreferredSpeed => _PreferredSpeed_IsSet ? (Package.Speed)_data.Span.Slice(_PreferredSpeedLocation, 0x1)[0] : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _PKDTLocation!.Value + 0x7;
        private bool _Unknown_IsSet => _PKDTLocation.HasValue;
        public Byte Unknown => _Unknown_IsSet ? _data.Span[_UnknownLocation] : default;
        #endregion
        #region InteruptFlags
        private int _InteruptFlagsLocation => _PKDTLocation!.Value + 0x8;
        private bool _InteruptFlags_IsSet => _PKDTLocation.HasValue;
        public Package.InterruptFlag InteruptFlags => _InteruptFlags_IsSet ? (Package.InterruptFlag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_InteruptFlagsLocation, 0x2)) : default;
        #endregion
        #region Unknown2
        private int _Unknown2Location => _PKDTLocation!.Value + 0xA;
        private bool _Unknown2_IsSet => _PKDTLocation.HasValue;
        public UInt16 Unknown2 => _Unknown2_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(_Unknown2Location, 2)) : default;
        #endregion
        private int? _PSDTLocation;
        public Package.PSDTDataType PSDTDataTypeState { get; private set; }
        #region ScheduleMonth
        private int _ScheduleMonthLocation => _PSDTLocation!.Value;
        private bool _ScheduleMonth_IsSet => _PSDTLocation.HasValue;
        public SByte ScheduleMonth => _ScheduleMonth_IsSet ? (sbyte)_data.Slice(_ScheduleMonthLocation, 1)[0] : default;
        #endregion
        #region ScheduleDayOfWeek
        private int _ScheduleDayOfWeekLocation => _PSDTLocation!.Value + 0x1;
        private bool _ScheduleDayOfWeek_IsSet => _PSDTLocation.HasValue;
        public Package.DayOfWeek ScheduleDayOfWeek => _ScheduleDayOfWeek_IsSet ? (Package.DayOfWeek)_data.Span.Slice(_ScheduleDayOfWeekLocation, 0x1)[0] : default;
        #endregion
        #region ScheduleDate
        private int _ScheduleDateLocation => _PSDTLocation!.Value + 0x2;
        private bool _ScheduleDate_IsSet => _PSDTLocation.HasValue;
        public Byte ScheduleDate => _ScheduleDate_IsSet ? _data.Span[_ScheduleDateLocation] : default;
        #endregion
        #region ScheduleHour
        private int _ScheduleHourLocation => _PSDTLocation!.Value + 0x3;
        private bool _ScheduleHour_IsSet => _PSDTLocation.HasValue;
        public SByte ScheduleHour => _ScheduleHour_IsSet ? (sbyte)_data.Slice(_ScheduleHourLocation, 1)[0] : default;
        #endregion
        #region ScheduleMinute
        private int _ScheduleMinuteLocation => _PSDTLocation!.Value + 0x4;
        private bool _ScheduleMinute_IsSet => _PSDTLocation.HasValue;
        public SByte ScheduleMinute => _ScheduleMinute_IsSet ? (sbyte)_data.Slice(_ScheduleMinuteLocation, 1)[0] : default;
        #endregion
        #region Unknown3
        private int _Unknown3Location => _PSDTLocation!.Value + 0x5;
        private bool _Unknown3_IsSet => _PSDTLocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown3 => _Unknown3_IsSet ? _data.Span.Slice(_Unknown3Location, 3).ToArray() : default(ReadOnlyMemorySlice<byte>);
        #endregion
        #region ScheduleDurationInMinutes
        private int _ScheduleDurationInMinutesLocation => _PSDTLocation!.Value + 0x8;
        private bool _ScheduleDurationInMinutes_IsSet => _PSDTLocation.HasValue;
        public Int32 ScheduleDurationInMinutes => _ScheduleDurationInMinutes_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(_ScheduleDurationInMinutesLocation, 4)) : default;
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        #region Unknown4
        private int? _Unknown4Location;
        public Int32? Unknown4 => _Unknown4Location.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _Unknown4Location.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        public IPackageIdlesGetter? IdleAnimations { get; private set; }
        #region CombatStyle
        private int? _CombatStyleLocation;
        public FormLinkNullable<ICombatStyleGetter> CombatStyle => _CombatStyleLocation.HasValue ? new FormLinkNullable<ICombatStyleGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CombatStyleLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ICombatStyleGetter>.Null;
        #endregion
        #region OwnerQuest
        private int? _OwnerQuestLocation;
        public FormLinkNullable<IQuestGetter> OwnerQuest => _OwnerQuestLocation.HasValue ? new FormLinkNullable<IQuestGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _OwnerQuestLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IQuestGetter>.Null;
        #endregion
        #region PackageTemplate
        partial void PackageTemplateCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public FormLink<IPackageGetter> PackageTemplate => GetPackageTemplateCustom();
        #endregion
        #region XnamMarker
        partial void XnamMarkerCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public ReadOnlyMemorySlice<Byte> XnamMarker => GetXnamMarkerCustom();
        #endregion
        public IPackageEventGetter? OnBegin { get; private set; }
        public IPackageEventGetter? OnEnd { get; private set; }
        public IPackageEventGetter? OnChange { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PackageBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PackageBinaryOverlay PackageFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new PackageBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PackageBinaryOverlay PackageFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PackageFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Package_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.PKDT:
                {
                    _PKDTLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Package_FieldIndex.Unknown2;
                }
                case RecordTypeInts.PSDT:
                {
                    _PSDTLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Package_FieldIndex.ScheduleDurationInMinutes;
                }
                case RecordTypeInts.CTDA:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Package_FieldIndex.Conditions;
                }
                case RecordTypeInts.IDLB:
                {
                    _Unknown4Location = (stream.Position - offset);
                    return (int)Package_FieldIndex.Unknown4;
                }
                case RecordTypeInts.IDLF:
                {
                    this.IdleAnimations = PackageIdlesBinaryOverlay.PackageIdlesFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Package_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.CNAM:
                {
                    _CombatStyleLocation = (stream.Position - offset);
                    return (int)Package_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.QNAM:
                {
                    _OwnerQuestLocation = (stream.Position - offset);
                    return (int)Package_FieldIndex.OwnerQuest;
                }
                case RecordTypeInts.PKCU:
                {
                    PackageTemplateCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)Package_FieldIndex.PackageTemplate;
                }
                case RecordTypeInts.XNAM:
                {
                    XnamMarkerCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)Package_FieldIndex.XnamMarker;
                }
                case RecordTypeInts.POBA:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.OnBegin = PackageEventBinaryOverlay.PackageEventFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Package_FieldIndex.OnBegin;
                }
                case RecordTypeInts.POEA:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.OnEnd = PackageEventBinaryOverlay.PackageEventFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Package_FieldIndex.OnEnd;
                }
                case RecordTypeInts.POCA:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.OnChange = PackageEventBinaryOverlay.PackageEventFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Package_FieldIndex.OnChange;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPackageGetter rhs)) return false;
            return ((PackageCommon)((IPackageGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPackageGetter? obj)
        {
            return ((PackageCommon)((IPackageGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PackageCommon)((IPackageGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

