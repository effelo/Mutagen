/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class CloudLayer :
        ICloudLayer,
        ILoquiObjectSetter<CloudLayer>,
        IEquatable<ICloudLayerGetter>
    {
        #region Ctor
        public CloudLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Enabled
        public Boolean? Enabled { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Boolean? ICloudLayerGetter.Enabled => this.Enabled;
        #endregion
        #region XSpeed
        public Single? XSpeed { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICloudLayerGetter.XSpeed => this.XSpeed;
        #endregion
        #region YSpeed
        public Single? YSpeed { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICloudLayerGetter.YSpeed => this.YSpeed;
        #endregion
        #region Colors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeatherColor? _Colors;
        public WeatherColor? Colors
        {
            get => _Colors;
            set => _Colors = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter? ICloudLayerGetter.Colors => this.Colors;
        #endregion
        #region Alphas
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeatherAlpha? _Alphas;
        public WeatherAlpha? Alphas
        {
            get => _Alphas;
            set => _Alphas = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherAlphaGetter? ICloudLayerGetter.Alphas => this.Alphas;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CloudLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICloudLayerGetter rhs)) return false;
            return ((CloudLayerCommon)((ICloudLayerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICloudLayerGetter? obj)
        {
            return ((CloudLayerCommon)((ICloudLayerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CloudLayerCommon)((ICloudLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Enabled = initialValue;
                this.XSpeed = initialValue;
                this.YSpeed = initialValue;
                this.Colors = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.Alphas = new MaskItem<TItem, WeatherAlpha.Mask<TItem>?>(initialValue, new WeatherAlpha.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Enabled,
                TItem XSpeed,
                TItem YSpeed,
                TItem Colors,
                TItem Alphas)
            {
                this.Enabled = Enabled;
                this.XSpeed = XSpeed;
                this.YSpeed = YSpeed;
                this.Colors = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(Colors, new WeatherColor.Mask<TItem>(Colors));
                this.Alphas = new MaskItem<TItem, WeatherAlpha.Mask<TItem>?>(Alphas, new WeatherAlpha.Mask<TItem>(Alphas));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Enabled;
            public TItem XSpeed;
            public TItem YSpeed;
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? Colors { get; set; }
            public MaskItem<TItem, WeatherAlpha.Mask<TItem>?>? Alphas { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Enabled, rhs.Enabled)) return false;
                if (!object.Equals(this.XSpeed, rhs.XSpeed)) return false;
                if (!object.Equals(this.YSpeed, rhs.YSpeed)) return false;
                if (!object.Equals(this.Colors, rhs.Colors)) return false;
                if (!object.Equals(this.Alphas, rhs.Alphas)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Enabled);
                hash.Add(this.XSpeed);
                hash.Add(this.YSpeed);
                hash.Add(this.Colors);
                hash.Add(this.Alphas);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Enabled)) return false;
                if (!eval(this.XSpeed)) return false;
                if (!eval(this.YSpeed)) return false;
                if (Colors != null)
                {
                    if (!eval(this.Colors.Overall)) return false;
                    if (this.Colors.Specific != null && !this.Colors.Specific.All(eval)) return false;
                }
                if (Alphas != null)
                {
                    if (!eval(this.Alphas.Overall)) return false;
                    if (this.Alphas.Specific != null && !this.Alphas.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Enabled)) return true;
                if (eval(this.XSpeed)) return true;
                if (eval(this.YSpeed)) return true;
                if (Colors != null)
                {
                    if (eval(this.Colors.Overall)) return true;
                    if (this.Colors.Specific != null && this.Colors.Specific.Any(eval)) return true;
                }
                if (Alphas != null)
                {
                    if (eval(this.Alphas.Overall)) return true;
                    if (this.Alphas.Specific != null && this.Alphas.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CloudLayer.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Enabled = eval(this.Enabled);
                obj.XSpeed = eval(this.XSpeed);
                obj.YSpeed = eval(this.YSpeed);
                obj.Colors = this.Colors == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.Colors.Overall), this.Colors.Specific?.Translate(eval));
                obj.Alphas = this.Alphas == null ? null : new MaskItem<R, WeatherAlpha.Mask<R>?>(eval(this.Alphas.Overall), this.Alphas.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CloudLayer.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CloudLayer.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CloudLayer.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Enabled ?? true)
                    {
                        fg.AppendItem(Enabled, "Enabled");
                    }
                    if (printMask?.XSpeed ?? true)
                    {
                        fg.AppendItem(XSpeed, "XSpeed");
                    }
                    if (printMask?.YSpeed ?? true)
                    {
                        fg.AppendItem(YSpeed, "YSpeed");
                    }
                    if (printMask?.Colors?.Overall ?? true)
                    {
                        Colors?.ToString(fg);
                    }
                    if (printMask?.Alphas?.Overall ?? true)
                    {
                        Alphas?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Enabled;
            public Exception? XSpeed;
            public Exception? YSpeed;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? Colors;
            public MaskItem<Exception?, WeatherAlpha.ErrorMask?>? Alphas;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
                switch (enu)
                {
                    case CloudLayer_FieldIndex.Enabled:
                        return Enabled;
                    case CloudLayer_FieldIndex.XSpeed:
                        return XSpeed;
                    case CloudLayer_FieldIndex.YSpeed:
                        return YSpeed;
                    case CloudLayer_FieldIndex.Colors:
                        return Colors;
                    case CloudLayer_FieldIndex.Alphas:
                        return Alphas;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
                switch (enu)
                {
                    case CloudLayer_FieldIndex.Enabled:
                        this.Enabled = ex;
                        break;
                    case CloudLayer_FieldIndex.XSpeed:
                        this.XSpeed = ex;
                        break;
                    case CloudLayer_FieldIndex.YSpeed:
                        this.YSpeed = ex;
                        break;
                    case CloudLayer_FieldIndex.Colors:
                        this.Colors = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case CloudLayer_FieldIndex.Alphas:
                        this.Alphas = new MaskItem<Exception?, WeatherAlpha.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
                switch (enu)
                {
                    case CloudLayer_FieldIndex.Enabled:
                        this.Enabled = (Exception?)obj;
                        break;
                    case CloudLayer_FieldIndex.XSpeed:
                        this.XSpeed = (Exception?)obj;
                        break;
                    case CloudLayer_FieldIndex.YSpeed:
                        this.YSpeed = (Exception?)obj;
                        break;
                    case CloudLayer_FieldIndex.Colors:
                        this.Colors = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case CloudLayer_FieldIndex.Alphas:
                        this.Alphas = (MaskItem<Exception?, WeatherAlpha.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Enabled != null) return true;
                if (XSpeed != null) return true;
                if (YSpeed != null) return true;
                if (Colors != null) return true;
                if (Alphas != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Enabled, "Enabled");
                fg.AppendItem(XSpeed, "XSpeed");
                fg.AppendItem(YSpeed, "YSpeed");
                Colors?.ToString(fg);
                Alphas?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Enabled = this.Enabled.Combine(rhs.Enabled);
                ret.XSpeed = this.XSpeed.Combine(rhs.XSpeed);
                ret.YSpeed = this.YSpeed.Combine(rhs.YSpeed);
                ret.Colors = this.Colors.Combine(rhs.Colors, (l, r) => l.Combine(r));
                ret.Alphas = this.Alphas.Combine(rhs.Alphas, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Enabled;
            public bool XSpeed;
            public bool YSpeed;
            public WeatherColor.TranslationMask? Colors;
            public WeatherAlpha.TranslationMask? Alphas;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Enabled = defaultOn;
                this.XSpeed = defaultOn;
                this.YSpeed = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Enabled, null));
                ret.Add((XSpeed, null));
                ret.Add((YSpeed, null));
                ret.Add((Colors != null ? Colors.OnOverall : DefaultOn, Colors?.GetCrystal()));
                ret.Add((Alphas != null ? Alphas.OnOverall : DefaultOn, Alphas?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CloudLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CloudLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static CloudLayer CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CloudLayer();
            ((CloudLayerSetterCommon)((ICloudLayerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CloudLayer item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CloudLayerSetterCommon)((ICloudLayerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CloudLayer GetNew()
        {
            return new CloudLayer();
        }

    }
    #endregion

    #region Interface
    public partial interface ICloudLayer :
        ICloudLayerGetter,
        ILoquiObjectSetter<ICloudLayer>
    {
        new Boolean? Enabled { get; set; }
        new Single? XSpeed { get; set; }
        new Single? YSpeed { get; set; }
        new WeatherColor? Colors { get; set; }
        new WeatherAlpha? Alphas { get; set; }
    }

    public partial interface ICloudLayerGetter :
        ILoquiObject,
        ILoquiObject<ICloudLayerGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => CloudLayer_Registration.Instance;
        Boolean? Enabled { get; }
        Single? XSpeed { get; }
        Single? YSpeed { get; }
        IWeatherColorGetter? Colors { get; }
        IWeatherAlphaGetter? Alphas { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CloudLayerMixIn
    {
        public static void Clear(this ICloudLayer item)
        {
            ((CloudLayerSetterCommon)((ICloudLayerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CloudLayer.Mask<bool> GetEqualsMask(
            this ICloudLayerGetter item,
            ICloudLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICloudLayerGetter item,
            string? name = null,
            CloudLayer.Mask<bool>? printMask = null)
        {
            return ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICloudLayerGetter item,
            FileGeneration fg,
            string? name = null,
            CloudLayer.Mask<bool>? printMask = null)
        {
            ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICloudLayerGetter item,
            ICloudLayerGetter rhs)
        {
            return ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICloudLayer lhs,
            ICloudLayerGetter rhs)
        {
            ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICloudLayer lhs,
            ICloudLayerGetter rhs,
            CloudLayer.TranslationMask? copyMask = null)
        {
            ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICloudLayer lhs,
            ICloudLayerGetter rhs,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CloudLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICloudLayer lhs,
            ICloudLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CloudLayer DeepCopy(
            this ICloudLayerGetter item,
            CloudLayer.TranslationMask? copyMask = null)
        {
            return ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CloudLayer DeepCopy(
            this ICloudLayerGetter item,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? copyMask = null)
        {
            return ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CloudLayer DeepCopy(
            this ICloudLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICloudLayer item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CloudLayerSetterCommon)((ICloudLayerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum CloudLayer_FieldIndex
    {
        Enabled = 0,
        XSpeed = 1,
        YSpeed = 2,
        Colors = 3,
        Alphas = 4,
    }
    #endregion

    #region Registration
    public partial class CloudLayer_Registration : ILoquiRegistration
    {
        public static readonly CloudLayer_Registration Instance = new CloudLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 249,
            version: 0);

        public const string GUID = "e89335dd-a532-4104-9ce3-b607df804f84";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(CloudLayer.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CloudLayer.ErrorMask);

        public static readonly Type ClassType = typeof(CloudLayer);

        public static readonly Type GetterType = typeof(ICloudLayerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICloudLayer);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.CloudLayer";

        public const string Name = "CloudLayer";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(CloudLayerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CloudLayerSetterCommon
    {
        public static readonly CloudLayerSetterCommon Instance = new CloudLayerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICloudLayer item)
        {
            ClearPartial();
            item.Enabled = default;
            item.XSpeed = default;
            item.YSpeed = default;
            item.Colors = null;
            item.Alphas = null;
        }
        
        #region Mutagen
        public void RemapLinks(ICloudLayer obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICloudLayer item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CloudLayerBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CloudLayerCommon
    {
        public static readonly CloudLayerCommon Instance = new CloudLayerCommon();

        public CloudLayer.Mask<bool> GetEqualsMask(
            ICloudLayerGetter item,
            ICloudLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CloudLayer.Mask<bool>(false);
            ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICloudLayerGetter item,
            ICloudLayerGetter rhs,
            CloudLayer.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Enabled = item.Enabled == rhs.Enabled;
            ret.XSpeed = item.XSpeed.EqualsWithin(rhs.XSpeed);
            ret.YSpeed = item.YSpeed.EqualsWithin(rhs.YSpeed);
            ret.Colors = EqualsMaskHelper.EqualsHelper(
                item.Colors,
                rhs.Colors,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Alphas = EqualsMaskHelper.EqualsHelper(
                item.Alphas,
                rhs.Alphas,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            ICloudLayerGetter item,
            string? name = null,
            CloudLayer.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICloudLayerGetter item,
            FileGeneration fg,
            string? name = null,
            CloudLayer.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CloudLayer =>");
            }
            else
            {
                fg.AppendLine($"{name} (CloudLayer) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICloudLayerGetter item,
            FileGeneration fg,
            CloudLayer.Mask<bool>? printMask = null)
        {
            if ((printMask?.Enabled ?? true)
                && item.Enabled.TryGet(out var EnabledItem))
            {
                fg.AppendItem(EnabledItem, "Enabled");
            }
            if ((printMask?.XSpeed ?? true)
                && item.XSpeed.TryGet(out var XSpeedItem))
            {
                fg.AppendItem(XSpeedItem, "XSpeed");
            }
            if ((printMask?.YSpeed ?? true)
                && item.YSpeed.TryGet(out var YSpeedItem))
            {
                fg.AppendItem(YSpeedItem, "YSpeed");
            }
            if ((printMask?.Colors?.Overall ?? true)
                && item.Colors.TryGet(out var ColorsItem))
            {
                ColorsItem?.ToString(fg, "Colors");
            }
            if ((printMask?.Alphas?.Overall ?? true)
                && item.Alphas.TryGet(out var AlphasItem))
            {
                AlphasItem?.ToString(fg, "Alphas");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICloudLayerGetter? lhs,
            ICloudLayerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Enabled != rhs.Enabled) return false;
            if (!lhs.XSpeed.EqualsWithin(rhs.XSpeed)) return false;
            if (!lhs.YSpeed.EqualsWithin(rhs.YSpeed)) return false;
            if (!object.Equals(lhs.Colors, rhs.Colors)) return false;
            if (!object.Equals(lhs.Alphas, rhs.Alphas)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ICloudLayerGetter item)
        {
            var hash = new HashCode();
            if (item.Enabled.TryGet(out var Enableditem))
            {
                hash.Add(Enableditem);
            }
            if (item.XSpeed.TryGet(out var XSpeeditem))
            {
                hash.Add(XSpeeditem);
            }
            if (item.YSpeed.TryGet(out var YSpeeditem))
            {
                hash.Add(YSpeeditem);
            }
            if (item.Colors.TryGet(out var Colorsitem))
            {
                hash.Add(Colorsitem);
            }
            if (item.Alphas.TryGet(out var Alphasitem))
            {
                hash.Add(Alphasitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CloudLayer.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ICloudLayerGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class CloudLayerSetterTranslationCommon
    {
        public static readonly CloudLayerSetterTranslationCommon Instance = new CloudLayerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICloudLayer item,
            ICloudLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.Enabled) ?? true))
            {
                item.Enabled = rhs.Enabled;
            }
            if ((copyMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.XSpeed) ?? true))
            {
                item.XSpeed = rhs.XSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.YSpeed) ?? true))
            {
                item.YSpeed = rhs.YSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.Colors) ?? true))
            {
                errorMask?.PushIndex((int)CloudLayer_FieldIndex.Colors);
                try
                {
                    if(rhs.Colors.TryGet(out var rhsColors))
                    {
                        item.Colors = rhsColors.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)CloudLayer_FieldIndex.Colors));
                    }
                    else
                    {
                        item.Colors = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.Alphas) ?? true))
            {
                errorMask?.PushIndex((int)CloudLayer_FieldIndex.Alphas);
                try
                {
                    if(rhs.Alphas.TryGet(out var rhsAlphas))
                    {
                        item.Alphas = rhsAlphas.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)CloudLayer_FieldIndex.Alphas));
                    }
                    else
                    {
                        item.Alphas = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public CloudLayer DeepCopy(
            ICloudLayerGetter item,
            CloudLayer.TranslationMask? copyMask = null)
        {
            CloudLayer ret = (CloudLayer)((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).GetNew();
            ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CloudLayer DeepCopy(
            ICloudLayerGetter item,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CloudLayer ret = (CloudLayer)((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).GetNew();
            ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CloudLayer.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CloudLayer DeepCopy(
            ICloudLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CloudLayer ret = (CloudLayer)((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).GetNew();
            ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class CloudLayer
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CloudLayer_Registration.Instance;
        public static CloudLayer_Registration Registration => CloudLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CloudLayerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CloudLayerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CloudLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICloudLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICloudLayerGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICloudLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CloudLayerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CloudLayerBinaryWriteTranslation Instance = new CloudLayerBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICloudLayerGetter item,
            MutagenWriter writer)
        {
        }

        public void Write(
            MutagenWriter writer,
            ICloudLayerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICloudLayerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CloudLayerBinaryCreateTranslation
    {
        public readonly static CloudLayerBinaryCreateTranslation Instance = new CloudLayerBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICloudLayer item,
            MutagenFrame frame)
        {
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class CloudLayerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICloudLayerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CloudLayerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CloudLayerBinaryOverlay :
        BinaryOverlay,
        ICloudLayerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CloudLayer_Registration.Instance;
        public static CloudLayer_Registration Registration => CloudLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CloudLayerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CloudLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICloudLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICloudLayerGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICloudLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CloudLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CloudLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CloudLayerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CloudLayerBinaryOverlay CloudLayerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CloudLayerBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CloudLayerBinaryOverlay CloudLayerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CloudLayerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CloudLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICloudLayerGetter rhs)) return false;
            return ((CloudLayerCommon)((ICloudLayerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICloudLayerGetter? obj)
        {
            return ((CloudLayerCommon)((ICloudLayerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CloudLayerCommon)((ICloudLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

