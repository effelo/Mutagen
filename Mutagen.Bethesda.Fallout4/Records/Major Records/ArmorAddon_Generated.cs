/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ArmorAddon :
        Fallout4MajorRecord,
        IArmorAddonInternal,
        ILoquiObjectSetter<ArmorAddon>,
        IEquatable<IArmorAddonGetter>
    {
        #region Ctor
        protected ArmorAddon()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region BodyTemplate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BodyTemplate? _BodyTemplate;
        public BodyTemplate? BodyTemplate
        {
            get => _BodyTemplate;
            set => _BodyTemplate = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBodyTemplateGetter? IArmorAddonGetter.BodyTemplate => this.BodyTemplate;
        #endregion
        #region Race
        public FormLinkNullable<IRaceGetter> Race { get; set; } = new FormLinkNullable<IRaceGetter>();
        #endregion
        #region Priority
        public IGenderedItem<Byte> Priority { get; set; } = new GenderedItem<Byte>(default, default);
        IGenderedItemGetter<Byte> IArmorAddonGetter.Priority => this.Priority;
        #endregion
        #region Unknown
        public UInt16 Unknown { get; set; } = default;
        #endregion
        #region DetectionSoundValue
        public Byte DetectionSoundValue { get; set; } = default;
        #endregion
        #region Unknown2
        public Byte Unknown2 { get; set; } = default;
        #endregion
        #region WeaponAdjust
        public Single WeaponAdjust { get; set; } = default;
        #endregion
        #region WorldModel
        public IGenderedItem<Model?>? WorldModel { get; set; }
        IGenderedItemGetter<IModelGetter?>? IArmorAddonGetter.WorldModel => this.WorldModel;
        #endregion
        #region FirstPersonModel
        public IGenderedItem<Model?>? FirstPersonModel { get; set; }
        IGenderedItemGetter<IModelGetter?>? IArmorAddonGetter.FirstPersonModel => this.FirstPersonModel;
        #endregion
        #region SkinTexture
        public IGenderedItem<IFormLinkNullable<ITextureSetGetter>>? SkinTexture { get; set; }
        IGenderedItemGetter<IFormLinkNullable<ITextureSetGetter>>? IArmorAddonGetter.SkinTexture => this.SkinTexture;
        #endregion
        #region TextureSwapList
        public IGenderedItem<IFormLinkNullable<IFormListGetter>>? TextureSwapList { get; set; }
        IGenderedItemGetter<IFormLinkNullable<IFormListGetter>>? IArmorAddonGetter.TextureSwapList => this.TextureSwapList;
        #endregion
        #region AdditionalRaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IRaceGetter>> _AdditionalRaces = new ExtendedList<IFormLink<IRaceGetter>>();
        public ExtendedList<IFormLink<IRaceGetter>> AdditionalRaces
        {
            get => this._AdditionalRaces;
            protected set => this._AdditionalRaces = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IRaceGetter>> IArmorAddonGetter.AdditionalRaces => _AdditionalRaces;
        #endregion

        #endregion
        #region FootstepSound
        public FormLinkNullable<IFootstepSetGetter> FootstepSound { get; set; } = new FormLinkNullable<IFootstepSetGetter>();
        #endregion
        #region ArtObject
        public FormLinkNullable<IArtObjectGetter> ArtObject { get; set; } = new FormLinkNullable<IArtObjectGetter>();
        #endregion
        #region DNAMDataTypeState
        public ArmorAddon.DNAMDataType DNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ArmorAddonMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IArmorAddonGetter rhs)) return false;
            return ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IArmorAddonGetter? obj)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.BodyTemplate = new MaskItem<TItem, BodyTemplate.Mask<TItem>?>(initialValue, new BodyTemplate.Mask<TItem>(initialValue));
                this.Race = initialValue;
                this.Priority = new GenderedItem<TItem>(initialValue, initialValue);
                this.WeightSliderEnabled = new GenderedItem<TItem>(initialValue, initialValue);
                this.Unknown = initialValue;
                this.DetectionSoundValue = initialValue;
                this.Unknown2 = initialValue;
                this.WeaponAdjust = initialValue;
                this.WorldModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(initialValue, default);
                this.FirstPersonModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(initialValue, default);
                this.SkinTexture = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.TextureSwapList = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.AdditionalRaces = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FootstepSound = initialValue;
                this.ArtObject = initialValue;
                this.DNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem BodyTemplate,
                TItem Race,
                TItem Priority,
                TItem WeightSliderEnabled,
                TItem Unknown,
                TItem DetectionSoundValue,
                TItem Unknown2,
                TItem WeaponAdjust,
                TItem WorldModel,
                TItem FirstPersonModel,
                TItem SkinTexture,
                TItem TextureSwapList,
                TItem AdditionalRaces,
                TItem FootstepSound,
                TItem ArtObject,
                TItem DNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.BodyTemplate = new MaskItem<TItem, BodyTemplate.Mask<TItem>?>(BodyTemplate, new BodyTemplate.Mask<TItem>(BodyTemplate));
                this.Race = Race;
                this.Priority = new GenderedItem<TItem>(Priority, Priority);
                this.WeightSliderEnabled = new GenderedItem<TItem>(WeightSliderEnabled, WeightSliderEnabled);
                this.Unknown = Unknown;
                this.DetectionSoundValue = DetectionSoundValue;
                this.Unknown2 = Unknown2;
                this.WeaponAdjust = WeaponAdjust;
                this.WorldModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(WorldModel, default);
                this.FirstPersonModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(FirstPersonModel, default);
                this.SkinTexture = new MaskItem<TItem, GenderedItem<TItem>?>(SkinTexture, default);
                this.TextureSwapList = new MaskItem<TItem, GenderedItem<TItem>?>(TextureSwapList, default);
                this.AdditionalRaces = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AdditionalRaces, Enumerable.Empty<(int Index, TItem Value)>());
                this.FootstepSound = FootstepSound;
                this.ArtObject = ArtObject;
                this.DNAMDataTypeState = DNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, BodyTemplate.Mask<TItem>?>? BodyTemplate { get; set; }
            public TItem Race;
            public GenderedItem<TItem> Priority;
            public GenderedItem<TItem> WeightSliderEnabled;
            public TItem Unknown;
            public TItem DetectionSoundValue;
            public TItem Unknown2;
            public TItem WeaponAdjust;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>? WorldModel;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>? FirstPersonModel;
            public MaskItem<TItem, GenderedItem<TItem>?>? SkinTexture;
            public MaskItem<TItem, GenderedItem<TItem>?>? TextureSwapList;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AdditionalRaces;
            public TItem FootstepSound;
            public TItem ArtObject;
            public TItem DNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.BodyTemplate, rhs.BodyTemplate)) return false;
                if (!object.Equals(this.Race, rhs.Race)) return false;
                if (!object.Equals(this.Priority, rhs.Priority)) return false;
                if (!object.Equals(this.WeightSliderEnabled, rhs.WeightSliderEnabled)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.DetectionSoundValue, rhs.DetectionSoundValue)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.WeaponAdjust, rhs.WeaponAdjust)) return false;
                if (!object.Equals(this.WorldModel, rhs.WorldModel)) return false;
                if (!object.Equals(this.FirstPersonModel, rhs.FirstPersonModel)) return false;
                if (!object.Equals(this.SkinTexture, rhs.SkinTexture)) return false;
                if (!object.Equals(this.TextureSwapList, rhs.TextureSwapList)) return false;
                if (!object.Equals(this.AdditionalRaces, rhs.AdditionalRaces)) return false;
                if (!object.Equals(this.FootstepSound, rhs.FootstepSound)) return false;
                if (!object.Equals(this.ArtObject, rhs.ArtObject)) return false;
                if (!object.Equals(this.DNAMDataTypeState, rhs.DNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.BodyTemplate);
                hash.Add(this.Race);
                hash.Add(this.Priority);
                hash.Add(this.WeightSliderEnabled);
                hash.Add(this.Unknown);
                hash.Add(this.DetectionSoundValue);
                hash.Add(this.Unknown2);
                hash.Add(this.WeaponAdjust);
                hash.Add(this.WorldModel);
                hash.Add(this.FirstPersonModel);
                hash.Add(this.SkinTexture);
                hash.Add(this.TextureSwapList);
                hash.Add(this.AdditionalRaces);
                hash.Add(this.FootstepSound);
                hash.Add(this.ArtObject);
                hash.Add(this.DNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (BodyTemplate != null)
                {
                    if (!eval(this.BodyTemplate.Overall)) return false;
                    if (this.BodyTemplate.Specific != null && !this.BodyTemplate.Specific.All(eval)) return false;
                }
                if (!eval(this.Race)) return false;
                if (!eval(this.Priority.Male) || !eval(this.Priority.Female)) return false;
                if (!eval(this.WeightSliderEnabled.Male) || !eval(this.WeightSliderEnabled.Female)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.DetectionSoundValue)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.WeaponAdjust)) return false;
                if (!GenderedItem.AllMask(
                    this.WorldModel,
                    eval: eval)) return false;
                if (!GenderedItem.AllMask(
                    this.FirstPersonModel,
                    eval: eval)) return false;
                if (!GenderedItem.All(
                    this.SkinTexture,
                    eval: eval)) return false;
                if (!GenderedItem.All(
                    this.TextureSwapList,
                    eval: eval)) return false;
                if (this.AdditionalRaces != null)
                {
                    if (!eval(this.AdditionalRaces.Overall)) return false;
                    if (this.AdditionalRaces.Specific != null)
                    {
                        foreach (var item in this.AdditionalRaces.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.FootstepSound)) return false;
                if (!eval(this.ArtObject)) return false;
                if (!eval(this.DNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (BodyTemplate != null)
                {
                    if (eval(this.BodyTemplate.Overall)) return true;
                    if (this.BodyTemplate.Specific != null && this.BodyTemplate.Specific.Any(eval)) return true;
                }
                if (eval(this.Race)) return true;
                if (eval(this.Priority.Male) || eval(this.Priority.Female)) return true;
                if (eval(this.WeightSliderEnabled.Male) || eval(this.WeightSliderEnabled.Female)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.DetectionSoundValue)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.WeaponAdjust)) return true;
                if (GenderedItem.AnyMask(
                    this.WorldModel,
                    eval: eval)) return true;
                if (GenderedItem.AnyMask(
                    this.FirstPersonModel,
                    eval: eval)) return true;
                if (GenderedItem.Any(
                    this.SkinTexture,
                    eval: eval)) return true;
                if (GenderedItem.Any(
                    this.TextureSwapList,
                    eval: eval)) return true;
                if (this.AdditionalRaces != null)
                {
                    if (eval(this.AdditionalRaces.Overall)) return true;
                    if (this.AdditionalRaces.Specific != null)
                    {
                        foreach (var item in this.AdditionalRaces.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.FootstepSound)) return true;
                if (eval(this.ArtObject)) return true;
                if (eval(this.DNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ArmorAddon.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.BodyTemplate = this.BodyTemplate == null ? null : new MaskItem<R, BodyTemplate.Mask<R>?>(eval(this.BodyTemplate.Overall), this.BodyTemplate.Specific?.Translate(eval));
                obj.Race = eval(this.Race);
                obj.Priority = new GenderedItem<R>(
                    eval(this.Priority.Male),
                    eval(this.Priority.Female));
                obj.WeightSliderEnabled = new GenderedItem<R>(
                    eval(this.WeightSliderEnabled.Male),
                    eval(this.WeightSliderEnabled.Female));
                obj.Unknown = eval(this.Unknown);
                obj.DetectionSoundValue = eval(this.DetectionSoundValue);
                obj.Unknown2 = eval(this.Unknown2);
                obj.WeaponAdjust = eval(this.WeaponAdjust);
                obj.WorldModel = GenderedItem.TranslateHelper(
                    this.WorldModel,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.FirstPersonModel = GenderedItem.TranslateHelper(
                    this.FirstPersonModel,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.SkinTexture = GenderedItem.TranslateHelper(
                    this.SkinTexture,
                    eval);
                obj.TextureSwapList = GenderedItem.TranslateHelper(
                    this.TextureSwapList,
                    eval);
                if (AdditionalRaces != null)
                {
                    obj.AdditionalRaces = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AdditionalRaces.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AdditionalRaces.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AdditionalRaces.Specific = l;
                        foreach (var item in AdditionalRaces.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.FootstepSound = eval(this.FootstepSound);
                obj.ArtObject = eval(this.ArtObject);
                obj.DNAMDataTypeState = eval(this.DNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ArmorAddon.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ArmorAddon.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ArmorAddon.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.BodyTemplate?.Overall ?? true)
                    {
                        BodyTemplate?.ToString(fg);
                    }
                    if (printMask?.Race ?? true)
                    {
                        fg.AppendItem(Race, "Race");
                    }
                    if ((true))
                    {
                        fg.AppendLine($"Priority => {Priority}");
                    }
                    if ((true))
                    {
                        fg.AppendLine($"WeightSliderEnabled => {WeightSliderEnabled}");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.DetectionSoundValue ?? true)
                    {
                        fg.AppendItem(DetectionSoundValue, "DetectionSoundValue");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.WeaponAdjust ?? true)
                    {
                        fg.AppendItem(WeaponAdjust, "WeaponAdjust");
                    }
                    if (WorldModel != null
                        && (printMask?.WorldModel?.Overall ?? true))
                    {
                        fg.AppendLine($"WorldModel => {WorldModel}");
                    }
                    if (FirstPersonModel != null
                        && (printMask?.FirstPersonModel?.Overall ?? true))
                    {
                        fg.AppendLine($"FirstPersonModel => {FirstPersonModel}");
                    }
                    if (SkinTexture != null
                        && (printMask?.SkinTexture?.Overall ?? true))
                    {
                        fg.AppendLine($"SkinTexture => {SkinTexture}");
                    }
                    if (TextureSwapList != null
                        && (printMask?.TextureSwapList?.Overall ?? true))
                    {
                        fg.AppendLine($"TextureSwapList => {TextureSwapList}");
                    }
                    if ((printMask?.AdditionalRaces?.Overall ?? true)
                        && AdditionalRaces.TryGet(out var AdditionalRacesItem))
                    {
                        fg.AppendLine("AdditionalRaces =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AdditionalRacesItem.Overall);
                            if (AdditionalRacesItem.Specific != null)
                            {
                                foreach (var subItem in AdditionalRacesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.FootstepSound ?? true)
                    {
                        fg.AppendItem(FootstepSound, "FootstepSound");
                    }
                    if (printMask?.ArtObject ?? true)
                    {
                        fg.AppendItem(ArtObject, "ArtObject");
                    }
                    if (printMask?.DNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, BodyTemplate.ErrorMask?>? BodyTemplate;
            public Exception? Race;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Priority;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? WeightSliderEnabled;
            public Exception? Unknown;
            public Exception? DetectionSoundValue;
            public Exception? Unknown2;
            public Exception? WeaponAdjust;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? WorldModel;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? FirstPersonModel;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? SkinTexture;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? TextureSwapList;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AdditionalRaces;
            public Exception? FootstepSound;
            public Exception? ArtObject;
            public Exception? DNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ArmorAddon_FieldIndex enu = (ArmorAddon_FieldIndex)index;
                switch (enu)
                {
                    case ArmorAddon_FieldIndex.BodyTemplate:
                        return BodyTemplate;
                    case ArmorAddon_FieldIndex.Race:
                        return Race;
                    case ArmorAddon_FieldIndex.Priority:
                        return Priority;
                    case ArmorAddon_FieldIndex.WeightSliderEnabled:
                        return WeightSliderEnabled;
                    case ArmorAddon_FieldIndex.Unknown:
                        return Unknown;
                    case ArmorAddon_FieldIndex.DetectionSoundValue:
                        return DetectionSoundValue;
                    case ArmorAddon_FieldIndex.Unknown2:
                        return Unknown2;
                    case ArmorAddon_FieldIndex.WeaponAdjust:
                        return WeaponAdjust;
                    case ArmorAddon_FieldIndex.WorldModel:
                        return WorldModel;
                    case ArmorAddon_FieldIndex.FirstPersonModel:
                        return FirstPersonModel;
                    case ArmorAddon_FieldIndex.SkinTexture:
                        return SkinTexture;
                    case ArmorAddon_FieldIndex.TextureSwapList:
                        return TextureSwapList;
                    case ArmorAddon_FieldIndex.AdditionalRaces:
                        return AdditionalRaces;
                    case ArmorAddon_FieldIndex.FootstepSound:
                        return FootstepSound;
                    case ArmorAddon_FieldIndex.ArtObject:
                        return ArtObject;
                    case ArmorAddon_FieldIndex.DNAMDataTypeState:
                        return DNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ArmorAddon_FieldIndex enu = (ArmorAddon_FieldIndex)index;
                switch (enu)
                {
                    case ArmorAddon_FieldIndex.BodyTemplate:
                        this.BodyTemplate = new MaskItem<Exception?, BodyTemplate.ErrorMask?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.Race:
                        this.Race = ex;
                        break;
                    case ArmorAddon_FieldIndex.Priority:
                        this.Priority = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.WeightSliderEnabled:
                        this.WeightSliderEnabled = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case ArmorAddon_FieldIndex.DetectionSoundValue:
                        this.DetectionSoundValue = ex;
                        break;
                    case ArmorAddon_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case ArmorAddon_FieldIndex.WeaponAdjust:
                        this.WeaponAdjust = ex;
                        break;
                    case ArmorAddon_FieldIndex.WorldModel:
                        this.WorldModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.FirstPersonModel:
                        this.FirstPersonModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.SkinTexture:
                        this.SkinTexture = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.TextureSwapList:
                        this.TextureSwapList = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.AdditionalRaces:
                        this.AdditionalRaces = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.FootstepSound:
                        this.FootstepSound = ex;
                        break;
                    case ArmorAddon_FieldIndex.ArtObject:
                        this.ArtObject = ex;
                        break;
                    case ArmorAddon_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ArmorAddon_FieldIndex enu = (ArmorAddon_FieldIndex)index;
                switch (enu)
                {
                    case ArmorAddon_FieldIndex.BodyTemplate:
                        this.BodyTemplate = (MaskItem<Exception?, BodyTemplate.ErrorMask?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.Race:
                        this.Race = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.Priority:
                        this.Priority = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.WeightSliderEnabled:
                        this.WeightSliderEnabled = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.DetectionSoundValue:
                        this.DetectionSoundValue = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.WeaponAdjust:
                        this.WeaponAdjust = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.WorldModel:
                        this.WorldModel = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.FirstPersonModel:
                        this.FirstPersonModel = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.SkinTexture:
                        this.SkinTexture = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.TextureSwapList:
                        this.TextureSwapList = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.AdditionalRaces:
                        this.AdditionalRaces = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ArmorAddon_FieldIndex.FootstepSound:
                        this.FootstepSound = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.ArtObject:
                        this.ArtObject = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (BodyTemplate != null) return true;
                if (Race != null) return true;
                if (Priority != null) return true;
                if (WeightSliderEnabled != null) return true;
                if (Unknown != null) return true;
                if (DetectionSoundValue != null) return true;
                if (Unknown2 != null) return true;
                if (WeaponAdjust != null) return true;
                if (WorldModel != null) return true;
                if (FirstPersonModel != null) return true;
                if (SkinTexture != null) return true;
                if (TextureSwapList != null) return true;
                if (AdditionalRaces != null) return true;
                if (FootstepSound != null) return true;
                if (ArtObject != null) return true;
                if (DNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                BodyTemplate?.ToString(fg);
                fg.AppendItem(Race, "Race");
                fg.AppendLine($"Priority => {Priority}");
                fg.AppendLine($"WeightSliderEnabled => {WeightSliderEnabled}");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(DetectionSoundValue, "DetectionSoundValue");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(WeaponAdjust, "WeaponAdjust");
                if (WorldModel != null)
                {
                    fg.AppendLine($"WorldModel => {WorldModel}");
                }
                if (FirstPersonModel != null)
                {
                    fg.AppendLine($"FirstPersonModel => {FirstPersonModel}");
                }
                if (SkinTexture != null)
                {
                    fg.AppendLine($"SkinTexture => {SkinTexture}");
                }
                if (TextureSwapList != null)
                {
                    fg.AppendLine($"TextureSwapList => {TextureSwapList}");
                }
                if (AdditionalRaces.TryGet(out var AdditionalRacesItem))
                {
                    fg.AppendLine("AdditionalRaces =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AdditionalRacesItem.Overall);
                        if (AdditionalRacesItem.Specific != null)
                        {
                            foreach (var subItem in AdditionalRacesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(FootstepSound, "FootstepSound");
                fg.AppendItem(ArtObject, "ArtObject");
                fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.BodyTemplate = this.BodyTemplate.Combine(rhs.BodyTemplate, (l, r) => l.Combine(r));
                ret.Race = this.Race.Combine(rhs.Race);
                ret.Priority = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.Priority?.Overall, rhs.Priority?.Overall), GenderedItem.Combine(this.Priority?.Specific, rhs.Priority?.Specific));
                ret.WeightSliderEnabled = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.WeightSliderEnabled?.Overall, rhs.WeightSliderEnabled?.Overall), GenderedItem.Combine(this.WeightSliderEnabled?.Specific, rhs.WeightSliderEnabled?.Specific));
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.DetectionSoundValue = this.DetectionSoundValue.Combine(rhs.DetectionSoundValue);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.WeaponAdjust = this.WeaponAdjust.Combine(rhs.WeaponAdjust);
                ret.WorldModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.WorldModel?.Overall, rhs.WorldModel?.Overall), GenderedItem.Combine(this.WorldModel?.Specific, rhs.WorldModel?.Specific));
                ret.FirstPersonModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.FirstPersonModel?.Overall, rhs.FirstPersonModel?.Overall), GenderedItem.Combine(this.FirstPersonModel?.Specific, rhs.FirstPersonModel?.Specific));
                ret.SkinTexture = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.SkinTexture?.Overall, rhs.SkinTexture?.Overall), GenderedItem.Combine(this.SkinTexture?.Specific, rhs.SkinTexture?.Specific));
                ret.TextureSwapList = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.TextureSwapList?.Overall, rhs.TextureSwapList?.Overall), GenderedItem.Combine(this.TextureSwapList?.Specific, rhs.TextureSwapList?.Specific));
                ret.AdditionalRaces = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.AdditionalRaces?.Overall, rhs.AdditionalRaces?.Overall), ExceptionExt.Combine(this.AdditionalRaces?.Specific, rhs.AdditionalRaces?.Specific));
                ret.FootstepSound = this.FootstepSound.Combine(rhs.FootstepSound);
                ret.ArtObject = this.ArtObject.Combine(rhs.ArtObject);
                ret.DNAMDataTypeState = this.DNAMDataTypeState.Combine(rhs.DNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public BodyTemplate.TranslationMask? BodyTemplate;
            public bool Race;
            public GenderedItem<bool>? Priority;
            public GenderedItem<bool>? WeightSliderEnabled;
            public bool Unknown;
            public bool DetectionSoundValue;
            public bool Unknown2;
            public bool WeaponAdjust;
            public GenderedItem<Model.TranslationMask>? WorldModel;
            public GenderedItem<Model.TranslationMask>? FirstPersonModel;
            public GenderedItem<bool>? SkinTexture;
            public GenderedItem<bool>? TextureSwapList;
            public bool AdditionalRaces;
            public bool FootstepSound;
            public bool ArtObject;
            public bool DNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Race = defaultOn;
                this.Unknown = defaultOn;
                this.DetectionSoundValue = defaultOn;
                this.Unknown2 = defaultOn;
                this.WeaponAdjust = defaultOn;
                this.AdditionalRaces = defaultOn;
                this.FootstepSound = defaultOn;
                this.ArtObject = defaultOn;
                this.DNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((BodyTemplate != null ? BodyTemplate.OnOverall : DefaultOn, BodyTemplate?.GetCrystal()));
                ret.Add((Race, null));
                ret.Add((Priority != null || DefaultOn, null));
                ret.Add((WeightSliderEnabled != null || DefaultOn, null));
                ret.Add((Unknown, null));
                ret.Add((DetectionSoundValue, null));
                ret.Add((Unknown2, null));
                ret.Add((WeaponAdjust, null));
                ret.Add((WorldModel != null || DefaultOn, null));
                ret.Add((FirstPersonModel != null || DefaultOn, null));
                ret.Add((SkinTexture != null || DefaultOn, null));
                ret.Add((TextureSwapList != null || DefaultOn, null));
                ret.Add((AdditionalRaces, null));
                ret.Add((FootstepSound, null));
                ret.Add((ArtObject, null));
                ret.Add((DNAMDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ArmorAddon_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ArmorAddonCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ArmorAddonSetterCommon.Instance.RemapLinks(this, mapping);
        public ArmorAddon(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private ArmorAddon(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal ArmorAddon(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ArmorAddon(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public ArmorAddon(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DNAMDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorAddonBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ArmorAddonBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static ArmorAddon CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ArmorAddon();
            ((ArmorAddonSetterCommon)((IArmorAddonGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ArmorAddon item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ArmorAddonSetterCommon)((IArmorAddonGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ArmorAddon GetNew()
        {
            return new ArmorAddon();
        }

    }
    #endregion

    #region Interface
    public partial interface IArmorAddon :
        IArmorAddonGetter,
        IFallout4MajorRecord,
        ILoquiObjectSetter<IArmorAddonInternal>,
        IFormLinkContainer
    {
        new BodyTemplate? BodyTemplate { get; set; }
        new FormLinkNullable<IRaceGetter> Race { get; set; }
        new IGenderedItem<Byte> Priority { get; set; }
        new IGenderedItem<Boolean> WeightSliderEnabled { get; set; }
        new UInt16 Unknown { get; set; }
        new Byte DetectionSoundValue { get; set; }
        new Byte Unknown2 { get; set; }
        new Single WeaponAdjust { get; set; }
        new IGenderedItem<Model?>? WorldModel { get; set; }
        new IGenderedItem<Model?>? FirstPersonModel { get; set; }
        new IGenderedItem<IFormLinkNullable<ITextureSetGetter>>? SkinTexture { get; set; }
        new IGenderedItem<IFormLinkNullable<IFormListGetter>>? TextureSwapList { get; set; }
        new ExtendedList<IFormLink<IRaceGetter>> AdditionalRaces { get; }
        new FormLinkNullable<IFootstepSetGetter> FootstepSound { get; set; }
        new FormLinkNullable<IArtObjectGetter> ArtObject { get; set; }
        new ArmorAddon.DNAMDataType DNAMDataTypeState { get; set; }
    }

    public partial interface IArmorAddonInternal :
        IFallout4MajorRecordInternal,
        IArmorAddon,
        IArmorAddonGetter
    {
        new IGenderedItem<Byte> Priority { get; set; }
        new IGenderedItem<Boolean> WeightSliderEnabled { get; set; }
        new IGenderedItem<Model?>? WorldModel { get; set; }
        new IGenderedItem<Model?>? FirstPersonModel { get; set; }
        new IGenderedItem<IFormLinkNullable<ITextureSetGetter>>? SkinTexture { get; set; }
        new IGenderedItem<IFormLinkNullable<IFormListGetter>>? TextureSwapList { get; set; }
    }

    public partial interface IArmorAddonGetter :
        IFallout4MajorRecordGetter,
        ILoquiObject<IArmorAddonGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => ArmorAddon_Registration.Instance;
        IBodyTemplateGetter? BodyTemplate { get; }
        FormLinkNullable<IRaceGetter> Race { get; }
        IGenderedItemGetter<Byte> Priority { get; }
        IGenderedItemGetter<Boolean> WeightSliderEnabled { get; }
        UInt16 Unknown { get; }
        Byte DetectionSoundValue { get; }
        Byte Unknown2 { get; }
        Single WeaponAdjust { get; }
        IGenderedItemGetter<IModelGetter?>? WorldModel { get; }
        IGenderedItemGetter<IModelGetter?>? FirstPersonModel { get; }
        IGenderedItemGetter<IFormLinkNullable<ITextureSetGetter>>? SkinTexture { get; }
        IGenderedItemGetter<IFormLinkNullable<IFormListGetter>>? TextureSwapList { get; }
        IReadOnlyList<IFormLink<IRaceGetter>> AdditionalRaces { get; }
        FormLinkNullable<IFootstepSetGetter> FootstepSound { get; }
        FormLinkNullable<IArtObjectGetter> ArtObject { get; }
        ArmorAddon.DNAMDataType DNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ArmorAddonMixIn
    {
        public static void Clear(this IArmorAddonInternal item)
        {
            ((ArmorAddonSetterCommon)((IArmorAddonGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ArmorAddon.Mask<bool> GetEqualsMask(
            this IArmorAddonGetter item,
            IArmorAddonGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IArmorAddonGetter item,
            string? name = null,
            ArmorAddon.Mask<bool>? printMask = null)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IArmorAddonGetter item,
            FileGeneration fg,
            string? name = null,
            ArmorAddon.Mask<bool>? printMask = null)
        {
            ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IArmorAddonGetter item,
            IArmorAddonGetter rhs)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IArmorAddonInternal lhs,
            IArmorAddonGetter rhs,
            out ArmorAddon.ErrorMask errorMask,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ArmorAddon.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IArmorAddonInternal lhs,
            IArmorAddonGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ArmorAddon DeepCopy(
            this IArmorAddonGetter item,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            return ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ArmorAddon DeepCopy(
            this IArmorAddonGetter item,
            out ArmorAddon.ErrorMask errorMask,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            return ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ArmorAddon DeepCopy(
            this IArmorAddonGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ArmorAddon Duplicate(
            this IArmorAddonGetter item,
            FormKey formKey,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IArmorAddonInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ArmorAddonSetterCommon)((IArmorAddonGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ArmorAddon_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        BodyTemplate = 6,
        Race = 7,
        Priority = 8,
        WeightSliderEnabled = 9,
        Unknown = 10,
        DetectionSoundValue = 11,
        Unknown2 = 12,
        WeaponAdjust = 13,
        WorldModel = 14,
        FirstPersonModel = 15,
        SkinTexture = 16,
        TextureSwapList = 17,
        AdditionalRaces = 18,
        FootstepSound = 19,
        ArtObject = 20,
        DNAMDataTypeState = 21,
    }
    #endregion

    #region Registration
    public partial class ArmorAddon_Registration : ILoquiRegistration
    {
        public static readonly ArmorAddon_Registration Instance = new ArmorAddon_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 153,
            version: 0);

        public const string GUID = "4b6db51f-a0b8-4378-8e8b-8103dfdcd353";

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(ArmorAddon.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ArmorAddon.ErrorMask);

        public static readonly Type ClassType = typeof(ArmorAddon);

        public static readonly Type GetterType = typeof(IArmorAddonGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IArmorAddon);

        public static readonly Type? InternalSetterType = typeof(IArmorAddonInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.ArmorAddon";

        public const string Name = "ArmorAddon";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ARMA;
        public static readonly Type BinaryWriteTranslation = typeof(ArmorAddonBinaryWriteTranslation);
        public static RecordTypeConverter WorldModelFemaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD3")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO3T")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODS"),
                new RecordType("MO3S")));
        public static RecordTypeConverter WorldModelMaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD2")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO2T")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODS"),
                new RecordType("MO2S")));
        public static RecordTypeConverter FirstPersonModelFemaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD5")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO5T")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODS"),
                new RecordType("MO5S")));
        public static RecordTypeConverter FirstPersonModelMaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD4")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO4T")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODS"),
                new RecordType("MO4S")));
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ArmorAddonSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ArmorAddonSetterCommon Instance = new ArmorAddonSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IArmorAddonInternal item)
        {
            ClearPartial();
            item.BodyTemplate = null;
            item.Race = FormLinkNullable<IRaceGetter>.Null;
            item.Priority.Male = default;
            item.Priority.Female = default;
            item.WeightSliderEnabled.Male = default;
            item.WeightSliderEnabled.Female = default;
            item.Unknown = default;
            item.DetectionSoundValue = default;
            item.Unknown2 = default;
            item.WeaponAdjust = default;
            item.WorldModel = null;
            item.FirstPersonModel = null;
            item.SkinTexture = null;
            item.TextureSwapList = null;
            item.AdditionalRaces.Clear();
            item.FootstepSound = FormLinkNullable<IFootstepSetGetter>.Null;
            item.ArtObject = FormLinkNullable<IArtObjectGetter>.Null;
            item.DNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IArmorAddonInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IArmorAddonInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IArmorAddon obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Race = obj.Race.Relink(mapping);
            obj.WorldModel?.RemapLinks(mapping);
            obj.FirstPersonModel?.RemapLinks(mapping);
            obj.SkinTexture?.RemapLinks(mapping);
            obj.TextureSwapList?.RemapLinks(mapping);
            obj.AdditionalRaces.RemapLinks(mapping);
            obj.FootstepSound = obj.FootstepSound.Relink(mapping);
            obj.ArtObject = obj.ArtObject.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IArmorAddonInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IArmorAddonInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ArmorAddonBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ArmorAddonBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ArmorAddon)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ArmorAddon)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ArmorAddonCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ArmorAddonCommon Instance = new ArmorAddonCommon();

        public ArmorAddon.Mask<bool> GetEqualsMask(
            IArmorAddonGetter item,
            IArmorAddonGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ArmorAddon.Mask<bool>(false);
            ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IArmorAddonGetter item,
            IArmorAddonGetter rhs,
            ArmorAddon.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.BodyTemplate = EqualsMaskHelper.EqualsHelper(
                item.BodyTemplate,
                rhs.BodyTemplate,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Race = item.Race.Equals(rhs.Race);
            ret.Priority = new GenderedItem<bool>(
                male: item.Priority.Male == rhs.Priority.Male,
                female: item.Priority.Female == rhs.Priority.Female);
            ret.WeightSliderEnabled = new GenderedItem<bool>(
                male: item.WeightSliderEnabled.Male == rhs.WeightSliderEnabled.Male,
                female: item.WeightSliderEnabled.Female == rhs.WeightSliderEnabled.Female);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.DetectionSoundValue = item.DetectionSoundValue == rhs.DetectionSoundValue;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.WeaponAdjust = item.WeaponAdjust.EqualsWithin(rhs.WeaponAdjust);
            ret.WorldModel = GenderedItem.EqualityMaskHelper(
                lhs: item.WorldModel,
                rhs: rhs.WorldModel,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.FirstPersonModel = GenderedItem.EqualityMaskHelper(
                lhs: item.FirstPersonModel,
                rhs: rhs.FirstPersonModel,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.SkinTexture = GenderedItem.EqualityMaskHelper(
                lhs: item.SkinTexture,
                rhs: rhs.SkinTexture,
                maskGetter: (l, r, i) => EqualityComparer<IFormLinkNullable<ITextureSetGetter>>.Default.Equals(l, r),
                include: include);
            ret.TextureSwapList = GenderedItem.EqualityMaskHelper(
                lhs: item.TextureSwapList,
                rhs: rhs.TextureSwapList,
                maskGetter: (l, r, i) => EqualityComparer<IFormLinkNullable<IFormListGetter>>.Default.Equals(l, r),
                include: include);
            ret.AdditionalRaces = item.AdditionalRaces.CollectionEqualsHelper(
                rhs.AdditionalRaces,
                (l, r) => object.Equals(l, r),
                include);
            ret.FootstepSound = item.FootstepSound.Equals(rhs.FootstepSound);
            ret.ArtObject = item.ArtObject.Equals(rhs.ArtObject);
            ret.DNAMDataTypeState = item.DNAMDataTypeState == rhs.DNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IArmorAddonGetter item,
            string? name = null,
            ArmorAddon.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IArmorAddonGetter item,
            FileGeneration fg,
            string? name = null,
            ArmorAddon.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ArmorAddon =>");
            }
            else
            {
                fg.AppendLine($"{name} (ArmorAddon) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IArmorAddonGetter item,
            FileGeneration fg,
            ArmorAddon.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.BodyTemplate?.Overall ?? true)
                && item.BodyTemplate.TryGet(out var BodyTemplateItem))
            {
                BodyTemplateItem?.ToString(fg, "BodyTemplate");
            }
            if (printMask?.Race ?? true)
            {
                fg.AppendItem(item.Race.FormKeyNullable, "Race");
            }
            if (true)
            {
                item.Priority.ToString(fg, "Priority");
            }
            if (true)
            {
                item.WeightSliderEnabled.ToString(fg, "WeightSliderEnabled");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.DetectionSoundValue ?? true)
            {
                fg.AppendItem(item.DetectionSoundValue, "DetectionSoundValue");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.WeaponAdjust ?? true)
            {
                fg.AppendItem(item.WeaponAdjust, "WeaponAdjust");
            }
            if ((printMask?.WorldModel?.Overall ?? true)
                && item.WorldModel.TryGet(out var WorldModelItem))
            {
                WorldModelItem?.ToString(fg, "WorldModel");
            }
            if ((printMask?.FirstPersonModel?.Overall ?? true)
                && item.FirstPersonModel.TryGet(out var FirstPersonModelItem))
            {
                FirstPersonModelItem?.ToString(fg, "FirstPersonModel");
            }
            if ((printMask?.SkinTexture?.Overall ?? true)
                && item.SkinTexture.TryGet(out var SkinTextureItem))
            {
                SkinTextureItem?.ToString(fg, "SkinTexture");
            }
            if ((printMask?.TextureSwapList?.Overall ?? true)
                && item.TextureSwapList.TryGet(out var TextureSwapListItem))
            {
                TextureSwapListItem?.ToString(fg, "TextureSwapList");
            }
            if (printMask?.AdditionalRaces?.Overall ?? true)
            {
                fg.AppendLine("AdditionalRaces =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.AdditionalRaces)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.FootstepSound ?? true)
            {
                fg.AppendItem(item.FootstepSound.FormKeyNullable, "FootstepSound");
            }
            if (printMask?.ArtObject ?? true)
            {
                fg.AppendItem(item.ArtObject.FormKeyNullable, "ArtObject");
            }
            if (printMask?.DNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.DNAMDataTypeState, "DNAMDataTypeState");
            }
        }
        
        public static ArmorAddon_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ArmorAddon_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (ArmorAddon_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (ArmorAddon_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (ArmorAddon_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (ArmorAddon_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (ArmorAddon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new ArmorAddon_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ArmorAddon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ArmorAddon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ArmorAddon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ArmorAddon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IArmorAddonGetter? lhs,
            IArmorAddonGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.BodyTemplate, rhs.BodyTemplate)) return false;
            if (!lhs.Race.Equals(rhs.Race)) return false;
            if (!Equals(lhs.Priority, rhs.Priority)) return false;
            if (!Equals(lhs.WeightSliderEnabled, rhs.WeightSliderEnabled)) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.DetectionSoundValue != rhs.DetectionSoundValue) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            if (!lhs.WeaponAdjust.EqualsWithin(rhs.WeaponAdjust)) return false;
            if (!Equals(lhs.WorldModel, rhs.WorldModel)) return false;
            if (!Equals(lhs.FirstPersonModel, rhs.FirstPersonModel)) return false;
            if (!Equals(lhs.SkinTexture, rhs.SkinTexture)) return false;
            if (!Equals(lhs.TextureSwapList, rhs.TextureSwapList)) return false;
            if (!lhs.AdditionalRaces.SequenceEqualNullable(rhs.AdditionalRaces)) return false;
            if (!lhs.FootstepSound.Equals(rhs.FootstepSound)) return false;
            if (!lhs.ArtObject.Equals(rhs.ArtObject)) return false;
            if (lhs.DNAMDataTypeState != rhs.DNAMDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IArmorAddonGetter?)lhs,
                rhs: rhs as IArmorAddonGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IArmorAddonGetter?)lhs,
                rhs: rhs as IArmorAddonGetter);
        }
        
        public virtual int GetHashCode(IArmorAddonGetter item)
        {
            var hash = new HashCode();
            if (item.BodyTemplate.TryGet(out var BodyTemplateitem))
            {
                hash.Add(BodyTemplateitem);
            }
            hash.Add(item.Race);
            hash.Add(HashCode.Combine(item.Priority.Male, item.Priority.Female));
            hash.Add(HashCode.Combine(item.WeightSliderEnabled.Male, item.WeightSliderEnabled.Female));
            hash.Add(item.Unknown);
            hash.Add(item.DetectionSoundValue);
            hash.Add(item.Unknown2);
            hash.Add(item.WeaponAdjust);
            if (item.WorldModel.TryGet(out var WorldModelitem))
            {
                hash.Add(HashCode.Combine(WorldModelitem.Male, WorldModelitem.Female));
            }
            if (item.FirstPersonModel.TryGet(out var FirstPersonModelitem))
            {
                hash.Add(HashCode.Combine(FirstPersonModelitem.Male, FirstPersonModelitem.Female));
            }
            if (item.SkinTexture.TryGet(out var SkinTextureitem))
            {
                hash.Add(HashCode.Combine(SkinTextureitem.Male, SkinTextureitem.Female));
            }
            if (item.TextureSwapList.TryGet(out var TextureSwapListitem))
            {
                hash.Add(HashCode.Combine(TextureSwapListitem.Male, TextureSwapListitem.Female));
            }
            hash.Add(item.AdditionalRaces);
            hash.Add(item.FootstepSound);
            hash.Add(item.ArtObject);
            hash.Add(item.DNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorAddonGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorAddonGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ArmorAddon.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IArmorAddonGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Race.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Race);
            }
            if (obj.WorldModel.TryGet(out var WorldModelItem))
            {
                foreach (var item in WorldModelItem.NotNull().SelectMany(f => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.FirstPersonModel.TryGet(out var FirstPersonModelItem))
            {
                foreach (var item in FirstPersonModelItem.NotNull().SelectMany(f => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.SkinTexture.TryGet(out var SkinTextureItem))
            {
                foreach (var item in SkinTextureItem.NotNull())
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.TextureSwapList.TryGet(out var TextureSwapListItem))
            {
                foreach (var item in TextureSwapListItem.NotNull())
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.AdditionalRaces)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.FootstepSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.FootstepSound);
            }
            if (obj.ArtObject.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ArtObject);
            }
            yield break;
        }
        
        #region Duplicate
        public ArmorAddon Duplicate(
            IArmorAddonGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ArmorAddon(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IArmorAddon)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IArmorAddon)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ArmorAddonSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ArmorAddonSetterTranslationCommon Instance = new ArmorAddonSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IArmorAddonInternal item,
            IArmorAddonGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IArmorAddon item,
            IArmorAddonGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.BodyTemplate) ?? true))
            {
                errorMask?.PushIndex((int)ArmorAddon_FieldIndex.BodyTemplate);
                try
                {
                    if(rhs.BodyTemplate.TryGet(out var rhsBodyTemplate))
                    {
                        item.BodyTemplate = rhsBodyTemplate.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ArmorAddon_FieldIndex.BodyTemplate));
                    }
                    else
                    {
                        item.BodyTemplate = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.Race) ?? true))
            {
                item.Race = new FormLinkNullable<IRaceGetter>(rhs.Race.FormKeyNullable);
            }
            item.Priority = new GenderedItem<Byte>(
                male: rhs.Priority.Male,
                female: rhs.Priority.Female);
            item.WeightSliderEnabled = new GenderedItem<Boolean>(
                male: rhs.WeightSliderEnabled.Male,
                female: rhs.WeightSliderEnabled.Female);
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.DetectionSoundValue) ?? true))
            {
                item.DetectionSoundValue = rhs.DetectionSoundValue;
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.WeaponAdjust) ?? true))
            {
                item.WeaponAdjust = rhs.WeaponAdjust;
            }
            if (!rhs.WorldModel.TryGet(out var rhsWorldModelitem))
            {
                item.WorldModel = null;
            }
            else
            {
                item.WorldModel = new GenderedItem<Model?>(
                    male: rhsWorldModelitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsWorldModelitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if (!rhs.FirstPersonModel.TryGet(out var rhsFirstPersonModelitem))
            {
                item.FirstPersonModel = null;
            }
            else
            {
                item.FirstPersonModel = new GenderedItem<Model?>(
                    male: rhsFirstPersonModelitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsFirstPersonModelitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if (!rhs.SkinTexture.TryGet(out var rhsSkinTextureitem))
            {
                item.SkinTexture = null;
            }
            else
            {
                item.SkinTexture = new GenderedItem<IFormLinkNullable<ITextureSetGetter>>(
                    male: new FormLinkNullable<ITextureSetGetter>(rhsSkinTextureitem.Male.FormKeyNullable),
                    female: new FormLinkNullable<ITextureSetGetter>(rhsSkinTextureitem.Female.FormKeyNullable));
            }
            if (!rhs.TextureSwapList.TryGet(out var rhsTextureSwapListitem))
            {
                item.TextureSwapList = null;
            }
            else
            {
                item.TextureSwapList = new GenderedItem<IFormLinkNullable<IFormListGetter>>(
                    male: new FormLinkNullable<IFormListGetter>(rhsTextureSwapListitem.Male.FormKeyNullable),
                    female: new FormLinkNullable<IFormListGetter>(rhsTextureSwapListitem.Female.FormKeyNullable));
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.AdditionalRaces) ?? true))
            {
                errorMask?.PushIndex((int)ArmorAddon_FieldIndex.AdditionalRaces);
                try
                {
                    item.AdditionalRaces.SetTo(
                        rhs.AdditionalRaces
                        .Select(r => (IFormLink<IRaceGetter>)new FormLink<IRaceGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.FootstepSound) ?? true))
            {
                item.FootstepSound = new FormLinkNullable<IFootstepSetGetter>(rhs.FootstepSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.ArtObject) ?? true))
            {
                item.ArtObject = new FormLinkNullable<IArtObjectGetter>(rhs.ArtObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.DNAMDataTypeState) ?? true))
            {
                item.DNAMDataTypeState = rhs.DNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorAddonInternal)item,
                rhs: (IArmorAddonGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorAddon)item,
                rhs: (IArmorAddonGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorAddonInternal)item,
                rhs: (IArmorAddonGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorAddon)item,
                rhs: (IArmorAddonGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ArmorAddon DeepCopy(
            IArmorAddonGetter item,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            ArmorAddon ret = (ArmorAddon)((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).GetNew();
            ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ArmorAddon DeepCopy(
            IArmorAddonGetter item,
            out ArmorAddon.ErrorMask errorMask,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ArmorAddon ret = (ArmorAddon)((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).GetNew();
            ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ArmorAddon.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ArmorAddon DeepCopy(
            IArmorAddonGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ArmorAddon ret = (ArmorAddon)((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).GetNew();
            ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ArmorAddon
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ArmorAddon_Registration.Instance;
        public new static ArmorAddon_Registration Registration => ArmorAddon_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorAddonCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ArmorAddonSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorAddonSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ArmorAddonBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ArmorAddonBinaryWriteTranslation Instance = new ArmorAddonBinaryWriteTranslation();

        static partial void WriteBinaryBodyTemplateCustom(
            MutagenWriter writer,
            IArmorAddonGetter item);

        public static void WriteBinaryBodyTemplate(
            MutagenWriter writer,
            IArmorAddonGetter item)
        {
            WriteBinaryBodyTemplateCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryWeightSliderEnabledCustom(
            MutagenWriter writer,
            IArmorAddonGetter item);

        public static void WriteBinaryWeightSliderEnabled(
            MutagenWriter writer,
            IArmorAddonGetter item)
        {
            WriteBinaryWeightSliderEnabledCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IArmorAddonGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IArmorAddonGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            ArmorAddonBinaryWriteTranslation.WriteBinaryBodyTemplate(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Race,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.RNAM));
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DNAM)))
            {
                GenderedItemBinaryTranslation.Write(
                    writer: writer,
                    item: item.Priority,
                    transl: ByteBinaryTranslation.Instance.Write);
                ArmorAddonBinaryWriteTranslation.WriteBinaryWeightSliderEnabled(
                    writer: writer,
                    item: item);
                writer.Write(item.Unknown);
                writer.Write(item.DetectionSoundValue);
                writer.Write(item.Unknown2);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.WeaponAdjust);
            }
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.WorldModel,
                femaleRecordConverter: ArmorAddon_Registration.WorldModelFemaleConverter,
                maleRecordConverter: ArmorAddon_Registration.WorldModelMaleConverter,
                transl: (MutagenWriter subWriter, IModelGetter? subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((ModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.FirstPersonModel,
                femaleRecordConverter: ArmorAddon_Registration.FirstPersonModelFemaleConverter,
                maleRecordConverter: ArmorAddon_Registration.FirstPersonModelMaleConverter,
                transl: (MutagenWriter subWriter, IModelGetter? subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((ModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.SkinTexture,
                maleMarker: RecordTypes.NAM0,
                femaleMarker: RecordTypes.NAM1,
                transl: (MutagenWriter subWriter, IFormLinkNullable<ITextureSetGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                        writer: subWriter,
                        item: subItem);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.TextureSwapList,
                maleMarker: RecordTypes.NAM2,
                femaleMarker: RecordTypes.NAM3,
                transl: (MutagenWriter subWriter, IFormLinkNullable<IFormListGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IRaceGetter>>.Instance.Write(
                writer: writer,
                items: item.AdditionalRaces,
                transl: (MutagenWriter subWriter, IFormLink<IRaceGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.MODL));
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FootstepSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNDD));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ArtObject,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ONAM));
        }

        public void Write(
            MutagenWriter writer,
            IArmorAddonGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.ARMA),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IArmorAddonGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IArmorAddonGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IArmorAddonGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ArmorAddonBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static ArmorAddonBinaryCreateTranslation Instance = new ArmorAddonBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ARMA;
        public static void FillBinaryStructs(
            IArmorAddonInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IArmorAddonInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BODT:
                case RecordTypeInts.BOD2:
                {
                    ArmorAddonBinaryCreateTranslation.FillBinaryBodyTemplateCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)ArmorAddon_FieldIndex.BodyTemplate;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Race = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)ArmorAddon_FieldIndex.Race;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Priority = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<Byte>(
                        frame: frame,
                        transl: ByteBinaryTranslation.Instance.Parse);
                    ArmorAddonBinaryCreateTranslation.FillBinaryWeightSliderEnabledCustom(
                        frame: dataFrame,
                        item: item);
                    item.Unknown = dataFrame.ReadUInt16();
                    item.DetectionSoundValue = dataFrame.ReadUInt8();
                    item.Unknown2 = dataFrame.ReadUInt8();
                    item.WeaponAdjust = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)ArmorAddon_FieldIndex.WeaponAdjust;
                }
                case RecordTypeInts.MOD2:
                case RecordTypeInts.MOD3:
                {
                    item.WorldModel = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<Model>(
                        frame: frame,
                        femaleRecordConverter: ArmorAddon_Registration.WorldModelFemaleConverter,
                        maleRecordConverter: ArmorAddon_Registration.WorldModelMaleConverter,
                        transl: Model.TryCreateFromBinary);
                    return (int)ArmorAddon_FieldIndex.WorldModel;
                }
                case RecordTypeInts.MOD4:
                case RecordTypeInts.MOD5:
                {
                    item.FirstPersonModel = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<Model>(
                        frame: frame,
                        femaleRecordConverter: ArmorAddon_Registration.FirstPersonModelFemaleConverter,
                        maleRecordConverter: ArmorAddon_Registration.FirstPersonModelMaleConverter,
                        transl: Model.TryCreateFromBinary);
                    return (int)ArmorAddon_FieldIndex.FirstPersonModel;
                }
                case RecordTypeInts.NAM0:
                case RecordTypeInts.NAM1:
                {
                    item.SkinTexture = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<IFormLinkNullable<ITextureSetGetter>>(
                        frame: frame,
                        maleMarker: RecordTypes.NAM0,
                        femaleMarker: RecordTypes.NAM1,
                        transl: FormLinkBinaryTranslation.Instance.Parse,
                        skipMarker: false,
                        fallback: FormLinkNullable<TextureSet>.Null);
                    return (int)ArmorAddon_FieldIndex.SkinTexture;
                }
                case RecordTypeInts.NAM2:
                case RecordTypeInts.NAM3:
                {
                    item.TextureSwapList = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<IFormLinkNullable<IFormListGetter>>(
                        frame: frame,
                        maleMarker: RecordTypes.NAM2,
                        femaleMarker: RecordTypes.NAM3,
                        transl: FormLinkBinaryTranslation.Instance.Parse,
                        skipMarker: false,
                        fallback: FormLinkNullable<FormList>.Null);
                    return (int)ArmorAddon_FieldIndex.TextureSwapList;
                }
                case RecordTypeInts.MODL:
                {
                    item.AdditionalRaces.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IRaceGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.MODL),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)ArmorAddon_FieldIndex.AdditionalRaces;
                }
                case RecordTypeInts.SNDD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FootstepSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)ArmorAddon_FieldIndex.FootstepSound;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ArtObject = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)ArmorAddon_FieldIndex.ArtObject;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryBodyTemplateCustom(
            MutagenFrame frame,
            IArmorAddonInternal item);

        static partial void FillBinaryWeightSliderEnabledCustom(
            MutagenFrame frame,
            IArmorAddonInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ArmorAddonBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ArmorAddonBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IArmorAddonGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ArmorAddon_Registration.Instance;
        public new static ArmorAddon_Registration Registration => ArmorAddon_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorAddonCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorAddonSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ArmorAddonCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorAddonBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ArmorAddonBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region BodyTemplate
        partial void BodyTemplateCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public IBodyTemplateGetter? BodyTemplate => GetBodyTemplateCustom();
        #endregion
        #region Race
        private int? _RaceLocation;
        public FormLinkNullable<IRaceGetter> Race => _RaceLocation.HasValue ? new FormLinkNullable<IRaceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _RaceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IRaceGetter>.Null;
        #endregion
        private int? _DNAMLocation;
        public ArmorAddon.DNAMDataType DNAMDataTypeState { get; private set; }
        #region Priority
        private int _PriorityLocation => _DNAMLocation!.Value;
        private bool _Priority_IsSet => _DNAMLocation.HasValue;
        public IGenderedItemGetter<Byte> Priority
        {
            get
            {
                if (!_Priority_IsSet) return new GenderedItem<Byte>(default, default);
                var data = _data.Span.Slice(_PriorityLocation);
                return new GenderedItem<Byte>(
                    data[0],
                    data.Slice(1)[0]);
            }
        }
        #endregion
        #region WeightSliderEnabled
        private int _WeightSliderEnabledLocation => _DNAMLocation!.Value + 0x2;
        public IGenderedItemGetter<Boolean> WeightSliderEnabled => GetWeightSliderEnabledCustom();
        #endregion
        #region Unknown
        private int _UnknownLocation => _DNAMLocation!.Value + 0x4;
        private bool _Unknown_IsSet => _DNAMLocation.HasValue;
        public UInt16 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(_UnknownLocation, 2)) : default;
        #endregion
        #region DetectionSoundValue
        private int _DetectionSoundValueLocation => _DNAMLocation!.Value + 0x6;
        private bool _DetectionSoundValue_IsSet => _DNAMLocation.HasValue;
        public Byte DetectionSoundValue => _DetectionSoundValue_IsSet ? _data.Span[_DetectionSoundValueLocation] : default;
        #endregion
        #region Unknown2
        private int _Unknown2Location => _DNAMLocation!.Value + 0x7;
        private bool _Unknown2_IsSet => _DNAMLocation.HasValue;
        public Byte Unknown2 => _Unknown2_IsSet ? _data.Span[_Unknown2Location] : default;
        #endregion
        #region WeaponAdjust
        private int _WeaponAdjustLocation => _DNAMLocation!.Value + 0x8;
        private bool _WeaponAdjust_IsSet => _DNAMLocation.HasValue;
        public Single WeaponAdjust => _WeaponAdjust_IsSet ? _data.Slice(_WeaponAdjustLocation, 4).Float() : default;
        #endregion
        #region WorldModel
        private IGenderedItemGetter<IModelGetter?>? _WorldModelOverlay;
        public IGenderedItemGetter<IModelGetter?>? WorldModel => _WorldModelOverlay;
        #endregion
        #region FirstPersonModel
        private IGenderedItemGetter<IModelGetter?>? _FirstPersonModelOverlay;
        public IGenderedItemGetter<IModelGetter?>? FirstPersonModel => _FirstPersonModelOverlay;
        #endregion
        #region SkinTexture
        private IGenderedItemGetter<IFormLinkNullable<ITextureSetGetter>>? _SkinTextureOverlay;
        public IGenderedItemGetter<IFormLinkNullable<ITextureSetGetter>>? SkinTexture => _SkinTextureOverlay;
        #endregion
        #region TextureSwapList
        private IGenderedItemGetter<IFormLinkNullable<IFormListGetter>>? _TextureSwapListOverlay;
        public IGenderedItemGetter<IFormLinkNullable<IFormListGetter>>? TextureSwapList => _TextureSwapListOverlay;
        #endregion
        public IReadOnlyList<IFormLink<IRaceGetter>> AdditionalRaces { get; private set; } = ListExt.Empty<IFormLink<IRaceGetter>>();
        #region FootstepSound
        private int? _FootstepSoundLocation;
        public FormLinkNullable<IFootstepSetGetter> FootstepSound => _FootstepSoundLocation.HasValue ? new FormLinkNullable<IFootstepSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FootstepSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFootstepSetGetter>.Null;
        #endregion
        #region ArtObject
        private int? _ArtObjectLocation;
        public FormLinkNullable<IArtObjectGetter> ArtObject => _ArtObjectLocation.HasValue ? new FormLinkNullable<IArtObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ArtObjectLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IArtObjectGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ArmorAddonBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ArmorAddonBinaryOverlay ArmorAddonFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new ArmorAddonBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ArmorAddonBinaryOverlay ArmorAddonFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ArmorAddonFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BODT:
                case RecordTypeInts.BOD2:
                {
                    BodyTemplateCustomParse(
                        stream,
                        finalPos,
                        offset);
                    return (int)ArmorAddon_FieldIndex.BodyTemplate;
                }
                case RecordTypeInts.RNAM:
                {
                    _RaceLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.Race;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)ArmorAddon_FieldIndex.WeaponAdjust;
                }
                case RecordTypeInts.MOD2:
                case RecordTypeInts.MOD3:
                {
                    _WorldModelOverlay = GenderedItemBinaryOverlay.Factory<IModelGetter>(
                        package: _package,
                        stream: stream,
                        creator: (s, p, r) => ModelBinaryOverlay.ModelFactory(s, p, r),
                        femaleRecordConverter: ArmorAddon_Registration.WorldModelFemaleConverter,
                        maleRecordConverter: ArmorAddon_Registration.WorldModelMaleConverter);
                    return (int)ArmorAddon_FieldIndex.WorldModel;
                }
                case RecordTypeInts.MOD4:
                case RecordTypeInts.MOD5:
                {
                    _FirstPersonModelOverlay = GenderedItemBinaryOverlay.Factory<IModelGetter>(
                        package: _package,
                        stream: stream,
                        creator: (s, p, r) => ModelBinaryOverlay.ModelFactory(s, p, r),
                        femaleRecordConverter: ArmorAddon_Registration.FirstPersonModelFemaleConverter,
                        maleRecordConverter: ArmorAddon_Registration.FirstPersonModelMaleConverter);
                    return (int)ArmorAddon_FieldIndex.FirstPersonModel;
                }
                case RecordTypeInts.NAM0:
                case RecordTypeInts.NAM1:
                {
                    _SkinTextureOverlay = GenderedItemBinaryOverlay.Factory<IFormLinkNullable<ITextureSetGetter>>(
                        package: _package,
                        male: RecordTypes.NAM0,
                        female: RecordTypes.NAM1,
                        stream: stream,
                        creator: (m, p) => new FormLinkNullable<ITextureSetGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(m, p.MetaData.Constants)))),
                        fallback: FormLinkNullable<TextureSet>.Null);
                    return (int)ArmorAddon_FieldIndex.SkinTexture;
                }
                case RecordTypeInts.NAM2:
                case RecordTypeInts.NAM3:
                {
                    _TextureSwapListOverlay = GenderedItemBinaryOverlay.Factory<IFormLinkNullable<IFormListGetter>>(
                        package: _package,
                        male: RecordTypes.NAM2,
                        female: RecordTypes.NAM3,
                        stream: stream,
                        creator: (m, p) => new FormLinkNullable<IFormListGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(m, p.MetaData.Constants)))),
                        fallback: FormLinkNullable<FormList>.Null);
                    return (int)ArmorAddon_FieldIndex.TextureSwapList;
                }
                case RecordTypeInts.MODL:
                {
                    this.AdditionalRaces = BinaryOverlayList.FactoryByArray<IFormLink<IRaceGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IRaceGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)ArmorAddon_FieldIndex.AdditionalRaces;
                }
                case RecordTypeInts.SNDD:
                {
                    _FootstepSoundLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.FootstepSound;
                }
                case RecordTypeInts.ONAM:
                {
                    _ArtObjectLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.ArtObject;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ArmorAddonMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IArmorAddonGetter rhs)) return false;
            return ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IArmorAddonGetter? obj)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

