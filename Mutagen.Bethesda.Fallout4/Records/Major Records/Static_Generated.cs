/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Static :
        Fallout4MajorRecord,
        IStaticInternal,
        ILoquiObjectSetter<Static>,
        IEquatable<IStaticGetter>
    {
        #region Ctor
        protected Static()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IStaticGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IStaticGetter.Model => this.Model;
        #endregion
        #region MaxAngle
        public readonly static Single _MaxAngle_Default = 30;
        public Single MaxAngle { get; set; } = _MaxAngle_Default;
        public static RangeFloat MaxAngle_Range = new RangeFloat(30f, 120f);
        #endregion
        #region Material
        public FormLink<IMaterialObjectGetter> Material { get; set; } = new FormLink<IMaterialObjectGetter>();
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Static.Flag _Flags;
        public Static.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.DNAMDataTypeState &= ~DNAMDataType.Break0;
                this._Flags = value;
            }
        }
        #endregion
        #region Unused
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unused = new byte[3];
        public MemorySlice<Byte> Unused
        {
            get => _Unused;
            set => this._Unused = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IStaticGetter.Unused => this.Unused;
        #endregion
        #region Lod
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Lod? _Lod;
        public Lod? Lod
        {
            get => _Lod;
            set => _Lod = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILodGetter? IStaticGetter.Lod => this.Lod;
        #endregion
        #region DNAMDataTypeState
        public Static.DNAMDataType DNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            StaticMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IStaticGetter rhs)) return false;
            return ((StaticCommon)((IStaticGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IStaticGetter? obj)
        {
            return ((StaticCommon)((IStaticGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((StaticCommon)((IStaticGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.MaxAngle = initialValue;
                this.Material = initialValue;
                this.Flags = initialValue;
                this.Unused = initialValue;
                this.Lod = new MaskItem<TItem, Lod.Mask<TItem>?>(initialValue, new Lod.Mask<TItem>(initialValue));
                this.DNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Model,
                TItem MaxAngle,
                TItem Material,
                TItem Flags,
                TItem Unused,
                TItem Lod,
                TItem DNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.MaxAngle = MaxAngle;
                this.Material = Material;
                this.Flags = Flags;
                this.Unused = Unused;
                this.Lod = new MaskItem<TItem, Lod.Mask<TItem>?>(Lod, new Lod.Mask<TItem>(Lod));
                this.DNAMDataTypeState = DNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem MaxAngle;
            public TItem Material;
            public TItem Flags;
            public TItem Unused;
            public MaskItem<TItem, Lod.Mask<TItem>?>? Lod { get; set; }
            public TItem DNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.MaxAngle, rhs.MaxAngle)) return false;
                if (!object.Equals(this.Material, rhs.Material)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.Lod, rhs.Lod)) return false;
                if (!object.Equals(this.DNAMDataTypeState, rhs.DNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Model);
                hash.Add(this.MaxAngle);
                hash.Add(this.Material);
                hash.Add(this.Flags);
                hash.Add(this.Unused);
                hash.Add(this.Lod);
                hash.Add(this.DNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.MaxAngle)) return false;
                if (!eval(this.Material)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Unused)) return false;
                if (Lod != null)
                {
                    if (!eval(this.Lod.Overall)) return false;
                    if (this.Lod.Specific != null && !this.Lod.Specific.All(eval)) return false;
                }
                if (!eval(this.DNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.MaxAngle)) return true;
                if (eval(this.Material)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Unused)) return true;
                if (Lod != null)
                {
                    if (eval(this.Lod.Overall)) return true;
                    if (this.Lod.Specific != null && this.Lod.Specific.Any(eval)) return true;
                }
                if (eval(this.DNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Static.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.MaxAngle = eval(this.MaxAngle);
                obj.Material = eval(this.Material);
                obj.Flags = eval(this.Flags);
                obj.Unused = eval(this.Unused);
                obj.Lod = this.Lod == null ? null : new MaskItem<R, Lod.Mask<R>?>(eval(this.Lod.Overall), this.Lod.Specific?.Translate(eval));
                obj.DNAMDataTypeState = eval(this.DNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Static.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Static.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Static.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.MaxAngle ?? true)
                    {
                        fg.AppendItem(MaxAngle, "MaxAngle");
                    }
                    if (printMask?.Material ?? true)
                    {
                        fg.AppendItem(Material, "Material");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        fg.AppendItem(Unused, "Unused");
                    }
                    if (printMask?.Lod?.Overall ?? true)
                    {
                        Lod?.ToString(fg);
                    }
                    if (printMask?.DNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? MaxAngle;
            public Exception? Material;
            public Exception? Flags;
            public Exception? Unused;
            public MaskItem<Exception?, Lod.ErrorMask?>? Lod;
            public Exception? DNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Static_FieldIndex enu = (Static_FieldIndex)index;
                switch (enu)
                {
                    case Static_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Static_FieldIndex.Model:
                        return Model;
                    case Static_FieldIndex.MaxAngle:
                        return MaxAngle;
                    case Static_FieldIndex.Material:
                        return Material;
                    case Static_FieldIndex.Flags:
                        return Flags;
                    case Static_FieldIndex.Unused:
                        return Unused;
                    case Static_FieldIndex.Lod:
                        return Lod;
                    case Static_FieldIndex.DNAMDataTypeState:
                        return DNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Static_FieldIndex enu = (Static_FieldIndex)index;
                switch (enu)
                {
                    case Static_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Static_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Static_FieldIndex.MaxAngle:
                        this.MaxAngle = ex;
                        break;
                    case Static_FieldIndex.Material:
                        this.Material = ex;
                        break;
                    case Static_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Static_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    case Static_FieldIndex.Lod:
                        this.Lod = new MaskItem<Exception?, Lod.ErrorMask?>(ex, null);
                        break;
                    case Static_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Static_FieldIndex enu = (Static_FieldIndex)index;
                switch (enu)
                {
                    case Static_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Static_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Static_FieldIndex.MaxAngle:
                        this.MaxAngle = (Exception?)obj;
                        break;
                    case Static_FieldIndex.Material:
                        this.Material = (Exception?)obj;
                        break;
                    case Static_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Static_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    case Static_FieldIndex.Lod:
                        this.Lod = (MaskItem<Exception?, Lod.ErrorMask?>?)obj;
                        break;
                    case Static_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Model != null) return true;
                if (MaxAngle != null) return true;
                if (Material != null) return true;
                if (Flags != null) return true;
                if (Unused != null) return true;
                if (Lod != null) return true;
                if (DNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                Model?.ToString(fg);
                fg.AppendItem(MaxAngle, "MaxAngle");
                fg.AppendItem(Material, "Material");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Unused, "Unused");
                Lod?.ToString(fg);
                fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.MaxAngle = this.MaxAngle.Combine(rhs.MaxAngle);
                ret.Material = this.Material.Combine(rhs.Material);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                ret.Lod = this.Lod.Combine(rhs.Lod, (l, r) => l.Combine(r));
                ret.DNAMDataTypeState = this.DNAMDataTypeState.Combine(rhs.DNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public Model.TranslationMask? Model;
            public bool MaxAngle;
            public bool Material;
            public bool Flags;
            public bool Unused;
            public Lod.TranslationMask? Lod;
            public bool DNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.MaxAngle = defaultOn;
                this.Material = defaultOn;
                this.Flags = defaultOn;
                this.Unused = defaultOn;
                this.DNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((MaxAngle, null));
                ret.Add((Material, null));
                ret.Add((Flags, null));
                ret.Add((Unused, null));
                ret.Add((Lod != null ? Lod.OnOverall : DefaultOn, Lod?.GetCrystal()));
                ret.Add((DNAMDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Static_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => StaticCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => StaticSetterCommon.Instance.RemapLinks(this, mapping);
        public Static(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Static(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Static(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Static(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Static(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum DNAMDataType
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StaticBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((StaticBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Static CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Static();
            ((StaticSetterCommon)((IStaticGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Static item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((StaticSetterCommon)((IStaticGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Static GetNew()
        {
            return new Static();
        }

    }
    #endregion

    #region Interface
    public partial interface IStatic :
        IStaticGetter,
        IFallout4MajorRecord,
        IObjectId,
        IRegionTarget,
        IModeled,
        IObjectBounded,
        ILoquiObjectSetter<IStaticInternal>,
        IFormLinkContainer
    {
        new ObjectBounds ObjectBounds { get; set; }
        new Model? Model { get; set; }
        new Single MaxAngle { get; set; }
        new FormLink<IMaterialObjectGetter> Material { get; set; }
        new Static.Flag Flags { get; set; }
        new MemorySlice<Byte> Unused { get; set; }
        new Lod? Lod { get; set; }
        new Static.DNAMDataType DNAMDataTypeState { get; set; }
        #region Mutagen
        new Static.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IStaticInternal :
        IFallout4MajorRecordInternal,
        IStatic,
        IStaticGetter
    {
    }

    public partial interface IStaticGetter :
        IFallout4MajorRecordGetter,
        IObjectIdGetter,
        IRegionTargetGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        ILoquiObject<IStaticGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Static_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        IModelGetter? Model { get; }
        Single MaxAngle { get; }
        FormLink<IMaterialObjectGetter> Material { get; }
        Static.Flag Flags { get; }
        ReadOnlyMemorySlice<Byte> Unused { get; }
        ILodGetter? Lod { get; }
        Static.DNAMDataType DNAMDataTypeState { get; }

        #region Mutagen
        Static.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class StaticMixIn
    {
        public static void Clear(this IStaticInternal item)
        {
            ((StaticSetterCommon)((IStaticGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Static.Mask<bool> GetEqualsMask(
            this IStaticGetter item,
            IStaticGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StaticCommon)((IStaticGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IStaticGetter item,
            string? name = null,
            Static.Mask<bool>? printMask = null)
        {
            return ((StaticCommon)((IStaticGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IStaticGetter item,
            FileGeneration fg,
            string? name = null,
            Static.Mask<bool>? printMask = null)
        {
            ((StaticCommon)((IStaticGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStaticGetter item,
            IStaticGetter rhs)
        {
            return ((StaticCommon)((IStaticGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IStaticInternal lhs,
            IStaticGetter rhs,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StaticSetterTranslationCommon)((IStaticGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Static.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStaticInternal lhs,
            IStaticGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StaticSetterTranslationCommon)((IStaticGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Static DeepCopy(
            this IStaticGetter item,
            Static.TranslationMask? copyMask = null)
        {
            return ((StaticSetterTranslationCommon)((IStaticGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Static DeepCopy(
            this IStaticGetter item,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? copyMask = null)
        {
            return ((StaticSetterTranslationCommon)((IStaticGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Static DeepCopy(
            this IStaticGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StaticSetterTranslationCommon)((IStaticGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Static Duplicate(
            this IStaticGetter item,
            FormKey formKey,
            Static.TranslationMask? copyMask = null)
        {
            return ((StaticCommon)((IStaticGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStaticInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((StaticSetterCommon)((IStaticGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Static_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Model = 7,
        MaxAngle = 8,
        Material = 9,
        Flags = 10,
        Unused = 11,
        Lod = 12,
        DNAMDataTypeState = 13,
    }
    #endregion

    #region Registration
    public partial class Static_Registration : ILoquiRegistration
    {
        public static readonly Static_Registration Instance = new Static_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 105,
            version: 0);

        public const string GUID = "89036057-4570-493d-a5f7-4c5718f67a06";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Static.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Static.ErrorMask);

        public static readonly Type ClassType = typeof(Static);

        public static readonly Type GetterType = typeof(IStaticGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStatic);

        public static readonly Type? InternalSetterType = typeof(IStaticInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Static";

        public const string Name = "Static";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.STAT;
        public static readonly Type BinaryWriteTranslation = typeof(StaticBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class StaticSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly StaticSetterCommon Instance = new StaticSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStaticInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Model = null;
            item.MaxAngle = Static._MaxAngle_Default;
            item.Material = FormLink<IMaterialObjectGetter>.Null;
            item.Flags = default;
            item.Unused = new byte[3];
            item.Lod = null;
            item.DNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IStaticInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IStaticInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IStatic obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Material = obj.Material.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStaticInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IStaticInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: StaticBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: StaticBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Static)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Static)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class StaticCommon : Fallout4MajorRecordCommon
    {
        public new static readonly StaticCommon Instance = new StaticCommon();

        public Static.Mask<bool> GetEqualsMask(
            IStaticGetter item,
            IStaticGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Static.Mask<bool>(false);
            ((StaticCommon)((IStaticGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStaticGetter item,
            IStaticGetter rhs,
            Static.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MaxAngle = item.MaxAngle.EqualsWithin(rhs.MaxAngle);
            ret.Material = item.Material.Equals(rhs.Material);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Unused = MemoryExtensions.SequenceEqual(item.Unused.Span, rhs.Unused.Span);
            ret.Lod = EqualsMaskHelper.EqualsHelper(
                item.Lod,
                rhs.Lod,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DNAMDataTypeState = item.DNAMDataTypeState == rhs.DNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IStaticGetter item,
            string? name = null,
            Static.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IStaticGetter item,
            FileGeneration fg,
            string? name = null,
            Static.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Static =>");
            }
            else
            {
                fg.AppendLine($"{name} (Static) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IStaticGetter item,
            FileGeneration fg,
            Static.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.MaxAngle ?? true)
            {
                fg.AppendItem(item.MaxAngle, "MaxAngle");
            }
            if (printMask?.Material ?? true)
            {
                fg.AppendItem(item.Material.FormKey, "Material");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Unused ?? true)
            {
                fg.AppendLine($"Unused => {SpanExt.ToHexString(item.Unused)}");
            }
            if ((printMask?.Lod?.Overall ?? true)
                && item.Lod.TryGet(out var LodItem))
            {
                LodItem?.ToString(fg, "Lod");
            }
            if (printMask?.DNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.DNAMDataTypeState, "DNAMDataTypeState");
            }
        }
        
        public static Static_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Static_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Static_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Static_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Static_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Static_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Static_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Static_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Static_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Static_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Static_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Static_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStaticGetter? lhs,
            IStaticGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.MaxAngle.EqualsWithin(rhs.MaxAngle)) return false;
            if (!lhs.Material.Equals(rhs.Material)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unused.Span, rhs.Unused.Span)) return false;
            if (!object.Equals(lhs.Lod, rhs.Lod)) return false;
            if (lhs.DNAMDataTypeState != rhs.DNAMDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IStaticGetter?)lhs,
                rhs: rhs as IStaticGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IStaticGetter?)lhs,
                rhs: rhs as IStaticGetter);
        }
        
        public virtual int GetHashCode(IStaticGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.MaxAngle);
            hash.Add(item.Material);
            hash.Add(item.Flags);
            hash.Add(item.Unused);
            if (item.Lod.TryGet(out var Loditem))
            {
                hash.Add(Loditem);
            }
            hash.Add(item.DNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IStaticGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IStaticGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Static.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IStaticGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield return FormLinkInformation.Factory(obj.Material);
            yield break;
        }
        
        #region Duplicate
        public Static Duplicate(
            IStaticGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Static(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IStatic)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IStatic)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class StaticSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly StaticSetterTranslationCommon Instance = new StaticSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStaticInternal item,
            IStaticGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IStatic item,
            IStaticGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Static_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Static_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Static_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Static_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.MaxAngle) ?? true))
            {
                item.MaxAngle = rhs.MaxAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.Material) ?? true))
            {
                item.Material = new FormLink<IMaterialObjectGetter>(rhs.Material.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.Lod) ?? true))
            {
                errorMask?.PushIndex((int)Static_FieldIndex.Lod);
                try
                {
                    if(rhs.Lod.TryGet(out var rhsLod))
                    {
                        item.Lod = rhsLod.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Static_FieldIndex.Lod));
                    }
                    else
                    {
                        item.Lod = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.DNAMDataTypeState) ?? true))
            {
                item.DNAMDataTypeState = rhs.DNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStaticInternal)item,
                rhs: (IStaticGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStatic)item,
                rhs: (IStaticGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStaticInternal)item,
                rhs: (IStaticGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStatic)item,
                rhs: (IStaticGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Static DeepCopy(
            IStaticGetter item,
            Static.TranslationMask? copyMask = null)
        {
            Static ret = (Static)((StaticCommon)((IStaticGetter)item).CommonInstance()!).GetNew();
            ((StaticSetterTranslationCommon)((IStaticGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Static DeepCopy(
            IStaticGetter item,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Static ret = (Static)((StaticCommon)((IStaticGetter)item).CommonInstance()!).GetNew();
            ((StaticSetterTranslationCommon)((IStaticGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Static.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Static DeepCopy(
            IStaticGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Static ret = (Static)((StaticCommon)((IStaticGetter)item).CommonInstance()!).GetNew();
            ((StaticSetterTranslationCommon)((IStaticGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Static
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Static_Registration.Instance;
        public new static Static_Registration Registration => Static_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StaticCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return StaticSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StaticSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class StaticBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static StaticBinaryWriteTranslation Instance = new StaticBinaryWriteTranslation();

        public static void WriteEmbedded(
            IStaticGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IStaticGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DNAM)))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaxAngle);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Material);
                if (!item.DNAMDataTypeState.HasFlag(Static.DNAMDataType.Break0))
                {
                    if (writer.MetaData.FormVersion!.Value >= 44)
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<Static.Flag>.Instance.Write(
                            writer,
                            item.Flags,
                            length: 1);
                    }
                    if (writer.MetaData.FormVersion!.Value >= 44)
                    {
                        Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.Unused);
                    }
                }
            }
            if (item.Lod.TryGet(out var LodItem))
            {
                ((LodBinaryWriteTranslation)((IBinaryItem)LodItem).BinaryWriteTranslator).Write(
                    item: LodItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IStaticGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.STAT),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IStaticGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IStaticGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IStaticGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class StaticBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static StaticBinaryCreateTranslation Instance = new StaticBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.STAT;
        public static void FillBinaryStructs(
            IStaticInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IStaticInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Static_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Static_FieldIndex.Model;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.MaxAngle = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Material = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    if (dataFrame.Complete)
                    {
                        item.DNAMDataTypeState |= Static.DNAMDataType.Break0;
                        return (int)Static_FieldIndex.Material;
                    }
                    if (frame.MetaData.FormVersion!.Value >= 44)
                    {
                        item.Flags = EnumBinaryTranslation<Static.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    }
                    if (frame.MetaData.FormVersion!.Value >= 44)
                    {
                        item.Unused = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(3));
                    }
                    return (int)Static_FieldIndex.Unused;
                }
                case RecordTypeInts.MNAM:
                {
                    item.Lod = Mutagen.Bethesda.Fallout4.Lod.CreateFromBinary(frame: frame);
                    return (int)Static_FieldIndex.Lod;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class StaticBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class StaticBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IStaticGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Static_Registration.Instance;
        public new static Static_Registration Registration => Static_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StaticCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StaticSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => StaticCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StaticBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((StaticBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Static.MajorFlag MajorFlags => (Static.MajorFlag)this.MajorRecordFlagsRaw;

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        public IModelGetter? Model { get; private set; }
        private int? _DNAMLocation;
        public Static.DNAMDataType DNAMDataTypeState { get; private set; }
        #region MaxAngle
        private int _MaxAngleLocation => _DNAMLocation!.Value;
        private bool _MaxAngle_IsSet => _DNAMLocation.HasValue;
        public Single MaxAngle => _MaxAngle_IsSet ? _data.Slice(_MaxAngleLocation, 4).Float() : default;
        #endregion
        #region Material
        private int _MaterialLocation => _DNAMLocation!.Value + 0x4;
        private bool _Material_IsSet => _DNAMLocation.HasValue;
        public FormLink<IMaterialObjectGetter> Material => _Material_IsSet ? new FormLink<IMaterialObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_MaterialLocation, 0x4)))) : FormLink<IMaterialObjectGetter>.Null;
        #endregion
        #region Flags
        private int _FlagsLocation => _DNAMLocation!.Value + 0x8;
        private bool _Flags_IsSet => _DNAMLocation.HasValue && !DNAMDataTypeState.HasFlag(Static.DNAMDataType.Break0) && _package.FormVersion!.FormVersion!.Value >= 44;
        public Static.Flag Flags => _Flags_IsSet ? (Static.Flag)_data.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        int FlagsVersioningOffset => _package.FormVersion!.FormVersion!.Value < 44 ? -1 : 0;
        #endregion
        #region Unused
        private int _UnusedLocation => _DNAMLocation!.Value + FlagsVersioningOffset + 0x9;
        private bool _Unused_IsSet => _DNAMLocation.HasValue && !DNAMDataTypeState.HasFlag(Static.DNAMDataType.Break0) && _package.FormVersion!.FormVersion!.Value >= 44;
        public ReadOnlyMemorySlice<Byte> Unused => _Unused_IsSet ? _data.Span.Slice(_UnusedLocation, 3).ToArray() : default(ReadOnlyMemorySlice<byte>);
        int UnusedVersioningOffset => FlagsVersioningOffset + (_package.FormVersion!.FormVersion!.Value < 44 ? -3 : 0);
        #endregion
        #region Lod
        private RangeInt32? _LodLocation;
        public ILodGetter? Lod => _LodLocation.HasValue ? LodBinaryOverlay.LodFactory(new OverlayStream(_data.Slice(_LodLocation!.Value.Min), _package), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected StaticBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static StaticBinaryOverlay StaticFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new StaticBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static StaticBinaryOverlay StaticFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return StaticFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Static_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Static_FieldIndex.Model;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x8)
                    {
                        this.DNAMDataTypeState |= Static.DNAMDataType.Break0;
                    }
                    return (int)Static_FieldIndex.Unused;
                }
                case RecordTypeInts.MNAM:
                {
                    _LodLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Static_FieldIndex.Lod;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            StaticMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IStaticGetter rhs)) return false;
            return ((StaticCommon)((IStaticGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IStaticGetter? obj)
        {
            return ((StaticCommon)((IStaticGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((StaticCommon)((IStaticGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

