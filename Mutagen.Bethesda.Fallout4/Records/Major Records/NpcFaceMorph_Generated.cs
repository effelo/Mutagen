/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class NpcFaceMorph :
        INpcFaceMorph,
        ILoquiObjectSetter<NpcFaceMorph>,
        IEquatable<INpcFaceMorphGetter>
    {
        #region Ctor
        public NpcFaceMorph()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NoseLongVsShort
        public Single NoseLongVsShort { get; set; } = default;
        #endregion
        #region NoseUpVsDown
        public Single NoseUpVsDown { get; set; } = default;
        #endregion
        #region JawUpVsDown
        public Single JawUpVsDown { get; set; } = default;
        #endregion
        #region JawNarrowVsWide
        public Single JawNarrowVsWide { get; set; } = default;
        #endregion
        #region JawForwardVsBack
        public Single JawForwardVsBack { get; set; } = default;
        #endregion
        #region CheeksUpVsDown
        public Single CheeksUpVsDown { get; set; } = default;
        #endregion
        #region CheeksForwardVsBack
        public Single CheeksForwardVsBack { get; set; } = default;
        #endregion
        #region EyesUpVsDown
        public Single EyesUpVsDown { get; set; } = default;
        #endregion
        #region EyesInVsOut
        public Single EyesInVsOut { get; set; } = default;
        #endregion
        #region BrowsUpVsDown
        public Single BrowsUpVsDown { get; set; } = default;
        #endregion
        #region BrowsInVsOut
        public Single BrowsInVsOut { get; set; } = default;
        #endregion
        #region BrowsForwardVsBack
        public Single BrowsForwardVsBack { get; set; } = default;
        #endregion
        #region LipsUpVsDown
        public Single LipsUpVsDown { get; set; } = default;
        #endregion
        #region LipsInVsOut
        public Single LipsInVsOut { get; set; } = default;
        #endregion
        #region ChinNarrowVsWide
        public Single ChinNarrowVsWide { get; set; } = default;
        #endregion
        #region ChinUpVsDown
        public Single ChinUpVsDown { get; set; } = default;
        #endregion
        #region ChinUnderbiteVsOverbite
        public Single ChinUnderbiteVsOverbite { get; set; } = default;
        #endregion
        #region EyesForwardVsBack
        public Single EyesForwardVsBack { get; set; } = default;
        #endregion
        #region Unknown
        public Single Unknown { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcFaceMorphMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INpcFaceMorphGetter rhs)) return false;
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INpcFaceMorphGetter? obj)
        {
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NoseLongVsShort = initialValue;
                this.NoseUpVsDown = initialValue;
                this.JawUpVsDown = initialValue;
                this.JawNarrowVsWide = initialValue;
                this.JawForwardVsBack = initialValue;
                this.CheeksUpVsDown = initialValue;
                this.CheeksForwardVsBack = initialValue;
                this.EyesUpVsDown = initialValue;
                this.EyesInVsOut = initialValue;
                this.BrowsUpVsDown = initialValue;
                this.BrowsInVsOut = initialValue;
                this.BrowsForwardVsBack = initialValue;
                this.LipsUpVsDown = initialValue;
                this.LipsInVsOut = initialValue;
                this.ChinNarrowVsWide = initialValue;
                this.ChinUpVsDown = initialValue;
                this.ChinUnderbiteVsOverbite = initialValue;
                this.EyesForwardVsBack = initialValue;
                this.Unknown = initialValue;
            }

            public Mask(
                TItem NoseLongVsShort,
                TItem NoseUpVsDown,
                TItem JawUpVsDown,
                TItem JawNarrowVsWide,
                TItem JawForwardVsBack,
                TItem CheeksUpVsDown,
                TItem CheeksForwardVsBack,
                TItem EyesUpVsDown,
                TItem EyesInVsOut,
                TItem BrowsUpVsDown,
                TItem BrowsInVsOut,
                TItem BrowsForwardVsBack,
                TItem LipsUpVsDown,
                TItem LipsInVsOut,
                TItem ChinNarrowVsWide,
                TItem ChinUpVsDown,
                TItem ChinUnderbiteVsOverbite,
                TItem EyesForwardVsBack,
                TItem Unknown)
            {
                this.NoseLongVsShort = NoseLongVsShort;
                this.NoseUpVsDown = NoseUpVsDown;
                this.JawUpVsDown = JawUpVsDown;
                this.JawNarrowVsWide = JawNarrowVsWide;
                this.JawForwardVsBack = JawForwardVsBack;
                this.CheeksUpVsDown = CheeksUpVsDown;
                this.CheeksForwardVsBack = CheeksForwardVsBack;
                this.EyesUpVsDown = EyesUpVsDown;
                this.EyesInVsOut = EyesInVsOut;
                this.BrowsUpVsDown = BrowsUpVsDown;
                this.BrowsInVsOut = BrowsInVsOut;
                this.BrowsForwardVsBack = BrowsForwardVsBack;
                this.LipsUpVsDown = LipsUpVsDown;
                this.LipsInVsOut = LipsInVsOut;
                this.ChinNarrowVsWide = ChinNarrowVsWide;
                this.ChinUpVsDown = ChinUpVsDown;
                this.ChinUnderbiteVsOverbite = ChinUnderbiteVsOverbite;
                this.EyesForwardVsBack = EyesForwardVsBack;
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NoseLongVsShort;
            public TItem NoseUpVsDown;
            public TItem JawUpVsDown;
            public TItem JawNarrowVsWide;
            public TItem JawForwardVsBack;
            public TItem CheeksUpVsDown;
            public TItem CheeksForwardVsBack;
            public TItem EyesUpVsDown;
            public TItem EyesInVsOut;
            public TItem BrowsUpVsDown;
            public TItem BrowsInVsOut;
            public TItem BrowsForwardVsBack;
            public TItem LipsUpVsDown;
            public TItem LipsInVsOut;
            public TItem ChinNarrowVsWide;
            public TItem ChinUpVsDown;
            public TItem ChinUnderbiteVsOverbite;
            public TItem EyesForwardVsBack;
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NoseLongVsShort, rhs.NoseLongVsShort)) return false;
                if (!object.Equals(this.NoseUpVsDown, rhs.NoseUpVsDown)) return false;
                if (!object.Equals(this.JawUpVsDown, rhs.JawUpVsDown)) return false;
                if (!object.Equals(this.JawNarrowVsWide, rhs.JawNarrowVsWide)) return false;
                if (!object.Equals(this.JawForwardVsBack, rhs.JawForwardVsBack)) return false;
                if (!object.Equals(this.CheeksUpVsDown, rhs.CheeksUpVsDown)) return false;
                if (!object.Equals(this.CheeksForwardVsBack, rhs.CheeksForwardVsBack)) return false;
                if (!object.Equals(this.EyesUpVsDown, rhs.EyesUpVsDown)) return false;
                if (!object.Equals(this.EyesInVsOut, rhs.EyesInVsOut)) return false;
                if (!object.Equals(this.BrowsUpVsDown, rhs.BrowsUpVsDown)) return false;
                if (!object.Equals(this.BrowsInVsOut, rhs.BrowsInVsOut)) return false;
                if (!object.Equals(this.BrowsForwardVsBack, rhs.BrowsForwardVsBack)) return false;
                if (!object.Equals(this.LipsUpVsDown, rhs.LipsUpVsDown)) return false;
                if (!object.Equals(this.LipsInVsOut, rhs.LipsInVsOut)) return false;
                if (!object.Equals(this.ChinNarrowVsWide, rhs.ChinNarrowVsWide)) return false;
                if (!object.Equals(this.ChinUpVsDown, rhs.ChinUpVsDown)) return false;
                if (!object.Equals(this.ChinUnderbiteVsOverbite, rhs.ChinUnderbiteVsOverbite)) return false;
                if (!object.Equals(this.EyesForwardVsBack, rhs.EyesForwardVsBack)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NoseLongVsShort);
                hash.Add(this.NoseUpVsDown);
                hash.Add(this.JawUpVsDown);
                hash.Add(this.JawNarrowVsWide);
                hash.Add(this.JawForwardVsBack);
                hash.Add(this.CheeksUpVsDown);
                hash.Add(this.CheeksForwardVsBack);
                hash.Add(this.EyesUpVsDown);
                hash.Add(this.EyesInVsOut);
                hash.Add(this.BrowsUpVsDown);
                hash.Add(this.BrowsInVsOut);
                hash.Add(this.BrowsForwardVsBack);
                hash.Add(this.LipsUpVsDown);
                hash.Add(this.LipsInVsOut);
                hash.Add(this.ChinNarrowVsWide);
                hash.Add(this.ChinUpVsDown);
                hash.Add(this.ChinUnderbiteVsOverbite);
                hash.Add(this.EyesForwardVsBack);
                hash.Add(this.Unknown);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.NoseLongVsShort)) return false;
                if (!eval(this.NoseUpVsDown)) return false;
                if (!eval(this.JawUpVsDown)) return false;
                if (!eval(this.JawNarrowVsWide)) return false;
                if (!eval(this.JawForwardVsBack)) return false;
                if (!eval(this.CheeksUpVsDown)) return false;
                if (!eval(this.CheeksForwardVsBack)) return false;
                if (!eval(this.EyesUpVsDown)) return false;
                if (!eval(this.EyesInVsOut)) return false;
                if (!eval(this.BrowsUpVsDown)) return false;
                if (!eval(this.BrowsInVsOut)) return false;
                if (!eval(this.BrowsForwardVsBack)) return false;
                if (!eval(this.LipsUpVsDown)) return false;
                if (!eval(this.LipsInVsOut)) return false;
                if (!eval(this.ChinNarrowVsWide)) return false;
                if (!eval(this.ChinUpVsDown)) return false;
                if (!eval(this.ChinUnderbiteVsOverbite)) return false;
                if (!eval(this.EyesForwardVsBack)) return false;
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.NoseLongVsShort)) return true;
                if (eval(this.NoseUpVsDown)) return true;
                if (eval(this.JawUpVsDown)) return true;
                if (eval(this.JawNarrowVsWide)) return true;
                if (eval(this.JawForwardVsBack)) return true;
                if (eval(this.CheeksUpVsDown)) return true;
                if (eval(this.CheeksForwardVsBack)) return true;
                if (eval(this.EyesUpVsDown)) return true;
                if (eval(this.EyesInVsOut)) return true;
                if (eval(this.BrowsUpVsDown)) return true;
                if (eval(this.BrowsInVsOut)) return true;
                if (eval(this.BrowsForwardVsBack)) return true;
                if (eval(this.LipsUpVsDown)) return true;
                if (eval(this.LipsInVsOut)) return true;
                if (eval(this.ChinNarrowVsWide)) return true;
                if (eval(this.ChinUpVsDown)) return true;
                if (eval(this.ChinUnderbiteVsOverbite)) return true;
                if (eval(this.EyesForwardVsBack)) return true;
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcFaceMorph.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.NoseLongVsShort = eval(this.NoseLongVsShort);
                obj.NoseUpVsDown = eval(this.NoseUpVsDown);
                obj.JawUpVsDown = eval(this.JawUpVsDown);
                obj.JawNarrowVsWide = eval(this.JawNarrowVsWide);
                obj.JawForwardVsBack = eval(this.JawForwardVsBack);
                obj.CheeksUpVsDown = eval(this.CheeksUpVsDown);
                obj.CheeksForwardVsBack = eval(this.CheeksForwardVsBack);
                obj.EyesUpVsDown = eval(this.EyesUpVsDown);
                obj.EyesInVsOut = eval(this.EyesInVsOut);
                obj.BrowsUpVsDown = eval(this.BrowsUpVsDown);
                obj.BrowsInVsOut = eval(this.BrowsInVsOut);
                obj.BrowsForwardVsBack = eval(this.BrowsForwardVsBack);
                obj.LipsUpVsDown = eval(this.LipsUpVsDown);
                obj.LipsInVsOut = eval(this.LipsInVsOut);
                obj.ChinNarrowVsWide = eval(this.ChinNarrowVsWide);
                obj.ChinUpVsDown = eval(this.ChinUpVsDown);
                obj.ChinUnderbiteVsOverbite = eval(this.ChinUnderbiteVsOverbite);
                obj.EyesForwardVsBack = eval(this.EyesForwardVsBack);
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NpcFaceMorph.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NpcFaceMorph.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NpcFaceMorph.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.NoseLongVsShort ?? true)
                    {
                        fg.AppendItem(NoseLongVsShort, "NoseLongVsShort");
                    }
                    if (printMask?.NoseUpVsDown ?? true)
                    {
                        fg.AppendItem(NoseUpVsDown, "NoseUpVsDown");
                    }
                    if (printMask?.JawUpVsDown ?? true)
                    {
                        fg.AppendItem(JawUpVsDown, "JawUpVsDown");
                    }
                    if (printMask?.JawNarrowVsWide ?? true)
                    {
                        fg.AppendItem(JawNarrowVsWide, "JawNarrowVsWide");
                    }
                    if (printMask?.JawForwardVsBack ?? true)
                    {
                        fg.AppendItem(JawForwardVsBack, "JawForwardVsBack");
                    }
                    if (printMask?.CheeksUpVsDown ?? true)
                    {
                        fg.AppendItem(CheeksUpVsDown, "CheeksUpVsDown");
                    }
                    if (printMask?.CheeksForwardVsBack ?? true)
                    {
                        fg.AppendItem(CheeksForwardVsBack, "CheeksForwardVsBack");
                    }
                    if (printMask?.EyesUpVsDown ?? true)
                    {
                        fg.AppendItem(EyesUpVsDown, "EyesUpVsDown");
                    }
                    if (printMask?.EyesInVsOut ?? true)
                    {
                        fg.AppendItem(EyesInVsOut, "EyesInVsOut");
                    }
                    if (printMask?.BrowsUpVsDown ?? true)
                    {
                        fg.AppendItem(BrowsUpVsDown, "BrowsUpVsDown");
                    }
                    if (printMask?.BrowsInVsOut ?? true)
                    {
                        fg.AppendItem(BrowsInVsOut, "BrowsInVsOut");
                    }
                    if (printMask?.BrowsForwardVsBack ?? true)
                    {
                        fg.AppendItem(BrowsForwardVsBack, "BrowsForwardVsBack");
                    }
                    if (printMask?.LipsUpVsDown ?? true)
                    {
                        fg.AppendItem(LipsUpVsDown, "LipsUpVsDown");
                    }
                    if (printMask?.LipsInVsOut ?? true)
                    {
                        fg.AppendItem(LipsInVsOut, "LipsInVsOut");
                    }
                    if (printMask?.ChinNarrowVsWide ?? true)
                    {
                        fg.AppendItem(ChinNarrowVsWide, "ChinNarrowVsWide");
                    }
                    if (printMask?.ChinUpVsDown ?? true)
                    {
                        fg.AppendItem(ChinUpVsDown, "ChinUpVsDown");
                    }
                    if (printMask?.ChinUnderbiteVsOverbite ?? true)
                    {
                        fg.AppendItem(ChinUnderbiteVsOverbite, "ChinUnderbiteVsOverbite");
                    }
                    if (printMask?.EyesForwardVsBack ?? true)
                    {
                        fg.AppendItem(EyesForwardVsBack, "EyesForwardVsBack");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? NoseLongVsShort;
            public Exception? NoseUpVsDown;
            public Exception? JawUpVsDown;
            public Exception? JawNarrowVsWide;
            public Exception? JawForwardVsBack;
            public Exception? CheeksUpVsDown;
            public Exception? CheeksForwardVsBack;
            public Exception? EyesUpVsDown;
            public Exception? EyesInVsOut;
            public Exception? BrowsUpVsDown;
            public Exception? BrowsInVsOut;
            public Exception? BrowsForwardVsBack;
            public Exception? LipsUpVsDown;
            public Exception? LipsInVsOut;
            public Exception? ChinNarrowVsWide;
            public Exception? ChinUpVsDown;
            public Exception? ChinUnderbiteVsOverbite;
            public Exception? EyesForwardVsBack;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcFaceMorph_FieldIndex enu = (NpcFaceMorph_FieldIndex)index;
                switch (enu)
                {
                    case NpcFaceMorph_FieldIndex.NoseLongVsShort:
                        return NoseLongVsShort;
                    case NpcFaceMorph_FieldIndex.NoseUpVsDown:
                        return NoseUpVsDown;
                    case NpcFaceMorph_FieldIndex.JawUpVsDown:
                        return JawUpVsDown;
                    case NpcFaceMorph_FieldIndex.JawNarrowVsWide:
                        return JawNarrowVsWide;
                    case NpcFaceMorph_FieldIndex.JawForwardVsBack:
                        return JawForwardVsBack;
                    case NpcFaceMorph_FieldIndex.CheeksUpVsDown:
                        return CheeksUpVsDown;
                    case NpcFaceMorph_FieldIndex.CheeksForwardVsBack:
                        return CheeksForwardVsBack;
                    case NpcFaceMorph_FieldIndex.EyesUpVsDown:
                        return EyesUpVsDown;
                    case NpcFaceMorph_FieldIndex.EyesInVsOut:
                        return EyesInVsOut;
                    case NpcFaceMorph_FieldIndex.BrowsUpVsDown:
                        return BrowsUpVsDown;
                    case NpcFaceMorph_FieldIndex.BrowsInVsOut:
                        return BrowsInVsOut;
                    case NpcFaceMorph_FieldIndex.BrowsForwardVsBack:
                        return BrowsForwardVsBack;
                    case NpcFaceMorph_FieldIndex.LipsUpVsDown:
                        return LipsUpVsDown;
                    case NpcFaceMorph_FieldIndex.LipsInVsOut:
                        return LipsInVsOut;
                    case NpcFaceMorph_FieldIndex.ChinNarrowVsWide:
                        return ChinNarrowVsWide;
                    case NpcFaceMorph_FieldIndex.ChinUpVsDown:
                        return ChinUpVsDown;
                    case NpcFaceMorph_FieldIndex.ChinUnderbiteVsOverbite:
                        return ChinUnderbiteVsOverbite;
                    case NpcFaceMorph_FieldIndex.EyesForwardVsBack:
                        return EyesForwardVsBack;
                    case NpcFaceMorph_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcFaceMorph_FieldIndex enu = (NpcFaceMorph_FieldIndex)index;
                switch (enu)
                {
                    case NpcFaceMorph_FieldIndex.NoseLongVsShort:
                        this.NoseLongVsShort = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.NoseUpVsDown:
                        this.NoseUpVsDown = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.JawUpVsDown:
                        this.JawUpVsDown = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.JawNarrowVsWide:
                        this.JawNarrowVsWide = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.JawForwardVsBack:
                        this.JawForwardVsBack = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.CheeksUpVsDown:
                        this.CheeksUpVsDown = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.CheeksForwardVsBack:
                        this.CheeksForwardVsBack = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.EyesUpVsDown:
                        this.EyesUpVsDown = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.EyesInVsOut:
                        this.EyesInVsOut = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.BrowsUpVsDown:
                        this.BrowsUpVsDown = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.BrowsInVsOut:
                        this.BrowsInVsOut = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.BrowsForwardVsBack:
                        this.BrowsForwardVsBack = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.LipsUpVsDown:
                        this.LipsUpVsDown = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.LipsInVsOut:
                        this.LipsInVsOut = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.ChinNarrowVsWide:
                        this.ChinNarrowVsWide = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.ChinUpVsDown:
                        this.ChinUpVsDown = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.ChinUnderbiteVsOverbite:
                        this.ChinUnderbiteVsOverbite = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.EyesForwardVsBack:
                        this.EyesForwardVsBack = ex;
                        break;
                    case NpcFaceMorph_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcFaceMorph_FieldIndex enu = (NpcFaceMorph_FieldIndex)index;
                switch (enu)
                {
                    case NpcFaceMorph_FieldIndex.NoseLongVsShort:
                        this.NoseLongVsShort = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.NoseUpVsDown:
                        this.NoseUpVsDown = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.JawUpVsDown:
                        this.JawUpVsDown = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.JawNarrowVsWide:
                        this.JawNarrowVsWide = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.JawForwardVsBack:
                        this.JawForwardVsBack = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.CheeksUpVsDown:
                        this.CheeksUpVsDown = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.CheeksForwardVsBack:
                        this.CheeksForwardVsBack = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.EyesUpVsDown:
                        this.EyesUpVsDown = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.EyesInVsOut:
                        this.EyesInVsOut = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.BrowsUpVsDown:
                        this.BrowsUpVsDown = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.BrowsInVsOut:
                        this.BrowsInVsOut = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.BrowsForwardVsBack:
                        this.BrowsForwardVsBack = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.LipsUpVsDown:
                        this.LipsUpVsDown = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.LipsInVsOut:
                        this.LipsInVsOut = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.ChinNarrowVsWide:
                        this.ChinNarrowVsWide = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.ChinUpVsDown:
                        this.ChinUpVsDown = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.ChinUnderbiteVsOverbite:
                        this.ChinUnderbiteVsOverbite = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.EyesForwardVsBack:
                        this.EyesForwardVsBack = (Exception?)obj;
                        break;
                    case NpcFaceMorph_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NoseLongVsShort != null) return true;
                if (NoseUpVsDown != null) return true;
                if (JawUpVsDown != null) return true;
                if (JawNarrowVsWide != null) return true;
                if (JawForwardVsBack != null) return true;
                if (CheeksUpVsDown != null) return true;
                if (CheeksForwardVsBack != null) return true;
                if (EyesUpVsDown != null) return true;
                if (EyesInVsOut != null) return true;
                if (BrowsUpVsDown != null) return true;
                if (BrowsInVsOut != null) return true;
                if (BrowsForwardVsBack != null) return true;
                if (LipsUpVsDown != null) return true;
                if (LipsInVsOut != null) return true;
                if (ChinNarrowVsWide != null) return true;
                if (ChinUpVsDown != null) return true;
                if (ChinUnderbiteVsOverbite != null) return true;
                if (EyesForwardVsBack != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(NoseLongVsShort, "NoseLongVsShort");
                fg.AppendItem(NoseUpVsDown, "NoseUpVsDown");
                fg.AppendItem(JawUpVsDown, "JawUpVsDown");
                fg.AppendItem(JawNarrowVsWide, "JawNarrowVsWide");
                fg.AppendItem(JawForwardVsBack, "JawForwardVsBack");
                fg.AppendItem(CheeksUpVsDown, "CheeksUpVsDown");
                fg.AppendItem(CheeksForwardVsBack, "CheeksForwardVsBack");
                fg.AppendItem(EyesUpVsDown, "EyesUpVsDown");
                fg.AppendItem(EyesInVsOut, "EyesInVsOut");
                fg.AppendItem(BrowsUpVsDown, "BrowsUpVsDown");
                fg.AppendItem(BrowsInVsOut, "BrowsInVsOut");
                fg.AppendItem(BrowsForwardVsBack, "BrowsForwardVsBack");
                fg.AppendItem(LipsUpVsDown, "LipsUpVsDown");
                fg.AppendItem(LipsInVsOut, "LipsInVsOut");
                fg.AppendItem(ChinNarrowVsWide, "ChinNarrowVsWide");
                fg.AppendItem(ChinUpVsDown, "ChinUpVsDown");
                fg.AppendItem(ChinUnderbiteVsOverbite, "ChinUnderbiteVsOverbite");
                fg.AppendItem(EyesForwardVsBack, "EyesForwardVsBack");
                fg.AppendItem(Unknown, "Unknown");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NoseLongVsShort = this.NoseLongVsShort.Combine(rhs.NoseLongVsShort);
                ret.NoseUpVsDown = this.NoseUpVsDown.Combine(rhs.NoseUpVsDown);
                ret.JawUpVsDown = this.JawUpVsDown.Combine(rhs.JawUpVsDown);
                ret.JawNarrowVsWide = this.JawNarrowVsWide.Combine(rhs.JawNarrowVsWide);
                ret.JawForwardVsBack = this.JawForwardVsBack.Combine(rhs.JawForwardVsBack);
                ret.CheeksUpVsDown = this.CheeksUpVsDown.Combine(rhs.CheeksUpVsDown);
                ret.CheeksForwardVsBack = this.CheeksForwardVsBack.Combine(rhs.CheeksForwardVsBack);
                ret.EyesUpVsDown = this.EyesUpVsDown.Combine(rhs.EyesUpVsDown);
                ret.EyesInVsOut = this.EyesInVsOut.Combine(rhs.EyesInVsOut);
                ret.BrowsUpVsDown = this.BrowsUpVsDown.Combine(rhs.BrowsUpVsDown);
                ret.BrowsInVsOut = this.BrowsInVsOut.Combine(rhs.BrowsInVsOut);
                ret.BrowsForwardVsBack = this.BrowsForwardVsBack.Combine(rhs.BrowsForwardVsBack);
                ret.LipsUpVsDown = this.LipsUpVsDown.Combine(rhs.LipsUpVsDown);
                ret.LipsInVsOut = this.LipsInVsOut.Combine(rhs.LipsInVsOut);
                ret.ChinNarrowVsWide = this.ChinNarrowVsWide.Combine(rhs.ChinNarrowVsWide);
                ret.ChinUpVsDown = this.ChinUpVsDown.Combine(rhs.ChinUpVsDown);
                ret.ChinUnderbiteVsOverbite = this.ChinUnderbiteVsOverbite.Combine(rhs.ChinUnderbiteVsOverbite);
                ret.EyesForwardVsBack = this.EyesForwardVsBack.Combine(rhs.EyesForwardVsBack);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool NoseLongVsShort;
            public bool NoseUpVsDown;
            public bool JawUpVsDown;
            public bool JawNarrowVsWide;
            public bool JawForwardVsBack;
            public bool CheeksUpVsDown;
            public bool CheeksForwardVsBack;
            public bool EyesUpVsDown;
            public bool EyesInVsOut;
            public bool BrowsUpVsDown;
            public bool BrowsInVsOut;
            public bool BrowsForwardVsBack;
            public bool LipsUpVsDown;
            public bool LipsInVsOut;
            public bool ChinNarrowVsWide;
            public bool ChinUpVsDown;
            public bool ChinUnderbiteVsOverbite;
            public bool EyesForwardVsBack;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.NoseLongVsShort = defaultOn;
                this.NoseUpVsDown = defaultOn;
                this.JawUpVsDown = defaultOn;
                this.JawNarrowVsWide = defaultOn;
                this.JawForwardVsBack = defaultOn;
                this.CheeksUpVsDown = defaultOn;
                this.CheeksForwardVsBack = defaultOn;
                this.EyesUpVsDown = defaultOn;
                this.EyesInVsOut = defaultOn;
                this.BrowsUpVsDown = defaultOn;
                this.BrowsInVsOut = defaultOn;
                this.BrowsForwardVsBack = defaultOn;
                this.LipsUpVsDown = defaultOn;
                this.LipsInVsOut = defaultOn;
                this.ChinNarrowVsWide = defaultOn;
                this.ChinUpVsDown = defaultOn;
                this.ChinUnderbiteVsOverbite = defaultOn;
                this.EyesForwardVsBack = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NoseLongVsShort, null));
                ret.Add((NoseUpVsDown, null));
                ret.Add((JawUpVsDown, null));
                ret.Add((JawNarrowVsWide, null));
                ret.Add((JawForwardVsBack, null));
                ret.Add((CheeksUpVsDown, null));
                ret.Add((CheeksForwardVsBack, null));
                ret.Add((EyesUpVsDown, null));
                ret.Add((EyesInVsOut, null));
                ret.Add((BrowsUpVsDown, null));
                ret.Add((BrowsInVsOut, null));
                ret.Add((BrowsForwardVsBack, null));
                ret.Add((LipsUpVsDown, null));
                ret.Add((LipsInVsOut, null));
                ret.Add((ChinNarrowVsWide, null));
                ret.Add((ChinUpVsDown, null));
                ret.Add((ChinUnderbiteVsOverbite, null));
                ret.Add((EyesForwardVsBack, null));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = NpcFaceMorph_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcFaceMorphBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcFaceMorphBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static NpcFaceMorph CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NpcFaceMorph();
            ((NpcFaceMorphSetterCommon)((INpcFaceMorphGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcFaceMorph item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((NpcFaceMorphSetterCommon)((INpcFaceMorphGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcFaceMorph GetNew()
        {
            return new NpcFaceMorph();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcFaceMorph :
        INpcFaceMorphGetter,
        ILoquiObjectSetter<INpcFaceMorph>
    {
        new Single NoseLongVsShort { get; set; }
        new Single NoseUpVsDown { get; set; }
        new Single JawUpVsDown { get; set; }
        new Single JawNarrowVsWide { get; set; }
        new Single JawForwardVsBack { get; set; }
        new Single CheeksUpVsDown { get; set; }
        new Single CheeksForwardVsBack { get; set; }
        new Single EyesUpVsDown { get; set; }
        new Single EyesInVsOut { get; set; }
        new Single BrowsUpVsDown { get; set; }
        new Single BrowsInVsOut { get; set; }
        new Single BrowsForwardVsBack { get; set; }
        new Single LipsUpVsDown { get; set; }
        new Single LipsInVsOut { get; set; }
        new Single ChinNarrowVsWide { get; set; }
        new Single ChinUpVsDown { get; set; }
        new Single ChinUnderbiteVsOverbite { get; set; }
        new Single EyesForwardVsBack { get; set; }
        new Single Unknown { get; set; }
    }

    public partial interface INpcFaceMorphGetter :
        ILoquiObject,
        ILoquiObject<INpcFaceMorphGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => NpcFaceMorph_Registration.Instance;
        Single NoseLongVsShort { get; }
        Single NoseUpVsDown { get; }
        Single JawUpVsDown { get; }
        Single JawNarrowVsWide { get; }
        Single JawForwardVsBack { get; }
        Single CheeksUpVsDown { get; }
        Single CheeksForwardVsBack { get; }
        Single EyesUpVsDown { get; }
        Single EyesInVsOut { get; }
        Single BrowsUpVsDown { get; }
        Single BrowsInVsOut { get; }
        Single BrowsForwardVsBack { get; }
        Single LipsUpVsDown { get; }
        Single LipsInVsOut { get; }
        Single ChinNarrowVsWide { get; }
        Single ChinUpVsDown { get; }
        Single ChinUnderbiteVsOverbite { get; }
        Single EyesForwardVsBack { get; }
        Single Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcFaceMorphMixIn
    {
        public static void Clear(this INpcFaceMorph item)
        {
            ((NpcFaceMorphSetterCommon)((INpcFaceMorphGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcFaceMorph.Mask<bool> GetEqualsMask(
            this INpcFaceMorphGetter item,
            INpcFaceMorphGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INpcFaceMorphGetter item,
            string? name = null,
            NpcFaceMorph.Mask<bool>? printMask = null)
        {
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INpcFaceMorphGetter item,
            FileGeneration fg,
            string? name = null,
            NpcFaceMorph.Mask<bool>? printMask = null)
        {
            ((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcFaceMorphGetter item,
            INpcFaceMorphGetter rhs)
        {
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this INpcFaceMorph lhs,
            INpcFaceMorphGetter rhs)
        {
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcFaceMorph lhs,
            INpcFaceMorphGetter rhs,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INpcFaceMorph lhs,
            INpcFaceMorphGetter rhs,
            out NpcFaceMorph.ErrorMask errorMask,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcFaceMorph.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcFaceMorph lhs,
            INpcFaceMorphGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcFaceMorph DeepCopy(
            this INpcFaceMorphGetter item,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            return ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcFaceMorph DeepCopy(
            this INpcFaceMorphGetter item,
            out NpcFaceMorph.ErrorMask errorMask,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            return ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcFaceMorph DeepCopy(
            this INpcFaceMorphGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcFaceMorph item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcFaceMorphSetterCommon)((INpcFaceMorphGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum NpcFaceMorph_FieldIndex
    {
        NoseLongVsShort = 0,
        NoseUpVsDown = 1,
        JawUpVsDown = 2,
        JawNarrowVsWide = 3,
        JawForwardVsBack = 4,
        CheeksUpVsDown = 5,
        CheeksForwardVsBack = 6,
        EyesUpVsDown = 7,
        EyesInVsOut = 8,
        BrowsUpVsDown = 9,
        BrowsInVsOut = 10,
        BrowsForwardVsBack = 11,
        LipsUpVsDown = 12,
        LipsInVsOut = 13,
        ChinNarrowVsWide = 14,
        ChinUpVsDown = 15,
        ChinUnderbiteVsOverbite = 16,
        EyesForwardVsBack = 17,
        Unknown = 18,
    }
    #endregion

    #region Registration
    public partial class NpcFaceMorph_Registration : ILoquiRegistration
    {
        public static readonly NpcFaceMorph_Registration Instance = new NpcFaceMorph_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 216,
            version: 0);

        public const string GUID = "914508a1-6dea-4c9c-937e-de17e8bfc18c";

        public const ushort AdditionalFieldCount = 19;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(NpcFaceMorph.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcFaceMorph.ErrorMask);

        public static readonly Type ClassType = typeof(NpcFaceMorph);

        public static readonly Type GetterType = typeof(INpcFaceMorphGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcFaceMorph);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.NpcFaceMorph";

        public const string Name = "NpcFaceMorph";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAM9;
        public static readonly Type BinaryWriteTranslation = typeof(NpcFaceMorphBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class NpcFaceMorphSetterCommon
    {
        public static readonly NpcFaceMorphSetterCommon Instance = new NpcFaceMorphSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcFaceMorph item)
        {
            ClearPartial();
            item.NoseLongVsShort = default;
            item.NoseUpVsDown = default;
            item.JawUpVsDown = default;
            item.JawNarrowVsWide = default;
            item.JawForwardVsBack = default;
            item.CheeksUpVsDown = default;
            item.CheeksForwardVsBack = default;
            item.EyesUpVsDown = default;
            item.EyesInVsOut = default;
            item.BrowsUpVsDown = default;
            item.BrowsInVsOut = default;
            item.BrowsForwardVsBack = default;
            item.LipsUpVsDown = default;
            item.LipsInVsOut = default;
            item.ChinNarrowVsWide = default;
            item.ChinUpVsDown = default;
            item.ChinUnderbiteVsOverbite = default;
            item.EyesForwardVsBack = default;
            item.Unknown = default;
        }
        
        #region Mutagen
        public void RemapLinks(INpcFaceMorph obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcFaceMorph item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.NAM9)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: NpcFaceMorphBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class NpcFaceMorphCommon
    {
        public static readonly NpcFaceMorphCommon Instance = new NpcFaceMorphCommon();

        public NpcFaceMorph.Mask<bool> GetEqualsMask(
            INpcFaceMorphGetter item,
            INpcFaceMorphGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcFaceMorph.Mask<bool>(false);
            ((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcFaceMorphGetter item,
            INpcFaceMorphGetter rhs,
            NpcFaceMorph.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.NoseLongVsShort = item.NoseLongVsShort.EqualsWithin(rhs.NoseLongVsShort);
            ret.NoseUpVsDown = item.NoseUpVsDown.EqualsWithin(rhs.NoseUpVsDown);
            ret.JawUpVsDown = item.JawUpVsDown.EqualsWithin(rhs.JawUpVsDown);
            ret.JawNarrowVsWide = item.JawNarrowVsWide.EqualsWithin(rhs.JawNarrowVsWide);
            ret.JawForwardVsBack = item.JawForwardVsBack.EqualsWithin(rhs.JawForwardVsBack);
            ret.CheeksUpVsDown = item.CheeksUpVsDown.EqualsWithin(rhs.CheeksUpVsDown);
            ret.CheeksForwardVsBack = item.CheeksForwardVsBack.EqualsWithin(rhs.CheeksForwardVsBack);
            ret.EyesUpVsDown = item.EyesUpVsDown.EqualsWithin(rhs.EyesUpVsDown);
            ret.EyesInVsOut = item.EyesInVsOut.EqualsWithin(rhs.EyesInVsOut);
            ret.BrowsUpVsDown = item.BrowsUpVsDown.EqualsWithin(rhs.BrowsUpVsDown);
            ret.BrowsInVsOut = item.BrowsInVsOut.EqualsWithin(rhs.BrowsInVsOut);
            ret.BrowsForwardVsBack = item.BrowsForwardVsBack.EqualsWithin(rhs.BrowsForwardVsBack);
            ret.LipsUpVsDown = item.LipsUpVsDown.EqualsWithin(rhs.LipsUpVsDown);
            ret.LipsInVsOut = item.LipsInVsOut.EqualsWithin(rhs.LipsInVsOut);
            ret.ChinNarrowVsWide = item.ChinNarrowVsWide.EqualsWithin(rhs.ChinNarrowVsWide);
            ret.ChinUpVsDown = item.ChinUpVsDown.EqualsWithin(rhs.ChinUpVsDown);
            ret.ChinUnderbiteVsOverbite = item.ChinUnderbiteVsOverbite.EqualsWithin(rhs.ChinUnderbiteVsOverbite);
            ret.EyesForwardVsBack = item.EyesForwardVsBack.EqualsWithin(rhs.EyesForwardVsBack);
            ret.Unknown = item.Unknown.EqualsWithin(rhs.Unknown);
        }
        
        public string ToString(
            INpcFaceMorphGetter item,
            string? name = null,
            NpcFaceMorph.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INpcFaceMorphGetter item,
            FileGeneration fg,
            string? name = null,
            NpcFaceMorph.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NpcFaceMorph =>");
            }
            else
            {
                fg.AppendLine($"{name} (NpcFaceMorph) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INpcFaceMorphGetter item,
            FileGeneration fg,
            NpcFaceMorph.Mask<bool>? printMask = null)
        {
            if (printMask?.NoseLongVsShort ?? true)
            {
                fg.AppendItem(item.NoseLongVsShort, "NoseLongVsShort");
            }
            if (printMask?.NoseUpVsDown ?? true)
            {
                fg.AppendItem(item.NoseUpVsDown, "NoseUpVsDown");
            }
            if (printMask?.JawUpVsDown ?? true)
            {
                fg.AppendItem(item.JawUpVsDown, "JawUpVsDown");
            }
            if (printMask?.JawNarrowVsWide ?? true)
            {
                fg.AppendItem(item.JawNarrowVsWide, "JawNarrowVsWide");
            }
            if (printMask?.JawForwardVsBack ?? true)
            {
                fg.AppendItem(item.JawForwardVsBack, "JawForwardVsBack");
            }
            if (printMask?.CheeksUpVsDown ?? true)
            {
                fg.AppendItem(item.CheeksUpVsDown, "CheeksUpVsDown");
            }
            if (printMask?.CheeksForwardVsBack ?? true)
            {
                fg.AppendItem(item.CheeksForwardVsBack, "CheeksForwardVsBack");
            }
            if (printMask?.EyesUpVsDown ?? true)
            {
                fg.AppendItem(item.EyesUpVsDown, "EyesUpVsDown");
            }
            if (printMask?.EyesInVsOut ?? true)
            {
                fg.AppendItem(item.EyesInVsOut, "EyesInVsOut");
            }
            if (printMask?.BrowsUpVsDown ?? true)
            {
                fg.AppendItem(item.BrowsUpVsDown, "BrowsUpVsDown");
            }
            if (printMask?.BrowsInVsOut ?? true)
            {
                fg.AppendItem(item.BrowsInVsOut, "BrowsInVsOut");
            }
            if (printMask?.BrowsForwardVsBack ?? true)
            {
                fg.AppendItem(item.BrowsForwardVsBack, "BrowsForwardVsBack");
            }
            if (printMask?.LipsUpVsDown ?? true)
            {
                fg.AppendItem(item.LipsUpVsDown, "LipsUpVsDown");
            }
            if (printMask?.LipsInVsOut ?? true)
            {
                fg.AppendItem(item.LipsInVsOut, "LipsInVsOut");
            }
            if (printMask?.ChinNarrowVsWide ?? true)
            {
                fg.AppendItem(item.ChinNarrowVsWide, "ChinNarrowVsWide");
            }
            if (printMask?.ChinUpVsDown ?? true)
            {
                fg.AppendItem(item.ChinUpVsDown, "ChinUpVsDown");
            }
            if (printMask?.ChinUnderbiteVsOverbite ?? true)
            {
                fg.AppendItem(item.ChinUnderbiteVsOverbite, "ChinUnderbiteVsOverbite");
            }
            if (printMask?.EyesForwardVsBack ?? true)
            {
                fg.AppendItem(item.EyesForwardVsBack, "EyesForwardVsBack");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcFaceMorphGetter? lhs,
            INpcFaceMorphGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.NoseLongVsShort.EqualsWithin(rhs.NoseLongVsShort)) return false;
            if (!lhs.NoseUpVsDown.EqualsWithin(rhs.NoseUpVsDown)) return false;
            if (!lhs.JawUpVsDown.EqualsWithin(rhs.JawUpVsDown)) return false;
            if (!lhs.JawNarrowVsWide.EqualsWithin(rhs.JawNarrowVsWide)) return false;
            if (!lhs.JawForwardVsBack.EqualsWithin(rhs.JawForwardVsBack)) return false;
            if (!lhs.CheeksUpVsDown.EqualsWithin(rhs.CheeksUpVsDown)) return false;
            if (!lhs.CheeksForwardVsBack.EqualsWithin(rhs.CheeksForwardVsBack)) return false;
            if (!lhs.EyesUpVsDown.EqualsWithin(rhs.EyesUpVsDown)) return false;
            if (!lhs.EyesInVsOut.EqualsWithin(rhs.EyesInVsOut)) return false;
            if (!lhs.BrowsUpVsDown.EqualsWithin(rhs.BrowsUpVsDown)) return false;
            if (!lhs.BrowsInVsOut.EqualsWithin(rhs.BrowsInVsOut)) return false;
            if (!lhs.BrowsForwardVsBack.EqualsWithin(rhs.BrowsForwardVsBack)) return false;
            if (!lhs.LipsUpVsDown.EqualsWithin(rhs.LipsUpVsDown)) return false;
            if (!lhs.LipsInVsOut.EqualsWithin(rhs.LipsInVsOut)) return false;
            if (!lhs.ChinNarrowVsWide.EqualsWithin(rhs.ChinNarrowVsWide)) return false;
            if (!lhs.ChinUpVsDown.EqualsWithin(rhs.ChinUpVsDown)) return false;
            if (!lhs.ChinUnderbiteVsOverbite.EqualsWithin(rhs.ChinUnderbiteVsOverbite)) return false;
            if (!lhs.EyesForwardVsBack.EqualsWithin(rhs.EyesForwardVsBack)) return false;
            if (!lhs.Unknown.EqualsWithin(rhs.Unknown)) return false;
            return true;
        }
        
        public virtual int GetHashCode(INpcFaceMorphGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.NoseLongVsShort);
            hash.Add(item.NoseUpVsDown);
            hash.Add(item.JawUpVsDown);
            hash.Add(item.JawNarrowVsWide);
            hash.Add(item.JawForwardVsBack);
            hash.Add(item.CheeksUpVsDown);
            hash.Add(item.CheeksForwardVsBack);
            hash.Add(item.EyesUpVsDown);
            hash.Add(item.EyesInVsOut);
            hash.Add(item.BrowsUpVsDown);
            hash.Add(item.BrowsInVsOut);
            hash.Add(item.BrowsForwardVsBack);
            hash.Add(item.LipsUpVsDown);
            hash.Add(item.LipsInVsOut);
            hash.Add(item.ChinNarrowVsWide);
            hash.Add(item.ChinUpVsDown);
            hash.Add(item.ChinUnderbiteVsOverbite);
            hash.Add(item.EyesForwardVsBack);
            hash.Add(item.Unknown);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcFaceMorph.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(INpcFaceMorphGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class NpcFaceMorphSetterTranslationCommon
    {
        public static readonly NpcFaceMorphSetterTranslationCommon Instance = new NpcFaceMorphSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcFaceMorph item,
            INpcFaceMorphGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.NoseLongVsShort) ?? true))
            {
                item.NoseLongVsShort = rhs.NoseLongVsShort;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.NoseUpVsDown) ?? true))
            {
                item.NoseUpVsDown = rhs.NoseUpVsDown;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.JawUpVsDown) ?? true))
            {
                item.JawUpVsDown = rhs.JawUpVsDown;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.JawNarrowVsWide) ?? true))
            {
                item.JawNarrowVsWide = rhs.JawNarrowVsWide;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.JawForwardVsBack) ?? true))
            {
                item.JawForwardVsBack = rhs.JawForwardVsBack;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.CheeksUpVsDown) ?? true))
            {
                item.CheeksUpVsDown = rhs.CheeksUpVsDown;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.CheeksForwardVsBack) ?? true))
            {
                item.CheeksForwardVsBack = rhs.CheeksForwardVsBack;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.EyesUpVsDown) ?? true))
            {
                item.EyesUpVsDown = rhs.EyesUpVsDown;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.EyesInVsOut) ?? true))
            {
                item.EyesInVsOut = rhs.EyesInVsOut;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.BrowsUpVsDown) ?? true))
            {
                item.BrowsUpVsDown = rhs.BrowsUpVsDown;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.BrowsInVsOut) ?? true))
            {
                item.BrowsInVsOut = rhs.BrowsInVsOut;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.BrowsForwardVsBack) ?? true))
            {
                item.BrowsForwardVsBack = rhs.BrowsForwardVsBack;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.LipsUpVsDown) ?? true))
            {
                item.LipsUpVsDown = rhs.LipsUpVsDown;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.LipsInVsOut) ?? true))
            {
                item.LipsInVsOut = rhs.LipsInVsOut;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.ChinNarrowVsWide) ?? true))
            {
                item.ChinNarrowVsWide = rhs.ChinNarrowVsWide;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.ChinUpVsDown) ?? true))
            {
                item.ChinUpVsDown = rhs.ChinUpVsDown;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.ChinUnderbiteVsOverbite) ?? true))
            {
                item.ChinUnderbiteVsOverbite = rhs.ChinUnderbiteVsOverbite;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.EyesForwardVsBack) ?? true))
            {
                item.EyesForwardVsBack = rhs.EyesForwardVsBack;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcFaceMorph_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
        }
        
        #endregion
        
        public NpcFaceMorph DeepCopy(
            INpcFaceMorphGetter item,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            NpcFaceMorph ret = (NpcFaceMorph)((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).GetNew();
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcFaceMorph DeepCopy(
            INpcFaceMorphGetter item,
            out NpcFaceMorph.ErrorMask errorMask,
            NpcFaceMorph.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcFaceMorph ret = (NpcFaceMorph)((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).GetNew();
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcFaceMorph.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcFaceMorph DeepCopy(
            INpcFaceMorphGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcFaceMorph ret = (NpcFaceMorph)((NpcFaceMorphCommon)((INpcFaceMorphGetter)item).CommonInstance()!).GetNew();
            ((NpcFaceMorphSetterTranslationCommon)((INpcFaceMorphGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class NpcFaceMorph
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcFaceMorph_Registration.Instance;
        public static NpcFaceMorph_Registration Registration => NpcFaceMorph_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcFaceMorphCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcFaceMorphSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcFaceMorphSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcFaceMorphGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcFaceMorphGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcFaceMorphGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NpcFaceMorphBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static NpcFaceMorphBinaryWriteTranslation Instance = new NpcFaceMorphBinaryWriteTranslation();

        public static void WriteEmbedded(
            INpcFaceMorphGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NoseLongVsShort);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NoseUpVsDown);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.JawUpVsDown);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.JawNarrowVsWide);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.JawForwardVsBack);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CheeksUpVsDown);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CheeksForwardVsBack);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EyesUpVsDown);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EyesInVsOut);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BrowsUpVsDown);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BrowsInVsOut);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BrowsForwardVsBack);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LipsUpVsDown);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LipsInVsOut);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ChinNarrowVsWide);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ChinUpVsDown);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ChinUnderbiteVsOverbite);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EyesForwardVsBack);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown);
        }

        public void Write(
            MutagenWriter writer,
            INpcFaceMorphGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.NAM9),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcFaceMorphGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class NpcFaceMorphBinaryCreateTranslation
    {
        public readonly static NpcFaceMorphBinaryCreateTranslation Instance = new NpcFaceMorphBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INpcFaceMorph item,
            MutagenFrame frame)
        {
            item.NoseLongVsShort = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.NoseUpVsDown = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.JawUpVsDown = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.JawNarrowVsWide = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.JawForwardVsBack = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.CheeksUpVsDown = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.CheeksForwardVsBack = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EyesUpVsDown = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EyesInVsOut = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BrowsUpVsDown = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BrowsInVsOut = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BrowsForwardVsBack = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.LipsUpVsDown = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.LipsInVsOut = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ChinNarrowVsWide = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ChinUpVsDown = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ChinUnderbiteVsOverbite = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EyesForwardVsBack = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Unknown = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NpcFaceMorphBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcFaceMorphGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcFaceMorphBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NpcFaceMorphBinaryOverlay :
        BinaryOverlay,
        INpcFaceMorphGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcFaceMorph_Registration.Instance;
        public static NpcFaceMorph_Registration Registration => NpcFaceMorph_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcFaceMorphCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcFaceMorphSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcFaceMorphGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcFaceMorphGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcFaceMorphGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcFaceMorphBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcFaceMorphBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Single NoseLongVsShort => _data.Slice(0x0, 0x4).Float();
        public Single NoseUpVsDown => _data.Slice(0x4, 0x4).Float();
        public Single JawUpVsDown => _data.Slice(0x8, 0x4).Float();
        public Single JawNarrowVsWide => _data.Slice(0xC, 0x4).Float();
        public Single JawForwardVsBack => _data.Slice(0x10, 0x4).Float();
        public Single CheeksUpVsDown => _data.Slice(0x14, 0x4).Float();
        public Single CheeksForwardVsBack => _data.Slice(0x18, 0x4).Float();
        public Single EyesUpVsDown => _data.Slice(0x1C, 0x4).Float();
        public Single EyesInVsOut => _data.Slice(0x20, 0x4).Float();
        public Single BrowsUpVsDown => _data.Slice(0x24, 0x4).Float();
        public Single BrowsInVsOut => _data.Slice(0x28, 0x4).Float();
        public Single BrowsForwardVsBack => _data.Slice(0x2C, 0x4).Float();
        public Single LipsUpVsDown => _data.Slice(0x30, 0x4).Float();
        public Single LipsInVsOut => _data.Slice(0x34, 0x4).Float();
        public Single ChinNarrowVsWide => _data.Slice(0x38, 0x4).Float();
        public Single ChinUpVsDown => _data.Slice(0x3C, 0x4).Float();
        public Single ChinUnderbiteVsOverbite => _data.Slice(0x40, 0x4).Float();
        public Single EyesForwardVsBack => _data.Slice(0x44, 0x4).Float();
        public Single Unknown => _data.Slice(0x48, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcFaceMorphBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static NpcFaceMorphBinaryOverlay NpcFaceMorphFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NpcFaceMorphBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x4C + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static NpcFaceMorphBinaryOverlay NpcFaceMorphFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return NpcFaceMorphFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcFaceMorphMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INpcFaceMorphGetter rhs)) return false;
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INpcFaceMorphGetter? obj)
        {
            return ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NpcFaceMorphCommon)((INpcFaceMorphGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

