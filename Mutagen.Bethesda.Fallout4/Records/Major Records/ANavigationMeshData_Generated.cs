/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    /// <summary>
    /// Implemented by: [WorldspaceNavigationMeshData, CellNavigationMeshData]
    /// </summary>
    public abstract partial class ANavigationMeshData :
        IANavigationMeshData,
        ILoquiObjectSetter<ANavigationMeshData>,
        IEquatable<IANavigationMeshDataGetter>
    {
        #region Ctor
        public ANavigationMeshData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NavmeshVersion
        public readonly static UInt32 _NavmeshVersion_Default = 12;
        public UInt32 NavmeshVersion { get; set; } = _NavmeshVersion_Default;
        #endregion
        #region Magic
        public readonly static UInt32 _Magic_Default = 0xA5E9A03C;
        public UInt32 Magic { get; set; } = _Magic_Default;
        #endregion
        #region Vertices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<P3Float> _Vertices = new ExtendedList<P3Float>();
        public ExtendedList<P3Float> Vertices
        {
            get => this._Vertices;
            protected set => this._Vertices = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<P3Float> IANavigationMeshDataGetter.Vertices => _Vertices;
        #endregion

        #endregion
        #region Triangles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NavmeshTriangle> _Triangles = new ExtendedList<NavmeshTriangle>();
        public ExtendedList<NavmeshTriangle> Triangles
        {
            get => this._Triangles;
            protected set => this._Triangles = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INavmeshTriangleGetter> IANavigationMeshDataGetter.Triangles => _Triangles;
        #endregion

        #endregion
        #region EdgeLinks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<EdgeLink> _EdgeLinks = new ExtendedList<EdgeLink>();
        public ExtendedList<EdgeLink> EdgeLinks
        {
            get => this._EdgeLinks;
            protected set => this._EdgeLinks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEdgeLinkGetter> IANavigationMeshDataGetter.EdgeLinks => _EdgeLinks;
        #endregion

        #endregion
        #region DoorTriangles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DoorTriangle> _DoorTriangles = new ExtendedList<DoorTriangle>();
        public ExtendedList<DoorTriangle> DoorTriangles
        {
            get => this._DoorTriangles;
            protected set => this._DoorTriangles = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDoorTriangleGetter> IANavigationMeshDataGetter.DoorTriangles => _DoorTriangles;
        #endregion

        #endregion
        #region NavmeshGridDivisor
        public UInt32 NavmeshGridDivisor { get; set; } = default;
        #endregion
        #region MaxDistanceX
        public Single MaxDistanceX { get; set; } = default;
        #endregion
        #region MaxDistanceY
        public Single MaxDistanceY { get; set; } = default;
        #endregion
        #region Min
        public P3Float Min { get; set; } = default;
        #endregion
        #region Max
        public P3Float Max { get; set; } = default;
        #endregion
        #region NavmeshGrid
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _NavmeshGrid = new byte[0];
        public MemorySlice<Byte> NavmeshGrid
        {
            get => _NavmeshGrid;
            set => this._NavmeshGrid = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IANavigationMeshDataGetter.NavmeshGrid => this.NavmeshGrid;
        #endregion

        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ANavigationMeshDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IANavigationMeshDataGetter rhs)) return false;
            return ((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IANavigationMeshDataGetter? obj)
        {
            return ((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NavmeshVersion = initialValue;
                this.Magic = initialValue;
                this.Vertices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Triangles = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshTriangle.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshTriangle.Mask<TItem>?>>());
                this.EdgeLinks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EdgeLink.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, EdgeLink.Mask<TItem>?>>());
                this.DoorTriangles = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DoorTriangle.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DoorTriangle.Mask<TItem>?>>());
                this.NavmeshGridDivisor = initialValue;
                this.MaxDistanceX = initialValue;
                this.MaxDistanceY = initialValue;
                this.Min = initialValue;
                this.Max = initialValue;
                this.NavmeshGrid = initialValue;
            }

            public Mask(
                TItem NavmeshVersion,
                TItem Magic,
                TItem Vertices,
                TItem Triangles,
                TItem EdgeLinks,
                TItem DoorTriangles,
                TItem NavmeshGridDivisor,
                TItem MaxDistanceX,
                TItem MaxDistanceY,
                TItem Min,
                TItem Max,
                TItem NavmeshGrid)
            {
                this.NavmeshVersion = NavmeshVersion;
                this.Magic = Magic;
                this.Vertices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Vertices, Enumerable.Empty<(int Index, TItem Value)>());
                this.Triangles = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshTriangle.Mask<TItem>?>>?>(Triangles, Enumerable.Empty<MaskItemIndexed<TItem, NavmeshTriangle.Mask<TItem>?>>());
                this.EdgeLinks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EdgeLink.Mask<TItem>?>>?>(EdgeLinks, Enumerable.Empty<MaskItemIndexed<TItem, EdgeLink.Mask<TItem>?>>());
                this.DoorTriangles = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DoorTriangle.Mask<TItem>?>>?>(DoorTriangles, Enumerable.Empty<MaskItemIndexed<TItem, DoorTriangle.Mask<TItem>?>>());
                this.NavmeshGridDivisor = NavmeshGridDivisor;
                this.MaxDistanceX = MaxDistanceX;
                this.MaxDistanceY = MaxDistanceY;
                this.Min = Min;
                this.Max = Max;
                this.NavmeshGrid = NavmeshGrid;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NavmeshVersion;
            public TItem Magic;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Vertices;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavmeshTriangle.Mask<TItem>?>>?>? Triangles;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EdgeLink.Mask<TItem>?>>?>? EdgeLinks;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DoorTriangle.Mask<TItem>?>>?>? DoorTriangles;
            public TItem NavmeshGridDivisor;
            public TItem MaxDistanceX;
            public TItem MaxDistanceY;
            public TItem Min;
            public TItem Max;
            public TItem NavmeshGrid;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NavmeshVersion, rhs.NavmeshVersion)) return false;
                if (!object.Equals(this.Magic, rhs.Magic)) return false;
                if (!object.Equals(this.Vertices, rhs.Vertices)) return false;
                if (!object.Equals(this.Triangles, rhs.Triangles)) return false;
                if (!object.Equals(this.EdgeLinks, rhs.EdgeLinks)) return false;
                if (!object.Equals(this.DoorTriangles, rhs.DoorTriangles)) return false;
                if (!object.Equals(this.NavmeshGridDivisor, rhs.NavmeshGridDivisor)) return false;
                if (!object.Equals(this.MaxDistanceX, rhs.MaxDistanceX)) return false;
                if (!object.Equals(this.MaxDistanceY, rhs.MaxDistanceY)) return false;
                if (!object.Equals(this.Min, rhs.Min)) return false;
                if (!object.Equals(this.Max, rhs.Max)) return false;
                if (!object.Equals(this.NavmeshGrid, rhs.NavmeshGrid)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NavmeshVersion);
                hash.Add(this.Magic);
                hash.Add(this.Vertices);
                hash.Add(this.Triangles);
                hash.Add(this.EdgeLinks);
                hash.Add(this.DoorTriangles);
                hash.Add(this.NavmeshGridDivisor);
                hash.Add(this.MaxDistanceX);
                hash.Add(this.MaxDistanceY);
                hash.Add(this.Min);
                hash.Add(this.Max);
                hash.Add(this.NavmeshGrid);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.NavmeshVersion)) return false;
                if (!eval(this.Magic)) return false;
                if (this.Vertices != null)
                {
                    if (!eval(this.Vertices.Overall)) return false;
                    if (this.Vertices.Specific != null)
                    {
                        foreach (var item in this.Vertices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Triangles != null)
                {
                    if (!eval(this.Triangles.Overall)) return false;
                    if (this.Triangles.Specific != null)
                    {
                        foreach (var item in this.Triangles.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.EdgeLinks != null)
                {
                    if (!eval(this.EdgeLinks.Overall)) return false;
                    if (this.EdgeLinks.Specific != null)
                    {
                        foreach (var item in this.EdgeLinks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.DoorTriangles != null)
                {
                    if (!eval(this.DoorTriangles.Overall)) return false;
                    if (this.DoorTriangles.Specific != null)
                    {
                        foreach (var item in this.DoorTriangles.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.NavmeshGridDivisor)) return false;
                if (!eval(this.MaxDistanceX)) return false;
                if (!eval(this.MaxDistanceY)) return false;
                if (!eval(this.Min)) return false;
                if (!eval(this.Max)) return false;
                if (!eval(this.NavmeshGrid)) return false;
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.NavmeshVersion)) return true;
                if (eval(this.Magic)) return true;
                if (this.Vertices != null)
                {
                    if (eval(this.Vertices.Overall)) return true;
                    if (this.Vertices.Specific != null)
                    {
                        foreach (var item in this.Vertices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Triangles != null)
                {
                    if (eval(this.Triangles.Overall)) return true;
                    if (this.Triangles.Specific != null)
                    {
                        foreach (var item in this.Triangles.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.EdgeLinks != null)
                {
                    if (eval(this.EdgeLinks.Overall)) return true;
                    if (this.EdgeLinks.Specific != null)
                    {
                        foreach (var item in this.EdgeLinks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.DoorTriangles != null)
                {
                    if (eval(this.DoorTriangles.Overall)) return true;
                    if (this.DoorTriangles.Specific != null)
                    {
                        foreach (var item in this.DoorTriangles.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.NavmeshGridDivisor)) return true;
                if (eval(this.MaxDistanceX)) return true;
                if (eval(this.MaxDistanceY)) return true;
                if (eval(this.Min)) return true;
                if (eval(this.Max)) return true;
                if (eval(this.NavmeshGrid)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ANavigationMeshData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.NavmeshVersion = eval(this.NavmeshVersion);
                obj.Magic = eval(this.Magic);
                if (Vertices != null)
                {
                    obj.Vertices = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Vertices.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Vertices.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Vertices.Specific = l;
                        foreach (var item in Vertices.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Triangles != null)
                {
                    obj.Triangles = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NavmeshTriangle.Mask<R>?>>?>(eval(this.Triangles.Overall), Enumerable.Empty<MaskItemIndexed<R, NavmeshTriangle.Mask<R>?>>());
                    if (Triangles.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NavmeshTriangle.Mask<R>?>>();
                        obj.Triangles.Specific = l;
                        foreach (var item in Triangles.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, NavmeshTriangle.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, NavmeshTriangle.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (EdgeLinks != null)
                {
                    obj.EdgeLinks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, EdgeLink.Mask<R>?>>?>(eval(this.EdgeLinks.Overall), Enumerable.Empty<MaskItemIndexed<R, EdgeLink.Mask<R>?>>());
                    if (EdgeLinks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, EdgeLink.Mask<R>?>>();
                        obj.EdgeLinks.Specific = l;
                        foreach (var item in EdgeLinks.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, EdgeLink.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, EdgeLink.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (DoorTriangles != null)
                {
                    obj.DoorTriangles = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DoorTriangle.Mask<R>?>>?>(eval(this.DoorTriangles.Overall), Enumerable.Empty<MaskItemIndexed<R, DoorTriangle.Mask<R>?>>());
                    if (DoorTriangles.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DoorTriangle.Mask<R>?>>();
                        obj.DoorTriangles.Specific = l;
                        foreach (var item in DoorTriangles.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DoorTriangle.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DoorTriangle.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.NavmeshGridDivisor = eval(this.NavmeshGridDivisor);
                obj.MaxDistanceX = eval(this.MaxDistanceX);
                obj.MaxDistanceY = eval(this.MaxDistanceY);
                obj.Min = eval(this.Min);
                obj.Max = eval(this.Max);
                obj.NavmeshGrid = eval(this.NavmeshGrid);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ANavigationMeshData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ANavigationMeshData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ANavigationMeshData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.NavmeshVersion ?? true)
                    {
                        fg.AppendItem(NavmeshVersion, "NavmeshVersion");
                    }
                    if (printMask?.Magic ?? true)
                    {
                        fg.AppendItem(Magic, "Magic");
                    }
                    if ((printMask?.Vertices?.Overall ?? true)
                        && Vertices.TryGet(out var VerticesItem))
                    {
                        fg.AppendLine("Vertices =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(VerticesItem.Overall);
                            if (VerticesItem.Specific != null)
                            {
                                foreach (var subItem in VerticesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Triangles?.Overall ?? true)
                        && Triangles.TryGet(out var TrianglesItem))
                    {
                        fg.AppendLine("Triangles =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TrianglesItem.Overall);
                            if (TrianglesItem.Specific != null)
                            {
                                foreach (var subItem in TrianglesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.EdgeLinks?.Overall ?? true)
                        && EdgeLinks.TryGet(out var EdgeLinksItem))
                    {
                        fg.AppendLine("EdgeLinks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EdgeLinksItem.Overall);
                            if (EdgeLinksItem.Specific != null)
                            {
                                foreach (var subItem in EdgeLinksItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.DoorTriangles?.Overall ?? true)
                        && DoorTriangles.TryGet(out var DoorTrianglesItem))
                    {
                        fg.AppendLine("DoorTriangles =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(DoorTrianglesItem.Overall);
                            if (DoorTrianglesItem.Specific != null)
                            {
                                foreach (var subItem in DoorTrianglesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.NavmeshGridDivisor ?? true)
                    {
                        fg.AppendItem(NavmeshGridDivisor, "NavmeshGridDivisor");
                    }
                    if (printMask?.MaxDistanceX ?? true)
                    {
                        fg.AppendItem(MaxDistanceX, "MaxDistanceX");
                    }
                    if (printMask?.MaxDistanceY ?? true)
                    {
                        fg.AppendItem(MaxDistanceY, "MaxDistanceY");
                    }
                    if (printMask?.Min ?? true)
                    {
                        fg.AppendItem(Min, "Min");
                    }
                    if (printMask?.Max ?? true)
                    {
                        fg.AppendItem(Max, "Max");
                    }
                    if (printMask?.NavmeshGrid ?? true)
                    {
                        fg.AppendItem(NavmeshGrid, "NavmeshGrid");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? NavmeshVersion;
            public Exception? Magic;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Vertices;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshTriangle.ErrorMask?>>?>? Triangles;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EdgeLink.ErrorMask?>>?>? EdgeLinks;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DoorTriangle.ErrorMask?>>?>? DoorTriangles;
            public Exception? NavmeshGridDivisor;
            public Exception? MaxDistanceX;
            public Exception? MaxDistanceY;
            public Exception? Min;
            public Exception? Max;
            public Exception? NavmeshGrid;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                ANavigationMeshData_FieldIndex enu = (ANavigationMeshData_FieldIndex)index;
                switch (enu)
                {
                    case ANavigationMeshData_FieldIndex.NavmeshVersion:
                        return NavmeshVersion;
                    case ANavigationMeshData_FieldIndex.Magic:
                        return Magic;
                    case ANavigationMeshData_FieldIndex.Vertices:
                        return Vertices;
                    case ANavigationMeshData_FieldIndex.Triangles:
                        return Triangles;
                    case ANavigationMeshData_FieldIndex.EdgeLinks:
                        return EdgeLinks;
                    case ANavigationMeshData_FieldIndex.DoorTriangles:
                        return DoorTriangles;
                    case ANavigationMeshData_FieldIndex.NavmeshGridDivisor:
                        return NavmeshGridDivisor;
                    case ANavigationMeshData_FieldIndex.MaxDistanceX:
                        return MaxDistanceX;
                    case ANavigationMeshData_FieldIndex.MaxDistanceY:
                        return MaxDistanceY;
                    case ANavigationMeshData_FieldIndex.Min:
                        return Min;
                    case ANavigationMeshData_FieldIndex.Max:
                        return Max;
                    case ANavigationMeshData_FieldIndex.NavmeshGrid:
                        return NavmeshGrid;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                ANavigationMeshData_FieldIndex enu = (ANavigationMeshData_FieldIndex)index;
                switch (enu)
                {
                    case ANavigationMeshData_FieldIndex.NavmeshVersion:
                        this.NavmeshVersion = ex;
                        break;
                    case ANavigationMeshData_FieldIndex.Magic:
                        this.Magic = ex;
                        break;
                    case ANavigationMeshData_FieldIndex.Vertices:
                        this.Vertices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ANavigationMeshData_FieldIndex.Triangles:
                        this.Triangles = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshTriangle.ErrorMask?>>?>(ex, null);
                        break;
                    case ANavigationMeshData_FieldIndex.EdgeLinks:
                        this.EdgeLinks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EdgeLink.ErrorMask?>>?>(ex, null);
                        break;
                    case ANavigationMeshData_FieldIndex.DoorTriangles:
                        this.DoorTriangles = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DoorTriangle.ErrorMask?>>?>(ex, null);
                        break;
                    case ANavigationMeshData_FieldIndex.NavmeshGridDivisor:
                        this.NavmeshGridDivisor = ex;
                        break;
                    case ANavigationMeshData_FieldIndex.MaxDistanceX:
                        this.MaxDistanceX = ex;
                        break;
                    case ANavigationMeshData_FieldIndex.MaxDistanceY:
                        this.MaxDistanceY = ex;
                        break;
                    case ANavigationMeshData_FieldIndex.Min:
                        this.Min = ex;
                        break;
                    case ANavigationMeshData_FieldIndex.Max:
                        this.Max = ex;
                        break;
                    case ANavigationMeshData_FieldIndex.NavmeshGrid:
                        this.NavmeshGrid = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                ANavigationMeshData_FieldIndex enu = (ANavigationMeshData_FieldIndex)index;
                switch (enu)
                {
                    case ANavigationMeshData_FieldIndex.NavmeshVersion:
                        this.NavmeshVersion = (Exception?)obj;
                        break;
                    case ANavigationMeshData_FieldIndex.Magic:
                        this.Magic = (Exception?)obj;
                        break;
                    case ANavigationMeshData_FieldIndex.Vertices:
                        this.Vertices = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ANavigationMeshData_FieldIndex.Triangles:
                        this.Triangles = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshTriangle.ErrorMask?>>?>)obj;
                        break;
                    case ANavigationMeshData_FieldIndex.EdgeLinks:
                        this.EdgeLinks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EdgeLink.ErrorMask?>>?>)obj;
                        break;
                    case ANavigationMeshData_FieldIndex.DoorTriangles:
                        this.DoorTriangles = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DoorTriangle.ErrorMask?>>?>)obj;
                        break;
                    case ANavigationMeshData_FieldIndex.NavmeshGridDivisor:
                        this.NavmeshGridDivisor = (Exception?)obj;
                        break;
                    case ANavigationMeshData_FieldIndex.MaxDistanceX:
                        this.MaxDistanceX = (Exception?)obj;
                        break;
                    case ANavigationMeshData_FieldIndex.MaxDistanceY:
                        this.MaxDistanceY = (Exception?)obj;
                        break;
                    case ANavigationMeshData_FieldIndex.Min:
                        this.Min = (Exception?)obj;
                        break;
                    case ANavigationMeshData_FieldIndex.Max:
                        this.Max = (Exception?)obj;
                        break;
                    case ANavigationMeshData_FieldIndex.NavmeshGrid:
                        this.NavmeshGrid = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (NavmeshVersion != null) return true;
                if (Magic != null) return true;
                if (Vertices != null) return true;
                if (Triangles != null) return true;
                if (EdgeLinks != null) return true;
                if (DoorTriangles != null) return true;
                if (NavmeshGridDivisor != null) return true;
                if (MaxDistanceX != null) return true;
                if (MaxDistanceY != null) return true;
                if (Min != null) return true;
                if (Max != null) return true;
                if (NavmeshGrid != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public virtual void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected virtual void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(NavmeshVersion, "NavmeshVersion");
                fg.AppendItem(Magic, "Magic");
                if (Vertices.TryGet(out var VerticesItem))
                {
                    fg.AppendLine("Vertices =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(VerticesItem.Overall);
                        if (VerticesItem.Specific != null)
                        {
                            foreach (var subItem in VerticesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Triangles.TryGet(out var TrianglesItem))
                {
                    fg.AppendLine("Triangles =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TrianglesItem.Overall);
                        if (TrianglesItem.Specific != null)
                        {
                            foreach (var subItem in TrianglesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (EdgeLinks.TryGet(out var EdgeLinksItem))
                {
                    fg.AppendLine("EdgeLinks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EdgeLinksItem.Overall);
                        if (EdgeLinksItem.Specific != null)
                        {
                            foreach (var subItem in EdgeLinksItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (DoorTriangles.TryGet(out var DoorTrianglesItem))
                {
                    fg.AppendLine("DoorTriangles =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(DoorTrianglesItem.Overall);
                        if (DoorTrianglesItem.Specific != null)
                        {
                            foreach (var subItem in DoorTrianglesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(NavmeshGridDivisor, "NavmeshGridDivisor");
                fg.AppendItem(MaxDistanceX, "MaxDistanceX");
                fg.AppendItem(MaxDistanceY, "MaxDistanceY");
                fg.AppendItem(Min, "Min");
                fg.AppendItem(Max, "Max");
                fg.AppendItem(NavmeshGrid, "NavmeshGrid");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NavmeshVersion = this.NavmeshVersion.Combine(rhs.NavmeshVersion);
                ret.Magic = this.Magic.Combine(rhs.Magic);
                ret.Vertices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Vertices?.Overall, rhs.Vertices?.Overall), ExceptionExt.Combine(this.Vertices?.Specific, rhs.Vertices?.Specific));
                ret.Triangles = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavmeshTriangle.ErrorMask?>>?>(ExceptionExt.Combine(this.Triangles?.Overall, rhs.Triangles?.Overall), ExceptionExt.Combine(this.Triangles?.Specific, rhs.Triangles?.Specific));
                ret.EdgeLinks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EdgeLink.ErrorMask?>>?>(ExceptionExt.Combine(this.EdgeLinks?.Overall, rhs.EdgeLinks?.Overall), ExceptionExt.Combine(this.EdgeLinks?.Specific, rhs.EdgeLinks?.Specific));
                ret.DoorTriangles = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DoorTriangle.ErrorMask?>>?>(ExceptionExt.Combine(this.DoorTriangles?.Overall, rhs.DoorTriangles?.Overall), ExceptionExt.Combine(this.DoorTriangles?.Specific, rhs.DoorTriangles?.Specific));
                ret.NavmeshGridDivisor = this.NavmeshGridDivisor.Combine(rhs.NavmeshGridDivisor);
                ret.MaxDistanceX = this.MaxDistanceX.Combine(rhs.MaxDistanceX);
                ret.MaxDistanceY = this.MaxDistanceY.Combine(rhs.MaxDistanceY);
                ret.Min = this.Min.Combine(rhs.Min);
                ret.Max = this.Max.Combine(rhs.Max);
                ret.NavmeshGrid = this.NavmeshGrid.Combine(rhs.NavmeshGrid);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool NavmeshVersion;
            public bool Magic;
            public bool Vertices;
            public NavmeshTriangle.TranslationMask? Triangles;
            public EdgeLink.TranslationMask? EdgeLinks;
            public DoorTriangle.TranslationMask? DoorTriangles;
            public bool NavmeshGridDivisor;
            public bool MaxDistanceX;
            public bool MaxDistanceY;
            public bool Min;
            public bool Max;
            public bool NavmeshGrid;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.NavmeshVersion = defaultOn;
                this.Magic = defaultOn;
                this.Vertices = defaultOn;
                this.NavmeshGridDivisor = defaultOn;
                this.MaxDistanceX = defaultOn;
                this.MaxDistanceY = defaultOn;
                this.Min = defaultOn;
                this.Max = defaultOn;
                this.NavmeshGrid = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NavmeshVersion, null));
                ret.Add((Magic, null));
                ret.Add((Vertices, null));
                ret.Add((Triangles == null ? DefaultOn : !Triangles.GetCrystal().CopyNothing, Triangles?.GetCrystal()));
                ret.Add((EdgeLinks == null ? DefaultOn : !EdgeLinks.GetCrystal().CopyNothing, EdgeLinks?.GetCrystal()));
                ret.Add((DoorTriangles == null ? DefaultOn : !DoorTriangles.GetCrystal().CopyNothing, DoorTriangles?.GetCrystal()));
                ret.Add((NavmeshGridDivisor, null));
                ret.Add((MaxDistanceX, null));
                ret.Add((MaxDistanceY, null));
                ret.Add((Min, null));
                ret.Add((Max, null));
                ret.Add((NavmeshGrid, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public virtual IEnumerable<FormLinkInformation> ContainedFormLinks => ANavigationMeshDataCommon.Instance.GetContainedFormLinks(this);
        public virtual void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ANavigationMeshDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => ANavigationMeshDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ANavigationMeshDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ANavigationMeshDataSetterCommon)((IANavigationMeshDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ANavigationMeshData GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [WorldspaceNavigationMeshData, CellNavigationMeshData]
    /// </summary>
    public partial interface IANavigationMeshData :
        IANavigationMeshDataGetter,
        ILoquiObjectSetter<IANavigationMeshData>,
        IFormLinkContainer
    {
        new UInt32 NavmeshVersion { get; set; }
        new UInt32 Magic { get; set; }
        new ExtendedList<P3Float> Vertices { get; }
        new ExtendedList<NavmeshTriangle> Triangles { get; }
        new ExtendedList<EdgeLink> EdgeLinks { get; }
        new ExtendedList<DoorTriangle> DoorTriangles { get; }
        new UInt32 NavmeshGridDivisor { get; set; }
        new Single MaxDistanceX { get; set; }
        new Single MaxDistanceY { get; set; }
        new P3Float Min { get; set; }
        new P3Float Max { get; set; }
        new MemorySlice<Byte> NavmeshGrid { get; set; }
    }

    /// <summary>
    /// Implemented by: [WorldspaceNavigationMeshData, CellNavigationMeshData]
    /// </summary>
    public partial interface IANavigationMeshDataGetter :
        ILoquiObject,
        ILoquiObject<IANavigationMeshDataGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ANavigationMeshData_Registration.Instance;
        UInt32 NavmeshVersion { get; }
        UInt32 Magic { get; }
        IReadOnlyList<P3Float> Vertices { get; }
        IReadOnlyList<INavmeshTriangleGetter> Triangles { get; }
        IReadOnlyList<IEdgeLinkGetter> EdgeLinks { get; }
        IReadOnlyList<IDoorTriangleGetter> DoorTriangles { get; }
        UInt32 NavmeshGridDivisor { get; }
        Single MaxDistanceX { get; }
        Single MaxDistanceY { get; }
        P3Float Min { get; }
        P3Float Max { get; }
        ReadOnlyMemorySlice<Byte> NavmeshGrid { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ANavigationMeshDataMixIn
    {
        public static void Clear(this IANavigationMeshData item)
        {
            ((ANavigationMeshDataSetterCommon)((IANavigationMeshDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ANavigationMeshData.Mask<bool> GetEqualsMask(
            this IANavigationMeshDataGetter item,
            IANavigationMeshDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IANavigationMeshDataGetter item,
            string? name = null,
            ANavigationMeshData.Mask<bool>? printMask = null)
        {
            return ((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IANavigationMeshDataGetter item,
            FileGeneration fg,
            string? name = null,
            ANavigationMeshData.Mask<bool>? printMask = null)
        {
            ((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IANavigationMeshDataGetter item,
            IANavigationMeshDataGetter rhs)
        {
            return ((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IANavigationMeshData lhs,
            IANavigationMeshDataGetter rhs)
        {
            ((ANavigationMeshDataSetterTranslationCommon)((IANavigationMeshDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IANavigationMeshData lhs,
            IANavigationMeshDataGetter rhs,
            ANavigationMeshData.TranslationMask? copyMask = null)
        {
            ((ANavigationMeshDataSetterTranslationCommon)((IANavigationMeshDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IANavigationMeshData lhs,
            IANavigationMeshDataGetter rhs,
            out ANavigationMeshData.ErrorMask errorMask,
            ANavigationMeshData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ANavigationMeshDataSetterTranslationCommon)((IANavigationMeshDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ANavigationMeshData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IANavigationMeshData lhs,
            IANavigationMeshDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ANavigationMeshDataSetterTranslationCommon)((IANavigationMeshDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ANavigationMeshData DeepCopy(
            this IANavigationMeshDataGetter item,
            ANavigationMeshData.TranslationMask? copyMask = null)
        {
            return ((ANavigationMeshDataSetterTranslationCommon)((IANavigationMeshDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ANavigationMeshData DeepCopy(
            this IANavigationMeshDataGetter item,
            out ANavigationMeshData.ErrorMask errorMask,
            ANavigationMeshData.TranslationMask? copyMask = null)
        {
            return ((ANavigationMeshDataSetterTranslationCommon)((IANavigationMeshDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ANavigationMeshData DeepCopy(
            this IANavigationMeshDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ANavigationMeshDataSetterTranslationCommon)((IANavigationMeshDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IANavigationMeshData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ANavigationMeshDataSetterCommon)((IANavigationMeshDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ANavigationMeshData_FieldIndex
    {
        NavmeshVersion = 0,
        Magic = 1,
        Vertices = 2,
        Triangles = 3,
        EdgeLinks = 4,
        DoorTriangles = 5,
        NavmeshGridDivisor = 6,
        MaxDistanceX = 7,
        MaxDistanceY = 8,
        Min = 9,
        Max = 10,
        NavmeshGrid = 11,
    }
    #endregion

    #region Registration
    public partial class ANavigationMeshData_Registration : ILoquiRegistration
    {
        public static readonly ANavigationMeshData_Registration Instance = new ANavigationMeshData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 324,
            version: 0);

        public const string GUID = "0f14b502-0797-43b9-810a-e958643a5d68";

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(ANavigationMeshData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ANavigationMeshData.ErrorMask);

        public static readonly Type ClassType = typeof(ANavigationMeshData);

        public static readonly Type GetterType = typeof(IANavigationMeshDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IANavigationMeshData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ANavigationMeshData";

        public const string Name = "ANavigationMeshData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(ANavigationMeshDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ANavigationMeshDataSetterCommon
    {
        public static readonly ANavigationMeshDataSetterCommon Instance = new ANavigationMeshDataSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IANavigationMeshData item)
        {
            ClearPartial();
            item.NavmeshVersion = ANavigationMeshData._NavmeshVersion_Default;
            item.Magic = ANavigationMeshData._Magic_Default;
            item.Vertices.Clear();
            item.Triangles.Clear();
            item.EdgeLinks.Clear();
            item.DoorTriangles.Clear();
            item.NavmeshGridDivisor = default;
            item.MaxDistanceX = default;
            item.MaxDistanceY = default;
            item.Min = default;
            item.Max = default;
            item.NavmeshGrid = new byte[0];
        }
        
        #region Mutagen
        public void RemapLinks(IANavigationMeshData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.EdgeLinks.RemapLinks(mapping);
            obj.DoorTriangles.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IANavigationMeshData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
        }
        
        #endregion
        
    }
    public partial class ANavigationMeshDataCommon
    {
        public static readonly ANavigationMeshDataCommon Instance = new ANavigationMeshDataCommon();

        public ANavigationMeshData.Mask<bool> GetEqualsMask(
            IANavigationMeshDataGetter item,
            IANavigationMeshDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ANavigationMeshData.Mask<bool>(false);
            ((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IANavigationMeshDataGetter item,
            IANavigationMeshDataGetter rhs,
            ANavigationMeshData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.NavmeshVersion = item.NavmeshVersion == rhs.NavmeshVersion;
            ret.Magic = item.Magic == rhs.Magic;
            ret.Vertices = item.Vertices.CollectionEqualsHelper(
                rhs.Vertices,
                (l, r) => l.Equals(r),
                include);
            ret.Triangles = item.Triangles.CollectionEqualsHelper(
                rhs.Triangles,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EdgeLinks = item.EdgeLinks.CollectionEqualsHelper(
                rhs.EdgeLinks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DoorTriangles = item.DoorTriangles.CollectionEqualsHelper(
                rhs.DoorTriangles,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.NavmeshGridDivisor = item.NavmeshGridDivisor == rhs.NavmeshGridDivisor;
            ret.MaxDistanceX = item.MaxDistanceX.EqualsWithin(rhs.MaxDistanceX);
            ret.MaxDistanceY = item.MaxDistanceY.EqualsWithin(rhs.MaxDistanceY);
            ret.Min = item.Min.Equals(rhs.Min);
            ret.Max = item.Max.Equals(rhs.Max);
            ret.NavmeshGrid = MemoryExtensions.SequenceEqual(item.NavmeshGrid.Span, rhs.NavmeshGrid.Span);
        }
        
        public string ToString(
            IANavigationMeshDataGetter item,
            string? name = null,
            ANavigationMeshData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IANavigationMeshDataGetter item,
            FileGeneration fg,
            string? name = null,
            ANavigationMeshData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ANavigationMeshData =>");
            }
            else
            {
                fg.AppendLine($"{name} (ANavigationMeshData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IANavigationMeshDataGetter item,
            FileGeneration fg,
            ANavigationMeshData.Mask<bool>? printMask = null)
        {
            if (printMask?.NavmeshVersion ?? true)
            {
                fg.AppendItem(item.NavmeshVersion, "NavmeshVersion");
            }
            if (printMask?.Magic ?? true)
            {
                fg.AppendItem(item.Magic, "Magic");
            }
            if (printMask?.Vertices?.Overall ?? true)
            {
                fg.AppendLine("Vertices =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Vertices)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Triangles?.Overall ?? true)
            {
                fg.AppendLine("Triangles =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Triangles)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.EdgeLinks?.Overall ?? true)
            {
                fg.AppendLine("EdgeLinks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.EdgeLinks)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DoorTriangles?.Overall ?? true)
            {
                fg.AppendLine("DoorTriangles =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.DoorTriangles)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.NavmeshGridDivisor ?? true)
            {
                fg.AppendItem(item.NavmeshGridDivisor, "NavmeshGridDivisor");
            }
            if (printMask?.MaxDistanceX ?? true)
            {
                fg.AppendItem(item.MaxDistanceX, "MaxDistanceX");
            }
            if (printMask?.MaxDistanceY ?? true)
            {
                fg.AppendItem(item.MaxDistanceY, "MaxDistanceY");
            }
            if (printMask?.Min ?? true)
            {
                fg.AppendItem(item.Min, "Min");
            }
            if (printMask?.Max ?? true)
            {
                fg.AppendItem(item.Max, "Max");
            }
            if (printMask?.NavmeshGrid ?? true)
            {
                fg.AppendLine($"NavmeshGrid => {SpanExt.ToHexString(item.NavmeshGrid)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IANavigationMeshDataGetter? lhs,
            IANavigationMeshDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.NavmeshVersion != rhs.NavmeshVersion) return false;
            if (lhs.Magic != rhs.Magic) return false;
            if (!lhs.Vertices.SequenceEqualNullable(rhs.Vertices)) return false;
            if (!lhs.Triangles.SequenceEqualNullable(rhs.Triangles)) return false;
            if (!lhs.EdgeLinks.SequenceEqualNullable(rhs.EdgeLinks)) return false;
            if (!lhs.DoorTriangles.SequenceEqualNullable(rhs.DoorTriangles)) return false;
            if (lhs.NavmeshGridDivisor != rhs.NavmeshGridDivisor) return false;
            if (!lhs.MaxDistanceX.EqualsWithin(rhs.MaxDistanceX)) return false;
            if (!lhs.MaxDistanceY.EqualsWithin(rhs.MaxDistanceY)) return false;
            if (!lhs.Min.Equals(rhs.Min)) return false;
            if (!lhs.Max.Equals(rhs.Max)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.NavmeshGrid.Span, rhs.NavmeshGrid.Span)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IANavigationMeshDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.NavmeshVersion);
            hash.Add(item.Magic);
            hash.Add(item.Vertices);
            hash.Add(item.Triangles);
            hash.Add(item.EdgeLinks);
            hash.Add(item.DoorTriangles);
            hash.Add(item.NavmeshGridDivisor);
            hash.Add(item.MaxDistanceX);
            hash.Add(item.MaxDistanceY);
            hash.Add(item.Min);
            hash.Add(item.Max);
            hash.Add(item.NavmeshGrid);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return ANavigationMeshData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IANavigationMeshDataGetter obj)
        {
            foreach (var item in obj.EdgeLinks.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.DoorTriangles.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ANavigationMeshDataSetterTranslationCommon
    {
        public static readonly ANavigationMeshDataSetterTranslationCommon Instance = new ANavigationMeshDataSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IANavigationMeshData item,
            IANavigationMeshDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.NavmeshVersion) ?? true))
            {
                item.NavmeshVersion = rhs.NavmeshVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.Magic) ?? true))
            {
                item.Magic = rhs.Magic;
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.Vertices) ?? true))
            {
                errorMask?.PushIndex((int)ANavigationMeshData_FieldIndex.Vertices);
                try
                {
                    item.Vertices.SetTo(rhs.Vertices);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.Triangles) ?? true))
            {
                errorMask?.PushIndex((int)ANavigationMeshData_FieldIndex.Triangles);
                try
                {
                    item.Triangles.SetTo(
                        rhs.Triangles
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.EdgeLinks) ?? true))
            {
                errorMask?.PushIndex((int)ANavigationMeshData_FieldIndex.EdgeLinks);
                try
                {
                    item.EdgeLinks.SetTo(
                        rhs.EdgeLinks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.DoorTriangles) ?? true))
            {
                errorMask?.PushIndex((int)ANavigationMeshData_FieldIndex.DoorTriangles);
                try
                {
                    item.DoorTriangles.SetTo(
                        rhs.DoorTriangles
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.NavmeshGridDivisor) ?? true))
            {
                item.NavmeshGridDivisor = rhs.NavmeshGridDivisor;
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.MaxDistanceX) ?? true))
            {
                item.MaxDistanceX = rhs.MaxDistanceX;
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.MaxDistanceY) ?? true))
            {
                item.MaxDistanceY = rhs.MaxDistanceY;
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.Min) ?? true))
            {
                item.Min = rhs.Min;
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.Max) ?? true))
            {
                item.Max = rhs.Max;
            }
            if ((copyMask?.GetShouldTranslate((int)ANavigationMeshData_FieldIndex.NavmeshGrid) ?? true))
            {
                item.NavmeshGrid = rhs.NavmeshGrid.ToArray();
            }
        }
        
        #endregion
        
        public ANavigationMeshData DeepCopy(
            IANavigationMeshDataGetter item,
            ANavigationMeshData.TranslationMask? copyMask = null)
        {
            ANavigationMeshData ret = (ANavigationMeshData)((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)item).CommonInstance()!).GetNew();
            ((ANavigationMeshDataSetterTranslationCommon)((IANavigationMeshDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ANavigationMeshData DeepCopy(
            IANavigationMeshDataGetter item,
            out ANavigationMeshData.ErrorMask errorMask,
            ANavigationMeshData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ANavigationMeshData ret = (ANavigationMeshData)((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)item).CommonInstance()!).GetNew();
            ((ANavigationMeshDataSetterTranslationCommon)((IANavigationMeshDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ANavigationMeshData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ANavigationMeshData DeepCopy(
            IANavigationMeshDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ANavigationMeshData ret = (ANavigationMeshData)((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)item).CommonInstance()!).GetNew();
            ((ANavigationMeshDataSetterTranslationCommon)((IANavigationMeshDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ANavigationMeshData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ANavigationMeshData_Registration.Instance;
        public static ANavigationMeshData_Registration Registration => ANavigationMeshData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => ANavigationMeshDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return ANavigationMeshDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => ANavigationMeshDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IANavigationMeshDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IANavigationMeshDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IANavigationMeshDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ANavigationMeshDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ANavigationMeshDataBinaryWriteTranslation Instance = new ANavigationMeshDataBinaryWriteTranslation();

        static partial void WriteBinaryParentLogicCustom(
            MutagenWriter writer,
            IANavigationMeshDataGetter item);

        public static void WriteBinaryParentLogic(
            MutagenWriter writer,
            IANavigationMeshDataGetter item)
        {
            WriteBinaryParentLogicCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryCoverTrianglesLogicCustom(
            MutagenWriter writer,
            IANavigationMeshDataGetter item);

        public static void WriteBinaryCoverTrianglesLogic(
            MutagenWriter writer,
            IANavigationMeshDataGetter item)
        {
            WriteBinaryCoverTrianglesLogicCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryNavmeshGridCustom(
            MutagenWriter writer,
            IANavigationMeshDataGetter item);

        public static void WriteBinaryNavmeshGrid(
            MutagenWriter writer,
            IANavigationMeshDataGetter item)
        {
            WriteBinaryNavmeshGridCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IANavigationMeshDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.NavmeshVersion);
            writer.Write(item.Magic);
            ANavigationMeshDataBinaryWriteTranslation.WriteBinaryParentLogic(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<P3Float>.Instance.Write(
                writer: writer,
                items: item.Vertices,
                countLengthLength: 4,
                transl: P3FloatBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<INavmeshTriangleGetter>.Instance.Write(
                writer: writer,
                items: item.Triangles,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, INavmeshTriangleGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((NavmeshTriangleBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IEdgeLinkGetter>.Instance.Write(
                writer: writer,
                items: item.EdgeLinks,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IEdgeLinkGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((EdgeLinkBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IDoorTriangleGetter>.Instance.Write(
                writer: writer,
                items: item.DoorTriangles,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IDoorTriangleGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((DoorTriangleBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            ANavigationMeshDataBinaryWriteTranslation.WriteBinaryCoverTrianglesLogic(
                writer: writer,
                item: item);
            writer.Write(item.NavmeshGridDivisor);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaxDistanceX);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaxDistanceY);
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Min);
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Max);
            ANavigationMeshDataBinaryWriteTranslation.WriteBinaryNavmeshGrid(
                writer: writer,
                item: item);
        }

        public virtual void Write(
            MutagenWriter writer,
            IANavigationMeshDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IANavigationMeshDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ANavigationMeshDataBinaryCreateTranslation
    {
        public readonly static ANavigationMeshDataBinaryCreateTranslation Instance = new ANavigationMeshDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IANavigationMeshData item,
            MutagenFrame frame)
        {
            item.NavmeshVersion = frame.ReadUInt32();
            item.Magic = frame.ReadUInt32();
            ANavigationMeshDataBinaryCreateTranslation.FillBinaryParentLogicCustom(
                frame: frame,
                item: item);
            item.Vertices.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<P3Float>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    frame: frame,
                    transl: P3FloatBinaryTranslation.Instance.Parse));
            item.Triangles.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<NavmeshTriangle>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    frame: frame,
                    transl: NavmeshTriangle.TryCreateFromBinary));
            item.EdgeLinks.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<EdgeLink>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    frame: frame,
                    transl: EdgeLink.TryCreateFromBinary));
            item.DoorTriangles.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<DoorTriangle>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    frame: frame,
                    transl: DoorTriangle.TryCreateFromBinary));
            ANavigationMeshDataBinaryCreateTranslation.FillBinaryCoverTrianglesLogicCustom(
                frame: frame,
                item: item);
            item.NavmeshGridDivisor = frame.ReadUInt32();
            item.MaxDistanceX = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.MaxDistanceY = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Min = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Max = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: frame);
            ANavigationMeshDataBinaryCreateTranslation.FillBinaryNavmeshGridCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryParentLogicCustom(
            MutagenFrame frame,
            IANavigationMeshData item);

        static partial void FillBinaryCoverTrianglesLogicCustom(
            MutagenFrame frame,
            IANavigationMeshData item);

        static partial void FillBinaryNavmeshGridCustom(
            MutagenFrame frame,
            IANavigationMeshData item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ANavigationMeshDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IANavigationMeshDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ANavigationMeshDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ANavigationMeshDataBinaryOverlay :
        BinaryOverlay,
        IANavigationMeshDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ANavigationMeshData_Registration.Instance;
        public static ANavigationMeshData_Registration Registration => ANavigationMeshData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => ANavigationMeshDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => ANavigationMeshDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IANavigationMeshDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IANavigationMeshDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IANavigationMeshDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public virtual IEnumerable<FormLinkInformation> ContainedFormLinks => ANavigationMeshDataCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => ANavigationMeshDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ANavigationMeshDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public UInt32 NavmeshVersion => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x0, 0x4));
        public UInt32 Magic => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x4, 0x4));
        #region ParentLogic
        partial void ParentLogicCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region Vertices
        public IReadOnlyList<P3Float> Vertices => BinaryOverlayList.FactoryByCountLength<P3Float>(_data.Slice(0x10), _package, 12, countLength: 4, (s, p) => P3FloatBinaryTranslation.Read(s));
        protected int VerticesEndingPos;
        #endregion
        #region Triangles
        protected int TrianglesEndingPos;
        partial void CustomTrianglesEndPos();
        #endregion
        #region EdgeLinks
        public IReadOnlyList<IEdgeLinkGetter> EdgeLinks => BinaryOverlayList.FactoryByCountLength<EdgeLinkBinaryOverlay>(_data.Slice(TrianglesEndingPos), _package, 10, countLength: 4, (s, p) => EdgeLinkBinaryOverlay.EdgeLinkFactory(s, p));
        protected int EdgeLinksEndingPos;
        #endregion
        #region DoorTriangles
        public IReadOnlyList<IDoorTriangleGetter> DoorTriangles => BinaryOverlayList.FactoryByCountLength<DoorTriangleBinaryOverlay>(_data.Slice(EdgeLinksEndingPos), _package, 10, countLength: 4, (s, p) => DoorTriangleBinaryOverlay.DoorTriangleFactory(s, p));
        protected int DoorTrianglesEndingPos;
        #endregion
        #region CoverTrianglesLogic
        partial void CoverTrianglesLogicCustomParse(
            OverlayStream stream,
            int offset);
        protected int CoverTrianglesLogicEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ANavigationMeshDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }


        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ANavigationMeshDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IANavigationMeshDataGetter rhs)) return false;
            return ((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IANavigationMeshDataGetter? obj)
        {
            return ((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ANavigationMeshDataCommon)((IANavigationMeshDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

