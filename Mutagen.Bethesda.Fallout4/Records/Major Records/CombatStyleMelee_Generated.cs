/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class CombatStyleMelee :
        ICombatStyleMelee,
        ILoquiObjectSetter<CombatStyleMelee>,
        IEquatable<ICombatStyleMeleeGetter>
    {
        #region Ctor
        public CombatStyleMelee()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public CombatStyleMelee.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region AttackStaggeredMult
        public Single AttackStaggeredMult { get; set; } = default;
        #endregion
        #region PowerAttackStaggeredMult
        public Single PowerAttackStaggeredMult { get; set; } = default;
        #endregion
        #region PowerAttackBlockingMult
        public Single PowerAttackBlockingMult { get; set; } = default;
        #endregion
        #region BashMult
        public Single BashMult { get; set; } = default;
        #endregion
        #region BashRecoilMult
        public Single BashRecoilMult { get; set; } = default;
        #endregion
        #region BashAttackMult
        public Single BashAttackMult { get; set; } = default;
        #endregion
        #region BashPowerAttackMult
        public Single BashPowerAttackMult { get; set; } = default;
        #endregion
        #region SpecialAttackMult
        public Single SpecialAttackMult { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CombatStyleMeleeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICombatStyleMeleeGetter rhs)) return false;
            return ((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICombatStyleMeleeGetter? obj)
        {
            return ((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.AttackStaggeredMult = initialValue;
                this.PowerAttackStaggeredMult = initialValue;
                this.PowerAttackBlockingMult = initialValue;
                this.BashMult = initialValue;
                this.BashRecoilMult = initialValue;
                this.BashAttackMult = initialValue;
                this.BashPowerAttackMult = initialValue;
                this.SpecialAttackMult = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem AttackStaggeredMult,
                TItem PowerAttackStaggeredMult,
                TItem PowerAttackBlockingMult,
                TItem BashMult,
                TItem BashRecoilMult,
                TItem BashAttackMult,
                TItem BashPowerAttackMult,
                TItem SpecialAttackMult)
            {
                this.Versioning = Versioning;
                this.AttackStaggeredMult = AttackStaggeredMult;
                this.PowerAttackStaggeredMult = PowerAttackStaggeredMult;
                this.PowerAttackBlockingMult = PowerAttackBlockingMult;
                this.BashMult = BashMult;
                this.BashRecoilMult = BashRecoilMult;
                this.BashAttackMult = BashAttackMult;
                this.BashPowerAttackMult = BashPowerAttackMult;
                this.SpecialAttackMult = SpecialAttackMult;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem AttackStaggeredMult;
            public TItem PowerAttackStaggeredMult;
            public TItem PowerAttackBlockingMult;
            public TItem BashMult;
            public TItem BashRecoilMult;
            public TItem BashAttackMult;
            public TItem BashPowerAttackMult;
            public TItem SpecialAttackMult;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.AttackStaggeredMult, rhs.AttackStaggeredMult)) return false;
                if (!object.Equals(this.PowerAttackStaggeredMult, rhs.PowerAttackStaggeredMult)) return false;
                if (!object.Equals(this.PowerAttackBlockingMult, rhs.PowerAttackBlockingMult)) return false;
                if (!object.Equals(this.BashMult, rhs.BashMult)) return false;
                if (!object.Equals(this.BashRecoilMult, rhs.BashRecoilMult)) return false;
                if (!object.Equals(this.BashAttackMult, rhs.BashAttackMult)) return false;
                if (!object.Equals(this.BashPowerAttackMult, rhs.BashPowerAttackMult)) return false;
                if (!object.Equals(this.SpecialAttackMult, rhs.SpecialAttackMult)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.AttackStaggeredMult);
                hash.Add(this.PowerAttackStaggeredMult);
                hash.Add(this.PowerAttackBlockingMult);
                hash.Add(this.BashMult);
                hash.Add(this.BashRecoilMult);
                hash.Add(this.BashAttackMult);
                hash.Add(this.BashPowerAttackMult);
                hash.Add(this.SpecialAttackMult);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.AttackStaggeredMult)) return false;
                if (!eval(this.PowerAttackStaggeredMult)) return false;
                if (!eval(this.PowerAttackBlockingMult)) return false;
                if (!eval(this.BashMult)) return false;
                if (!eval(this.BashRecoilMult)) return false;
                if (!eval(this.BashAttackMult)) return false;
                if (!eval(this.BashPowerAttackMult)) return false;
                if (!eval(this.SpecialAttackMult)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.AttackStaggeredMult)) return true;
                if (eval(this.PowerAttackStaggeredMult)) return true;
                if (eval(this.PowerAttackBlockingMult)) return true;
                if (eval(this.BashMult)) return true;
                if (eval(this.BashRecoilMult)) return true;
                if (eval(this.BashAttackMult)) return true;
                if (eval(this.BashPowerAttackMult)) return true;
                if (eval(this.SpecialAttackMult)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CombatStyleMelee.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.AttackStaggeredMult = eval(this.AttackStaggeredMult);
                obj.PowerAttackStaggeredMult = eval(this.PowerAttackStaggeredMult);
                obj.PowerAttackBlockingMult = eval(this.PowerAttackBlockingMult);
                obj.BashMult = eval(this.BashMult);
                obj.BashRecoilMult = eval(this.BashRecoilMult);
                obj.BashAttackMult = eval(this.BashAttackMult);
                obj.BashPowerAttackMult = eval(this.BashPowerAttackMult);
                obj.SpecialAttackMult = eval(this.SpecialAttackMult);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CombatStyleMelee.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CombatStyleMelee.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CombatStyleMelee.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.AttackStaggeredMult ?? true)
                    {
                        fg.AppendItem(AttackStaggeredMult, "AttackStaggeredMult");
                    }
                    if (printMask?.PowerAttackStaggeredMult ?? true)
                    {
                        fg.AppendItem(PowerAttackStaggeredMult, "PowerAttackStaggeredMult");
                    }
                    if (printMask?.PowerAttackBlockingMult ?? true)
                    {
                        fg.AppendItem(PowerAttackBlockingMult, "PowerAttackBlockingMult");
                    }
                    if (printMask?.BashMult ?? true)
                    {
                        fg.AppendItem(BashMult, "BashMult");
                    }
                    if (printMask?.BashRecoilMult ?? true)
                    {
                        fg.AppendItem(BashRecoilMult, "BashRecoilMult");
                    }
                    if (printMask?.BashAttackMult ?? true)
                    {
                        fg.AppendItem(BashAttackMult, "BashAttackMult");
                    }
                    if (printMask?.BashPowerAttackMult ?? true)
                    {
                        fg.AppendItem(BashPowerAttackMult, "BashPowerAttackMult");
                    }
                    if (printMask?.SpecialAttackMult ?? true)
                    {
                        fg.AppendItem(SpecialAttackMult, "SpecialAttackMult");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? AttackStaggeredMult;
            public Exception? PowerAttackStaggeredMult;
            public Exception? PowerAttackBlockingMult;
            public Exception? BashMult;
            public Exception? BashRecoilMult;
            public Exception? BashAttackMult;
            public Exception? BashPowerAttackMult;
            public Exception? SpecialAttackMult;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CombatStyleMelee_FieldIndex enu = (CombatStyleMelee_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleMelee_FieldIndex.Versioning:
                        return Versioning;
                    case CombatStyleMelee_FieldIndex.AttackStaggeredMult:
                        return AttackStaggeredMult;
                    case CombatStyleMelee_FieldIndex.PowerAttackStaggeredMult:
                        return PowerAttackStaggeredMult;
                    case CombatStyleMelee_FieldIndex.PowerAttackBlockingMult:
                        return PowerAttackBlockingMult;
                    case CombatStyleMelee_FieldIndex.BashMult:
                        return BashMult;
                    case CombatStyleMelee_FieldIndex.BashRecoilMult:
                        return BashRecoilMult;
                    case CombatStyleMelee_FieldIndex.BashAttackMult:
                        return BashAttackMult;
                    case CombatStyleMelee_FieldIndex.BashPowerAttackMult:
                        return BashPowerAttackMult;
                    case CombatStyleMelee_FieldIndex.SpecialAttackMult:
                        return SpecialAttackMult;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CombatStyleMelee_FieldIndex enu = (CombatStyleMelee_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleMelee_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case CombatStyleMelee_FieldIndex.AttackStaggeredMult:
                        this.AttackStaggeredMult = ex;
                        break;
                    case CombatStyleMelee_FieldIndex.PowerAttackStaggeredMult:
                        this.PowerAttackStaggeredMult = ex;
                        break;
                    case CombatStyleMelee_FieldIndex.PowerAttackBlockingMult:
                        this.PowerAttackBlockingMult = ex;
                        break;
                    case CombatStyleMelee_FieldIndex.BashMult:
                        this.BashMult = ex;
                        break;
                    case CombatStyleMelee_FieldIndex.BashRecoilMult:
                        this.BashRecoilMult = ex;
                        break;
                    case CombatStyleMelee_FieldIndex.BashAttackMult:
                        this.BashAttackMult = ex;
                        break;
                    case CombatStyleMelee_FieldIndex.BashPowerAttackMult:
                        this.BashPowerAttackMult = ex;
                        break;
                    case CombatStyleMelee_FieldIndex.SpecialAttackMult:
                        this.SpecialAttackMult = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CombatStyleMelee_FieldIndex enu = (CombatStyleMelee_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyleMelee_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case CombatStyleMelee_FieldIndex.AttackStaggeredMult:
                        this.AttackStaggeredMult = (Exception?)obj;
                        break;
                    case CombatStyleMelee_FieldIndex.PowerAttackStaggeredMult:
                        this.PowerAttackStaggeredMult = (Exception?)obj;
                        break;
                    case CombatStyleMelee_FieldIndex.PowerAttackBlockingMult:
                        this.PowerAttackBlockingMult = (Exception?)obj;
                        break;
                    case CombatStyleMelee_FieldIndex.BashMult:
                        this.BashMult = (Exception?)obj;
                        break;
                    case CombatStyleMelee_FieldIndex.BashRecoilMult:
                        this.BashRecoilMult = (Exception?)obj;
                        break;
                    case CombatStyleMelee_FieldIndex.BashAttackMult:
                        this.BashAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleMelee_FieldIndex.BashPowerAttackMult:
                        this.BashPowerAttackMult = (Exception?)obj;
                        break;
                    case CombatStyleMelee_FieldIndex.SpecialAttackMult:
                        this.SpecialAttackMult = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (AttackStaggeredMult != null) return true;
                if (PowerAttackStaggeredMult != null) return true;
                if (PowerAttackBlockingMult != null) return true;
                if (BashMult != null) return true;
                if (BashRecoilMult != null) return true;
                if (BashAttackMult != null) return true;
                if (BashPowerAttackMult != null) return true;
                if (SpecialAttackMult != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(AttackStaggeredMult, "AttackStaggeredMult");
                fg.AppendItem(PowerAttackStaggeredMult, "PowerAttackStaggeredMult");
                fg.AppendItem(PowerAttackBlockingMult, "PowerAttackBlockingMult");
                fg.AppendItem(BashMult, "BashMult");
                fg.AppendItem(BashRecoilMult, "BashRecoilMult");
                fg.AppendItem(BashAttackMult, "BashAttackMult");
                fg.AppendItem(BashPowerAttackMult, "BashPowerAttackMult");
                fg.AppendItem(SpecialAttackMult, "SpecialAttackMult");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.AttackStaggeredMult = this.AttackStaggeredMult.Combine(rhs.AttackStaggeredMult);
                ret.PowerAttackStaggeredMult = this.PowerAttackStaggeredMult.Combine(rhs.PowerAttackStaggeredMult);
                ret.PowerAttackBlockingMult = this.PowerAttackBlockingMult.Combine(rhs.PowerAttackBlockingMult);
                ret.BashMult = this.BashMult.Combine(rhs.BashMult);
                ret.BashRecoilMult = this.BashRecoilMult.Combine(rhs.BashRecoilMult);
                ret.BashAttackMult = this.BashAttackMult.Combine(rhs.BashAttackMult);
                ret.BashPowerAttackMult = this.BashPowerAttackMult.Combine(rhs.BashPowerAttackMult);
                ret.SpecialAttackMult = this.SpecialAttackMult.Combine(rhs.SpecialAttackMult);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool AttackStaggeredMult;
            public bool PowerAttackStaggeredMult;
            public bool PowerAttackBlockingMult;
            public bool BashMult;
            public bool BashRecoilMult;
            public bool BashAttackMult;
            public bool BashPowerAttackMult;
            public bool SpecialAttackMult;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.AttackStaggeredMult = defaultOn;
                this.PowerAttackStaggeredMult = defaultOn;
                this.PowerAttackBlockingMult = defaultOn;
                this.BashMult = defaultOn;
                this.BashRecoilMult = defaultOn;
                this.BashAttackMult = defaultOn;
                this.BashPowerAttackMult = defaultOn;
                this.SpecialAttackMult = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((AttackStaggeredMult, null));
                ret.Add((PowerAttackStaggeredMult, null));
                ret.Add((PowerAttackBlockingMult, null));
                ret.Add((BashMult, null));
                ret.Add((BashRecoilMult, null));
                ret.Add((BashAttackMult, null));
                ret.Add((BashPowerAttackMult, null));
                ret.Add((SpecialAttackMult, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CombatStyleMelee_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleMeleeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleMeleeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static CombatStyleMelee CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CombatStyleMelee();
            ((CombatStyleMeleeSetterCommon)((ICombatStyleMeleeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CombatStyleMelee item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CombatStyleMeleeSetterCommon)((ICombatStyleMeleeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CombatStyleMelee GetNew()
        {
            return new CombatStyleMelee();
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStyleMelee :
        ICombatStyleMeleeGetter,
        ILoquiObjectSetter<ICombatStyleMelee>
    {
        new CombatStyleMelee.VersioningBreaks Versioning { get; set; }
        new Single AttackStaggeredMult { get; set; }
        new Single PowerAttackStaggeredMult { get; set; }
        new Single PowerAttackBlockingMult { get; set; }
        new Single BashMult { get; set; }
        new Single BashRecoilMult { get; set; }
        new Single BashAttackMult { get; set; }
        new Single BashPowerAttackMult { get; set; }
        new Single SpecialAttackMult { get; set; }
    }

    public partial interface ICombatStyleMeleeGetter :
        ILoquiObject,
        ILoquiObject<ICombatStyleMeleeGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => CombatStyleMelee_Registration.Instance;
        CombatStyleMelee.VersioningBreaks Versioning { get; }
        Single AttackStaggeredMult { get; }
        Single PowerAttackStaggeredMult { get; }
        Single PowerAttackBlockingMult { get; }
        Single BashMult { get; }
        Single BashRecoilMult { get; }
        Single BashAttackMult { get; }
        Single BashPowerAttackMult { get; }
        Single SpecialAttackMult { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CombatStyleMeleeMixIn
    {
        public static void Clear(this ICombatStyleMelee item)
        {
            ((CombatStyleMeleeSetterCommon)((ICombatStyleMeleeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CombatStyleMelee.Mask<bool> GetEqualsMask(
            this ICombatStyleMeleeGetter item,
            ICombatStyleMeleeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICombatStyleMeleeGetter item,
            string? name = null,
            CombatStyleMelee.Mask<bool>? printMask = null)
        {
            return ((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICombatStyleMeleeGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyleMelee.Mask<bool>? printMask = null)
        {
            ((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICombatStyleMeleeGetter item,
            ICombatStyleMeleeGetter rhs)
        {
            return ((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICombatStyleMelee lhs,
            ICombatStyleMeleeGetter rhs)
        {
            ((CombatStyleMeleeSetterTranslationCommon)((ICombatStyleMeleeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStyleMelee lhs,
            ICombatStyleMeleeGetter rhs,
            CombatStyleMelee.TranslationMask? copyMask = null)
        {
            ((CombatStyleMeleeSetterTranslationCommon)((ICombatStyleMeleeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICombatStyleMelee lhs,
            ICombatStyleMeleeGetter rhs,
            out CombatStyleMelee.ErrorMask errorMask,
            CombatStyleMelee.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleMeleeSetterTranslationCommon)((ICombatStyleMeleeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CombatStyleMelee.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICombatStyleMelee lhs,
            ICombatStyleMeleeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CombatStyleMeleeSetterTranslationCommon)((ICombatStyleMeleeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CombatStyleMelee DeepCopy(
            this ICombatStyleMeleeGetter item,
            CombatStyleMelee.TranslationMask? copyMask = null)
        {
            return ((CombatStyleMeleeSetterTranslationCommon)((ICombatStyleMeleeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CombatStyleMelee DeepCopy(
            this ICombatStyleMeleeGetter item,
            out CombatStyleMelee.ErrorMask errorMask,
            CombatStyleMelee.TranslationMask? copyMask = null)
        {
            return ((CombatStyleMeleeSetterTranslationCommon)((ICombatStyleMeleeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CombatStyleMelee DeepCopy(
            this ICombatStyleMeleeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CombatStyleMeleeSetterTranslationCommon)((ICombatStyleMeleeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICombatStyleMelee item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleMeleeSetterCommon)((ICombatStyleMeleeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum CombatStyleMelee_FieldIndex
    {
        Versioning = 0,
        AttackStaggeredMult = 1,
        PowerAttackStaggeredMult = 2,
        PowerAttackBlockingMult = 3,
        BashMult = 4,
        BashRecoilMult = 5,
        BashAttackMult = 6,
        BashPowerAttackMult = 7,
        SpecialAttackMult = 8,
    }
    #endregion

    #region Registration
    public partial class CombatStyleMelee_Registration : ILoquiRegistration
    {
        public static readonly CombatStyleMelee_Registration Instance = new CombatStyleMelee_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 396,
            version: 0);

        public const string GUID = "b0968dab-5dff-40f8-8969-dfeb8cb53ef7";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(CombatStyleMelee.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyleMelee.ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyleMelee);

        public static readonly Type GetterType = typeof(ICombatStyleMeleeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStyleMelee);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.CombatStyleMelee";

        public const string Name = "CombatStyleMelee";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CSME;
        public static readonly Type BinaryWriteTranslation = typeof(CombatStyleMeleeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CombatStyleMeleeSetterCommon
    {
        public static readonly CombatStyleMeleeSetterCommon Instance = new CombatStyleMeleeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICombatStyleMelee item)
        {
            ClearPartial();
            item.Versioning = default;
            item.AttackStaggeredMult = default;
            item.PowerAttackStaggeredMult = default;
            item.PowerAttackBlockingMult = default;
            item.BashMult = default;
            item.BashRecoilMult = default;
            item.BashAttackMult = default;
            item.BashPowerAttackMult = default;
            item.SpecialAttackMult = default;
        }
        
        #region Mutagen
        public void RemapLinks(ICombatStyleMelee obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICombatStyleMelee item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.CSME)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CombatStyleMeleeBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CombatStyleMeleeCommon
    {
        public static readonly CombatStyleMeleeCommon Instance = new CombatStyleMeleeCommon();

        public CombatStyleMelee.Mask<bool> GetEqualsMask(
            ICombatStyleMeleeGetter item,
            ICombatStyleMeleeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStyleMelee.Mask<bool>(false);
            ((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICombatStyleMeleeGetter item,
            ICombatStyleMeleeGetter rhs,
            CombatStyleMelee.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.AttackStaggeredMult = item.AttackStaggeredMult.EqualsWithin(rhs.AttackStaggeredMult);
            ret.PowerAttackStaggeredMult = item.PowerAttackStaggeredMult.EqualsWithin(rhs.PowerAttackStaggeredMult);
            ret.PowerAttackBlockingMult = item.PowerAttackBlockingMult.EqualsWithin(rhs.PowerAttackBlockingMult);
            ret.BashMult = item.BashMult.EqualsWithin(rhs.BashMult);
            ret.BashRecoilMult = item.BashRecoilMult.EqualsWithin(rhs.BashRecoilMult);
            ret.BashAttackMult = item.BashAttackMult.EqualsWithin(rhs.BashAttackMult);
            ret.BashPowerAttackMult = item.BashPowerAttackMult.EqualsWithin(rhs.BashPowerAttackMult);
            ret.SpecialAttackMult = item.SpecialAttackMult.EqualsWithin(rhs.SpecialAttackMult);
        }
        
        public string ToString(
            ICombatStyleMeleeGetter item,
            string? name = null,
            CombatStyleMelee.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICombatStyleMeleeGetter item,
            FileGeneration fg,
            string? name = null,
            CombatStyleMelee.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CombatStyleMelee =>");
            }
            else
            {
                fg.AppendLine($"{name} (CombatStyleMelee) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICombatStyleMeleeGetter item,
            FileGeneration fg,
            CombatStyleMelee.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.AttackStaggeredMult ?? true)
            {
                fg.AppendItem(item.AttackStaggeredMult, "AttackStaggeredMult");
            }
            if (printMask?.PowerAttackStaggeredMult ?? true)
            {
                fg.AppendItem(item.PowerAttackStaggeredMult, "PowerAttackStaggeredMult");
            }
            if (printMask?.PowerAttackBlockingMult ?? true)
            {
                fg.AppendItem(item.PowerAttackBlockingMult, "PowerAttackBlockingMult");
            }
            if (printMask?.BashMult ?? true)
            {
                fg.AppendItem(item.BashMult, "BashMult");
            }
            if (printMask?.BashRecoilMult ?? true)
            {
                fg.AppendItem(item.BashRecoilMult, "BashRecoilMult");
            }
            if (printMask?.BashAttackMult ?? true)
            {
                fg.AppendItem(item.BashAttackMult, "BashAttackMult");
            }
            if (printMask?.BashPowerAttackMult ?? true)
            {
                fg.AppendItem(item.BashPowerAttackMult, "BashPowerAttackMult");
            }
            if (printMask?.SpecialAttackMult ?? true)
            {
                fg.AppendItem(item.SpecialAttackMult, "SpecialAttackMult");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICombatStyleMeleeGetter? lhs,
            ICombatStyleMeleeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (!lhs.AttackStaggeredMult.EqualsWithin(rhs.AttackStaggeredMult)) return false;
            if (!lhs.PowerAttackStaggeredMult.EqualsWithin(rhs.PowerAttackStaggeredMult)) return false;
            if (!lhs.PowerAttackBlockingMult.EqualsWithin(rhs.PowerAttackBlockingMult)) return false;
            if (!lhs.BashMult.EqualsWithin(rhs.BashMult)) return false;
            if (!lhs.BashRecoilMult.EqualsWithin(rhs.BashRecoilMult)) return false;
            if (!lhs.BashAttackMult.EqualsWithin(rhs.BashAttackMult)) return false;
            if (!lhs.BashPowerAttackMult.EqualsWithin(rhs.BashPowerAttackMult)) return false;
            if (!lhs.SpecialAttackMult.EqualsWithin(rhs.SpecialAttackMult)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ICombatStyleMeleeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.AttackStaggeredMult);
            hash.Add(item.PowerAttackStaggeredMult);
            hash.Add(item.PowerAttackBlockingMult);
            hash.Add(item.BashMult);
            hash.Add(item.BashRecoilMult);
            hash.Add(item.BashAttackMult);
            hash.Add(item.BashPowerAttackMult);
            hash.Add(item.SpecialAttackMult);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CombatStyleMelee.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ICombatStyleMeleeGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class CombatStyleMeleeSetterTranslationCommon
    {
        public static readonly CombatStyleMeleeSetterTranslationCommon Instance = new CombatStyleMeleeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICombatStyleMelee item,
            ICombatStyleMeleeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CombatStyleMelee_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleMelee_FieldIndex.AttackStaggeredMult) ?? true))
            {
                item.AttackStaggeredMult = rhs.AttackStaggeredMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleMelee_FieldIndex.PowerAttackStaggeredMult) ?? true))
            {
                item.PowerAttackStaggeredMult = rhs.PowerAttackStaggeredMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleMelee_FieldIndex.PowerAttackBlockingMult) ?? true))
            {
                item.PowerAttackBlockingMult = rhs.PowerAttackBlockingMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleMelee_FieldIndex.BashMult) ?? true))
            {
                item.BashMult = rhs.BashMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleMelee_FieldIndex.BashRecoilMult) ?? true))
            {
                item.BashRecoilMult = rhs.BashRecoilMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleMelee_FieldIndex.BashAttackMult) ?? true))
            {
                item.BashAttackMult = rhs.BashAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyleMelee_FieldIndex.BashPowerAttackMult) ?? true))
            {
                item.BashPowerAttackMult = rhs.BashPowerAttackMult;
            }
            if (rhs.Versioning.HasFlag(CombatStyleMelee.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)CombatStyleMelee_FieldIndex.SpecialAttackMult) ?? true))
            {
                item.SpecialAttackMult = rhs.SpecialAttackMult;
            }
        }
        
        #endregion
        
        public CombatStyleMelee DeepCopy(
            ICombatStyleMeleeGetter item,
            CombatStyleMelee.TranslationMask? copyMask = null)
        {
            CombatStyleMelee ret = (CombatStyleMelee)((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleMeleeSetterTranslationCommon)((ICombatStyleMeleeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CombatStyleMelee DeepCopy(
            ICombatStyleMeleeGetter item,
            out CombatStyleMelee.ErrorMask errorMask,
            CombatStyleMelee.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CombatStyleMelee ret = (CombatStyleMelee)((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleMeleeSetterTranslationCommon)((ICombatStyleMeleeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CombatStyleMelee.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CombatStyleMelee DeepCopy(
            ICombatStyleMeleeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CombatStyleMelee ret = (CombatStyleMelee)((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleMeleeSetterTranslationCommon)((ICombatStyleMeleeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class CombatStyleMelee
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleMelee_Registration.Instance;
        public static CombatStyleMelee_Registration Registration => CombatStyleMelee_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleMeleeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CombatStyleMeleeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleMeleeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleMeleeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICombatStyleMeleeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICombatStyleMeleeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CombatStyleMeleeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CombatStyleMeleeBinaryWriteTranslation Instance = new CombatStyleMeleeBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICombatStyleMeleeGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AttackStaggeredMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.PowerAttackStaggeredMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.PowerAttackBlockingMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BashMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BashRecoilMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BashAttackMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BashPowerAttackMult);
            if (!item.Versioning.HasFlag(CombatStyleMelee.VersioningBreaks.Break0))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SpecialAttackMult);
            }
        }

        public void Write(
            MutagenWriter writer,
            ICombatStyleMeleeGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.CSME),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICombatStyleMeleeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CombatStyleMeleeBinaryCreateTranslation
    {
        public readonly static CombatStyleMeleeBinaryCreateTranslation Instance = new CombatStyleMeleeBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICombatStyleMelee item,
            MutagenFrame frame)
        {
            item.AttackStaggeredMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.PowerAttackStaggeredMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.PowerAttackBlockingMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BashMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BashRecoilMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BashAttackMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BashPowerAttackMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= CombatStyleMelee.VersioningBreaks.Break0;
                return;
            }
            item.SpecialAttackMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class CombatStyleMeleeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICombatStyleMeleeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleMeleeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CombatStyleMeleeBinaryOverlay :
        BinaryOverlay,
        ICombatStyleMeleeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyleMelee_Registration.Instance;
        public static CombatStyleMelee_Registration Registration => CombatStyleMelee_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CombatStyleMeleeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CombatStyleMeleeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICombatStyleMeleeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICombatStyleMeleeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICombatStyleMeleeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CombatStyleMeleeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CombatStyleMeleeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public CombatStyleMelee.VersioningBreaks Versioning { get; private set; }
        public Single AttackStaggeredMult => _data.Slice(0x0, 0x4).Float();
        public Single PowerAttackStaggeredMult => _data.Slice(0x4, 0x4).Float();
        public Single PowerAttackBlockingMult => _data.Slice(0x8, 0x4).Float();
        public Single BashMult => _data.Slice(0xC, 0x4).Float();
        public Single BashRecoilMult => _data.Slice(0x10, 0x4).Float();
        public Single BashAttackMult => _data.Slice(0x14, 0x4).Float();
        public Single BashPowerAttackMult => _data.Slice(0x18, 0x4).Float();
        public Single SpecialAttackMult => _data.Slice(0x1C, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CombatStyleMeleeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CombatStyleMeleeBinaryOverlay CombatStyleMeleeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CombatStyleMeleeBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0x1C)
            {
                ret.Versioning |= CombatStyleMelee.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CombatStyleMeleeBinaryOverlay CombatStyleMeleeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CombatStyleMeleeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CombatStyleMeleeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICombatStyleMeleeGetter rhs)) return false;
            return ((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICombatStyleMeleeGetter? obj)
        {
            return ((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CombatStyleMeleeCommon)((ICombatStyleMeleeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

