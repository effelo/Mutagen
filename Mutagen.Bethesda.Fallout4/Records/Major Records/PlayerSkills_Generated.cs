/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PlayerSkills :
        IPlayerSkills,
        ILoquiObjectSetter<PlayerSkills>,
        IEquatable<IPlayerSkillsGetter>
    {
        #region Ctor
        public PlayerSkills()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SkillValues
        private readonly Dictionary<Skill, Byte> _SkillValues = new Dictionary<Skill, Byte>();
        public IDictionary<Skill, Byte> SkillValues => _SkillValues;
        #region Interface Members
        IDictionary<Skill, Byte> IPlayerSkills.SkillValues => _SkillValues;
        IReadOnlyDictionary<Skill, Byte> IPlayerSkillsGetter.SkillValues => _SkillValues;
        #endregion

        #endregion
        #region SkillOffsets
        private readonly Dictionary<Skill, Byte> _SkillOffsets = new Dictionary<Skill, Byte>();
        public IDictionary<Skill, Byte> SkillOffsets => _SkillOffsets;
        #region Interface Members
        IDictionary<Skill, Byte> IPlayerSkills.SkillOffsets => _SkillOffsets;
        IReadOnlyDictionary<Skill, Byte> IPlayerSkillsGetter.SkillOffsets => _SkillOffsets;
        #endregion

        #endregion
        #region Health
        public UInt16 Health { get; set; } = default;
        #endregion
        #region Magicka
        public UInt16 Magicka { get; set; } = default;
        #endregion
        #region Stamina
        public UInt16 Stamina { get; set; } = default;
        #endregion
        #region Unused
        public UInt16 Unused { get; set; } = default;
        #endregion
        #region FarAwayModelDistance
        public Single FarAwayModelDistance { get; set; } = default;
        #endregion
        #region GearedUpWeapons
        public Byte GearedUpWeapons { get; set; } = default;
        #endregion
        #region Unused2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unused2 = new byte[3];
        public MemorySlice<Byte> Unused2
        {
            get => _Unused2;
            set => this._Unused2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IPlayerSkillsGetter.Unused2 => this.Unused2;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlayerSkillsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlayerSkillsGetter rhs)) return false;
            return ((PlayerSkillsCommon)((IPlayerSkillsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPlayerSkillsGetter? obj)
        {
            return ((PlayerSkillsCommon)((IPlayerSkillsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlayerSkillsCommon)((IPlayerSkillsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.SkillValues = new MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>(initialValue, null);
                this.SkillOffsets = new MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>(initialValue, null);
                this.Health = initialValue;
                this.Magicka = initialValue;
                this.Stamina = initialValue;
                this.Unused = initialValue;
                this.FarAwayModelDistance = initialValue;
                this.GearedUpWeapons = initialValue;
                this.Unused2 = initialValue;
            }

            public Mask(
                TItem SkillValues,
                TItem SkillOffsets,
                TItem Health,
                TItem Magicka,
                TItem Stamina,
                TItem Unused,
                TItem FarAwayModelDistance,
                TItem GearedUpWeapons,
                TItem Unused2)
            {
                this.SkillValues = new MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>(SkillValues, null);
                this.SkillOffsets = new MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>(SkillOffsets, null);
                this.Health = Health;
                this.Magicka = Magicka;
                this.Stamina = Stamina;
                this.Unused = Unused;
                this.FarAwayModelDistance = FarAwayModelDistance;
                this.GearedUpWeapons = GearedUpWeapons;
                this.Unused2 = Unused2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>? SkillValues;
            public MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>? SkillOffsets;
            public TItem Health;
            public TItem Magicka;
            public TItem Stamina;
            public TItem Unused;
            public TItem FarAwayModelDistance;
            public TItem GearedUpWeapons;
            public TItem Unused2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.SkillValues, rhs.SkillValues)) return false;
                if (!object.Equals(this.SkillOffsets, rhs.SkillOffsets)) return false;
                if (!object.Equals(this.Health, rhs.Health)) return false;
                if (!object.Equals(this.Magicka, rhs.Magicka)) return false;
                if (!object.Equals(this.Stamina, rhs.Stamina)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.FarAwayModelDistance, rhs.FarAwayModelDistance)) return false;
                if (!object.Equals(this.GearedUpWeapons, rhs.GearedUpWeapons)) return false;
                if (!object.Equals(this.Unused2, rhs.Unused2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SkillValues);
                hash.Add(this.SkillOffsets);
                hash.Add(this.Health);
                hash.Add(this.Magicka);
                hash.Add(this.Stamina);
                hash.Add(this.Unused);
                hash.Add(this.FarAwayModelDistance);
                hash.Add(this.GearedUpWeapons);
                hash.Add(this.Unused2);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (this.SkillValues != null)
                {
                    if (!eval(this.SkillValues.Overall)) return false;
                    if (this.SkillValues.Specific != null)
                    {
                        foreach (var item in this.SkillValues.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.SkillOffsets != null)
                {
                    if (!eval(this.SkillOffsets.Overall)) return false;
                    if (this.SkillOffsets.Specific != null)
                    {
                        foreach (var item in this.SkillOffsets.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Health)) return false;
                if (!eval(this.Magicka)) return false;
                if (!eval(this.Stamina)) return false;
                if (!eval(this.Unused)) return false;
                if (!eval(this.FarAwayModelDistance)) return false;
                if (!eval(this.GearedUpWeapons)) return false;
                if (!eval(this.Unused2)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (this.SkillValues != null)
                {
                    if (eval(this.SkillValues.Overall)) return true;
                    if (this.SkillValues.Specific != null)
                    {
                        foreach (var item in this.SkillValues.Specific)
                        {
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (this.SkillOffsets != null)
                {
                    if (eval(this.SkillOffsets.Overall)) return true;
                    if (this.SkillOffsets.Specific != null)
                    {
                        foreach (var item in this.SkillOffsets.Specific)
                        {
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (eval(this.Health)) return true;
                if (eval(this.Magicka)) return true;
                if (eval(this.Stamina)) return true;
                if (eval(this.Unused)) return true;
                if (eval(this.FarAwayModelDistance)) return true;
                if (eval(this.GearedUpWeapons)) return true;
                if (eval(this.Unused2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlayerSkills.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                if (SkillValues != null)
                {
                    obj.SkillValues = new MaskItem<R, IEnumerable<KeyValuePair<Skill, R>>?>(eval(this.SkillValues.Overall), default);
                    if (SkillValues.Specific != null)
                    {
                        List<KeyValuePair<Skill, R>> l = new List<KeyValuePair<Skill, R>>();
                        obj.SkillValues.Specific = l;
                        foreach (var item in SkillValues.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                if (SkillOffsets != null)
                {
                    obj.SkillOffsets = new MaskItem<R, IEnumerable<KeyValuePair<Skill, R>>?>(eval(this.SkillOffsets.Overall), default);
                    if (SkillOffsets.Specific != null)
                    {
                        List<KeyValuePair<Skill, R>> l = new List<KeyValuePair<Skill, R>>();
                        obj.SkillOffsets.Specific = l;
                        foreach (var item in SkillOffsets.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                obj.Health = eval(this.Health);
                obj.Magicka = eval(this.Magicka);
                obj.Stamina = eval(this.Stamina);
                obj.Unused = eval(this.Unused);
                obj.FarAwayModelDistance = eval(this.FarAwayModelDistance);
                obj.GearedUpWeapons = eval(this.GearedUpWeapons);
                obj.Unused2 = eval(this.Unused2);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PlayerSkills.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PlayerSkills.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PlayerSkills.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.SkillValues?.Overall ?? true)
                    {
                        fg.AppendLine("SkillValues =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (SkillValues != null)
                            {
                                if (SkillValues.Overall != null)
                                {
                                    fg.AppendLine(SkillValues.Overall.ToString());
                                }
                                if (SkillValues.Specific != null)
                                {
                                    foreach (var subItem in SkillValues.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine("Key => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Key);
                                            }
                                            fg.AppendLine("]");
                                            fg.AppendLine("Value => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Value);
                                            }
                                            fg.AppendLine("]");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.SkillOffsets?.Overall ?? true)
                    {
                        fg.AppendLine("SkillOffsets =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (SkillOffsets != null)
                            {
                                if (SkillOffsets.Overall != null)
                                {
                                    fg.AppendLine(SkillOffsets.Overall.ToString());
                                }
                                if (SkillOffsets.Specific != null)
                                {
                                    foreach (var subItem in SkillOffsets.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine("Key => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Key);
                                            }
                                            fg.AppendLine("]");
                                            fg.AppendLine("Value => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Value);
                                            }
                                            fg.AppendLine("]");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Health ?? true)
                    {
                        fg.AppendItem(Health, "Health");
                    }
                    if (printMask?.Magicka ?? true)
                    {
                        fg.AppendItem(Magicka, "Magicka");
                    }
                    if (printMask?.Stamina ?? true)
                    {
                        fg.AppendItem(Stamina, "Stamina");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        fg.AppendItem(Unused, "Unused");
                    }
                    if (printMask?.FarAwayModelDistance ?? true)
                    {
                        fg.AppendItem(FarAwayModelDistance, "FarAwayModelDistance");
                    }
                    if (printMask?.GearedUpWeapons ?? true)
                    {
                        fg.AppendItem(GearedUpWeapons, "GearedUpWeapons");
                    }
                    if (printMask?.Unused2 ?? true)
                    {
                        fg.AppendItem(Unused2, "Unused2");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>? SkillValues;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>? SkillOffsets;
            public Exception? Health;
            public Exception? Magicka;
            public Exception? Stamina;
            public Exception? Unused;
            public Exception? FarAwayModelDistance;
            public Exception? GearedUpWeapons;
            public Exception? Unused2;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PlayerSkills_FieldIndex enu = (PlayerSkills_FieldIndex)index;
                switch (enu)
                {
                    case PlayerSkills_FieldIndex.SkillValues:
                        return SkillValues;
                    case PlayerSkills_FieldIndex.SkillOffsets:
                        return SkillOffsets;
                    case PlayerSkills_FieldIndex.Health:
                        return Health;
                    case PlayerSkills_FieldIndex.Magicka:
                        return Magicka;
                    case PlayerSkills_FieldIndex.Stamina:
                        return Stamina;
                    case PlayerSkills_FieldIndex.Unused:
                        return Unused;
                    case PlayerSkills_FieldIndex.FarAwayModelDistance:
                        return FarAwayModelDistance;
                    case PlayerSkills_FieldIndex.GearedUpWeapons:
                        return GearedUpWeapons;
                    case PlayerSkills_FieldIndex.Unused2:
                        return Unused2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PlayerSkills_FieldIndex enu = (PlayerSkills_FieldIndex)index;
                switch (enu)
                {
                    case PlayerSkills_FieldIndex.SkillValues:
                        this.SkillValues = new MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>(ex, null);
                        break;
                    case PlayerSkills_FieldIndex.SkillOffsets:
                        this.SkillOffsets = new MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>(ex, null);
                        break;
                    case PlayerSkills_FieldIndex.Health:
                        this.Health = ex;
                        break;
                    case PlayerSkills_FieldIndex.Magicka:
                        this.Magicka = ex;
                        break;
                    case PlayerSkills_FieldIndex.Stamina:
                        this.Stamina = ex;
                        break;
                    case PlayerSkills_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    case PlayerSkills_FieldIndex.FarAwayModelDistance:
                        this.FarAwayModelDistance = ex;
                        break;
                    case PlayerSkills_FieldIndex.GearedUpWeapons:
                        this.GearedUpWeapons = ex;
                        break;
                    case PlayerSkills_FieldIndex.Unused2:
                        this.Unused2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PlayerSkills_FieldIndex enu = (PlayerSkills_FieldIndex)index;
                switch (enu)
                {
                    case PlayerSkills_FieldIndex.SkillValues:
                        this.SkillValues = (MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>)obj;
                        break;
                    case PlayerSkills_FieldIndex.SkillOffsets:
                        this.SkillOffsets = (MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>)obj;
                        break;
                    case PlayerSkills_FieldIndex.Health:
                        this.Health = (Exception?)obj;
                        break;
                    case PlayerSkills_FieldIndex.Magicka:
                        this.Magicka = (Exception?)obj;
                        break;
                    case PlayerSkills_FieldIndex.Stamina:
                        this.Stamina = (Exception?)obj;
                        break;
                    case PlayerSkills_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    case PlayerSkills_FieldIndex.FarAwayModelDistance:
                        this.FarAwayModelDistance = (Exception?)obj;
                        break;
                    case PlayerSkills_FieldIndex.GearedUpWeapons:
                        this.GearedUpWeapons = (Exception?)obj;
                        break;
                    case PlayerSkills_FieldIndex.Unused2:
                        this.Unused2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (SkillValues != null) return true;
                if (SkillOffsets != null) return true;
                if (Health != null) return true;
                if (Magicka != null) return true;
                if (Stamina != null) return true;
                if (Unused != null) return true;
                if (FarAwayModelDistance != null) return true;
                if (GearedUpWeapons != null) return true;
                if (Unused2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendLine("SkillValues =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (SkillValues != null)
                    {
                        if (SkillValues.Overall != null)
                        {
                            fg.AppendLine(SkillValues.Overall.ToString());
                        }
                        if (SkillValues.Specific != null)
                        {
                            foreach (var subItem in SkillValues.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Key);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Value);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendLine("SkillOffsets =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (SkillOffsets != null)
                    {
                        if (SkillOffsets.Overall != null)
                        {
                            fg.AppendLine(SkillOffsets.Overall.ToString());
                        }
                        if (SkillOffsets.Specific != null)
                        {
                            foreach (var subItem in SkillOffsets.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Key);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Value);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendItem(Health, "Health");
                fg.AppendItem(Magicka, "Magicka");
                fg.AppendItem(Stamina, "Stamina");
                fg.AppendItem(Unused, "Unused");
                fg.AppendItem(FarAwayModelDistance, "FarAwayModelDistance");
                fg.AppendItem(GearedUpWeapons, "GearedUpWeapons");
                fg.AppendItem(Unused2, "Unused2");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SkillValues = new MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>(ExceptionExt.Combine(this.SkillValues?.Overall, rhs.SkillValues?.Overall), ExceptionExt.Combine(this.SkillValues?.Specific, rhs.SkillValues?.Specific));
                ret.SkillOffsets = new MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>(ExceptionExt.Combine(this.SkillOffsets?.Overall, rhs.SkillOffsets?.Overall), ExceptionExt.Combine(this.SkillOffsets?.Specific, rhs.SkillOffsets?.Specific));
                ret.Health = this.Health.Combine(rhs.Health);
                ret.Magicka = this.Magicka.Combine(rhs.Magicka);
                ret.Stamina = this.Stamina.Combine(rhs.Stamina);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                ret.FarAwayModelDistance = this.FarAwayModelDistance.Combine(rhs.FarAwayModelDistance);
                ret.GearedUpWeapons = this.GearedUpWeapons.Combine(rhs.GearedUpWeapons);
                ret.Unused2 = this.Unused2.Combine(rhs.Unused2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool SkillValues;
            public bool SkillOffsets;
            public bool Health;
            public bool Magicka;
            public bool Stamina;
            public bool Unused;
            public bool FarAwayModelDistance;
            public bool GearedUpWeapons;
            public bool Unused2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.SkillValues = defaultOn;
                this.SkillOffsets = defaultOn;
                this.Health = defaultOn;
                this.Magicka = defaultOn;
                this.Stamina = defaultOn;
                this.Unused = defaultOn;
                this.FarAwayModelDistance = defaultOn;
                this.GearedUpWeapons = defaultOn;
                this.Unused2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((SkillValues, null));
                ret.Add((SkillOffsets, null));
                ret.Add((Health, null));
                ret.Add((Magicka, null));
                ret.Add((Stamina, null));
                ret.Add((Unused, null));
                ret.Add((FarAwayModelDistance, null));
                ret.Add((GearedUpWeapons, null));
                ret.Add((Unused2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PlayerSkills_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlayerSkillsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlayerSkillsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static PlayerSkills CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PlayerSkills();
            ((PlayerSkillsSetterCommon)((IPlayerSkillsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlayerSkills item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PlayerSkillsSetterCommon)((IPlayerSkillsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PlayerSkills GetNew()
        {
            return new PlayerSkills();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlayerSkills :
        IPlayerSkillsGetter,
        ILoquiObjectSetter<IPlayerSkills>
    {
        new IDictionary<Skill, Byte> SkillValues { get; }
        new IDictionary<Skill, Byte> SkillOffsets { get; }
        new UInt16 Health { get; set; }
        new UInt16 Magicka { get; set; }
        new UInt16 Stamina { get; set; }
        new UInt16 Unused { get; set; }
        new Single FarAwayModelDistance { get; set; }
        new Byte GearedUpWeapons { get; set; }
        new MemorySlice<Byte> Unused2 { get; set; }
    }

    public partial interface IPlayerSkillsGetter :
        ILoquiObject,
        ILoquiObject<IPlayerSkillsGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => PlayerSkills_Registration.Instance;
        IReadOnlyDictionary<Skill, Byte> SkillValues { get; }
        IReadOnlyDictionary<Skill, Byte> SkillOffsets { get; }
        UInt16 Health { get; }
        UInt16 Magicka { get; }
        UInt16 Stamina { get; }
        UInt16 Unused { get; }
        Single FarAwayModelDistance { get; }
        Byte GearedUpWeapons { get; }
        ReadOnlyMemorySlice<Byte> Unused2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlayerSkillsMixIn
    {
        public static void Clear(this IPlayerSkills item)
        {
            ((PlayerSkillsSetterCommon)((IPlayerSkillsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlayerSkills.Mask<bool> GetEqualsMask(
            this IPlayerSkillsGetter item,
            IPlayerSkillsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlayerSkillsCommon)((IPlayerSkillsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPlayerSkillsGetter item,
            string? name = null,
            PlayerSkills.Mask<bool>? printMask = null)
        {
            return ((PlayerSkillsCommon)((IPlayerSkillsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPlayerSkillsGetter item,
            FileGeneration fg,
            string? name = null,
            PlayerSkills.Mask<bool>? printMask = null)
        {
            ((PlayerSkillsCommon)((IPlayerSkillsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlayerSkillsGetter item,
            IPlayerSkillsGetter rhs)
        {
            return ((PlayerSkillsCommon)((IPlayerSkillsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPlayerSkills lhs,
            IPlayerSkillsGetter rhs)
        {
            ((PlayerSkillsSetterTranslationCommon)((IPlayerSkillsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlayerSkills lhs,
            IPlayerSkillsGetter rhs,
            PlayerSkills.TranslationMask? copyMask = null)
        {
            ((PlayerSkillsSetterTranslationCommon)((IPlayerSkillsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlayerSkills lhs,
            IPlayerSkillsGetter rhs,
            out PlayerSkills.ErrorMask errorMask,
            PlayerSkills.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlayerSkillsSetterTranslationCommon)((IPlayerSkillsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlayerSkills.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlayerSkills lhs,
            IPlayerSkillsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlayerSkillsSetterTranslationCommon)((IPlayerSkillsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlayerSkills DeepCopy(
            this IPlayerSkillsGetter item,
            PlayerSkills.TranslationMask? copyMask = null)
        {
            return ((PlayerSkillsSetterTranslationCommon)((IPlayerSkillsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlayerSkills DeepCopy(
            this IPlayerSkillsGetter item,
            out PlayerSkills.ErrorMask errorMask,
            PlayerSkills.TranslationMask? copyMask = null)
        {
            return ((PlayerSkillsSetterTranslationCommon)((IPlayerSkillsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlayerSkills DeepCopy(
            this IPlayerSkillsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlayerSkillsSetterTranslationCommon)((IPlayerSkillsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlayerSkills item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlayerSkillsSetterCommon)((IPlayerSkillsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PlayerSkills_FieldIndex
    {
        SkillValues = 0,
        SkillOffsets = 1,
        Health = 2,
        Magicka = 3,
        Stamina = 4,
        Unused = 5,
        FarAwayModelDistance = 6,
        GearedUpWeapons = 7,
        Unused2 = 8,
    }
    #endregion

    #region Registration
    public partial class PlayerSkills_Registration : ILoquiRegistration
    {
        public static readonly PlayerSkills_Registration Instance = new PlayerSkills_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 209,
            version: 0);

        public const string GUID = "c03007ea-a1f3-4964-aa68-166d211a5176";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(PlayerSkills.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlayerSkills.ErrorMask);

        public static readonly Type ClassType = typeof(PlayerSkills);

        public static readonly Type GetterType = typeof(IPlayerSkillsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlayerSkills);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PlayerSkills";

        public const string Name = "PlayerSkills";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DNAM;
        public static readonly Type BinaryWriteTranslation = typeof(PlayerSkillsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PlayerSkillsSetterCommon
    {
        public static readonly PlayerSkillsSetterCommon Instance = new PlayerSkillsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlayerSkills item)
        {
            ClearPartial();
            item.SkillValues.Clear();
            item.SkillOffsets.Clear();
            item.Health = default;
            item.Magicka = default;
            item.Stamina = default;
            item.Unused = default;
            item.FarAwayModelDistance = default;
            item.GearedUpWeapons = default;
            item.Unused2 = new byte[3];
        }
        
        #region Mutagen
        public void RemapLinks(IPlayerSkills obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlayerSkills item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.DNAM)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PlayerSkillsBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class PlayerSkillsCommon
    {
        public static readonly PlayerSkillsCommon Instance = new PlayerSkillsCommon();

        public PlayerSkills.Mask<bool> GetEqualsMask(
            IPlayerSkillsGetter item,
            IPlayerSkillsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlayerSkills.Mask<bool>(false);
            ((PlayerSkillsCommon)((IPlayerSkillsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlayerSkillsGetter item,
            IPlayerSkillsGetter rhs,
            PlayerSkills.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.SkillValues = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.SkillValues,
                rhs: rhs.SkillValues,
                include: include);
            ret.SkillOffsets = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.SkillOffsets,
                rhs: rhs.SkillOffsets,
                include: include);
            ret.Health = item.Health == rhs.Health;
            ret.Magicka = item.Magicka == rhs.Magicka;
            ret.Stamina = item.Stamina == rhs.Stamina;
            ret.Unused = item.Unused == rhs.Unused;
            ret.FarAwayModelDistance = item.FarAwayModelDistance.EqualsWithin(rhs.FarAwayModelDistance);
            ret.GearedUpWeapons = item.GearedUpWeapons == rhs.GearedUpWeapons;
            ret.Unused2 = MemoryExtensions.SequenceEqual(item.Unused2.Span, rhs.Unused2.Span);
        }
        
        public string ToString(
            IPlayerSkillsGetter item,
            string? name = null,
            PlayerSkills.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPlayerSkillsGetter item,
            FileGeneration fg,
            string? name = null,
            PlayerSkills.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PlayerSkills =>");
            }
            else
            {
                fg.AppendLine($"{name} (PlayerSkills) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPlayerSkillsGetter item,
            FileGeneration fg,
            PlayerSkills.Mask<bool>? printMask = null)
        {
            if (printMask?.SkillValues?.Overall ?? true)
            {
                fg.AppendLine("SkillValues =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SkillValues)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.Key);
                            fg.AppendItem(subItem.Value);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.SkillOffsets?.Overall ?? true)
            {
                fg.AppendLine("SkillOffsets =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SkillOffsets)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.Key);
                            fg.AppendItem(subItem.Value);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Health ?? true)
            {
                fg.AppendItem(item.Health, "Health");
            }
            if (printMask?.Magicka ?? true)
            {
                fg.AppendItem(item.Magicka, "Magicka");
            }
            if (printMask?.Stamina ?? true)
            {
                fg.AppendItem(item.Stamina, "Stamina");
            }
            if (printMask?.Unused ?? true)
            {
                fg.AppendItem(item.Unused, "Unused");
            }
            if (printMask?.FarAwayModelDistance ?? true)
            {
                fg.AppendItem(item.FarAwayModelDistance, "FarAwayModelDistance");
            }
            if (printMask?.GearedUpWeapons ?? true)
            {
                fg.AppendItem(item.GearedUpWeapons, "GearedUpWeapons");
            }
            if (printMask?.Unused2 ?? true)
            {
                fg.AppendLine($"Unused2 => {SpanExt.ToHexString(item.Unused2)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlayerSkillsGetter? lhs,
            IPlayerSkillsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.SkillValues.SequenceEqualNullable(rhs.SkillValues)) return false;
            if (!lhs.SkillOffsets.SequenceEqualNullable(rhs.SkillOffsets)) return false;
            if (lhs.Health != rhs.Health) return false;
            if (lhs.Magicka != rhs.Magicka) return false;
            if (lhs.Stamina != rhs.Stamina) return false;
            if (lhs.Unused != rhs.Unused) return false;
            if (!lhs.FarAwayModelDistance.EqualsWithin(rhs.FarAwayModelDistance)) return false;
            if (lhs.GearedUpWeapons != rhs.GearedUpWeapons) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unused2.Span, rhs.Unused2.Span)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IPlayerSkillsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.SkillValues);
            hash.Add(item.SkillOffsets);
            hash.Add(item.Health);
            hash.Add(item.Magicka);
            hash.Add(item.Stamina);
            hash.Add(item.Unused);
            hash.Add(item.FarAwayModelDistance);
            hash.Add(item.GearedUpWeapons);
            hash.Add(item.Unused2);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PlayerSkills.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPlayerSkillsGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class PlayerSkillsSetterTranslationCommon
    {
        public static readonly PlayerSkillsSetterTranslationCommon Instance = new PlayerSkillsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlayerSkills item,
            IPlayerSkillsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PlayerSkills_FieldIndex.SkillValues) ?? true))
            {
                item.SkillValues.SetTo(rhs.SkillValues);
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerSkills_FieldIndex.SkillOffsets) ?? true))
            {
                item.SkillOffsets.SetTo(rhs.SkillOffsets);
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerSkills_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerSkills_FieldIndex.Magicka) ?? true))
            {
                item.Magicka = rhs.Magicka;
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerSkills_FieldIndex.Stamina) ?? true))
            {
                item.Stamina = rhs.Stamina;
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerSkills_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused;
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerSkills_FieldIndex.FarAwayModelDistance) ?? true))
            {
                item.FarAwayModelDistance = rhs.FarAwayModelDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerSkills_FieldIndex.GearedUpWeapons) ?? true))
            {
                item.GearedUpWeapons = rhs.GearedUpWeapons;
            }
            if ((copyMask?.GetShouldTranslate((int)PlayerSkills_FieldIndex.Unused2) ?? true))
            {
                item.Unused2 = rhs.Unused2.ToArray();
            }
        }
        
        #endregion
        
        public PlayerSkills DeepCopy(
            IPlayerSkillsGetter item,
            PlayerSkills.TranslationMask? copyMask = null)
        {
            PlayerSkills ret = (PlayerSkills)((PlayerSkillsCommon)((IPlayerSkillsGetter)item).CommonInstance()!).GetNew();
            ((PlayerSkillsSetterTranslationCommon)((IPlayerSkillsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlayerSkills DeepCopy(
            IPlayerSkillsGetter item,
            out PlayerSkills.ErrorMask errorMask,
            PlayerSkills.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlayerSkills ret = (PlayerSkills)((PlayerSkillsCommon)((IPlayerSkillsGetter)item).CommonInstance()!).GetNew();
            ((PlayerSkillsSetterTranslationCommon)((IPlayerSkillsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlayerSkills.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlayerSkills DeepCopy(
            IPlayerSkillsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlayerSkills ret = (PlayerSkills)((PlayerSkillsCommon)((IPlayerSkillsGetter)item).CommonInstance()!).GetNew();
            ((PlayerSkillsSetterTranslationCommon)((IPlayerSkillsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PlayerSkills
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlayerSkills_Registration.Instance;
        public static PlayerSkills_Registration Registration => PlayerSkills_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlayerSkillsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PlayerSkillsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlayerSkillsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlayerSkillsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPlayerSkillsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPlayerSkillsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PlayerSkillsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static PlayerSkillsBinaryWriteTranslation Instance = new PlayerSkillsBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPlayerSkillsGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Write(
                writer: writer,
                items: item.SkillValues,
                transl: ByteBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Write(
                writer: writer,
                items: item.SkillOffsets,
                transl: ByteBinaryTranslation.Instance.Write);
            writer.Write(item.Health);
            writer.Write(item.Magicka);
            writer.Write(item.Stamina);
            writer.Write(item.Unused);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FarAwayModelDistance);
            writer.Write(item.GearedUpWeapons);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unused2);
        }

        public void Write(
            MutagenWriter writer,
            IPlayerSkillsGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlayerSkillsGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PlayerSkillsBinaryCreateTranslation
    {
        public readonly static PlayerSkillsBinaryCreateTranslation Instance = new PlayerSkillsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPlayerSkills item,
            MutagenFrame frame)
        {
            Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Parse<Skill>(
                frame: frame,
                item: item.SkillValues,
                transl: ByteBinaryTranslation.Instance.Parse);
            Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Parse<Skill>(
                frame: frame,
                item: item.SkillOffsets,
                transl: ByteBinaryTranslation.Instance.Parse);
            item.Health = frame.ReadUInt16();
            item.Magicka = frame.ReadUInt16();
            item.Stamina = frame.ReadUInt16();
            item.Unused = frame.ReadUInt16();
            item.FarAwayModelDistance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.GearedUpWeapons = frame.ReadUInt8();
            item.Unused2 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(3));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PlayerSkillsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPlayerSkillsGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlayerSkillsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PlayerSkillsBinaryOverlay :
        BinaryOverlay,
        IPlayerSkillsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlayerSkills_Registration.Instance;
        public static PlayerSkills_Registration Registration => PlayerSkills_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlayerSkillsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlayerSkillsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlayerSkillsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPlayerSkillsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPlayerSkillsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlayerSkillsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlayerSkillsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region SkillValues
        public IReadOnlyDictionary<Skill, Byte> SkillValues => DictBinaryTranslation<Byte>.Instance.Parse<Skill>(
            new MutagenFrame(new MutagenMemoryReadStream(_data, _package.MetaData)),
            new Dictionary<Skill, Byte>(),
            ByteBinaryTranslation.Instance.Parse);
        #endregion
        #region SkillOffsets
        public IReadOnlyDictionary<Skill, Byte> SkillOffsets => DictBinaryTranslation<Byte>.Instance.Parse<Skill>(
            new MutagenFrame(new MutagenMemoryReadStream(_data.Slice(0x12), _package.MetaData)),
            new Dictionary<Skill, Byte>(),
            ByteBinaryTranslation.Instance.Parse);
        #endregion
        public UInt16 Health => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x24, 0x2));
        public UInt16 Magicka => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x26, 0x2));
        public UInt16 Stamina => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x28, 0x2));
        public UInt16 Unused => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x2A, 0x2));
        public Single FarAwayModelDistance => _data.Slice(0x2C, 0x4).Float();
        public Byte GearedUpWeapons => _data.Span[0x30];
        public ReadOnlyMemorySlice<Byte> Unused2 => _data.Span.Slice(0x31, 0x3).ToArray();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlayerSkillsBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PlayerSkillsBinaryOverlay PlayerSkillsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PlayerSkillsBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x34 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static PlayerSkillsBinaryOverlay PlayerSkillsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PlayerSkillsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlayerSkillsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlayerSkillsGetter rhs)) return false;
            return ((PlayerSkillsCommon)((IPlayerSkillsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPlayerSkillsGetter? obj)
        {
            return ((PlayerSkillsCommon)((IPlayerSkillsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlayerSkillsCommon)((IPlayerSkillsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

