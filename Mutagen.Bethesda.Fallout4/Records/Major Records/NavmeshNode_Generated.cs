/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class NavmeshNode :
        INavmeshNode,
        ILoquiObjectSetter<NavmeshNode>,
        IEquatable<INavmeshNodeGetter>
    {
        #region Ctor
        public NavmeshNode()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NavMesh
        public FormLink<IANavigationMeshGetter> NavMesh { get; set; } = new FormLink<IANavigationMeshGetter>();
        #endregion
        #region NodeIndex
        public UInt32 NodeIndex { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NavmeshNodeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INavmeshNodeGetter rhs)) return false;
            return ((NavmeshNodeCommon)((INavmeshNodeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INavmeshNodeGetter? obj)
        {
            return ((NavmeshNodeCommon)((INavmeshNodeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NavmeshNodeCommon)((INavmeshNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NavMesh = initialValue;
                this.NodeIndex = initialValue;
            }

            public Mask(
                TItem NavMesh,
                TItem NodeIndex)
            {
                this.NavMesh = NavMesh;
                this.NodeIndex = NodeIndex;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NavMesh;
            public TItem NodeIndex;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NavMesh, rhs.NavMesh)) return false;
                if (!object.Equals(this.NodeIndex, rhs.NodeIndex)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NavMesh);
                hash.Add(this.NodeIndex);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.NavMesh)) return false;
                if (!eval(this.NodeIndex)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.NavMesh)) return true;
                if (eval(this.NodeIndex)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NavmeshNode.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.NavMesh = eval(this.NavMesh);
                obj.NodeIndex = eval(this.NodeIndex);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NavmeshNode.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NavmeshNode.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NavmeshNode.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.NavMesh ?? true)
                    {
                        fg.AppendItem(NavMesh, "NavMesh");
                    }
                    if (printMask?.NodeIndex ?? true)
                    {
                        fg.AppendItem(NodeIndex, "NodeIndex");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? NavMesh;
            public Exception? NodeIndex;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NavmeshNode_FieldIndex enu = (NavmeshNode_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshNode_FieldIndex.NavMesh:
                        return NavMesh;
                    case NavmeshNode_FieldIndex.NodeIndex:
                        return NodeIndex;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NavmeshNode_FieldIndex enu = (NavmeshNode_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshNode_FieldIndex.NavMesh:
                        this.NavMesh = ex;
                        break;
                    case NavmeshNode_FieldIndex.NodeIndex:
                        this.NodeIndex = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NavmeshNode_FieldIndex enu = (NavmeshNode_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshNode_FieldIndex.NavMesh:
                        this.NavMesh = (Exception?)obj;
                        break;
                    case NavmeshNode_FieldIndex.NodeIndex:
                        this.NodeIndex = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NavMesh != null) return true;
                if (NodeIndex != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(NavMesh, "NavMesh");
                fg.AppendItem(NodeIndex, "NodeIndex");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NavMesh = this.NavMesh.Combine(rhs.NavMesh);
                ret.NodeIndex = this.NodeIndex.Combine(rhs.NodeIndex);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool NavMesh;
            public bool NodeIndex;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.NavMesh = defaultOn;
                this.NodeIndex = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NavMesh, null));
                ret.Add((NodeIndex, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<FormLinkInformation> ContainedFormLinks => NavmeshNodeCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavmeshNodeSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavmeshNodeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavmeshNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static NavmeshNode CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NavmeshNode();
            ((NavmeshNodeSetterCommon)((INavmeshNodeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NavmeshNode item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((NavmeshNodeSetterCommon)((INavmeshNodeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NavmeshNode GetNew()
        {
            return new NavmeshNode();
        }

    }
    #endregion

    #region Interface
    public partial interface INavmeshNode :
        INavmeshNodeGetter,
        ILoquiObjectSetter<INavmeshNode>,
        IFormLinkContainer
    {
        new FormLink<IANavigationMeshGetter> NavMesh { get; set; }
        new UInt32 NodeIndex { get; set; }
    }

    public partial interface INavmeshNodeGetter :
        ILoquiObject,
        ILoquiObject<INavmeshNodeGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => NavmeshNode_Registration.Instance;
        FormLink<IANavigationMeshGetter> NavMesh { get; }
        UInt32 NodeIndex { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NavmeshNodeMixIn
    {
        public static void Clear(this INavmeshNode item)
        {
            ((NavmeshNodeSetterCommon)((INavmeshNodeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NavmeshNode.Mask<bool> GetEqualsMask(
            this INavmeshNodeGetter item,
            INavmeshNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NavmeshNodeCommon)((INavmeshNodeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INavmeshNodeGetter item,
            string? name = null,
            NavmeshNode.Mask<bool>? printMask = null)
        {
            return ((NavmeshNodeCommon)((INavmeshNodeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INavmeshNodeGetter item,
            FileGeneration fg,
            string? name = null,
            NavmeshNode.Mask<bool>? printMask = null)
        {
            ((NavmeshNodeCommon)((INavmeshNodeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INavmeshNodeGetter item,
            INavmeshNodeGetter rhs)
        {
            return ((NavmeshNodeCommon)((INavmeshNodeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this INavmeshNode lhs,
            INavmeshNodeGetter rhs)
        {
            ((NavmeshNodeSetterTranslationCommon)((INavmeshNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavmeshNode lhs,
            INavmeshNodeGetter rhs,
            NavmeshNode.TranslationMask? copyMask = null)
        {
            ((NavmeshNodeSetterTranslationCommon)((INavmeshNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavmeshNode lhs,
            INavmeshNodeGetter rhs,
            out NavmeshNode.ErrorMask errorMask,
            NavmeshNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NavmeshNodeSetterTranslationCommon)((INavmeshNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NavmeshNode.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INavmeshNode lhs,
            INavmeshNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NavmeshNodeSetterTranslationCommon)((INavmeshNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NavmeshNode DeepCopy(
            this INavmeshNodeGetter item,
            NavmeshNode.TranslationMask? copyMask = null)
        {
            return ((NavmeshNodeSetterTranslationCommon)((INavmeshNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NavmeshNode DeepCopy(
            this INavmeshNodeGetter item,
            out NavmeshNode.ErrorMask errorMask,
            NavmeshNode.TranslationMask? copyMask = null)
        {
            return ((NavmeshNodeSetterTranslationCommon)((INavmeshNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NavmeshNode DeepCopy(
            this INavmeshNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NavmeshNodeSetterTranslationCommon)((INavmeshNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INavmeshNode item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavmeshNodeSetterCommon)((INavmeshNodeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum NavmeshNode_FieldIndex
    {
        NavMesh = 0,
        NodeIndex = 1,
    }
    #endregion

    #region Registration
    public partial class NavmeshNode_Registration : ILoquiRegistration
    {
        public static readonly NavmeshNode_Registration Instance = new NavmeshNode_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 282,
            version: 0);

        public const string GUID = "96cb92a9-34cc-4155-95b3-10cd0d497b28";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(NavmeshNode.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NavmeshNode.ErrorMask);

        public static readonly Type ClassType = typeof(NavmeshNode);

        public static readonly Type GetterType = typeof(INavmeshNodeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INavmeshNode);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.NavmeshNode";

        public const string Name = "NavmeshNode";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(NavmeshNodeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class NavmeshNodeSetterCommon
    {
        public static readonly NavmeshNodeSetterCommon Instance = new NavmeshNodeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INavmeshNode item)
        {
            ClearPartial();
            item.NavMesh = FormLink<IANavigationMeshGetter>.Null;
            item.NodeIndex = default;
        }
        
        #region Mutagen
        public void RemapLinks(INavmeshNode obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.NavMesh = obj.NavMesh.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INavmeshNode item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: NavmeshNodeBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class NavmeshNodeCommon
    {
        public static readonly NavmeshNodeCommon Instance = new NavmeshNodeCommon();

        public NavmeshNode.Mask<bool> GetEqualsMask(
            INavmeshNodeGetter item,
            INavmeshNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NavmeshNode.Mask<bool>(false);
            ((NavmeshNodeCommon)((INavmeshNodeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INavmeshNodeGetter item,
            INavmeshNodeGetter rhs,
            NavmeshNode.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.NavMesh = item.NavMesh.Equals(rhs.NavMesh);
            ret.NodeIndex = item.NodeIndex == rhs.NodeIndex;
        }
        
        public string ToString(
            INavmeshNodeGetter item,
            string? name = null,
            NavmeshNode.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INavmeshNodeGetter item,
            FileGeneration fg,
            string? name = null,
            NavmeshNode.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NavmeshNode =>");
            }
            else
            {
                fg.AppendLine($"{name} (NavmeshNode) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INavmeshNodeGetter item,
            FileGeneration fg,
            NavmeshNode.Mask<bool>? printMask = null)
        {
            if (printMask?.NavMesh ?? true)
            {
                fg.AppendItem(item.NavMesh.FormKey, "NavMesh");
            }
            if (printMask?.NodeIndex ?? true)
            {
                fg.AppendItem(item.NodeIndex, "NodeIndex");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INavmeshNodeGetter? lhs,
            INavmeshNodeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.NavMesh.Equals(rhs.NavMesh)) return false;
            if (lhs.NodeIndex != rhs.NodeIndex) return false;
            return true;
        }
        
        public virtual int GetHashCode(INavmeshNodeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.NavMesh);
            hash.Add(item.NodeIndex);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NavmeshNode.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(INavmeshNodeGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.NavMesh);
            yield break;
        }
        
        #endregion
        
    }
    public partial class NavmeshNodeSetterTranslationCommon
    {
        public static readonly NavmeshNodeSetterTranslationCommon Instance = new NavmeshNodeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INavmeshNode item,
            INavmeshNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NavmeshNode_FieldIndex.NavMesh) ?? true))
            {
                item.NavMesh = new FormLink<IANavigationMeshGetter>(rhs.NavMesh.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)NavmeshNode_FieldIndex.NodeIndex) ?? true))
            {
                item.NodeIndex = rhs.NodeIndex;
            }
        }
        
        #endregion
        
        public NavmeshNode DeepCopy(
            INavmeshNodeGetter item,
            NavmeshNode.TranslationMask? copyMask = null)
        {
            NavmeshNode ret = (NavmeshNode)((NavmeshNodeCommon)((INavmeshNodeGetter)item).CommonInstance()!).GetNew();
            ((NavmeshNodeSetterTranslationCommon)((INavmeshNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NavmeshNode DeepCopy(
            INavmeshNodeGetter item,
            out NavmeshNode.ErrorMask errorMask,
            NavmeshNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NavmeshNode ret = (NavmeshNode)((NavmeshNodeCommon)((INavmeshNodeGetter)item).CommonInstance()!).GetNew();
            ((NavmeshNodeSetterTranslationCommon)((INavmeshNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NavmeshNode.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NavmeshNode DeepCopy(
            INavmeshNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NavmeshNode ret = (NavmeshNode)((NavmeshNodeCommon)((INavmeshNodeGetter)item).CommonInstance()!).GetNew();
            ((NavmeshNodeSetterTranslationCommon)((INavmeshNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class NavmeshNode
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavmeshNode_Registration.Instance;
        public static NavmeshNode_Registration Registration => NavmeshNode_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavmeshNodeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NavmeshNodeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavmeshNodeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavmeshNodeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INavmeshNodeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INavmeshNodeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NavmeshNodeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static NavmeshNodeBinaryWriteTranslation Instance = new NavmeshNodeBinaryWriteTranslation();

        public static void WriteEmbedded(
            INavmeshNodeGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NavMesh);
            writer.Write(item.NodeIndex);
        }

        public void Write(
            MutagenWriter writer,
            INavmeshNodeGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INavmeshNodeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class NavmeshNodeBinaryCreateTranslation
    {
        public readonly static NavmeshNodeBinaryCreateTranslation Instance = new NavmeshNodeBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INavmeshNode item,
            MutagenFrame frame)
        {
            item.NavMesh = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.NodeIndex = frame.ReadUInt32();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NavmeshNodeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INavmeshNodeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavmeshNodeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NavmeshNodeBinaryOverlay :
        BinaryOverlay,
        INavmeshNodeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavmeshNode_Registration.Instance;
        public static NavmeshNode_Registration Registration => NavmeshNode_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavmeshNodeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavmeshNodeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavmeshNodeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INavmeshNodeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INavmeshNodeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => NavmeshNodeCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavmeshNodeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavmeshNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public FormLink<IANavigationMeshGetter> NavMesh => new FormLink<IANavigationMeshGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x0, 0x4))));
        public UInt32 NodeIndex => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x4, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NavmeshNodeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static NavmeshNodeBinaryOverlay NavmeshNodeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NavmeshNodeBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0x8),
                package: package);
            int offset = stream.Position;
            stream.Position += 0x8;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static NavmeshNodeBinaryOverlay NavmeshNodeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return NavmeshNodeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NavmeshNodeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INavmeshNodeGetter rhs)) return false;
            return ((NavmeshNodeCommon)((INavmeshNodeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INavmeshNodeGetter? obj)
        {
            return ((NavmeshNodeCommon)((INavmeshNodeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NavmeshNodeCommon)((INavmeshNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

