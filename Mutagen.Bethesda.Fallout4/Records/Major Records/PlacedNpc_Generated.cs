/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PlacedNpc :
        APlaced,
        IPlacedNpcInternal,
        ILoquiObjectSetter<PlacedNpc>,
        IEquatable<IPlacedNpcGetter>
    {
        #region Ctor
        protected PlacedNpc()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IPlacedNpcGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Base
        public FormLinkNullable<INpcGetter> Base { get; set; } = new FormLinkNullable<INpcGetter>();
        #endregion
        #region EncounterZone
        public FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; } = new FormLinkNullable<IEncounterZoneGetter>();
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _RagdollData;
        public MemorySlice<Byte>? RagdollData
        {
            get => this._RagdollData;
            set => this._RagdollData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedNpcGetter.RagdollData => this.RagdollData;
        #endregion
        #region RagdollBipedData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _RagdollBipedData;
        public MemorySlice<Byte>? RagdollBipedData
        {
            get => this._RagdollBipedData;
            set => this._RagdollBipedData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedNpcGetter.RagdollBipedData => this.RagdollBipedData;
        #endregion
        #region Patrol
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Patrol? _Patrol;
        public Patrol? Patrol
        {
            get => _Patrol;
            set => _Patrol = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPatrolGetter? IPlacedNpcGetter.Patrol => this.Patrol;
        #endregion
        #region LevelModifier
        public Level? LevelModifier { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Level? IPlacedNpcGetter.LevelModifier => this.LevelModifier;
        #endregion
        #region MerchantContainer
        public FormLinkNullable<IPlacedObjectGetter> MerchantContainer { get; set; } = new FormLinkNullable<IPlacedObjectGetter>();
        #endregion
        #region Count
        public Int32? Count { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedNpcGetter.Count => this.Count;
        #endregion
        #region Radius
        public Single? Radius { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedNpcGetter.Radius => this.Radius;
        #endregion
        #region Health
        public Single? Health { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedNpcGetter.Health => this.Health;
        #endregion
        #region LinkedReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LinkedReferences> _LinkedReferences = new ExtendedList<LinkedReferences>();
        public ExtendedList<LinkedReferences> LinkedReferences
        {
            get => this._LinkedReferences;
            protected set => this._LinkedReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILinkedReferencesGetter> IPlacedNpcGetter.LinkedReferences => _LinkedReferences;
        #endregion

        #endregion
        #region ActivateParents
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActivateParents? _ActivateParents;
        public ActivateParents? ActivateParents
        {
            get => _ActivateParents;
            set => _ActivateParents = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IActivateParentsGetter? IPlacedNpcGetter.ActivateParents => this.ActivateParents;
        #endregion
        #region LinkedReferenceColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LinkedReferenceColor? _LinkedReferenceColor;
        public LinkedReferenceColor? LinkedReferenceColor
        {
            get => _LinkedReferenceColor;
            set => _LinkedReferenceColor = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinkedReferenceColorGetter? IPlacedNpcGetter.LinkedReferenceColor => this.LinkedReferenceColor;
        #endregion
        #region PersistentLocation
        public FormLinkNullable<ILocationGetter> PersistentLocation { get; set; } = new FormLinkNullable<ILocationGetter>();
        #endregion
        #region LocationReference
        public FormLinkNullable<ILocationRecordGetter> LocationReference { get; set; } = new FormLinkNullable<ILocationRecordGetter>();
        #endregion
        #region IgnoredBySandbox
        public Boolean IgnoredBySandbox { get; set; } = default;
        #endregion
        #region LocationRefTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<ILocationReferenceTypeGetter>>? _LocationRefTypes;
        public ExtendedList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes
        {
            get => this._LocationRefTypes;
            set => this._LocationRefTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? IPlacedNpcGetter.LocationRefTypes => _LocationRefTypes;
        #endregion

        #endregion
        #region HeadTrackingWeight
        public Single? HeadTrackingWeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedNpcGetter.HeadTrackingWeight => this.HeadTrackingWeight;
        #endregion
        #region Horse
        public FormLinkNullable<IPlacedNpcGetter> Horse { get; set; } = new FormLinkNullable<IPlacedNpcGetter>();
        #endregion
        #region FavorCost
        public Single? FavorCost { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedNpcGetter.FavorCost => this.FavorCost;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IPlacedNpcGetter.EnableParent => this.EnableParent;
        #endregion
        #region Ownership
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Ownership? _Ownership;
        public Ownership? Ownership
        {
            get => _Ownership;
            set => _Ownership = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOwnershipGetter? IPlacedNpcGetter.Ownership => this.Ownership;
        #endregion
        #region Emittance
        public FormLinkNullable<IEmittanceGetter> Emittance { get; set; } = new FormLinkNullable<IEmittanceGetter>();
        #endregion
        #region MultiboundReference
        public FormLinkNullable<IPlacedObjectGetter> MultiboundReference { get; set; } = new FormLinkNullable<IPlacedObjectGetter>();
        #endregion
        #region IgnoredBySandbox2
        public Boolean IgnoredBySandbox2 { get; set; } = default;
        #endregion
        #region Scale
        public Single? Scale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedNpcGetter.Scale => this.Scale;
        #endregion
        #region Placement
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Placement? _Placement;
        public Placement? Placement
        {
            get => _Placement;
            set => _Placement = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlacementGetter? IPlacedNpcGetter.Placement => this.Placement;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedNpcMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlacedNpcGetter rhs)) return false;
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPlacedNpcGetter? obj)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APlaced.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.Base = initialValue;
                this.EncounterZone = initialValue;
                this.RagdollData = initialValue;
                this.RagdollBipedData = initialValue;
                this.Patrol = new MaskItem<TItem, Patrol.Mask<TItem>?>(initialValue, new Patrol.Mask<TItem>(initialValue));
                this.LevelModifier = initialValue;
                this.MerchantContainer = initialValue;
                this.Count = initialValue;
                this.Radius = initialValue;
                this.Health = initialValue;
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(initialValue, new ActivateParents.Mask<TItem>(initialValue));
                this.LinkedReferenceColor = new MaskItem<TItem, LinkedReferenceColor.Mask<TItem>?>(initialValue, new LinkedReferenceColor.Mask<TItem>(initialValue));
                this.PersistentLocation = initialValue;
                this.LocationReference = initialValue;
                this.IgnoredBySandbox = initialValue;
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.HeadTrackingWeight = initialValue;
                this.Horse = initialValue;
                this.FavorCost = initialValue;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(initialValue, new Ownership.Mask<TItem>(initialValue));
                this.Emittance = initialValue;
                this.MultiboundReference = initialValue;
                this.IgnoredBySandbox2 = initialValue;
                this.Scale = initialValue;
                this.Placement = new MaskItem<TItem, Placement.Mask<TItem>?>(initialValue, new Placement.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem Base,
                TItem EncounterZone,
                TItem RagdollData,
                TItem RagdollBipedData,
                TItem Patrol,
                TItem LevelModifier,
                TItem MerchantContainer,
                TItem Count,
                TItem Radius,
                TItem Health,
                TItem LinkedReferences,
                TItem ActivateParents,
                TItem LinkedReferenceColor,
                TItem PersistentLocation,
                TItem LocationReference,
                TItem IgnoredBySandbox,
                TItem LocationRefTypes,
                TItem HeadTrackingWeight,
                TItem Horse,
                TItem FavorCost,
                TItem EnableParent,
                TItem Ownership,
                TItem Emittance,
                TItem MultiboundReference,
                TItem IgnoredBySandbox2,
                TItem Scale,
                TItem Placement)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Base = Base;
                this.EncounterZone = EncounterZone;
                this.RagdollData = RagdollData;
                this.RagdollBipedData = RagdollBipedData;
                this.Patrol = new MaskItem<TItem, Patrol.Mask<TItem>?>(Patrol, new Patrol.Mask<TItem>(Patrol));
                this.LevelModifier = LevelModifier;
                this.MerchantContainer = MerchantContainer;
                this.Count = Count;
                this.Radius = Radius;
                this.Health = Health;
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(LinkedReferences, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(ActivateParents, new ActivateParents.Mask<TItem>(ActivateParents));
                this.LinkedReferenceColor = new MaskItem<TItem, LinkedReferenceColor.Mask<TItem>?>(LinkedReferenceColor, new LinkedReferenceColor.Mask<TItem>(LinkedReferenceColor));
                this.PersistentLocation = PersistentLocation;
                this.LocationReference = LocationReference;
                this.IgnoredBySandbox = IgnoredBySandbox;
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LocationRefTypes, Enumerable.Empty<(int Index, TItem Value)>());
                this.HeadTrackingWeight = HeadTrackingWeight;
                this.Horse = Horse;
                this.FavorCost = FavorCost;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(Ownership, new Ownership.Mask<TItem>(Ownership));
                this.Emittance = Emittance;
                this.MultiboundReference = MultiboundReference;
                this.IgnoredBySandbox2 = IgnoredBySandbox2;
                this.Scale = Scale;
                this.Placement = new MaskItem<TItem, Placement.Mask<TItem>?>(Placement, new Placement.Mask<TItem>(Placement));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Base;
            public TItem EncounterZone;
            public TItem RagdollData;
            public TItem RagdollBipedData;
            public MaskItem<TItem, Patrol.Mask<TItem>?>? Patrol { get; set; }
            public TItem LevelModifier;
            public TItem MerchantContainer;
            public TItem Count;
            public TItem Radius;
            public TItem Health;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>? LinkedReferences;
            public MaskItem<TItem, ActivateParents.Mask<TItem>?>? ActivateParents { get; set; }
            public MaskItem<TItem, LinkedReferenceColor.Mask<TItem>?>? LinkedReferenceColor { get; set; }
            public TItem PersistentLocation;
            public TItem LocationReference;
            public TItem IgnoredBySandbox;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LocationRefTypes;
            public TItem HeadTrackingWeight;
            public TItem Horse;
            public TItem FavorCost;
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public MaskItem<TItem, Ownership.Mask<TItem>?>? Ownership { get; set; }
            public TItem Emittance;
            public TItem MultiboundReference;
            public TItem IgnoredBySandbox2;
            public TItem Scale;
            public MaskItem<TItem, Placement.Mask<TItem>?>? Placement { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Base, rhs.Base)) return false;
                if (!object.Equals(this.EncounterZone, rhs.EncounterZone)) return false;
                if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
                if (!object.Equals(this.RagdollBipedData, rhs.RagdollBipedData)) return false;
                if (!object.Equals(this.Patrol, rhs.Patrol)) return false;
                if (!object.Equals(this.LevelModifier, rhs.LevelModifier)) return false;
                if (!object.Equals(this.MerchantContainer, rhs.MerchantContainer)) return false;
                if (!object.Equals(this.Count, rhs.Count)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.Health, rhs.Health)) return false;
                if (!object.Equals(this.LinkedReferences, rhs.LinkedReferences)) return false;
                if (!object.Equals(this.ActivateParents, rhs.ActivateParents)) return false;
                if (!object.Equals(this.LinkedReferenceColor, rhs.LinkedReferenceColor)) return false;
                if (!object.Equals(this.PersistentLocation, rhs.PersistentLocation)) return false;
                if (!object.Equals(this.LocationReference, rhs.LocationReference)) return false;
                if (!object.Equals(this.IgnoredBySandbox, rhs.IgnoredBySandbox)) return false;
                if (!object.Equals(this.LocationRefTypes, rhs.LocationRefTypes)) return false;
                if (!object.Equals(this.HeadTrackingWeight, rhs.HeadTrackingWeight)) return false;
                if (!object.Equals(this.Horse, rhs.Horse)) return false;
                if (!object.Equals(this.FavorCost, rhs.FavorCost)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.Ownership, rhs.Ownership)) return false;
                if (!object.Equals(this.Emittance, rhs.Emittance)) return false;
                if (!object.Equals(this.MultiboundReference, rhs.MultiboundReference)) return false;
                if (!object.Equals(this.IgnoredBySandbox2, rhs.IgnoredBySandbox2)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.Placement, rhs.Placement)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Base);
                hash.Add(this.EncounterZone);
                hash.Add(this.RagdollData);
                hash.Add(this.RagdollBipedData);
                hash.Add(this.Patrol);
                hash.Add(this.LevelModifier);
                hash.Add(this.MerchantContainer);
                hash.Add(this.Count);
                hash.Add(this.Radius);
                hash.Add(this.Health);
                hash.Add(this.LinkedReferences);
                hash.Add(this.ActivateParents);
                hash.Add(this.LinkedReferenceColor);
                hash.Add(this.PersistentLocation);
                hash.Add(this.LocationReference);
                hash.Add(this.IgnoredBySandbox);
                hash.Add(this.LocationRefTypes);
                hash.Add(this.HeadTrackingWeight);
                hash.Add(this.Horse);
                hash.Add(this.FavorCost);
                hash.Add(this.EnableParent);
                hash.Add(this.Ownership);
                hash.Add(this.Emittance);
                hash.Add(this.MultiboundReference);
                hash.Add(this.IgnoredBySandbox2);
                hash.Add(this.Scale);
                hash.Add(this.Placement);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Base)) return false;
                if (!eval(this.EncounterZone)) return false;
                if (!eval(this.RagdollData)) return false;
                if (!eval(this.RagdollBipedData)) return false;
                if (Patrol != null)
                {
                    if (!eval(this.Patrol.Overall)) return false;
                    if (this.Patrol.Specific != null && !this.Patrol.Specific.All(eval)) return false;
                }
                if (!eval(this.LevelModifier)) return false;
                if (!eval(this.MerchantContainer)) return false;
                if (!eval(this.Count)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.Health)) return false;
                if (this.LinkedReferences != null)
                {
                    if (!eval(this.LinkedReferences.Overall)) return false;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (ActivateParents != null)
                {
                    if (!eval(this.ActivateParents.Overall)) return false;
                    if (this.ActivateParents.Specific != null && !this.ActivateParents.Specific.All(eval)) return false;
                }
                if (LinkedReferenceColor != null)
                {
                    if (!eval(this.LinkedReferenceColor.Overall)) return false;
                    if (this.LinkedReferenceColor.Specific != null && !this.LinkedReferenceColor.Specific.All(eval)) return false;
                }
                if (!eval(this.PersistentLocation)) return false;
                if (!eval(this.LocationReference)) return false;
                if (!eval(this.IgnoredBySandbox)) return false;
                if (this.LocationRefTypes != null)
                {
                    if (!eval(this.LocationRefTypes.Overall)) return false;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.HeadTrackingWeight)) return false;
                if (!eval(this.Horse)) return false;
                if (!eval(this.FavorCost)) return false;
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (Ownership != null)
                {
                    if (!eval(this.Ownership.Overall)) return false;
                    if (this.Ownership.Specific != null && !this.Ownership.Specific.All(eval)) return false;
                }
                if (!eval(this.Emittance)) return false;
                if (!eval(this.MultiboundReference)) return false;
                if (!eval(this.IgnoredBySandbox2)) return false;
                if (!eval(this.Scale)) return false;
                if (Placement != null)
                {
                    if (!eval(this.Placement.Overall)) return false;
                    if (this.Placement.Specific != null && !this.Placement.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Base)) return true;
                if (eval(this.EncounterZone)) return true;
                if (eval(this.RagdollData)) return true;
                if (eval(this.RagdollBipedData)) return true;
                if (Patrol != null)
                {
                    if (eval(this.Patrol.Overall)) return true;
                    if (this.Patrol.Specific != null && this.Patrol.Specific.Any(eval)) return true;
                }
                if (eval(this.LevelModifier)) return true;
                if (eval(this.MerchantContainer)) return true;
                if (eval(this.Count)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.Health)) return true;
                if (this.LinkedReferences != null)
                {
                    if (eval(this.LinkedReferences.Overall)) return true;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (ActivateParents != null)
                {
                    if (eval(this.ActivateParents.Overall)) return true;
                    if (this.ActivateParents.Specific != null && this.ActivateParents.Specific.Any(eval)) return true;
                }
                if (LinkedReferenceColor != null)
                {
                    if (eval(this.LinkedReferenceColor.Overall)) return true;
                    if (this.LinkedReferenceColor.Specific != null && this.LinkedReferenceColor.Specific.Any(eval)) return true;
                }
                if (eval(this.PersistentLocation)) return true;
                if (eval(this.LocationReference)) return true;
                if (eval(this.IgnoredBySandbox)) return true;
                if (this.LocationRefTypes != null)
                {
                    if (eval(this.LocationRefTypes.Overall)) return true;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.HeadTrackingWeight)) return true;
                if (eval(this.Horse)) return true;
                if (eval(this.FavorCost)) return true;
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (Ownership != null)
                {
                    if (eval(this.Ownership.Overall)) return true;
                    if (this.Ownership.Specific != null && this.Ownership.Specific.Any(eval)) return true;
                }
                if (eval(this.Emittance)) return true;
                if (eval(this.MultiboundReference)) return true;
                if (eval(this.IgnoredBySandbox2)) return true;
                if (eval(this.Scale)) return true;
                if (Placement != null)
                {
                    if (eval(this.Placement.Overall)) return true;
                    if (this.Placement.Specific != null && this.Placement.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedNpc.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Base = eval(this.Base);
                obj.EncounterZone = eval(this.EncounterZone);
                obj.RagdollData = eval(this.RagdollData);
                obj.RagdollBipedData = eval(this.RagdollBipedData);
                obj.Patrol = this.Patrol == null ? null : new MaskItem<R, Patrol.Mask<R>?>(eval(this.Patrol.Overall), this.Patrol.Specific?.Translate(eval));
                obj.LevelModifier = eval(this.LevelModifier);
                obj.MerchantContainer = eval(this.MerchantContainer);
                obj.Count = eval(this.Count);
                obj.Radius = eval(this.Radius);
                obj.Health = eval(this.Health);
                if (LinkedReferences != null)
                {
                    obj.LinkedReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>?>(eval(this.LinkedReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>());
                    if (LinkedReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>();
                        obj.LinkedReferences.Specific = l;
                        foreach (var item in LinkedReferences.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, LinkedReferences.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, LinkedReferences.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ActivateParents = this.ActivateParents == null ? null : new MaskItem<R, ActivateParents.Mask<R>?>(eval(this.ActivateParents.Overall), this.ActivateParents.Specific?.Translate(eval));
                obj.LinkedReferenceColor = this.LinkedReferenceColor == null ? null : new MaskItem<R, LinkedReferenceColor.Mask<R>?>(eval(this.LinkedReferenceColor.Overall), this.LinkedReferenceColor.Specific?.Translate(eval));
                obj.PersistentLocation = eval(this.PersistentLocation);
                obj.LocationReference = eval(this.LocationReference);
                obj.IgnoredBySandbox = eval(this.IgnoredBySandbox);
                if (LocationRefTypes != null)
                {
                    obj.LocationRefTypes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LocationRefTypes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LocationRefTypes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LocationRefTypes.Specific = l;
                        foreach (var item in LocationRefTypes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.HeadTrackingWeight = eval(this.HeadTrackingWeight);
                obj.Horse = eval(this.Horse);
                obj.FavorCost = eval(this.FavorCost);
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                obj.Ownership = this.Ownership == null ? null : new MaskItem<R, Ownership.Mask<R>?>(eval(this.Ownership.Overall), this.Ownership.Specific?.Translate(eval));
                obj.Emittance = eval(this.Emittance);
                obj.MultiboundReference = eval(this.MultiboundReference);
                obj.IgnoredBySandbox2 = eval(this.IgnoredBySandbox2);
                obj.Scale = eval(this.Scale);
                obj.Placement = this.Placement == null ? null : new MaskItem<R, Placement.Mask<R>?>(eval(this.Placement.Overall), this.Placement.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PlacedNpc.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PlacedNpc.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PlacedNpc.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.Base ?? true)
                    {
                        fg.AppendItem(Base, "Base");
                    }
                    if (printMask?.EncounterZone ?? true)
                    {
                        fg.AppendItem(EncounterZone, "EncounterZone");
                    }
                    if (printMask?.RagdollData ?? true)
                    {
                        fg.AppendItem(RagdollData, "RagdollData");
                    }
                    if (printMask?.RagdollBipedData ?? true)
                    {
                        fg.AppendItem(RagdollBipedData, "RagdollBipedData");
                    }
                    if (printMask?.Patrol?.Overall ?? true)
                    {
                        Patrol?.ToString(fg);
                    }
                    if (printMask?.LevelModifier ?? true)
                    {
                        fg.AppendItem(LevelModifier, "LevelModifier");
                    }
                    if (printMask?.MerchantContainer ?? true)
                    {
                        fg.AppendItem(MerchantContainer, "MerchantContainer");
                    }
                    if (printMask?.Count ?? true)
                    {
                        fg.AppendItem(Count, "Count");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        fg.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.Health ?? true)
                    {
                        fg.AppendItem(Health, "Health");
                    }
                    if ((printMask?.LinkedReferences?.Overall ?? true)
                        && LinkedReferences.TryGet(out var LinkedReferencesItem))
                    {
                        fg.AppendLine("LinkedReferences =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LinkedReferencesItem.Overall);
                            if (LinkedReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LinkedReferencesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ActivateParents?.Overall ?? true)
                    {
                        ActivateParents?.ToString(fg);
                    }
                    if (printMask?.LinkedReferenceColor?.Overall ?? true)
                    {
                        LinkedReferenceColor?.ToString(fg);
                    }
                    if (printMask?.PersistentLocation ?? true)
                    {
                        fg.AppendItem(PersistentLocation, "PersistentLocation");
                    }
                    if (printMask?.LocationReference ?? true)
                    {
                        fg.AppendItem(LocationReference, "LocationReference");
                    }
                    if (printMask?.IgnoredBySandbox ?? true)
                    {
                        fg.AppendItem(IgnoredBySandbox, "IgnoredBySandbox");
                    }
                    if ((printMask?.LocationRefTypes?.Overall ?? true)
                        && LocationRefTypes.TryGet(out var LocationRefTypesItem))
                    {
                        fg.AppendLine("LocationRefTypes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LocationRefTypesItem.Overall);
                            if (LocationRefTypesItem.Specific != null)
                            {
                                foreach (var subItem in LocationRefTypesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.HeadTrackingWeight ?? true)
                    {
                        fg.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                    }
                    if (printMask?.Horse ?? true)
                    {
                        fg.AppendItem(Horse, "Horse");
                    }
                    if (printMask?.FavorCost ?? true)
                    {
                        fg.AppendItem(FavorCost, "FavorCost");
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.ToString(fg);
                    }
                    if (printMask?.Ownership?.Overall ?? true)
                    {
                        Ownership?.ToString(fg);
                    }
                    if (printMask?.Emittance ?? true)
                    {
                        fg.AppendItem(Emittance, "Emittance");
                    }
                    if (printMask?.MultiboundReference ?? true)
                    {
                        fg.AppendItem(MultiboundReference, "MultiboundReference");
                    }
                    if (printMask?.IgnoredBySandbox2 ?? true)
                    {
                        fg.AppendItem(IgnoredBySandbox2, "IgnoredBySandbox2");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        fg.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.Placement?.Overall ?? true)
                    {
                        Placement?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APlaced.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Base;
            public Exception? EncounterZone;
            public Exception? RagdollData;
            public Exception? RagdollBipedData;
            public MaskItem<Exception?, Patrol.ErrorMask?>? Patrol;
            public Exception? LevelModifier;
            public Exception? MerchantContainer;
            public Exception? Count;
            public Exception? Radius;
            public Exception? Health;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>? LinkedReferences;
            public MaskItem<Exception?, ActivateParents.ErrorMask?>? ActivateParents;
            public MaskItem<Exception?, LinkedReferenceColor.ErrorMask?>? LinkedReferenceColor;
            public Exception? PersistentLocation;
            public Exception? LocationReference;
            public Exception? IgnoredBySandbox;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LocationRefTypes;
            public Exception? HeadTrackingWeight;
            public Exception? Horse;
            public Exception? FavorCost;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public MaskItem<Exception?, Ownership.ErrorMask?>? Ownership;
            public Exception? Emittance;
            public Exception? MultiboundReference;
            public Exception? IgnoredBySandbox2;
            public Exception? Scale;
            public MaskItem<Exception?, Placement.ErrorMask?>? Placement;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case PlacedNpc_FieldIndex.Base:
                        return Base;
                    case PlacedNpc_FieldIndex.EncounterZone:
                        return EncounterZone;
                    case PlacedNpc_FieldIndex.RagdollData:
                        return RagdollData;
                    case PlacedNpc_FieldIndex.RagdollBipedData:
                        return RagdollBipedData;
                    case PlacedNpc_FieldIndex.Patrol:
                        return Patrol;
                    case PlacedNpc_FieldIndex.LevelModifier:
                        return LevelModifier;
                    case PlacedNpc_FieldIndex.MerchantContainer:
                        return MerchantContainer;
                    case PlacedNpc_FieldIndex.Count:
                        return Count;
                    case PlacedNpc_FieldIndex.Radius:
                        return Radius;
                    case PlacedNpc_FieldIndex.Health:
                        return Health;
                    case PlacedNpc_FieldIndex.LinkedReferences:
                        return LinkedReferences;
                    case PlacedNpc_FieldIndex.ActivateParents:
                        return ActivateParents;
                    case PlacedNpc_FieldIndex.LinkedReferenceColor:
                        return LinkedReferenceColor;
                    case PlacedNpc_FieldIndex.PersistentLocation:
                        return PersistentLocation;
                    case PlacedNpc_FieldIndex.LocationReference:
                        return LocationReference;
                    case PlacedNpc_FieldIndex.IgnoredBySandbox:
                        return IgnoredBySandbox;
                    case PlacedNpc_FieldIndex.LocationRefTypes:
                        return LocationRefTypes;
                    case PlacedNpc_FieldIndex.HeadTrackingWeight:
                        return HeadTrackingWeight;
                    case PlacedNpc_FieldIndex.Horse:
                        return Horse;
                    case PlacedNpc_FieldIndex.FavorCost:
                        return FavorCost;
                    case PlacedNpc_FieldIndex.EnableParent:
                        return EnableParent;
                    case PlacedNpc_FieldIndex.Ownership:
                        return Ownership;
                    case PlacedNpc_FieldIndex.Emittance:
                        return Emittance;
                    case PlacedNpc_FieldIndex.MultiboundReference:
                        return MultiboundReference;
                    case PlacedNpc_FieldIndex.IgnoredBySandbox2:
                        return IgnoredBySandbox2;
                    case PlacedNpc_FieldIndex.Scale:
                        return Scale;
                    case PlacedNpc_FieldIndex.Placement:
                        return Placement;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.Base:
                        this.Base = ex;
                        break;
                    case PlacedNpc_FieldIndex.EncounterZone:
                        this.EncounterZone = ex;
                        break;
                    case PlacedNpc_FieldIndex.RagdollData:
                        this.RagdollData = ex;
                        break;
                    case PlacedNpc_FieldIndex.RagdollBipedData:
                        this.RagdollBipedData = ex;
                        break;
                    case PlacedNpc_FieldIndex.Patrol:
                        this.Patrol = new MaskItem<Exception?, Patrol.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.LevelModifier:
                        this.LevelModifier = ex;
                        break;
                    case PlacedNpc_FieldIndex.MerchantContainer:
                        this.MerchantContainer = ex;
                        break;
                    case PlacedNpc_FieldIndex.Count:
                        this.Count = ex;
                        break;
                    case PlacedNpc_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case PlacedNpc_FieldIndex.Health:
                        this.Health = ex;
                        break;
                    case PlacedNpc_FieldIndex.LinkedReferences:
                        this.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.ActivateParents:
                        this.ActivateParents = new MaskItem<Exception?, ActivateParents.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.LinkedReferenceColor:
                        this.LinkedReferenceColor = new MaskItem<Exception?, LinkedReferenceColor.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.PersistentLocation:
                        this.PersistentLocation = ex;
                        break;
                    case PlacedNpc_FieldIndex.LocationReference:
                        this.LocationReference = ex;
                        break;
                    case PlacedNpc_FieldIndex.IgnoredBySandbox:
                        this.IgnoredBySandbox = ex;
                        break;
                    case PlacedNpc_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = ex;
                        break;
                    case PlacedNpc_FieldIndex.Horse:
                        this.Horse = ex;
                        break;
                    case PlacedNpc_FieldIndex.FavorCost:
                        this.FavorCost = ex;
                        break;
                    case PlacedNpc_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.Ownership:
                        this.Ownership = new MaskItem<Exception?, Ownership.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.Emittance:
                        this.Emittance = ex;
                        break;
                    case PlacedNpc_FieldIndex.MultiboundReference:
                        this.MultiboundReference = ex;
                        break;
                    case PlacedNpc_FieldIndex.IgnoredBySandbox2:
                        this.IgnoredBySandbox2 = ex;
                        break;
                    case PlacedNpc_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case PlacedNpc_FieldIndex.Placement:
                        this.Placement = new MaskItem<Exception?, Placement.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Base:
                        this.Base = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.EncounterZone:
                        this.EncounterZone = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.RagdollData:
                        this.RagdollData = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.RagdollBipedData:
                        this.RagdollBipedData = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Patrol:
                        this.Patrol = (MaskItem<Exception?, Patrol.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.LevelModifier:
                        this.LevelModifier = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.MerchantContainer:
                        this.MerchantContainer = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Count:
                        this.Count = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Health:
                        this.Health = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.LinkedReferences:
                        this.LinkedReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>)obj;
                        break;
                    case PlacedNpc_FieldIndex.ActivateParents:
                        this.ActivateParents = (MaskItem<Exception?, ActivateParents.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.LinkedReferenceColor:
                        this.LinkedReferenceColor = (MaskItem<Exception?, LinkedReferenceColor.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.PersistentLocation:
                        this.PersistentLocation = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.LocationReference:
                        this.LocationReference = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.IgnoredBySandbox:
                        this.IgnoredBySandbox = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlacedNpc_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Horse:
                        this.Horse = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.FavorCost:
                        this.FavorCost = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Ownership:
                        this.Ownership = (MaskItem<Exception?, Ownership.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Emittance:
                        this.Emittance = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.MultiboundReference:
                        this.MultiboundReference = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.IgnoredBySandbox2:
                        this.IgnoredBySandbox2 = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Placement:
                        this.Placement = (MaskItem<Exception?, Placement.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Base != null) return true;
                if (EncounterZone != null) return true;
                if (RagdollData != null) return true;
                if (RagdollBipedData != null) return true;
                if (Patrol != null) return true;
                if (LevelModifier != null) return true;
                if (MerchantContainer != null) return true;
                if (Count != null) return true;
                if (Radius != null) return true;
                if (Health != null) return true;
                if (LinkedReferences != null) return true;
                if (ActivateParents != null) return true;
                if (LinkedReferenceColor != null) return true;
                if (PersistentLocation != null) return true;
                if (LocationReference != null) return true;
                if (IgnoredBySandbox != null) return true;
                if (LocationRefTypes != null) return true;
                if (HeadTrackingWeight != null) return true;
                if (Horse != null) return true;
                if (FavorCost != null) return true;
                if (EnableParent != null) return true;
                if (Ownership != null) return true;
                if (Emittance != null) return true;
                if (MultiboundReference != null) return true;
                if (IgnoredBySandbox2 != null) return true;
                if (Scale != null) return true;
                if (Placement != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(Base, "Base");
                fg.AppendItem(EncounterZone, "EncounterZone");
                fg.AppendItem(RagdollData, "RagdollData");
                fg.AppendItem(RagdollBipedData, "RagdollBipedData");
                Patrol?.ToString(fg);
                fg.AppendItem(LevelModifier, "LevelModifier");
                fg.AppendItem(MerchantContainer, "MerchantContainer");
                fg.AppendItem(Count, "Count");
                fg.AppendItem(Radius, "Radius");
                fg.AppendItem(Health, "Health");
                if (LinkedReferences.TryGet(out var LinkedReferencesItem))
                {
                    fg.AppendLine("LinkedReferences =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LinkedReferencesItem.Overall);
                        if (LinkedReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LinkedReferencesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                ActivateParents?.ToString(fg);
                LinkedReferenceColor?.ToString(fg);
                fg.AppendItem(PersistentLocation, "PersistentLocation");
                fg.AppendItem(LocationReference, "LocationReference");
                fg.AppendItem(IgnoredBySandbox, "IgnoredBySandbox");
                if (LocationRefTypes.TryGet(out var LocationRefTypesItem))
                {
                    fg.AppendLine("LocationRefTypes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LocationRefTypesItem.Overall);
                        if (LocationRefTypesItem.Specific != null)
                        {
                            foreach (var subItem in LocationRefTypesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                fg.AppendItem(Horse, "Horse");
                fg.AppendItem(FavorCost, "FavorCost");
                EnableParent?.ToString(fg);
                Ownership?.ToString(fg);
                fg.AppendItem(Emittance, "Emittance");
                fg.AppendItem(MultiboundReference, "MultiboundReference");
                fg.AppendItem(IgnoredBySandbox2, "IgnoredBySandbox2");
                fg.AppendItem(Scale, "Scale");
                Placement?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Base = this.Base.Combine(rhs.Base);
                ret.EncounterZone = this.EncounterZone.Combine(rhs.EncounterZone);
                ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
                ret.RagdollBipedData = this.RagdollBipedData.Combine(rhs.RagdollBipedData);
                ret.Patrol = this.Patrol.Combine(rhs.Patrol, (l, r) => l.Combine(r));
                ret.LevelModifier = this.LevelModifier.Combine(rhs.LevelModifier);
                ret.MerchantContainer = this.MerchantContainer.Combine(rhs.MerchantContainer);
                ret.Count = this.Count.Combine(rhs.Count);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.Health = this.Health.Combine(rhs.Health);
                ret.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ExceptionExt.Combine(this.LinkedReferences?.Overall, rhs.LinkedReferences?.Overall), ExceptionExt.Combine(this.LinkedReferences?.Specific, rhs.LinkedReferences?.Specific));
                ret.ActivateParents = this.ActivateParents.Combine(rhs.ActivateParents, (l, r) => l.Combine(r));
                ret.LinkedReferenceColor = this.LinkedReferenceColor.Combine(rhs.LinkedReferenceColor, (l, r) => l.Combine(r));
                ret.PersistentLocation = this.PersistentLocation.Combine(rhs.PersistentLocation);
                ret.LocationReference = this.LocationReference.Combine(rhs.LocationReference);
                ret.IgnoredBySandbox = this.IgnoredBySandbox.Combine(rhs.IgnoredBySandbox);
                ret.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.LocationRefTypes?.Overall, rhs.LocationRefTypes?.Overall), ExceptionExt.Combine(this.LocationRefTypes?.Specific, rhs.LocationRefTypes?.Specific));
                ret.HeadTrackingWeight = this.HeadTrackingWeight.Combine(rhs.HeadTrackingWeight);
                ret.Horse = this.Horse.Combine(rhs.Horse);
                ret.FavorCost = this.FavorCost.Combine(rhs.FavorCost);
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.Ownership = this.Ownership.Combine(rhs.Ownership, (l, r) => l.Combine(r));
                ret.Emittance = this.Emittance.Combine(rhs.Emittance);
                ret.MultiboundReference = this.MultiboundReference.Combine(rhs.MultiboundReference);
                ret.IgnoredBySandbox2 = this.IgnoredBySandbox2.Combine(rhs.IgnoredBySandbox2);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.Placement = this.Placement.Combine(rhs.Placement, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APlaced.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public bool Base;
            public bool EncounterZone;
            public bool RagdollData;
            public bool RagdollBipedData;
            public Patrol.TranslationMask? Patrol;
            public bool LevelModifier;
            public bool MerchantContainer;
            public bool Count;
            public bool Radius;
            public bool Health;
            public LinkedReferences.TranslationMask? LinkedReferences;
            public ActivateParents.TranslationMask? ActivateParents;
            public LinkedReferenceColor.TranslationMask? LinkedReferenceColor;
            public bool PersistentLocation;
            public bool LocationReference;
            public bool IgnoredBySandbox;
            public bool LocationRefTypes;
            public bool HeadTrackingWeight;
            public bool Horse;
            public bool FavorCost;
            public EnableParent.TranslationMask? EnableParent;
            public Ownership.TranslationMask? Ownership;
            public bool Emittance;
            public bool MultiboundReference;
            public bool IgnoredBySandbox2;
            public bool Scale;
            public Placement.TranslationMask? Placement;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Base = defaultOn;
                this.EncounterZone = defaultOn;
                this.RagdollData = defaultOn;
                this.RagdollBipedData = defaultOn;
                this.LevelModifier = defaultOn;
                this.MerchantContainer = defaultOn;
                this.Count = defaultOn;
                this.Radius = defaultOn;
                this.Health = defaultOn;
                this.PersistentLocation = defaultOn;
                this.LocationReference = defaultOn;
                this.IgnoredBySandbox = defaultOn;
                this.LocationRefTypes = defaultOn;
                this.HeadTrackingWeight = defaultOn;
                this.Horse = defaultOn;
                this.FavorCost = defaultOn;
                this.Emittance = defaultOn;
                this.MultiboundReference = defaultOn;
                this.IgnoredBySandbox2 = defaultOn;
                this.Scale = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Base, null));
                ret.Add((EncounterZone, null));
                ret.Add((RagdollData, null));
                ret.Add((RagdollBipedData, null));
                ret.Add((Patrol != null ? Patrol.OnOverall : DefaultOn, Patrol?.GetCrystal()));
                ret.Add((LevelModifier, null));
                ret.Add((MerchantContainer, null));
                ret.Add((Count, null));
                ret.Add((Radius, null));
                ret.Add((Health, null));
                ret.Add((LinkedReferences == null ? DefaultOn : !LinkedReferences.GetCrystal().CopyNothing, LinkedReferences?.GetCrystal()));
                ret.Add((ActivateParents != null ? ActivateParents.OnOverall : DefaultOn, ActivateParents?.GetCrystal()));
                ret.Add((LinkedReferenceColor != null ? LinkedReferenceColor.OnOverall : DefaultOn, LinkedReferenceColor?.GetCrystal()));
                ret.Add((PersistentLocation, null));
                ret.Add((LocationReference, null));
                ret.Add((IgnoredBySandbox, null));
                ret.Add((LocationRefTypes, null));
                ret.Add((HeadTrackingWeight, null));
                ret.Add((Horse, null));
                ret.Add((FavorCost, null));
                ret.Add((EnableParent != null ? EnableParent.OnOverall : DefaultOn, EnableParent?.GetCrystal()));
                ret.Add((Ownership != null ? Ownership.OnOverall : DefaultOn, Ownership?.GetCrystal()));
                ret.Add((Emittance, null));
                ret.Add((MultiboundReference, null));
                ret.Add((IgnoredBySandbox2, null));
                ret.Add((Scale, null));
                ret.Add((Placement != null ? Placement.OnOverall : DefaultOn, Placement?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = PlacedNpc_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PlacedNpcCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedNpcSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedNpc(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private PlacedNpc(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal PlacedNpc(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public PlacedNpc(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public PlacedNpc(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedNpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedNpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static PlacedNpc CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PlacedNpc();
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedNpc item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedNpc GetNew()
        {
            return new PlacedNpc();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedNpc :
        IPlacedNpcGetter,
        IAPlaced,
        IOwner,
        ILinkedReference,
        IKeywordLinkedReference,
        IPlaced,
        IPlacedSimple,
        ILocationTargetable,
        ILoquiObjectSetter<IPlacedNpcInternal>,
        IFormLinkContainer
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new FormLinkNullable<INpcGetter> Base { get; set; }
        new FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; }
        new MemorySlice<Byte>? RagdollData { get; set; }
        new MemorySlice<Byte>? RagdollBipedData { get; set; }
        new Patrol? Patrol { get; set; }
        new Level? LevelModifier { get; set; }
        new FormLinkNullable<IPlacedObjectGetter> MerchantContainer { get; set; }
        new Int32? Count { get; set; }
        new Single? Radius { get; set; }
        new Single? Health { get; set; }
        new ExtendedList<LinkedReferences> LinkedReferences { get; }
        new ActivateParents? ActivateParents { get; set; }
        new LinkedReferenceColor? LinkedReferenceColor { get; set; }
        new FormLinkNullable<ILocationGetter> PersistentLocation { get; set; }
        new FormLinkNullable<ILocationRecordGetter> LocationReference { get; set; }
        new Boolean IgnoredBySandbox { get; set; }
        new ExtendedList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes { get; set; }
        new Single? HeadTrackingWeight { get; set; }
        new FormLinkNullable<IPlacedNpcGetter> Horse { get; set; }
        new Single? FavorCost { get; set; }
        new EnableParent? EnableParent { get; set; }
        new Ownership? Ownership { get; set; }
        new FormLinkNullable<IEmittanceGetter> Emittance { get; set; }
        new FormLinkNullable<IPlacedObjectGetter> MultiboundReference { get; set; }
        new Boolean IgnoredBySandbox2 { get; set; }
        new Single? Scale { get; set; }
        new Placement? Placement { get; set; }
        #region Mutagen
        new PlacedNpc.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IPlacedNpcInternal :
        IAPlacedInternal,
        IPlacedNpc,
        IPlacedNpcGetter
    {
    }

    public partial interface IPlacedNpcGetter :
        IAPlacedGetter,
        IOwnerGetter,
        ILinkedReferenceGetter,
        IKeywordLinkedReferenceGetter,
        IPlacedGetter,
        IPlacedSimpleGetter,
        ILocationTargetableGetter,
        ILoquiObject<IPlacedNpcGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => PlacedNpc_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        FormLinkNullable<INpcGetter> Base { get; }
        FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; }
        ReadOnlyMemorySlice<Byte>? RagdollData { get; }
        ReadOnlyMemorySlice<Byte>? RagdollBipedData { get; }
        IPatrolGetter? Patrol { get; }
        Level? LevelModifier { get; }
        FormLinkNullable<IPlacedObjectGetter> MerchantContainer { get; }
        Int32? Count { get; }
        Single? Radius { get; }
        Single? Health { get; }
        IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; }
        IActivateParentsGetter? ActivateParents { get; }
        ILinkedReferenceColorGetter? LinkedReferenceColor { get; }
        FormLinkNullable<ILocationGetter> PersistentLocation { get; }
        FormLinkNullable<ILocationRecordGetter> LocationReference { get; }
        Boolean IgnoredBySandbox { get; }
        IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes { get; }
        Single? HeadTrackingWeight { get; }
        FormLinkNullable<IPlacedNpcGetter> Horse { get; }
        Single? FavorCost { get; }
        IEnableParentGetter? EnableParent { get; }
        IOwnershipGetter? Ownership { get; }
        FormLinkNullable<IEmittanceGetter> Emittance { get; }
        FormLinkNullable<IPlacedObjectGetter> MultiboundReference { get; }
        Boolean IgnoredBySandbox2 { get; }
        Single? Scale { get; }
        IPlacementGetter? Placement { get; }

        #region Mutagen
        PlacedNpc.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedNpcMixIn
    {
        public static void Clear(this IPlacedNpcInternal item)
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedNpc.Mask<bool> GetEqualsMask(
            this IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPlacedNpcGetter item,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPlacedNpcGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedNpcGetter item,
            IPlacedNpcGetter rhs)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPlacedNpcInternal lhs,
            IPlacedNpcGetter rhs,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedNpc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedNpcInternal lhs,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedNpc Duplicate(
            this IPlacedNpcGetter item,
            FormKey formKey,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedNpcInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PlacedNpc_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        Base = 7,
        EncounterZone = 8,
        RagdollData = 9,
        RagdollBipedData = 10,
        Patrol = 11,
        LevelModifier = 12,
        MerchantContainer = 13,
        Count = 14,
        Radius = 15,
        Health = 16,
        LinkedReferences = 17,
        ActivateParents = 18,
        LinkedReferenceColor = 19,
        PersistentLocation = 20,
        LocationReference = 21,
        IgnoredBySandbox = 22,
        LocationRefTypes = 23,
        HeadTrackingWeight = 24,
        Horse = 25,
        FavorCost = 26,
        EnableParent = 27,
        Ownership = 28,
        Emittance = 29,
        MultiboundReference = 30,
        IgnoredBySandbox2 = 31,
        Scale = 32,
        Placement = 33,
    }
    #endregion

    #region Registration
    public partial class PlacedNpc_Registration : ILoquiRegistration
    {
        public static readonly PlacedNpc_Registration Instance = new PlacedNpc_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 224,
            version: 0);

        public const string GUID = "b00383a9-1cbf-4c8c-9cdf-f2e886a6909a";

        public const ushort AdditionalFieldCount = 28;

        public const ushort FieldCount = 34;

        public static readonly Type MaskType = typeof(PlacedNpc.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedNpc.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedNpc);

        public static readonly Type GetterType = typeof(IPlacedNpcGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedNpc);

        public static readonly Type? InternalSetterType = typeof(IPlacedNpcInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.PlacedNpc";

        public const string Name = "PlacedNpc";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ACHR;
        public static readonly Type BinaryWriteTranslation = typeof(PlacedNpcBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PlacedNpcSetterCommon : APlacedSetterCommon
    {
        public new static readonly PlacedNpcSetterCommon Instance = new PlacedNpcSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedNpcInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Base = FormLinkNullable<INpcGetter>.Null;
            item.EncounterZone = FormLinkNullable<IEncounterZoneGetter>.Null;
            item.RagdollData = default;
            item.RagdollBipedData = default;
            item.Patrol = null;
            item.LevelModifier = default;
            item.MerchantContainer = FormLinkNullable<IPlacedObjectGetter>.Null;
            item.Count = default;
            item.Radius = default;
            item.Health = default;
            item.LinkedReferences.Clear();
            item.ActivateParents = null;
            item.LinkedReferenceColor = null;
            item.PersistentLocation = FormLinkNullable<ILocationGetter>.Null;
            item.LocationReference = FormLinkNullable<ILocationRecordGetter>.Null;
            item.IgnoredBySandbox = default;
            item.LocationRefTypes = null;
            item.HeadTrackingWeight = default;
            item.Horse = FormLinkNullable<IPlacedNpcGetter>.Null;
            item.FavorCost = default;
            item.EnableParent = null;
            item.Ownership = null;
            item.Emittance = FormLinkNullable<IEmittanceGetter>.Null;
            item.MultiboundReference = FormLinkNullable<IPlacedObjectGetter>.Null;
            item.IgnoredBySandbox2 = default;
            item.Scale = default;
            item.Placement = null;
            base.Clear(item);
        }
        
        public override void Clear(IAPlacedInternal item)
        {
            Clear(item: (IPlacedNpcInternal)item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IPlacedNpcInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedNpcInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedNpc obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Base = obj.Base.Relink(mapping);
            obj.EncounterZone = obj.EncounterZone.Relink(mapping);
            obj.Patrol?.RemapLinks(mapping);
            obj.MerchantContainer = obj.MerchantContainer.Relink(mapping);
            obj.LinkedReferences.RemapLinks(mapping);
            obj.ActivateParents?.RemapLinks(mapping);
            obj.PersistentLocation = obj.PersistentLocation.Relink(mapping);
            obj.LocationReference = obj.LocationReference.Relink(mapping);
            obj.LocationRefTypes?.RemapLinks(mapping);
            obj.Horse = obj.Horse.Relink(mapping);
            obj.EnableParent?.RemapLinks(mapping);
            obj.Ownership?.RemapLinks(mapping);
            obj.Emittance = obj.Emittance.Relink(mapping);
            obj.MultiboundReference = obj.MultiboundReference.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedNpcInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IPlacedNpcInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PlacedNpcBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedNpcBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPlacedInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedNpc)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedNpc)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedNpc)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PlacedNpcCommon : APlacedCommon
    {
        public new static readonly PlacedNpcCommon Instance = new PlacedNpcCommon();

        public PlacedNpc.Mask<bool> GetEqualsMask(
            IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedNpc.Mask<bool>(false);
            ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            PlacedNpc.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Base = item.Base.Equals(rhs.Base);
            ret.EncounterZone = item.EncounterZone.Equals(rhs.EncounterZone);
            ret.RagdollData = MemorySliceExt.Equal(item.RagdollData, rhs.RagdollData);
            ret.RagdollBipedData = MemorySliceExt.Equal(item.RagdollBipedData, rhs.RagdollBipedData);
            ret.Patrol = EqualsMaskHelper.EqualsHelper(
                item.Patrol,
                rhs.Patrol,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LevelModifier = item.LevelModifier == rhs.LevelModifier;
            ret.MerchantContainer = item.MerchantContainer.Equals(rhs.MerchantContainer);
            ret.Count = item.Count == rhs.Count;
            ret.Radius = item.Radius.EqualsWithin(rhs.Radius);
            ret.Health = item.Health.EqualsWithin(rhs.Health);
            ret.LinkedReferences = item.LinkedReferences.CollectionEqualsHelper(
                rhs.LinkedReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ActivateParents = EqualsMaskHelper.EqualsHelper(
                item.ActivateParents,
                rhs.ActivateParents,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LinkedReferenceColor = EqualsMaskHelper.EqualsHelper(
                item.LinkedReferenceColor,
                rhs.LinkedReferenceColor,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PersistentLocation = item.PersistentLocation.Equals(rhs.PersistentLocation);
            ret.LocationReference = item.LocationReference.Equals(rhs.LocationReference);
            ret.IgnoredBySandbox = item.IgnoredBySandbox == rhs.IgnoredBySandbox;
            ret.LocationRefTypes = item.LocationRefTypes.CollectionEqualsHelper(
                rhs.LocationRefTypes,
                (l, r) => object.Equals(l, r),
                include);
            ret.HeadTrackingWeight = item.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight);
            ret.Horse = item.Horse.Equals(rhs.Horse);
            ret.FavorCost = item.FavorCost.EqualsWithin(rhs.FavorCost);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Ownership = EqualsMaskHelper.EqualsHelper(
                item.Ownership,
                rhs.Ownership,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Emittance = item.Emittance.Equals(rhs.Emittance);
            ret.MultiboundReference = item.MultiboundReference.Equals(rhs.MultiboundReference);
            ret.IgnoredBySandbox2 = item.IgnoredBySandbox2 == rhs.IgnoredBySandbox2;
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.Placement = EqualsMaskHelper.EqualsHelper(
                item.Placement,
                rhs.Placement,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPlacedNpcGetter item,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPlacedNpcGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PlacedNpc =>");
            }
            else
            {
                fg.AppendLine($"{name} (PlacedNpc) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPlacedNpcGetter item,
            FileGeneration fg,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            APlacedCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.Base ?? true)
            {
                fg.AppendItem(item.Base.FormKeyNullable, "Base");
            }
            if (printMask?.EncounterZone ?? true)
            {
                fg.AppendItem(item.EncounterZone.FormKeyNullable, "EncounterZone");
            }
            if ((printMask?.RagdollData ?? true)
                && item.RagdollData.TryGet(out var RagdollDataItem))
            {
                fg.AppendLine($"RagdollData => {SpanExt.ToHexString(RagdollDataItem)}");
            }
            if ((printMask?.RagdollBipedData ?? true)
                && item.RagdollBipedData.TryGet(out var RagdollBipedDataItem))
            {
                fg.AppendLine($"RagdollBipedData => {SpanExt.ToHexString(RagdollBipedDataItem)}");
            }
            if ((printMask?.Patrol?.Overall ?? true)
                && item.Patrol.TryGet(out var PatrolItem))
            {
                PatrolItem?.ToString(fg, "Patrol");
            }
            if ((printMask?.LevelModifier ?? true)
                && item.LevelModifier.TryGet(out var LevelModifierItem))
            {
                fg.AppendItem(LevelModifierItem, "LevelModifier");
            }
            if (printMask?.MerchantContainer ?? true)
            {
                fg.AppendItem(item.MerchantContainer.FormKeyNullable, "MerchantContainer");
            }
            if ((printMask?.Count ?? true)
                && item.Count.TryGet(out var CountItem))
            {
                fg.AppendItem(CountItem, "Count");
            }
            if ((printMask?.Radius ?? true)
                && item.Radius.TryGet(out var RadiusItem))
            {
                fg.AppendItem(RadiusItem, "Radius");
            }
            if ((printMask?.Health ?? true)
                && item.Health.TryGet(out var HealthItem))
            {
                fg.AppendItem(HealthItem, "Health");
            }
            if (printMask?.LinkedReferences?.Overall ?? true)
            {
                fg.AppendLine("LinkedReferences =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LinkedReferences)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.ActivateParents?.Overall ?? true)
                && item.ActivateParents.TryGet(out var ActivateParentsItem))
            {
                ActivateParentsItem?.ToString(fg, "ActivateParents");
            }
            if ((printMask?.LinkedReferenceColor?.Overall ?? true)
                && item.LinkedReferenceColor.TryGet(out var LinkedReferenceColorItem))
            {
                LinkedReferenceColorItem?.ToString(fg, "LinkedReferenceColor");
            }
            if (printMask?.PersistentLocation ?? true)
            {
                fg.AppendItem(item.PersistentLocation.FormKeyNullable, "PersistentLocation");
            }
            if (printMask?.LocationReference ?? true)
            {
                fg.AppendItem(item.LocationReference.FormKeyNullable, "LocationReference");
            }
            if (printMask?.IgnoredBySandbox ?? true)
            {
                fg.AppendItem(item.IgnoredBySandbox, "IgnoredBySandbox");
            }
            if ((printMask?.LocationRefTypes?.Overall ?? true)
                && item.LocationRefTypes.TryGet(out var LocationRefTypesItem))
            {
                fg.AppendLine("LocationRefTypes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in LocationRefTypesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.HeadTrackingWeight ?? true)
                && item.HeadTrackingWeight.TryGet(out var HeadTrackingWeightItem))
            {
                fg.AppendItem(HeadTrackingWeightItem, "HeadTrackingWeight");
            }
            if (printMask?.Horse ?? true)
            {
                fg.AppendItem(item.Horse.FormKeyNullable, "Horse");
            }
            if ((printMask?.FavorCost ?? true)
                && item.FavorCost.TryGet(out var FavorCostItem))
            {
                fg.AppendItem(FavorCostItem, "FavorCost");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent.TryGet(out var EnableParentItem))
            {
                EnableParentItem?.ToString(fg, "EnableParent");
            }
            if ((printMask?.Ownership?.Overall ?? true)
                && item.Ownership.TryGet(out var OwnershipItem))
            {
                OwnershipItem?.ToString(fg, "Ownership");
            }
            if (printMask?.Emittance ?? true)
            {
                fg.AppendItem(item.Emittance.FormKeyNullable, "Emittance");
            }
            if (printMask?.MultiboundReference ?? true)
            {
                fg.AppendItem(item.MultiboundReference.FormKeyNullable, "MultiboundReference");
            }
            if (printMask?.IgnoredBySandbox2 ?? true)
            {
                fg.AppendItem(item.IgnoredBySandbox2, "IgnoredBySandbox2");
            }
            if ((printMask?.Scale ?? true)
                && item.Scale.TryGet(out var ScaleItem))
            {
                fg.AppendItem(ScaleItem, "Scale");
            }
            if ((printMask?.Placement?.Overall ?? true)
                && item.Placement.TryGet(out var PlacementItem))
            {
                PlacementItem?.ToString(fg, "Placement");
            }
        }
        
        public static PlacedNpc_FieldIndex ConvertFieldIndex(APlaced_FieldIndex index)
        {
            switch (index)
            {
                case APlaced_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedNpc_FieldIndex)((int)index);
                case APlaced_FieldIndex.FormKey:
                    return (PlacedNpc_FieldIndex)((int)index);
                case APlaced_FieldIndex.VersionControl:
                    return (PlacedNpc_FieldIndex)((int)index);
                case APlaced_FieldIndex.EditorID:
                    return (PlacedNpc_FieldIndex)((int)index);
                case APlaced_FieldIndex.FormVersion:
                    return (PlacedNpc_FieldIndex)((int)index);
                case APlaced_FieldIndex.Version2:
                    return (PlacedNpc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedNpc_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedNpc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (PlacedNpc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (PlacedNpc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (PlacedNpc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (PlacedNpc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (PlacedNpc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedNpc_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedNpc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedNpcGetter? lhs,
            IPlacedNpcGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAPlacedGetter)lhs, (IAPlacedGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!lhs.Base.Equals(rhs.Base)) return false;
            if (!lhs.EncounterZone.Equals(rhs.EncounterZone)) return false;
            if (!MemorySliceExt.Equal(lhs.RagdollData, rhs.RagdollData)) return false;
            if (!MemorySliceExt.Equal(lhs.RagdollBipedData, rhs.RagdollBipedData)) return false;
            if (!object.Equals(lhs.Patrol, rhs.Patrol)) return false;
            if (lhs.LevelModifier != rhs.LevelModifier) return false;
            if (!lhs.MerchantContainer.Equals(rhs.MerchantContainer)) return false;
            if (lhs.Count != rhs.Count) return false;
            if (!lhs.Radius.EqualsWithin(rhs.Radius)) return false;
            if (!lhs.Health.EqualsWithin(rhs.Health)) return false;
            if (!lhs.LinkedReferences.SequenceEqualNullable(rhs.LinkedReferences)) return false;
            if (!object.Equals(lhs.ActivateParents, rhs.ActivateParents)) return false;
            if (!object.Equals(lhs.LinkedReferenceColor, rhs.LinkedReferenceColor)) return false;
            if (!lhs.PersistentLocation.Equals(rhs.PersistentLocation)) return false;
            if (!lhs.LocationReference.Equals(rhs.LocationReference)) return false;
            if (lhs.IgnoredBySandbox != rhs.IgnoredBySandbox) return false;
            if (!lhs.LocationRefTypes.SequenceEqualNullable(rhs.LocationRefTypes)) return false;
            if (!lhs.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight)) return false;
            if (!lhs.Horse.Equals(rhs.Horse)) return false;
            if (!lhs.FavorCost.EqualsWithin(rhs.FavorCost)) return false;
            if (!object.Equals(lhs.EnableParent, rhs.EnableParent)) return false;
            if (!object.Equals(lhs.Ownership, rhs.Ownership)) return false;
            if (!lhs.Emittance.Equals(rhs.Emittance)) return false;
            if (!lhs.MultiboundReference.Equals(rhs.MultiboundReference)) return false;
            if (lhs.IgnoredBySandbox2 != rhs.IgnoredBySandbox2) return false;
            if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            if (!object.Equals(lhs.Placement, rhs.Placement)) return false;
            return true;
        }
        
        public override bool Equals(
            IAPlacedGetter? lhs,
            IAPlacedGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedNpcGetter?)lhs,
                rhs: rhs as IPlacedNpcGetter);
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedNpcGetter?)lhs,
                rhs: rhs as IPlacedNpcGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedNpcGetter?)lhs,
                rhs: rhs as IPlacedNpcGetter);
        }
        
        public virtual int GetHashCode(IPlacedNpcGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.Base);
            hash.Add(item.EncounterZone);
            if (item.RagdollData.TryGet(out var RagdollDataItem))
            {
                hash.Add(RagdollDataItem);
            }
            if (item.RagdollBipedData.TryGet(out var RagdollBipedDataItem))
            {
                hash.Add(RagdollBipedDataItem);
            }
            if (item.Patrol.TryGet(out var Patrolitem))
            {
                hash.Add(Patrolitem);
            }
            if (item.LevelModifier.TryGet(out var LevelModifieritem))
            {
                hash.Add(LevelModifieritem);
            }
            hash.Add(item.MerchantContainer);
            if (item.Count.TryGet(out var Countitem))
            {
                hash.Add(Countitem);
            }
            if (item.Radius.TryGet(out var Radiusitem))
            {
                hash.Add(Radiusitem);
            }
            if (item.Health.TryGet(out var Healthitem))
            {
                hash.Add(Healthitem);
            }
            hash.Add(item.LinkedReferences);
            if (item.ActivateParents.TryGet(out var ActivateParentsitem))
            {
                hash.Add(ActivateParentsitem);
            }
            if (item.LinkedReferenceColor.TryGet(out var LinkedReferenceColoritem))
            {
                hash.Add(LinkedReferenceColoritem);
            }
            hash.Add(item.PersistentLocation);
            hash.Add(item.LocationReference);
            hash.Add(item.IgnoredBySandbox);
            hash.Add(item.LocationRefTypes);
            if (item.HeadTrackingWeight.TryGet(out var HeadTrackingWeightitem))
            {
                hash.Add(HeadTrackingWeightitem);
            }
            hash.Add(item.Horse);
            if (item.FavorCost.TryGet(out var FavorCostitem))
            {
                hash.Add(FavorCostitem);
            }
            if (item.EnableParent.TryGet(out var EnableParentitem))
            {
                hash.Add(EnableParentitem);
            }
            if (item.Ownership.TryGet(out var Ownershipitem))
            {
                hash.Add(Ownershipitem);
            }
            hash.Add(item.Emittance);
            hash.Add(item.MultiboundReference);
            hash.Add(item.IgnoredBySandbox2);
            if (item.Scale.TryGet(out var Scaleitem))
            {
                hash.Add(Scaleitem);
            }
            if (item.Placement.TryGet(out var Placementitem))
            {
                hash.Add(Placementitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPlacedGetter item)
        {
            return GetHashCode(item: (IPlacedNpcGetter)item);
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedNpcGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedNpcGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedNpc.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPlacedNpcGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Base.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Base);
            }
            if (obj.EncounterZone.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.EncounterZone);
            }
            if (obj.Patrol.TryGet(out var PatrolItems))
            {
                foreach (var item in PatrolItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.MerchantContainer.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.MerchantContainer);
            }
            foreach (var item in obj.LinkedReferences.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.ActivateParents.TryGet(out var ActivateParentsItems))
            {
                foreach (var item in ActivateParentsItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.PersistentLocation.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PersistentLocation);
            }
            if (obj.LocationReference.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.LocationReference);
            }
            if (obj.LocationRefTypes.TryGet(out var LocationRefTypesItem))
            {
                foreach (var item in LocationRefTypesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Horse.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Horse);
            }
            if (obj.EnableParent.TryGet(out var EnableParentItems))
            {
                foreach (var item in EnableParentItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Ownership.TryGet(out var OwnershipItems))
            {
                foreach (var item in OwnershipItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Emittance.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Emittance);
            }
            if (obj.MultiboundReference.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.MultiboundReference);
            }
            yield break;
        }
        
        #region Duplicate
        public PlacedNpc Duplicate(
            IPlacedNpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedNpc(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override APlaced Duplicate(
            IAPlacedGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedNpc)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedNpc)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedNpc)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class PlacedNpcSetterTranslationCommon : APlacedSetterTranslationCommon
    {
        public new static readonly PlacedNpcSetterTranslationCommon Instance = new PlacedNpcSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedNpcInternal item,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedNpc item,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPlaced)item,
                (IAPlacedGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Base) ?? true))
            {
                item.Base = new FormLinkNullable<INpcGetter>(rhs.Base.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.EncounterZone) ?? true))
            {
                item.EncounterZone = new FormLinkNullable<IEncounterZoneGetter>(rhs.EncounterZone.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.RagdollData) ?? true))
            {
                if(rhs.RagdollData.TryGet(out var RagdollDatarhs))
                {
                    item.RagdollData = RagdollDatarhs.ToArray();
                }
                else
                {
                    item.RagdollData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.RagdollBipedData) ?? true))
            {
                if(rhs.RagdollBipedData.TryGet(out var RagdollBipedDatarhs))
                {
                    item.RagdollBipedData = RagdollBipedDatarhs.ToArray();
                }
                else
                {
                    item.RagdollBipedData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Patrol) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.Patrol);
                try
                {
                    if(rhs.Patrol.TryGet(out var rhsPatrol))
                    {
                        item.Patrol = rhsPatrol.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Patrol));
                    }
                    else
                    {
                        item.Patrol = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LevelModifier) ?? true))
            {
                item.LevelModifier = rhs.LevelModifier;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.MerchantContainer) ?? true))
            {
                item.MerchantContainer = new FormLinkNullable<IPlacedObjectGetter>(rhs.MerchantContainer.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Count) ?? true))
            {
                item.Count = rhs.Count;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LinkedReferences) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.LinkedReferences);
                try
                {
                    item.LinkedReferences.SetTo(
                        rhs.LinkedReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.ActivateParents) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.ActivateParents);
                try
                {
                    if(rhs.ActivateParents.TryGet(out var rhsActivateParents))
                    {
                        item.ActivateParents = rhsActivateParents.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.ActivateParents));
                    }
                    else
                    {
                        item.ActivateParents = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LinkedReferenceColor) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.LinkedReferenceColor);
                try
                {
                    if(rhs.LinkedReferenceColor.TryGet(out var rhsLinkedReferenceColor))
                    {
                        item.LinkedReferenceColor = rhsLinkedReferenceColor.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.LinkedReferenceColor));
                    }
                    else
                    {
                        item.LinkedReferenceColor = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.PersistentLocation) ?? true))
            {
                item.PersistentLocation = new FormLinkNullable<ILocationGetter>(rhs.PersistentLocation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LocationReference) ?? true))
            {
                item.LocationReference = new FormLinkNullable<ILocationRecordGetter>(rhs.LocationReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.IgnoredBySandbox) ?? true))
            {
                item.IgnoredBySandbox = rhs.IgnoredBySandbox;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LocationRefTypes) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.LocationRefTypes);
                try
                {
                    if ((rhs.LocationRefTypes != null))
                    {
                        item.LocationRefTypes = 
                            rhs.LocationRefTypes
                            .Select(r => (IFormLink<ILocationReferenceTypeGetter>)new FormLink<ILocationReferenceTypeGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<ILocationReferenceTypeGetter>>();
                    }
                    else
                    {
                        item.LocationRefTypes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.HeadTrackingWeight) ?? true))
            {
                item.HeadTrackingWeight = rhs.HeadTrackingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Horse) ?? true))
            {
                item.Horse = new FormLinkNullable<IPlacedNpcGetter>(rhs.Horse.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.FavorCost) ?? true))
            {
                item.FavorCost = rhs.FavorCost;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent.TryGet(out var rhsEnableParent))
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Ownership) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.Ownership);
                try
                {
                    if(rhs.Ownership.TryGet(out var rhsOwnership))
                    {
                        item.Ownership = rhsOwnership.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Ownership));
                    }
                    else
                    {
                        item.Ownership = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Emittance) ?? true))
            {
                item.Emittance = new FormLinkNullable<IEmittanceGetter>(rhs.Emittance.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.MultiboundReference) ?? true))
            {
                item.MultiboundReference = new FormLinkNullable<IPlacedObjectGetter>(rhs.MultiboundReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.IgnoredBySandbox2) ?? true))
            {
                item.IgnoredBySandbox2 = rhs.IgnoredBySandbox2;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Placement) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.Placement);
                try
                {
                    if(rhs.Placement.TryGet(out var rhsPlacement))
                    {
                        item.Placement = rhsPlacement.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Placement));
                    }
                    else
                    {
                        item.Placement = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IAPlacedInternal item,
            IAPlacedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpcInternal)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlaced item,
            IAPlacedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpc)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpcInternal)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpc)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpcInternal)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpc)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedNpc.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PlacedNpc
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedNpc_Registration.Instance;
        public new static PlacedNpc_Registration Registration => PlacedNpc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedNpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedNpcSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedNpcSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PlacedNpcBinaryWriteTranslation :
        APlacedBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PlacedNpcBinaryWriteTranslation Instance = new PlacedNpcBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IPlacedNpcGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Base,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAME));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EncounterZone,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XEZN));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RagdollData,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XRGD));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RagdollBipedData,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XRGB));
            if (item.Patrol.TryGet(out var PatrolItem))
            {
                ((PatrolBinaryWriteTranslation)((IBinaryItem)PatrolItem).BinaryWriteTranslator).Write(
                    item: PatrolItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Level>.Instance.WriteNullable(
                writer,
                item.LevelModifier,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLCM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MerchantContainer,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XMRC));
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Count,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCNT));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Radius,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XRDS));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Health,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XHLP));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ILinkedReferencesGetter>.Instance.Write(
                writer: writer,
                items: item.LinkedReferences,
                transl: (MutagenWriter subWriter, ILinkedReferencesGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((LinkedReferencesBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.ActivateParents.TryGet(out var ActivateParentsItem))
            {
                ((ActivateParentsBinaryWriteTranslation)((IBinaryItem)ActivateParentsItem).BinaryWriteTranslator).Write(
                    item: ActivateParentsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.LinkedReferenceColor.TryGet(out var LinkedReferenceColorItem))
            {
                ((LinkedReferenceColorBinaryWriteTranslation)((IBinaryItem)LinkedReferenceColorItem).BinaryWriteTranslator).Write(
                    item: LinkedReferenceColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PersistentLocation,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLCN));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LocationReference,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLRL));
            Mutagen.Bethesda.Binary.BooleanBinaryTranslation.Instance.WriteAsMarker(
                writer: writer,
                item: item.IgnoredBySandbox,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XIS2));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ILocationReferenceTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.LocationRefTypes,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.XLRT),
                transl: (MutagenWriter subWriter, IFormLink<ILocationReferenceTypeGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HeadTrackingWeight,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XHTW));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Horse,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XHOR));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FavorCost,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XFVC));
            if (item.EnableParent.TryGet(out var EnableParentItem))
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Ownership.TryGet(out var OwnershipItem))
            {
                ((OwnershipBinaryWriteTranslation)((IBinaryItem)OwnershipItem).BinaryWriteTranslator).Write(
                    item: OwnershipItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Emittance,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XEMI));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MultiboundReference,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XMBR));
            Mutagen.Bethesda.Binary.BooleanBinaryTranslation.Instance.WriteAsMarker(
                writer: writer,
                item: item.IgnoredBySandbox2,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XIBS));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XSCL));
            if (item.Placement.TryGet(out var PlacementItem))
            {
                ((PlacementBinaryWriteTranslation)((IBinaryItem)PlacementItem).BinaryWriteTranslator).Write(
                    item: PlacementItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IPlacedNpcGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.ACHR),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPlacedGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PlacedNpcBinaryCreateTranslation : APlacedBinaryCreateTranslation
    {
        public new readonly static PlacedNpcBinaryCreateTranslation Instance = new PlacedNpcBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ACHR;
        public static ParseResult FillBinaryRecordTypes(
            IPlacedNpcInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)PlacedNpc_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Base = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedNpc_FieldIndex.Base;
                }
                case RecordTypeInts.XEZN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EncounterZone = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedNpc_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XRGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XRGB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollBipedData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.RagdollBipedData;
                }
                case RecordTypeInts.XPRD:
                {
                    item.Patrol = Mutagen.Bethesda.Fallout4.Patrol.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedNpc_FieldIndex.Patrol;
                }
                case RecordTypeInts.XLCM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LevelModifier = EnumBinaryTranslation<Level>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.LevelModifier;
                }
                case RecordTypeInts.XMRC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MerchantContainer = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedNpc_FieldIndex.MerchantContainer;
                }
                case RecordTypeInts.XCNT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Count = frame.ReadInt32();
                    return (int)PlacedNpc_FieldIndex.Count;
                }
                case RecordTypeInts.XRDS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Radius = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.Radius;
                }
                case RecordTypeInts.XHLP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Health = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.Health;
                }
                case RecordTypeInts.XLKR:
                {
                    item.LinkedReferences.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<LinkedReferences>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.XLKR,
                            recordTypeConverter: recordTypeConverter,
                            transl: LinkedReferences.TryCreateFromBinary));
                    return (int)PlacedNpc_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XAPD:
                {
                    item.ActivateParents = Mutagen.Bethesda.Fallout4.ActivateParents.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedNpc_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XCLP:
                {
                    item.LinkedReferenceColor = Mutagen.Bethesda.Fallout4.LinkedReferenceColor.CreateFromBinary(frame: frame);
                    return (int)PlacedNpc_FieldIndex.LinkedReferenceColor;
                }
                case RecordTypeInts.XLCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PersistentLocation = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedNpc_FieldIndex.PersistentLocation;
                }
                case RecordTypeInts.XLRL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationReference = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedNpc_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XIS2:
                {
                    item.IgnoredBySandbox = true;
                    return (int)PlacedNpc_FieldIndex.IgnoredBySandbox;
                }
                case RecordTypeInts.XLRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationRefTypes = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ILocationReferenceTypeGetter>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<ILocationReferenceTypeGetter>>();
                    return (int)PlacedNpc_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XHTW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeadTrackingWeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XHOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Horse = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedNpc_FieldIndex.Horse;
                }
                case RecordTypeInts.XFVC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FavorCost = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.FavorCost;
                }
                case RecordTypeInts.XESP:
                {
                    item.EnableParent = Mutagen.Bethesda.Fallout4.EnableParent.CreateFromBinary(frame: frame);
                    return (int)PlacedNpc_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XOWN:
                case RecordTypeInts.XRNK:
                {
                    item.Ownership = Mutagen.Bethesda.Fallout4.Ownership.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedNpc_FieldIndex.Ownership;
                }
                case RecordTypeInts.XEMI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Emittance = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedNpc_FieldIndex.Emittance;
                }
                case RecordTypeInts.XMBR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MultiboundReference = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedNpc_FieldIndex.MultiboundReference;
                }
                case RecordTypeInts.XIBS:
                {
                    item.IgnoredBySandbox2 = true;
                    return (int)PlacedNpc_FieldIndex.IgnoredBySandbox2;
                }
                case RecordTypeInts.XSCL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    item.Placement = Mutagen.Bethesda.Fallout4.Placement.CreateFromBinary(frame: frame);
                    return (int)PlacedNpc_FieldIndex.Placement;
                }
                default:
                    return APlacedBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PlacedNpcBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PlacedNpcBinaryOverlay :
        APlacedBinaryOverlay,
        IPlacedNpcGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedNpc_Registration.Instance;
        public new static PlacedNpc_Registration Registration => PlacedNpc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedNpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedNpcSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PlacedNpcCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedNpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedNpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public PlacedNpc.MajorFlag MajorFlags => (PlacedNpc.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Base
        private int? _BaseLocation;
        public FormLinkNullable<INpcGetter> Base => _BaseLocation.HasValue ? new FormLinkNullable<INpcGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _BaseLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<INpcGetter>.Null;
        #endregion
        #region EncounterZone
        private int? _EncounterZoneLocation;
        public FormLinkNullable<IEncounterZoneGetter> EncounterZone => _EncounterZoneLocation.HasValue ? new FormLinkNullable<IEncounterZoneGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EncounterZoneLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEncounterZoneGetter>.Null;
        #endregion
        #region RagdollData
        private int? _RagdollDataLocation;
        public ReadOnlyMemorySlice<Byte>? RagdollData => _RagdollDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _RagdollDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region RagdollBipedData
        private int? _RagdollBipedDataLocation;
        public ReadOnlyMemorySlice<Byte>? RagdollBipedData => _RagdollBipedDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _RagdollBipedDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IPatrolGetter? Patrol { get; private set; }
        #region LevelModifier
        private int? _LevelModifierLocation;
        public Level? LevelModifier => _LevelModifierLocation.HasValue ? (Level)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LevelModifierLocation!.Value, _package.MetaData.Constants)) : default(Level?);
        #endregion
        #region MerchantContainer
        private int? _MerchantContainerLocation;
        public FormLinkNullable<IPlacedObjectGetter> MerchantContainer => _MerchantContainerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MerchantContainerLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region Count
        private int? _CountLocation;
        public Int32? Count => _CountLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CountLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region Radius
        private int? _RadiusLocation;
        public Single? Radius => _RadiusLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _RadiusLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Health
        private int? _HealthLocation;
        public Single? Health => _HealthLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _HealthLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; private set; } = ListExt.Empty<LinkedReferencesBinaryOverlay>();
        public IActivateParentsGetter? ActivateParents { get; private set; }
        #region LinkedReferenceColor
        private RangeInt32? _LinkedReferenceColorLocation;
        public ILinkedReferenceColorGetter? LinkedReferenceColor => _LinkedReferenceColorLocation.HasValue ? LinkedReferenceColorBinaryOverlay.LinkedReferenceColorFactory(new OverlayStream(_data.Slice(_LinkedReferenceColorLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region PersistentLocation
        private int? _PersistentLocationLocation;
        public FormLinkNullable<ILocationGetter> PersistentLocation => _PersistentLocationLocation.HasValue ? new FormLinkNullable<ILocationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PersistentLocationLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationGetter>.Null;
        #endregion
        #region LocationReference
        private int? _LocationReferenceLocation;
        public FormLinkNullable<ILocationRecordGetter> LocationReference => _LocationReferenceLocation.HasValue ? new FormLinkNullable<ILocationRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LocationReferenceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationRecordGetter>.Null;
        #endregion
        #region IgnoredBySandbox
        private int? _IgnoredBySandboxLocation;
        public Boolean IgnoredBySandbox => _IgnoredBySandboxLocation.HasValue ? true : default;
        #endregion
        public IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes { get; private set; }
        #region HeadTrackingWeight
        private int? _HeadTrackingWeightLocation;
        public Single? HeadTrackingWeight => _HeadTrackingWeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _HeadTrackingWeightLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Horse
        private int? _HorseLocation;
        public FormLinkNullable<IPlacedNpcGetter> Horse => _HorseLocation.HasValue ? new FormLinkNullable<IPlacedNpcGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _HorseLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedNpcGetter>.Null;
        #endregion
        #region FavorCost
        private int? _FavorCostLocation;
        public Single? FavorCost => _FavorCostLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _FavorCostLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        public IEnableParentGetter? EnableParent => _EnableParentLocation.HasValue ? EnableParentBinaryOverlay.EnableParentFactory(new OverlayStream(_data.Slice(_EnableParentLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IOwnershipGetter? Ownership { get; private set; }
        #region Emittance
        private int? _EmittanceLocation;
        public FormLinkNullable<IEmittanceGetter> Emittance => _EmittanceLocation.HasValue ? new FormLinkNullable<IEmittanceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EmittanceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEmittanceGetter>.Null;
        #endregion
        #region MultiboundReference
        private int? _MultiboundReferenceLocation;
        public FormLinkNullable<IPlacedObjectGetter> MultiboundReference => _MultiboundReferenceLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MultiboundReferenceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region IgnoredBySandbox2
        private int? _IgnoredBySandbox2Location;
        public Boolean IgnoredBySandbox2 => _IgnoredBySandbox2Location.HasValue ? true : default;
        #endregion
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Placement
        private RangeInt32? _PlacementLocation;
        public IPlacementGetter? Placement => _PlacementLocation.HasValue ? PlacementBinaryOverlay.PlacementFactory(new OverlayStream(_data.Slice(_PlacementLocation!.Value.Min), _package), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedNpcBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PlacedNpcBinaryOverlay PlacedNpcFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new PlacedNpcBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PlacedNpcBinaryOverlay PlacedNpcFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PlacedNpcFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedNpc_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    _BaseLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Base;
                }
                case RecordTypeInts.XEZN:
                {
                    _EncounterZoneLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XRGD:
                {
                    _RagdollDataLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XRGB:
                {
                    _RagdollBipedDataLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.RagdollBipedData;
                }
                case RecordTypeInts.XPRD:
                {
                    this.Patrol = PatrolBinaryOverlay.PatrolFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedNpc_FieldIndex.Patrol;
                }
                case RecordTypeInts.XLCM:
                {
                    _LevelModifierLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.LevelModifier;
                }
                case RecordTypeInts.XMRC:
                {
                    _MerchantContainerLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.MerchantContainer;
                }
                case RecordTypeInts.XCNT:
                {
                    _CountLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Count;
                }
                case RecordTypeInts.XRDS:
                {
                    _RadiusLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Radius;
                }
                case RecordTypeInts.XHLP:
                {
                    _HealthLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Health;
                }
                case RecordTypeInts.XLKR:
                {
                    this.LinkedReferences = BinaryOverlayList.FactoryByArray<LinkedReferencesBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => LinkedReferencesBinaryOverlay.LinkedReferencesFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)PlacedNpc_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XAPD:
                {
                    this.ActivateParents = ActivateParentsBinaryOverlay.ActivateParentsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedNpc_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XCLP:
                {
                    _LinkedReferenceColorLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedNpc_FieldIndex.LinkedReferenceColor;
                }
                case RecordTypeInts.XLCN:
                {
                    _PersistentLocationLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.PersistentLocation;
                }
                case RecordTypeInts.XLRL:
                {
                    _LocationReferenceLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XIS2:
                {
                    _IgnoredBySandboxLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.IgnoredBySandbox;
                }
                case RecordTypeInts.XLRT:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.LocationRefTypes = BinaryOverlayList.FactoryByStartIndex<IFormLink<ILocationReferenceTypeGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<ILocationReferenceTypeGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return (int)PlacedNpc_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XHTW:
                {
                    _HeadTrackingWeightLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XHOR:
                {
                    _HorseLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Horse;
                }
                case RecordTypeInts.XFVC:
                {
                    _FavorCostLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.FavorCost;
                }
                case RecordTypeInts.XESP:
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedNpc_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XOWN:
                case RecordTypeInts.XRNK:
                {
                    this.Ownership = OwnershipBinaryOverlay.OwnershipFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedNpc_FieldIndex.Ownership;
                }
                case RecordTypeInts.XEMI:
                {
                    _EmittanceLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Emittance;
                }
                case RecordTypeInts.XMBR:
                {
                    _MultiboundReferenceLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.MultiboundReference;
                }
                case RecordTypeInts.XIBS:
                {
                    _IgnoredBySandbox2Location = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.IgnoredBySandbox2;
                }
                case RecordTypeInts.XSCL:
                {
                    _ScaleLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    _PlacementLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedNpc_FieldIndex.Placement;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedNpcMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlacedNpcGetter rhs)) return false;
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPlacedNpcGetter? obj)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

