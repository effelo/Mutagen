/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ScenePhase :
        IScenePhase,
        ILoquiObjectSetter<ScenePhase>,
        IEquatable<IScenePhaseGetter>
    {
        #region Ctor
        public ScenePhase()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IScenePhaseGetter.Name => this.Name;
        #endregion
        #region StartConditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _StartConditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> StartConditions
        {
            get => this._StartConditions;
            protected set => this._StartConditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IScenePhaseGetter.StartConditions => _StartConditions;
        #endregion

        #endregion
        #region CompletionConditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _CompletionConditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> CompletionConditions
        {
            get => this._CompletionConditions;
            protected set => this._CompletionConditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IScenePhaseGetter.CompletionConditions => _CompletionConditions;
        #endregion

        #endregion
        #region Unused
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ScenePhaseUnusedData? _Unused;
        public ScenePhaseUnusedData? Unused
        {
            get => _Unused;
            set => _Unused = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScenePhaseUnusedDataGetter? IScenePhaseGetter.Unused => this.Unused;
        #endregion
        #region Unused2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ScenePhaseUnusedData? _Unused2;
        public ScenePhaseUnusedData? Unused2
        {
            get => _Unused2;
            set => _Unused2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScenePhaseUnusedDataGetter? IScenePhaseGetter.Unused2 => this.Unused2;
        #endregion
        #region EditorWidth
        public UInt32? EditorWidth { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IScenePhaseGetter.EditorWidth => this.EditorWidth;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScenePhaseMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScenePhaseGetter rhs)) return false;
            return ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IScenePhaseGetter? obj)
        {
            return ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.StartConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.CompletionConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Unused = new MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>(initialValue, new ScenePhaseUnusedData.Mask<TItem>(initialValue));
                this.Unused2 = new MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>(initialValue, new ScenePhaseUnusedData.Mask<TItem>(initialValue));
                this.EditorWidth = initialValue;
            }

            public Mask(
                TItem Name,
                TItem StartConditions,
                TItem CompletionConditions,
                TItem Unused,
                TItem Unused2,
                TItem EditorWidth)
            {
                this.Name = Name;
                this.StartConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(StartConditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.CompletionConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(CompletionConditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Unused = new MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>(Unused, new ScenePhaseUnusedData.Mask<TItem>(Unused));
                this.Unused2 = new MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>(Unused2, new ScenePhaseUnusedData.Mask<TItem>(Unused2));
                this.EditorWidth = EditorWidth;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? StartConditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? CompletionConditions;
            public MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>? Unused { get; set; }
            public MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>? Unused2 { get; set; }
            public TItem EditorWidth;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.StartConditions, rhs.StartConditions)) return false;
                if (!object.Equals(this.CompletionConditions, rhs.CompletionConditions)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.Unused2, rhs.Unused2)) return false;
                if (!object.Equals(this.EditorWidth, rhs.EditorWidth)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.StartConditions);
                hash.Add(this.CompletionConditions);
                hash.Add(this.Unused);
                hash.Add(this.Unused2);
                hash.Add(this.EditorWidth);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (this.StartConditions != null)
                {
                    if (!eval(this.StartConditions.Overall)) return false;
                    if (this.StartConditions.Specific != null)
                    {
                        foreach (var item in this.StartConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.CompletionConditions != null)
                {
                    if (!eval(this.CompletionConditions.Overall)) return false;
                    if (this.CompletionConditions.Specific != null)
                    {
                        foreach (var item in this.CompletionConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Unused != null)
                {
                    if (!eval(this.Unused.Overall)) return false;
                    if (this.Unused.Specific != null && !this.Unused.Specific.All(eval)) return false;
                }
                if (Unused2 != null)
                {
                    if (!eval(this.Unused2.Overall)) return false;
                    if (this.Unused2.Specific != null && !this.Unused2.Specific.All(eval)) return false;
                }
                if (!eval(this.EditorWidth)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (this.StartConditions != null)
                {
                    if (eval(this.StartConditions.Overall)) return true;
                    if (this.StartConditions.Specific != null)
                    {
                        foreach (var item in this.StartConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.CompletionConditions != null)
                {
                    if (eval(this.CompletionConditions.Overall)) return true;
                    if (this.CompletionConditions.Specific != null)
                    {
                        foreach (var item in this.CompletionConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Unused != null)
                {
                    if (eval(this.Unused.Overall)) return true;
                    if (this.Unused.Specific != null && this.Unused.Specific.Any(eval)) return true;
                }
                if (Unused2 != null)
                {
                    if (eval(this.Unused2.Overall)) return true;
                    if (this.Unused2.Specific != null && this.Unused2.Specific.Any(eval)) return true;
                }
                if (eval(this.EditorWidth)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ScenePhase.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                if (StartConditions != null)
                {
                    obj.StartConditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.StartConditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (StartConditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.StartConditions.Specific = l;
                        foreach (var item in StartConditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (CompletionConditions != null)
                {
                    obj.CompletionConditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.CompletionConditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (CompletionConditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.CompletionConditions.Specific = l;
                        foreach (var item in CompletionConditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Unused = this.Unused == null ? null : new MaskItem<R, ScenePhaseUnusedData.Mask<R>?>(eval(this.Unused.Overall), this.Unused.Specific?.Translate(eval));
                obj.Unused2 = this.Unused2 == null ? null : new MaskItem<R, ScenePhaseUnusedData.Mask<R>?>(eval(this.Unused2.Overall), this.Unused2.Specific?.Translate(eval));
                obj.EditorWidth = eval(this.EditorWidth);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ScenePhase.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ScenePhase.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ScenePhase.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if ((printMask?.StartConditions?.Overall ?? true)
                        && StartConditions.TryGet(out var StartConditionsItem))
                    {
                        fg.AppendLine("StartConditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(StartConditionsItem.Overall);
                            if (StartConditionsItem.Specific != null)
                            {
                                foreach (var subItem in StartConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.CompletionConditions?.Overall ?? true)
                        && CompletionConditions.TryGet(out var CompletionConditionsItem))
                    {
                        fg.AppendLine("CompletionConditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(CompletionConditionsItem.Overall);
                            if (CompletionConditionsItem.Specific != null)
                            {
                                foreach (var subItem in CompletionConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Unused?.Overall ?? true)
                    {
                        Unused?.ToString(fg);
                    }
                    if (printMask?.Unused2?.Overall ?? true)
                    {
                        Unused2?.ToString(fg);
                    }
                    if (printMask?.EditorWidth ?? true)
                    {
                        fg.AppendItem(EditorWidth, "EditorWidth");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? StartConditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? CompletionConditions;
            public MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>? Unused;
            public MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>? Unused2;
            public Exception? EditorWidth;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ScenePhase_FieldIndex enu = (ScenePhase_FieldIndex)index;
                switch (enu)
                {
                    case ScenePhase_FieldIndex.Name:
                        return Name;
                    case ScenePhase_FieldIndex.StartConditions:
                        return StartConditions;
                    case ScenePhase_FieldIndex.CompletionConditions:
                        return CompletionConditions;
                    case ScenePhase_FieldIndex.Unused:
                        return Unused;
                    case ScenePhase_FieldIndex.Unused2:
                        return Unused2;
                    case ScenePhase_FieldIndex.EditorWidth:
                        return EditorWidth;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ScenePhase_FieldIndex enu = (ScenePhase_FieldIndex)index;
                switch (enu)
                {
                    case ScenePhase_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ScenePhase_FieldIndex.StartConditions:
                        this.StartConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case ScenePhase_FieldIndex.CompletionConditions:
                        this.CompletionConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case ScenePhase_FieldIndex.Unused:
                        this.Unused = new MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>(ex, null);
                        break;
                    case ScenePhase_FieldIndex.Unused2:
                        this.Unused2 = new MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>(ex, null);
                        break;
                    case ScenePhase_FieldIndex.EditorWidth:
                        this.EditorWidth = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ScenePhase_FieldIndex enu = (ScenePhase_FieldIndex)index;
                switch (enu)
                {
                    case ScenePhase_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ScenePhase_FieldIndex.StartConditions:
                        this.StartConditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case ScenePhase_FieldIndex.CompletionConditions:
                        this.CompletionConditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case ScenePhase_FieldIndex.Unused:
                        this.Unused = (MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>?)obj;
                        break;
                    case ScenePhase_FieldIndex.Unused2:
                        this.Unused2 = (MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>?)obj;
                        break;
                    case ScenePhase_FieldIndex.EditorWidth:
                        this.EditorWidth = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (StartConditions != null) return true;
                if (CompletionConditions != null) return true;
                if (Unused != null) return true;
                if (Unused2 != null) return true;
                if (EditorWidth != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Name, "Name");
                if (StartConditions.TryGet(out var StartConditionsItem))
                {
                    fg.AppendLine("StartConditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(StartConditionsItem.Overall);
                        if (StartConditionsItem.Specific != null)
                        {
                            foreach (var subItem in StartConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (CompletionConditions.TryGet(out var CompletionConditionsItem))
                {
                    fg.AppendLine("CompletionConditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(CompletionConditionsItem.Overall);
                        if (CompletionConditionsItem.Specific != null)
                        {
                            foreach (var subItem in CompletionConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Unused?.ToString(fg);
                Unused2?.ToString(fg);
                fg.AppendItem(EditorWidth, "EditorWidth");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.StartConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.StartConditions?.Overall, rhs.StartConditions?.Overall), ExceptionExt.Combine(this.StartConditions?.Specific, rhs.StartConditions?.Specific));
                ret.CompletionConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.CompletionConditions?.Overall, rhs.CompletionConditions?.Overall), ExceptionExt.Combine(this.CompletionConditions?.Specific, rhs.CompletionConditions?.Specific));
                ret.Unused = this.Unused.Combine(rhs.Unused, (l, r) => l.Combine(r));
                ret.Unused2 = this.Unused2.Combine(rhs.Unused2, (l, r) => l.Combine(r));
                ret.EditorWidth = this.EditorWidth.Combine(rhs.EditorWidth);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public Condition.TranslationMask? StartConditions;
            public Condition.TranslationMask? CompletionConditions;
            public ScenePhaseUnusedData.TranslationMask? Unused;
            public ScenePhaseUnusedData.TranslationMask? Unused2;
            public bool EditorWidth;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.EditorWidth = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((StartConditions == null ? DefaultOn : !StartConditions.GetCrystal().CopyNothing, StartConditions?.GetCrystal()));
                ret.Add((CompletionConditions == null ? DefaultOn : !CompletionConditions.GetCrystal().CopyNothing, CompletionConditions?.GetCrystal()));
                ret.Add((Unused != null ? Unused.OnOverall : DefaultOn, Unused?.GetCrystal()));
                ret.Add((Unused2 != null ? Unused2.OnOverall : DefaultOn, Unused2?.GetCrystal()));
                ret.Add((EditorWidth, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ScenePhase_Registration.TriggeringRecordType;
        public IEnumerable<FormLinkInformation> ContainedFormLinks => ScenePhaseCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScenePhaseSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScenePhaseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScenePhaseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static ScenePhase CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ScenePhase();
            ((ScenePhaseSetterCommon)((IScenePhaseGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ScenePhase item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ScenePhaseSetterCommon)((IScenePhaseGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ScenePhase GetNew()
        {
            return new ScenePhase();
        }

    }
    #endregion

    #region Interface
    public partial interface IScenePhase :
        IScenePhaseGetter,
        ILoquiObjectSetter<IScenePhase>,
        IFormLinkContainer
    {
        new String? Name { get; set; }
        new ExtendedList<Condition> StartConditions { get; }
        new ExtendedList<Condition> CompletionConditions { get; }
        new ScenePhaseUnusedData? Unused { get; set; }
        new ScenePhaseUnusedData? Unused2 { get; set; }
        new UInt32? EditorWidth { get; set; }
    }

    public partial interface IScenePhaseGetter :
        ILoquiObject,
        ILoquiObject<IScenePhaseGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ScenePhase_Registration.Instance;
        String? Name { get; }
        IReadOnlyList<IConditionGetter> StartConditions { get; }
        IReadOnlyList<IConditionGetter> CompletionConditions { get; }
        IScenePhaseUnusedDataGetter? Unused { get; }
        IScenePhaseUnusedDataGetter? Unused2 { get; }
        UInt32? EditorWidth { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScenePhaseMixIn
    {
        public static void Clear(this IScenePhase item)
        {
            ((ScenePhaseSetterCommon)((IScenePhaseGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScenePhase.Mask<bool> GetEqualsMask(
            this IScenePhaseGetter item,
            IScenePhaseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScenePhaseGetter item,
            string? name = null,
            ScenePhase.Mask<bool>? printMask = null)
        {
            return ((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScenePhaseGetter item,
            FileGeneration fg,
            string? name = null,
            ScenePhase.Mask<bool>? printMask = null)
        {
            ((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IScenePhaseGetter item,
            IScenePhaseGetter rhs)
        {
            return ((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IScenePhase lhs,
            IScenePhaseGetter rhs)
        {
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScenePhase lhs,
            IScenePhaseGetter rhs,
            ScenePhase.TranslationMask? copyMask = null)
        {
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScenePhase lhs,
            IScenePhaseGetter rhs,
            out ScenePhase.ErrorMask errorMask,
            ScenePhase.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ScenePhase.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScenePhase lhs,
            IScenePhaseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ScenePhase DeepCopy(
            this IScenePhaseGetter item,
            ScenePhase.TranslationMask? copyMask = null)
        {
            return ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScenePhase DeepCopy(
            this IScenePhaseGetter item,
            out ScenePhase.ErrorMask errorMask,
            ScenePhase.TranslationMask? copyMask = null)
        {
            return ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScenePhase DeepCopy(
            this IScenePhaseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IScenePhase item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScenePhaseSetterCommon)((IScenePhaseGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ScenePhase_FieldIndex
    {
        Name = 0,
        StartConditions = 1,
        CompletionConditions = 2,
        Unused = 3,
        Unused2 = 4,
        EditorWidth = 5,
    }
    #endregion

    #region Registration
    public partial class ScenePhase_Registration : ILoquiRegistration
    {
        public static readonly ScenePhase_Registration Instance = new ScenePhase_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 468,
            version: 0);

        public const string GUID = "0520e1b4-d605-4812-8177-c80e8d49733d";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(ScenePhase.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScenePhase.ErrorMask);

        public static readonly Type ClassType = typeof(ScenePhase);

        public static readonly Type GetterType = typeof(IScenePhaseGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScenePhase);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ScenePhase";

        public const string Name = "ScenePhase";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.HNAM;
        public static readonly Type BinaryWriteTranslation = typeof(ScenePhaseBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ScenePhaseSetterCommon
    {
        public static readonly ScenePhaseSetterCommon Instance = new ScenePhaseSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScenePhase item)
        {
            ClearPartial();
            item.Name = default;
            item.StartConditions.Clear();
            item.CompletionConditions.Clear();
            item.Unused = null;
            item.Unused2 = null;
            item.EditorWidth = default;
        }
        
        #region Mutagen
        public void RemapLinks(IScenePhase obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.StartConditions.RemapLinks(mapping);
            obj.CompletionConditions.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScenePhase item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ScenePhaseBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ScenePhaseBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ScenePhaseCommon
    {
        public static readonly ScenePhaseCommon Instance = new ScenePhaseCommon();

        public ScenePhase.Mask<bool> GetEqualsMask(
            IScenePhaseGetter item,
            IScenePhaseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScenePhase.Mask<bool>(false);
            ((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScenePhaseGetter item,
            IScenePhaseGetter rhs,
            ScenePhase.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.StartConditions = item.StartConditions.CollectionEqualsHelper(
                rhs.StartConditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.CompletionConditions = item.CompletionConditions.CollectionEqualsHelper(
                rhs.CompletionConditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Unused = EqualsMaskHelper.EqualsHelper(
                item.Unused,
                rhs.Unused,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unused2 = EqualsMaskHelper.EqualsHelper(
                item.Unused2,
                rhs.Unused2,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EditorWidth = item.EditorWidth == rhs.EditorWidth;
        }
        
        public string ToString(
            IScenePhaseGetter item,
            string? name = null,
            ScenePhase.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScenePhaseGetter item,
            FileGeneration fg,
            string? name = null,
            ScenePhase.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScenePhase =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScenePhase) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScenePhaseGetter item,
            FileGeneration fg,
            ScenePhase.Mask<bool>? printMask = null)
        {
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.StartConditions?.Overall ?? true)
            {
                fg.AppendLine("StartConditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.StartConditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.CompletionConditions?.Overall ?? true)
            {
                fg.AppendLine("CompletionConditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.CompletionConditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Unused?.Overall ?? true)
                && item.Unused.TryGet(out var UnusedItem))
            {
                UnusedItem?.ToString(fg, "Unused");
            }
            if ((printMask?.Unused2?.Overall ?? true)
                && item.Unused2.TryGet(out var Unused2Item))
            {
                Unused2Item?.ToString(fg, "Unused2");
            }
            if ((printMask?.EditorWidth ?? true)
                && item.EditorWidth.TryGet(out var EditorWidthItem))
            {
                fg.AppendItem(EditorWidthItem, "EditorWidth");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScenePhaseGetter? lhs,
            IScenePhaseGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.StartConditions.SequenceEqualNullable(rhs.StartConditions)) return false;
            if (!lhs.CompletionConditions.SequenceEqualNullable(rhs.CompletionConditions)) return false;
            if (!object.Equals(lhs.Unused, rhs.Unused)) return false;
            if (!object.Equals(lhs.Unused2, rhs.Unused2)) return false;
            if (lhs.EditorWidth != rhs.EditorWidth) return false;
            return true;
        }
        
        public virtual int GetHashCode(IScenePhaseGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.StartConditions);
            hash.Add(item.CompletionConditions);
            if (item.Unused.TryGet(out var Unuseditem))
            {
                hash.Add(Unuseditem);
            }
            if (item.Unused2.TryGet(out var Unused2item))
            {
                hash.Add(Unused2item);
            }
            if (item.EditorWidth.TryGet(out var EditorWidthitem))
            {
                hash.Add(EditorWidthitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ScenePhase.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IScenePhaseGetter obj)
        {
            foreach (var item in obj.StartConditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.CompletionConditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ScenePhaseSetterTranslationCommon
    {
        public static readonly ScenePhaseSetterTranslationCommon Instance = new ScenePhaseSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IScenePhase item,
            IScenePhaseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.StartConditions) ?? true))
            {
                errorMask?.PushIndex((int)ScenePhase_FieldIndex.StartConditions);
                try
                {
                    item.StartConditions.SetTo(
                        rhs.StartConditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.CompletionConditions) ?? true))
            {
                errorMask?.PushIndex((int)ScenePhase_FieldIndex.CompletionConditions);
                try
                {
                    item.CompletionConditions.SetTo(
                        rhs.CompletionConditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.Unused) ?? true))
            {
                errorMask?.PushIndex((int)ScenePhase_FieldIndex.Unused);
                try
                {
                    if(rhs.Unused.TryGet(out var rhsUnused))
                    {
                        item.Unused = rhsUnused.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ScenePhase_FieldIndex.Unused));
                    }
                    else
                    {
                        item.Unused = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.Unused2) ?? true))
            {
                errorMask?.PushIndex((int)ScenePhase_FieldIndex.Unused2);
                try
                {
                    if(rhs.Unused2.TryGet(out var rhsUnused2))
                    {
                        item.Unused2 = rhsUnused2.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ScenePhase_FieldIndex.Unused2));
                    }
                    else
                    {
                        item.Unused2 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.EditorWidth) ?? true))
            {
                item.EditorWidth = rhs.EditorWidth;
            }
        }
        
        #endregion
        
        public ScenePhase DeepCopy(
            IScenePhaseGetter item,
            ScenePhase.TranslationMask? copyMask = null)
        {
            ScenePhase ret = (ScenePhase)((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).GetNew();
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ScenePhase DeepCopy(
            IScenePhaseGetter item,
            out ScenePhase.ErrorMask errorMask,
            ScenePhase.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScenePhase ret = (ScenePhase)((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).GetNew();
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ScenePhase.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ScenePhase DeepCopy(
            IScenePhaseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScenePhase ret = (ScenePhase)((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).GetNew();
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ScenePhase
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScenePhase_Registration.Instance;
        public static ScenePhase_Registration Registration => ScenePhase_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScenePhaseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ScenePhaseSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScenePhaseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScenePhaseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IScenePhaseGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IScenePhaseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScenePhaseBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ScenePhaseBinaryWriteTranslation Instance = new ScenePhaseBinaryWriteTranslation();

        static partial void WriteBinaryStartConditionsCustom(
            MutagenWriter writer,
            IScenePhaseGetter item);

        public static void WriteBinaryStartConditions(
            MutagenWriter writer,
            IScenePhaseGetter item)
        {
            WriteBinaryStartConditionsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryCompletionConditionsCustom(
            MutagenWriter writer,
            IScenePhaseGetter item);

        public static void WriteBinaryCompletionConditions(
            MutagenWriter writer,
            IScenePhaseGetter item)
        {
            WriteBinaryCompletionConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IScenePhaseGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.Subrecord(writer, RecordTypes.HNAM)) { }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM0),
                binaryType: StringBinaryType.NullTerminate);
            ScenePhaseBinaryWriteTranslation.WriteBinaryStartConditions(
                writer: writer,
                item: item);
            ScenePhaseBinaryWriteTranslation.WriteBinaryCompletionConditions(
                writer: writer,
                item: item);
            if (item.Unused.TryGet(out var UnusedItem))
            {
                ((ScenePhaseUnusedDataBinaryWriteTranslation)((IBinaryItem)UnusedItem).BinaryWriteTranslator).Write(
                    item: UnusedItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Unused2.TryGet(out var Unused2Item))
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.NEXT)) { }
                ((ScenePhaseUnusedDataBinaryWriteTranslation)((IBinaryItem)Unused2Item).BinaryWriteTranslator).Write(
                    item: Unused2Item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EditorWidth,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.WNAM));
            using (HeaderExport.Subrecord(writer, RecordTypes.HNAM)) { }
        }

        public void Write(
            MutagenWriter writer,
            IScenePhaseGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScenePhaseGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ScenePhaseBinaryCreateTranslation
    {
        public readonly static ScenePhaseBinaryCreateTranslation Instance = new ScenePhaseBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IScenePhase item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IScenePhase item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.HNAM:
                {
                    switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                    {
                        case 0:
                            frame.ReadSubrecordFrame();
                            return new ParseResult(default(int?), nextRecordType);
                        case 1:
                            frame.ReadSubrecordFrame();
                            return ParseResult.Stop;
                        default:
                            throw new NotImplementedException();
                    }
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)ScenePhase_FieldIndex.Name;
                }
                case RecordTypeInts.CTDA:
                {
                    ScenePhaseBinaryCreateTranslation.FillBinaryStartConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)ScenePhase_FieldIndex.StartConditions;
                }
                case RecordTypeInts.NEXT:
                {
                    switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                    {
                        case 0:
                            ScenePhaseBinaryCreateTranslation.FillBinaryCompletionConditionsCustom(
                                frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                                item: item);
                            return new ParseResult((int)ScenePhase_FieldIndex.CompletionConditions, nextRecordType);
                        case 1:
                            frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                            item.Unused2 = Mutagen.Bethesda.Fallout4.ScenePhaseUnusedData.CreateFromBinary(
                                frame: frame,
                                recordTypeConverter: recordTypeConverter);
                            return new ParseResult((int)ScenePhase_FieldIndex.Unused2, nextRecordType);
                        default:
                            throw new NotImplementedException();
                    }
                }
                case RecordTypeInts.SCHR:
                case RecordTypeInts.SCDA:
                case RecordTypeInts.SCTX:
                case RecordTypeInts.QNAM:
                case RecordTypeInts.SCRO:
                {
                    item.Unused = Mutagen.Bethesda.Fallout4.ScenePhaseUnusedData.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)ScenePhase_FieldIndex.Unused;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EditorWidth = frame.ReadUInt32();
                    return (int)ScenePhase_FieldIndex.EditorWidth;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        static partial void FillBinaryStartConditionsCustom(
            MutagenFrame frame,
            IScenePhase item);

        static partial void FillBinaryCompletionConditionsCustom(
            MutagenFrame frame,
            IScenePhase item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ScenePhaseBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScenePhaseGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScenePhaseBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScenePhaseBinaryOverlay :
        BinaryOverlay,
        IScenePhaseGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScenePhase_Registration.Instance;
        public static ScenePhase_Registration Registration => ScenePhase_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScenePhaseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScenePhaseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScenePhaseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IScenePhaseGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IScenePhaseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => ScenePhaseCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScenePhaseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScenePhaseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region StartConditions
        partial void StartConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        #region CompletionConditions
        partial void CompletionConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        public IScenePhaseUnusedDataGetter? Unused { get; private set; }
        public IScenePhaseUnusedDataGetter? Unused2 { get; private set; }
        #region EditorWidth
        private int? _EditorWidthLocation;
        public UInt32? EditorWidth => _EditorWidthLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EditorWidthLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScenePhaseBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ScenePhaseBinaryOverlay ScenePhaseFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ScenePhaseBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ScenePhaseBinaryOverlay ScenePhaseFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ScenePhaseFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.HNAM:
                {
                    switch (recordParseCount?.GetOrAdd(type) ?? 0)
                    {
                        case 0:
                            stream.ReadSubrecordFrame();
                            return new ParseResult(default(int?), type);
                        case 1:
                            stream.ReadSubrecordFrame();
                            return ParseResult.Stop;
                        default:
                            throw new NotImplementedException();
                    }
                }
                case RecordTypeInts.NAM0:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)ScenePhase_FieldIndex.Name;
                }
                case RecordTypeInts.CTDA:
                {
                    StartConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)ScenePhase_FieldIndex.StartConditions;
                }
                case RecordTypeInts.NEXT:
                {
                    switch (recordParseCount?.GetOrAdd(type) ?? 0)
                    {
                        case 0:
                            CompletionConditionsCustomParse(
                                stream: stream,
                                finalPos: finalPos,
                                offset: offset,
                                type: type,
                                lastParsed: lastParsed);
                            return new ParseResult((int)ScenePhase_FieldIndex.CompletionConditions, type);
                        case 1:
                            stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                            this.Unused2 = ScenePhaseUnusedDataBinaryOverlay.ScenePhaseUnusedDataFactory(
                                stream: stream,
                                package: _package,
                                recordTypeConverter: recordTypeConverter);
                            return new ParseResult((int)ScenePhase_FieldIndex.Unused2, type);
                        default:
                            throw new NotImplementedException();
                    }
                }
                case RecordTypeInts.SCHR:
                case RecordTypeInts.SCDA:
                case RecordTypeInts.SCTX:
                case RecordTypeInts.QNAM:
                case RecordTypeInts.SCRO:
                {
                    this.Unused = ScenePhaseUnusedDataBinaryOverlay.ScenePhaseUnusedDataFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)ScenePhase_FieldIndex.Unused;
                }
                case RecordTypeInts.WNAM:
                {
                    _EditorWidthLocation = (stream.Position - offset);
                    return (int)ScenePhase_FieldIndex.EditorWidth;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScenePhaseMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScenePhaseGetter rhs)) return false;
            return ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IScenePhaseGetter? obj)
        {
            return ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

