/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ImageSpaceHdr :
        IImageSpaceHdr,
        ILoquiObjectSetter<ImageSpaceHdr>,
        IEquatable<IImageSpaceHdrGetter>
    {
        #region Ctor
        public ImageSpaceHdr()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EyeAdaptSpeed
        public Single EyeAdaptSpeed { get; set; } = default;
        #endregion
        #region BloomBlurRadius
        public Single BloomBlurRadius { get; set; } = default;
        #endregion
        #region BloomThreshold
        public Single BloomThreshold { get; set; } = default;
        #endregion
        #region BloomScale
        public Single BloomScale { get; set; } = default;
        #endregion
        #region ReceiveBloomThreshold
        public Single ReceiveBloomThreshold { get; set; } = default;
        #endregion
        #region White
        public Single White { get; set; } = default;
        #endregion
        #region SunlightScale
        public Single SunlightScale { get; set; } = default;
        #endregion
        #region SkyScale
        public Single SkyScale { get; set; } = default;
        #endregion
        #region EyeAdaptStrength
        public Single EyeAdaptStrength { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ImageSpaceHdrMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IImageSpaceHdrGetter rhs)) return false;
            return ((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IImageSpaceHdrGetter? obj)
        {
            return ((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.EyeAdaptSpeed = initialValue;
                this.BloomBlurRadius = initialValue;
                this.BloomThreshold = initialValue;
                this.BloomScale = initialValue;
                this.ReceiveBloomThreshold = initialValue;
                this.White = initialValue;
                this.SunlightScale = initialValue;
                this.SkyScale = initialValue;
                this.EyeAdaptStrength = initialValue;
            }

            public Mask(
                TItem EyeAdaptSpeed,
                TItem BloomBlurRadius,
                TItem BloomThreshold,
                TItem BloomScale,
                TItem ReceiveBloomThreshold,
                TItem White,
                TItem SunlightScale,
                TItem SkyScale,
                TItem EyeAdaptStrength)
            {
                this.EyeAdaptSpeed = EyeAdaptSpeed;
                this.BloomBlurRadius = BloomBlurRadius;
                this.BloomThreshold = BloomThreshold;
                this.BloomScale = BloomScale;
                this.ReceiveBloomThreshold = ReceiveBloomThreshold;
                this.White = White;
                this.SunlightScale = SunlightScale;
                this.SkyScale = SkyScale;
                this.EyeAdaptStrength = EyeAdaptStrength;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem EyeAdaptSpeed;
            public TItem BloomBlurRadius;
            public TItem BloomThreshold;
            public TItem BloomScale;
            public TItem ReceiveBloomThreshold;
            public TItem White;
            public TItem SunlightScale;
            public TItem SkyScale;
            public TItem EyeAdaptStrength;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.EyeAdaptSpeed, rhs.EyeAdaptSpeed)) return false;
                if (!object.Equals(this.BloomBlurRadius, rhs.BloomBlurRadius)) return false;
                if (!object.Equals(this.BloomThreshold, rhs.BloomThreshold)) return false;
                if (!object.Equals(this.BloomScale, rhs.BloomScale)) return false;
                if (!object.Equals(this.ReceiveBloomThreshold, rhs.ReceiveBloomThreshold)) return false;
                if (!object.Equals(this.White, rhs.White)) return false;
                if (!object.Equals(this.SunlightScale, rhs.SunlightScale)) return false;
                if (!object.Equals(this.SkyScale, rhs.SkyScale)) return false;
                if (!object.Equals(this.EyeAdaptStrength, rhs.EyeAdaptStrength)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.EyeAdaptSpeed);
                hash.Add(this.BloomBlurRadius);
                hash.Add(this.BloomThreshold);
                hash.Add(this.BloomScale);
                hash.Add(this.ReceiveBloomThreshold);
                hash.Add(this.White);
                hash.Add(this.SunlightScale);
                hash.Add(this.SkyScale);
                hash.Add(this.EyeAdaptStrength);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.EyeAdaptSpeed)) return false;
                if (!eval(this.BloomBlurRadius)) return false;
                if (!eval(this.BloomThreshold)) return false;
                if (!eval(this.BloomScale)) return false;
                if (!eval(this.ReceiveBloomThreshold)) return false;
                if (!eval(this.White)) return false;
                if (!eval(this.SunlightScale)) return false;
                if (!eval(this.SkyScale)) return false;
                if (!eval(this.EyeAdaptStrength)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.EyeAdaptSpeed)) return true;
                if (eval(this.BloomBlurRadius)) return true;
                if (eval(this.BloomThreshold)) return true;
                if (eval(this.BloomScale)) return true;
                if (eval(this.ReceiveBloomThreshold)) return true;
                if (eval(this.White)) return true;
                if (eval(this.SunlightScale)) return true;
                if (eval(this.SkyScale)) return true;
                if (eval(this.EyeAdaptStrength)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ImageSpaceHdr.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.EyeAdaptSpeed = eval(this.EyeAdaptSpeed);
                obj.BloomBlurRadius = eval(this.BloomBlurRadius);
                obj.BloomThreshold = eval(this.BloomThreshold);
                obj.BloomScale = eval(this.BloomScale);
                obj.ReceiveBloomThreshold = eval(this.ReceiveBloomThreshold);
                obj.White = eval(this.White);
                obj.SunlightScale = eval(this.SunlightScale);
                obj.SkyScale = eval(this.SkyScale);
                obj.EyeAdaptStrength = eval(this.EyeAdaptStrength);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ImageSpaceHdr.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ImageSpaceHdr.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ImageSpaceHdr.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.EyeAdaptSpeed ?? true)
                    {
                        fg.AppendItem(EyeAdaptSpeed, "EyeAdaptSpeed");
                    }
                    if (printMask?.BloomBlurRadius ?? true)
                    {
                        fg.AppendItem(BloomBlurRadius, "BloomBlurRadius");
                    }
                    if (printMask?.BloomThreshold ?? true)
                    {
                        fg.AppendItem(BloomThreshold, "BloomThreshold");
                    }
                    if (printMask?.BloomScale ?? true)
                    {
                        fg.AppendItem(BloomScale, "BloomScale");
                    }
                    if (printMask?.ReceiveBloomThreshold ?? true)
                    {
                        fg.AppendItem(ReceiveBloomThreshold, "ReceiveBloomThreshold");
                    }
                    if (printMask?.White ?? true)
                    {
                        fg.AppendItem(White, "White");
                    }
                    if (printMask?.SunlightScale ?? true)
                    {
                        fg.AppendItem(SunlightScale, "SunlightScale");
                    }
                    if (printMask?.SkyScale ?? true)
                    {
                        fg.AppendItem(SkyScale, "SkyScale");
                    }
                    if (printMask?.EyeAdaptStrength ?? true)
                    {
                        fg.AppendItem(EyeAdaptStrength, "EyeAdaptStrength");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? EyeAdaptSpeed;
            public Exception? BloomBlurRadius;
            public Exception? BloomThreshold;
            public Exception? BloomScale;
            public Exception? ReceiveBloomThreshold;
            public Exception? White;
            public Exception? SunlightScale;
            public Exception? SkyScale;
            public Exception? EyeAdaptStrength;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ImageSpaceHdr_FieldIndex enu = (ImageSpaceHdr_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpaceHdr_FieldIndex.EyeAdaptSpeed:
                        return EyeAdaptSpeed;
                    case ImageSpaceHdr_FieldIndex.BloomBlurRadius:
                        return BloomBlurRadius;
                    case ImageSpaceHdr_FieldIndex.BloomThreshold:
                        return BloomThreshold;
                    case ImageSpaceHdr_FieldIndex.BloomScale:
                        return BloomScale;
                    case ImageSpaceHdr_FieldIndex.ReceiveBloomThreshold:
                        return ReceiveBloomThreshold;
                    case ImageSpaceHdr_FieldIndex.White:
                        return White;
                    case ImageSpaceHdr_FieldIndex.SunlightScale:
                        return SunlightScale;
                    case ImageSpaceHdr_FieldIndex.SkyScale:
                        return SkyScale;
                    case ImageSpaceHdr_FieldIndex.EyeAdaptStrength:
                        return EyeAdaptStrength;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ImageSpaceHdr_FieldIndex enu = (ImageSpaceHdr_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpaceHdr_FieldIndex.EyeAdaptSpeed:
                        this.EyeAdaptSpeed = ex;
                        break;
                    case ImageSpaceHdr_FieldIndex.BloomBlurRadius:
                        this.BloomBlurRadius = ex;
                        break;
                    case ImageSpaceHdr_FieldIndex.BloomThreshold:
                        this.BloomThreshold = ex;
                        break;
                    case ImageSpaceHdr_FieldIndex.BloomScale:
                        this.BloomScale = ex;
                        break;
                    case ImageSpaceHdr_FieldIndex.ReceiveBloomThreshold:
                        this.ReceiveBloomThreshold = ex;
                        break;
                    case ImageSpaceHdr_FieldIndex.White:
                        this.White = ex;
                        break;
                    case ImageSpaceHdr_FieldIndex.SunlightScale:
                        this.SunlightScale = ex;
                        break;
                    case ImageSpaceHdr_FieldIndex.SkyScale:
                        this.SkyScale = ex;
                        break;
                    case ImageSpaceHdr_FieldIndex.EyeAdaptStrength:
                        this.EyeAdaptStrength = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ImageSpaceHdr_FieldIndex enu = (ImageSpaceHdr_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpaceHdr_FieldIndex.EyeAdaptSpeed:
                        this.EyeAdaptSpeed = (Exception?)obj;
                        break;
                    case ImageSpaceHdr_FieldIndex.BloomBlurRadius:
                        this.BloomBlurRadius = (Exception?)obj;
                        break;
                    case ImageSpaceHdr_FieldIndex.BloomThreshold:
                        this.BloomThreshold = (Exception?)obj;
                        break;
                    case ImageSpaceHdr_FieldIndex.BloomScale:
                        this.BloomScale = (Exception?)obj;
                        break;
                    case ImageSpaceHdr_FieldIndex.ReceiveBloomThreshold:
                        this.ReceiveBloomThreshold = (Exception?)obj;
                        break;
                    case ImageSpaceHdr_FieldIndex.White:
                        this.White = (Exception?)obj;
                        break;
                    case ImageSpaceHdr_FieldIndex.SunlightScale:
                        this.SunlightScale = (Exception?)obj;
                        break;
                    case ImageSpaceHdr_FieldIndex.SkyScale:
                        this.SkyScale = (Exception?)obj;
                        break;
                    case ImageSpaceHdr_FieldIndex.EyeAdaptStrength:
                        this.EyeAdaptStrength = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (EyeAdaptSpeed != null) return true;
                if (BloomBlurRadius != null) return true;
                if (BloomThreshold != null) return true;
                if (BloomScale != null) return true;
                if (ReceiveBloomThreshold != null) return true;
                if (White != null) return true;
                if (SunlightScale != null) return true;
                if (SkyScale != null) return true;
                if (EyeAdaptStrength != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(EyeAdaptSpeed, "EyeAdaptSpeed");
                fg.AppendItem(BloomBlurRadius, "BloomBlurRadius");
                fg.AppendItem(BloomThreshold, "BloomThreshold");
                fg.AppendItem(BloomScale, "BloomScale");
                fg.AppendItem(ReceiveBloomThreshold, "ReceiveBloomThreshold");
                fg.AppendItem(White, "White");
                fg.AppendItem(SunlightScale, "SunlightScale");
                fg.AppendItem(SkyScale, "SkyScale");
                fg.AppendItem(EyeAdaptStrength, "EyeAdaptStrength");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.EyeAdaptSpeed = this.EyeAdaptSpeed.Combine(rhs.EyeAdaptSpeed);
                ret.BloomBlurRadius = this.BloomBlurRadius.Combine(rhs.BloomBlurRadius);
                ret.BloomThreshold = this.BloomThreshold.Combine(rhs.BloomThreshold);
                ret.BloomScale = this.BloomScale.Combine(rhs.BloomScale);
                ret.ReceiveBloomThreshold = this.ReceiveBloomThreshold.Combine(rhs.ReceiveBloomThreshold);
                ret.White = this.White.Combine(rhs.White);
                ret.SunlightScale = this.SunlightScale.Combine(rhs.SunlightScale);
                ret.SkyScale = this.SkyScale.Combine(rhs.SkyScale);
                ret.EyeAdaptStrength = this.EyeAdaptStrength.Combine(rhs.EyeAdaptStrength);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool EyeAdaptSpeed;
            public bool BloomBlurRadius;
            public bool BloomThreshold;
            public bool BloomScale;
            public bool ReceiveBloomThreshold;
            public bool White;
            public bool SunlightScale;
            public bool SkyScale;
            public bool EyeAdaptStrength;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.EyeAdaptSpeed = defaultOn;
                this.BloomBlurRadius = defaultOn;
                this.BloomThreshold = defaultOn;
                this.BloomScale = defaultOn;
                this.ReceiveBloomThreshold = defaultOn;
                this.White = defaultOn;
                this.SunlightScale = defaultOn;
                this.SkyScale = defaultOn;
                this.EyeAdaptStrength = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((EyeAdaptSpeed, null));
                ret.Add((BloomBlurRadius, null));
                ret.Add((BloomThreshold, null));
                ret.Add((BloomScale, null));
                ret.Add((ReceiveBloomThreshold, null));
                ret.Add((White, null));
                ret.Add((SunlightScale, null));
                ret.Add((SkyScale, null));
                ret.Add((EyeAdaptStrength, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ImageSpaceHdr_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ImageSpaceHdrBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImageSpaceHdrBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static ImageSpaceHdr CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ImageSpaceHdr();
            ((ImageSpaceHdrSetterCommon)((IImageSpaceHdrGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ImageSpaceHdr item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ImageSpaceHdrSetterCommon)((IImageSpaceHdrGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ImageSpaceHdr GetNew()
        {
            return new ImageSpaceHdr();
        }

    }
    #endregion

    #region Interface
    public partial interface IImageSpaceHdr :
        IImageSpaceHdrGetter,
        ILoquiObjectSetter<IImageSpaceHdr>
    {
        new Single EyeAdaptSpeed { get; set; }
        new Single BloomBlurRadius { get; set; }
        new Single BloomThreshold { get; set; }
        new Single BloomScale { get; set; }
        new Single ReceiveBloomThreshold { get; set; }
        new Single White { get; set; }
        new Single SunlightScale { get; set; }
        new Single SkyScale { get; set; }
        new Single EyeAdaptStrength { get; set; }
    }

    public partial interface IImageSpaceHdrGetter :
        ILoquiObject,
        ILoquiObject<IImageSpaceHdrGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ImageSpaceHdr_Registration.Instance;
        Single EyeAdaptSpeed { get; }
        Single BloomBlurRadius { get; }
        Single BloomThreshold { get; }
        Single BloomScale { get; }
        Single ReceiveBloomThreshold { get; }
        Single White { get; }
        Single SunlightScale { get; }
        Single SkyScale { get; }
        Single EyeAdaptStrength { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ImageSpaceHdrMixIn
    {
        public static void Clear(this IImageSpaceHdr item)
        {
            ((ImageSpaceHdrSetterCommon)((IImageSpaceHdrGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ImageSpaceHdr.Mask<bool> GetEqualsMask(
            this IImageSpaceHdrGetter item,
            IImageSpaceHdrGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IImageSpaceHdrGetter item,
            string? name = null,
            ImageSpaceHdr.Mask<bool>? printMask = null)
        {
            return ((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IImageSpaceHdrGetter item,
            FileGeneration fg,
            string? name = null,
            ImageSpaceHdr.Mask<bool>? printMask = null)
        {
            ((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IImageSpaceHdrGetter item,
            IImageSpaceHdrGetter rhs)
        {
            return ((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IImageSpaceHdr lhs,
            IImageSpaceHdrGetter rhs)
        {
            ((ImageSpaceHdrSetterTranslationCommon)((IImageSpaceHdrGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IImageSpaceHdr lhs,
            IImageSpaceHdrGetter rhs,
            ImageSpaceHdr.TranslationMask? copyMask = null)
        {
            ((ImageSpaceHdrSetterTranslationCommon)((IImageSpaceHdrGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IImageSpaceHdr lhs,
            IImageSpaceHdrGetter rhs,
            out ImageSpaceHdr.ErrorMask errorMask,
            ImageSpaceHdr.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ImageSpaceHdrSetterTranslationCommon)((IImageSpaceHdrGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ImageSpaceHdr.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IImageSpaceHdr lhs,
            IImageSpaceHdrGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ImageSpaceHdrSetterTranslationCommon)((IImageSpaceHdrGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ImageSpaceHdr DeepCopy(
            this IImageSpaceHdrGetter item,
            ImageSpaceHdr.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceHdrSetterTranslationCommon)((IImageSpaceHdrGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ImageSpaceHdr DeepCopy(
            this IImageSpaceHdrGetter item,
            out ImageSpaceHdr.ErrorMask errorMask,
            ImageSpaceHdr.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceHdrSetterTranslationCommon)((IImageSpaceHdrGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ImageSpaceHdr DeepCopy(
            this IImageSpaceHdrGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ImageSpaceHdrSetterTranslationCommon)((IImageSpaceHdrGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IImageSpaceHdr item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImageSpaceHdrSetterCommon)((IImageSpaceHdrGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ImageSpaceHdr_FieldIndex
    {
        EyeAdaptSpeed = 0,
        BloomBlurRadius = 1,
        BloomThreshold = 2,
        BloomScale = 3,
        ReceiveBloomThreshold = 4,
        White = 5,
        SunlightScale = 6,
        SkyScale = 7,
        EyeAdaptStrength = 8,
    }
    #endregion

    #region Registration
    public partial class ImageSpaceHdr_Registration : ILoquiRegistration
    {
        public static readonly ImageSpaceHdr_Registration Instance = new ImageSpaceHdr_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 406,
            version: 0);

        public const string GUID = "b392db2b-257c-406c-9196-ad7376dc03be";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(ImageSpaceHdr.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ImageSpaceHdr.ErrorMask);

        public static readonly Type ClassType = typeof(ImageSpaceHdr);

        public static readonly Type GetterType = typeof(IImageSpaceHdrGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IImageSpaceHdr);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ImageSpaceHdr";

        public const string Name = "ImageSpaceHdr";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.HNAM;
        public static readonly Type BinaryWriteTranslation = typeof(ImageSpaceHdrBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ImageSpaceHdrSetterCommon
    {
        public static readonly ImageSpaceHdrSetterCommon Instance = new ImageSpaceHdrSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IImageSpaceHdr item)
        {
            ClearPartial();
            item.EyeAdaptSpeed = default;
            item.BloomBlurRadius = default;
            item.BloomThreshold = default;
            item.BloomScale = default;
            item.ReceiveBloomThreshold = default;
            item.White = default;
            item.SunlightScale = default;
            item.SkyScale = default;
            item.EyeAdaptStrength = default;
        }
        
        #region Mutagen
        public void RemapLinks(IImageSpaceHdr obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IImageSpaceHdr item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.HNAM)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ImageSpaceHdrBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ImageSpaceHdrCommon
    {
        public static readonly ImageSpaceHdrCommon Instance = new ImageSpaceHdrCommon();

        public ImageSpaceHdr.Mask<bool> GetEqualsMask(
            IImageSpaceHdrGetter item,
            IImageSpaceHdrGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ImageSpaceHdr.Mask<bool>(false);
            ((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IImageSpaceHdrGetter item,
            IImageSpaceHdrGetter rhs,
            ImageSpaceHdr.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.EyeAdaptSpeed = item.EyeAdaptSpeed.EqualsWithin(rhs.EyeAdaptSpeed);
            ret.BloomBlurRadius = item.BloomBlurRadius.EqualsWithin(rhs.BloomBlurRadius);
            ret.BloomThreshold = item.BloomThreshold.EqualsWithin(rhs.BloomThreshold);
            ret.BloomScale = item.BloomScale.EqualsWithin(rhs.BloomScale);
            ret.ReceiveBloomThreshold = item.ReceiveBloomThreshold.EqualsWithin(rhs.ReceiveBloomThreshold);
            ret.White = item.White.EqualsWithin(rhs.White);
            ret.SunlightScale = item.SunlightScale.EqualsWithin(rhs.SunlightScale);
            ret.SkyScale = item.SkyScale.EqualsWithin(rhs.SkyScale);
            ret.EyeAdaptStrength = item.EyeAdaptStrength.EqualsWithin(rhs.EyeAdaptStrength);
        }
        
        public string ToString(
            IImageSpaceHdrGetter item,
            string? name = null,
            ImageSpaceHdr.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IImageSpaceHdrGetter item,
            FileGeneration fg,
            string? name = null,
            ImageSpaceHdr.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ImageSpaceHdr =>");
            }
            else
            {
                fg.AppendLine($"{name} (ImageSpaceHdr) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IImageSpaceHdrGetter item,
            FileGeneration fg,
            ImageSpaceHdr.Mask<bool>? printMask = null)
        {
            if (printMask?.EyeAdaptSpeed ?? true)
            {
                fg.AppendItem(item.EyeAdaptSpeed, "EyeAdaptSpeed");
            }
            if (printMask?.BloomBlurRadius ?? true)
            {
                fg.AppendItem(item.BloomBlurRadius, "BloomBlurRadius");
            }
            if (printMask?.BloomThreshold ?? true)
            {
                fg.AppendItem(item.BloomThreshold, "BloomThreshold");
            }
            if (printMask?.BloomScale ?? true)
            {
                fg.AppendItem(item.BloomScale, "BloomScale");
            }
            if (printMask?.ReceiveBloomThreshold ?? true)
            {
                fg.AppendItem(item.ReceiveBloomThreshold, "ReceiveBloomThreshold");
            }
            if (printMask?.White ?? true)
            {
                fg.AppendItem(item.White, "White");
            }
            if (printMask?.SunlightScale ?? true)
            {
                fg.AppendItem(item.SunlightScale, "SunlightScale");
            }
            if (printMask?.SkyScale ?? true)
            {
                fg.AppendItem(item.SkyScale, "SkyScale");
            }
            if (printMask?.EyeAdaptStrength ?? true)
            {
                fg.AppendItem(item.EyeAdaptStrength, "EyeAdaptStrength");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IImageSpaceHdrGetter? lhs,
            IImageSpaceHdrGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.EyeAdaptSpeed.EqualsWithin(rhs.EyeAdaptSpeed)) return false;
            if (!lhs.BloomBlurRadius.EqualsWithin(rhs.BloomBlurRadius)) return false;
            if (!lhs.BloomThreshold.EqualsWithin(rhs.BloomThreshold)) return false;
            if (!lhs.BloomScale.EqualsWithin(rhs.BloomScale)) return false;
            if (!lhs.ReceiveBloomThreshold.EqualsWithin(rhs.ReceiveBloomThreshold)) return false;
            if (!lhs.White.EqualsWithin(rhs.White)) return false;
            if (!lhs.SunlightScale.EqualsWithin(rhs.SunlightScale)) return false;
            if (!lhs.SkyScale.EqualsWithin(rhs.SkyScale)) return false;
            if (!lhs.EyeAdaptStrength.EqualsWithin(rhs.EyeAdaptStrength)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IImageSpaceHdrGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.EyeAdaptSpeed);
            hash.Add(item.BloomBlurRadius);
            hash.Add(item.BloomThreshold);
            hash.Add(item.BloomScale);
            hash.Add(item.ReceiveBloomThreshold);
            hash.Add(item.White);
            hash.Add(item.SunlightScale);
            hash.Add(item.SkyScale);
            hash.Add(item.EyeAdaptStrength);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ImageSpaceHdr.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IImageSpaceHdrGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class ImageSpaceHdrSetterTranslationCommon
    {
        public static readonly ImageSpaceHdrSetterTranslationCommon Instance = new ImageSpaceHdrSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IImageSpaceHdr item,
            IImageSpaceHdrGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceHdr_FieldIndex.EyeAdaptSpeed) ?? true))
            {
                item.EyeAdaptSpeed = rhs.EyeAdaptSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceHdr_FieldIndex.BloomBlurRadius) ?? true))
            {
                item.BloomBlurRadius = rhs.BloomBlurRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceHdr_FieldIndex.BloomThreshold) ?? true))
            {
                item.BloomThreshold = rhs.BloomThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceHdr_FieldIndex.BloomScale) ?? true))
            {
                item.BloomScale = rhs.BloomScale;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceHdr_FieldIndex.ReceiveBloomThreshold) ?? true))
            {
                item.ReceiveBloomThreshold = rhs.ReceiveBloomThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceHdr_FieldIndex.White) ?? true))
            {
                item.White = rhs.White;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceHdr_FieldIndex.SunlightScale) ?? true))
            {
                item.SunlightScale = rhs.SunlightScale;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceHdr_FieldIndex.SkyScale) ?? true))
            {
                item.SkyScale = rhs.SkyScale;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpaceHdr_FieldIndex.EyeAdaptStrength) ?? true))
            {
                item.EyeAdaptStrength = rhs.EyeAdaptStrength;
            }
        }
        
        #endregion
        
        public ImageSpaceHdr DeepCopy(
            IImageSpaceHdrGetter item,
            ImageSpaceHdr.TranslationMask? copyMask = null)
        {
            ImageSpaceHdr ret = (ImageSpaceHdr)((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceHdrSetterTranslationCommon)((IImageSpaceHdrGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ImageSpaceHdr DeepCopy(
            IImageSpaceHdrGetter item,
            out ImageSpaceHdr.ErrorMask errorMask,
            ImageSpaceHdr.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ImageSpaceHdr ret = (ImageSpaceHdr)((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceHdrSetterTranslationCommon)((IImageSpaceHdrGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ImageSpaceHdr.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ImageSpaceHdr DeepCopy(
            IImageSpaceHdrGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ImageSpaceHdr ret = (ImageSpaceHdr)((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceHdrSetterTranslationCommon)((IImageSpaceHdrGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ImageSpaceHdr
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImageSpaceHdr_Registration.Instance;
        public static ImageSpaceHdr_Registration Registration => ImageSpaceHdr_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ImageSpaceHdrCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ImageSpaceHdrSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ImageSpaceHdrSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IImageSpaceHdrGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IImageSpaceHdrGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IImageSpaceHdrGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ImageSpaceHdrBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ImageSpaceHdrBinaryWriteTranslation Instance = new ImageSpaceHdrBinaryWriteTranslation();

        public static void WriteEmbedded(
            IImageSpaceHdrGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EyeAdaptSpeed);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BloomBlurRadius);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BloomThreshold);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BloomScale);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ReceiveBloomThreshold);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.White);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SunlightScale);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SkyScale);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EyeAdaptStrength);
        }

        public void Write(
            MutagenWriter writer,
            IImageSpaceHdrGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.HNAM),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IImageSpaceHdrGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ImageSpaceHdrBinaryCreateTranslation
    {
        public readonly static ImageSpaceHdrBinaryCreateTranslation Instance = new ImageSpaceHdrBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IImageSpaceHdr item,
            MutagenFrame frame)
        {
            item.EyeAdaptSpeed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BloomBlurRadius = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BloomThreshold = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BloomScale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ReceiveBloomThreshold = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.White = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.SunlightScale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.SkyScale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EyeAdaptStrength = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ImageSpaceHdrBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IImageSpaceHdrGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImageSpaceHdrBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ImageSpaceHdrBinaryOverlay :
        BinaryOverlay,
        IImageSpaceHdrGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImageSpaceHdr_Registration.Instance;
        public static ImageSpaceHdr_Registration Registration => ImageSpaceHdr_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ImageSpaceHdrCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ImageSpaceHdrSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IImageSpaceHdrGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IImageSpaceHdrGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IImageSpaceHdrGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ImageSpaceHdrBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImageSpaceHdrBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Single EyeAdaptSpeed => _data.Slice(0x0, 0x4).Float();
        public Single BloomBlurRadius => _data.Slice(0x4, 0x4).Float();
        public Single BloomThreshold => _data.Slice(0x8, 0x4).Float();
        public Single BloomScale => _data.Slice(0xC, 0x4).Float();
        public Single ReceiveBloomThreshold => _data.Slice(0x10, 0x4).Float();
        public Single White => _data.Slice(0x14, 0x4).Float();
        public Single SunlightScale => _data.Slice(0x18, 0x4).Float();
        public Single SkyScale => _data.Slice(0x1C, 0x4).Float();
        public Single EyeAdaptStrength => _data.Slice(0x20, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ImageSpaceHdrBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ImageSpaceHdrBinaryOverlay ImageSpaceHdrFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ImageSpaceHdrBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x24 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ImageSpaceHdrBinaryOverlay ImageSpaceHdrFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ImageSpaceHdrFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ImageSpaceHdrMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IImageSpaceHdrGetter rhs)) return false;
            return ((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IImageSpaceHdrGetter? obj)
        {
            return ((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

