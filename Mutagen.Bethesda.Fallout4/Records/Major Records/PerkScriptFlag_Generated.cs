/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PerkScriptFlag :
        IPerkScriptFlag,
        ILoquiObjectSetter<PerkScriptFlag>,
        IEquatable<IPerkScriptFlagGetter>
    {
        #region Ctor
        public PerkScriptFlag()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public PerkScriptFlag.Flag Flags { get; set; } = default;
        #endregion
        #region FragmentIndex
        public UInt16 FragmentIndex { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkScriptFlagMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPerkScriptFlagGetter rhs)) return false;
            return ((PerkScriptFlagCommon)((IPerkScriptFlagGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPerkScriptFlagGetter? obj)
        {
            return ((PerkScriptFlagCommon)((IPerkScriptFlagGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PerkScriptFlagCommon)((IPerkScriptFlagGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.FragmentIndex = initialValue;
            }

            public Mask(
                TItem Flags,
                TItem FragmentIndex)
            {
                this.Flags = Flags;
                this.FragmentIndex = FragmentIndex;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem FragmentIndex;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.FragmentIndex, rhs.FragmentIndex)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.FragmentIndex);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (!eval(this.FragmentIndex)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (eval(this.FragmentIndex)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PerkScriptFlag.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                obj.FragmentIndex = eval(this.FragmentIndex);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PerkScriptFlag.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PerkScriptFlag.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PerkScriptFlag.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.FragmentIndex ?? true)
                    {
                        fg.AppendItem(FragmentIndex, "FragmentIndex");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public Exception? FragmentIndex;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PerkScriptFlag_FieldIndex enu = (PerkScriptFlag_FieldIndex)index;
                switch (enu)
                {
                    case PerkScriptFlag_FieldIndex.Flags:
                        return Flags;
                    case PerkScriptFlag_FieldIndex.FragmentIndex:
                        return FragmentIndex;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PerkScriptFlag_FieldIndex enu = (PerkScriptFlag_FieldIndex)index;
                switch (enu)
                {
                    case PerkScriptFlag_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case PerkScriptFlag_FieldIndex.FragmentIndex:
                        this.FragmentIndex = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PerkScriptFlag_FieldIndex enu = (PerkScriptFlag_FieldIndex)index;
                switch (enu)
                {
                    case PerkScriptFlag_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case PerkScriptFlag_FieldIndex.FragmentIndex:
                        this.FragmentIndex = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (FragmentIndex != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(FragmentIndex, "FragmentIndex");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.FragmentIndex = this.FragmentIndex.Combine(rhs.FragmentIndex);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Flags;
            public bool FragmentIndex;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Flags = defaultOn;
                this.FragmentIndex = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((FragmentIndex, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PerkScriptFlag_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PerkScriptFlagBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkScriptFlagBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static PerkScriptFlag CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkScriptFlag();
            ((PerkScriptFlagSetterCommon)((IPerkScriptFlagGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PerkScriptFlag item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PerkScriptFlagSetterCommon)((IPerkScriptFlagGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PerkScriptFlag GetNew()
        {
            return new PerkScriptFlag();
        }

    }
    #endregion

    #region Interface
    public partial interface IPerkScriptFlag :
        IPerkScriptFlagGetter,
        ILoquiObjectSetter<IPerkScriptFlag>
    {
        new PerkScriptFlag.Flag Flags { get; set; }
        new UInt16 FragmentIndex { get; set; }
    }

    public partial interface IPerkScriptFlagGetter :
        ILoquiObject,
        ILoquiObject<IPerkScriptFlagGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => PerkScriptFlag_Registration.Instance;
        PerkScriptFlag.Flag Flags { get; }
        UInt16 FragmentIndex { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PerkScriptFlagMixIn
    {
        public static void Clear(this IPerkScriptFlag item)
        {
            ((PerkScriptFlagSetterCommon)((IPerkScriptFlagGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PerkScriptFlag.Mask<bool> GetEqualsMask(
            this IPerkScriptFlagGetter item,
            IPerkScriptFlagGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PerkScriptFlagCommon)((IPerkScriptFlagGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPerkScriptFlagGetter item,
            string? name = null,
            PerkScriptFlag.Mask<bool>? printMask = null)
        {
            return ((PerkScriptFlagCommon)((IPerkScriptFlagGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPerkScriptFlagGetter item,
            FileGeneration fg,
            string? name = null,
            PerkScriptFlag.Mask<bool>? printMask = null)
        {
            ((PerkScriptFlagCommon)((IPerkScriptFlagGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPerkScriptFlagGetter item,
            IPerkScriptFlagGetter rhs)
        {
            return ((PerkScriptFlagCommon)((IPerkScriptFlagGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPerkScriptFlag lhs,
            IPerkScriptFlagGetter rhs)
        {
            ((PerkScriptFlagSetterTranslationCommon)((IPerkScriptFlagGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPerkScriptFlag lhs,
            IPerkScriptFlagGetter rhs,
            PerkScriptFlag.TranslationMask? copyMask = null)
        {
            ((PerkScriptFlagSetterTranslationCommon)((IPerkScriptFlagGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPerkScriptFlag lhs,
            IPerkScriptFlagGetter rhs,
            out PerkScriptFlag.ErrorMask errorMask,
            PerkScriptFlag.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PerkScriptFlagSetterTranslationCommon)((IPerkScriptFlagGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PerkScriptFlag.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPerkScriptFlag lhs,
            IPerkScriptFlagGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PerkScriptFlagSetterTranslationCommon)((IPerkScriptFlagGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PerkScriptFlag DeepCopy(
            this IPerkScriptFlagGetter item,
            PerkScriptFlag.TranslationMask? copyMask = null)
        {
            return ((PerkScriptFlagSetterTranslationCommon)((IPerkScriptFlagGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PerkScriptFlag DeepCopy(
            this IPerkScriptFlagGetter item,
            out PerkScriptFlag.ErrorMask errorMask,
            PerkScriptFlag.TranslationMask? copyMask = null)
        {
            return ((PerkScriptFlagSetterTranslationCommon)((IPerkScriptFlagGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PerkScriptFlag DeepCopy(
            this IPerkScriptFlagGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PerkScriptFlagSetterTranslationCommon)((IPerkScriptFlagGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPerkScriptFlag item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkScriptFlagSetterCommon)((IPerkScriptFlagGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PerkScriptFlag_FieldIndex
    {
        Flags = 0,
        FragmentIndex = 1,
    }
    #endregion

    #region Registration
    public partial class PerkScriptFlag_Registration : ILoquiRegistration
    {
        public static readonly PerkScriptFlag_Registration Instance = new PerkScriptFlag_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 426,
            version: 0);

        public const string GUID = "2eef81ee-00f4-466e-9b42-aab9ab42b981";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(PerkScriptFlag.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PerkScriptFlag.ErrorMask);

        public static readonly Type ClassType = typeof(PerkScriptFlag);

        public static readonly Type GetterType = typeof(IPerkScriptFlagGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPerkScriptFlag);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PerkScriptFlag";

        public const string Name = "PerkScriptFlag";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.EPF3;
        public static readonly Type BinaryWriteTranslation = typeof(PerkScriptFlagBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PerkScriptFlagSetterCommon
    {
        public static readonly PerkScriptFlagSetterCommon Instance = new PerkScriptFlagSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPerkScriptFlag item)
        {
            ClearPartial();
            item.Flags = default;
            item.FragmentIndex = default;
        }
        
        #region Mutagen
        public void RemapLinks(IPerkScriptFlag obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPerkScriptFlag item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.EPF3)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PerkScriptFlagBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class PerkScriptFlagCommon
    {
        public static readonly PerkScriptFlagCommon Instance = new PerkScriptFlagCommon();

        public PerkScriptFlag.Mask<bool> GetEqualsMask(
            IPerkScriptFlagGetter item,
            IPerkScriptFlagGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PerkScriptFlag.Mask<bool>(false);
            ((PerkScriptFlagCommon)((IPerkScriptFlagGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPerkScriptFlagGetter item,
            IPerkScriptFlagGetter rhs,
            PerkScriptFlag.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.FragmentIndex = item.FragmentIndex == rhs.FragmentIndex;
        }
        
        public string ToString(
            IPerkScriptFlagGetter item,
            string? name = null,
            PerkScriptFlag.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPerkScriptFlagGetter item,
            FileGeneration fg,
            string? name = null,
            PerkScriptFlag.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PerkScriptFlag =>");
            }
            else
            {
                fg.AppendLine($"{name} (PerkScriptFlag) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPerkScriptFlagGetter item,
            FileGeneration fg,
            PerkScriptFlag.Mask<bool>? printMask = null)
        {
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.FragmentIndex ?? true)
            {
                fg.AppendItem(item.FragmentIndex, "FragmentIndex");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPerkScriptFlagGetter? lhs,
            IPerkScriptFlagGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.FragmentIndex != rhs.FragmentIndex) return false;
            return true;
        }
        
        public virtual int GetHashCode(IPerkScriptFlagGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Flags);
            hash.Add(item.FragmentIndex);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PerkScriptFlag.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPerkScriptFlagGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class PerkScriptFlagSetterTranslationCommon
    {
        public static readonly PerkScriptFlagSetterTranslationCommon Instance = new PerkScriptFlagSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPerkScriptFlag item,
            IPerkScriptFlagGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PerkScriptFlag_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)PerkScriptFlag_FieldIndex.FragmentIndex) ?? true))
            {
                item.FragmentIndex = rhs.FragmentIndex;
            }
        }
        
        #endregion
        
        public PerkScriptFlag DeepCopy(
            IPerkScriptFlagGetter item,
            PerkScriptFlag.TranslationMask? copyMask = null)
        {
            PerkScriptFlag ret = (PerkScriptFlag)((PerkScriptFlagCommon)((IPerkScriptFlagGetter)item).CommonInstance()!).GetNew();
            ((PerkScriptFlagSetterTranslationCommon)((IPerkScriptFlagGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PerkScriptFlag DeepCopy(
            IPerkScriptFlagGetter item,
            out PerkScriptFlag.ErrorMask errorMask,
            PerkScriptFlag.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PerkScriptFlag ret = (PerkScriptFlag)((PerkScriptFlagCommon)((IPerkScriptFlagGetter)item).CommonInstance()!).GetNew();
            ((PerkScriptFlagSetterTranslationCommon)((IPerkScriptFlagGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PerkScriptFlag.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PerkScriptFlag DeepCopy(
            IPerkScriptFlagGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PerkScriptFlag ret = (PerkScriptFlag)((PerkScriptFlagCommon)((IPerkScriptFlagGetter)item).CommonInstance()!).GetNew();
            ((PerkScriptFlagSetterTranslationCommon)((IPerkScriptFlagGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PerkScriptFlag
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkScriptFlag_Registration.Instance;
        public static PerkScriptFlag_Registration Registration => PerkScriptFlag_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PerkScriptFlagCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PerkScriptFlagSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PerkScriptFlagSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPerkScriptFlagGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPerkScriptFlagGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPerkScriptFlagGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PerkScriptFlagBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static PerkScriptFlagBinaryWriteTranslation Instance = new PerkScriptFlagBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPerkScriptFlagGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<PerkScriptFlag.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 2);
            writer.Write(item.FragmentIndex);
        }

        public void Write(
            MutagenWriter writer,
            IPerkScriptFlagGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.EPF3),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkScriptFlagGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PerkScriptFlagBinaryCreateTranslation
    {
        public readonly static PerkScriptFlagBinaryCreateTranslation Instance = new PerkScriptFlagBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPerkScriptFlag item,
            MutagenFrame frame)
        {
            item.Flags = EnumBinaryTranslation<PerkScriptFlag.Flag>.Instance.Parse(frame: frame.SpawnWithLength(2));
            item.FragmentIndex = frame.ReadUInt16();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PerkScriptFlagBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPerkScriptFlagGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkScriptFlagBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PerkScriptFlagBinaryOverlay :
        BinaryOverlay,
        IPerkScriptFlagGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkScriptFlag_Registration.Instance;
        public static PerkScriptFlag_Registration Registration => PerkScriptFlag_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PerkScriptFlagCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PerkScriptFlagSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPerkScriptFlagGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPerkScriptFlagGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPerkScriptFlagGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PerkScriptFlagBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkScriptFlagBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public PerkScriptFlag.Flag Flags => (PerkScriptFlag.Flag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(0x0, 0x2));
        public UInt16 FragmentIndex => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x2, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PerkScriptFlagBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PerkScriptFlagBinaryOverlay PerkScriptFlagFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkScriptFlagBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x4 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static PerkScriptFlagBinaryOverlay PerkScriptFlagFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PerkScriptFlagFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkScriptFlagMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPerkScriptFlagGetter rhs)) return false;
            return ((PerkScriptFlagCommon)((IPerkScriptFlagGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPerkScriptFlagGetter? obj)
        {
            return ((PerkScriptFlagCommon)((IPerkScriptFlagGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PerkScriptFlagCommon)((IPerkScriptFlagGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

