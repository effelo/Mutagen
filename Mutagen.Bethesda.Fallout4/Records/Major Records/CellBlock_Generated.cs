/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class CellBlock :
        ICellBlock,
        ILoquiObjectSetter<CellBlock>,
        IEquatable<ICellBlockGetter>
    {
        #region Ctor
        public CellBlock()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region BlockNumber
        public Int32 BlockNumber { get; set; } = default;
        #endregion
        #region GroupType
        public GroupTypeEnum GroupType { get; set; } = default;
        #endregion
        #region LastModified
        public Int32 LastModified { get; set; } = default;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default;
        #endregion
        #region SubBlocks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<CellSubBlock> _SubBlocks = new ExtendedList<CellSubBlock>();
        public ExtendedList<CellSubBlock> SubBlocks
        {
            get => this._SubBlocks;
            protected set => this._SubBlocks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ICellSubBlockGetter> ICellBlockGetter.SubBlocks => _SubBlocks;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellBlockMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICellBlockGetter rhs)) return false;
            return ((CellBlockCommon)((ICellBlockGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICellBlockGetter? obj)
        {
            return ((CellBlockCommon)((ICellBlockGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CellBlockCommon)((ICellBlockGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.BlockNumber = initialValue;
                this.GroupType = initialValue;
                this.LastModified = initialValue;
                this.Unknown = initialValue;
                this.SubBlocks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellSubBlock.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, CellSubBlock.Mask<TItem>?>>());
            }

            public Mask(
                TItem BlockNumber,
                TItem GroupType,
                TItem LastModified,
                TItem Unknown,
                TItem SubBlocks)
            {
                this.BlockNumber = BlockNumber;
                this.GroupType = GroupType;
                this.LastModified = LastModified;
                this.Unknown = Unknown;
                this.SubBlocks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellSubBlock.Mask<TItem>?>>?>(SubBlocks, Enumerable.Empty<MaskItemIndexed<TItem, CellSubBlock.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem BlockNumber;
            public TItem GroupType;
            public TItem LastModified;
            public TItem Unknown;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellSubBlock.Mask<TItem>?>>?>? SubBlocks;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.BlockNumber, rhs.BlockNumber)) return false;
                if (!object.Equals(this.GroupType, rhs.GroupType)) return false;
                if (!object.Equals(this.LastModified, rhs.LastModified)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.SubBlocks, rhs.SubBlocks)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.BlockNumber);
                hash.Add(this.GroupType);
                hash.Add(this.LastModified);
                hash.Add(this.Unknown);
                hash.Add(this.SubBlocks);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.BlockNumber)) return false;
                if (!eval(this.GroupType)) return false;
                if (!eval(this.LastModified)) return false;
                if (!eval(this.Unknown)) return false;
                if (this.SubBlocks != null)
                {
                    if (!eval(this.SubBlocks.Overall)) return false;
                    if (this.SubBlocks.Specific != null)
                    {
                        foreach (var item in this.SubBlocks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.BlockNumber)) return true;
                if (eval(this.GroupType)) return true;
                if (eval(this.LastModified)) return true;
                if (eval(this.Unknown)) return true;
                if (this.SubBlocks != null)
                {
                    if (eval(this.SubBlocks.Overall)) return true;
                    if (this.SubBlocks.Specific != null)
                    {
                        foreach (var item in this.SubBlocks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CellBlock.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.BlockNumber = eval(this.BlockNumber);
                obj.GroupType = eval(this.GroupType);
                obj.LastModified = eval(this.LastModified);
                obj.Unknown = eval(this.Unknown);
                if (SubBlocks != null)
                {
                    obj.SubBlocks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CellSubBlock.Mask<R>?>>?>(eval(this.SubBlocks.Overall), Enumerable.Empty<MaskItemIndexed<R, CellSubBlock.Mask<R>?>>());
                    if (SubBlocks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, CellSubBlock.Mask<R>?>>();
                        obj.SubBlocks.Specific = l;
                        foreach (var item in SubBlocks.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, CellSubBlock.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, CellSubBlock.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CellBlock.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CellBlock.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CellBlock.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.BlockNumber ?? true)
                    {
                        fg.AppendItem(BlockNumber, "BlockNumber");
                    }
                    if (printMask?.GroupType ?? true)
                    {
                        fg.AppendItem(GroupType, "GroupType");
                    }
                    if (printMask?.LastModified ?? true)
                    {
                        fg.AppendItem(LastModified, "LastModified");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if ((printMask?.SubBlocks?.Overall ?? true)
                        && SubBlocks.TryGet(out var SubBlocksItem))
                    {
                        fg.AppendLine("SubBlocks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SubBlocksItem.Overall);
                            if (SubBlocksItem.Specific != null)
                            {
                                foreach (var subItem in SubBlocksItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? BlockNumber;
            public Exception? GroupType;
            public Exception? LastModified;
            public Exception? Unknown;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellSubBlock.ErrorMask?>>?>? SubBlocks;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
                switch (enu)
                {
                    case CellBlock_FieldIndex.BlockNumber:
                        return BlockNumber;
                    case CellBlock_FieldIndex.GroupType:
                        return GroupType;
                    case CellBlock_FieldIndex.LastModified:
                        return LastModified;
                    case CellBlock_FieldIndex.Unknown:
                        return Unknown;
                    case CellBlock_FieldIndex.SubBlocks:
                        return SubBlocks;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
                switch (enu)
                {
                    case CellBlock_FieldIndex.BlockNumber:
                        this.BlockNumber = ex;
                        break;
                    case CellBlock_FieldIndex.GroupType:
                        this.GroupType = ex;
                        break;
                    case CellBlock_FieldIndex.LastModified:
                        this.LastModified = ex;
                        break;
                    case CellBlock_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case CellBlock_FieldIndex.SubBlocks:
                        this.SubBlocks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellSubBlock.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CellBlock_FieldIndex enu = (CellBlock_FieldIndex)index;
                switch (enu)
                {
                    case CellBlock_FieldIndex.BlockNumber:
                        this.BlockNumber = (Exception?)obj;
                        break;
                    case CellBlock_FieldIndex.GroupType:
                        this.GroupType = (Exception?)obj;
                        break;
                    case CellBlock_FieldIndex.LastModified:
                        this.LastModified = (Exception?)obj;
                        break;
                    case CellBlock_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case CellBlock_FieldIndex.SubBlocks:
                        this.SubBlocks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellSubBlock.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (BlockNumber != null) return true;
                if (GroupType != null) return true;
                if (LastModified != null) return true;
                if (Unknown != null) return true;
                if (SubBlocks != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(BlockNumber, "BlockNumber");
                fg.AppendItem(GroupType, "GroupType");
                fg.AppendItem(LastModified, "LastModified");
                fg.AppendItem(Unknown, "Unknown");
                if (SubBlocks.TryGet(out var SubBlocksItem))
                {
                    fg.AppendLine("SubBlocks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SubBlocksItem.Overall);
                        if (SubBlocksItem.Specific != null)
                        {
                            foreach (var subItem in SubBlocksItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.BlockNumber = this.BlockNumber.Combine(rhs.BlockNumber);
                ret.GroupType = this.GroupType.Combine(rhs.GroupType);
                ret.LastModified = this.LastModified.Combine(rhs.LastModified);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.SubBlocks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CellSubBlock.ErrorMask?>>?>(ExceptionExt.Combine(this.SubBlocks?.Overall, rhs.SubBlocks?.Overall), ExceptionExt.Combine(this.SubBlocks?.Specific, rhs.SubBlocks?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool BlockNumber;
            public bool GroupType;
            public bool LastModified;
            public bool Unknown;
            public CellSubBlock.TranslationMask? SubBlocks;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.BlockNumber = defaultOn;
                this.GroupType = defaultOn;
                this.LastModified = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((BlockNumber, null));
                ret.Add((GroupType, null));
                ret.Add((LastModified, null));
                ret.Add((Unknown, null));
                ret.Add((SubBlocks == null ? DefaultOn : !SubBlocks.GetCrystal().CopyNothing, SubBlocks?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = (RecordType)CellSubBlock.GrupRecordType;
        public IEnumerable<FormLinkInformation> ContainedFormLinks => CellBlockCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CellBlockSetterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CellBlockBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellBlockBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static CellBlock CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CellBlock();
            ((CellBlockSetterCommon)((ICellBlockGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CellBlock item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CellBlockSetterCommon)((ICellBlockGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CellBlock GetNew()
        {
            return new CellBlock();
        }

    }
    #endregion

    #region Interface
    public partial interface ICellBlock :
        ICellBlockGetter,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<ICellBlock>,
        IFormLinkContainer
    {
        new Int32 BlockNumber { get; set; }
        new GroupTypeEnum GroupType { get; set; }
        new Int32 LastModified { get; set; }
        new Int32 Unknown { get; set; }
        new ExtendedList<CellSubBlock> SubBlocks { get; }
    }

    public partial interface ICellBlockGetter :
        ILoquiObject,
        IMajorRecordGetterEnumerable,
        ILoquiObject<ICellBlockGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => CellBlock_Registration.Instance;
        Int32 BlockNumber { get; }
        GroupTypeEnum GroupType { get; }
        Int32 LastModified { get; }
        Int32 Unknown { get; }
        IReadOnlyList<ICellSubBlockGetter> SubBlocks { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CellBlockMixIn
    {
        public static void Clear(this ICellBlock item)
        {
            ((CellBlockSetterCommon)((ICellBlockGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CellBlock.Mask<bool> GetEqualsMask(
            this ICellBlockGetter item,
            ICellBlockGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellBlockCommon)((ICellBlockGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICellBlockGetter item,
            string? name = null,
            CellBlock.Mask<bool>? printMask = null)
        {
            return ((CellBlockCommon)((ICellBlockGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICellBlockGetter item,
            FileGeneration fg,
            string? name = null,
            CellBlock.Mask<bool>? printMask = null)
        {
            ((CellBlockCommon)((ICellBlockGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICellBlockGetter item,
            ICellBlockGetter rhs)
        {
            return ((CellBlockCommon)((ICellBlockGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICellBlock lhs,
            ICellBlockGetter rhs)
        {
            ((CellBlockSetterTranslationCommon)((ICellBlockGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICellBlock lhs,
            ICellBlockGetter rhs,
            CellBlock.TranslationMask? copyMask = null)
        {
            ((CellBlockSetterTranslationCommon)((ICellBlockGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICellBlock lhs,
            ICellBlockGetter rhs,
            out CellBlock.ErrorMask errorMask,
            CellBlock.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CellBlockSetterTranslationCommon)((ICellBlockGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CellBlock.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICellBlock lhs,
            ICellBlockGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CellBlockSetterTranslationCommon)((ICellBlockGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CellBlock DeepCopy(
            this ICellBlockGetter item,
            CellBlock.TranslationMask? copyMask = null)
        {
            return ((CellBlockSetterTranslationCommon)((ICellBlockGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CellBlock DeepCopy(
            this ICellBlockGetter item,
            out CellBlock.ErrorMask errorMask,
            CellBlock.TranslationMask? copyMask = null)
        {
            return ((CellBlockSetterTranslationCommon)((ICellBlockGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CellBlock DeepCopy(
            this ICellBlockGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CellBlockSetterTranslationCommon)((ICellBlockGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this ICellBlockGetter obj)
        {
            return ((CellBlockCommon)((ICellBlockGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this ICellBlockGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((CellBlockCommon)((ICellBlockGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            this ICellBlockGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((CellBlockCommon)((ICellBlockGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommonGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this ICellBlock obj)
        {
            return ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ICellBlock obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(
            this ICellBlock obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommon)m);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellBlock obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellBlock obj,
            IEnumerable<FormKey> keys)
        {
            ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellBlock obj,
            HashSet<FormKey> keys)
        {
            ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellBlock obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellBlock obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellBlock obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellBlock obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellBlock obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellBlock obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellBlock obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellBlock obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((CellBlockSetterCommon)((ICellBlockGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICellBlock item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellBlockSetterCommon)((ICellBlockGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum CellBlock_FieldIndex
    {
        BlockNumber = 0,
        GroupType = 1,
        LastModified = 2,
        Unknown = 3,
        SubBlocks = 4,
    }
    #endregion

    #region Registration
    public partial class CellBlock_Registration : ILoquiRegistration
    {
        public static readonly CellBlock_Registration Instance = new CellBlock_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 290,
            version: 0);

        public const string GUID = "98f34198-f0b3-4f1d-825d-37d3f343a365";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(CellBlock.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CellBlock.ErrorMask);

        public static readonly Type ClassType = typeof(CellBlock);

        public static readonly Type GetterType = typeof(ICellBlockGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICellBlock);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.CellBlock";

        public const string Name = "CellBlock";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.GRUP;
        public static readonly Type BinaryWriteTranslation = typeof(CellBlockBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CellBlockSetterCommon
    {
        public static readonly CellBlockSetterCommon Instance = new CellBlockSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICellBlock item)
        {
            ClearPartial();
            item.BlockNumber = default;
            item.GroupType = default;
            item.LastModified = default;
            item.Unknown = default;
            item.SubBlocks.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ICellBlock obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.SubBlocks.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(ICellBlock obj)
        {
            foreach (var item in CellBlockCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            ICellBlock obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in CellBlockCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            ICellBlock obj,
            HashSet<FormKey> keys)
        {
            obj.SubBlocks.ForEach(i => i.Remove(keys));
            obj.SubBlocks.RemoveWhere(i => i.Cells.Count == 0);
        }
        
        public void Remove(
            ICellBlock obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    if (!CellBlock_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "CellSubBlock":
                case "ICellSubBlockGetter":
                case "ICellSubBlock":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    obj.SubBlocks.RemoveWhere(i => i.Cells.Count == 0);
                    break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "APlaced":
                case "IAPlacedGetter":
                case "IAPlaced":
                case "IAPlacedInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IComplexLocation":
                case "IComplexLocationGetter":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "ILocationTargetable":
                case "ILocationTargetableGetter":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IOwner":
                case "IOwnerGetter":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "ILinkedReference":
                case "ILinkedReferenceGetter":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IPlacedSimple":
                case "IPlacedSimpleGetter":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IPlacedThing":
                case "IPlacedThingGetter":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICellBlock item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.GroupParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CellBlockBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CellBlockBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class CellBlockCommon
    {
        public static readonly CellBlockCommon Instance = new CellBlockCommon();

        public CellBlock.Mask<bool> GetEqualsMask(
            ICellBlockGetter item,
            ICellBlockGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CellBlock.Mask<bool>(false);
            ((CellBlockCommon)((ICellBlockGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellBlockGetter item,
            ICellBlockGetter rhs,
            CellBlock.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.BlockNumber = item.BlockNumber == rhs.BlockNumber;
            ret.GroupType = item.GroupType == rhs.GroupType;
            ret.LastModified = item.LastModified == rhs.LastModified;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.SubBlocks = item.SubBlocks.CollectionEqualsHelper(
                rhs.SubBlocks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            ICellBlockGetter item,
            string? name = null,
            CellBlock.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICellBlockGetter item,
            FileGeneration fg,
            string? name = null,
            CellBlock.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CellBlock =>");
            }
            else
            {
                fg.AppendLine($"{name} (CellBlock) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICellBlockGetter item,
            FileGeneration fg,
            CellBlock.Mask<bool>? printMask = null)
        {
            if (printMask?.BlockNumber ?? true)
            {
                fg.AppendItem(item.BlockNumber, "BlockNumber");
            }
            if (printMask?.GroupType ?? true)
            {
                fg.AppendItem(item.GroupType, "GroupType");
            }
            if (printMask?.LastModified ?? true)
            {
                fg.AppendItem(item.LastModified, "LastModified");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.SubBlocks?.Overall ?? true)
            {
                fg.AppendLine("SubBlocks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SubBlocks)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellBlockGetter? lhs,
            ICellBlockGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.BlockNumber != rhs.BlockNumber) return false;
            if (lhs.GroupType != rhs.GroupType) return false;
            if (lhs.LastModified != rhs.LastModified) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!lhs.SubBlocks.SequenceEqualNullable(rhs.SubBlocks)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ICellBlockGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.BlockNumber);
            hash.Add(item.GroupType);
            hash.Add(item.LastModified);
            hash.Add(item.Unknown);
            hash.Add(item.SubBlocks);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CellBlock.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ICellBlockGetter obj)
        {
            foreach (var item in obj.SubBlocks.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(ICellBlockGetter obj)
        {
            foreach (var subItem in obj.SubBlocks)
            {
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            ICellBlockGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!CellBlock_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "CellSubBlock":
                case "ICellSubBlockGetter":
                case "ICellSubBlock":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "APlaced":
                case "IAPlacedGetter":
                case "IAPlaced":
                case "IAPlacedInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "IComplexLocation":
                {
                    if (!CellBlock_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IComplexLocationGetter":
                {
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "ILocationTargetable":
                {
                    if (!CellBlock_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "ILocationTargetableGetter":
                {
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IOwner":
                {
                    if (!CellBlock_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IOwnerGetter":
                {
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IKeywordLinkedReference":
                {
                    if (!CellBlock_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IKeywordLinkedReferenceGetter":
                {
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "ILinkedReference":
                {
                    if (!CellBlock_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "ILinkedReferenceGetter":
                {
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlaced":
                {
                    if (!CellBlock_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedGetter":
                {
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedSimple":
                {
                    if (!CellBlock_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedSimpleGetter":
                {
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedThing":
                {
                    if (!CellBlock_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedThingGetter":
                {
                    foreach (var subItem in obj.SubBlocks)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        #endregion
        
    }
    public partial class CellBlockSetterTranslationCommon
    {
        public static readonly CellBlockSetterTranslationCommon Instance = new CellBlockSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICellBlock item,
            ICellBlockGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CellBlock_FieldIndex.BlockNumber) ?? true))
            {
                item.BlockNumber = rhs.BlockNumber;
            }
            if ((copyMask?.GetShouldTranslate((int)CellBlock_FieldIndex.GroupType) ?? true))
            {
                item.GroupType = rhs.GroupType;
            }
            if ((copyMask?.GetShouldTranslate((int)CellBlock_FieldIndex.LastModified) ?? true))
            {
                item.LastModified = rhs.LastModified;
            }
            if ((copyMask?.GetShouldTranslate((int)CellBlock_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)CellBlock_FieldIndex.SubBlocks) ?? true))
            {
                errorMask?.PushIndex((int)CellBlock_FieldIndex.SubBlocks);
                try
                {
                    item.SubBlocks.SetTo(
                        rhs.SubBlocks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public CellBlock DeepCopy(
            ICellBlockGetter item,
            CellBlock.TranslationMask? copyMask = null)
        {
            CellBlock ret = (CellBlock)((CellBlockCommon)((ICellBlockGetter)item).CommonInstance()!).GetNew();
            ((CellBlockSetterTranslationCommon)((ICellBlockGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CellBlock DeepCopy(
            ICellBlockGetter item,
            out CellBlock.ErrorMask errorMask,
            CellBlock.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CellBlock ret = (CellBlock)((CellBlockCommon)((ICellBlockGetter)item).CommonInstance()!).GetNew();
            ((CellBlockSetterTranslationCommon)((ICellBlockGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CellBlock.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CellBlock DeepCopy(
            ICellBlockGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CellBlock ret = (CellBlock)((CellBlockCommon)((ICellBlockGetter)item).CommonInstance()!).GetNew();
            ((CellBlockSetterTranslationCommon)((ICellBlockGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class CellBlock
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellBlock_Registration.Instance;
        public static CellBlock_Registration Registration => CellBlock_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CellBlockCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CellBlockSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CellBlockSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICellBlockGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICellBlockGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICellBlockGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CellBlockBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CellBlockBinaryWriteTranslation Instance = new CellBlockBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICellBlockGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.BlockNumber);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<GroupTypeEnum>.Instance.Write(
                writer,
                item.GroupType,
                length: 4);
            writer.Write(item.LastModified);
            writer.Write(item.Unknown);
        }

        public static void WriteRecordTypes(
            ICellBlockGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ICellSubBlockGetter>.Instance.Write(
                writer: writer,
                items: item.SubBlocks,
                transl: (MutagenWriter subWriter, ICellSubBlockGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((CellSubBlockBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ICellBlockGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.GRUP),
                type: Mutagen.Bethesda.Binary.ObjectType.Group))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellBlockGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CellBlockBinaryCreateTranslation
    {
        public readonly static CellBlockBinaryCreateTranslation Instance = new CellBlockBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICellBlock item,
            MutagenFrame frame)
        {
            item.BlockNumber = frame.ReadInt32();
            item.GroupType = EnumBinaryTranslation<GroupTypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.LastModified = frame.ReadInt32();
            item.Unknown = frame.ReadInt32();
        }

        public static ParseResult FillBinaryRecordTypes(
            ICellBlock item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.GRUP:
                {
                    item.SubBlocks.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<CellSubBlock>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.GRUP,
                            thread: frame.MetaData.Parallel,
                            recordTypeConverter: recordTypeConverter,
                            transl: CellSubBlock.TryCreateFromBinary));
                    return (int)CellBlock_FieldIndex.SubBlocks;
                }
                default:
                    frame.Position += contentLength + frame.MetaData.Constants.MajorConstants.HeaderLength;
                    return default(int?);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class CellBlockBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICellBlockGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellBlockBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CellBlockBinaryOverlay :
        BinaryOverlay,
        ICellBlockGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellBlock_Registration.Instance;
        public static CellBlock_Registration Registration => CellBlock_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CellBlockCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CellBlockSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICellBlockGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICellBlockGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICellBlockGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => CellBlockCommon.Instance.GetContainedFormLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CellBlockBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellBlockBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Int32 BlockNumber => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x0, 0x4));
        public GroupTypeEnum GroupType => (GroupTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x4, 0x4));
        public Int32 LastModified => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x8, 0x4));
        public Int32 Unknown => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0xC, 0x4));
        public IReadOnlyList<ICellSubBlockGetter> SubBlocks { get; private set; } = ListExt.Empty<CellSubBlockBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CellBlockBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CellBlockBinaryOverlay CellBlockFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CellBlockBinaryOverlay(
                bytes: HeaderTranslation.ExtractGroupMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetGroup().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.GroupConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.GroupConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillGroupRecordsForWrapper(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static CellBlockBinaryOverlay CellBlockFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CellBlockFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.GRUP:
                {
                    this.SubBlocks = BinaryOverlayList.FactoryByArray<CellSubBlockBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => CellSubBlockBinaryOverlay.CellSubBlockFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.GroupConstants,
                            skipHeader: false));
                    return (int)CellBlock_FieldIndex.SubBlocks;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellBlockMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICellBlockGetter rhs)) return false;
            return ((CellBlockCommon)((ICellBlockGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICellBlockGetter? obj)
        {
            return ((CellBlockCommon)((ICellBlockGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CellBlockCommon)((ICellBlockGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

