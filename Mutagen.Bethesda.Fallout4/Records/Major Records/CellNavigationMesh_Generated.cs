/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class CellNavigationMesh :
        ANavigationMesh,
        ICellNavigationMeshInternal,
        ILoquiObjectSetter<CellNavigationMesh>,
        IEquatable<ICellNavigationMeshGetter>
    {
        #region Ctor
        protected CellNavigationMesh()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CellNavigationMeshData? _Data;
        public CellNavigationMeshData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellNavigationMeshDataGetter? ICellNavigationMeshGetter.Data => this.Data;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellNavigationMeshMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICellNavigationMeshGetter rhs)) return false;
            return ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICellNavigationMeshGetter? obj)
        {
            return ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ANavigationMesh.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Data = new MaskItem<TItem, CellNavigationMeshData.Mask<TItem>?>(initialValue, new CellNavigationMeshData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ONAM,
                TItem PNAM,
                TItem NNAM,
                TItem Data)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                ONAM: ONAM,
                PNAM: PNAM,
                NNAM: NNAM)
            {
                this.Data = new MaskItem<TItem, CellNavigationMeshData.Mask<TItem>?>(Data, new CellNavigationMeshData.Mask<TItem>(Data));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, CellNavigationMeshData.Mask<TItem>?>? Data { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Data);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CellNavigationMesh.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Data = this.Data == null ? null : new MaskItem<R, CellNavigationMeshData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CellNavigationMesh.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CellNavigationMesh.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CellNavigationMesh.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ANavigationMesh.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, CellNavigationMeshData.ErrorMask?>? Data;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                CellNavigationMesh_FieldIndex enu = (CellNavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case CellNavigationMesh_FieldIndex.Data:
                        return Data;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                CellNavigationMesh_FieldIndex enu = (CellNavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case CellNavigationMesh_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, CellNavigationMeshData.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                CellNavigationMesh_FieldIndex enu = (CellNavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case CellNavigationMesh_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, CellNavigationMeshData.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Data != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Data?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ANavigationMesh.TranslationMask,
            ITranslationMask
        {
            #region Members
            public CellNavigationMeshData.TranslationMask? Data;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CellNavigationMesh_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => CellNavigationMeshCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CellNavigationMeshSetterCommon.Instance.RemapLinks(this, mapping);
        public CellNavigationMesh(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private CellNavigationMesh(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal CellNavigationMesh(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public CellNavigationMesh(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public CellNavigationMesh(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellNavigationMeshBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellNavigationMeshBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static CellNavigationMesh CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CellNavigationMesh();
            ((CellNavigationMeshSetterCommon)((ICellNavigationMeshGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CellNavigationMesh item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CellNavigationMeshSetterCommon)((ICellNavigationMeshGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new CellNavigationMesh GetNew()
        {
            return new CellNavigationMesh();
        }

    }
    #endregion

    #region Interface
    public partial interface ICellNavigationMesh :
        ICellNavigationMeshGetter,
        IANavigationMesh,
        ILoquiObjectSetter<ICellNavigationMeshInternal>,
        IFormLinkContainer
    {
        new CellNavigationMeshData? Data { get; set; }
    }

    public partial interface ICellNavigationMeshInternal :
        IANavigationMeshInternal,
        ICellNavigationMesh,
        ICellNavigationMeshGetter
    {
    }

    public partial interface ICellNavigationMeshGetter :
        IANavigationMeshGetter,
        ILoquiObject<ICellNavigationMeshGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => CellNavigationMesh_Registration.Instance;
        ICellNavigationMeshDataGetter? Data { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CellNavigationMeshMixIn
    {
        public static void Clear(this ICellNavigationMeshInternal item)
        {
            ((CellNavigationMeshSetterCommon)((ICellNavigationMeshGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CellNavigationMesh.Mask<bool> GetEqualsMask(
            this ICellNavigationMeshGetter item,
            ICellNavigationMeshGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICellNavigationMeshGetter item,
            string? name = null,
            CellNavigationMesh.Mask<bool>? printMask = null)
        {
            return ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICellNavigationMeshGetter item,
            FileGeneration fg,
            string? name = null,
            CellNavigationMesh.Mask<bool>? printMask = null)
        {
            ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICellNavigationMeshGetter item,
            ICellNavigationMeshGetter rhs)
        {
            return ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICellNavigationMeshInternal lhs,
            ICellNavigationMeshGetter rhs,
            out CellNavigationMesh.ErrorMask errorMask,
            CellNavigationMesh.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CellNavigationMeshSetterTranslationCommon)((ICellNavigationMeshGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CellNavigationMesh.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICellNavigationMeshInternal lhs,
            ICellNavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CellNavigationMeshSetterTranslationCommon)((ICellNavigationMeshGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CellNavigationMesh DeepCopy(
            this ICellNavigationMeshGetter item,
            CellNavigationMesh.TranslationMask? copyMask = null)
        {
            return ((CellNavigationMeshSetterTranslationCommon)((ICellNavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CellNavigationMesh DeepCopy(
            this ICellNavigationMeshGetter item,
            out CellNavigationMesh.ErrorMask errorMask,
            CellNavigationMesh.TranslationMask? copyMask = null)
        {
            return ((CellNavigationMeshSetterTranslationCommon)((ICellNavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CellNavigationMesh DeepCopy(
            this ICellNavigationMeshGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CellNavigationMeshSetterTranslationCommon)((ICellNavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static CellNavigationMesh Duplicate(
            this ICellNavigationMeshGetter item,
            FormKey formKey,
            CellNavigationMesh.TranslationMask? copyMask = null)
        {
            return ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICellNavigationMeshInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellNavigationMeshSetterCommon)((ICellNavigationMeshGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum CellNavigationMesh_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ONAM = 6,
        PNAM = 7,
        NNAM = 8,
        Data = 9,
    }
    #endregion

    #region Registration
    public partial class CellNavigationMesh_Registration : ILoquiRegistration
    {
        public static readonly CellNavigationMesh_Registration Instance = new CellNavigationMesh_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 319,
            version: 0);

        public const string GUID = "c097a44b-e830-4762-8234-5cd4d9e89ae1";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(CellNavigationMesh.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CellNavigationMesh.ErrorMask);

        public static readonly Type ClassType = typeof(CellNavigationMesh);

        public static readonly Type GetterType = typeof(ICellNavigationMeshGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICellNavigationMesh);

        public static readonly Type? InternalSetterType = typeof(ICellNavigationMeshInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.CellNavigationMesh";

        public const string Name = "CellNavigationMesh";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAVM;
        public static readonly Type BinaryWriteTranslation = typeof(CellNavigationMeshBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CellNavigationMeshSetterCommon : ANavigationMeshSetterCommon
    {
        public new static readonly CellNavigationMeshSetterCommon Instance = new CellNavigationMeshSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICellNavigationMeshInternal item)
        {
            ClearPartial();
            item.Data = null;
            base.Clear(item);
        }
        
        public override void Clear(IANavigationMeshInternal item)
        {
            Clear(item: (ICellNavigationMeshInternal)item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ICellNavigationMeshInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICellNavigationMeshInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ICellNavigationMesh obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Data?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICellNavigationMeshInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ICellNavigationMeshInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CellNavigationMeshBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CellNavigationMeshBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IANavigationMeshInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (CellNavigationMesh)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (CellNavigationMesh)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (CellNavigationMesh)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class CellNavigationMeshCommon : ANavigationMeshCommon
    {
        public new static readonly CellNavigationMeshCommon Instance = new CellNavigationMeshCommon();

        public CellNavigationMesh.Mask<bool> GetEqualsMask(
            ICellNavigationMeshGetter item,
            ICellNavigationMeshGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CellNavigationMesh.Mask<bool>(false);
            ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellNavigationMeshGetter item,
            ICellNavigationMeshGetter rhs,
            CellNavigationMesh.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICellNavigationMeshGetter item,
            string? name = null,
            CellNavigationMesh.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICellNavigationMeshGetter item,
            FileGeneration fg,
            string? name = null,
            CellNavigationMesh.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CellNavigationMesh =>");
            }
            else
            {
                fg.AppendLine($"{name} (CellNavigationMesh) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICellNavigationMeshGetter item,
            FileGeneration fg,
            CellNavigationMesh.Mask<bool>? printMask = null)
        {
            ANavigationMeshCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
        }
        
        public static CellNavigationMesh_FieldIndex ConvertFieldIndex(ANavigationMesh_FieldIndex index)
        {
            switch (index)
            {
                case ANavigationMesh_FieldIndex.MajorRecordFlagsRaw:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case ANavigationMesh_FieldIndex.FormKey:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case ANavigationMesh_FieldIndex.VersionControl:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case ANavigationMesh_FieldIndex.EditorID:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case ANavigationMesh_FieldIndex.FormVersion:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case ANavigationMesh_FieldIndex.Version2:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case ANavigationMesh_FieldIndex.ONAM:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case ANavigationMesh_FieldIndex.PNAM:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case ANavigationMesh_FieldIndex.NNAM:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new CellNavigationMesh_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new CellNavigationMesh_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (CellNavigationMesh_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellNavigationMeshGetter? lhs,
            ICellNavigationMeshGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IANavigationMeshGetter)lhs, (IANavigationMeshGetter)rhs)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            return true;
        }
        
        public override bool Equals(
            IANavigationMeshGetter? lhs,
            IANavigationMeshGetter? rhs)
        {
            return Equals(
                lhs: (ICellNavigationMeshGetter?)lhs,
                rhs: rhs as ICellNavigationMeshGetter);
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICellNavigationMeshGetter?)lhs,
                rhs: rhs as ICellNavigationMeshGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICellNavigationMeshGetter?)lhs,
                rhs: rhs as ICellNavigationMeshGetter);
        }
        
        public virtual int GetHashCode(ICellNavigationMeshGetter item)
        {
            var hash = new HashCode();
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IANavigationMeshGetter item)
        {
            return GetHashCode(item: (ICellNavigationMeshGetter)item);
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ICellNavigationMeshGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellNavigationMeshGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return CellNavigationMesh.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ICellNavigationMeshGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Data.TryGet(out var DataItems))
            {
                foreach (var item in DataItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public CellNavigationMesh Duplicate(
            ICellNavigationMeshGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new CellNavigationMesh(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override ANavigationMesh Duplicate(
            IANavigationMeshGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICellNavigationMesh)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICellNavigationMesh)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICellNavigationMesh)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class CellNavigationMeshSetterTranslationCommon : ANavigationMeshSetterTranslationCommon
    {
        public new static readonly CellNavigationMeshSetterTranslationCommon Instance = new CellNavigationMeshSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICellNavigationMeshInternal item,
            ICellNavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ICellNavigationMesh item,
            ICellNavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IANavigationMesh)item,
                (IANavigationMeshGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)CellNavigationMesh_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)CellNavigationMesh_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)CellNavigationMesh_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IANavigationMeshInternal item,
            IANavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellNavigationMeshInternal)item,
                rhs: (ICellNavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IANavigationMesh item,
            IANavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellNavigationMesh)item,
                rhs: (ICellNavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellNavigationMeshInternal)item,
                rhs: (ICellNavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellNavigationMesh)item,
                rhs: (ICellNavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellNavigationMeshInternal)item,
                rhs: (ICellNavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellNavigationMesh)item,
                rhs: (ICellNavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public CellNavigationMesh DeepCopy(
            ICellNavigationMeshGetter item,
            CellNavigationMesh.TranslationMask? copyMask = null)
        {
            CellNavigationMesh ret = (CellNavigationMesh)((CellNavigationMeshCommon)((ICellNavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((CellNavigationMeshSetterTranslationCommon)((ICellNavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CellNavigationMesh DeepCopy(
            ICellNavigationMeshGetter item,
            out CellNavigationMesh.ErrorMask errorMask,
            CellNavigationMesh.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CellNavigationMesh ret = (CellNavigationMesh)((CellNavigationMeshCommon)((ICellNavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((CellNavigationMeshSetterTranslationCommon)((ICellNavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CellNavigationMesh.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CellNavigationMesh DeepCopy(
            ICellNavigationMeshGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CellNavigationMesh ret = (CellNavigationMesh)((CellNavigationMeshCommon)((ICellNavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((CellNavigationMeshSetterTranslationCommon)((ICellNavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class CellNavigationMesh
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellNavigationMesh_Registration.Instance;
        public new static CellNavigationMesh_Registration Registration => CellNavigationMesh_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellNavigationMeshCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CellNavigationMeshSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellNavigationMeshSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CellNavigationMeshBinaryWriteTranslation :
        ANavigationMeshBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CellNavigationMeshBinaryWriteTranslation Instance = new CellNavigationMeshBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICellNavigationMeshGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            ICellNavigationMeshGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.NAVM),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    ANavigationMeshBinaryWriteTranslation.WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellNavigationMeshGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IANavigationMeshGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellNavigationMeshGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellNavigationMeshGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICellNavigationMeshGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CellNavigationMeshBinaryCreateTranslation : ANavigationMeshBinaryCreateTranslation
    {
        public new readonly static CellNavigationMeshBinaryCreateTranslation Instance = new CellNavigationMeshBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.NAVM;
        public static void FillBinaryStructs(
            ICellNavigationMeshInternal item,
            MutagenFrame frame)
        {
            ANavigationMeshBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class CellNavigationMeshBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CellNavigationMeshBinaryOverlay :
        ANavigationMeshBinaryOverlay,
        ICellNavigationMeshGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellNavigationMesh_Registration.Instance;
        public new static CellNavigationMesh_Registration Registration => CellNavigationMesh_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellNavigationMeshCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellNavigationMeshSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => CellNavigationMeshCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellNavigationMeshBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CellNavigationMeshBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CellNavigationMeshBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CellNavigationMeshBinaryOverlay CellNavigationMeshFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new CellNavigationMeshBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static CellNavigationMeshBinaryOverlay CellNavigationMeshFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CellNavigationMeshFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CellNavigationMeshMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICellNavigationMeshGetter rhs)) return false;
            return ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICellNavigationMeshGetter? obj)
        {
            return ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CellNavigationMeshCommon)((ICellNavigationMeshGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

