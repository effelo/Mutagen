/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Region :
        Fallout4MajorRecord,
        IRegionInternal,
        ILoquiObjectSetter<Region>,
        IEquatable<IRegionGetter>
    {
        #region Ctor
        protected Region()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MapColor
        public Color? MapColor { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? IRegionGetter.MapColor => this.MapColor;
        #endregion
        #region Worldspace
        public FormLinkNullable<IWorldspaceGetter> Worldspace { get; set; } = new FormLinkNullable<IWorldspaceGetter>();
        #endregion
        #region RegionAreas
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RegionArea> _RegionAreas = new ExtendedList<RegionArea>();
        public ExtendedList<RegionArea> RegionAreas
        {
            get => this._RegionAreas;
            protected set => this._RegionAreas = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRegionAreaGetter> IRegionGetter.RegionAreas => _RegionAreas;
        #endregion

        #endregion
        #region Objects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionObjects? _Objects;
        public RegionObjects? Objects
        {
            get => _Objects;
            set => _Objects = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionObjectsGetter? IRegionGetter.Objects => this.Objects;
        #endregion
        #region Weather
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionWeather? _Weather;
        public RegionWeather? Weather
        {
            get => _Weather;
            set => _Weather = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionWeatherGetter? IRegionGetter.Weather => this.Weather;
        #endregion
        #region Map
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionMap? _Map;
        public RegionMap? Map
        {
            get => _Map;
            set => _Map = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionMapGetter? IRegionGetter.Map => this.Map;
        #endregion
        #region Land
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionLand? _Land;
        public RegionLand? Land
        {
            get => _Land;
            set => _Land = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionLandGetter? IRegionGetter.Land => this.Land;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionGrasses? _Grasses;
        public RegionGrasses? Grasses
        {
            get => _Grasses;
            set => _Grasses = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionGrassesGetter? IRegionGetter.Grasses => this.Grasses;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionSounds? _Sounds;
        public RegionSounds? Sounds
        {
            get => _Sounds;
            set => _Sounds = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionSoundsGetter? IRegionGetter.Sounds => this.Sounds;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RegionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRegionGetter rhs)) return false;
            return ((RegionCommon)((IRegionGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IRegionGetter? obj)
        {
            return ((RegionCommon)((IRegionGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionCommon)((IRegionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.MapColor = initialValue;
                this.Worldspace = initialValue;
                this.RegionAreas = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RegionArea.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RegionArea.Mask<TItem>?>>());
                this.Objects = new MaskItem<TItem, RegionObjects.Mask<TItem>?>(initialValue, new RegionObjects.Mask<TItem>(initialValue));
                this.Weather = new MaskItem<TItem, RegionWeather.Mask<TItem>?>(initialValue, new RegionWeather.Mask<TItem>(initialValue));
                this.Map = new MaskItem<TItem, RegionMap.Mask<TItem>?>(initialValue, new RegionMap.Mask<TItem>(initialValue));
                this.Land = new MaskItem<TItem, RegionLand.Mask<TItem>?>(initialValue, new RegionLand.Mask<TItem>(initialValue));
                this.Grasses = new MaskItem<TItem, RegionGrasses.Mask<TItem>?>(initialValue, new RegionGrasses.Mask<TItem>(initialValue));
                this.Sounds = new MaskItem<TItem, RegionSounds.Mask<TItem>?>(initialValue, new RegionSounds.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem MapColor,
                TItem Worldspace,
                TItem RegionAreas,
                TItem Objects,
                TItem Weather,
                TItem Map,
                TItem Land,
                TItem Grasses,
                TItem Sounds)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.MapColor = MapColor;
                this.Worldspace = Worldspace;
                this.RegionAreas = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RegionArea.Mask<TItem>?>>?>(RegionAreas, Enumerable.Empty<MaskItemIndexed<TItem, RegionArea.Mask<TItem>?>>());
                this.Objects = new MaskItem<TItem, RegionObjects.Mask<TItem>?>(Objects, new RegionObjects.Mask<TItem>(Objects));
                this.Weather = new MaskItem<TItem, RegionWeather.Mask<TItem>?>(Weather, new RegionWeather.Mask<TItem>(Weather));
                this.Map = new MaskItem<TItem, RegionMap.Mask<TItem>?>(Map, new RegionMap.Mask<TItem>(Map));
                this.Land = new MaskItem<TItem, RegionLand.Mask<TItem>?>(Land, new RegionLand.Mask<TItem>(Land));
                this.Grasses = new MaskItem<TItem, RegionGrasses.Mask<TItem>?>(Grasses, new RegionGrasses.Mask<TItem>(Grasses));
                this.Sounds = new MaskItem<TItem, RegionSounds.Mask<TItem>?>(Sounds, new RegionSounds.Mask<TItem>(Sounds));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MapColor;
            public TItem Worldspace;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RegionArea.Mask<TItem>?>>?>? RegionAreas;
            public MaskItem<TItem, RegionObjects.Mask<TItem>?>? Objects { get; set; }
            public MaskItem<TItem, RegionWeather.Mask<TItem>?>? Weather { get; set; }
            public MaskItem<TItem, RegionMap.Mask<TItem>?>? Map { get; set; }
            public MaskItem<TItem, RegionLand.Mask<TItem>?>? Land { get; set; }
            public MaskItem<TItem, RegionGrasses.Mask<TItem>?>? Grasses { get; set; }
            public MaskItem<TItem, RegionSounds.Mask<TItem>?>? Sounds { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.MapColor, rhs.MapColor)) return false;
                if (!object.Equals(this.Worldspace, rhs.Worldspace)) return false;
                if (!object.Equals(this.RegionAreas, rhs.RegionAreas)) return false;
                if (!object.Equals(this.Objects, rhs.Objects)) return false;
                if (!object.Equals(this.Weather, rhs.Weather)) return false;
                if (!object.Equals(this.Map, rhs.Map)) return false;
                if (!object.Equals(this.Land, rhs.Land)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MapColor);
                hash.Add(this.Worldspace);
                hash.Add(this.RegionAreas);
                hash.Add(this.Objects);
                hash.Add(this.Weather);
                hash.Add(this.Map);
                hash.Add(this.Land);
                hash.Add(this.Grasses);
                hash.Add(this.Sounds);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.MapColor)) return false;
                if (!eval(this.Worldspace)) return false;
                if (this.RegionAreas != null)
                {
                    if (!eval(this.RegionAreas.Overall)) return false;
                    if (this.RegionAreas.Specific != null)
                    {
                        foreach (var item in this.RegionAreas.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Objects != null)
                {
                    if (!eval(this.Objects.Overall)) return false;
                    if (this.Objects.Specific != null && !this.Objects.Specific.All(eval)) return false;
                }
                if (Weather != null)
                {
                    if (!eval(this.Weather.Overall)) return false;
                    if (this.Weather.Specific != null && !this.Weather.Specific.All(eval)) return false;
                }
                if (Map != null)
                {
                    if (!eval(this.Map.Overall)) return false;
                    if (this.Map.Specific != null && !this.Map.Specific.All(eval)) return false;
                }
                if (Land != null)
                {
                    if (!eval(this.Land.Overall)) return false;
                    if (this.Land.Specific != null && !this.Land.Specific.All(eval)) return false;
                }
                if (Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null && !this.Grasses.Specific.All(eval)) return false;
                }
                if (Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null && !this.Sounds.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.MapColor)) return true;
                if (eval(this.Worldspace)) return true;
                if (this.RegionAreas != null)
                {
                    if (eval(this.RegionAreas.Overall)) return true;
                    if (this.RegionAreas.Specific != null)
                    {
                        foreach (var item in this.RegionAreas.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Objects != null)
                {
                    if (eval(this.Objects.Overall)) return true;
                    if (this.Objects.Specific != null && this.Objects.Specific.Any(eval)) return true;
                }
                if (Weather != null)
                {
                    if (eval(this.Weather.Overall)) return true;
                    if (this.Weather.Specific != null && this.Weather.Specific.Any(eval)) return true;
                }
                if (Map != null)
                {
                    if (eval(this.Map.Overall)) return true;
                    if (this.Map.Specific != null && this.Map.Specific.Any(eval)) return true;
                }
                if (Land != null)
                {
                    if (eval(this.Land.Overall)) return true;
                    if (this.Land.Specific != null && this.Land.Specific.Any(eval)) return true;
                }
                if (Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null && this.Grasses.Specific.Any(eval)) return true;
                }
                if (Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null && this.Sounds.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Region.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.MapColor = eval(this.MapColor);
                obj.Worldspace = eval(this.Worldspace);
                if (RegionAreas != null)
                {
                    obj.RegionAreas = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RegionArea.Mask<R>?>>?>(eval(this.RegionAreas.Overall), Enumerable.Empty<MaskItemIndexed<R, RegionArea.Mask<R>?>>());
                    if (RegionAreas.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RegionArea.Mask<R>?>>();
                        obj.RegionAreas.Specific = l;
                        foreach (var item in RegionAreas.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RegionArea.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RegionArea.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Objects = this.Objects == null ? null : new MaskItem<R, RegionObjects.Mask<R>?>(eval(this.Objects.Overall), this.Objects.Specific?.Translate(eval));
                obj.Weather = this.Weather == null ? null : new MaskItem<R, RegionWeather.Mask<R>?>(eval(this.Weather.Overall), this.Weather.Specific?.Translate(eval));
                obj.Map = this.Map == null ? null : new MaskItem<R, RegionMap.Mask<R>?>(eval(this.Map.Overall), this.Map.Specific?.Translate(eval));
                obj.Land = this.Land == null ? null : new MaskItem<R, RegionLand.Mask<R>?>(eval(this.Land.Overall), this.Land.Specific?.Translate(eval));
                obj.Grasses = this.Grasses == null ? null : new MaskItem<R, RegionGrasses.Mask<R>?>(eval(this.Grasses.Overall), this.Grasses.Specific?.Translate(eval));
                obj.Sounds = this.Sounds == null ? null : new MaskItem<R, RegionSounds.Mask<R>?>(eval(this.Sounds.Overall), this.Sounds.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Region.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Region.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Region.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.MapColor ?? true)
                    {
                        fg.AppendItem(MapColor, "MapColor");
                    }
                    if (printMask?.Worldspace ?? true)
                    {
                        fg.AppendItem(Worldspace, "Worldspace");
                    }
                    if ((printMask?.RegionAreas?.Overall ?? true)
                        && RegionAreas.TryGet(out var RegionAreasItem))
                    {
                        fg.AppendLine("RegionAreas =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RegionAreasItem.Overall);
                            if (RegionAreasItem.Specific != null)
                            {
                                foreach (var subItem in RegionAreasItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Objects?.Overall ?? true)
                    {
                        Objects?.ToString(fg);
                    }
                    if (printMask?.Weather?.Overall ?? true)
                    {
                        Weather?.ToString(fg);
                    }
                    if (printMask?.Map?.Overall ?? true)
                    {
                        Map?.ToString(fg);
                    }
                    if (printMask?.Land?.Overall ?? true)
                    {
                        Land?.ToString(fg);
                    }
                    if (printMask?.Grasses?.Overall ?? true)
                    {
                        Grasses?.ToString(fg);
                    }
                    if (printMask?.Sounds?.Overall ?? true)
                    {
                        Sounds?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? MapColor;
            public Exception? Worldspace;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionArea.ErrorMask?>>?>? RegionAreas;
            public MaskItem<Exception?, RegionObjects.ErrorMask?>? Objects;
            public MaskItem<Exception?, RegionWeather.ErrorMask?>? Weather;
            public MaskItem<Exception?, RegionMap.ErrorMask?>? Map;
            public MaskItem<Exception?, RegionLand.ErrorMask?>? Land;
            public MaskItem<Exception?, RegionGrasses.ErrorMask?>? Grasses;
            public MaskItem<Exception?, RegionSounds.ErrorMask?>? Sounds;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Region_FieldIndex enu = (Region_FieldIndex)index;
                switch (enu)
                {
                    case Region_FieldIndex.MapColor:
                        return MapColor;
                    case Region_FieldIndex.Worldspace:
                        return Worldspace;
                    case Region_FieldIndex.RegionAreas:
                        return RegionAreas;
                    case Region_FieldIndex.Objects:
                        return Objects;
                    case Region_FieldIndex.Weather:
                        return Weather;
                    case Region_FieldIndex.Map:
                        return Map;
                    case Region_FieldIndex.Land:
                        return Land;
                    case Region_FieldIndex.Grasses:
                        return Grasses;
                    case Region_FieldIndex.Sounds:
                        return Sounds;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Region_FieldIndex enu = (Region_FieldIndex)index;
                switch (enu)
                {
                    case Region_FieldIndex.MapColor:
                        this.MapColor = ex;
                        break;
                    case Region_FieldIndex.Worldspace:
                        this.Worldspace = ex;
                        break;
                    case Region_FieldIndex.RegionAreas:
                        this.RegionAreas = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionArea.ErrorMask?>>?>(ex, null);
                        break;
                    case Region_FieldIndex.Objects:
                        this.Objects = new MaskItem<Exception?, RegionObjects.ErrorMask?>(ex, null);
                        break;
                    case Region_FieldIndex.Weather:
                        this.Weather = new MaskItem<Exception?, RegionWeather.ErrorMask?>(ex, null);
                        break;
                    case Region_FieldIndex.Map:
                        this.Map = new MaskItem<Exception?, RegionMap.ErrorMask?>(ex, null);
                        break;
                    case Region_FieldIndex.Land:
                        this.Land = new MaskItem<Exception?, RegionLand.ErrorMask?>(ex, null);
                        break;
                    case Region_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, RegionGrasses.ErrorMask?>(ex, null);
                        break;
                    case Region_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, RegionSounds.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Region_FieldIndex enu = (Region_FieldIndex)index;
                switch (enu)
                {
                    case Region_FieldIndex.MapColor:
                        this.MapColor = (Exception?)obj;
                        break;
                    case Region_FieldIndex.Worldspace:
                        this.Worldspace = (Exception?)obj;
                        break;
                    case Region_FieldIndex.RegionAreas:
                        this.RegionAreas = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionArea.ErrorMask?>>?>)obj;
                        break;
                    case Region_FieldIndex.Objects:
                        this.Objects = (MaskItem<Exception?, RegionObjects.ErrorMask?>?)obj;
                        break;
                    case Region_FieldIndex.Weather:
                        this.Weather = (MaskItem<Exception?, RegionWeather.ErrorMask?>?)obj;
                        break;
                    case Region_FieldIndex.Map:
                        this.Map = (MaskItem<Exception?, RegionMap.ErrorMask?>?)obj;
                        break;
                    case Region_FieldIndex.Land:
                        this.Land = (MaskItem<Exception?, RegionLand.ErrorMask?>?)obj;
                        break;
                    case Region_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, RegionGrasses.ErrorMask?>?)obj;
                        break;
                    case Region_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, RegionSounds.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (MapColor != null) return true;
                if (Worldspace != null) return true;
                if (RegionAreas != null) return true;
                if (Objects != null) return true;
                if (Weather != null) return true;
                if (Map != null) return true;
                if (Land != null) return true;
                if (Grasses != null) return true;
                if (Sounds != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(MapColor, "MapColor");
                fg.AppendItem(Worldspace, "Worldspace");
                if (RegionAreas.TryGet(out var RegionAreasItem))
                {
                    fg.AppendLine("RegionAreas =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RegionAreasItem.Overall);
                        if (RegionAreasItem.Specific != null)
                        {
                            foreach (var subItem in RegionAreasItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Objects?.ToString(fg);
                Weather?.ToString(fg);
                Map?.ToString(fg);
                Land?.ToString(fg);
                Grasses?.ToString(fg);
                Sounds?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MapColor = this.MapColor.Combine(rhs.MapColor);
                ret.Worldspace = this.Worldspace.Combine(rhs.Worldspace);
                ret.RegionAreas = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionArea.ErrorMask?>>?>(ExceptionExt.Combine(this.RegionAreas?.Overall, rhs.RegionAreas?.Overall), ExceptionExt.Combine(this.RegionAreas?.Specific, rhs.RegionAreas?.Specific));
                ret.Objects = this.Objects.Combine(rhs.Objects, (l, r) => l.Combine(r));
                ret.Weather = this.Weather.Combine(rhs.Weather, (l, r) => l.Combine(r));
                ret.Map = this.Map.Combine(rhs.Map, (l, r) => l.Combine(r));
                ret.Land = this.Land.Combine(rhs.Land, (l, r) => l.Combine(r));
                ret.Grasses = this.Grasses.Combine(rhs.Grasses, (l, r) => l.Combine(r));
                ret.Sounds = this.Sounds.Combine(rhs.Sounds, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool MapColor;
            public bool Worldspace;
            public RegionArea.TranslationMask? RegionAreas;
            public RegionObjects.TranslationMask? Objects;
            public RegionWeather.TranslationMask? Weather;
            public RegionMap.TranslationMask? Map;
            public RegionLand.TranslationMask? Land;
            public RegionGrasses.TranslationMask? Grasses;
            public RegionSounds.TranslationMask? Sounds;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.MapColor = defaultOn;
                this.Worldspace = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((MapColor, null));
                ret.Add((Worldspace, null));
                ret.Add((RegionAreas == null ? DefaultOn : !RegionAreas.GetCrystal().CopyNothing, RegionAreas?.GetCrystal()));
                ret.Add((Objects != null ? Objects.OnOverall : DefaultOn, Objects?.GetCrystal()));
                ret.Add((Weather != null ? Weather.OnOverall : DefaultOn, Weather?.GetCrystal()));
                ret.Add((Map != null ? Map.OnOverall : DefaultOn, Map?.GetCrystal()));
                ret.Add((Land != null ? Land.OnOverall : DefaultOn, Land?.GetCrystal()));
                ret.Add((Grasses != null ? Grasses.OnOverall : DefaultOn, Grasses?.GetCrystal()));
                ret.Add((Sounds != null ? Sounds.OnOverall : DefaultOn, Sounds?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Region_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => RegionCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RegionSetterCommon.Instance.RemapLinks(this, mapping);
        public Region(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Region(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Region(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Region(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Region(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RegionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Region CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Region();
            ((RegionSetterCommon)((IRegionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Region item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((RegionSetterCommon)((IRegionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Region GetNew()
        {
            return new Region();
        }

    }
    #endregion

    #region Interface
    public partial interface IRegion :
        IRegionGetter,
        IFallout4MajorRecord,
        IEmittance,
        ILoquiObjectSetter<IRegionInternal>,
        IFormLinkContainer
    {
        new Color? MapColor { get; set; }
        new FormLinkNullable<IWorldspaceGetter> Worldspace { get; set; }
        new ExtendedList<RegionArea> RegionAreas { get; }
        new RegionObjects? Objects { get; set; }
        new RegionWeather? Weather { get; set; }
        new RegionMap? Map { get; set; }
        new RegionLand? Land { get; set; }
        new RegionGrasses? Grasses { get; set; }
        new RegionSounds? Sounds { get; set; }
        #region Mutagen
        new Region.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IRegionInternal :
        IFallout4MajorRecordInternal,
        IRegion,
        IRegionGetter
    {
    }

    public partial interface IRegionGetter :
        IFallout4MajorRecordGetter,
        IEmittanceGetter,
        ILoquiObject<IRegionGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Region_Registration.Instance;
        Color? MapColor { get; }
        FormLinkNullable<IWorldspaceGetter> Worldspace { get; }
        IReadOnlyList<IRegionAreaGetter> RegionAreas { get; }
        IRegionObjectsGetter? Objects { get; }
        IRegionWeatherGetter? Weather { get; }
        IRegionMapGetter? Map { get; }
        IRegionLandGetter? Land { get; }
        IRegionGrassesGetter? Grasses { get; }
        IRegionSoundsGetter? Sounds { get; }

        #region Mutagen
        Region.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class RegionMixIn
    {
        public static void Clear(this IRegionInternal item)
        {
            ((RegionSetterCommon)((IRegionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Region.Mask<bool> GetEqualsMask(
            this IRegionGetter item,
            IRegionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionGetter item,
            string? name = null,
            Region.Mask<bool>? printMask = null)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionGetter item,
            FileGeneration fg,
            string? name = null,
            Region.Mask<bool>? printMask = null)
        {
            ((RegionCommon)((IRegionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRegionGetter item,
            IRegionGetter rhs)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRegionInternal lhs,
            IRegionGetter rhs,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RegionSetterTranslationCommon)((IRegionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Region.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRegionInternal lhs,
            IRegionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RegionSetterTranslationCommon)((IRegionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Region DeepCopy(
            this IRegionGetter item,
            Region.TranslationMask? copyMask = null)
        {
            return ((RegionSetterTranslationCommon)((IRegionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Region DeepCopy(
            this IRegionGetter item,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? copyMask = null)
        {
            return ((RegionSetterTranslationCommon)((IRegionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Region DeepCopy(
            this IRegionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RegionSetterTranslationCommon)((IRegionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Region Duplicate(
            this IRegionGetter item,
            FormKey formKey,
            Region.TranslationMask? copyMask = null)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRegionInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionSetterCommon)((IRegionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Region_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        MapColor = 6,
        Worldspace = 7,
        RegionAreas = 8,
        Objects = 9,
        Weather = 10,
        Map = 11,
        Land = 12,
        Grasses = 13,
        Sounds = 14,
    }
    #endregion

    #region Registration
    public partial class Region_Registration : ILoquiRegistration
    {
        public static readonly Region_Registration Instance = new Region_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 88,
            version: 0);

        public const string GUID = "f10c5e7d-6f32-4e0f-a856-df812878ce5b";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(Region.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Region.ErrorMask);

        public static readonly Type ClassType = typeof(Region);

        public static readonly Type GetterType = typeof(IRegionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegion);

        public static readonly Type? InternalSetterType = typeof(IRegionInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Region";

        public const string Name = "Region";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.REGN;
        public static readonly Type BinaryWriteTranslation = typeof(RegionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly RegionSetterCommon Instance = new RegionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRegionInternal item)
        {
            ClearPartial();
            item.MapColor = default;
            item.Worldspace = FormLinkNullable<IWorldspaceGetter>.Null;
            item.RegionAreas.Clear();
            item.Objects = null;
            item.Weather = null;
            item.Map = null;
            item.Land = null;
            item.Grasses = null;
            item.Sounds = null;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IRegionInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRegionInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IRegion obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Worldspace = obj.Worldspace.Relink(mapping);
            obj.Objects?.RemapLinks(mapping);
            obj.Weather?.RemapLinks(mapping);
            obj.Grasses?.RemapLinks(mapping);
            obj.Sounds?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRegionInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IRegionInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: RegionBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RegionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Region)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Region)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class RegionCommon : Fallout4MajorRecordCommon
    {
        public new static readonly RegionCommon Instance = new RegionCommon();

        public Region.Mask<bool> GetEqualsMask(
            IRegionGetter item,
            IRegionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Region.Mask<bool>(false);
            ((RegionCommon)((IRegionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRegionGetter item,
            IRegionGetter rhs,
            Region.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MapColor = item.MapColor.ColorOnlyEquals(rhs.MapColor);
            ret.Worldspace = item.Worldspace.Equals(rhs.Worldspace);
            ret.RegionAreas = item.RegionAreas.CollectionEqualsHelper(
                rhs.RegionAreas,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Objects = EqualsMaskHelper.EqualsHelper(
                item.Objects,
                rhs.Objects,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Weather = EqualsMaskHelper.EqualsHelper(
                item.Weather,
                rhs.Weather,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Map = EqualsMaskHelper.EqualsHelper(
                item.Map,
                rhs.Map,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Land = EqualsMaskHelper.EqualsHelper(
                item.Land,
                rhs.Land,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Grasses = EqualsMaskHelper.EqualsHelper(
                item.Grasses,
                rhs.Grasses,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Sounds = EqualsMaskHelper.EqualsHelper(
                item.Sounds,
                rhs.Sounds,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRegionGetter item,
            string? name = null,
            Region.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRegionGetter item,
            FileGeneration fg,
            string? name = null,
            Region.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Region =>");
            }
            else
            {
                fg.AppendLine($"{name} (Region) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRegionGetter item,
            FileGeneration fg,
            Region.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.MapColor ?? true)
                && item.MapColor.TryGet(out var MapColorItem))
            {
                fg.AppendItem(MapColorItem, "MapColor");
            }
            if (printMask?.Worldspace ?? true)
            {
                fg.AppendItem(item.Worldspace.FormKeyNullable, "Worldspace");
            }
            if (printMask?.RegionAreas?.Overall ?? true)
            {
                fg.AppendLine("RegionAreas =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.RegionAreas)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Objects?.Overall ?? true)
                && item.Objects.TryGet(out var ObjectsItem))
            {
                ObjectsItem?.ToString(fg, "Objects");
            }
            if ((printMask?.Weather?.Overall ?? true)
                && item.Weather.TryGet(out var WeatherItem))
            {
                WeatherItem?.ToString(fg, "Weather");
            }
            if ((printMask?.Map?.Overall ?? true)
                && item.Map.TryGet(out var MapItem))
            {
                MapItem?.ToString(fg, "Map");
            }
            if ((printMask?.Land?.Overall ?? true)
                && item.Land.TryGet(out var LandItem))
            {
                LandItem?.ToString(fg, "Land");
            }
            if ((printMask?.Grasses?.Overall ?? true)
                && item.Grasses.TryGet(out var GrassesItem))
            {
                GrassesItem?.ToString(fg, "Grasses");
            }
            if ((printMask?.Sounds?.Overall ?? true)
                && item.Sounds.TryGet(out var SoundsItem))
            {
                SoundsItem?.ToString(fg, "Sounds");
            }
        }
        
        public static Region_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Region_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Region_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Region_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Region_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Region_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Region_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Region_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Region_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRegionGetter? lhs,
            IRegionGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!lhs.MapColor.ColorOnlyEquals(rhs.MapColor)) return false;
            if (!lhs.Worldspace.Equals(rhs.Worldspace)) return false;
            if (!lhs.RegionAreas.SequenceEqualNullable(rhs.RegionAreas)) return false;
            if (!object.Equals(lhs.Objects, rhs.Objects)) return false;
            if (!object.Equals(lhs.Weather, rhs.Weather)) return false;
            if (!object.Equals(lhs.Map, rhs.Map)) return false;
            if (!object.Equals(lhs.Land, rhs.Land)) return false;
            if (!object.Equals(lhs.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(lhs.Sounds, rhs.Sounds)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRegionGetter?)lhs,
                rhs: rhs as IRegionGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRegionGetter?)lhs,
                rhs: rhs as IRegionGetter);
        }
        
        public virtual int GetHashCode(IRegionGetter item)
        {
            var hash = new HashCode();
            if (item.MapColor.TryGet(out var MapColoritem))
            {
                hash.Add(MapColoritem);
            }
            hash.Add(item.Worldspace);
            hash.Add(item.RegionAreas);
            if (item.Objects.TryGet(out var Objectsitem))
            {
                hash.Add(Objectsitem);
            }
            if (item.Weather.TryGet(out var Weatheritem))
            {
                hash.Add(Weatheritem);
            }
            if (item.Map.TryGet(out var Mapitem))
            {
                hash.Add(Mapitem);
            }
            if (item.Land.TryGet(out var Landitem))
            {
                hash.Add(Landitem);
            }
            if (item.Grasses.TryGet(out var Grassesitem))
            {
                hash.Add(Grassesitem);
            }
            if (item.Sounds.TryGet(out var Soundsitem))
            {
                hash.Add(Soundsitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IRegionGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRegionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Region.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IRegionGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Worldspace.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Worldspace);
            }
            if (obj.Objects.TryGet(out var ObjectsItems))
            {
                foreach (var item in ObjectsItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Weather.TryGet(out var WeatherItems))
            {
                foreach (var item in WeatherItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Grasses.TryGet(out var GrassesItems))
            {
                foreach (var item in GrassesItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Sounds.TryGet(out var SoundsItems))
            {
                foreach (var item in SoundsItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Region Duplicate(
            IRegionGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Region(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRegion)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRegion)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class RegionSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly RegionSetterTranslationCommon Instance = new RegionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRegionInternal item,
            IRegionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IRegion item,
            IRegionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.MapColor) ?? true))
            {
                item.MapColor = rhs.MapColor;
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Worldspace) ?? true))
            {
                item.Worldspace = new FormLinkNullable<IWorldspaceGetter>(rhs.Worldspace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.RegionAreas) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.RegionAreas);
                try
                {
                    item.RegionAreas.SetTo(
                        rhs.RegionAreas
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Objects) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Objects);
                try
                {
                    if(rhs.Objects.TryGet(out var rhsObjects))
                    {
                        item.Objects = rhsObjects.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Region_FieldIndex.Objects));
                    }
                    else
                    {
                        item.Objects = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Weather) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Weather);
                try
                {
                    if(rhs.Weather.TryGet(out var rhsWeather))
                    {
                        item.Weather = rhsWeather.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Region_FieldIndex.Weather));
                    }
                    else
                    {
                        item.Weather = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Map) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Map);
                try
                {
                    if(rhs.Map.TryGet(out var rhsMap))
                    {
                        item.Map = rhsMap.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Region_FieldIndex.Map));
                    }
                    else
                    {
                        item.Map = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Land) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Land);
                try
                {
                    if(rhs.Land.TryGet(out var rhsLand))
                    {
                        item.Land = rhsLand.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Region_FieldIndex.Land));
                    }
                    else
                    {
                        item.Land = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Grasses);
                try
                {
                    if(rhs.Grasses.TryGet(out var rhsGrasses))
                    {
                        item.Grasses = rhsGrasses.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Region_FieldIndex.Grasses));
                    }
                    else
                    {
                        item.Grasses = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Sounds);
                try
                {
                    if(rhs.Sounds.TryGet(out var rhsSounds))
                    {
                        item.Sounds = rhsSounds.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Region_FieldIndex.Sounds));
                    }
                    else
                    {
                        item.Sounds = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRegionInternal)item,
                rhs: (IRegionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRegion)item,
                rhs: (IRegionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRegionInternal)item,
                rhs: (IRegionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRegion)item,
                rhs: (IRegionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Region DeepCopy(
            IRegionGetter item,
            Region.TranslationMask? copyMask = null)
        {
            Region ret = (Region)((RegionCommon)((IRegionGetter)item).CommonInstance()!).GetNew();
            ((RegionSetterTranslationCommon)((IRegionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Region DeepCopy(
            IRegionGetter item,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Region ret = (Region)((RegionCommon)((IRegionGetter)item).CommonInstance()!).GetNew();
            ((RegionSetterTranslationCommon)((IRegionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Region.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Region DeepCopy(
            IRegionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Region ret = (Region)((RegionCommon)((IRegionGetter)item).CommonInstance()!).GetNew();
            ((RegionSetterTranslationCommon)((IRegionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Region
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Region_Registration.Instance;
        public new static Region_Registration Registration => Region_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RegionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RegionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RegionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RegionBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RegionBinaryWriteTranslation Instance = new RegionBinaryWriteTranslation();

        static partial void WriteBinaryRegionAreaLogicCustom(
            MutagenWriter writer,
            IRegionGetter item);

        public static void WriteBinaryRegionAreaLogic(
            MutagenWriter writer,
            IRegionGetter item)
        {
            WriteBinaryRegionAreaLogicCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IRegionGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MapColor,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.RCLR));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Worldspace,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.WNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRegionAreaGetter>.Instance.Write(
                writer: writer,
                items: item.RegionAreas,
                transl: (MutagenWriter subWriter, IRegionAreaGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((RegionAreaBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            RegionBinaryWriteTranslation.WriteBinaryRegionAreaLogic(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IRegionGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.REGN),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRegionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRegionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRegionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RegionBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static RegionBinaryCreateTranslation Instance = new RegionBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.REGN;
        public static void FillBinaryStructs(
            IRegionInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IRegionInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.RCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MapColor = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)Region_FieldIndex.MapColor;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Worldspace = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Region_FieldIndex.Worldspace;
                }
                case RecordTypeInts.RPLI:
                case RecordTypeInts.RPLD:
                {
                    item.RegionAreas.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionArea>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RegionArea_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: RegionArea.TryCreateFromBinary));
                    return (int)Region_FieldIndex.RegionAreas;
                }
                case RecordTypeInts.RDAT:
                {
                    RegionBinaryCreateTranslation.FillBinaryRegionAreaLogicCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryRegionAreaLogicCustom(
            MutagenFrame frame,
            IRegionInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class RegionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RegionBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IRegionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Region_Registration.Instance;
        public new static Region_Registration Registration => Region_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RegionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RegionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => RegionCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RegionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Region.MajorFlag MajorFlags => (Region.MajorFlag)this.MajorRecordFlagsRaw;

        #region MapColor
        private int? _MapColorLocation;
        public Color? MapColor => _MapColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _MapColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color?);
        #endregion
        #region Worldspace
        private int? _WorldspaceLocation;
        public FormLinkNullable<IWorldspaceGetter> Worldspace => _WorldspaceLocation.HasValue ? new FormLinkNullable<IWorldspaceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _WorldspaceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IWorldspaceGetter>.Null;
        #endregion
        public IReadOnlyList<IRegionAreaGetter> RegionAreas { get; private set; } = ListExt.Empty<RegionAreaBinaryOverlay>();
        #region RegionAreaLogic
        partial void RegionAreaLogicCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RegionBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static RegionBinaryOverlay RegionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new RegionBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RegionBinaryOverlay RegionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return RegionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.RCLR:
                {
                    _MapColorLocation = (stream.Position - offset);
                    return (int)Region_FieldIndex.MapColor;
                }
                case RecordTypeInts.WNAM:
                {
                    _WorldspaceLocation = (stream.Position - offset);
                    return (int)Region_FieldIndex.Worldspace;
                }
                case RecordTypeInts.RPLI:
                case RecordTypeInts.RPLD:
                {
                    this.RegionAreas = this.ParseRepeatedTypelessSubrecord<RegionAreaBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: RegionArea_Registration.TriggeringRecordTypes,
                        factory:  RegionAreaBinaryOverlay.RegionAreaFactory);
                    return (int)Region_FieldIndex.RegionAreas;
                }
                case RecordTypeInts.RDAT:
                {
                    RegionAreaLogicCustomParse(
                        stream,
                        offset);
                    return null;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RegionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRegionGetter rhs)) return false;
            return ((RegionCommon)((IRegionGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IRegionGetter? obj)
        {
            return ((RegionCommon)((IRegionGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionCommon)((IRegionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

