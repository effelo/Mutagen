/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class QuestAlias :
        IQuestAlias,
        ILoquiObjectSetter<QuestAlias>,
        IEquatable<IQuestAliasGetter>
    {
        #region Ctor
        public QuestAlias()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ID
        public UInt32 ID { get; set; } = default;
        #endregion
        #region Type
        public QuestAlias.TypeEnum Type { get; set; } = default;
        #endregion
        #region Name
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestAliasGetter.Name => this.Name;
        #endregion
        #region Flags
        public QuestAlias.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuestAlias.Flag? IQuestAliasGetter.Flags => this.Flags;
        #endregion
        #region AliasIndexToForceIntoWhenFilled
        public Int32? AliasIndexToForceIntoWhenFilled { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IQuestAliasGetter.AliasIndexToForceIntoWhenFilled => this.AliasIndexToForceIntoWhenFilled;
        #endregion
        #region SpecificLocation
        public FormLinkNullable<ILocationGetter> SpecificLocation { get; set; } = new FormLinkNullable<ILocationGetter>();
        #endregion
        #region ForcedReference
        public FormLinkNullable<IPlacedGetter> ForcedReference { get; set; } = new FormLinkNullable<IPlacedGetter>();
        #endregion
        #region UniqueActor
        public FormLinkNullable<INpcGetter> UniqueActor { get; set; } = new FormLinkNullable<INpcGetter>();
        #endregion
        #region Location
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LocationAliasReference? _Location;
        public LocationAliasReference? Location
        {
            get => _Location;
            set => _Location = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationAliasReferenceGetter? IQuestAliasGetter.Location => this.Location;
        #endregion
        #region External
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExternalAliasReference? _External;
        public ExternalAliasReference? External
        {
            get => _External;
            set => _External = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExternalAliasReferenceGetter? IQuestAliasGetter.External => this.External;
        #endregion
        #region CreateReferenceToObject
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CreateReferenceToObject? _CreateReferenceToObject;
        public CreateReferenceToObject? CreateReferenceToObject
        {
            get => _CreateReferenceToObject;
            set => _CreateReferenceToObject = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICreateReferenceToObjectGetter? IQuestAliasGetter.CreateReferenceToObject => this.CreateReferenceToObject;
        #endregion
        #region FindMatchingRefNearAlias
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FindMatchingRefNearAlias? _FindMatchingRefNearAlias;
        public FindMatchingRefNearAlias? FindMatchingRefNearAlias
        {
            get => _FindMatchingRefNearAlias;
            set => _FindMatchingRefNearAlias = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFindMatchingRefNearAliasGetter? IQuestAliasGetter.FindMatchingRefNearAlias => this.FindMatchingRefNearAlias;
        #endregion
        #region FindMatchingRefFromEvent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FindMatchingRefFromEvent? _FindMatchingRefFromEvent;
        public FindMatchingRefFromEvent? FindMatchingRefFromEvent
        {
            get => _FindMatchingRefFromEvent;
            set => _FindMatchingRefFromEvent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFindMatchingRefFromEventGetter? IQuestAliasGetter.FindMatchingRefFromEvent => this.FindMatchingRefFromEvent;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IQuestAliasGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IKeywordGetter>>? _Keywords;
        public ExtendedList<IFormLink<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IKeywordGetter>>? IQuestAliasGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLink<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ContainerEntry>? _Items;
        public ExtendedList<ContainerEntry>? Items
        {
            get => this._Items;
            set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IContainerEntryGetter>? IQuestAliasGetter.Items => _Items;
        #endregion

        #endregion
        #region SpectatorOverridePackageList
        public FormLinkNullable<IFormListGetter> SpectatorOverridePackageList { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region ObserveDeadBodyOverridePackageList
        public FormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region GuardWarnOverridePackageList
        public FormLinkNullable<IFormListGetter> GuardWarnOverridePackageList { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region CombatOverridePackageList
        public FormLinkNullable<IFormListGetter> CombatOverridePackageList { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region DisplayName
        public FormLinkNullable<IMessageGetter> DisplayName { get; set; } = new FormLinkNullable<IMessageGetter>();
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<ISpellGetter>> _Spells = new ExtendedList<IFormLink<ISpellGetter>>();
        public ExtendedList<IFormLink<ISpellGetter>> Spells
        {
            get => this._Spells;
            protected set => this._Spells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<ISpellGetter>> IQuestAliasGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IFactionGetter>> _Factions = new ExtendedList<IFormLink<IFactionGetter>>();
        public ExtendedList<IFormLink<IFactionGetter>> Factions
        {
            get => this._Factions;
            protected set => this._Factions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IFactionGetter>> IQuestAliasGetter.Factions => _Factions;
        #endregion

        #endregion
        #region PackageData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IPackageGetter>> _PackageData = new ExtendedList<IFormLink<IPackageGetter>>();
        public ExtendedList<IFormLink<IPackageGetter>> PackageData
        {
            get => this._PackageData;
            protected set => this._PackageData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IPackageGetter>> IQuestAliasGetter.PackageData => _PackageData;
        #endregion

        #endregion
        #region VoiceTypes
        public FormLinkNullable<IAliasVoiceTypeGetter> VoiceTypes { get; set; } = new FormLinkNullable<IAliasVoiceTypeGetter>();
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            QuestAliasMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IQuestAliasGetter rhs)) return false;
            return ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IQuestAliasGetter? obj)
        {
            return ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ID = initialValue;
                this.Type = initialValue;
                this.Name = initialValue;
                this.Flags = initialValue;
                this.AliasIndexToForceIntoWhenFilled = initialValue;
                this.SpecificLocation = initialValue;
                this.ForcedReference = initialValue;
                this.UniqueActor = initialValue;
                this.Location = new MaskItem<TItem, LocationAliasReference.Mask<TItem>?>(initialValue, new LocationAliasReference.Mask<TItem>(initialValue));
                this.External = new MaskItem<TItem, ExternalAliasReference.Mask<TItem>?>(initialValue, new ExternalAliasReference.Mask<TItem>(initialValue));
                this.CreateReferenceToObject = new MaskItem<TItem, CreateReferenceToObject.Mask<TItem>?>(initialValue, new CreateReferenceToObject.Mask<TItem>(initialValue));
                this.FindMatchingRefNearAlias = new MaskItem<TItem, FindMatchingRefNearAlias.Mask<TItem>?>(initialValue, new FindMatchingRefNearAlias.Mask<TItem>(initialValue));
                this.FindMatchingRefFromEvent = new MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>(initialValue, new FindMatchingRefFromEvent.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = initialValue;
                this.ObserveDeadBodyOverridePackageList = initialValue;
                this.GuardWarnOverridePackageList = initialValue;
                this.CombatOverridePackageList = initialValue;
                this.DisplayName = initialValue;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Factions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.PackageData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.VoiceTypes = initialValue;
            }

            public Mask(
                TItem ID,
                TItem Type,
                TItem Name,
                TItem Flags,
                TItem AliasIndexToForceIntoWhenFilled,
                TItem SpecificLocation,
                TItem ForcedReference,
                TItem UniqueActor,
                TItem Location,
                TItem External,
                TItem CreateReferenceToObject,
                TItem FindMatchingRefNearAlias,
                TItem FindMatchingRefFromEvent,
                TItem Conditions,
                TItem Keywords,
                TItem Items,
                TItem SpectatorOverridePackageList,
                TItem ObserveDeadBodyOverridePackageList,
                TItem GuardWarnOverridePackageList,
                TItem CombatOverridePackageList,
                TItem DisplayName,
                TItem Spells,
                TItem Factions,
                TItem PackageData,
                TItem VoiceTypes)
            {
                this.ID = ID;
                this.Type = Type;
                this.Name = Name;
                this.Flags = Flags;
                this.AliasIndexToForceIntoWhenFilled = AliasIndexToForceIntoWhenFilled;
                this.SpecificLocation = SpecificLocation;
                this.ForcedReference = ForcedReference;
                this.UniqueActor = UniqueActor;
                this.Location = new MaskItem<TItem, LocationAliasReference.Mask<TItem>?>(Location, new LocationAliasReference.Mask<TItem>(Location));
                this.External = new MaskItem<TItem, ExternalAliasReference.Mask<TItem>?>(External, new ExternalAliasReference.Mask<TItem>(External));
                this.CreateReferenceToObject = new MaskItem<TItem, CreateReferenceToObject.Mask<TItem>?>(CreateReferenceToObject, new CreateReferenceToObject.Mask<TItem>(CreateReferenceToObject));
                this.FindMatchingRefNearAlias = new MaskItem<TItem, FindMatchingRefNearAlias.Mask<TItem>?>(FindMatchingRefNearAlias, new FindMatchingRefNearAlias.Mask<TItem>(FindMatchingRefNearAlias));
                this.FindMatchingRefFromEvent = new MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>(FindMatchingRefFromEvent, new FindMatchingRefFromEvent.Mask<TItem>(FindMatchingRefFromEvent));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = SpectatorOverridePackageList;
                this.ObserveDeadBodyOverridePackageList = ObserveDeadBodyOverridePackageList;
                this.GuardWarnOverridePackageList = GuardWarnOverridePackageList;
                this.CombatOverridePackageList = CombatOverridePackageList;
                this.DisplayName = DisplayName;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Spells, Enumerable.Empty<(int Index, TItem Value)>());
                this.Factions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Factions, Enumerable.Empty<(int Index, TItem Value)>());
                this.PackageData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(PackageData, Enumerable.Empty<(int Index, TItem Value)>());
                this.VoiceTypes = VoiceTypes;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ID;
            public TItem Type;
            public TItem Name;
            public TItem Flags;
            public TItem AliasIndexToForceIntoWhenFilled;
            public TItem SpecificLocation;
            public TItem ForcedReference;
            public TItem UniqueActor;
            public MaskItem<TItem, LocationAliasReference.Mask<TItem>?>? Location { get; set; }
            public MaskItem<TItem, ExternalAliasReference.Mask<TItem>?>? External { get; set; }
            public MaskItem<TItem, CreateReferenceToObject.Mask<TItem>?>? CreateReferenceToObject { get; set; }
            public MaskItem<TItem, FindMatchingRefNearAlias.Mask<TItem>?>? FindMatchingRefNearAlias { get; set; }
            public MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>? FindMatchingRefFromEvent { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>? Items;
            public TItem SpectatorOverridePackageList;
            public TItem ObserveDeadBodyOverridePackageList;
            public TItem GuardWarnOverridePackageList;
            public TItem CombatOverridePackageList;
            public TItem DisplayName;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Spells;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Factions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? PackageData;
            public TItem VoiceTypes;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ID, rhs.ID)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.AliasIndexToForceIntoWhenFilled, rhs.AliasIndexToForceIntoWhenFilled)) return false;
                if (!object.Equals(this.SpecificLocation, rhs.SpecificLocation)) return false;
                if (!object.Equals(this.ForcedReference, rhs.ForcedReference)) return false;
                if (!object.Equals(this.UniqueActor, rhs.UniqueActor)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.External, rhs.External)) return false;
                if (!object.Equals(this.CreateReferenceToObject, rhs.CreateReferenceToObject)) return false;
                if (!object.Equals(this.FindMatchingRefNearAlias, rhs.FindMatchingRefNearAlias)) return false;
                if (!object.Equals(this.FindMatchingRefFromEvent, rhs.FindMatchingRefFromEvent)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.SpectatorOverridePackageList, rhs.SpectatorOverridePackageList)) return false;
                if (!object.Equals(this.ObserveDeadBodyOverridePackageList, rhs.ObserveDeadBodyOverridePackageList)) return false;
                if (!object.Equals(this.GuardWarnOverridePackageList, rhs.GuardWarnOverridePackageList)) return false;
                if (!object.Equals(this.CombatOverridePackageList, rhs.CombatOverridePackageList)) return false;
                if (!object.Equals(this.DisplayName, rhs.DisplayName)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.PackageData, rhs.PackageData)) return false;
                if (!object.Equals(this.VoiceTypes, rhs.VoiceTypes)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ID);
                hash.Add(this.Type);
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.AliasIndexToForceIntoWhenFilled);
                hash.Add(this.SpecificLocation);
                hash.Add(this.ForcedReference);
                hash.Add(this.UniqueActor);
                hash.Add(this.Location);
                hash.Add(this.External);
                hash.Add(this.CreateReferenceToObject);
                hash.Add(this.FindMatchingRefNearAlias);
                hash.Add(this.FindMatchingRefFromEvent);
                hash.Add(this.Conditions);
                hash.Add(this.Keywords);
                hash.Add(this.Items);
                hash.Add(this.SpectatorOverridePackageList);
                hash.Add(this.ObserveDeadBodyOverridePackageList);
                hash.Add(this.GuardWarnOverridePackageList);
                hash.Add(this.CombatOverridePackageList);
                hash.Add(this.DisplayName);
                hash.Add(this.Spells);
                hash.Add(this.Factions);
                hash.Add(this.PackageData);
                hash.Add(this.VoiceTypes);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ID)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.AliasIndexToForceIntoWhenFilled)) return false;
                if (!eval(this.SpecificLocation)) return false;
                if (!eval(this.ForcedReference)) return false;
                if (!eval(this.UniqueActor)) return false;
                if (Location != null)
                {
                    if (!eval(this.Location.Overall)) return false;
                    if (this.Location.Specific != null && !this.Location.Specific.All(eval)) return false;
                }
                if (External != null)
                {
                    if (!eval(this.External.Overall)) return false;
                    if (this.External.Specific != null && !this.External.Specific.All(eval)) return false;
                }
                if (CreateReferenceToObject != null)
                {
                    if (!eval(this.CreateReferenceToObject.Overall)) return false;
                    if (this.CreateReferenceToObject.Specific != null && !this.CreateReferenceToObject.Specific.All(eval)) return false;
                }
                if (FindMatchingRefNearAlias != null)
                {
                    if (!eval(this.FindMatchingRefNearAlias.Overall)) return false;
                    if (this.FindMatchingRefNearAlias.Specific != null && !this.FindMatchingRefNearAlias.Specific.All(eval)) return false;
                }
                if (FindMatchingRefFromEvent != null)
                {
                    if (!eval(this.FindMatchingRefFromEvent.Overall)) return false;
                    if (this.FindMatchingRefFromEvent.Specific != null && !this.FindMatchingRefFromEvent.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SpectatorOverridePackageList)) return false;
                if (!eval(this.ObserveDeadBodyOverridePackageList)) return false;
                if (!eval(this.GuardWarnOverridePackageList)) return false;
                if (!eval(this.CombatOverridePackageList)) return false;
                if (!eval(this.DisplayName)) return false;
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.PackageData != null)
                {
                    if (!eval(this.PackageData.Overall)) return false;
                    if (this.PackageData.Specific != null)
                    {
                        foreach (var item in this.PackageData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.VoiceTypes)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ID)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.AliasIndexToForceIntoWhenFilled)) return true;
                if (eval(this.SpecificLocation)) return true;
                if (eval(this.ForcedReference)) return true;
                if (eval(this.UniqueActor)) return true;
                if (Location != null)
                {
                    if (eval(this.Location.Overall)) return true;
                    if (this.Location.Specific != null && this.Location.Specific.Any(eval)) return true;
                }
                if (External != null)
                {
                    if (eval(this.External.Overall)) return true;
                    if (this.External.Specific != null && this.External.Specific.Any(eval)) return true;
                }
                if (CreateReferenceToObject != null)
                {
                    if (eval(this.CreateReferenceToObject.Overall)) return true;
                    if (this.CreateReferenceToObject.Specific != null && this.CreateReferenceToObject.Specific.Any(eval)) return true;
                }
                if (FindMatchingRefNearAlias != null)
                {
                    if (eval(this.FindMatchingRefNearAlias.Overall)) return true;
                    if (this.FindMatchingRefNearAlias.Specific != null && this.FindMatchingRefNearAlias.Specific.Any(eval)) return true;
                }
                if (FindMatchingRefFromEvent != null)
                {
                    if (eval(this.FindMatchingRefFromEvent.Overall)) return true;
                    if (this.FindMatchingRefFromEvent.Specific != null && this.FindMatchingRefFromEvent.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SpectatorOverridePackageList)) return true;
                if (eval(this.ObserveDeadBodyOverridePackageList)) return true;
                if (eval(this.GuardWarnOverridePackageList)) return true;
                if (eval(this.CombatOverridePackageList)) return true;
                if (eval(this.DisplayName)) return true;
                if (this.Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.PackageData != null)
                {
                    if (eval(this.PackageData.Overall)) return true;
                    if (this.PackageData.Specific != null)
                    {
                        foreach (var item in this.PackageData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.VoiceTypes)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new QuestAlias.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ID = eval(this.ID);
                obj.Type = eval(this.Type);
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.AliasIndexToForceIntoWhenFilled = eval(this.AliasIndexToForceIntoWhenFilled);
                obj.SpecificLocation = eval(this.SpecificLocation);
                obj.ForcedReference = eval(this.ForcedReference);
                obj.UniqueActor = eval(this.UniqueActor);
                obj.Location = this.Location == null ? null : new MaskItem<R, LocationAliasReference.Mask<R>?>(eval(this.Location.Overall), this.Location.Specific?.Translate(eval));
                obj.External = this.External == null ? null : new MaskItem<R, ExternalAliasReference.Mask<R>?>(eval(this.External.Overall), this.External.Specific?.Translate(eval));
                obj.CreateReferenceToObject = this.CreateReferenceToObject == null ? null : new MaskItem<R, CreateReferenceToObject.Mask<R>?>(eval(this.CreateReferenceToObject.Overall), this.CreateReferenceToObject.Specific?.Translate(eval));
                obj.FindMatchingRefNearAlias = this.FindMatchingRefNearAlias == null ? null : new MaskItem<R, FindMatchingRefNearAlias.Mask<R>?>(eval(this.FindMatchingRefNearAlias.Overall), this.FindMatchingRefNearAlias.Specific?.Translate(eval));
                obj.FindMatchingRefFromEvent = this.FindMatchingRefFromEvent == null ? null : new MaskItem<R, FindMatchingRefFromEvent.Mask<R>?>(eval(this.FindMatchingRefFromEvent.Overall), this.FindMatchingRefFromEvent.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ContainerEntry.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ContainerEntry.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SpectatorOverridePackageList = eval(this.SpectatorOverridePackageList);
                obj.ObserveDeadBodyOverridePackageList = eval(this.ObserveDeadBodyOverridePackageList);
                obj.GuardWarnOverridePackageList = eval(this.GuardWarnOverridePackageList);
                obj.CombatOverridePackageList = eval(this.CombatOverridePackageList);
                obj.DisplayName = eval(this.DisplayName);
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Factions.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (PackageData != null)
                {
                    obj.PackageData = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.PackageData.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (PackageData.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.PackageData.Specific = l;
                        foreach (var item in PackageData.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.VoiceTypes = eval(this.VoiceTypes);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(QuestAlias.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, QuestAlias.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(QuestAlias.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ID ?? true)
                    {
                        fg.AppendItem(ID, "ID");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.AliasIndexToForceIntoWhenFilled ?? true)
                    {
                        fg.AppendItem(AliasIndexToForceIntoWhenFilled, "AliasIndexToForceIntoWhenFilled");
                    }
                    if (printMask?.SpecificLocation ?? true)
                    {
                        fg.AppendItem(SpecificLocation, "SpecificLocation");
                    }
                    if (printMask?.ForcedReference ?? true)
                    {
                        fg.AppendItem(ForcedReference, "ForcedReference");
                    }
                    if (printMask?.UniqueActor ?? true)
                    {
                        fg.AppendItem(UniqueActor, "UniqueActor");
                    }
                    if (printMask?.Location?.Overall ?? true)
                    {
                        Location?.ToString(fg);
                    }
                    if (printMask?.External?.Overall ?? true)
                    {
                        External?.ToString(fg);
                    }
                    if (printMask?.CreateReferenceToObject?.Overall ?? true)
                    {
                        CreateReferenceToObject?.ToString(fg);
                    }
                    if (printMask?.FindMatchingRefNearAlias?.Overall ?? true)
                    {
                        FindMatchingRefNearAlias?.ToString(fg);
                    }
                    if (printMask?.FindMatchingRefFromEvent?.Overall ?? true)
                    {
                        FindMatchingRefFromEvent?.ToString(fg);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items.TryGet(out var ItemsItem))
                    {
                        fg.AppendLine("Items =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.SpectatorOverridePackageList ?? true)
                    {
                        fg.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                    }
                    if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
                    {
                        fg.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                    }
                    if (printMask?.GuardWarnOverridePackageList ?? true)
                    {
                        fg.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                    }
                    if (printMask?.CombatOverridePackageList ?? true)
                    {
                        fg.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                    }
                    if (printMask?.DisplayName ?? true)
                    {
                        fg.AppendItem(DisplayName, "DisplayName");
                    }
                    if ((printMask?.Spells?.Overall ?? true)
                        && Spells.TryGet(out var SpellsItem))
                    {
                        fg.AppendLine("Spells =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SpellsItem.Overall);
                            if (SpellsItem.Specific != null)
                            {
                                foreach (var subItem in SpellsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Factions?.Overall ?? true)
                        && Factions.TryGet(out var FactionsItem))
                    {
                        fg.AppendLine("Factions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(FactionsItem.Overall);
                            if (FactionsItem.Specific != null)
                            {
                                foreach (var subItem in FactionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.PackageData?.Overall ?? true)
                        && PackageData.TryGet(out var PackageDataItem))
                    {
                        fg.AppendLine("PackageData =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PackageDataItem.Overall);
                            if (PackageDataItem.Specific != null)
                            {
                                foreach (var subItem in PackageDataItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.VoiceTypes ?? true)
                    {
                        fg.AppendItem(VoiceTypes, "VoiceTypes");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ID;
            public Exception? Type;
            public Exception? Name;
            public Exception? Flags;
            public Exception? AliasIndexToForceIntoWhenFilled;
            public Exception? SpecificLocation;
            public Exception? ForcedReference;
            public Exception? UniqueActor;
            public MaskItem<Exception?, LocationAliasReference.ErrorMask?>? Location;
            public MaskItem<Exception?, ExternalAliasReference.ErrorMask?>? External;
            public MaskItem<Exception?, CreateReferenceToObject.ErrorMask?>? CreateReferenceToObject;
            public MaskItem<Exception?, FindMatchingRefNearAlias.ErrorMask?>? FindMatchingRefNearAlias;
            public MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>? FindMatchingRefFromEvent;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>? Items;
            public Exception? SpectatorOverridePackageList;
            public Exception? ObserveDeadBodyOverridePackageList;
            public Exception? GuardWarnOverridePackageList;
            public Exception? CombatOverridePackageList;
            public Exception? DisplayName;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Factions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? PackageData;
            public Exception? VoiceTypes;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                QuestAlias_FieldIndex enu = (QuestAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestAlias_FieldIndex.ID:
                        return ID;
                    case QuestAlias_FieldIndex.Type:
                        return Type;
                    case QuestAlias_FieldIndex.Name:
                        return Name;
                    case QuestAlias_FieldIndex.Flags:
                        return Flags;
                    case QuestAlias_FieldIndex.AliasIndexToForceIntoWhenFilled:
                        return AliasIndexToForceIntoWhenFilled;
                    case QuestAlias_FieldIndex.SpecificLocation:
                        return SpecificLocation;
                    case QuestAlias_FieldIndex.ForcedReference:
                        return ForcedReference;
                    case QuestAlias_FieldIndex.UniqueActor:
                        return UniqueActor;
                    case QuestAlias_FieldIndex.Location:
                        return Location;
                    case QuestAlias_FieldIndex.External:
                        return External;
                    case QuestAlias_FieldIndex.CreateReferenceToObject:
                        return CreateReferenceToObject;
                    case QuestAlias_FieldIndex.FindMatchingRefNearAlias:
                        return FindMatchingRefNearAlias;
                    case QuestAlias_FieldIndex.FindMatchingRefFromEvent:
                        return FindMatchingRefFromEvent;
                    case QuestAlias_FieldIndex.Conditions:
                        return Conditions;
                    case QuestAlias_FieldIndex.Keywords:
                        return Keywords;
                    case QuestAlias_FieldIndex.Items:
                        return Items;
                    case QuestAlias_FieldIndex.SpectatorOverridePackageList:
                        return SpectatorOverridePackageList;
                    case QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList:
                        return ObserveDeadBodyOverridePackageList;
                    case QuestAlias_FieldIndex.GuardWarnOverridePackageList:
                        return GuardWarnOverridePackageList;
                    case QuestAlias_FieldIndex.CombatOverridePackageList:
                        return CombatOverridePackageList;
                    case QuestAlias_FieldIndex.DisplayName:
                        return DisplayName;
                    case QuestAlias_FieldIndex.Spells:
                        return Spells;
                    case QuestAlias_FieldIndex.Factions:
                        return Factions;
                    case QuestAlias_FieldIndex.PackageData:
                        return PackageData;
                    case QuestAlias_FieldIndex.VoiceTypes:
                        return VoiceTypes;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                QuestAlias_FieldIndex enu = (QuestAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestAlias_FieldIndex.ID:
                        this.ID = ex;
                        break;
                    case QuestAlias_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case QuestAlias_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case QuestAlias_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case QuestAlias_FieldIndex.AliasIndexToForceIntoWhenFilled:
                        this.AliasIndexToForceIntoWhenFilled = ex;
                        break;
                    case QuestAlias_FieldIndex.SpecificLocation:
                        this.SpecificLocation = ex;
                        break;
                    case QuestAlias_FieldIndex.ForcedReference:
                        this.ForcedReference = ex;
                        break;
                    case QuestAlias_FieldIndex.UniqueActor:
                        this.UniqueActor = ex;
                        break;
                    case QuestAlias_FieldIndex.Location:
                        this.Location = new MaskItem<Exception?, LocationAliasReference.ErrorMask?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.External:
                        this.External = new MaskItem<Exception?, ExternalAliasReference.ErrorMask?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.CreateReferenceToObject:
                        this.CreateReferenceToObject = new MaskItem<Exception?, CreateReferenceToObject.ErrorMask?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.FindMatchingRefNearAlias:
                        this.FindMatchingRefNearAlias = new MaskItem<Exception?, FindMatchingRefNearAlias.ErrorMask?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.FindMatchingRefFromEvent:
                        this.FindMatchingRefFromEvent = new MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = ex;
                        break;
                    case QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = ex;
                        break;
                    case QuestAlias_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = ex;
                        break;
                    case QuestAlias_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = ex;
                        break;
                    case QuestAlias_FieldIndex.DisplayName:
                        this.DisplayName = ex;
                        break;
                    case QuestAlias_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.PackageData:
                        this.PackageData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.VoiceTypes:
                        this.VoiceTypes = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                QuestAlias_FieldIndex enu = (QuestAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestAlias_FieldIndex.ID:
                        this.ID = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.AliasIndexToForceIntoWhenFilled:
                        this.AliasIndexToForceIntoWhenFilled = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.SpecificLocation:
                        this.SpecificLocation = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.ForcedReference:
                        this.ForcedReference = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.UniqueActor:
                        this.UniqueActor = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.Location:
                        this.Location = (MaskItem<Exception?, LocationAliasReference.ErrorMask?>?)obj;
                        break;
                    case QuestAlias_FieldIndex.External:
                        this.External = (MaskItem<Exception?, ExternalAliasReference.ErrorMask?>?)obj;
                        break;
                    case QuestAlias_FieldIndex.CreateReferenceToObject:
                        this.CreateReferenceToObject = (MaskItem<Exception?, CreateReferenceToObject.ErrorMask?>?)obj;
                        break;
                    case QuestAlias_FieldIndex.FindMatchingRefNearAlias:
                        this.FindMatchingRefNearAlias = (MaskItem<Exception?, FindMatchingRefNearAlias.ErrorMask?>?)obj;
                        break;
                    case QuestAlias_FieldIndex.FindMatchingRefFromEvent:
                        this.FindMatchingRefFromEvent = (MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>?)obj;
                        break;
                    case QuestAlias_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.DisplayName:
                        this.DisplayName = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.PackageData:
                        this.PackageData = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.VoiceTypes:
                        this.VoiceTypes = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ID != null) return true;
                if (Type != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (AliasIndexToForceIntoWhenFilled != null) return true;
                if (SpecificLocation != null) return true;
                if (ForcedReference != null) return true;
                if (UniqueActor != null) return true;
                if (Location != null) return true;
                if (External != null) return true;
                if (CreateReferenceToObject != null) return true;
                if (FindMatchingRefNearAlias != null) return true;
                if (FindMatchingRefFromEvent != null) return true;
                if (Conditions != null) return true;
                if (Keywords != null) return true;
                if (Items != null) return true;
                if (SpectatorOverridePackageList != null) return true;
                if (ObserveDeadBodyOverridePackageList != null) return true;
                if (GuardWarnOverridePackageList != null) return true;
                if (CombatOverridePackageList != null) return true;
                if (DisplayName != null) return true;
                if (Spells != null) return true;
                if (Factions != null) return true;
                if (PackageData != null) return true;
                if (VoiceTypes != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(ID, "ID");
                fg.AppendItem(Type, "Type");
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(AliasIndexToForceIntoWhenFilled, "AliasIndexToForceIntoWhenFilled");
                fg.AppendItem(SpecificLocation, "SpecificLocation");
                fg.AppendItem(ForcedReference, "ForcedReference");
                fg.AppendItem(UniqueActor, "UniqueActor");
                Location?.ToString(fg);
                External?.ToString(fg);
                CreateReferenceToObject?.ToString(fg);
                FindMatchingRefNearAlias?.ToString(fg);
                FindMatchingRefFromEvent?.ToString(fg);
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Items.TryGet(out var ItemsItem))
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                fg.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                fg.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                fg.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                fg.AppendItem(DisplayName, "DisplayName");
                if (Spells.TryGet(out var SpellsItem))
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SpellsItem.Overall);
                        if (SpellsItem.Specific != null)
                        {
                            foreach (var subItem in SpellsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Factions.TryGet(out var FactionsItem))
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(FactionsItem.Overall);
                        if (FactionsItem.Specific != null)
                        {
                            foreach (var subItem in FactionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (PackageData.TryGet(out var PackageDataItem))
                {
                    fg.AppendLine("PackageData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PackageDataItem.Overall);
                        if (PackageDataItem.Specific != null)
                        {
                            foreach (var subItem in PackageDataItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(VoiceTypes, "VoiceTypes");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ID = this.ID.Combine(rhs.ID);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.AliasIndexToForceIntoWhenFilled = this.AliasIndexToForceIntoWhenFilled.Combine(rhs.AliasIndexToForceIntoWhenFilled);
                ret.SpecificLocation = this.SpecificLocation.Combine(rhs.SpecificLocation);
                ret.ForcedReference = this.ForcedReference.Combine(rhs.ForcedReference);
                ret.UniqueActor = this.UniqueActor.Combine(rhs.UniqueActor);
                ret.Location = this.Location.Combine(rhs.Location, (l, r) => l.Combine(r));
                ret.External = this.External.Combine(rhs.External, (l, r) => l.Combine(r));
                ret.CreateReferenceToObject = this.CreateReferenceToObject.Combine(rhs.CreateReferenceToObject, (l, r) => l.Combine(r));
                ret.FindMatchingRefNearAlias = this.FindMatchingRefNearAlias.Combine(rhs.FindMatchingRefNearAlias, (l, r) => l.Combine(r));
                ret.FindMatchingRefFromEvent = this.FindMatchingRefFromEvent.Combine(rhs.FindMatchingRefFromEvent, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.SpectatorOverridePackageList = this.SpectatorOverridePackageList.Combine(rhs.SpectatorOverridePackageList);
                ret.ObserveDeadBodyOverridePackageList = this.ObserveDeadBodyOverridePackageList.Combine(rhs.ObserveDeadBodyOverridePackageList);
                ret.GuardWarnOverridePackageList = this.GuardWarnOverridePackageList.Combine(rhs.GuardWarnOverridePackageList);
                ret.CombatOverridePackageList = this.CombatOverridePackageList.Combine(rhs.CombatOverridePackageList);
                ret.DisplayName = this.DisplayName.Combine(rhs.DisplayName);
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Factions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.PackageData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.PackageData?.Overall, rhs.PackageData?.Overall), ExceptionExt.Combine(this.PackageData?.Specific, rhs.PackageData?.Specific));
                ret.VoiceTypes = this.VoiceTypes.Combine(rhs.VoiceTypes);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ID;
            public bool Type;
            public bool Name;
            public bool Flags;
            public bool AliasIndexToForceIntoWhenFilled;
            public bool SpecificLocation;
            public bool ForcedReference;
            public bool UniqueActor;
            public LocationAliasReference.TranslationMask? Location;
            public ExternalAliasReference.TranslationMask? External;
            public CreateReferenceToObject.TranslationMask? CreateReferenceToObject;
            public FindMatchingRefNearAlias.TranslationMask? FindMatchingRefNearAlias;
            public FindMatchingRefFromEvent.TranslationMask? FindMatchingRefFromEvent;
            public Condition.TranslationMask? Conditions;
            public bool Keywords;
            public ContainerEntry.TranslationMask? Items;
            public bool SpectatorOverridePackageList;
            public bool ObserveDeadBodyOverridePackageList;
            public bool GuardWarnOverridePackageList;
            public bool CombatOverridePackageList;
            public bool DisplayName;
            public bool Spells;
            public bool Factions;
            public bool PackageData;
            public bool VoiceTypes;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ID = defaultOn;
                this.Type = defaultOn;
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.AliasIndexToForceIntoWhenFilled = defaultOn;
                this.SpecificLocation = defaultOn;
                this.ForcedReference = defaultOn;
                this.UniqueActor = defaultOn;
                this.Keywords = defaultOn;
                this.SpectatorOverridePackageList = defaultOn;
                this.ObserveDeadBodyOverridePackageList = defaultOn;
                this.GuardWarnOverridePackageList = defaultOn;
                this.CombatOverridePackageList = defaultOn;
                this.DisplayName = defaultOn;
                this.Spells = defaultOn;
                this.Factions = defaultOn;
                this.PackageData = defaultOn;
                this.VoiceTypes = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ID, null));
                ret.Add((Type, null));
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((AliasIndexToForceIntoWhenFilled, null));
                ret.Add((SpecificLocation, null));
                ret.Add((ForcedReference, null));
                ret.Add((UniqueActor, null));
                ret.Add((Location != null ? Location.OnOverall : DefaultOn, Location?.GetCrystal()));
                ret.Add((External != null ? External.OnOverall : DefaultOn, External?.GetCrystal()));
                ret.Add((CreateReferenceToObject != null ? CreateReferenceToObject.OnOverall : DefaultOn, CreateReferenceToObject?.GetCrystal()));
                ret.Add((FindMatchingRefNearAlias != null ? FindMatchingRefNearAlias.OnOverall : DefaultOn, FindMatchingRefNearAlias?.GetCrystal()));
                ret.Add((FindMatchingRefFromEvent != null ? FindMatchingRefFromEvent.OnOverall : DefaultOn, FindMatchingRefFromEvent?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
                ret.Add((SpectatorOverridePackageList, null));
                ret.Add((ObserveDeadBodyOverridePackageList, null));
                ret.Add((GuardWarnOverridePackageList, null));
                ret.Add((CombatOverridePackageList, null));
                ret.Add((DisplayName, null));
                ret.Add((Spells, null));
                ret.Add((Factions, null));
                ret.Add((PackageData, null));
                ret.Add((VoiceTypes, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<FormLinkInformation> ContainedFormLinks => QuestAliasCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestAliasSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => QuestAliasBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((QuestAliasBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static QuestAlias CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new QuestAlias();
            ((QuestAliasSetterCommon)((IQuestAliasGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out QuestAlias item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((QuestAliasSetterCommon)((IQuestAliasGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static QuestAlias GetNew()
        {
            return new QuestAlias();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestAlias :
        IQuestAliasGetter,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IQuestAlias>,
        IFormLinkContainer
    {
        new UInt32 ID { get; set; }
        new QuestAlias.TypeEnum Type { get; set; }
        new String? Name { get; set; }
        new QuestAlias.Flag? Flags { get; set; }
        new Int32? AliasIndexToForceIntoWhenFilled { get; set; }
        new FormLinkNullable<ILocationGetter> SpecificLocation { get; set; }
        new FormLinkNullable<IPlacedGetter> ForcedReference { get; set; }
        new FormLinkNullable<INpcGetter> UniqueActor { get; set; }
        new LocationAliasReference? Location { get; set; }
        new ExternalAliasReference? External { get; set; }
        new CreateReferenceToObject? CreateReferenceToObject { get; set; }
        new FindMatchingRefNearAlias? FindMatchingRefNearAlias { get; set; }
        new FindMatchingRefFromEvent? FindMatchingRefFromEvent { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new ExtendedList<IFormLink<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<ContainerEntry>? Items { get; set; }
        new FormLinkNullable<IFormListGetter> SpectatorOverridePackageList { get; set; }
        new FormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList { get; set; }
        new FormLinkNullable<IFormListGetter> GuardWarnOverridePackageList { get; set; }
        new FormLinkNullable<IFormListGetter> CombatOverridePackageList { get; set; }
        new FormLinkNullable<IMessageGetter> DisplayName { get; set; }
        new ExtendedList<IFormLink<ISpellGetter>> Spells { get; }
        new ExtendedList<IFormLink<IFactionGetter>> Factions { get; }
        new ExtendedList<IFormLink<IPackageGetter>> PackageData { get; }
        new FormLinkNullable<IAliasVoiceTypeGetter> VoiceTypes { get; set; }
    }

    public partial interface IQuestAliasGetter :
        ILoquiObject,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IQuestAliasGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => QuestAlias_Registration.Instance;
        UInt32 ID { get; }
        QuestAlias.TypeEnum Type { get; }
        String? Name { get; }
        QuestAlias.Flag? Flags { get; }
        Int32? AliasIndexToForceIntoWhenFilled { get; }
        FormLinkNullable<ILocationGetter> SpecificLocation { get; }
        FormLinkNullable<IPlacedGetter> ForcedReference { get; }
        FormLinkNullable<INpcGetter> UniqueActor { get; }
        ILocationAliasReferenceGetter? Location { get; }
        IExternalAliasReferenceGetter? External { get; }
        ICreateReferenceToObjectGetter? CreateReferenceToObject { get; }
        IFindMatchingRefNearAliasGetter? FindMatchingRefNearAlias { get; }
        IFindMatchingRefFromEventGetter? FindMatchingRefFromEvent { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; }
        IReadOnlyList<IContainerEntryGetter>? Items { get; }
        FormLinkNullable<IFormListGetter> SpectatorOverridePackageList { get; }
        FormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList { get; }
        FormLinkNullable<IFormListGetter> GuardWarnOverridePackageList { get; }
        FormLinkNullable<IFormListGetter> CombatOverridePackageList { get; }
        FormLinkNullable<IMessageGetter> DisplayName { get; }
        IReadOnlyList<IFormLink<ISpellGetter>> Spells { get; }
        IReadOnlyList<IFormLink<IFactionGetter>> Factions { get; }
        IReadOnlyList<IFormLink<IPackageGetter>> PackageData { get; }
        FormLinkNullable<IAliasVoiceTypeGetter> VoiceTypes { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class QuestAliasMixIn
    {
        public static void Clear(this IQuestAlias item)
        {
            ((QuestAliasSetterCommon)((IQuestAliasGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static QuestAlias.Mask<bool> GetEqualsMask(
            this IQuestAliasGetter item,
            IQuestAliasGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IQuestAliasGetter item,
            string? name = null,
            QuestAlias.Mask<bool>? printMask = null)
        {
            return ((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IQuestAliasGetter item,
            FileGeneration fg,
            string? name = null,
            QuestAlias.Mask<bool>? printMask = null)
        {
            ((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IQuestAliasGetter item,
            IQuestAliasGetter rhs)
        {
            return ((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IQuestAlias lhs,
            IQuestAliasGetter rhs)
        {
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IQuestAlias lhs,
            IQuestAliasGetter rhs,
            QuestAlias.TranslationMask? copyMask = null)
        {
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IQuestAlias lhs,
            IQuestAliasGetter rhs,
            out QuestAlias.ErrorMask errorMask,
            QuestAlias.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = QuestAlias.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IQuestAlias lhs,
            IQuestAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static QuestAlias DeepCopy(
            this IQuestAliasGetter item,
            QuestAlias.TranslationMask? copyMask = null)
        {
            return ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static QuestAlias DeepCopy(
            this IQuestAliasGetter item,
            out QuestAlias.ErrorMask errorMask,
            QuestAlias.TranslationMask? copyMask = null)
        {
            return ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static QuestAlias DeepCopy(
            this IQuestAliasGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IQuestAlias item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((QuestAliasSetterCommon)((IQuestAliasGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum QuestAlias_FieldIndex
    {
        ID = 0,
        Type = 1,
        Name = 2,
        Flags = 3,
        AliasIndexToForceIntoWhenFilled = 4,
        SpecificLocation = 5,
        ForcedReference = 6,
        UniqueActor = 7,
        Location = 8,
        External = 9,
        CreateReferenceToObject = 10,
        FindMatchingRefNearAlias = 11,
        FindMatchingRefFromEvent = 12,
        Conditions = 13,
        Keywords = 14,
        Items = 15,
        SpectatorOverridePackageList = 16,
        ObserveDeadBodyOverridePackageList = 17,
        GuardWarnOverridePackageList = 18,
        CombatOverridePackageList = 19,
        DisplayName = 20,
        Spells = 21,
        Factions = 22,
        PackageData = 23,
        VoiceTypes = 24,
    }
    #endregion

    #region Registration
    public partial class QuestAlias_Registration : ILoquiRegistration
    {
        public static readonly QuestAlias_Registration Instance = new QuestAlias_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 367,
            version: 0);

        public const string GUID = "68186d42-9951-43a6-9668-f21dc08c463c";

        public const ushort AdditionalFieldCount = 25;

        public const ushort FieldCount = 25;

        public static readonly Type MaskType = typeof(QuestAlias.Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestAlias.ErrorMask);

        public static readonly Type ClassType = typeof(QuestAlias);

        public static readonly Type GetterType = typeof(IQuestAliasGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuestAlias);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.QuestAlias";

        public const string Name = "QuestAlias";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.ALST,
                        RecordTypes.ALLS
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(QuestAliasBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class QuestAliasSetterCommon
    {
        public static readonly QuestAliasSetterCommon Instance = new QuestAliasSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestAlias item)
        {
            ClearPartial();
            item.ID = default;
            item.Type = default;
            item.Name = default;
            item.Flags = default;
            item.AliasIndexToForceIntoWhenFilled = default;
            item.SpecificLocation = FormLinkNullable<ILocationGetter>.Null;
            item.ForcedReference = FormLinkNullable<IPlacedGetter>.Null;
            item.UniqueActor = FormLinkNullable<INpcGetter>.Null;
            item.Location = null;
            item.External = null;
            item.CreateReferenceToObject = null;
            item.FindMatchingRefNearAlias = null;
            item.FindMatchingRefFromEvent = null;
            item.Conditions.Clear();
            item.Keywords = null;
            item.Items = null;
            item.SpectatorOverridePackageList = FormLinkNullable<IFormListGetter>.Null;
            item.ObserveDeadBodyOverridePackageList = FormLinkNullable<IFormListGetter>.Null;
            item.GuardWarnOverridePackageList = FormLinkNullable<IFormListGetter>.Null;
            item.CombatOverridePackageList = FormLinkNullable<IFormListGetter>.Null;
            item.DisplayName = FormLinkNullable<IMessageGetter>.Null;
            item.Spells.Clear();
            item.Factions.Clear();
            item.PackageData.Clear();
            item.VoiceTypes = FormLinkNullable<IAliasVoiceTypeGetter>.Null;
        }
        
        #region Mutagen
        public void RemapLinks(IQuestAlias obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.SpecificLocation = obj.SpecificLocation.Relink(mapping);
            obj.ForcedReference = obj.ForcedReference.Relink(mapping);
            obj.UniqueActor = obj.UniqueActor.Relink(mapping);
            obj.Location?.RemapLinks(mapping);
            obj.External?.RemapLinks(mapping);
            obj.CreateReferenceToObject?.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Items?.RemapLinks(mapping);
            obj.SpectatorOverridePackageList = obj.SpectatorOverridePackageList.Relink(mapping);
            obj.ObserveDeadBodyOverridePackageList = obj.ObserveDeadBodyOverridePackageList.Relink(mapping);
            obj.GuardWarnOverridePackageList = obj.GuardWarnOverridePackageList.Relink(mapping);
            obj.CombatOverridePackageList = obj.CombatOverridePackageList.Relink(mapping);
            obj.DisplayName = obj.DisplayName.Relink(mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.PackageData.RemapLinks(mapping);
            obj.VoiceTypes = obj.VoiceTypes.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IQuestAlias item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: QuestAliasBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: QuestAliasBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class QuestAliasCommon
    {
        public static readonly QuestAliasCommon Instance = new QuestAliasCommon();

        public QuestAlias.Mask<bool> GetEqualsMask(
            IQuestAliasGetter item,
            IQuestAliasGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new QuestAlias.Mask<bool>(false);
            ((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestAliasGetter item,
            IQuestAliasGetter rhs,
            QuestAlias.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ID = item.ID == rhs.ID;
            ret.Type = item.Type == rhs.Type;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.AliasIndexToForceIntoWhenFilled = item.AliasIndexToForceIntoWhenFilled == rhs.AliasIndexToForceIntoWhenFilled;
            ret.SpecificLocation = item.SpecificLocation.Equals(rhs.SpecificLocation);
            ret.ForcedReference = item.ForcedReference.Equals(rhs.ForcedReference);
            ret.UniqueActor = item.UniqueActor.Equals(rhs.UniqueActor);
            ret.Location = EqualsMaskHelper.EqualsHelper(
                item.Location,
                rhs.Location,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.External = EqualsMaskHelper.EqualsHelper(
                item.External,
                rhs.External,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.CreateReferenceToObject = EqualsMaskHelper.EqualsHelper(
                item.CreateReferenceToObject,
                rhs.CreateReferenceToObject,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FindMatchingRefNearAlias = EqualsMaskHelper.EqualsHelper(
                item.FindMatchingRefNearAlias,
                rhs.FindMatchingRefNearAlias,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FindMatchingRefFromEvent = EqualsMaskHelper.EqualsHelper(
                item.FindMatchingRefFromEvent,
                rhs.FindMatchingRefFromEvent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SpectatorOverridePackageList = item.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList);
            ret.ObserveDeadBodyOverridePackageList = item.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList);
            ret.GuardWarnOverridePackageList = item.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList);
            ret.CombatOverridePackageList = item.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList);
            ret.DisplayName = item.DisplayName.Equals(rhs.DisplayName);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (l, r) => object.Equals(l, r),
                include);
            ret.PackageData = item.PackageData.CollectionEqualsHelper(
                rhs.PackageData,
                (l, r) => object.Equals(l, r),
                include);
            ret.VoiceTypes = item.VoiceTypes.Equals(rhs.VoiceTypes);
        }
        
        public string ToString(
            IQuestAliasGetter item,
            string? name = null,
            QuestAlias.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IQuestAliasGetter item,
            FileGeneration fg,
            string? name = null,
            QuestAlias.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"QuestAlias =>");
            }
            else
            {
                fg.AppendLine($"{name} (QuestAlias) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IQuestAliasGetter item,
            FileGeneration fg,
            QuestAlias.Mask<bool>? printMask = null)
        {
            if (printMask?.ID ?? true)
            {
                fg.AppendItem(item.ID, "ID");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.AliasIndexToForceIntoWhenFilled ?? true)
                && item.AliasIndexToForceIntoWhenFilled.TryGet(out var AliasIndexToForceIntoWhenFilledItem))
            {
                fg.AppendItem(AliasIndexToForceIntoWhenFilledItem, "AliasIndexToForceIntoWhenFilled");
            }
            if (printMask?.SpecificLocation ?? true)
            {
                fg.AppendItem(item.SpecificLocation.FormKeyNullable, "SpecificLocation");
            }
            if (printMask?.ForcedReference ?? true)
            {
                fg.AppendItem(item.ForcedReference.FormKeyNullable, "ForcedReference");
            }
            if (printMask?.UniqueActor ?? true)
            {
                fg.AppendItem(item.UniqueActor.FormKeyNullable, "UniqueActor");
            }
            if ((printMask?.Location?.Overall ?? true)
                && item.Location.TryGet(out var LocationItem))
            {
                LocationItem?.ToString(fg, "Location");
            }
            if ((printMask?.External?.Overall ?? true)
                && item.External.TryGet(out var ExternalItem))
            {
                ExternalItem?.ToString(fg, "External");
            }
            if ((printMask?.CreateReferenceToObject?.Overall ?? true)
                && item.CreateReferenceToObject.TryGet(out var CreateReferenceToObjectItem))
            {
                CreateReferenceToObjectItem?.ToString(fg, "CreateReferenceToObject");
            }
            if ((printMask?.FindMatchingRefNearAlias?.Overall ?? true)
                && item.FindMatchingRefNearAlias.TryGet(out var FindMatchingRefNearAliasItem))
            {
                FindMatchingRefNearAliasItem?.ToString(fg, "FindMatchingRefNearAlias");
            }
            if ((printMask?.FindMatchingRefFromEvent?.Overall ?? true)
                && item.FindMatchingRefFromEvent.TryGet(out var FindMatchingRefFromEventItem))
            {
                FindMatchingRefFromEventItem?.ToString(fg, "FindMatchingRefFromEvent");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Items?.Overall ?? true)
                && item.Items.TryGet(out var ItemsItem))
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ItemsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.SpectatorOverridePackageList ?? true)
            {
                fg.AppendItem(item.SpectatorOverridePackageList.FormKeyNullable, "SpectatorOverridePackageList");
            }
            if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
            {
                fg.AppendItem(item.ObserveDeadBodyOverridePackageList.FormKeyNullable, "ObserveDeadBodyOverridePackageList");
            }
            if (printMask?.GuardWarnOverridePackageList ?? true)
            {
                fg.AppendItem(item.GuardWarnOverridePackageList.FormKeyNullable, "GuardWarnOverridePackageList");
            }
            if (printMask?.CombatOverridePackageList ?? true)
            {
                fg.AppendItem(item.CombatOverridePackageList.FormKeyNullable, "CombatOverridePackageList");
            }
            if (printMask?.DisplayName ?? true)
            {
                fg.AppendItem(item.DisplayName.FormKeyNullable, "DisplayName");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Spells)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                fg.AppendLine("Factions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Factions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.PackageData?.Overall ?? true)
            {
                fg.AppendLine("PackageData =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.PackageData)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.VoiceTypes ?? true)
            {
                fg.AppendItem(item.VoiceTypes.FormKeyNullable, "VoiceTypes");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestAliasGetter? lhs,
            IQuestAliasGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.ID != rhs.ID) return false;
            if (lhs.Type != rhs.Type) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.AliasIndexToForceIntoWhenFilled != rhs.AliasIndexToForceIntoWhenFilled) return false;
            if (!lhs.SpecificLocation.Equals(rhs.SpecificLocation)) return false;
            if (!lhs.ForcedReference.Equals(rhs.ForcedReference)) return false;
            if (!lhs.UniqueActor.Equals(rhs.UniqueActor)) return false;
            if (!object.Equals(lhs.Location, rhs.Location)) return false;
            if (!object.Equals(lhs.External, rhs.External)) return false;
            if (!object.Equals(lhs.CreateReferenceToObject, rhs.CreateReferenceToObject)) return false;
            if (!object.Equals(lhs.FindMatchingRefNearAlias, rhs.FindMatchingRefNearAlias)) return false;
            if (!object.Equals(lhs.FindMatchingRefFromEvent, rhs.FindMatchingRefFromEvent)) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            if (!lhs.Items.SequenceEqualNullable(rhs.Items)) return false;
            if (!lhs.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList)) return false;
            if (!lhs.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList)) return false;
            if (!lhs.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList)) return false;
            if (!lhs.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList)) return false;
            if (!lhs.DisplayName.Equals(rhs.DisplayName)) return false;
            if (!lhs.Spells.SequenceEqualNullable(rhs.Spells)) return false;
            if (!lhs.Factions.SequenceEqualNullable(rhs.Factions)) return false;
            if (!lhs.PackageData.SequenceEqualNullable(rhs.PackageData)) return false;
            if (!lhs.VoiceTypes.Equals(rhs.VoiceTypes)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IQuestAliasGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ID);
            hash.Add(item.Type);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            if (item.AliasIndexToForceIntoWhenFilled.TryGet(out var AliasIndexToForceIntoWhenFilleditem))
            {
                hash.Add(AliasIndexToForceIntoWhenFilleditem);
            }
            hash.Add(item.SpecificLocation);
            hash.Add(item.ForcedReference);
            hash.Add(item.UniqueActor);
            if (item.Location.TryGet(out var Locationitem))
            {
                hash.Add(Locationitem);
            }
            if (item.External.TryGet(out var Externalitem))
            {
                hash.Add(Externalitem);
            }
            if (item.CreateReferenceToObject.TryGet(out var CreateReferenceToObjectitem))
            {
                hash.Add(CreateReferenceToObjectitem);
            }
            if (item.FindMatchingRefNearAlias.TryGet(out var FindMatchingRefNearAliasitem))
            {
                hash.Add(FindMatchingRefNearAliasitem);
            }
            if (item.FindMatchingRefFromEvent.TryGet(out var FindMatchingRefFromEventitem))
            {
                hash.Add(FindMatchingRefFromEventitem);
            }
            hash.Add(item.Conditions);
            hash.Add(item.Keywords);
            hash.Add(item.Items);
            hash.Add(item.SpectatorOverridePackageList);
            hash.Add(item.ObserveDeadBodyOverridePackageList);
            hash.Add(item.GuardWarnOverridePackageList);
            hash.Add(item.CombatOverridePackageList);
            hash.Add(item.DisplayName);
            hash.Add(item.Spells);
            hash.Add(item.Factions);
            hash.Add(item.PackageData);
            hash.Add(item.VoiceTypes);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return QuestAlias.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IQuestAliasGetter obj)
        {
            if (obj.SpecificLocation.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.SpecificLocation);
            }
            if (obj.ForcedReference.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ForcedReference);
            }
            if (obj.UniqueActor.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.UniqueActor);
            }
            if (obj.Location.TryGet(out var LocationItems))
            {
                foreach (var item in LocationItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.External.TryGet(out var ExternalItems))
            {
                foreach (var item in ExternalItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.CreateReferenceToObject.TryGet(out var CreateReferenceToObjectItems))
            {
                foreach (var item in CreateReferenceToObjectItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Items.TryGet(out var ItemsItem))
            {
                foreach (var item in ItemsItem.WhereCastable<IContainerEntryGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.SpectatorOverridePackageList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.SpectatorOverridePackageList);
            }
            if (obj.ObserveDeadBodyOverridePackageList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ObserveDeadBodyOverridePackageList);
            }
            if (obj.GuardWarnOverridePackageList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.GuardWarnOverridePackageList);
            }
            if (obj.CombatOverridePackageList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.CombatOverridePackageList);
            }
            if (obj.DisplayName.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.DisplayName);
            }
            foreach (var item in obj.Spells)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Factions)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.PackageData)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.VoiceTypes.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.VoiceTypes);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class QuestAliasSetterTranslationCommon
    {
        public static readonly QuestAliasSetterTranslationCommon Instance = new QuestAliasSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IQuestAlias item,
            IQuestAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.ID) ?? true))
            {
                item.ID = rhs.ID;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.AliasIndexToForceIntoWhenFilled) ?? true))
            {
                item.AliasIndexToForceIntoWhenFilled = rhs.AliasIndexToForceIntoWhenFilled;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.SpecificLocation) ?? true))
            {
                item.SpecificLocation = new FormLinkNullable<ILocationGetter>(rhs.SpecificLocation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.ForcedReference) ?? true))
            {
                item.ForcedReference = new FormLinkNullable<IPlacedGetter>(rhs.ForcedReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.UniqueActor) ?? true))
            {
                item.UniqueActor = new FormLinkNullable<INpcGetter>(rhs.UniqueActor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Location) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Location);
                try
                {
                    if(rhs.Location.TryGet(out var rhsLocation))
                    {
                        item.Location = rhsLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestAlias_FieldIndex.Location));
                    }
                    else
                    {
                        item.Location = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.External) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.External);
                try
                {
                    if(rhs.External.TryGet(out var rhsExternal))
                    {
                        item.External = rhsExternal.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestAlias_FieldIndex.External));
                    }
                    else
                    {
                        item.External = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.CreateReferenceToObject) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.CreateReferenceToObject);
                try
                {
                    if(rhs.CreateReferenceToObject.TryGet(out var rhsCreateReferenceToObject))
                    {
                        item.CreateReferenceToObject = rhsCreateReferenceToObject.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestAlias_FieldIndex.CreateReferenceToObject));
                    }
                    else
                    {
                        item.CreateReferenceToObject = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.FindMatchingRefNearAlias) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.FindMatchingRefNearAlias);
                try
                {
                    if(rhs.FindMatchingRefNearAlias.TryGet(out var rhsFindMatchingRefNearAlias))
                    {
                        item.FindMatchingRefNearAlias = rhsFindMatchingRefNearAlias.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestAlias_FieldIndex.FindMatchingRefNearAlias));
                    }
                    else
                    {
                        item.FindMatchingRefNearAlias = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.FindMatchingRefFromEvent) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.FindMatchingRefFromEvent);
                try
                {
                    if(rhs.FindMatchingRefFromEvent.TryGet(out var rhsFindMatchingRefFromEvent))
                    {
                        item.FindMatchingRefFromEvent = rhsFindMatchingRefFromEvent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestAlias_FieldIndex.FindMatchingRefFromEvent));
                    }
                    else
                    {
                        item.FindMatchingRefFromEvent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Items);
                try
                {
                    if ((rhs.Items != null))
                    {
                        item.Items = 
                            rhs.Items
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ContainerEntry>();
                    }
                    else
                    {
                        item.Items = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.SpectatorOverridePackageList) ?? true))
            {
                item.SpectatorOverridePackageList = new FormLinkNullable<IFormListGetter>(rhs.SpectatorOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList) ?? true))
            {
                item.ObserveDeadBodyOverridePackageList = new FormLinkNullable<IFormListGetter>(rhs.ObserveDeadBodyOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.GuardWarnOverridePackageList) ?? true))
            {
                item.GuardWarnOverridePackageList = new FormLinkNullable<IFormListGetter>(rhs.GuardWarnOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.CombatOverridePackageList) ?? true))
            {
                item.CombatOverridePackageList = new FormLinkNullable<IFormListGetter>(rhs.CombatOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.DisplayName) ?? true))
            {
                item.DisplayName = new FormLinkNullable<IMessageGetter>(rhs.DisplayName.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Spells);
                try
                {
                    item.Spells.SetTo(
                        rhs.Spells
                        .Select(r => (IFormLink<ISpellGetter>)new FormLink<ISpellGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Factions);
                try
                {
                    item.Factions.SetTo(
                        rhs.Factions
                        .Select(r => (IFormLink<IFactionGetter>)new FormLink<IFactionGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.PackageData) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.PackageData);
                try
                {
                    item.PackageData.SetTo(
                        rhs.PackageData
                        .Select(r => (IFormLink<IPackageGetter>)new FormLink<IPackageGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.VoiceTypes) ?? true))
            {
                item.VoiceTypes = new FormLinkNullable<IAliasVoiceTypeGetter>(rhs.VoiceTypes.FormKeyNullable);
            }
        }
        
        #endregion
        
        public QuestAlias DeepCopy(
            IQuestAliasGetter item,
            QuestAlias.TranslationMask? copyMask = null)
        {
            QuestAlias ret = (QuestAlias)((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public QuestAlias DeepCopy(
            IQuestAliasGetter item,
            out QuestAlias.ErrorMask errorMask,
            QuestAlias.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestAlias ret = (QuestAlias)((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = QuestAlias.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public QuestAlias DeepCopy(
            IQuestAliasGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            QuestAlias ret = (QuestAlias)((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class QuestAlias
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestAlias_Registration.Instance;
        public static QuestAlias_Registration Registration => QuestAlias_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => QuestAliasCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return QuestAliasSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => QuestAliasSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IQuestAliasGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IQuestAliasGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IQuestAliasGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class QuestAliasBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static QuestAliasBinaryWriteTranslation Instance = new QuestAliasBinaryWriteTranslation();

        static partial void WriteBinaryIDParseCustom(
            MutagenWriter writer,
            IQuestAliasGetter item);

        public static void WriteBinaryIDParse(
            MutagenWriter writer,
            IQuestAliasGetter item)
        {
            WriteBinaryIDParseCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IQuestAliasGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IQuestAliasGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryEndCustom(
            MutagenWriter writer,
            IQuestAliasGetter item);

        public static void WriteBinaryEnd(
            MutagenWriter writer,
            IQuestAliasGetter item)
        {
            WriteBinaryEndCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IQuestAliasGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IQuestAliasGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            QuestAliasBinaryWriteTranslation.WriteBinaryIDParse(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ALID),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<QuestAlias.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AliasIndexToForceIntoWhenFilled,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ALFI));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpecificLocation,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ALFL));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ForcedReference,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ALFR));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UniqueActor,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ALUA));
            if (item.Location.TryGet(out var LocationItem))
            {
                ((LocationAliasReferenceBinaryWriteTranslation)((IBinaryItem)LocationItem).BinaryWriteTranslator).Write(
                    item: LocationItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.External.TryGet(out var ExternalItem))
            {
                ((ExternalAliasReferenceBinaryWriteTranslation)((IBinaryItem)ExternalItem).BinaryWriteTranslator).Write(
                    item: ExternalItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.CreateReferenceToObject.TryGet(out var CreateReferenceToObjectItem))
            {
                ((CreateReferenceToObjectBinaryWriteTranslation)((IBinaryItem)CreateReferenceToObjectItem).BinaryWriteTranslator).Write(
                    item: CreateReferenceToObjectItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.FindMatchingRefNearAlias.TryGet(out var FindMatchingRefNearAliasItem))
            {
                ((FindMatchingRefNearAliasBinaryWriteTranslation)((IBinaryItem)FindMatchingRefNearAliasItem).BinaryWriteTranslator).Write(
                    item: FindMatchingRefNearAliasItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.FindMatchingRefFromEvent.TryGet(out var FindMatchingRefFromEventItem))
            {
                ((FindMatchingRefFromEventBinaryWriteTranslation)((IBinaryItem)FindMatchingRefFromEventItem).BinaryWriteTranslator).Write(
                    item: FindMatchingRefFromEventItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            QuestAliasBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLink<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IContainerEntryGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Items,
                counterType: RecordTypes.COCT,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IContainerEntryGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((ContainerEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpectatorOverridePackageList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SPOR));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObserveDeadBodyOverridePackageList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.OCOR));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GuardWarnOverridePackageList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.GWOR));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatOverridePackageList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ECOR));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DisplayName,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ALDN));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ISpellGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                transl: (MutagenWriter subWriter, IFormLink<ISpellGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.ALSP));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IFactionGetter>>.Instance.Write(
                writer: writer,
                items: item.Factions,
                transl: (MutagenWriter subWriter, IFormLink<IFactionGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.ALFC));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.PackageData,
                transl: (MutagenWriter subWriter, IFormLink<IPackageGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.ALPC));
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VoiceTypes,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.VTCK));
            QuestAliasBinaryWriteTranslation.WriteBinaryEnd(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IQuestAliasGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IQuestAliasGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class QuestAliasBinaryCreateTranslation
    {
        public readonly static QuestAliasBinaryCreateTranslation Instance = new QuestAliasBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IQuestAlias item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IQuestAlias item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ALST:
                case RecordTypeInts.ALLS:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)QuestAlias_FieldIndex.ID) return ParseResult.Stop;
                    QuestAliasBinaryCreateTranslation.FillBinaryIDParseCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return lastParsed;
                }
                case RecordTypeInts.ALID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)QuestAlias_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<QuestAlias.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)QuestAlias_FieldIndex.Flags;
                }
                case RecordTypeInts.ALFI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AliasIndexToForceIntoWhenFilled = frame.ReadInt32();
                    return (int)QuestAlias_FieldIndex.AliasIndexToForceIntoWhenFilled;
                }
                case RecordTypeInts.ALFL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpecificLocation = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)QuestAlias_FieldIndex.SpecificLocation;
                }
                case RecordTypeInts.ALFR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ForcedReference = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)QuestAlias_FieldIndex.ForcedReference;
                }
                case RecordTypeInts.ALUA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UniqueActor = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)QuestAlias_FieldIndex.UniqueActor;
                }
                case RecordTypeInts.ALFA:
                case RecordTypeInts.KNAM:
                case RecordTypeInts.ALRT:
                {
                    item.Location = Mutagen.Bethesda.Fallout4.LocationAliasReference.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)QuestAlias_FieldIndex.Location;
                }
                case RecordTypeInts.ALEQ:
                case RecordTypeInts.ALEA:
                {
                    item.External = Mutagen.Bethesda.Fallout4.ExternalAliasReference.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)QuestAlias_FieldIndex.External;
                }
                case RecordTypeInts.ALCO:
                {
                    item.CreateReferenceToObject = Mutagen.Bethesda.Fallout4.CreateReferenceToObject.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)QuestAlias_FieldIndex.CreateReferenceToObject;
                }
                case RecordTypeInts.ALNA:
                case RecordTypeInts.ALNT:
                {
                    item.FindMatchingRefNearAlias = Mutagen.Bethesda.Fallout4.FindMatchingRefNearAlias.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)QuestAlias_FieldIndex.FindMatchingRefNearAlias;
                }
                case RecordTypeInts.ALFE:
                case RecordTypeInts.ALFD:
                {
                    item.FindMatchingRefFromEvent = Mutagen.Bethesda.Fallout4.FindMatchingRefFromEvent.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)QuestAlias_FieldIndex.FindMatchingRefFromEvent;
                }
                case RecordTypeInts.CTDA:
                {
                    QuestAliasBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)QuestAlias_FieldIndex.Conditions;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.Parse(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<IKeywordGetter>>();
                    return (int)QuestAlias_FieldIndex.Keywords;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    item.Items = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ContainerEntry>.Instance.ParsePerItem(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.COCT,
                            triggeringRecord: RecordTypes.CNTO,
                            recordTypeConverter: recordTypeConverter,
                            transl: ContainerEntry.TryCreateFromBinary)
                        .CastExtendedList<ContainerEntry>();
                    return (int)QuestAlias_FieldIndex.Items;
                }
                case RecordTypeInts.SPOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpectatorOverridePackageList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)QuestAlias_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObserveDeadBodyOverridePackageList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GuardWarnOverridePackageList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)QuestAlias_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatOverridePackageList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)QuestAlias_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.ALDN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DisplayName = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)QuestAlias_FieldIndex.DisplayName;
                }
                case RecordTypeInts.ALSP:
                {
                    item.Spells.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ISpellGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.ALSP),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)QuestAlias_FieldIndex.Spells;
                }
                case RecordTypeInts.ALFC:
                {
                    item.Factions.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IFactionGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.ALFC),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)QuestAlias_FieldIndex.Factions;
                }
                case RecordTypeInts.ALPC:
                {
                    item.PackageData.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IPackageGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.ALPC),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)QuestAlias_FieldIndex.PackageData;
                }
                case RecordTypeInts.VTCK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VoiceTypes = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)QuestAlias_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.ALED:
                {
                    QuestAliasBinaryCreateTranslation.FillBinaryEndCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return lastParsed;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        static partial void FillBinaryIDParseCustom(
            MutagenFrame frame,
            IQuestAlias item);

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IQuestAlias item);

        static partial void FillBinaryEndCustom(
            MutagenFrame frame,
            IQuestAlias item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class QuestAliasBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IQuestAliasGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((QuestAliasBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class QuestAliasBinaryOverlay :
        BinaryOverlay,
        IQuestAliasGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestAlias_Registration.Instance;
        public static QuestAlias_Registration Registration => QuestAlias_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => QuestAliasCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => QuestAliasSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IQuestAliasGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IQuestAliasGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IQuestAliasGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => QuestAliasCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => QuestAliasBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((QuestAliasBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region IDParse
        partial void IDParseCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public QuestAlias.Flag? Flags => _FlagsLocation.HasValue ? (QuestAlias.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(QuestAlias.Flag?);
        #endregion
        #region AliasIndexToForceIntoWhenFilled
        private int? _AliasIndexToForceIntoWhenFilledLocation;
        public Int32? AliasIndexToForceIntoWhenFilled => _AliasIndexToForceIntoWhenFilledLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AliasIndexToForceIntoWhenFilledLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region SpecificLocation
        private int? _SpecificLocationLocation;
        public FormLinkNullable<ILocationGetter> SpecificLocation => _SpecificLocationLocation.HasValue ? new FormLinkNullable<ILocationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SpecificLocationLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationGetter>.Null;
        #endregion
        #region ForcedReference
        private int? _ForcedReferenceLocation;
        public FormLinkNullable<IPlacedGetter> ForcedReference => _ForcedReferenceLocation.HasValue ? new FormLinkNullable<IPlacedGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ForcedReferenceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedGetter>.Null;
        #endregion
        #region UniqueActor
        private int? _UniqueActorLocation;
        public FormLinkNullable<INpcGetter> UniqueActor => _UniqueActorLocation.HasValue ? new FormLinkNullable<INpcGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _UniqueActorLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<INpcGetter>.Null;
        #endregion
        public ILocationAliasReferenceGetter? Location { get; private set; }
        public IExternalAliasReferenceGetter? External { get; private set; }
        public ICreateReferenceToObjectGetter? CreateReferenceToObject { get; private set; }
        public IFindMatchingRefNearAliasGetter? FindMatchingRefNearAlias { get; private set; }
        public IFindMatchingRefFromEventGetter? FindMatchingRefFromEvent { get; private set; }
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IContainerEntryGetter>? Items { get; private set; }
        #region SpectatorOverridePackageList
        private int? _SpectatorOverridePackageListLocation;
        public FormLinkNullable<IFormListGetter> SpectatorOverridePackageList => _SpectatorOverridePackageListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SpectatorOverridePackageListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region ObserveDeadBodyOverridePackageList
        private int? _ObserveDeadBodyOverridePackageListLocation;
        public FormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList => _ObserveDeadBodyOverridePackageListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ObserveDeadBodyOverridePackageListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region GuardWarnOverridePackageList
        private int? _GuardWarnOverridePackageListLocation;
        public FormLinkNullable<IFormListGetter> GuardWarnOverridePackageList => _GuardWarnOverridePackageListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _GuardWarnOverridePackageListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region CombatOverridePackageList
        private int? _CombatOverridePackageListLocation;
        public FormLinkNullable<IFormListGetter> CombatOverridePackageList => _CombatOverridePackageListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CombatOverridePackageListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region DisplayName
        private int? _DisplayNameLocation;
        public FormLinkNullable<IMessageGetter> DisplayName => _DisplayNameLocation.HasValue ? new FormLinkNullable<IMessageGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _DisplayNameLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IMessageGetter>.Null;
        #endregion
        public IReadOnlyList<IFormLink<ISpellGetter>> Spells { get; private set; } = ListExt.Empty<IFormLink<ISpellGetter>>();
        public IReadOnlyList<IFormLink<IFactionGetter>> Factions { get; private set; } = ListExt.Empty<IFormLink<IFactionGetter>>();
        public IReadOnlyList<IFormLink<IPackageGetter>> PackageData { get; private set; } = ListExt.Empty<IFormLink<IPackageGetter>>();
        #region VoiceTypes
        private int? _VoiceTypesLocation;
        public FormLinkNullable<IAliasVoiceTypeGetter> VoiceTypes => _VoiceTypesLocation.HasValue ? new FormLinkNullable<IAliasVoiceTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _VoiceTypesLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IAliasVoiceTypeGetter>.Null;
        #endregion
        #region End
        partial void EndCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected QuestAliasBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static QuestAliasBinaryOverlay QuestAliasFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new QuestAliasBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static QuestAliasBinaryOverlay QuestAliasFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return QuestAliasFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ALST:
                case RecordTypeInts.ALLS:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)QuestAlias_FieldIndex.ID) return ParseResult.Stop;
                    IDParseCustomParse(
                        stream,
                        offset);
                    return lastParsed;
                }
                case RecordTypeInts.ALID:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.Flags;
                }
                case RecordTypeInts.ALFI:
                {
                    _AliasIndexToForceIntoWhenFilledLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.AliasIndexToForceIntoWhenFilled;
                }
                case RecordTypeInts.ALFL:
                {
                    _SpecificLocationLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.SpecificLocation;
                }
                case RecordTypeInts.ALFR:
                {
                    _ForcedReferenceLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.ForcedReference;
                }
                case RecordTypeInts.ALUA:
                {
                    _UniqueActorLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.UniqueActor;
                }
                case RecordTypeInts.ALFA:
                case RecordTypeInts.KNAM:
                case RecordTypeInts.ALRT:
                {
                    this.Location = LocationAliasReferenceBinaryOverlay.LocationAliasReferenceFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)QuestAlias_FieldIndex.Location;
                }
                case RecordTypeInts.ALEQ:
                case RecordTypeInts.ALEA:
                {
                    this.External = ExternalAliasReferenceBinaryOverlay.ExternalAliasReferenceFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)QuestAlias_FieldIndex.External;
                }
                case RecordTypeInts.ALCO:
                {
                    this.CreateReferenceToObject = CreateReferenceToObjectBinaryOverlay.CreateReferenceToObjectFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)QuestAlias_FieldIndex.CreateReferenceToObject;
                }
                case RecordTypeInts.ALNA:
                case RecordTypeInts.ALNT:
                {
                    this.FindMatchingRefNearAlias = FindMatchingRefNearAliasBinaryOverlay.FindMatchingRefNearAliasFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)QuestAlias_FieldIndex.FindMatchingRefNearAlias;
                }
                case RecordTypeInts.ALFE:
                case RecordTypeInts.ALFD:
                {
                    this.FindMatchingRefFromEvent = FindMatchingRefFromEventBinaryOverlay.FindMatchingRefFromEventFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)QuestAlias_FieldIndex.FindMatchingRefFromEvent;
                }
                case RecordTypeInts.CTDA:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)QuestAlias_FieldIndex.Conditions;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLink<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)QuestAlias_FieldIndex.Keywords;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    this.Items = BinaryOverlayList.FactoryByCountPerItem<ContainerEntryBinaryOverlay>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        subrecordType: RecordTypes.CNTO,
                        countType: RecordTypes.COCT,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => ContainerEntryBinaryOverlay.ContainerEntryFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)QuestAlias_FieldIndex.Items;
                }
                case RecordTypeInts.SPOR:
                {
                    _SpectatorOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    _ObserveDeadBodyOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    _GuardWarnOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    _CombatOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.ALDN:
                {
                    _DisplayNameLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.DisplayName;
                }
                case RecordTypeInts.ALSP:
                {
                    this.Spells = BinaryOverlayList.FactoryByArray<IFormLink<ISpellGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<ISpellGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)QuestAlias_FieldIndex.Spells;
                }
                case RecordTypeInts.ALFC:
                {
                    this.Factions = BinaryOverlayList.FactoryByArray<IFormLink<IFactionGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IFactionGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)QuestAlias_FieldIndex.Factions;
                }
                case RecordTypeInts.ALPC:
                {
                    this.PackageData = BinaryOverlayList.FactoryByArray<IFormLink<IPackageGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IPackageGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)QuestAlias_FieldIndex.PackageData;
                }
                case RecordTypeInts.VTCK:
                {
                    _VoiceTypesLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.ALED:
                {
                    EndCustomParse(
                        stream,
                        offset);
                    return lastParsed;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            QuestAliasMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IQuestAliasGetter rhs)) return false;
            return ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IQuestAliasGetter? obj)
        {
            return ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

