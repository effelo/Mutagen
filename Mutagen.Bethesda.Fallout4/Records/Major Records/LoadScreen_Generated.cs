/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class LoadScreen :
        Fallout4MajorRecord,
        ILoadScreenInternal,
        ILoquiObjectSetter<LoadScreen>,
        IEquatable<ILoadScreenGetter>
    {
        #region Ctor
        protected LoadScreen()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Icons? _Icons;
        public Icons? Icons
        {
            get => _Icons;
            set => _Icons = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIconsGetter? ILoadScreenGetter.Icons => this.Icons;
        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter ILoadScreenGetter.Description => this.Description;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> ILoadScreenGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region LoadingScreenNif
        public FormLink<IStaticGetter> LoadingScreenNif { get; set; } = new FormLink<IStaticGetter>();
        #endregion
        #region InitialScale
        public Single? InitialScale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ILoadScreenGetter.InitialScale => this.InitialScale;
        #endregion
        #region InitialRotation
        public P3Int16? InitialRotation { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P3Int16? ILoadScreenGetter.InitialRotation => this.InitialRotation;
        #endregion
        #region RotationOffsetConstraints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int16MinMax? _RotationOffsetConstraints;
        public Int16MinMax? RotationOffsetConstraints
        {
            get => _RotationOffsetConstraints;
            set => _RotationOffsetConstraints = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IInt16MinMaxGetter? ILoadScreenGetter.RotationOffsetConstraints => this.RotationOffsetConstraints;
        #endregion
        #region InitialTranslationOffset
        public P3Float? InitialTranslationOffset { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P3Float? ILoadScreenGetter.InitialTranslationOffset => this.InitialTranslationOffset;
        #endregion
        #region CameraPath
        public String? CameraPath { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ILoadScreenGetter.CameraPath => this.CameraPath;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LoadScreenMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILoadScreenGetter rhs)) return false;
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILoadScreenGetter? obj)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(initialValue, new Icons.Mask<TItem>(initialValue));
                this.Description = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.LoadingScreenNif = initialValue;
                this.InitialScale = initialValue;
                this.InitialRotation = initialValue;
                this.RotationOffsetConstraints = new MaskItem<TItem, Int16MinMax.Mask<TItem>?>(initialValue, new Int16MinMax.Mask<TItem>(initialValue));
                this.InitialTranslationOffset = initialValue;
                this.CameraPath = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Icons,
                TItem Description,
                TItem Conditions,
                TItem LoadingScreenNif,
                TItem InitialScale,
                TItem InitialRotation,
                TItem RotationOffsetConstraints,
                TItem InitialTranslationOffset,
                TItem CameraPath)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(Icons, new Icons.Mask<TItem>(Icons));
                this.Description = Description;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.LoadingScreenNif = LoadingScreenNif;
                this.InitialScale = InitialScale;
                this.InitialRotation = InitialRotation;
                this.RotationOffsetConstraints = new MaskItem<TItem, Int16MinMax.Mask<TItem>?>(RotationOffsetConstraints, new Int16MinMax.Mask<TItem>(RotationOffsetConstraints));
                this.InitialTranslationOffset = InitialTranslationOffset;
                this.CameraPath = CameraPath;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Icons.Mask<TItem>?>? Icons { get; set; }
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem LoadingScreenNif;
            public TItem InitialScale;
            public TItem InitialRotation;
            public MaskItem<TItem, Int16MinMax.Mask<TItem>?>? RotationOffsetConstraints { get; set; }
            public TItem InitialTranslationOffset;
            public TItem CameraPath;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Icons, rhs.Icons)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.LoadingScreenNif, rhs.LoadingScreenNif)) return false;
                if (!object.Equals(this.InitialScale, rhs.InitialScale)) return false;
                if (!object.Equals(this.InitialRotation, rhs.InitialRotation)) return false;
                if (!object.Equals(this.RotationOffsetConstraints, rhs.RotationOffsetConstraints)) return false;
                if (!object.Equals(this.InitialTranslationOffset, rhs.InitialTranslationOffset)) return false;
                if (!object.Equals(this.CameraPath, rhs.CameraPath)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Icons);
                hash.Add(this.Description);
                hash.Add(this.Conditions);
                hash.Add(this.LoadingScreenNif);
                hash.Add(this.InitialScale);
                hash.Add(this.InitialRotation);
                hash.Add(this.RotationOffsetConstraints);
                hash.Add(this.InitialTranslationOffset);
                hash.Add(this.CameraPath);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Icons != null)
                {
                    if (!eval(this.Icons.Overall)) return false;
                    if (this.Icons.Specific != null && !this.Icons.Specific.All(eval)) return false;
                }
                if (!eval(this.Description)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.LoadingScreenNif)) return false;
                if (!eval(this.InitialScale)) return false;
                if (!eval(this.InitialRotation)) return false;
                if (RotationOffsetConstraints != null)
                {
                    if (!eval(this.RotationOffsetConstraints.Overall)) return false;
                    if (this.RotationOffsetConstraints.Specific != null && !this.RotationOffsetConstraints.Specific.All(eval)) return false;
                }
                if (!eval(this.InitialTranslationOffset)) return false;
                if (!eval(this.CameraPath)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Icons != null)
                {
                    if (eval(this.Icons.Overall)) return true;
                    if (this.Icons.Specific != null && this.Icons.Specific.Any(eval)) return true;
                }
                if (eval(this.Description)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.LoadingScreenNif)) return true;
                if (eval(this.InitialScale)) return true;
                if (eval(this.InitialRotation)) return true;
                if (RotationOffsetConstraints != null)
                {
                    if (eval(this.RotationOffsetConstraints.Overall)) return true;
                    if (this.RotationOffsetConstraints.Specific != null && this.RotationOffsetConstraints.Specific.Any(eval)) return true;
                }
                if (eval(this.InitialTranslationOffset)) return true;
                if (eval(this.CameraPath)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LoadScreen.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Icons = this.Icons == null ? null : new MaskItem<R, Icons.Mask<R>?>(eval(this.Icons.Overall), this.Icons.Specific?.Translate(eval));
                obj.Description = eval(this.Description);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.LoadingScreenNif = eval(this.LoadingScreenNif);
                obj.InitialScale = eval(this.InitialScale);
                obj.InitialRotation = eval(this.InitialRotation);
                obj.RotationOffsetConstraints = this.RotationOffsetConstraints == null ? null : new MaskItem<R, Int16MinMax.Mask<R>?>(eval(this.RotationOffsetConstraints.Overall), this.RotationOffsetConstraints.Specific?.Translate(eval));
                obj.InitialTranslationOffset = eval(this.InitialTranslationOffset);
                obj.CameraPath = eval(this.CameraPath);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LoadScreen.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LoadScreen.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LoadScreen.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Icons?.Overall ?? true)
                    {
                        Icons?.ToString(fg);
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.LoadingScreenNif ?? true)
                    {
                        fg.AppendItem(LoadingScreenNif, "LoadingScreenNif");
                    }
                    if (printMask?.InitialScale ?? true)
                    {
                        fg.AppendItem(InitialScale, "InitialScale");
                    }
                    if (printMask?.InitialRotation ?? true)
                    {
                        fg.AppendItem(InitialRotation, "InitialRotation");
                    }
                    if (printMask?.RotationOffsetConstraints?.Overall ?? true)
                    {
                        RotationOffsetConstraints?.ToString(fg);
                    }
                    if (printMask?.InitialTranslationOffset ?? true)
                    {
                        fg.AppendItem(InitialTranslationOffset, "InitialTranslationOffset");
                    }
                    if (printMask?.CameraPath ?? true)
                    {
                        fg.AppendItem(CameraPath, "CameraPath");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, Icons.ErrorMask?>? Icons;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? LoadingScreenNif;
            public Exception? InitialScale;
            public Exception? InitialRotation;
            public MaskItem<Exception?, Int16MinMax.ErrorMask?>? RotationOffsetConstraints;
            public Exception? InitialTranslationOffset;
            public Exception? CameraPath;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreen_FieldIndex.Icons:
                        return Icons;
                    case LoadScreen_FieldIndex.Description:
                        return Description;
                    case LoadScreen_FieldIndex.Conditions:
                        return Conditions;
                    case LoadScreen_FieldIndex.LoadingScreenNif:
                        return LoadingScreenNif;
                    case LoadScreen_FieldIndex.InitialScale:
                        return InitialScale;
                    case LoadScreen_FieldIndex.InitialRotation:
                        return InitialRotation;
                    case LoadScreen_FieldIndex.RotationOffsetConstraints:
                        return RotationOffsetConstraints;
                    case LoadScreen_FieldIndex.InitialTranslationOffset:
                        return InitialTranslationOffset;
                    case LoadScreen_FieldIndex.CameraPath:
                        return CameraPath;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreen_FieldIndex.Icons:
                        this.Icons = new MaskItem<Exception?, Icons.ErrorMask?>(ex, null);
                        break;
                    case LoadScreen_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case LoadScreen_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case LoadScreen_FieldIndex.LoadingScreenNif:
                        this.LoadingScreenNif = ex;
                        break;
                    case LoadScreen_FieldIndex.InitialScale:
                        this.InitialScale = ex;
                        break;
                    case LoadScreen_FieldIndex.InitialRotation:
                        this.InitialRotation = ex;
                        break;
                    case LoadScreen_FieldIndex.RotationOffsetConstraints:
                        this.RotationOffsetConstraints = new MaskItem<Exception?, Int16MinMax.ErrorMask?>(ex, null);
                        break;
                    case LoadScreen_FieldIndex.InitialTranslationOffset:
                        this.InitialTranslationOffset = ex;
                        break;
                    case LoadScreen_FieldIndex.CameraPath:
                        this.CameraPath = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreen_FieldIndex.Icons:
                        this.Icons = (MaskItem<Exception?, Icons.ErrorMask?>?)obj;
                        break;
                    case LoadScreen_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case LoadScreen_FieldIndex.LoadingScreenNif:
                        this.LoadingScreenNif = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.InitialScale:
                        this.InitialScale = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.InitialRotation:
                        this.InitialRotation = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.RotationOffsetConstraints:
                        this.RotationOffsetConstraints = (MaskItem<Exception?, Int16MinMax.ErrorMask?>?)obj;
                        break;
                    case LoadScreen_FieldIndex.InitialTranslationOffset:
                        this.InitialTranslationOffset = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.CameraPath:
                        this.CameraPath = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Icons != null) return true;
                if (Description != null) return true;
                if (Conditions != null) return true;
                if (LoadingScreenNif != null) return true;
                if (InitialScale != null) return true;
                if (InitialRotation != null) return true;
                if (RotationOffsetConstraints != null) return true;
                if (InitialTranslationOffset != null) return true;
                if (CameraPath != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Icons?.ToString(fg);
                fg.AppendItem(Description, "Description");
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(LoadingScreenNif, "LoadingScreenNif");
                fg.AppendItem(InitialScale, "InitialScale");
                fg.AppendItem(InitialRotation, "InitialRotation");
                RotationOffsetConstraints?.ToString(fg);
                fg.AppendItem(InitialTranslationOffset, "InitialTranslationOffset");
                fg.AppendItem(CameraPath, "CameraPath");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Icons = this.Icons.Combine(rhs.Icons, (l, r) => l.Combine(r));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.LoadingScreenNif = this.LoadingScreenNif.Combine(rhs.LoadingScreenNif);
                ret.InitialScale = this.InitialScale.Combine(rhs.InitialScale);
                ret.InitialRotation = this.InitialRotation.Combine(rhs.InitialRotation);
                ret.RotationOffsetConstraints = this.RotationOffsetConstraints.Combine(rhs.RotationOffsetConstraints, (l, r) => l.Combine(r));
                ret.InitialTranslationOffset = this.InitialTranslationOffset.Combine(rhs.InitialTranslationOffset);
                ret.CameraPath = this.CameraPath.Combine(rhs.CameraPath);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public Icons.TranslationMask? Icons;
            public bool Description;
            public Condition.TranslationMask? Conditions;
            public bool LoadingScreenNif;
            public bool InitialScale;
            public bool InitialRotation;
            public Int16MinMax.TranslationMask? RotationOffsetConstraints;
            public bool InitialTranslationOffset;
            public bool CameraPath;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Description = defaultOn;
                this.LoadingScreenNif = defaultOn;
                this.InitialScale = defaultOn;
                this.InitialRotation = defaultOn;
                this.InitialTranslationOffset = defaultOn;
                this.CameraPath = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Icons != null ? Icons.OnOverall : DefaultOn, Icons?.GetCrystal()));
                ret.Add((Description, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((LoadingScreenNif, null));
                ret.Add((InitialScale, null));
                ret.Add((InitialRotation, null));
                ret.Add((RotationOffsetConstraints != null ? RotationOffsetConstraints.OnOverall : DefaultOn, RotationOffsetConstraints?.GetCrystal()));
                ret.Add((InitialTranslationOffset, null));
                ret.Add((CameraPath, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = LoadScreen_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => LoadScreenCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LoadScreenSetterCommon.Instance.RemapLinks(this, mapping);
        public LoadScreen(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private LoadScreen(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal LoadScreen(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public LoadScreen(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public LoadScreen(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LoadScreenBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LoadScreenBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static LoadScreen CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LoadScreen();
            ((LoadScreenSetterCommon)((ILoadScreenGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LoadScreen item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LoadScreen GetNew()
        {
            return new LoadScreen();
        }

    }
    #endregion

    #region Interface
    public partial interface ILoadScreen :
        ILoadScreenGetter,
        IFallout4MajorRecord,
        IHasIcons,
        ILoquiObjectSetter<ILoadScreenInternal>,
        IFormLinkContainer
    {
        new Icons? Icons { get; set; }
        new TranslatedString Description { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new FormLink<IStaticGetter> LoadingScreenNif { get; set; }
        new Single? InitialScale { get; set; }
        new P3Int16? InitialRotation { get; set; }
        new Int16MinMax? RotationOffsetConstraints { get; set; }
        new P3Float? InitialTranslationOffset { get; set; }
        new String? CameraPath { get; set; }
        #region Mutagen
        new LoadScreen.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ILoadScreenInternal :
        IFallout4MajorRecordInternal,
        ILoadScreen,
        ILoadScreenGetter
    {
    }

    public partial interface ILoadScreenGetter :
        IFallout4MajorRecordGetter,
        IHasIconsGetter,
        ILoquiObject<ILoadScreenGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => LoadScreen_Registration.Instance;
        IIconsGetter? Icons { get; }
        ITranslatedStringGetter Description { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        FormLink<IStaticGetter> LoadingScreenNif { get; }
        Single? InitialScale { get; }
        P3Int16? InitialRotation { get; }
        IInt16MinMaxGetter? RotationOffsetConstraints { get; }
        P3Float? InitialTranslationOffset { get; }
        String? CameraPath { get; }

        #region Mutagen
        LoadScreen.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class LoadScreenMixIn
    {
        public static void Clear(this ILoadScreenInternal item)
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LoadScreen.Mask<bool> GetEqualsMask(
            this ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILoadScreenGetter item,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILoadScreenGetter item,
            FileGeneration fg,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILoadScreenGetter item,
            ILoadScreenGetter rhs)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILoadScreenInternal lhs,
            ILoadScreenGetter rhs,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LoadScreen.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILoadScreenInternal lhs,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            LoadScreen.TranslationMask? copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static LoadScreen Duplicate(
            this ILoadScreenGetter item,
            FormKey formKey,
            LoadScreen.TranslationMask? copyMask = null)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILoadScreenInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum LoadScreen_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Icons = 6,
        Description = 7,
        Conditions = 8,
        LoadingScreenNif = 9,
        InitialScale = 10,
        InitialRotation = 11,
        RotationOffsetConstraints = 12,
        InitialTranslationOffset = 13,
        CameraPath = 14,
    }
    #endregion

    #region Registration
    public partial class LoadScreen_Registration : ILoquiRegistration
    {
        public static readonly LoadScreen_Registration Instance = new LoadScreen_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 399,
            version: 0);

        public const string GUID = "8703704e-090f-4c39-a94f-343b5e1efe7d";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(LoadScreen.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LoadScreen.ErrorMask);

        public static readonly Type ClassType = typeof(LoadScreen);

        public static readonly Type GetterType = typeof(ILoadScreenGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILoadScreen);

        public static readonly Type? InternalSetterType = typeof(ILoadScreenInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.LoadScreen";

        public const string Name = "LoadScreen";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LSCR;
        public static readonly Type BinaryWriteTranslation = typeof(LoadScreenBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class LoadScreenSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly LoadScreenSetterCommon Instance = new LoadScreenSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILoadScreenInternal item)
        {
            ClearPartial();
            item.Icons = null;
            item.Description.Clear();
            item.Conditions.Clear();
            item.LoadingScreenNif = FormLink<IStaticGetter>.Null;
            item.InitialScale = default;
            item.InitialRotation = default;
            item.RotationOffsetConstraints = null;
            item.InitialTranslationOffset = default;
            item.CameraPath = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ILoadScreenInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILoadScreenInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILoadScreen obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.LoadingScreenNif = obj.LoadingScreenNif.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILoadScreenInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ILoadScreenInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LoadScreenBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LoadScreenBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (LoadScreen)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (LoadScreen)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class LoadScreenCommon : Fallout4MajorRecordCommon
    {
        public new static readonly LoadScreenCommon Instance = new LoadScreenCommon();

        public LoadScreen.Mask<bool> GetEqualsMask(
            ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LoadScreen.Mask<bool>(false);
            ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            LoadScreen.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Icons = EqualsMaskHelper.EqualsHelper(
                item.Icons,
                rhs.Icons,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LoadingScreenNif = item.LoadingScreenNif.Equals(rhs.LoadingScreenNif);
            ret.InitialScale = item.InitialScale.EqualsWithin(rhs.InitialScale);
            ret.InitialRotation = item.InitialRotation.Equals(rhs.InitialRotation);
            ret.RotationOffsetConstraints = EqualsMaskHelper.EqualsHelper(
                item.RotationOffsetConstraints,
                rhs.RotationOffsetConstraints,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.InitialTranslationOffset = item.InitialTranslationOffset.Equals(rhs.InitialTranslationOffset);
            ret.CameraPath = string.Equals(item.CameraPath, rhs.CameraPath);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILoadScreenGetter item,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILoadScreenGetter item,
            FileGeneration fg,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LoadScreen =>");
            }
            else
            {
                fg.AppendLine($"{name} (LoadScreen) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILoadScreenGetter item,
            FileGeneration fg,
            LoadScreen.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Icons?.Overall ?? true)
                && item.Icons.TryGet(out var IconsItem))
            {
                IconsItem?.ToString(fg, "Icons");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendItem(item.Description, "Description");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LoadingScreenNif ?? true)
            {
                fg.AppendItem(item.LoadingScreenNif.FormKey, "LoadingScreenNif");
            }
            if ((printMask?.InitialScale ?? true)
                && item.InitialScale.TryGet(out var InitialScaleItem))
            {
                fg.AppendItem(InitialScaleItem, "InitialScale");
            }
            if ((printMask?.InitialRotation ?? true)
                && item.InitialRotation.TryGet(out var InitialRotationItem))
            {
                fg.AppendItem(InitialRotationItem, "InitialRotation");
            }
            if ((printMask?.RotationOffsetConstraints?.Overall ?? true)
                && item.RotationOffsetConstraints.TryGet(out var RotationOffsetConstraintsItem))
            {
                RotationOffsetConstraintsItem?.ToString(fg, "RotationOffsetConstraints");
            }
            if ((printMask?.InitialTranslationOffset ?? true)
                && item.InitialTranslationOffset.TryGet(out var InitialTranslationOffsetItem))
            {
                fg.AppendItem(InitialTranslationOffsetItem, "InitialTranslationOffset");
            }
            if ((printMask?.CameraPath ?? true)
                && item.CameraPath.TryGet(out var CameraPathItem))
            {
                fg.AppendItem(CameraPathItem, "CameraPath");
            }
        }
        
        public static LoadScreen_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LoadScreen_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (LoadScreen_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (LoadScreen_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (LoadScreen_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (LoadScreen_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (LoadScreen_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LoadScreen_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LoadScreen_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILoadScreenGetter? lhs,
            ILoadScreenGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.Icons, rhs.Icons)) return false;
            if (!object.Equals(lhs.Description, rhs.Description)) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            if (!lhs.LoadingScreenNif.Equals(rhs.LoadingScreenNif)) return false;
            if (!lhs.InitialScale.EqualsWithin(rhs.InitialScale)) return false;
            if (!lhs.InitialRotation.Equals(rhs.InitialRotation)) return false;
            if (!object.Equals(lhs.RotationOffsetConstraints, rhs.RotationOffsetConstraints)) return false;
            if (!lhs.InitialTranslationOffset.Equals(rhs.InitialTranslationOffset)) return false;
            if (!string.Equals(lhs.CameraPath, rhs.CameraPath)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILoadScreenGetter?)lhs,
                rhs: rhs as ILoadScreenGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILoadScreenGetter?)lhs,
                rhs: rhs as ILoadScreenGetter);
        }
        
        public virtual int GetHashCode(ILoadScreenGetter item)
        {
            var hash = new HashCode();
            if (item.Icons.TryGet(out var Iconsitem))
            {
                hash.Add(Iconsitem);
            }
            hash.Add(item.Description);
            hash.Add(item.Conditions);
            hash.Add(item.LoadingScreenNif);
            if (item.InitialScale.TryGet(out var InitialScaleitem))
            {
                hash.Add(InitialScaleitem);
            }
            if (item.InitialRotation.TryGet(out var InitialRotationitem))
            {
                hash.Add(InitialRotationitem);
            }
            if (item.RotationOffsetConstraints.TryGet(out var RotationOffsetConstraintsitem))
            {
                hash.Add(RotationOffsetConstraintsitem);
            }
            if (item.InitialTranslationOffset.TryGet(out var InitialTranslationOffsetitem))
            {
                hash.Add(InitialTranslationOffsetitem);
            }
            if (item.CameraPath.TryGet(out var CameraPathitem))
            {
                hash.Add(CameraPathitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ILoadScreenGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILoadScreenGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LoadScreen.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ILoadScreenGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield return FormLinkInformation.Factory(obj.LoadingScreenNif);
            yield break;
        }
        
        #region Duplicate
        public LoadScreen Duplicate(
            ILoadScreenGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new LoadScreen(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILoadScreen)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILoadScreen)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class LoadScreenSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly LoadScreenSetterTranslationCommon Instance = new LoadScreenSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILoadScreenInternal item,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILoadScreen item,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Icons) ?? true))
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.Icons);
                try
                {
                    if(rhs.Icons.TryGet(out var rhsIcons))
                    {
                        item.Icons = rhsIcons.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LoadScreen_FieldIndex.Icons));
                    }
                    else
                    {
                        item.Icons = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.LoadingScreenNif) ?? true))
            {
                item.LoadingScreenNif = new FormLink<IStaticGetter>(rhs.LoadingScreenNif.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.InitialScale) ?? true))
            {
                item.InitialScale = rhs.InitialScale;
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.InitialRotation) ?? true))
            {
                item.InitialRotation = rhs.InitialRotation;
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.RotationOffsetConstraints) ?? true))
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.RotationOffsetConstraints);
                try
                {
                    if(rhs.RotationOffsetConstraints.TryGet(out var rhsRotationOffsetConstraints))
                    {
                        item.RotationOffsetConstraints = rhsRotationOffsetConstraints.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LoadScreen_FieldIndex.RotationOffsetConstraints));
                    }
                    else
                    {
                        item.RotationOffsetConstraints = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.InitialTranslationOffset) ?? true))
            {
                item.InitialTranslationOffset = rhs.InitialTranslationOffset;
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.CameraPath) ?? true))
            {
                item.CameraPath = rhs.CameraPath;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILoadScreenInternal)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILoadScreen)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILoadScreenInternal)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILoadScreen)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            LoadScreen.TranslationMask? copyMask = null)
        {
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetNew();
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetNew();
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LoadScreen.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetNew();
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class LoadScreen
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreen_Registration.Instance;
        public new static LoadScreen_Registration Registration => LoadScreen_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LoadScreenCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LoadScreenSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LoadScreenSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LoadScreenBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LoadScreenBinaryWriteTranslation Instance = new LoadScreenBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            ILoadScreenGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            ILoadScreenGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            ILoadScreenGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Icons.TryGet(out var IconsItem))
            {
                ((IconsBinaryWriteTranslation)((IBinaryItem)IconsItem).BinaryWriteTranslator).Write(
                    item: IconsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            LoadScreenBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LoadingScreenNif,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NNAM));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InitialScale,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Binary.P3Int16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InitialRotation,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.RNAM));
            if (item.RotationOffsetConstraints.TryGet(out var RotationOffsetConstraintsItem))
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.ONAM))
                {
                    ((Int16MinMaxBinaryWriteTranslation)((IBinaryItem)RotationOffsetConstraintsItem).BinaryWriteTranslator).Write(
                        item: RotationOffsetConstraintsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InitialTranslationOffset,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XNAM));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CameraPath,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MOD2),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            ILoadScreenGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.LSCR),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LoadScreenBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static LoadScreenBinaryCreateTranslation Instance = new LoadScreenBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LSCR;
        public static void FillBinaryStructs(
            ILoadScreenInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ILoadScreenInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    item.Icons = Mutagen.Bethesda.Fallout4.Icons.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)LoadScreen_FieldIndex.Icons;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)LoadScreen_FieldIndex.Description;
                }
                case RecordTypeInts.CTDA:
                {
                    LoadScreenBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)LoadScreen_FieldIndex.Conditions;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LoadingScreenNif = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)LoadScreen_FieldIndex.LoadingScreenNif;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InitialScale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)LoadScreen_FieldIndex.InitialScale;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InitialRotation = Mutagen.Bethesda.Binary.P3Int16BinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)LoadScreen_FieldIndex.InitialRotation;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.RotationOffsetConstraints = Mutagen.Bethesda.Fallout4.Int16MinMax.CreateFromBinary(frame: frame);
                    return (int)LoadScreen_FieldIndex.RotationOffsetConstraints;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InitialTranslationOffset = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)LoadScreen_FieldIndex.InitialTranslationOffset;
                }
                case RecordTypeInts.MOD2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CameraPath = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)LoadScreen_FieldIndex.CameraPath;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            ILoadScreenInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class LoadScreenBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LoadScreenBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ILoadScreenGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreen_Registration.Instance;
        public new static LoadScreen_Registration Registration => LoadScreen_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LoadScreenCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LoadScreenSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => LoadScreenCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LoadScreenBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LoadScreenBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public LoadScreen.MajorFlag MajorFlags => (LoadScreen.MajorFlag)this.MajorRecordFlagsRaw;

        public IIconsGetter? Icons { get; private set; }
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : TranslatedString.Empty;
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        #region LoadingScreenNif
        private int? _LoadingScreenNifLocation;
        public FormLink<IStaticGetter> LoadingScreenNif => _LoadingScreenNifLocation.HasValue ? new FormLink<IStaticGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LoadingScreenNifLocation.Value, _package.MetaData.Constants)))) : FormLink<IStaticGetter>.Null;
        #endregion
        #region InitialScale
        private int? _InitialScaleLocation;
        public Single? InitialScale => _InitialScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _InitialScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region InitialRotation
        private int? _InitialRotationLocation;
        public P3Int16? InitialRotation => _InitialRotationLocation.HasValue ? P3Int16BinaryTranslation.Read(HeaderTranslation.ExtractSubrecordMemory(_data, _InitialRotationLocation.Value, _package.MetaData.Constants)) : default(P3Int16?);
        #endregion
        public IInt16MinMaxGetter? RotationOffsetConstraints { get; private set; }
        #region InitialTranslationOffset
        private int? _InitialTranslationOffsetLocation;
        public P3Float? InitialTranslationOffset => _InitialTranslationOffsetLocation.HasValue ? P3FloatBinaryTranslation.Read(HeaderTranslation.ExtractSubrecordMemory(_data, _InitialTranslationOffsetLocation.Value, _package.MetaData.Constants)) : default(P3Float?);
        #endregion
        #region CameraPath
        private int? _CameraPathLocation;
        public String? CameraPath => _CameraPathLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _CameraPathLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LoadScreenBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LoadScreenBinaryOverlay LoadScreenFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new LoadScreenBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static LoadScreenBinaryOverlay LoadScreenFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LoadScreenFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    this.Icons = IconsBinaryOverlay.IconsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)LoadScreen_FieldIndex.Icons;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.Description;
                }
                case RecordTypeInts.CTDA:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)LoadScreen_FieldIndex.Conditions;
                }
                case RecordTypeInts.NNAM:
                {
                    _LoadingScreenNifLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.LoadingScreenNif;
                }
                case RecordTypeInts.SNAM:
                {
                    _InitialScaleLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.InitialScale;
                }
                case RecordTypeInts.RNAM:
                {
                    _InitialRotationLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.InitialRotation;
                }
                case RecordTypeInts.ONAM:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.RotationOffsetConstraints = Int16MinMaxBinaryOverlay.Int16MinMaxFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)LoadScreen_FieldIndex.RotationOffsetConstraints;
                }
                case RecordTypeInts.XNAM:
                {
                    _InitialTranslationOffsetLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.InitialTranslationOffset;
                }
                case RecordTypeInts.MOD2:
                {
                    _CameraPathLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.CameraPath;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LoadScreenMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILoadScreenGetter rhs)) return false;
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILoadScreenGetter? obj)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

