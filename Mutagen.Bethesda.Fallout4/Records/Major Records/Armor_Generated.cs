/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Armor :
        Fallout4MajorRecord,
        IArmorInternal,
        ILoquiObjectSetter<Armor>,
        IEquatable<IArmorGetter>
    {
        #region Ctor
        protected Armor()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IArmorGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IArmorGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IArmorGetter.Name => this.Name;
        #endregion
        #region ObjectEffect
        public FormLinkNullable<IEffectRecordGetter> ObjectEffect { get; set; } = new FormLinkNullable<IEffectRecordGetter>();
        #endregion
        #region EnchantmentAmount
        public UInt16? EnchantmentAmount { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IArmorGetter.EnchantmentAmount => this.EnchantmentAmount;
        #endregion
        #region WorldModel
        public IGenderedItem<ArmorModel?>? WorldModel { get; set; }
        IGenderedItemGetter<IArmorModelGetter?>? IArmorGetter.WorldModel => this.WorldModel;
        #endregion
        #region BodyTemplate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BodyTemplate? _BodyTemplate;
        public BodyTemplate? BodyTemplate
        {
            get => _BodyTemplate;
            set => _BodyTemplate = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBodyTemplateGetter? IArmorGetter.BodyTemplate => this.BodyTemplate;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IArmorGetter.Destructible => this.Destructible;
        #endregion
        #region PickUpSound
        public FormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region PutDownSound
        public FormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region RagdollConstraintTemplate
        public String? RagdollConstraintTemplate { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IArmorGetter.RagdollConstraintTemplate => this.RagdollConstraintTemplate;
        #endregion
        #region EquipmentType
        public FormLinkNullable<IEquipTypeGetter> EquipmentType { get; set; } = new FormLinkNullable<IEquipTypeGetter>();
        #endregion
        #region BashImpactDataSet
        public FormLinkNullable<IImpactDataSetGetter> BashImpactDataSet { get; set; } = new FormLinkNullable<IImpactDataSetGetter>();
        #endregion
        #region AlternateBlockMaterial
        public FormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial { get; set; } = new FormLinkNullable<IMaterialTypeGetter>();
        #endregion
        #region Race
        public FormLinkNullable<IRaceGetter> Race { get; set; } = new FormLinkNullable<IRaceGetter>();
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IKeywordGetter>>? _Keywords;
        public ExtendedList<IFormLink<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IKeywordGetter>>? IArmorGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLink<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IArmorGetter.Description => this.Description;
        #endregion
        #region Armature
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IArmorAddonGetter>> _Armature = new ExtendedList<IFormLink<IArmorAddonGetter>>();
        public ExtendedList<IFormLink<IArmorAddonGetter>> Armature
        {
            get => this._Armature;
            protected set => this._Armature = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IArmorAddonGetter>> IArmorGetter.Armature => _Armature;
        #endregion

        #endregion
        #region Value
        public UInt32 Value { get; set; } = default;
        #endregion
        #region Weight
        public Single Weight { get; set; } = default;
        #endregion
        #region ArmorRating
        public Single ArmorRating { get; set; } = default;
        #endregion
        #region TemplateArmor
        public FormLinkNullable<IArmorGetter> TemplateArmor { get; set; } = new FormLinkNullable<IArmorGetter>();
        #endregion
        #region DATADataTypeState
        public Armor.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ArmorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IArmorGetter rhs)) return false;
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IArmorGetter? obj)
        {
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.ObjectEffect = initialValue;
                this.EnchantmentAmount = initialValue;
                this.WorldModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, ArmorModel.Mask<TItem>?>?>?>(initialValue, default);
                this.BodyTemplate = new MaskItem<TItem, BodyTemplate.Mask<TItem>?>(initialValue, new BodyTemplate.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.PickUpSound = initialValue;
                this.PutDownSound = initialValue;
                this.RagdollConstraintTemplate = initialValue;
                this.EquipmentType = initialValue;
                this.BashImpactDataSet = initialValue;
                this.AlternateBlockMaterial = initialValue;
                this.Race = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Description = initialValue;
                this.Armature = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Value = initialValue;
                this.Weight = initialValue;
                this.ArmorRating = initialValue;
                this.TemplateArmor = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Name,
                TItem ObjectEffect,
                TItem EnchantmentAmount,
                TItem WorldModel,
                TItem BodyTemplate,
                TItem Destructible,
                TItem PickUpSound,
                TItem PutDownSound,
                TItem RagdollConstraintTemplate,
                TItem EquipmentType,
                TItem BashImpactDataSet,
                TItem AlternateBlockMaterial,
                TItem Race,
                TItem Keywords,
                TItem Description,
                TItem Armature,
                TItem Value,
                TItem Weight,
                TItem ArmorRating,
                TItem TemplateArmor,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.ObjectEffect = ObjectEffect;
                this.EnchantmentAmount = EnchantmentAmount;
                this.WorldModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, ArmorModel.Mask<TItem>?>?>?>(WorldModel, default);
                this.BodyTemplate = new MaskItem<TItem, BodyTemplate.Mask<TItem>?>(BodyTemplate, new BodyTemplate.Mask<TItem>(BodyTemplate));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.PickUpSound = PickUpSound;
                this.PutDownSound = PutDownSound;
                this.RagdollConstraintTemplate = RagdollConstraintTemplate;
                this.EquipmentType = EquipmentType;
                this.BashImpactDataSet = BashImpactDataSet;
                this.AlternateBlockMaterial = AlternateBlockMaterial;
                this.Race = Race;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Description = Description;
                this.Armature = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Armature, Enumerable.Empty<(int Index, TItem Value)>());
                this.Value = Value;
                this.Weight = Weight;
                this.ArmorRating = ArmorRating;
                this.TemplateArmor = TemplateArmor;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public TItem ObjectEffect;
            public TItem EnchantmentAmount;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, ArmorModel.Mask<TItem>?>?>?>? WorldModel;
            public MaskItem<TItem, BodyTemplate.Mask<TItem>?>? BodyTemplate { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem PickUpSound;
            public TItem PutDownSound;
            public TItem RagdollConstraintTemplate;
            public TItem EquipmentType;
            public TItem BashImpactDataSet;
            public TItem AlternateBlockMaterial;
            public TItem Race;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Armature;
            public TItem Value;
            public TItem Weight;
            public TItem ArmorRating;
            public TItem TemplateArmor;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.ObjectEffect, rhs.ObjectEffect)) return false;
                if (!object.Equals(this.EnchantmentAmount, rhs.EnchantmentAmount)) return false;
                if (!object.Equals(this.WorldModel, rhs.WorldModel)) return false;
                if (!object.Equals(this.BodyTemplate, rhs.BodyTemplate)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.PickUpSound, rhs.PickUpSound)) return false;
                if (!object.Equals(this.PutDownSound, rhs.PutDownSound)) return false;
                if (!object.Equals(this.RagdollConstraintTemplate, rhs.RagdollConstraintTemplate)) return false;
                if (!object.Equals(this.EquipmentType, rhs.EquipmentType)) return false;
                if (!object.Equals(this.BashImpactDataSet, rhs.BashImpactDataSet)) return false;
                if (!object.Equals(this.AlternateBlockMaterial, rhs.AlternateBlockMaterial)) return false;
                if (!object.Equals(this.Race, rhs.Race)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Armature, rhs.Armature)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.ArmorRating, rhs.ArmorRating)) return false;
                if (!object.Equals(this.TemplateArmor, rhs.TemplateArmor)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.ObjectEffect);
                hash.Add(this.EnchantmentAmount);
                hash.Add(this.WorldModel);
                hash.Add(this.BodyTemplate);
                hash.Add(this.Destructible);
                hash.Add(this.PickUpSound);
                hash.Add(this.PutDownSound);
                hash.Add(this.RagdollConstraintTemplate);
                hash.Add(this.EquipmentType);
                hash.Add(this.BashImpactDataSet);
                hash.Add(this.AlternateBlockMaterial);
                hash.Add(this.Race);
                hash.Add(this.Keywords);
                hash.Add(this.Description);
                hash.Add(this.Armature);
                hash.Add(this.Value);
                hash.Add(this.Weight);
                hash.Add(this.ArmorRating);
                hash.Add(this.TemplateArmor);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.ObjectEffect)) return false;
                if (!eval(this.EnchantmentAmount)) return false;
                if (!GenderedItem.AllMask(
                    this.WorldModel,
                    eval: eval)) return false;
                if (BodyTemplate != null)
                {
                    if (!eval(this.BodyTemplate.Overall)) return false;
                    if (this.BodyTemplate.Specific != null && !this.BodyTemplate.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.PickUpSound)) return false;
                if (!eval(this.PutDownSound)) return false;
                if (!eval(this.RagdollConstraintTemplate)) return false;
                if (!eval(this.EquipmentType)) return false;
                if (!eval(this.BashImpactDataSet)) return false;
                if (!eval(this.AlternateBlockMaterial)) return false;
                if (!eval(this.Race)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Description)) return false;
                if (this.Armature != null)
                {
                    if (!eval(this.Armature.Overall)) return false;
                    if (this.Armature.Specific != null)
                    {
                        foreach (var item in this.Armature.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.ArmorRating)) return false;
                if (!eval(this.TemplateArmor)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.ObjectEffect)) return true;
                if (eval(this.EnchantmentAmount)) return true;
                if (GenderedItem.AnyMask(
                    this.WorldModel,
                    eval: eval)) return true;
                if (BodyTemplate != null)
                {
                    if (eval(this.BodyTemplate.Overall)) return true;
                    if (this.BodyTemplate.Specific != null && this.BodyTemplate.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.PickUpSound)) return true;
                if (eval(this.PutDownSound)) return true;
                if (eval(this.RagdollConstraintTemplate)) return true;
                if (eval(this.EquipmentType)) return true;
                if (eval(this.BashImpactDataSet)) return true;
                if (eval(this.AlternateBlockMaterial)) return true;
                if (eval(this.Race)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Description)) return true;
                if (this.Armature != null)
                {
                    if (eval(this.Armature.Overall)) return true;
                    if (this.Armature.Specific != null)
                    {
                        foreach (var item in this.Armature.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.ArmorRating)) return true;
                if (eval(this.TemplateArmor)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Armor.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.ObjectEffect = eval(this.ObjectEffect);
                obj.EnchantmentAmount = eval(this.EnchantmentAmount);
                obj.WorldModel = GenderedItem.TranslateHelper(
                    this.WorldModel,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.BodyTemplate = this.BodyTemplate == null ? null : new MaskItem<R, BodyTemplate.Mask<R>?>(eval(this.BodyTemplate.Overall), this.BodyTemplate.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.PickUpSound = eval(this.PickUpSound);
                obj.PutDownSound = eval(this.PutDownSound);
                obj.RagdollConstraintTemplate = eval(this.RagdollConstraintTemplate);
                obj.EquipmentType = eval(this.EquipmentType);
                obj.BashImpactDataSet = eval(this.BashImpactDataSet);
                obj.AlternateBlockMaterial = eval(this.AlternateBlockMaterial);
                obj.Race = eval(this.Race);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Description = eval(this.Description);
                if (Armature != null)
                {
                    obj.Armature = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Armature.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Armature.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Armature.Specific = l;
                        foreach (var item in Armature.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
                obj.ArmorRating = eval(this.ArmorRating);
                obj.TemplateArmor = eval(this.TemplateArmor);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Armor.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Armor.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Armor.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.ObjectEffect ?? true)
                    {
                        fg.AppendItem(ObjectEffect, "ObjectEffect");
                    }
                    if (printMask?.EnchantmentAmount ?? true)
                    {
                        fg.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                    }
                    if (WorldModel != null
                        && (printMask?.WorldModel?.Overall ?? true))
                    {
                        fg.AppendLine($"WorldModel => {WorldModel}");
                    }
                    if (printMask?.BodyTemplate?.Overall ?? true)
                    {
                        BodyTemplate?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.PickUpSound ?? true)
                    {
                        fg.AppendItem(PickUpSound, "PickUpSound");
                    }
                    if (printMask?.PutDownSound ?? true)
                    {
                        fg.AppendItem(PutDownSound, "PutDownSound");
                    }
                    if (printMask?.RagdollConstraintTemplate ?? true)
                    {
                        fg.AppendItem(RagdollConstraintTemplate, "RagdollConstraintTemplate");
                    }
                    if (printMask?.EquipmentType ?? true)
                    {
                        fg.AppendItem(EquipmentType, "EquipmentType");
                    }
                    if (printMask?.BashImpactDataSet ?? true)
                    {
                        fg.AppendItem(BashImpactDataSet, "BashImpactDataSet");
                    }
                    if (printMask?.AlternateBlockMaterial ?? true)
                    {
                        fg.AppendItem(AlternateBlockMaterial, "AlternateBlockMaterial");
                    }
                    if (printMask?.Race ?? true)
                    {
                        fg.AppendItem(Race, "Race");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Armature?.Overall ?? true)
                        && Armature.TryGet(out var ArmatureItem))
                    {
                        fg.AppendLine("Armature =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ArmatureItem.Overall);
                            if (ArmatureItem.Specific != null)
                            {
                                foreach (var subItem in ArmatureItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.ArmorRating ?? true)
                    {
                        fg.AppendItem(ArmorRating, "ArmorRating");
                    }
                    if (printMask?.TemplateArmor ?? true)
                    {
                        fg.AppendItem(TemplateArmor, "TemplateArmor");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public Exception? ObjectEffect;
            public Exception? EnchantmentAmount;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? WorldModel;
            public MaskItem<Exception?, BodyTemplate.ErrorMask?>? BodyTemplate;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? PickUpSound;
            public Exception? PutDownSound;
            public Exception? RagdollConstraintTemplate;
            public Exception? EquipmentType;
            public Exception? BashImpactDataSet;
            public Exception? AlternateBlockMaterial;
            public Exception? Race;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Armature;
            public Exception? Value;
            public Exception? Weight;
            public Exception? ArmorRating;
            public Exception? TemplateArmor;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Armor_FieldIndex enu = (Armor_FieldIndex)index;
                switch (enu)
                {
                    case Armor_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Armor_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Armor_FieldIndex.Name:
                        return Name;
                    case Armor_FieldIndex.ObjectEffect:
                        return ObjectEffect;
                    case Armor_FieldIndex.EnchantmentAmount:
                        return EnchantmentAmount;
                    case Armor_FieldIndex.WorldModel:
                        return WorldModel;
                    case Armor_FieldIndex.BodyTemplate:
                        return BodyTemplate;
                    case Armor_FieldIndex.Destructible:
                        return Destructible;
                    case Armor_FieldIndex.PickUpSound:
                        return PickUpSound;
                    case Armor_FieldIndex.PutDownSound:
                        return PutDownSound;
                    case Armor_FieldIndex.RagdollConstraintTemplate:
                        return RagdollConstraintTemplate;
                    case Armor_FieldIndex.EquipmentType:
                        return EquipmentType;
                    case Armor_FieldIndex.BashImpactDataSet:
                        return BashImpactDataSet;
                    case Armor_FieldIndex.AlternateBlockMaterial:
                        return AlternateBlockMaterial;
                    case Armor_FieldIndex.Race:
                        return Race;
                    case Armor_FieldIndex.Keywords:
                        return Keywords;
                    case Armor_FieldIndex.Description:
                        return Description;
                    case Armor_FieldIndex.Armature:
                        return Armature;
                    case Armor_FieldIndex.Value:
                        return Value;
                    case Armor_FieldIndex.Weight:
                        return Weight;
                    case Armor_FieldIndex.ArmorRating:
                        return ArmorRating;
                    case Armor_FieldIndex.TemplateArmor:
                        return TemplateArmor;
                    case Armor_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Armor_FieldIndex enu = (Armor_FieldIndex)index;
                switch (enu)
                {
                    case Armor_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Armor_FieldIndex.ObjectEffect:
                        this.ObjectEffect = ex;
                        break;
                    case Armor_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = ex;
                        break;
                    case Armor_FieldIndex.WorldModel:
                        this.WorldModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Armor_FieldIndex.BodyTemplate:
                        this.BodyTemplate = new MaskItem<Exception?, BodyTemplate.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.PickUpSound:
                        this.PickUpSound = ex;
                        break;
                    case Armor_FieldIndex.PutDownSound:
                        this.PutDownSound = ex;
                        break;
                    case Armor_FieldIndex.RagdollConstraintTemplate:
                        this.RagdollConstraintTemplate = ex;
                        break;
                    case Armor_FieldIndex.EquipmentType:
                        this.EquipmentType = ex;
                        break;
                    case Armor_FieldIndex.BashImpactDataSet:
                        this.BashImpactDataSet = ex;
                        break;
                    case Armor_FieldIndex.AlternateBlockMaterial:
                        this.AlternateBlockMaterial = ex;
                        break;
                    case Armor_FieldIndex.Race:
                        this.Race = ex;
                        break;
                    case Armor_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Armor_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Armor_FieldIndex.Armature:
                        this.Armature = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Armor_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case Armor_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Armor_FieldIndex.ArmorRating:
                        this.ArmorRating = ex;
                        break;
                    case Armor_FieldIndex.TemplateArmor:
                        this.TemplateArmor = ex;
                        break;
                    case Armor_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Armor_FieldIndex enu = (Armor_FieldIndex)index;
                switch (enu)
                {
                    case Armor_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.ObjectEffect:
                        this.ObjectEffect = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.WorldModel:
                        this.WorldModel = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Armor_FieldIndex.BodyTemplate:
                        this.BodyTemplate = (MaskItem<Exception?, BodyTemplate.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.PickUpSound:
                        this.PickUpSound = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.PutDownSound:
                        this.PutDownSound = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.RagdollConstraintTemplate:
                        this.RagdollConstraintTemplate = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.EquipmentType:
                        this.EquipmentType = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.BashImpactDataSet:
                        this.BashImpactDataSet = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.AlternateBlockMaterial:
                        this.AlternateBlockMaterial = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.Race:
                        this.Race = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Armor_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.Armature:
                        this.Armature = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Armor_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.ArmorRating:
                        this.ArmorRating = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.TemplateArmor:
                        this.TemplateArmor = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (ObjectEffect != null) return true;
                if (EnchantmentAmount != null) return true;
                if (WorldModel != null) return true;
                if (BodyTemplate != null) return true;
                if (Destructible != null) return true;
                if (PickUpSound != null) return true;
                if (PutDownSound != null) return true;
                if (RagdollConstraintTemplate != null) return true;
                if (EquipmentType != null) return true;
                if (BashImpactDataSet != null) return true;
                if (AlternateBlockMaterial != null) return true;
                if (Race != null) return true;
                if (Keywords != null) return true;
                if (Description != null) return true;
                if (Armature != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                if (ArmorRating != null) return true;
                if (TemplateArmor != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(ObjectEffect, "ObjectEffect");
                fg.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                if (WorldModel != null)
                {
                    fg.AppendLine($"WorldModel => {WorldModel}");
                }
                BodyTemplate?.ToString(fg);
                Destructible?.ToString(fg);
                fg.AppendItem(PickUpSound, "PickUpSound");
                fg.AppendItem(PutDownSound, "PutDownSound");
                fg.AppendItem(RagdollConstraintTemplate, "RagdollConstraintTemplate");
                fg.AppendItem(EquipmentType, "EquipmentType");
                fg.AppendItem(BashImpactDataSet, "BashImpactDataSet");
                fg.AppendItem(AlternateBlockMaterial, "AlternateBlockMaterial");
                fg.AppendItem(Race, "Race");
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Description, "Description");
                if (Armature.TryGet(out var ArmatureItem))
                {
                    fg.AppendLine("Armature =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ArmatureItem.Overall);
                        if (ArmatureItem.Specific != null)
                        {
                            foreach (var subItem in ArmatureItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Value, "Value");
                fg.AppendItem(Weight, "Weight");
                fg.AppendItem(ArmorRating, "ArmorRating");
                fg.AppendItem(TemplateArmor, "TemplateArmor");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.ObjectEffect = this.ObjectEffect.Combine(rhs.ObjectEffect);
                ret.EnchantmentAmount = this.EnchantmentAmount.Combine(rhs.EnchantmentAmount);
                ret.WorldModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.WorldModel?.Overall, rhs.WorldModel?.Overall), GenderedItem.Combine(this.WorldModel?.Specific, rhs.WorldModel?.Specific));
                ret.BodyTemplate = this.BodyTemplate.Combine(rhs.BodyTemplate, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.PickUpSound = this.PickUpSound.Combine(rhs.PickUpSound);
                ret.PutDownSound = this.PutDownSound.Combine(rhs.PutDownSound);
                ret.RagdollConstraintTemplate = this.RagdollConstraintTemplate.Combine(rhs.RagdollConstraintTemplate);
                ret.EquipmentType = this.EquipmentType.Combine(rhs.EquipmentType);
                ret.BashImpactDataSet = this.BashImpactDataSet.Combine(rhs.BashImpactDataSet);
                ret.AlternateBlockMaterial = this.AlternateBlockMaterial.Combine(rhs.AlternateBlockMaterial);
                ret.Race = this.Race.Combine(rhs.Race);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Armature = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Armature?.Overall, rhs.Armature?.Overall), ExceptionExt.Combine(this.Armature?.Specific, rhs.Armature?.Specific));
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.ArmorRating = this.ArmorRating.Combine(rhs.ArmorRating);
                ret.TemplateArmor = this.TemplateArmor.Combine(rhs.TemplateArmor);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public bool ObjectEffect;
            public bool EnchantmentAmount;
            public GenderedItem<ArmorModel.TranslationMask>? WorldModel;
            public BodyTemplate.TranslationMask? BodyTemplate;
            public Destructible.TranslationMask? Destructible;
            public bool PickUpSound;
            public bool PutDownSound;
            public bool RagdollConstraintTemplate;
            public bool EquipmentType;
            public bool BashImpactDataSet;
            public bool AlternateBlockMaterial;
            public bool Race;
            public bool Keywords;
            public bool Description;
            public bool Armature;
            public bool Value;
            public bool Weight;
            public bool ArmorRating;
            public bool TemplateArmor;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.ObjectEffect = defaultOn;
                this.EnchantmentAmount = defaultOn;
                this.PickUpSound = defaultOn;
                this.PutDownSound = defaultOn;
                this.RagdollConstraintTemplate = defaultOn;
                this.EquipmentType = defaultOn;
                this.BashImpactDataSet = defaultOn;
                this.AlternateBlockMaterial = defaultOn;
                this.Race = defaultOn;
                this.Keywords = defaultOn;
                this.Description = defaultOn;
                this.Armature = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
                this.ArmorRating = defaultOn;
                this.TemplateArmor = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((ObjectEffect, null));
                ret.Add((EnchantmentAmount, null));
                ret.Add((WorldModel != null || DefaultOn, null));
                ret.Add((BodyTemplate != null ? BodyTemplate.OnOverall : DefaultOn, BodyTemplate?.GetCrystal()));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((PickUpSound, null));
                ret.Add((PutDownSound, null));
                ret.Add((RagdollConstraintTemplate, null));
                ret.Add((EquipmentType, null));
                ret.Add((BashImpactDataSet, null));
                ret.Add((AlternateBlockMaterial, null));
                ret.Add((Race, null));
                ret.Add((Keywords, null));
                ret.Add((Description, null));
                ret.Add((Armature, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
                ret.Add((ArmorRating, null));
                ret.Add((TemplateArmor, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Armor_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ArmorCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ArmorSetterCommon.Instance.RemapLinks(this, mapping);
        public Armor(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Armor(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Armor(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Armor(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Armor(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ArmorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Armor CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Armor();
            ((ArmorSetterCommon)((IArmorGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Armor item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ArmorSetterCommon)((IArmorGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Armor GetNew()
        {
            return new Armor();
        }

    }
    #endregion

    #region Interface
    public partial interface IArmor :
        IArmorGetter,
        IFallout4MajorRecord,
        IItem,
        IOutfitTarget,
        IObjectId,
        ITranslatedNamed,
        IObjectBounded,
        IWeightValue,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IArmorInternal>,
        IFormLinkContainer
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ObjectBounds ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new FormLinkNullable<IEffectRecordGetter> ObjectEffect { get; set; }
        new UInt16? EnchantmentAmount { get; set; }
        new IGenderedItem<ArmorModel?>? WorldModel { get; set; }
        new BodyTemplate? BodyTemplate { get; set; }
        new Destructible? Destructible { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; set; }
        new String? RagdollConstraintTemplate { get; set; }
        new FormLinkNullable<IEquipTypeGetter> EquipmentType { get; set; }
        new FormLinkNullable<IImpactDataSetGetter> BashImpactDataSet { get; set; }
        new FormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial { get; set; }
        new FormLinkNullable<IRaceGetter> Race { get; set; }
        new ExtendedList<IFormLink<IKeywordGetter>>? Keywords { get; set; }
        new TranslatedString? Description { get; set; }
        new ExtendedList<IFormLink<IArmorAddonGetter>> Armature { get; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
        new Single ArmorRating { get; set; }
        new FormLinkNullable<IArmorGetter> TemplateArmor { get; set; }
        new Armor.DATADataType DATADataTypeState { get; set; }
        #region Mutagen
        new Armor.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IArmorInternal :
        IFallout4MajorRecordInternal,
        IArmor,
        IArmorGetter
    {
        new IGenderedItem<ArmorModel?>? WorldModel { get; set; }
    }

    public partial interface IArmorGetter :
        IFallout4MajorRecordGetter,
        IItemGetter,
        IOutfitTargetGetter,
        IObjectIdGetter,
        ITranslatedNamedGetter,
        IObjectBoundedGetter,
        IWeightValueGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IArmorGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Armor_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IObjectBoundsGetter ObjectBounds { get; }
        ITranslatedStringGetter? Name { get; }
        FormLinkNullable<IEffectRecordGetter> ObjectEffect { get; }
        UInt16? EnchantmentAmount { get; }
        IGenderedItemGetter<IArmorModelGetter?>? WorldModel { get; }
        IBodyTemplateGetter? BodyTemplate { get; }
        IDestructibleGetter? Destructible { get; }
        FormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; }
        FormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; }
        String? RagdollConstraintTemplate { get; }
        FormLinkNullable<IEquipTypeGetter> EquipmentType { get; }
        FormLinkNullable<IImpactDataSetGetter> BashImpactDataSet { get; }
        FormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial { get; }
        FormLinkNullable<IRaceGetter> Race { get; }
        IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; }
        ITranslatedStringGetter? Description { get; }
        IReadOnlyList<IFormLink<IArmorAddonGetter>> Armature { get; }
        UInt32 Value { get; }
        Single Weight { get; }
        Single ArmorRating { get; }
        FormLinkNullable<IArmorGetter> TemplateArmor { get; }
        Armor.DATADataType DATADataTypeState { get; }

        #region Mutagen
        Armor.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class ArmorMixIn
    {
        public static void Clear(this IArmorInternal item)
        {
            ((ArmorSetterCommon)((IArmorGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Armor.Mask<bool> GetEqualsMask(
            this IArmorGetter item,
            IArmorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IArmorGetter item,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IArmorGetter item,
            FileGeneration fg,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IArmorGetter item,
            IArmorGetter rhs)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IArmorInternal lhs,
            IArmorGetter rhs,
            out Armor.ErrorMask errorMask,
            Armor.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ArmorSetterTranslationCommon)((IArmorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Armor.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IArmorInternal lhs,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ArmorSetterTranslationCommon)((IArmorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            Armor.TranslationMask? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            out Armor.ErrorMask errorMask,
            Armor.TranslationMask? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Armor Duplicate(
            this IArmorGetter item,
            FormKey formKey,
            Armor.TranslationMask? copyMask = null)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IArmorInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ArmorSetterCommon)((IArmorGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Armor_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        Name = 8,
        ObjectEffect = 9,
        EnchantmentAmount = 10,
        WorldModel = 11,
        BodyTemplate = 12,
        Destructible = 13,
        PickUpSound = 14,
        PutDownSound = 15,
        RagdollConstraintTemplate = 16,
        EquipmentType = 17,
        BashImpactDataSet = 18,
        AlternateBlockMaterial = 19,
        Race = 20,
        Keywords = 21,
        Description = 22,
        Armature = 23,
        Value = 24,
        Weight = 25,
        ArmorRating = 26,
        TemplateArmor = 27,
        DATADataTypeState = 28,
    }
    #endregion

    #region Registration
    public partial class Armor_Registration : ILoquiRegistration
    {
        public static readonly Armor_Registration Instance = new Armor_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 48,
            version: 0);

        public const string GUID = "e2a20eca-5715-4c3b-9189-5cb7b6248375";

        public const ushort AdditionalFieldCount = 23;

        public const ushort FieldCount = 29;

        public static readonly Type MaskType = typeof(Armor.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Armor.ErrorMask);

        public static readonly Type ClassType = typeof(Armor);

        public static readonly Type GetterType = typeof(IArmorGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IArmor);

        public static readonly Type? InternalSetterType = typeof(IArmorInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Armor";

        public const string Name = "Armor";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ARMO;
        public static readonly Type BinaryWriteTranslation = typeof(ArmorBinaryWriteTranslation);
        public static RecordTypeConverter WorldModelFemaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD4")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO4T")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODS"),
                new RecordType("MO4S")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("ICON"),
                new RecordType("ICO2")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MICO"),
                new RecordType("MIC2")));
        public static RecordTypeConverter WorldModelMaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD2")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO2T")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODS"),
                new RecordType("MO2S")));
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ArmorSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ArmorSetterCommon Instance = new ArmorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IArmorInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Name = default;
            item.ObjectEffect = FormLinkNullable<IEffectRecordGetter>.Null;
            item.EnchantmentAmount = default;
            item.WorldModel = null;
            item.BodyTemplate = null;
            item.Destructible = null;
            item.PickUpSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.PutDownSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.RagdollConstraintTemplate = default;
            item.EquipmentType = FormLinkNullable<IEquipTypeGetter>.Null;
            item.BashImpactDataSet = FormLinkNullable<IImpactDataSetGetter>.Null;
            item.AlternateBlockMaterial = FormLinkNullable<IMaterialTypeGetter>.Null;
            item.Race = FormLinkNullable<IRaceGetter>.Null;
            item.Keywords = null;
            item.Description = default;
            item.Armature.Clear();
            item.Value = default;
            item.Weight = default;
            item.ArmorRating = default;
            item.TemplateArmor = FormLinkNullable<IArmorGetter>.Null;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IArmor obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.ObjectEffect = obj.ObjectEffect.Relink(mapping);
            obj.WorldModel?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.PickUpSound = obj.PickUpSound.Relink(mapping);
            obj.PutDownSound = obj.PutDownSound.Relink(mapping);
            obj.EquipmentType = obj.EquipmentType.Relink(mapping);
            obj.BashImpactDataSet = obj.BashImpactDataSet.Relink(mapping);
            obj.AlternateBlockMaterial = obj.AlternateBlockMaterial.Relink(mapping);
            obj.Race = obj.Race.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Armature.RemapLinks(mapping);
            obj.TemplateArmor = obj.TemplateArmor.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IArmorInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IArmorInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ArmorBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ArmorBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Armor)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Armor)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ArmorCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ArmorCommon Instance = new ArmorCommon();

        public Armor.Mask<bool> GetEqualsMask(
            IArmorGetter item,
            IArmorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Armor.Mask<bool>(false);
            ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IArmorGetter item,
            IArmorGetter rhs,
            Armor.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.ObjectEffect = item.ObjectEffect.Equals(rhs.ObjectEffect);
            ret.EnchantmentAmount = item.EnchantmentAmount == rhs.EnchantmentAmount;
            ret.WorldModel = GenderedItem.EqualityMaskHelper(
                lhs: item.WorldModel,
                rhs: rhs.WorldModel,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.BodyTemplate = EqualsMaskHelper.EqualsHelper(
                item.BodyTemplate,
                rhs.BodyTemplate,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PickUpSound = item.PickUpSound.Equals(rhs.PickUpSound);
            ret.PutDownSound = item.PutDownSound.Equals(rhs.PutDownSound);
            ret.RagdollConstraintTemplate = string.Equals(item.RagdollConstraintTemplate, rhs.RagdollConstraintTemplate);
            ret.EquipmentType = item.EquipmentType.Equals(rhs.EquipmentType);
            ret.BashImpactDataSet = item.BashImpactDataSet.Equals(rhs.BashImpactDataSet);
            ret.AlternateBlockMaterial = item.AlternateBlockMaterial.Equals(rhs.AlternateBlockMaterial);
            ret.Race = item.Race.Equals(rhs.Race);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Armature = item.Armature.CollectionEqualsHelper(
                rhs.Armature,
                (l, r) => object.Equals(l, r),
                include);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.ArmorRating = item.ArmorRating.EqualsWithin(rhs.ArmorRating);
            ret.TemplateArmor = item.TemplateArmor.Equals(rhs.TemplateArmor);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IArmorGetter item,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IArmorGetter item,
            FileGeneration fg,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Armor =>");
            }
            else
            {
                fg.AppendLine($"{name} (Armor) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IArmorGetter item,
            FileGeneration fg,
            Armor.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.ObjectEffect ?? true)
            {
                fg.AppendItem(item.ObjectEffect.FormKeyNullable, "ObjectEffect");
            }
            if ((printMask?.EnchantmentAmount ?? true)
                && item.EnchantmentAmount.TryGet(out var EnchantmentAmountItem))
            {
                fg.AppendItem(EnchantmentAmountItem, "EnchantmentAmount");
            }
            if ((printMask?.WorldModel?.Overall ?? true)
                && item.WorldModel.TryGet(out var WorldModelItem))
            {
                WorldModelItem?.ToString(fg, "WorldModel");
            }
            if ((printMask?.BodyTemplate?.Overall ?? true)
                && item.BodyTemplate.TryGet(out var BodyTemplateItem))
            {
                BodyTemplateItem?.ToString(fg, "BodyTemplate");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if (printMask?.PickUpSound ?? true)
            {
                fg.AppendItem(item.PickUpSound.FormKeyNullable, "PickUpSound");
            }
            if (printMask?.PutDownSound ?? true)
            {
                fg.AppendItem(item.PutDownSound.FormKeyNullable, "PutDownSound");
            }
            if ((printMask?.RagdollConstraintTemplate ?? true)
                && item.RagdollConstraintTemplate.TryGet(out var RagdollConstraintTemplateItem))
            {
                fg.AppendItem(RagdollConstraintTemplateItem, "RagdollConstraintTemplate");
            }
            if (printMask?.EquipmentType ?? true)
            {
                fg.AppendItem(item.EquipmentType.FormKeyNullable, "EquipmentType");
            }
            if (printMask?.BashImpactDataSet ?? true)
            {
                fg.AppendItem(item.BashImpactDataSet.FormKeyNullable, "BashImpactDataSet");
            }
            if (printMask?.AlternateBlockMaterial ?? true)
            {
                fg.AppendItem(item.AlternateBlockMaterial.FormKeyNullable, "AlternateBlockMaterial");
            }
            if (printMask?.Race ?? true)
            {
                fg.AppendItem(item.Race.FormKeyNullable, "Race");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.Armature?.Overall ?? true)
            {
                fg.AppendLine("Armature =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Armature)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.ArmorRating ?? true)
            {
                fg.AppendItem(item.ArmorRating, "ArmorRating");
            }
            if (printMask?.TemplateArmor ?? true)
            {
                fg.AppendItem(item.TemplateArmor.FormKeyNullable, "TemplateArmor");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static Armor_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Armor_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Armor_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Armor_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IArmorGetter? lhs,
            IArmorGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.ObjectEffect.Equals(rhs.ObjectEffect)) return false;
            if (lhs.EnchantmentAmount != rhs.EnchantmentAmount) return false;
            if (!Equals(lhs.WorldModel, rhs.WorldModel)) return false;
            if (!object.Equals(lhs.BodyTemplate, rhs.BodyTemplate)) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (!lhs.PickUpSound.Equals(rhs.PickUpSound)) return false;
            if (!lhs.PutDownSound.Equals(rhs.PutDownSound)) return false;
            if (!string.Equals(lhs.RagdollConstraintTemplate, rhs.RagdollConstraintTemplate)) return false;
            if (!lhs.EquipmentType.Equals(rhs.EquipmentType)) return false;
            if (!lhs.BashImpactDataSet.Equals(rhs.BashImpactDataSet)) return false;
            if (!lhs.AlternateBlockMaterial.Equals(rhs.AlternateBlockMaterial)) return false;
            if (!lhs.Race.Equals(rhs.Race)) return false;
            if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            if (!object.Equals(lhs.Description, rhs.Description)) return false;
            if (!lhs.Armature.SequenceEqualNullable(rhs.Armature)) return false;
            if (lhs.Value != rhs.Value) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (!lhs.ArmorRating.EqualsWithin(rhs.ArmorRating)) return false;
            if (!lhs.TemplateArmor.Equals(rhs.TemplateArmor)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IArmorGetter?)lhs,
                rhs: rhs as IArmorGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IArmorGetter?)lhs,
                rhs: rhs as IArmorGetter);
        }
        
        public virtual int GetHashCode(IArmorGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.ObjectEffect);
            if (item.EnchantmentAmount.TryGet(out var EnchantmentAmountitem))
            {
                hash.Add(EnchantmentAmountitem);
            }
            if (item.WorldModel.TryGet(out var WorldModelitem))
            {
                hash.Add(HashCode.Combine(WorldModelitem.Male, WorldModelitem.Female));
            }
            if (item.BodyTemplate.TryGet(out var BodyTemplateitem))
            {
                hash.Add(BodyTemplateitem);
            }
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.PickUpSound);
            hash.Add(item.PutDownSound);
            if (item.RagdollConstraintTemplate.TryGet(out var RagdollConstraintTemplateitem))
            {
                hash.Add(RagdollConstraintTemplateitem);
            }
            hash.Add(item.EquipmentType);
            hash.Add(item.BashImpactDataSet);
            hash.Add(item.AlternateBlockMaterial);
            hash.Add(item.Race);
            hash.Add(item.Keywords);
            if (item.Description.TryGet(out var Descriptionitem))
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.Armature);
            hash.Add(item.Value);
            hash.Add(item.Weight);
            hash.Add(item.ArmorRating);
            hash.Add(item.TemplateArmor);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Armor.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IArmorGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ObjectEffect.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ObjectEffect);
            }
            if (obj.WorldModel.TryGet(out var WorldModelItem))
            {
                foreach (var item in WorldModelItem.NotNull().SelectMany(f => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.PickUpSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PickUpSound);
            }
            if (obj.PutDownSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PutDownSound);
            }
            if (obj.EquipmentType.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.EquipmentType);
            }
            if (obj.BashImpactDataSet.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.BashImpactDataSet);
            }
            if (obj.AlternateBlockMaterial.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AlternateBlockMaterial);
            }
            if (obj.Race.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Race);
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Armature)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.TemplateArmor.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.TemplateArmor);
            }
            yield break;
        }
        
        #region Duplicate
        public Armor Duplicate(
            IArmorGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Armor(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IArmor)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IArmor)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ArmorSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ArmorSetterTranslationCommon Instance = new ArmorSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IArmorInternal item,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IArmor item,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Armor_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.ObjectEffect) ?? true))
            {
                item.ObjectEffect = new FormLinkNullable<IEffectRecordGetter>(rhs.ObjectEffect.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.EnchantmentAmount) ?? true))
            {
                item.EnchantmentAmount = rhs.EnchantmentAmount;
            }
            if (!rhs.WorldModel.TryGet(out var rhsWorldModelitem))
            {
                item.WorldModel = null;
            }
            else
            {
                item.WorldModel = new GenderedItem<ArmorModel?>(
                    male: rhsWorldModelitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsWorldModelitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.BodyTemplate) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.BodyTemplate);
                try
                {
                    if(rhs.BodyTemplate.TryGet(out var rhsBodyTemplate))
                    {
                        item.BodyTemplate = rhsBodyTemplate.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.BodyTemplate));
                    }
                    else
                    {
                        item.BodyTemplate = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.PickUpSound) ?? true))
            {
                item.PickUpSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.PickUpSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.PutDownSound) ?? true))
            {
                item.PutDownSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.PutDownSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.RagdollConstraintTemplate) ?? true))
            {
                item.RagdollConstraintTemplate = rhs.RagdollConstraintTemplate;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.EquipmentType) ?? true))
            {
                item.EquipmentType = new FormLinkNullable<IEquipTypeGetter>(rhs.EquipmentType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.BashImpactDataSet) ?? true))
            {
                item.BashImpactDataSet = new FormLinkNullable<IImpactDataSetGetter>(rhs.BashImpactDataSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.AlternateBlockMaterial) ?? true))
            {
                item.AlternateBlockMaterial = new FormLinkNullable<IMaterialTypeGetter>(rhs.AlternateBlockMaterial.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Race) ?? true))
            {
                item.Race = new FormLinkNullable<IRaceGetter>(rhs.Race.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Armature) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.Armature);
                try
                {
                    item.Armature.SetTo(
                        rhs.Armature
                        .Select(r => (IFormLink<IArmorAddonGetter>)new FormLink<IArmorAddonGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.ArmorRating) ?? true))
            {
                item.ArmorRating = rhs.ArmorRating;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.TemplateArmor) ?? true))
            {
                item.TemplateArmor = new FormLinkNullable<IArmorGetter>(rhs.TemplateArmor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorInternal)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmor)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorInternal)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmor)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Armor DeepCopy(
            IArmorGetter item,
            Armor.TranslationMask? copyMask = null)
        {
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ((ArmorSetterTranslationCommon)((IArmorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Armor DeepCopy(
            IArmorGetter item,
            out Armor.ErrorMask errorMask,
            Armor.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ((ArmorSetterTranslationCommon)((IArmorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Armor.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Armor DeepCopy(
            IArmorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ((ArmorSetterTranslationCommon)((IArmorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Armor
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static Armor_Registration Registration => Armor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ArmorSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ArmorBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ArmorBinaryWriteTranslation Instance = new ArmorBinaryWriteTranslation();

        static partial void WriteBinaryBodyTemplateCustom(
            MutagenWriter writer,
            IArmorGetter item);

        public static void WriteBinaryBodyTemplate(
            MutagenWriter writer,
            IArmorGetter item)
        {
            WriteBinaryBodyTemplateCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IArmorGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IArmorGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObjectEffect,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.EITM));
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EnchantmentAmount,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.EAMT));
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.WorldModel,
                femaleRecordConverter: Armor_Registration.WorldModelFemaleConverter,
                maleRecordConverter: Armor_Registration.WorldModelMaleConverter,
                transl: (MutagenWriter subWriter, IArmorModelGetter? subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((ArmorModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
            ArmorBinaryWriteTranslation.WriteBinaryBodyTemplate(
                writer: writer,
                item: item);
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PickUpSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.YNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PutDownSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ZNAM));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RagdollConstraintTemplate,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.BMCT),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EquipmentType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ETYP));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BashImpactDataSet,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.BIDS));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AlternateBlockMaterial,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.BAMT));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Race,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.RNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLink<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IArmorAddonGetter>>.Instance.Write(
                writer: writer,
                items: item.Armature,
                transl: (MutagenWriter subWriter, IFormLink<IArmorAddonGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.MODL));
                });
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Value);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight);
            }
            FloatBinaryTranslation.Write(
                writer: writer,
                item: item.ArmorRating,
                integerType: FloatIntegerType.UInt,
                multiplier: 0.01,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TemplateArmor,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM));
        }

        public void Write(
            MutagenWriter writer,
            IArmorGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.ARMO),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IArmorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IArmorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IArmorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ArmorBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static ArmorBinaryCreateTranslation Instance = new ArmorBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ARMO;
        public static void FillBinaryStructs(
            IArmorInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IArmorInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)Armor_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Armor_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Armor_FieldIndex.Name;
                }
                case RecordTypeInts.EITM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObjectEffect = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Armor_FieldIndex.ObjectEffect;
                }
                case RecordTypeInts.EAMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EnchantmentAmount = frame.ReadUInt16();
                    return (int)Armor_FieldIndex.EnchantmentAmount;
                }
                case RecordTypeInts.MOD2:
                case RecordTypeInts.MOD4:
                case RecordTypeInts.ICO2:
                case RecordTypeInts.ICON:
                {
                    item.WorldModel = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<ArmorModel>(
                        frame: frame,
                        femaleRecordConverter: Armor_Registration.WorldModelFemaleConverter,
                        maleRecordConverter: Armor_Registration.WorldModelMaleConverter,
                        transl: ArmorModel.TryCreateFromBinary);
                    return (int)Armor_FieldIndex.WorldModel;
                }
                case RecordTypeInts.BODT:
                case RecordTypeInts.BOD2:
                {
                    ArmorBinaryCreateTranslation.FillBinaryBodyTemplateCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Armor_FieldIndex.BodyTemplate;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Fallout4.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Armor_FieldIndex.Destructible;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PickUpSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Armor_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PutDownSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Armor_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.BMCT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollConstraintTemplate = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Armor_FieldIndex.RagdollConstraintTemplate;
                }
                case RecordTypeInts.ETYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipmentType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Armor_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.BIDS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BashImpactDataSet = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Armor_FieldIndex.BashImpactDataSet;
                }
                case RecordTypeInts.BAMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AlternateBlockMaterial = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Armor_FieldIndex.AlternateBlockMaterial;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Race = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Armor_FieldIndex.Race;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.Parse(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<IKeywordGetter>>();
                    return (int)Armor_FieldIndex.Keywords;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Armor_FieldIndex.Description;
                }
                case RecordTypeInts.MODL:
                {
                    item.Armature.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IArmorAddonGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.MODL),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Armor_FieldIndex.Armature;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Value = dataFrame.ReadUInt32();
                    item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)Armor_FieldIndex.Weight;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ArmorRating = FloatBinaryTranslation.Parse(
                        frame: frame,
                        integerType: FloatIntegerType.UInt,
                        multiplier: 0.01);
                    return (int)Armor_FieldIndex.ArmorRating;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TemplateArmor = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Armor_FieldIndex.TemplateArmor;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryBodyTemplateCustom(
            MutagenFrame frame,
            IArmorInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ArmorBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ArmorBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IArmorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static Armor_Registration Registration => Armor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ArmorCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ArmorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Armor.MajorFlag MajorFlags => (Armor.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region ObjectEffect
        private int? _ObjectEffectLocation;
        public FormLinkNullable<IEffectRecordGetter> ObjectEffect => _ObjectEffectLocation.HasValue ? new FormLinkNullable<IEffectRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ObjectEffectLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEffectRecordGetter>.Null;
        #endregion
        #region EnchantmentAmount
        private int? _EnchantmentAmountLocation;
        public UInt16? EnchantmentAmount => _EnchantmentAmountLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EnchantmentAmountLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region WorldModel
        private IGenderedItemGetter<IArmorModelGetter?>? _WorldModelOverlay;
        public IGenderedItemGetter<IArmorModelGetter?>? WorldModel => _WorldModelOverlay;
        #endregion
        #region BodyTemplate
        partial void BodyTemplateCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public IBodyTemplateGetter? BodyTemplate => GetBodyTemplateCustom();
        #endregion
        public IDestructibleGetter? Destructible { get; private set; }
        #region PickUpSound
        private int? _PickUpSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> PickUpSound => _PickUpSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PickUpSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region PutDownSound
        private int? _PutDownSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> PutDownSound => _PutDownSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PutDownSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region RagdollConstraintTemplate
        private int? _RagdollConstraintTemplateLocation;
        public String? RagdollConstraintTemplate => _RagdollConstraintTemplateLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _RagdollConstraintTemplateLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region EquipmentType
        private int? _EquipmentTypeLocation;
        public FormLinkNullable<IEquipTypeGetter> EquipmentType => _EquipmentTypeLocation.HasValue ? new FormLinkNullable<IEquipTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EquipmentTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEquipTypeGetter>.Null;
        #endregion
        #region BashImpactDataSet
        private int? _BashImpactDataSetLocation;
        public FormLinkNullable<IImpactDataSetGetter> BashImpactDataSet => _BashImpactDataSetLocation.HasValue ? new FormLinkNullable<IImpactDataSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _BashImpactDataSetLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IImpactDataSetGetter>.Null;
        #endregion
        #region AlternateBlockMaterial
        private int? _AlternateBlockMaterialLocation;
        public FormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial => _AlternateBlockMaterialLocation.HasValue ? new FormLinkNullable<IMaterialTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AlternateBlockMaterialLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IMaterialTypeGetter>.Null;
        #endregion
        #region Race
        private int? _RaceLocation;
        public FormLinkNullable<IRaceGetter> Race => _RaceLocation.HasValue ? new FormLinkNullable<IRaceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _RaceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IRaceGetter>.Null;
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IFormLink<IArmorAddonGetter>> Armature { get; private set; } = ListExt.Empty<IFormLink<IArmorAddonGetter>>();
        private int? _DATALocation;
        public Armor.DATADataType DATADataTypeState { get; private set; }
        #region Value
        private int _ValueLocation => _DATALocation!.Value;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0x4;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? _data.Slice(_WeightLocation, 4).Float() : default;
        #endregion
        #region ArmorRating
        private int? _ArmorRatingLocation;
        public Single ArmorRating => _ArmorRatingLocation.HasValue ? FloatBinaryTranslation.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _ArmorRatingLocation.Value, _package.MetaData.Constants), FloatIntegerType.UInt, 0.01) : default;
        #endregion
        #region TemplateArmor
        private int? _TemplateArmorLocation;
        public FormLinkNullable<IArmorGetter> TemplateArmor => _TemplateArmorLocation.HasValue ? new FormLinkNullable<IArmorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _TemplateArmorLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IArmorGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ArmorBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ArmorBinaryOverlay ArmorFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new ArmorBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ArmorBinaryOverlay ArmorFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ArmorFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Armor_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Armor_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.Name;
                }
                case RecordTypeInts.EITM:
                {
                    _ObjectEffectLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.ObjectEffect;
                }
                case RecordTypeInts.EAMT:
                {
                    _EnchantmentAmountLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.EnchantmentAmount;
                }
                case RecordTypeInts.MOD2:
                case RecordTypeInts.MOD4:
                case RecordTypeInts.ICO2:
                case RecordTypeInts.ICON:
                {
                    _WorldModelOverlay = GenderedItemBinaryOverlay.Factory<IArmorModelGetter>(
                        package: _package,
                        stream: stream,
                        creator: (s, p, r) => ArmorModelBinaryOverlay.ArmorModelFactory(s, p, r),
                        femaleRecordConverter: Armor_Registration.WorldModelFemaleConverter,
                        maleRecordConverter: Armor_Registration.WorldModelMaleConverter);
                    return (int)Armor_FieldIndex.WorldModel;
                }
                case RecordTypeInts.BODT:
                case RecordTypeInts.BOD2:
                {
                    BodyTemplateCustomParse(
                        stream,
                        finalPos,
                        offset);
                    return (int)Armor_FieldIndex.BodyTemplate;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Armor_FieldIndex.Destructible;
                }
                case RecordTypeInts.YNAM:
                {
                    _PickUpSoundLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    _PutDownSoundLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.BMCT:
                {
                    _RagdollConstraintTemplateLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.RagdollConstraintTemplate;
                }
                case RecordTypeInts.ETYP:
                {
                    _EquipmentTypeLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.BIDS:
                {
                    _BashImpactDataSetLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.BashImpactDataSet;
                }
                case RecordTypeInts.BAMT:
                {
                    _AlternateBlockMaterialLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.AlternateBlockMaterial;
                }
                case RecordTypeInts.RNAM:
                {
                    _RaceLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.Race;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLink<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Armor_FieldIndex.Keywords;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.Description;
                }
                case RecordTypeInts.MODL:
                {
                    this.Armature = BinaryOverlayList.FactoryByArray<IFormLink<IArmorAddonGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IArmorAddonGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)Armor_FieldIndex.Armature;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Armor_FieldIndex.Weight;
                }
                case RecordTypeInts.DNAM:
                {
                    _ArmorRatingLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.ArmorRating;
                }
                case RecordTypeInts.TNAM:
                {
                    _TemplateArmorLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.TemplateArmor;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ArmorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IArmorGetter rhs)) return false;
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IArmorGetter? obj)
        {
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

