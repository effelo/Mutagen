/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PlacedArrow :
        APlacedTrap,
        IPlacedArrowInternal,
        ILoquiObjectSetter<PlacedArrow>,
        IEquatable<IPlacedArrowGetter>
    {
        #region Ctor
        protected PlacedArrow()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Projectile
        public FormLink<IProjectileGetter> Projectile { get; set; } = new FormLink<IProjectileGetter>();
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedArrowMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlacedArrowGetter rhs)) return false;
            return ((PlacedArrowCommon)((IPlacedArrowGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPlacedArrowGetter? obj)
        {
            return ((PlacedArrowCommon)((IPlacedArrowGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedArrowCommon)((IPlacedArrowGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APlacedTrap.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Projectile = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem EncounterZone,
                TItem Ownership,
                TItem HeadTrackingWeight,
                TItem FavorCost,
                TItem Reflections,
                TItem LinkedReferences,
                TItem ActivateParents,
                TItem EnableParent,
                TItem Emittance,
                TItem MultiBoundReference,
                TItem IgnoredBySandbox,
                TItem LocationRefTypes,
                TItem LocationReference,
                TItem DistantLodData,
                TItem Scale,
                TItem Placement,
                TItem Projectile)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                VirtualMachineAdapter: VirtualMachineAdapter,
                EncounterZone: EncounterZone,
                Ownership: Ownership,
                HeadTrackingWeight: HeadTrackingWeight,
                FavorCost: FavorCost,
                Reflections: Reflections,
                LinkedReferences: LinkedReferences,
                ActivateParents: ActivateParents,
                EnableParent: EnableParent,
                Emittance: Emittance,
                MultiBoundReference: MultiBoundReference,
                IgnoredBySandbox: IgnoredBySandbox,
                LocationRefTypes: LocationRefTypes,
                LocationReference: LocationReference,
                DistantLodData: DistantLodData,
                Scale: Scale,
                Placement: Placement)
            {
                this.Projectile = Projectile;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Projectile;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Projectile, rhs.Projectile)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Projectile);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Projectile)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Projectile)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedArrow.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Projectile = eval(this.Projectile);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PlacedArrow.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PlacedArrow.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PlacedArrow.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Projectile ?? true)
                    {
                        fg.AppendItem(Projectile, "Projectile");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APlacedTrap.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Projectile;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedArrow_FieldIndex enu = (PlacedArrow_FieldIndex)index;
                switch (enu)
                {
                    case PlacedArrow_FieldIndex.Projectile:
                        return Projectile;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedArrow_FieldIndex enu = (PlacedArrow_FieldIndex)index;
                switch (enu)
                {
                    case PlacedArrow_FieldIndex.Projectile:
                        this.Projectile = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedArrow_FieldIndex enu = (PlacedArrow_FieldIndex)index;
                switch (enu)
                {
                    case PlacedArrow_FieldIndex.Projectile:
                        this.Projectile = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Projectile != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Projectile, "Projectile");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Projectile = this.Projectile.Combine(rhs.Projectile);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APlacedTrap.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Projectile;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Projectile = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Projectile, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = PlacedArrow_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PlacedArrowCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedArrowSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedArrow(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private PlacedArrow(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal PlacedArrow(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public PlacedArrow(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public PlacedArrow(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedArrowBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedArrowBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static PlacedArrow CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PlacedArrow();
            ((PlacedArrowSetterCommon)((IPlacedArrowGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedArrow item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PlacedArrowSetterCommon)((IPlacedArrowGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedArrow GetNew()
        {
            return new PlacedArrow();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedArrow :
        IPlacedArrowGetter,
        IAPlacedTrap,
        ILoquiObjectSetter<IPlacedArrowInternal>,
        IFormLinkContainer
    {
        new FormLink<IProjectileGetter> Projectile { get; set; }
    }

    public partial interface IPlacedArrowInternal :
        IAPlacedTrapInternal,
        IPlacedArrow,
        IPlacedArrowGetter
    {
    }

    public partial interface IPlacedArrowGetter :
        IAPlacedTrapGetter,
        ILoquiObject<IPlacedArrowGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => PlacedArrow_Registration.Instance;
        FormLink<IProjectileGetter> Projectile { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedArrowMixIn
    {
        public static void Clear(this IPlacedArrowInternal item)
        {
            ((PlacedArrowSetterCommon)((IPlacedArrowGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedArrow.Mask<bool> GetEqualsMask(
            this IPlacedArrowGetter item,
            IPlacedArrowGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedArrowCommon)((IPlacedArrowGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPlacedArrowGetter item,
            string? name = null,
            PlacedArrow.Mask<bool>? printMask = null)
        {
            return ((PlacedArrowCommon)((IPlacedArrowGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPlacedArrowGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedArrow.Mask<bool>? printMask = null)
        {
            ((PlacedArrowCommon)((IPlacedArrowGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedArrowGetter item,
            IPlacedArrowGetter rhs)
        {
            return ((PlacedArrowCommon)((IPlacedArrowGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPlacedArrowInternal lhs,
            IPlacedArrowGetter rhs,
            out PlacedArrow.ErrorMask errorMask,
            PlacedArrow.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedArrowSetterTranslationCommon)((IPlacedArrowGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedArrow.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedArrowInternal lhs,
            IPlacedArrowGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedArrowSetterTranslationCommon)((IPlacedArrowGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedArrow DeepCopy(
            this IPlacedArrowGetter item,
            PlacedArrow.TranslationMask? copyMask = null)
        {
            return ((PlacedArrowSetterTranslationCommon)((IPlacedArrowGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedArrow DeepCopy(
            this IPlacedArrowGetter item,
            out PlacedArrow.ErrorMask errorMask,
            PlacedArrow.TranslationMask? copyMask = null)
        {
            return ((PlacedArrowSetterTranslationCommon)((IPlacedArrowGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedArrow DeepCopy(
            this IPlacedArrowGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedArrowSetterTranslationCommon)((IPlacedArrowGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedArrow Duplicate(
            this IPlacedArrowGetter item,
            FormKey formKey,
            PlacedArrow.TranslationMask? copyMask = null)
        {
            return ((PlacedArrowCommon)((IPlacedArrowGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedArrowInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedArrowSetterCommon)((IPlacedArrowGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PlacedArrow_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        EncounterZone = 7,
        Ownership = 8,
        HeadTrackingWeight = 9,
        FavorCost = 10,
        Reflections = 11,
        LinkedReferences = 12,
        ActivateParents = 13,
        EnableParent = 14,
        Emittance = 15,
        MultiBoundReference = 16,
        IgnoredBySandbox = 17,
        LocationRefTypes = 18,
        LocationReference = 19,
        DistantLodData = 20,
        Scale = 21,
        Placement = 22,
        Projectile = 23,
    }
    #endregion

    #region Registration
    public partial class PlacedArrow_Registration : ILoquiRegistration
    {
        public static readonly PlacedArrow_Registration Instance = new PlacedArrow_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 327,
            version: 0);

        public const string GUID = "0262d5fe-f5c8-4fcb-97ed-f717b2f6eb23";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 24;

        public static readonly Type MaskType = typeof(PlacedArrow.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedArrow.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedArrow);

        public static readonly Type GetterType = typeof(IPlacedArrowGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedArrow);

        public static readonly Type? InternalSetterType = typeof(IPlacedArrowInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.PlacedArrow";

        public const string Name = "PlacedArrow";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PARW;
        public static readonly Type BinaryWriteTranslation = typeof(PlacedArrowBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PlacedArrowSetterCommon : APlacedTrapSetterCommon
    {
        public new static readonly PlacedArrowSetterCommon Instance = new PlacedArrowSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedArrowInternal item)
        {
            ClearPartial();
            item.Projectile = FormLink<IProjectileGetter>.Null;
            base.Clear(item);
        }
        
        public override void Clear(IAPlacedTrapInternal item)
        {
            Clear(item: (IPlacedArrowInternal)item);
        }
        
        public override void Clear(IAPlacedInternal item)
        {
            Clear(item: (IPlacedArrowInternal)item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IPlacedArrowInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedArrowInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedArrow obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Projectile = obj.Projectile.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedArrowInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IPlacedArrowInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PlacedArrowBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedArrowBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPlacedTrapInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedArrow)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IAPlacedInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedArrow)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedArrow)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedArrow)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PlacedArrowCommon : APlacedTrapCommon
    {
        public new static readonly PlacedArrowCommon Instance = new PlacedArrowCommon();

        public PlacedArrow.Mask<bool> GetEqualsMask(
            IPlacedArrowGetter item,
            IPlacedArrowGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedArrow.Mask<bool>(false);
            ((PlacedArrowCommon)((IPlacedArrowGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedArrowGetter item,
            IPlacedArrowGetter rhs,
            PlacedArrow.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Projectile = item.Projectile.Equals(rhs.Projectile);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPlacedArrowGetter item,
            string? name = null,
            PlacedArrow.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPlacedArrowGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedArrow.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PlacedArrow =>");
            }
            else
            {
                fg.AppendLine($"{name} (PlacedArrow) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPlacedArrowGetter item,
            FileGeneration fg,
            PlacedArrow.Mask<bool>? printMask = null)
        {
            APlacedTrapCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Projectile ?? true)
            {
                fg.AppendItem(item.Projectile.FormKey, "Projectile");
            }
        }
        
        public static PlacedArrow_FieldIndex ConvertFieldIndex(APlacedTrap_FieldIndex index)
        {
            switch (index)
            {
                case APlacedTrap_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FormKey:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.VersionControl:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EditorID:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FormVersion:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Version2:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EncounterZone:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Ownership:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FavorCost:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Reflections:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LinkedReferences:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.ActivateParents:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EnableParent:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Emittance:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.MultiBoundReference:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LocationRefTypes:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LocationReference:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.DistantLodData:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Scale:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Placement:
                    return (PlacedArrow_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedArrow_FieldIndex ConvertFieldIndex(APlaced_FieldIndex index)
        {
            switch (index)
            {
                case APlaced_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlaced_FieldIndex.FormKey:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlaced_FieldIndex.VersionControl:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlaced_FieldIndex.EditorID:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlaced_FieldIndex.FormVersion:
                    return (PlacedArrow_FieldIndex)((int)index);
                case APlaced_FieldIndex.Version2:
                    return (PlacedArrow_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedArrow_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedArrow_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (PlacedArrow_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (PlacedArrow_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (PlacedArrow_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (PlacedArrow_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (PlacedArrow_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedArrow_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedArrow_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedArrow_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedArrow_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedArrow_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedArrowGetter? lhs,
            IPlacedArrowGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAPlacedTrapGetter)lhs, (IAPlacedTrapGetter)rhs)) return false;
            if (!lhs.Projectile.Equals(rhs.Projectile)) return false;
            return true;
        }
        
        public override bool Equals(
            IAPlacedTrapGetter? lhs,
            IAPlacedTrapGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedArrowGetter?)lhs,
                rhs: rhs as IPlacedArrowGetter);
        }
        
        public override bool Equals(
            IAPlacedGetter? lhs,
            IAPlacedGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedArrowGetter?)lhs,
                rhs: rhs as IPlacedArrowGetter);
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedArrowGetter?)lhs,
                rhs: rhs as IPlacedArrowGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedArrowGetter?)lhs,
                rhs: rhs as IPlacedArrowGetter);
        }
        
        public virtual int GetHashCode(IPlacedArrowGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Projectile);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPlacedTrapGetter item)
        {
            return GetHashCode(item: (IPlacedArrowGetter)item);
        }
        
        public override int GetHashCode(IAPlacedGetter item)
        {
            return GetHashCode(item: (IPlacedArrowGetter)item);
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedArrowGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedArrowGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedArrow.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPlacedArrowGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Projectile);
            yield break;
        }
        
        #region Duplicate
        public PlacedArrow Duplicate(
            IPlacedArrowGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedArrow(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override APlacedTrap Duplicate(
            IAPlacedTrapGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedArrow)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override APlaced Duplicate(
            IAPlacedGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedArrow)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedArrow)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedArrow)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class PlacedArrowSetterTranslationCommon : APlacedTrapSetterTranslationCommon
    {
        public new static readonly PlacedArrowSetterTranslationCommon Instance = new PlacedArrowSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedArrowInternal item,
            IPlacedArrowGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedArrow item,
            IPlacedArrowGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPlacedTrap)item,
                (IAPlacedTrapGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedArrow_FieldIndex.Projectile) ?? true))
            {
                item.Projectile = new FormLink<IProjectileGetter>(rhs.Projectile.FormKey);
            }
        }
        
        public override void DeepCopyIn(
            IAPlacedTrapInternal item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedArrowInternal)item,
                rhs: (IPlacedArrowGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlacedTrap item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedArrow)item,
                rhs: (IPlacedArrowGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlacedInternal item,
            IAPlacedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedArrowInternal)item,
                rhs: (IPlacedArrowGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlaced item,
            IAPlacedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedArrow)item,
                rhs: (IPlacedArrowGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedArrowInternal)item,
                rhs: (IPlacedArrowGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedArrow)item,
                rhs: (IPlacedArrowGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedArrowInternal)item,
                rhs: (IPlacedArrowGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedArrow)item,
                rhs: (IPlacedArrowGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedArrow DeepCopy(
            IPlacedArrowGetter item,
            PlacedArrow.TranslationMask? copyMask = null)
        {
            PlacedArrow ret = (PlacedArrow)((PlacedArrowCommon)((IPlacedArrowGetter)item).CommonInstance()!).GetNew();
            ((PlacedArrowSetterTranslationCommon)((IPlacedArrowGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedArrow DeepCopy(
            IPlacedArrowGetter item,
            out PlacedArrow.ErrorMask errorMask,
            PlacedArrow.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedArrow ret = (PlacedArrow)((PlacedArrowCommon)((IPlacedArrowGetter)item).CommonInstance()!).GetNew();
            ((PlacedArrowSetterTranslationCommon)((IPlacedArrowGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedArrow.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedArrow DeepCopy(
            IPlacedArrowGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedArrow ret = (PlacedArrow)((PlacedArrowCommon)((IPlacedArrowGetter)item).CommonInstance()!).GetNew();
            ((PlacedArrowSetterTranslationCommon)((IPlacedArrowGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PlacedArrow
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedArrow_Registration.Instance;
        public new static PlacedArrow_Registration Registration => PlacedArrow_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedArrowCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedArrowSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedArrowSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PlacedArrowBinaryWriteTranslation :
        APlacedTrapBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PlacedArrowBinaryWriteTranslation Instance = new PlacedArrowBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPlacedArrowGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            IPlacedArrowGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.PARW),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    APlacedTrapBinaryWriteTranslation.WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedArrowGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPlacedTrapGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedArrowGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPlacedGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedArrowGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedArrowGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedArrowGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PlacedArrowBinaryCreateTranslation : APlacedTrapBinaryCreateTranslation
    {
        public new readonly static PlacedArrowBinaryCreateTranslation Instance = new PlacedArrowBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PARW;
        public static void FillBinaryStructs(
            IPlacedArrowInternal item,
            MutagenFrame frame)
        {
            APlacedTrapBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PlacedArrowBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PlacedArrowBinaryOverlay :
        APlacedTrapBinaryOverlay,
        IPlacedArrowGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedArrow_Registration.Instance;
        public new static PlacedArrow_Registration Registration => PlacedArrow_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedArrowCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedArrowSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PlacedArrowCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedArrowBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedArrowBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedArrowBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PlacedArrowBinaryOverlay PlacedArrowFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new PlacedArrowBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PlacedArrowBinaryOverlay PlacedArrowFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PlacedArrowFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedArrowMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlacedArrowGetter rhs)) return false;
            return ((PlacedArrowCommon)((IPlacedArrowGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPlacedArrowGetter? obj)
        {
            return ((PlacedArrowCommon)((IPlacedArrowGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedArrowCommon)((IPlacedArrowGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

