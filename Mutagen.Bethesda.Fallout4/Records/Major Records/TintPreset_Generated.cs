/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class TintPreset :
        ITintPreset,
        ILoquiObjectSetter<TintPreset>,
        IEquatable<ITintPresetGetter>
    {
        #region Ctor
        public TintPreset()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Color
        public FormLinkNullable<IColorRecordGetter> Color { get; set; } = new FormLinkNullable<IColorRecordGetter>();
        #endregion
        #region DefaultValue
        public Single? DefaultValue { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ITintPresetGetter.DefaultValue => this.DefaultValue;
        #endregion
        #region Index
        public UInt16? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? ITintPresetGetter.Index => this.Index;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TintPresetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITintPresetGetter rhs)) return false;
            return ((TintPresetCommon)((ITintPresetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ITintPresetGetter? obj)
        {
            return ((TintPresetCommon)((ITintPresetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TintPresetCommon)((ITintPresetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Color = initialValue;
                this.DefaultValue = initialValue;
                this.Index = initialValue;
            }

            public Mask(
                TItem Color,
                TItem DefaultValue,
                TItem Index)
            {
                this.Color = Color;
                this.DefaultValue = DefaultValue;
                this.Index = Index;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Color;
            public TItem DefaultValue;
            public TItem Index;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.DefaultValue, rhs.DefaultValue)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Color);
                hash.Add(this.DefaultValue);
                hash.Add(this.Index);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Color)) return false;
                if (!eval(this.DefaultValue)) return false;
                if (!eval(this.Index)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Color)) return true;
                if (eval(this.DefaultValue)) return true;
                if (eval(this.Index)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TintPreset.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Color = eval(this.Color);
                obj.DefaultValue = eval(this.DefaultValue);
                obj.Index = eval(this.Index);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TintPreset.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TintPreset.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TintPreset.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Color ?? true)
                    {
                        fg.AppendItem(Color, "Color");
                    }
                    if (printMask?.DefaultValue ?? true)
                    {
                        fg.AppendItem(DefaultValue, "DefaultValue");
                    }
                    if (printMask?.Index ?? true)
                    {
                        fg.AppendItem(Index, "Index");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Color;
            public Exception? DefaultValue;
            public Exception? Index;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
                switch (enu)
                {
                    case TintPreset_FieldIndex.Color:
                        return Color;
                    case TintPreset_FieldIndex.DefaultValue:
                        return DefaultValue;
                    case TintPreset_FieldIndex.Index:
                        return Index;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
                switch (enu)
                {
                    case TintPreset_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case TintPreset_FieldIndex.DefaultValue:
                        this.DefaultValue = ex;
                        break;
                    case TintPreset_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
                switch (enu)
                {
                    case TintPreset_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case TintPreset_FieldIndex.DefaultValue:
                        this.DefaultValue = (Exception?)obj;
                        break;
                    case TintPreset_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Color != null) return true;
                if (DefaultValue != null) return true;
                if (Index != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Color, "Color");
                fg.AppendItem(DefaultValue, "DefaultValue");
                fg.AppendItem(Index, "Index");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Color = this.Color.Combine(rhs.Color);
                ret.DefaultValue = this.DefaultValue.Combine(rhs.DefaultValue);
                ret.Index = this.Index.Combine(rhs.Index);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Color;
            public bool DefaultValue;
            public bool Index;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Color = defaultOn;
                this.DefaultValue = defaultOn;
                this.Index = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Color, null));
                ret.Add((DefaultValue, null));
                ret.Add((Index, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<FormLinkInformation> ContainedFormLinks => TintPresetCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TintPresetSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintPresetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintPresetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static TintPreset CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TintPreset();
            ((TintPresetSetterCommon)((ITintPresetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TintPreset item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((TintPresetSetterCommon)((ITintPresetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TintPreset GetNew()
        {
            return new TintPreset();
        }

    }
    #endregion

    #region Interface
    public partial interface ITintPreset :
        ITintPresetGetter,
        ILoquiObjectSetter<ITintPreset>,
        IFormLinkContainer
    {
        new FormLinkNullable<IColorRecordGetter> Color { get; set; }
        new Single? DefaultValue { get; set; }
        new UInt16? Index { get; set; }
    }

    public partial interface ITintPresetGetter :
        ILoquiObject,
        ILoquiObject<ITintPresetGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => TintPreset_Registration.Instance;
        FormLinkNullable<IColorRecordGetter> Color { get; }
        Single? DefaultValue { get; }
        UInt16? Index { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TintPresetMixIn
    {
        public static void Clear(this ITintPreset item)
        {
            ((TintPresetSetterCommon)((ITintPresetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TintPreset.Mask<bool> GetEqualsMask(
            this ITintPresetGetter item,
            ITintPresetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITintPresetGetter item,
            string? name = null,
            TintPreset.Mask<bool>? printMask = null)
        {
            return ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITintPresetGetter item,
            FileGeneration fg,
            string? name = null,
            TintPreset.Mask<bool>? printMask = null)
        {
            ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITintPresetGetter item,
            ITintPresetGetter rhs)
        {
            return ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITintPreset lhs,
            ITintPresetGetter rhs)
        {
            ((TintPresetSetterTranslationCommon)((ITintPresetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITintPreset lhs,
            ITintPresetGetter rhs,
            TintPreset.TranslationMask? copyMask = null)
        {
            ((TintPresetSetterTranslationCommon)((ITintPresetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITintPreset lhs,
            ITintPresetGetter rhs,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TintPresetSetterTranslationCommon)((ITintPresetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TintPreset.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITintPreset lhs,
            ITintPresetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TintPresetSetterTranslationCommon)((ITintPresetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TintPreset DeepCopy(
            this ITintPresetGetter item,
            TintPreset.TranslationMask? copyMask = null)
        {
            return ((TintPresetSetterTranslationCommon)((ITintPresetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TintPreset DeepCopy(
            this ITintPresetGetter item,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? copyMask = null)
        {
            return ((TintPresetSetterTranslationCommon)((ITintPresetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TintPreset DeepCopy(
            this ITintPresetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TintPresetSetterTranslationCommon)((ITintPresetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITintPreset item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintPresetSetterCommon)((ITintPresetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum TintPreset_FieldIndex
    {
        Color = 0,
        DefaultValue = 1,
        Index = 2,
    }
    #endregion

    #region Registration
    public partial class TintPreset_Registration : ILoquiRegistration
    {
        public static readonly TintPreset_Registration Instance = new TintPreset_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 77,
            version: 0);

        public const string GUID = "3feb2956-21fb-4da7-870a-f55ae751eff0";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(TintPreset.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TintPreset.ErrorMask);

        public static readonly Type ClassType = typeof(TintPreset);

        public static readonly Type GetterType = typeof(ITintPresetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITintPreset);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.TintPreset";

        public const string Name = "TintPreset";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.TINC,
                        RecordTypes.TINV,
                        RecordTypes.TIRS
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(TintPresetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class TintPresetSetterCommon
    {
        public static readonly TintPresetSetterCommon Instance = new TintPresetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITintPreset item)
        {
            ClearPartial();
            item.Color = FormLinkNullable<IColorRecordGetter>.Null;
            item.DefaultValue = default;
            item.Index = default;
        }
        
        #region Mutagen
        public void RemapLinks(ITintPreset obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Color = obj.Color.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITintPreset item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: TintPresetBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TintPresetBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class TintPresetCommon
    {
        public static readonly TintPresetCommon Instance = new TintPresetCommon();

        public TintPreset.Mask<bool> GetEqualsMask(
            ITintPresetGetter item,
            ITintPresetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TintPreset.Mask<bool>(false);
            ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITintPresetGetter item,
            ITintPresetGetter rhs,
            TintPreset.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Color = item.Color.Equals(rhs.Color);
            ret.DefaultValue = item.DefaultValue.EqualsWithin(rhs.DefaultValue);
            ret.Index = item.Index == rhs.Index;
        }
        
        public string ToString(
            ITintPresetGetter item,
            string? name = null,
            TintPreset.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITintPresetGetter item,
            FileGeneration fg,
            string? name = null,
            TintPreset.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TintPreset =>");
            }
            else
            {
                fg.AppendLine($"{name} (TintPreset) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITintPresetGetter item,
            FileGeneration fg,
            TintPreset.Mask<bool>? printMask = null)
        {
            if (printMask?.Color ?? true)
            {
                fg.AppendItem(item.Color.FormKeyNullable, "Color");
            }
            if ((printMask?.DefaultValue ?? true)
                && item.DefaultValue.TryGet(out var DefaultValueItem))
            {
                fg.AppendItem(DefaultValueItem, "DefaultValue");
            }
            if ((printMask?.Index ?? true)
                && item.Index.TryGet(out var IndexItem))
            {
                fg.AppendItem(IndexItem, "Index");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITintPresetGetter? lhs,
            ITintPresetGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Color.Equals(rhs.Color)) return false;
            if (!lhs.DefaultValue.EqualsWithin(rhs.DefaultValue)) return false;
            if (lhs.Index != rhs.Index) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITintPresetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Color);
            if (item.DefaultValue.TryGet(out var DefaultValueitem))
            {
                hash.Add(DefaultValueitem);
            }
            if (item.Index.TryGet(out var Indexitem))
            {
                hash.Add(Indexitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TintPreset.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ITintPresetGetter obj)
        {
            if (obj.Color.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Color);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class TintPresetSetterTranslationCommon
    {
        public static readonly TintPresetSetterTranslationCommon Instance = new TintPresetSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITintPreset item,
            ITintPresetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)TintPreset_FieldIndex.Color) ?? true))
            {
                item.Color = new FormLinkNullable<IColorRecordGetter>(rhs.Color.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)TintPreset_FieldIndex.DefaultValue) ?? true))
            {
                item.DefaultValue = rhs.DefaultValue;
            }
            if ((copyMask?.GetShouldTranslate((int)TintPreset_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
        }
        
        #endregion
        
        public TintPreset DeepCopy(
            ITintPresetGetter item,
            TintPreset.TranslationMask? copyMask = null)
        {
            TintPreset ret = (TintPreset)((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).GetNew();
            ((TintPresetSetterTranslationCommon)((ITintPresetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TintPreset DeepCopy(
            ITintPresetGetter item,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TintPreset ret = (TintPreset)((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).GetNew();
            ((TintPresetSetterTranslationCommon)((ITintPresetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TintPreset.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TintPreset DeepCopy(
            ITintPresetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TintPreset ret = (TintPreset)((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).GetNew();
            ((TintPresetSetterTranslationCommon)((ITintPresetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class TintPreset
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintPreset_Registration.Instance;
        public static TintPreset_Registration Registration => TintPreset_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintPresetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TintPresetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintPresetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintPresetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITintPresetGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITintPresetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class TintPresetBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static TintPresetBinaryWriteTranslation Instance = new TintPresetBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ITintPresetGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Color,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TINC));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultValue,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TINV));
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TIRS));
        }

        public void Write(
            MutagenWriter writer,
            ITintPresetGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITintPresetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TintPresetBinaryCreateTranslation
    {
        public readonly static TintPresetBinaryCreateTranslation Instance = new TintPresetBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ITintPreset item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            ITintPreset item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TINC:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.Color) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Color = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)TintPreset_FieldIndex.Color;
                }
                case RecordTypeInts.TINV:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.DefaultValue) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultValue = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)TintPreset_FieldIndex.DefaultValue;
                }
                case RecordTypeInts.TIRS:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.Index) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt16();
                    return (int)TintPreset_FieldIndex.Index;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class TintPresetBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITintPresetGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintPresetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class TintPresetBinaryOverlay :
        BinaryOverlay,
        ITintPresetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintPreset_Registration.Instance;
        public static TintPreset_Registration Registration => TintPreset_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintPresetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintPresetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintPresetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITintPresetGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITintPresetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => TintPresetCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintPresetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintPresetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Color
        private int? _ColorLocation;
        public FormLinkNullable<IColorRecordGetter> Color => _ColorLocation.HasValue ? new FormLinkNullable<IColorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ColorLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IColorRecordGetter>.Null;
        #endregion
        #region DefaultValue
        private int? _DefaultValueLocation;
        public Single? DefaultValue => _DefaultValueLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _DefaultValueLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Index
        private int? _IndexLocation;
        public UInt16? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TintPresetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static TintPresetBinaryOverlay TintPresetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TintPresetBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static TintPresetBinaryOverlay TintPresetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return TintPresetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TINC:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.Color) return ParseResult.Stop;
                    _ColorLocation = (stream.Position - offset);
                    return (int)TintPreset_FieldIndex.Color;
                }
                case RecordTypeInts.TINV:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.DefaultValue) return ParseResult.Stop;
                    _DefaultValueLocation = (stream.Position - offset);
                    return (int)TintPreset_FieldIndex.DefaultValue;
                }
                case RecordTypeInts.TIRS:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.Index) return ParseResult.Stop;
                    _IndexLocation = (stream.Position - offset);
                    return (int)TintPreset_FieldIndex.Index;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TintPresetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITintPresetGetter rhs)) return false;
            return ((TintPresetCommon)((ITintPresetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ITintPresetGetter? obj)
        {
            return ((TintPresetCommon)((ITintPresetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TintPresetCommon)((ITintPresetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

