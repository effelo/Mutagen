/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PackageDataTopic :
        APackageData,
        IPackageDataTopic,
        ILoquiObjectSetter<PackageDataTopic>,
        IEquatable<IPackageDataTopicGetter>
    {
        #region Ctor
        public PackageDataTopic()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Topics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ATopicReference> _Topics = new ExtendedList<ATopicReference>();
        public ExtendedList<ATopicReference> Topics
        {
            get => this._Topics;
            protected set => this._Topics = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IATopicReferenceGetter> IPackageDataTopicGetter.Topics => _Topics;
        #endregion

        #endregion
        #region TPIC
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TPIC;
        public MemorySlice<Byte>? TPIC
        {
            get => this._TPIC;
            set => this._TPIC = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPackageDataTopicGetter.TPIC => this.TPIC;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageDataTopicMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPackageDataTopicGetter rhs)) return false;
            return ((PackageDataTopicCommon)((IPackageDataTopicGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPackageDataTopicGetter? obj)
        {
            return ((PackageDataTopicCommon)((IPackageDataTopicGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PackageDataTopicCommon)((IPackageDataTopicGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APackageData.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Topics = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>());
                this.TPIC = initialValue;
            }

            public Mask(
                TItem Name,
                TItem Flags,
                TItem Topics,
                TItem TPIC)
            : base(
                Name: Name,
                Flags: Flags)
            {
                this.Topics = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>?>(Topics, Enumerable.Empty<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>());
                this.TPIC = TPIC;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>?>? Topics;
            public TItem TPIC;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Topics, rhs.Topics)) return false;
                if (!object.Equals(this.TPIC, rhs.TPIC)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Topics);
                hash.Add(this.TPIC);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Topics != null)
                {
                    if (!eval(this.Topics.Overall)) return false;
                    if (this.Topics.Specific != null)
                    {
                        foreach (var item in this.Topics.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.TPIC)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Topics != null)
                {
                    if (eval(this.Topics.Overall)) return true;
                    if (this.Topics.Specific != null)
                    {
                        foreach (var item in this.Topics.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.TPIC)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PackageDataTopic.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Topics != null)
                {
                    obj.Topics = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ATopicReference.Mask<R>?>>?>(eval(this.Topics.Overall), Enumerable.Empty<MaskItemIndexed<R, ATopicReference.Mask<R>?>>());
                    if (Topics.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ATopicReference.Mask<R>?>>();
                        obj.Topics.Specific = l;
                        foreach (var item in Topics.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ATopicReference.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ATopicReference.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.TPIC = eval(this.TPIC);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PackageDataTopic.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PackageDataTopic.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PackageDataTopic.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.Topics?.Overall ?? true)
                        && Topics.TryGet(out var TopicsItem))
                    {
                        fg.AppendLine("Topics =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TopicsItem.Overall);
                            if (TopicsItem.Specific != null)
                            {
                                foreach (var subItem in TopicsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.TPIC ?? true)
                    {
                        fg.AppendItem(TPIC, "TPIC");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APackageData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>? Topics;
            public Exception? TPIC;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PackageDataTopic_FieldIndex enu = (PackageDataTopic_FieldIndex)index;
                switch (enu)
                {
                    case PackageDataTopic_FieldIndex.Topics:
                        return Topics;
                    case PackageDataTopic_FieldIndex.TPIC:
                        return TPIC;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PackageDataTopic_FieldIndex enu = (PackageDataTopic_FieldIndex)index;
                switch (enu)
                {
                    case PackageDataTopic_FieldIndex.Topics:
                        this.Topics = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>(ex, null);
                        break;
                    case PackageDataTopic_FieldIndex.TPIC:
                        this.TPIC = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PackageDataTopic_FieldIndex enu = (PackageDataTopic_FieldIndex)index;
                switch (enu)
                {
                    case PackageDataTopic_FieldIndex.Topics:
                        this.Topics = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>)obj;
                        break;
                    case PackageDataTopic_FieldIndex.TPIC:
                        this.TPIC = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Topics != null) return true;
                if (TPIC != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (Topics.TryGet(out var TopicsItem))
                {
                    fg.AppendLine("Topics =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TopicsItem.Overall);
                        if (TopicsItem.Specific != null)
                        {
                            foreach (var subItem in TopicsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(TPIC, "TPIC");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Topics = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>(ExceptionExt.Combine(this.Topics?.Overall, rhs.Topics?.Overall), ExceptionExt.Combine(this.Topics?.Specific, rhs.Topics?.Specific));
                ret.TPIC = this.TPIC.Combine(rhs.TPIC);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APackageData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ATopicReference.TranslationMask? Topics;
            public bool TPIC;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.TPIC = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Topics == null ? DefaultOn : !Topics.GetCrystal().CopyNothing, Topics?.GetCrystal()));
                ret.Add((TPIC, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PackageDataTopicCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PackageDataTopicSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PackageDataTopicBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageDataTopicBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static PackageDataTopic CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PackageDataTopic();
            ((PackageDataTopicSetterCommon)((IPackageDataTopicGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PackageDataTopic item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PackageDataTopicSetterCommon)((IPackageDataTopicGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PackageDataTopic GetNew()
        {
            return new PackageDataTopic();
        }

    }
    #endregion

    #region Interface
    public partial interface IPackageDataTopic :
        IPackageDataTopicGetter,
        IAPackageData,
        ILoquiObjectSetter<IPackageDataTopic>,
        IFormLinkContainer
    {
        new ExtendedList<ATopicReference> Topics { get; }
        new MemorySlice<Byte>? TPIC { get; set; }
    }

    public partial interface IPackageDataTopicGetter :
        IAPackageDataGetter,
        ILoquiObject<IPackageDataTopicGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => PackageDataTopic_Registration.Instance;
        IReadOnlyList<IATopicReferenceGetter> Topics { get; }
        ReadOnlyMemorySlice<Byte>? TPIC { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PackageDataTopicMixIn
    {
        public static void Clear(this IPackageDataTopic item)
        {
            ((PackageDataTopicSetterCommon)((IPackageDataTopicGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PackageDataTopic.Mask<bool> GetEqualsMask(
            this IPackageDataTopicGetter item,
            IPackageDataTopicGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PackageDataTopicCommon)((IPackageDataTopicGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPackageDataTopicGetter item,
            string? name = null,
            PackageDataTopic.Mask<bool>? printMask = null)
        {
            return ((PackageDataTopicCommon)((IPackageDataTopicGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPackageDataTopicGetter item,
            FileGeneration fg,
            string? name = null,
            PackageDataTopic.Mask<bool>? printMask = null)
        {
            ((PackageDataTopicCommon)((IPackageDataTopicGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPackageDataTopicGetter item,
            IPackageDataTopicGetter rhs)
        {
            return ((PackageDataTopicCommon)((IPackageDataTopicGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPackageDataTopic lhs,
            IPackageDataTopicGetter rhs,
            out PackageDataTopic.ErrorMask errorMask,
            PackageDataTopic.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PackageDataTopicSetterTranslationCommon)((IPackageDataTopicGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PackageDataTopic.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPackageDataTopic lhs,
            IPackageDataTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PackageDataTopicSetterTranslationCommon)((IPackageDataTopicGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PackageDataTopic DeepCopy(
            this IPackageDataTopicGetter item,
            PackageDataTopic.TranslationMask? copyMask = null)
        {
            return ((PackageDataTopicSetterTranslationCommon)((IPackageDataTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PackageDataTopic DeepCopy(
            this IPackageDataTopicGetter item,
            out PackageDataTopic.ErrorMask errorMask,
            PackageDataTopic.TranslationMask? copyMask = null)
        {
            return ((PackageDataTopicSetterTranslationCommon)((IPackageDataTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PackageDataTopic DeepCopy(
            this IPackageDataTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PackageDataTopicSetterTranslationCommon)((IPackageDataTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPackageDataTopic item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageDataTopicSetterCommon)((IPackageDataTopicGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PackageDataTopic_FieldIndex
    {
        Name = 0,
        Flags = 1,
        Topics = 2,
        TPIC = 3,
    }
    #endregion

    #region Registration
    public partial class PackageDataTopic_Registration : ILoquiRegistration
    {
        public static readonly PackageDataTopic_Registration Instance = new PackageDataTopic_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 393,
            version: 0);

        public const string GUID = "46e615e7-8460-4870-bbde-eed20364ae44";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(PackageDataTopic.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PackageDataTopic.ErrorMask);

        public static readonly Type ClassType = typeof(PackageDataTopic);

        public static readonly Type GetterType = typeof(IPackageDataTopicGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPackageDataTopic);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PackageDataTopic";

        public const string Name = "PackageDataTopic";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.BNAM,
                        RecordTypes.PNAM
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(PackageDataTopicBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PackageDataTopicSetterCommon : APackageDataSetterCommon
    {
        public new static readonly PackageDataTopicSetterCommon Instance = new PackageDataTopicSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPackageDataTopic item)
        {
            ClearPartial();
            item.Topics.Clear();
            item.TPIC = default;
            base.Clear(item);
        }
        
        public override void Clear(IAPackageData item)
        {
            Clear(item: (IPackageDataTopic)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPackageDataTopic obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Topics.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPackageDataTopic item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PackageDataTopicBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PackageDataTopicBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPackageData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PackageDataTopic)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PackageDataTopicCommon : APackageDataCommon
    {
        public new static readonly PackageDataTopicCommon Instance = new PackageDataTopicCommon();

        public PackageDataTopic.Mask<bool> GetEqualsMask(
            IPackageDataTopicGetter item,
            IPackageDataTopicGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PackageDataTopic.Mask<bool>(false);
            ((PackageDataTopicCommon)((IPackageDataTopicGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPackageDataTopicGetter item,
            IPackageDataTopicGetter rhs,
            PackageDataTopic.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Topics = item.Topics.CollectionEqualsHelper(
                rhs.Topics,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.TPIC = MemorySliceExt.Equal(item.TPIC, rhs.TPIC);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPackageDataTopicGetter item,
            string? name = null,
            PackageDataTopic.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPackageDataTopicGetter item,
            FileGeneration fg,
            string? name = null,
            PackageDataTopic.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PackageDataTopic =>");
            }
            else
            {
                fg.AppendLine($"{name} (PackageDataTopic) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPackageDataTopicGetter item,
            FileGeneration fg,
            PackageDataTopic.Mask<bool>? printMask = null)
        {
            APackageDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Topics?.Overall ?? true)
            {
                fg.AppendLine("Topics =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Topics)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.TPIC ?? true)
                && item.TPIC.TryGet(out var TPICItem))
            {
                fg.AppendLine($"TPIC => {SpanExt.ToHexString(TPICItem)}");
            }
        }
        
        public static PackageDataTopic_FieldIndex ConvertFieldIndex(APackageData_FieldIndex index)
        {
            switch (index)
            {
                case APackageData_FieldIndex.Name:
                    return (PackageDataTopic_FieldIndex)((int)index);
                case APackageData_FieldIndex.Flags:
                    return (PackageDataTopic_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPackageDataTopicGetter? lhs,
            IPackageDataTopicGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAPackageDataGetter)lhs, (IAPackageDataGetter)rhs)) return false;
            if (!lhs.Topics.SequenceEqualNullable(rhs.Topics)) return false;
            if (!MemorySliceExt.Equal(lhs.TPIC, rhs.TPIC)) return false;
            return true;
        }
        
        public override bool Equals(
            IAPackageDataGetter? lhs,
            IAPackageDataGetter? rhs)
        {
            return Equals(
                lhs: (IPackageDataTopicGetter?)lhs,
                rhs: rhs as IPackageDataTopicGetter);
        }
        
        public virtual int GetHashCode(IPackageDataTopicGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Topics);
            if (item.TPIC.TryGet(out var TPICItem))
            {
                hash.Add(TPICItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPackageDataGetter item)
        {
            return GetHashCode(item: (IPackageDataTopicGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PackageDataTopic.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPackageDataTopicGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Topics.WhereCastable<IATopicReferenceGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class PackageDataTopicSetterTranslationCommon : APackageDataSetterTranslationCommon
    {
        public new static readonly PackageDataTopicSetterTranslationCommon Instance = new PackageDataTopicSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPackageDataTopic item,
            IPackageDataTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPackageData)item,
                (IAPackageDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PackageDataTopic_FieldIndex.Topics) ?? true))
            {
                errorMask?.PushIndex((int)PackageDataTopic_FieldIndex.Topics);
                try
                {
                    item.Topics.SetTo(
                        rhs.Topics
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PackageDataTopic_FieldIndex.TPIC) ?? true))
            {
                if(rhs.TPIC.TryGet(out var TPICrhs))
                {
                    item.TPIC = TPICrhs.ToArray();
                }
                else
                {
                    item.TPIC = default;
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IAPackageData item,
            IAPackageDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPackageDataTopic)item,
                rhs: (IPackageDataTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PackageDataTopic DeepCopy(
            IPackageDataTopicGetter item,
            PackageDataTopic.TranslationMask? copyMask = null)
        {
            PackageDataTopic ret = (PackageDataTopic)((PackageDataTopicCommon)((IPackageDataTopicGetter)item).CommonInstance()!).GetNew();
            ((PackageDataTopicSetterTranslationCommon)((IPackageDataTopicGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PackageDataTopic DeepCopy(
            IPackageDataTopicGetter item,
            out PackageDataTopic.ErrorMask errorMask,
            PackageDataTopic.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PackageDataTopic ret = (PackageDataTopic)((PackageDataTopicCommon)((IPackageDataTopicGetter)item).CommonInstance()!).GetNew();
            ((PackageDataTopicSetterTranslationCommon)((IPackageDataTopicGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PackageDataTopic.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PackageDataTopic DeepCopy(
            IPackageDataTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PackageDataTopic ret = (PackageDataTopic)((PackageDataTopicCommon)((IPackageDataTopicGetter)item).CommonInstance()!).GetNew();
            ((PackageDataTopicSetterTranslationCommon)((IPackageDataTopicGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PackageDataTopic
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageDataTopic_Registration.Instance;
        public new static PackageDataTopic_Registration Registration => PackageDataTopic_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PackageDataTopicCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PackageDataTopicSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PackageDataTopicSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PackageDataTopicBinaryWriteTranslation :
        APackageDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PackageDataTopicBinaryWriteTranslation Instance = new PackageDataTopicBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IPackageDataTopicGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            APackageDataBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            IPackageDataTopicGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageDataTopicGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPackageDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageDataTopicGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PackageDataTopicBinaryCreateTranslation : APackageDataBinaryCreateTranslation
    {
        public new readonly static PackageDataTopicBinaryCreateTranslation Instance = new PackageDataTopicBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IPackageDataTopic item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                default:
                    return APackageDataBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PackageDataTopicBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PackageDataTopicBinaryOverlay :
        APackageDataBinaryOverlay,
        IPackageDataTopicGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageDataTopic_Registration.Instance;
        public new static PackageDataTopic_Registration Registration => PackageDataTopic_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PackageDataTopicCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PackageDataTopicSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PackageDataTopicCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PackageDataTopicBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageDataTopicBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PackageDataTopicBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PackageDataTopicBinaryOverlay PackageDataTopicFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PackageDataTopicBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PackageDataTopicBinaryOverlay PackageDataTopicFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PackageDataTopicFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageDataTopicMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPackageDataTopicGetter rhs)) return false;
            return ((PackageDataTopicCommon)((IPackageDataTopicGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPackageDataTopicGetter? obj)
        {
            return ((PackageDataTopicCommon)((IPackageDataTopicGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PackageDataTopicCommon)((IPackageDataTopicGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

