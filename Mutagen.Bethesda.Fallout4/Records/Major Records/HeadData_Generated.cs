/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class HeadData :
        IHeadData,
        ILoquiObjectSetter<HeadData>,
        IEquatable<IHeadDataGetter>
    {
        #region Ctor
        public HeadData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<HeadPartReference> _HeadParts = new ExtendedList<HeadPartReference>();
        public ExtendedList<HeadPartReference> HeadParts
        {
            get => this._HeadParts;
            protected set => this._HeadParts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IHeadPartReferenceGetter> IHeadDataGetter.HeadParts => _HeadParts;
        #endregion

        #endregion
        #region AvailableMorphs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AvailableMorphs? _AvailableMorphs;
        public AvailableMorphs? AvailableMorphs
        {
            get => _AvailableMorphs;
            set => _AvailableMorphs = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAvailableMorphsGetter? IHeadDataGetter.AvailableMorphs => this.AvailableMorphs;
        #endregion
        #region RacePresets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<INpcGetter>> _RacePresets = new ExtendedList<IFormLink<INpcGetter>>();
        public ExtendedList<IFormLink<INpcGetter>> RacePresets
        {
            get => this._RacePresets;
            protected set => this._RacePresets = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<INpcGetter>> IHeadDataGetter.RacePresets => _RacePresets;
        #endregion

        #endregion
        #region AvailableHairColors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IColorRecordGetter>> _AvailableHairColors = new ExtendedList<IFormLink<IColorRecordGetter>>();
        public ExtendedList<IFormLink<IColorRecordGetter>> AvailableHairColors
        {
            get => this._AvailableHairColors;
            protected set => this._AvailableHairColors = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IColorRecordGetter>> IHeadDataGetter.AvailableHairColors => _AvailableHairColors;
        #endregion

        #endregion
        #region FaceDetails
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<ITextureSetGetter>> _FaceDetails = new ExtendedList<IFormLink<ITextureSetGetter>>();
        public ExtendedList<IFormLink<ITextureSetGetter>> FaceDetails
        {
            get => this._FaceDetails;
            protected set => this._FaceDetails = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<ITextureSetGetter>> IHeadDataGetter.FaceDetails => _FaceDetails;
        #endregion

        #endregion
        #region DefaultFaceTexture
        public FormLinkNullable<ITextureSetGetter> DefaultFaceTexture { get; set; } = new FormLinkNullable<ITextureSetGetter>();
        #endregion
        #region TintMasks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TintAssets> _TintMasks = new ExtendedList<TintAssets>();
        public ExtendedList<TintAssets> TintMasks
        {
            get => this._TintMasks;
            protected set => this._TintMasks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITintAssetsGetter> IHeadDataGetter.TintMasks => _TintMasks;
        #endregion

        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IHeadDataGetter.Model => this.Model;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HeadDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IHeadDataGetter rhs)) return false;
            return ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IHeadDataGetter? obj)
        {
            return ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.HeadParts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>());
                this.AvailableMorphs = new MaskItem<TItem, AvailableMorphs.Mask<TItem>?>(initialValue, new AvailableMorphs.Mask<TItem>(initialValue));
                this.RacePresets = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.AvailableHairColors = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FaceDetails = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.DefaultFaceTexture = initialValue;
                this.TintMasks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintAssets.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TintAssets.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem HeadParts,
                TItem AvailableMorphs,
                TItem RacePresets,
                TItem AvailableHairColors,
                TItem FaceDetails,
                TItem DefaultFaceTexture,
                TItem TintMasks,
                TItem Model)
            {
                this.HeadParts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>?>(HeadParts, Enumerable.Empty<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>());
                this.AvailableMorphs = new MaskItem<TItem, AvailableMorphs.Mask<TItem>?>(AvailableMorphs, new AvailableMorphs.Mask<TItem>(AvailableMorphs));
                this.RacePresets = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RacePresets, Enumerable.Empty<(int Index, TItem Value)>());
                this.AvailableHairColors = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AvailableHairColors, Enumerable.Empty<(int Index, TItem Value)>());
                this.FaceDetails = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(FaceDetails, Enumerable.Empty<(int Index, TItem Value)>());
                this.DefaultFaceTexture = DefaultFaceTexture;
                this.TintMasks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintAssets.Mask<TItem>?>>?>(TintMasks, Enumerable.Empty<MaskItemIndexed<TItem, TintAssets.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>?>? HeadParts;
            public MaskItem<TItem, AvailableMorphs.Mask<TItem>?>? AvailableMorphs { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RacePresets;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AvailableHairColors;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? FaceDetails;
            public TItem DefaultFaceTexture;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintAssets.Mask<TItem>?>>?>? TintMasks;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.AvailableMorphs, rhs.AvailableMorphs)) return false;
                if (!object.Equals(this.RacePresets, rhs.RacePresets)) return false;
                if (!object.Equals(this.AvailableHairColors, rhs.AvailableHairColors)) return false;
                if (!object.Equals(this.FaceDetails, rhs.FaceDetails)) return false;
                if (!object.Equals(this.DefaultFaceTexture, rhs.DefaultFaceTexture)) return false;
                if (!object.Equals(this.TintMasks, rhs.TintMasks)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.HeadParts);
                hash.Add(this.AvailableMorphs);
                hash.Add(this.RacePresets);
                hash.Add(this.AvailableHairColors);
                hash.Add(this.FaceDetails);
                hash.Add(this.DefaultFaceTexture);
                hash.Add(this.TintMasks);
                hash.Add(this.Model);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (this.HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AvailableMorphs != null)
                {
                    if (!eval(this.AvailableMorphs.Overall)) return false;
                    if (this.AvailableMorphs.Specific != null && !this.AvailableMorphs.Specific.All(eval)) return false;
                }
                if (this.RacePresets != null)
                {
                    if (!eval(this.RacePresets.Overall)) return false;
                    if (this.RacePresets.Specific != null)
                    {
                        foreach (var item in this.RacePresets.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AvailableHairColors != null)
                {
                    if (!eval(this.AvailableHairColors.Overall)) return false;
                    if (this.AvailableHairColors.Specific != null)
                    {
                        foreach (var item in this.AvailableHairColors.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.FaceDetails != null)
                {
                    if (!eval(this.FaceDetails.Overall)) return false;
                    if (this.FaceDetails.Specific != null)
                    {
                        foreach (var item in this.FaceDetails.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.DefaultFaceTexture)) return false;
                if (this.TintMasks != null)
                {
                    if (!eval(this.TintMasks.Overall)) return false;
                    if (this.TintMasks.Specific != null)
                    {
                        foreach (var item in this.TintMasks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (this.HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AvailableMorphs != null)
                {
                    if (eval(this.AvailableMorphs.Overall)) return true;
                    if (this.AvailableMorphs.Specific != null && this.AvailableMorphs.Specific.Any(eval)) return true;
                }
                if (this.RacePresets != null)
                {
                    if (eval(this.RacePresets.Overall)) return true;
                    if (this.RacePresets.Specific != null)
                    {
                        foreach (var item in this.RacePresets.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AvailableHairColors != null)
                {
                    if (eval(this.AvailableHairColors.Overall)) return true;
                    if (this.AvailableHairColors.Specific != null)
                    {
                        foreach (var item in this.AvailableHairColors.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.FaceDetails != null)
                {
                    if (eval(this.FaceDetails.Overall)) return true;
                    if (this.FaceDetails.Specific != null)
                    {
                        foreach (var item in this.FaceDetails.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.DefaultFaceTexture)) return true;
                if (this.TintMasks != null)
                {
                    if (eval(this.TintMasks.Overall)) return true;
                    if (this.TintMasks.Specific != null)
                    {
                        foreach (var item in this.TintMasks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HeadData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                if (HeadParts != null)
                {
                    obj.HeadParts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, HeadPartReference.Mask<R>?>>?>(eval(this.HeadParts.Overall), Enumerable.Empty<MaskItemIndexed<R, HeadPartReference.Mask<R>?>>());
                    if (HeadParts.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, HeadPartReference.Mask<R>?>>();
                        obj.HeadParts.Specific = l;
                        foreach (var item in HeadParts.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, HeadPartReference.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, HeadPartReference.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.AvailableMorphs = this.AvailableMorphs == null ? null : new MaskItem<R, AvailableMorphs.Mask<R>?>(eval(this.AvailableMorphs.Overall), this.AvailableMorphs.Specific?.Translate(eval));
                if (RacePresets != null)
                {
                    obj.RacePresets = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RacePresets.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RacePresets.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RacePresets.Specific = l;
                        foreach (var item in RacePresets.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (AvailableHairColors != null)
                {
                    obj.AvailableHairColors = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AvailableHairColors.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AvailableHairColors.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AvailableHairColors.Specific = l;
                        foreach (var item in AvailableHairColors.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (FaceDetails != null)
                {
                    obj.FaceDetails = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.FaceDetails.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (FaceDetails.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.FaceDetails.Specific = l;
                        foreach (var item in FaceDetails.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.DefaultFaceTexture = eval(this.DefaultFaceTexture);
                if (TintMasks != null)
                {
                    obj.TintMasks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TintAssets.Mask<R>?>>?>(eval(this.TintMasks.Overall), Enumerable.Empty<MaskItemIndexed<R, TintAssets.Mask<R>?>>());
                    if (TintMasks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TintAssets.Mask<R>?>>();
                        obj.TintMasks.Specific = l;
                        foreach (var item in TintMasks.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, TintAssets.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, TintAssets.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(HeadData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, HeadData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(HeadData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.HeadParts?.Overall ?? true)
                        && HeadParts.TryGet(out var HeadPartsItem))
                    {
                        fg.AppendLine("HeadParts =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(HeadPartsItem.Overall);
                            if (HeadPartsItem.Specific != null)
                            {
                                foreach (var subItem in HeadPartsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.AvailableMorphs?.Overall ?? true)
                    {
                        AvailableMorphs?.ToString(fg);
                    }
                    if ((printMask?.RacePresets?.Overall ?? true)
                        && RacePresets.TryGet(out var RacePresetsItem))
                    {
                        fg.AppendLine("RacePresets =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RacePresetsItem.Overall);
                            if (RacePresetsItem.Specific != null)
                            {
                                foreach (var subItem in RacePresetsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.AvailableHairColors?.Overall ?? true)
                        && AvailableHairColors.TryGet(out var AvailableHairColorsItem))
                    {
                        fg.AppendLine("AvailableHairColors =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AvailableHairColorsItem.Overall);
                            if (AvailableHairColorsItem.Specific != null)
                            {
                                foreach (var subItem in AvailableHairColorsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.FaceDetails?.Overall ?? true)
                        && FaceDetails.TryGet(out var FaceDetailsItem))
                    {
                        fg.AppendLine("FaceDetails =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(FaceDetailsItem.Overall);
                            if (FaceDetailsItem.Specific != null)
                            {
                                foreach (var subItem in FaceDetailsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DefaultFaceTexture ?? true)
                    {
                        fg.AppendItem(DefaultFaceTexture, "DefaultFaceTexture");
                    }
                    if ((printMask?.TintMasks?.Overall ?? true)
                        && TintMasks.TryGet(out var TintMasksItem))
                    {
                        fg.AppendLine("TintMasks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TintMasksItem.Overall);
                            if (TintMasksItem.Specific != null)
                            {
                                foreach (var subItem in TintMasksItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>? HeadParts;
            public MaskItem<Exception?, AvailableMorphs.ErrorMask?>? AvailableMorphs;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RacePresets;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AvailableHairColors;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? FaceDetails;
            public Exception? DefaultFaceTexture;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintAssets.ErrorMask?>>?>? TintMasks;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
                switch (enu)
                {
                    case HeadData_FieldIndex.HeadParts:
                        return HeadParts;
                    case HeadData_FieldIndex.AvailableMorphs:
                        return AvailableMorphs;
                    case HeadData_FieldIndex.RacePresets:
                        return RacePresets;
                    case HeadData_FieldIndex.AvailableHairColors:
                        return AvailableHairColors;
                    case HeadData_FieldIndex.FaceDetails:
                        return FaceDetails;
                    case HeadData_FieldIndex.DefaultFaceTexture:
                        return DefaultFaceTexture;
                    case HeadData_FieldIndex.TintMasks:
                        return TintMasks;
                    case HeadData_FieldIndex.Model:
                        return Model;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
                switch (enu)
                {
                    case HeadData_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.AvailableMorphs:
                        this.AvailableMorphs = new MaskItem<Exception?, AvailableMorphs.ErrorMask?>(ex, null);
                        break;
                    case HeadData_FieldIndex.RacePresets:
                        this.RacePresets = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.AvailableHairColors:
                        this.AvailableHairColors = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.FaceDetails:
                        this.FaceDetails = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.DefaultFaceTexture:
                        this.DefaultFaceTexture = ex;
                        break;
                    case HeadData_FieldIndex.TintMasks:
                        this.TintMasks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintAssets.ErrorMask?>>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
                switch (enu)
                {
                    case HeadData_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>)obj;
                        break;
                    case HeadData_FieldIndex.AvailableMorphs:
                        this.AvailableMorphs = (MaskItem<Exception?, AvailableMorphs.ErrorMask?>?)obj;
                        break;
                    case HeadData_FieldIndex.RacePresets:
                        this.RacePresets = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadData_FieldIndex.AvailableHairColors:
                        this.AvailableHairColors = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadData_FieldIndex.FaceDetails:
                        this.FaceDetails = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadData_FieldIndex.DefaultFaceTexture:
                        this.DefaultFaceTexture = (Exception?)obj;
                        break;
                    case HeadData_FieldIndex.TintMasks:
                        this.TintMasks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintAssets.ErrorMask?>>?>)obj;
                        break;
                    case HeadData_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (HeadParts != null) return true;
                if (AvailableMorphs != null) return true;
                if (RacePresets != null) return true;
                if (AvailableHairColors != null) return true;
                if (FaceDetails != null) return true;
                if (DefaultFaceTexture != null) return true;
                if (TintMasks != null) return true;
                if (Model != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                if (HeadParts.TryGet(out var HeadPartsItem))
                {
                    fg.AppendLine("HeadParts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(HeadPartsItem.Overall);
                        if (HeadPartsItem.Specific != null)
                        {
                            foreach (var subItem in HeadPartsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                AvailableMorphs?.ToString(fg);
                if (RacePresets.TryGet(out var RacePresetsItem))
                {
                    fg.AppendLine("RacePresets =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RacePresetsItem.Overall);
                        if (RacePresetsItem.Specific != null)
                        {
                            foreach (var subItem in RacePresetsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (AvailableHairColors.TryGet(out var AvailableHairColorsItem))
                {
                    fg.AppendLine("AvailableHairColors =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AvailableHairColorsItem.Overall);
                        if (AvailableHairColorsItem.Specific != null)
                        {
                            foreach (var subItem in AvailableHairColorsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (FaceDetails.TryGet(out var FaceDetailsItem))
                {
                    fg.AppendLine("FaceDetails =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(FaceDetailsItem.Overall);
                        if (FaceDetailsItem.Specific != null)
                        {
                            foreach (var subItem in FaceDetailsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DefaultFaceTexture, "DefaultFaceTexture");
                if (TintMasks.TryGet(out var TintMasksItem))
                {
                    fg.AppendLine("TintMasks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TintMasksItem.Overall);
                        if (TintMasksItem.Specific != null)
                        {
                            foreach (var subItem in TintMasksItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Model?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.HeadParts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>(ExceptionExt.Combine(this.HeadParts?.Overall, rhs.HeadParts?.Overall), ExceptionExt.Combine(this.HeadParts?.Specific, rhs.HeadParts?.Specific));
                ret.AvailableMorphs = this.AvailableMorphs.Combine(rhs.AvailableMorphs, (l, r) => l.Combine(r));
                ret.RacePresets = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.RacePresets?.Overall, rhs.RacePresets?.Overall), ExceptionExt.Combine(this.RacePresets?.Specific, rhs.RacePresets?.Specific));
                ret.AvailableHairColors = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.AvailableHairColors?.Overall, rhs.AvailableHairColors?.Overall), ExceptionExt.Combine(this.AvailableHairColors?.Specific, rhs.AvailableHairColors?.Specific));
                ret.FaceDetails = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.FaceDetails?.Overall, rhs.FaceDetails?.Overall), ExceptionExt.Combine(this.FaceDetails?.Specific, rhs.FaceDetails?.Specific));
                ret.DefaultFaceTexture = this.DefaultFaceTexture.Combine(rhs.DefaultFaceTexture);
                ret.TintMasks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintAssets.ErrorMask?>>?>(ExceptionExt.Combine(this.TintMasks?.Overall, rhs.TintMasks?.Overall), ExceptionExt.Combine(this.TintMasks?.Specific, rhs.TintMasks?.Specific));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public HeadPartReference.TranslationMask? HeadParts;
            public AvailableMorphs.TranslationMask? AvailableMorphs;
            public bool RacePresets;
            public bool AvailableHairColors;
            public bool FaceDetails;
            public bool DefaultFaceTexture;
            public TintAssets.TranslationMask? TintMasks;
            public Model.TranslationMask? Model;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.RacePresets = defaultOn;
                this.AvailableHairColors = defaultOn;
                this.FaceDetails = defaultOn;
                this.DefaultFaceTexture = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((HeadParts == null ? DefaultOn : !HeadParts.GetCrystal().CopyNothing, HeadParts?.GetCrystal()));
                ret.Add((AvailableMorphs != null ? AvailableMorphs.OnOverall : DefaultOn, AvailableMorphs?.GetCrystal()));
                ret.Add((RacePresets, null));
                ret.Add((AvailableHairColors, null));
                ret.Add((FaceDetails, null));
                ret.Add((DefaultFaceTexture, null));
                ret.Add((TintMasks == null ? DefaultOn : !TintMasks.GetCrystal().CopyNothing, TintMasks?.GetCrystal()));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<FormLinkInformation> ContainedFormLinks => HeadDataCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => HeadDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HeadDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static HeadData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new HeadData();
            ((HeadDataSetterCommon)((IHeadDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out HeadData item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((HeadDataSetterCommon)((IHeadDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static HeadData GetNew()
        {
            return new HeadData();
        }

    }
    #endregion

    #region Interface
    public partial interface IHeadData :
        IHeadDataGetter,
        IModeled,
        ILoquiObjectSetter<IHeadData>,
        IFormLinkContainer
    {
        new ExtendedList<HeadPartReference> HeadParts { get; }
        new AvailableMorphs? AvailableMorphs { get; set; }
        new ExtendedList<IFormLink<INpcGetter>> RacePresets { get; }
        new ExtendedList<IFormLink<IColorRecordGetter>> AvailableHairColors { get; }
        new ExtendedList<IFormLink<ITextureSetGetter>> FaceDetails { get; }
        new FormLinkNullable<ITextureSetGetter> DefaultFaceTexture { get; set; }
        new ExtendedList<TintAssets> TintMasks { get; }
        new Model? Model { get; set; }
    }

    public partial interface IHeadDataGetter :
        ILoquiObject,
        IModeledGetter,
        ILoquiObject<IHeadDataGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => HeadData_Registration.Instance;
        IReadOnlyList<IHeadPartReferenceGetter> HeadParts { get; }
        IAvailableMorphsGetter? AvailableMorphs { get; }
        IReadOnlyList<IFormLink<INpcGetter>> RacePresets { get; }
        IReadOnlyList<IFormLink<IColorRecordGetter>> AvailableHairColors { get; }
        IReadOnlyList<IFormLink<ITextureSetGetter>> FaceDetails { get; }
        FormLinkNullable<ITextureSetGetter> DefaultFaceTexture { get; }
        IReadOnlyList<ITintAssetsGetter> TintMasks { get; }
        IModelGetter? Model { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class HeadDataMixIn
    {
        public static void Clear(this IHeadData item)
        {
            ((HeadDataSetterCommon)((IHeadDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HeadData.Mask<bool> GetEqualsMask(
            this IHeadDataGetter item,
            IHeadDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IHeadDataGetter item,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            return ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IHeadDataGetter item,
            FileGeneration fg,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IHeadDataGetter item,
            IHeadDataGetter rhs)
        {
            return ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IHeadData lhs,
            IHeadDataGetter rhs)
        {
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IHeadData lhs,
            IHeadDataGetter rhs,
            HeadData.TranslationMask? copyMask = null)
        {
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IHeadData lhs,
            IHeadDataGetter rhs,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = HeadData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHeadData lhs,
            IHeadDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static HeadData DeepCopy(
            this IHeadDataGetter item,
            HeadData.TranslationMask? copyMask = null)
        {
            return ((HeadDataSetterTranslationCommon)((IHeadDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HeadData DeepCopy(
            this IHeadDataGetter item,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? copyMask = null)
        {
            return ((HeadDataSetterTranslationCommon)((IHeadDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HeadData DeepCopy(
            this IHeadDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HeadDataSetterTranslationCommon)((IHeadDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IHeadData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadDataSetterCommon)((IHeadDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum HeadData_FieldIndex
    {
        HeadParts = 0,
        AvailableMorphs = 1,
        RacePresets = 2,
        AvailableHairColors = 3,
        FaceDetails = 4,
        DefaultFaceTexture = 5,
        TintMasks = 6,
        Model = 7,
    }
    #endregion

    #region Registration
    public partial class HeadData_Registration : ILoquiRegistration
    {
        public static readonly HeadData_Registration Instance = new HeadData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 72,
            version: 0);

        public const string GUID = "c0a94c29-c6cd-4b72-b019-b2af3b6b2b34";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(HeadData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HeadData.ErrorMask);

        public static readonly Type ClassType = typeof(HeadData);

        public static readonly Type GetterType = typeof(IHeadDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHeadData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.HeadData";

        public const string Name = "HeadData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.INDX,
                        RecordTypes.HEAD,
                        RecordTypes.MPAI,
                        RecordTypes.RPRM,
                        RecordTypes.AHCM,
                        RecordTypes.FTSM,
                        RecordTypes.DFTM,
                        RecordTypes.TINI,
                        RecordTypes.TINT,
                        RecordTypes.TINP,
                        RecordTypes.TIND,
                        RecordTypes.TINC,
                        RecordTypes.TINV,
                        RecordTypes.TIRS,
                        RecordTypes.MODL
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(HeadDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class HeadDataSetterCommon
    {
        public static readonly HeadDataSetterCommon Instance = new HeadDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHeadData item)
        {
            ClearPartial();
            item.HeadParts.Clear();
            item.AvailableMorphs = null;
            item.RacePresets.Clear();
            item.AvailableHairColors.Clear();
            item.FaceDetails.Clear();
            item.DefaultFaceTexture = FormLinkNullable<ITextureSetGetter>.Null;
            item.TintMasks.Clear();
            item.Model = null;
        }
        
        #region Mutagen
        public void RemapLinks(IHeadData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.HeadParts.RemapLinks(mapping);
            obj.RacePresets.RemapLinks(mapping);
            obj.AvailableHairColors.RemapLinks(mapping);
            obj.FaceDetails.RemapLinks(mapping);
            obj.DefaultFaceTexture = obj.DefaultFaceTexture.Relink(mapping);
            obj.TintMasks.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IHeadData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: HeadDataBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: HeadDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class HeadDataCommon
    {
        public static readonly HeadDataCommon Instance = new HeadDataCommon();

        public HeadData.Mask<bool> GetEqualsMask(
            IHeadDataGetter item,
            IHeadDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HeadData.Mask<bool>(false);
            ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHeadDataGetter item,
            IHeadDataGetter rhs,
            HeadData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.HeadParts = item.HeadParts.CollectionEqualsHelper(
                rhs.HeadParts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AvailableMorphs = EqualsMaskHelper.EqualsHelper(
                item.AvailableMorphs,
                rhs.AvailableMorphs,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.RacePresets = item.RacePresets.CollectionEqualsHelper(
                rhs.RacePresets,
                (l, r) => object.Equals(l, r),
                include);
            ret.AvailableHairColors = item.AvailableHairColors.CollectionEqualsHelper(
                rhs.AvailableHairColors,
                (l, r) => object.Equals(l, r),
                include);
            ret.FaceDetails = item.FaceDetails.CollectionEqualsHelper(
                rhs.FaceDetails,
                (l, r) => object.Equals(l, r),
                include);
            ret.DefaultFaceTexture = item.DefaultFaceTexture.Equals(rhs.DefaultFaceTexture);
            ret.TintMasks = item.TintMasks.CollectionEqualsHelper(
                rhs.TintMasks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IHeadDataGetter item,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IHeadDataGetter item,
            FileGeneration fg,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"HeadData =>");
            }
            else
            {
                fg.AppendLine($"{name} (HeadData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IHeadDataGetter item,
            FileGeneration fg,
            HeadData.Mask<bool>? printMask = null)
        {
            if (printMask?.HeadParts?.Overall ?? true)
            {
                fg.AppendLine("HeadParts =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.HeadParts)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.AvailableMorphs?.Overall ?? true)
                && item.AvailableMorphs.TryGet(out var AvailableMorphsItem))
            {
                AvailableMorphsItem?.ToString(fg, "AvailableMorphs");
            }
            if (printMask?.RacePresets?.Overall ?? true)
            {
                fg.AppendLine("RacePresets =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.RacePresets)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.AvailableHairColors?.Overall ?? true)
            {
                fg.AppendLine("AvailableHairColors =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.AvailableHairColors)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.FaceDetails?.Overall ?? true)
            {
                fg.AppendLine("FaceDetails =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.FaceDetails)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DefaultFaceTexture ?? true)
            {
                fg.AppendItem(item.DefaultFaceTexture.FormKeyNullable, "DefaultFaceTexture");
            }
            if (printMask?.TintMasks?.Overall ?? true)
            {
                fg.AppendLine("TintMasks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.TintMasks)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHeadDataGetter? lhs,
            IHeadDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.HeadParts.SequenceEqualNullable(rhs.HeadParts)) return false;
            if (!object.Equals(lhs.AvailableMorphs, rhs.AvailableMorphs)) return false;
            if (!lhs.RacePresets.SequenceEqualNullable(rhs.RacePresets)) return false;
            if (!lhs.AvailableHairColors.SequenceEqualNullable(rhs.AvailableHairColors)) return false;
            if (!lhs.FaceDetails.SequenceEqualNullable(rhs.FaceDetails)) return false;
            if (!lhs.DefaultFaceTexture.Equals(rhs.DefaultFaceTexture)) return false;
            if (!lhs.TintMasks.SequenceEqualNullable(rhs.TintMasks)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IHeadDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.HeadParts);
            if (item.AvailableMorphs.TryGet(out var AvailableMorphsitem))
            {
                hash.Add(AvailableMorphsitem);
            }
            hash.Add(item.RacePresets);
            hash.Add(item.AvailableHairColors);
            hash.Add(item.FaceDetails);
            hash.Add(item.DefaultFaceTexture);
            hash.Add(item.TintMasks);
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return HeadData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IHeadDataGetter obj)
        {
            foreach (var item in obj.HeadParts.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.RacePresets)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.AvailableHairColors)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.FaceDetails)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.DefaultFaceTexture.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.DefaultFaceTexture);
            }
            foreach (var item in obj.TintMasks.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class HeadDataSetterTranslationCommon
    {
        public static readonly HeadDataSetterTranslationCommon Instance = new HeadDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IHeadData item,
            IHeadDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.SetTo(
                        rhs.HeadParts
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.AvailableMorphs) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.AvailableMorphs);
                try
                {
                    if(rhs.AvailableMorphs.TryGet(out var rhsAvailableMorphs))
                    {
                        item.AvailableMorphs = rhsAvailableMorphs.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)HeadData_FieldIndex.AvailableMorphs));
                    }
                    else
                    {
                        item.AvailableMorphs = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.RacePresets) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.RacePresets);
                try
                {
                    item.RacePresets.SetTo(
                        rhs.RacePresets
                        .Select(r => (IFormLink<INpcGetter>)new FormLink<INpcGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.AvailableHairColors) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.AvailableHairColors);
                try
                {
                    item.AvailableHairColors.SetTo(
                        rhs.AvailableHairColors
                        .Select(r => (IFormLink<IColorRecordGetter>)new FormLink<IColorRecordGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.FaceDetails) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.FaceDetails);
                try
                {
                    item.FaceDetails.SetTo(
                        rhs.FaceDetails
                        .Select(r => (IFormLink<ITextureSetGetter>)new FormLink<ITextureSetGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.DefaultFaceTexture) ?? true))
            {
                item.DefaultFaceTexture = new FormLinkNullable<ITextureSetGetter>(rhs.DefaultFaceTexture.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.TintMasks) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.TintMasks);
                try
                {
                    item.TintMasks.SetTo(
                        rhs.TintMasks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)HeadData_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public HeadData DeepCopy(
            IHeadDataGetter item,
            HeadData.TranslationMask? copyMask = null)
        {
            HeadData ret = (HeadData)((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetNew();
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public HeadData DeepCopy(
            IHeadDataGetter item,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            HeadData ret = (HeadData)((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetNew();
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = HeadData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public HeadData DeepCopy(
            IHeadDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HeadData ret = (HeadData)((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetNew();
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class HeadData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadData_Registration.Instance;
        public static HeadData_Registration Registration => HeadData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HeadDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return HeadDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HeadDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class HeadDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static HeadDataBinaryWriteTranslation Instance = new HeadDataBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IHeadDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IHeadPartReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.HeadParts,
                transl: (MutagenWriter subWriter, IHeadPartReferenceGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((HeadPartReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.AvailableMorphs.TryGet(out var AvailableMorphsItem))
            {
                ((AvailableMorphsBinaryWriteTranslation)((IBinaryItem)AvailableMorphsItem).BinaryWriteTranslator).Write(
                    item: AvailableMorphsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<INpcGetter>>.Instance.Write(
                writer: writer,
                items: item.RacePresets,
                transl: (MutagenWriter subWriter, IFormLink<INpcGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.RPRM));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IColorRecordGetter>>.Instance.Write(
                writer: writer,
                items: item.AvailableHairColors,
                transl: (MutagenWriter subWriter, IFormLink<IColorRecordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.AHCM));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ITextureSetGetter>>.Instance.Write(
                writer: writer,
                items: item.FaceDetails,
                transl: (MutagenWriter subWriter, IFormLink<ITextureSetGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.FTSM));
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultFaceTexture,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DFTM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ITintAssetsGetter>.Instance.Write(
                writer: writer,
                items: item.TintMasks,
                transl: (MutagenWriter subWriter, ITintAssetsGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((TintAssetsBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IHeadDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IHeadDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class HeadDataBinaryCreateTranslation
    {
        public readonly static HeadDataBinaryCreateTranslation Instance = new HeadDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IHeadData item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IHeadData item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.INDX:
                case RecordTypeInts.HEAD:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.HeadParts) return ParseResult.Stop;
                    item.HeadParts.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<HeadPartReference>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: HeadPartReference_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: HeadPartReference.TryCreateFromBinary));
                    return (int)HeadData_FieldIndex.HeadParts;
                }
                case RecordTypeInts.MPAI:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.AvailableMorphs) return ParseResult.Stop;
                    item.AvailableMorphs = Mutagen.Bethesda.Fallout4.AvailableMorphs.CreateFromBinary(frame: frame);
                    return (int)HeadData_FieldIndex.AvailableMorphs;
                }
                case RecordTypeInts.RPRM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.RacePresets) return ParseResult.Stop;
                    item.RacePresets.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<INpcGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.RPRM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)HeadData_FieldIndex.RacePresets;
                }
                case RecordTypeInts.AHCM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.AvailableHairColors) return ParseResult.Stop;
                    item.AvailableHairColors.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IColorRecordGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.AHCM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)HeadData_FieldIndex.AvailableHairColors;
                }
                case RecordTypeInts.FTSM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.FaceDetails) return ParseResult.Stop;
                    item.FaceDetails.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ITextureSetGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.FTSM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)HeadData_FieldIndex.FaceDetails;
                }
                case RecordTypeInts.DFTM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.DefaultFaceTexture) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultFaceTexture = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)HeadData_FieldIndex.DefaultFaceTexture;
                }
                case RecordTypeInts.TINI:
                case RecordTypeInts.TINT:
                case RecordTypeInts.TINP:
                case RecordTypeInts.TIND:
                case RecordTypeInts.TINC:
                case RecordTypeInts.TINV:
                case RecordTypeInts.TIRS:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.TintMasks) return ParseResult.Stop;
                    item.TintMasks.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<TintAssets>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: TintAssets_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: TintAssets.TryCreateFromBinary));
                    return (int)HeadData_FieldIndex.TintMasks;
                }
                case RecordTypeInts.MODL:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.Model) return ParseResult.Stop;
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)HeadData_FieldIndex.Model;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class HeadDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IHeadDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class HeadDataBinaryOverlay :
        BinaryOverlay,
        IHeadDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadData_Registration.Instance;
        public static HeadData_Registration Registration => HeadData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HeadDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HeadDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IHeadDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => HeadDataCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HeadDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public IReadOnlyList<IHeadPartReferenceGetter> HeadParts { get; private set; } = ListExt.Empty<HeadPartReferenceBinaryOverlay>();
        public IAvailableMorphsGetter? AvailableMorphs { get; private set; }
        public IReadOnlyList<IFormLink<INpcGetter>> RacePresets { get; private set; } = ListExt.Empty<IFormLink<INpcGetter>>();
        public IReadOnlyList<IFormLink<IColorRecordGetter>> AvailableHairColors { get; private set; } = ListExt.Empty<IFormLink<IColorRecordGetter>>();
        public IReadOnlyList<IFormLink<ITextureSetGetter>> FaceDetails { get; private set; } = ListExt.Empty<IFormLink<ITextureSetGetter>>();
        #region DefaultFaceTexture
        private int? _DefaultFaceTextureLocation;
        public FormLinkNullable<ITextureSetGetter> DefaultFaceTexture => _DefaultFaceTextureLocation.HasValue ? new FormLinkNullable<ITextureSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _DefaultFaceTextureLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ITextureSetGetter>.Null;
        #endregion
        public IReadOnlyList<ITintAssetsGetter> TintMasks { get; private set; } = ListExt.Empty<TintAssetsBinaryOverlay>();
        public IModelGetter? Model { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected HeadDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static HeadDataBinaryOverlay HeadDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new HeadDataBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static HeadDataBinaryOverlay HeadDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return HeadDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.INDX:
                case RecordTypeInts.HEAD:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.HeadParts) return ParseResult.Stop;
                    this.HeadParts = this.ParseRepeatedTypelessSubrecord<HeadPartReferenceBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: HeadPartReference_Registration.TriggeringRecordTypes,
                        factory:  HeadPartReferenceBinaryOverlay.HeadPartReferenceFactory);
                    return (int)HeadData_FieldIndex.HeadParts;
                }
                case RecordTypeInts.MPAI:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.AvailableMorphs) return ParseResult.Stop;
                    this.AvailableMorphs = AvailableMorphsBinaryOverlay.AvailableMorphsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)HeadData_FieldIndex.AvailableMorphs;
                }
                case RecordTypeInts.RPRM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.RacePresets) return ParseResult.Stop;
                    this.RacePresets = BinaryOverlayList.FactoryByArray<IFormLink<INpcGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<INpcGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)HeadData_FieldIndex.RacePresets;
                }
                case RecordTypeInts.AHCM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.AvailableHairColors) return ParseResult.Stop;
                    this.AvailableHairColors = BinaryOverlayList.FactoryByArray<IFormLink<IColorRecordGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IColorRecordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)HeadData_FieldIndex.AvailableHairColors;
                }
                case RecordTypeInts.FTSM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.FaceDetails) return ParseResult.Stop;
                    this.FaceDetails = BinaryOverlayList.FactoryByArray<IFormLink<ITextureSetGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<ITextureSetGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)HeadData_FieldIndex.FaceDetails;
                }
                case RecordTypeInts.DFTM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.DefaultFaceTexture) return ParseResult.Stop;
                    _DefaultFaceTextureLocation = (stream.Position - offset);
                    return (int)HeadData_FieldIndex.DefaultFaceTexture;
                }
                case RecordTypeInts.TINI:
                case RecordTypeInts.TINT:
                case RecordTypeInts.TINP:
                case RecordTypeInts.TIND:
                case RecordTypeInts.TINC:
                case RecordTypeInts.TINV:
                case RecordTypeInts.TIRS:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.TintMasks) return ParseResult.Stop;
                    this.TintMasks = this.ParseRepeatedTypelessSubrecord<TintAssetsBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: TintAssets_Registration.TriggeringRecordTypes,
                        factory:  TintAssetsBinaryOverlay.TintAssetsFactory);
                    return (int)HeadData_FieldIndex.TintMasks;
                }
                case RecordTypeInts.MODL:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.Model) return ParseResult.Stop;
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)HeadData_FieldIndex.Model;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HeadDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IHeadDataGetter rhs)) return false;
            return ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IHeadDataGetter? obj)
        {
            return ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

