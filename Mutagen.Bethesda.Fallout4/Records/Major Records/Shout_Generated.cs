/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Shout :
        ASpell,
        IShoutInternal,
        ILoquiObjectSetter<Shout>,
        IEquatable<IShoutGetter>
    {
        #region Ctor
        protected Shout()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IShoutGetter.Name => this.Name;
        #endregion
        #region MenuDisplayObject
        public FormLinkNullable<IStaticGetter> MenuDisplayObject { get; set; } = new FormLinkNullable<IStaticGetter>();
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IShoutGetter.Description => this.Description;
        #endregion
        #region WordsOfPower
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ShoutWord> _WordsOfPower = new ExtendedList<ShoutWord>();
        public ExtendedList<ShoutWord> WordsOfPower
        {
            get => this._WordsOfPower;
            protected set => this._WordsOfPower = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IShoutWordGetter> IShoutGetter.WordsOfPower => _WordsOfPower;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ShoutMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IShoutGetter rhs)) return false;
            return ((ShoutCommon)((IShoutGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IShoutGetter? obj)
        {
            return ((ShoutCommon)((IShoutGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ShoutCommon)((IShoutGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ASpell.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.MenuDisplayObject = initialValue;
                this.Description = initialValue;
                this.WordsOfPower = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ShoutWord.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ShoutWord.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem MenuDisplayObject,
                TItem Description,
                TItem WordsOfPower)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.MenuDisplayObject = MenuDisplayObject;
                this.Description = Description;
                this.WordsOfPower = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ShoutWord.Mask<TItem>?>>?>(WordsOfPower, Enumerable.Empty<MaskItemIndexed<TItem, ShoutWord.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem MenuDisplayObject;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ShoutWord.Mask<TItem>?>>?>? WordsOfPower;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.MenuDisplayObject, rhs.MenuDisplayObject)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.WordsOfPower, rhs.WordsOfPower)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.MenuDisplayObject);
                hash.Add(this.Description);
                hash.Add(this.WordsOfPower);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.MenuDisplayObject)) return false;
                if (!eval(this.Description)) return false;
                if (this.WordsOfPower != null)
                {
                    if (!eval(this.WordsOfPower.Overall)) return false;
                    if (this.WordsOfPower.Specific != null)
                    {
                        foreach (var item in this.WordsOfPower.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.MenuDisplayObject)) return true;
                if (eval(this.Description)) return true;
                if (this.WordsOfPower != null)
                {
                    if (eval(this.WordsOfPower.Overall)) return true;
                    if (this.WordsOfPower.Specific != null)
                    {
                        foreach (var item in this.WordsOfPower.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Shout.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.MenuDisplayObject = eval(this.MenuDisplayObject);
                obj.Description = eval(this.Description);
                if (WordsOfPower != null)
                {
                    obj.WordsOfPower = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ShoutWord.Mask<R>?>>?>(eval(this.WordsOfPower.Overall), Enumerable.Empty<MaskItemIndexed<R, ShoutWord.Mask<R>?>>());
                    if (WordsOfPower.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ShoutWord.Mask<R>?>>();
                        obj.WordsOfPower.Specific = l;
                        foreach (var item in WordsOfPower.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ShoutWord.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ShoutWord.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Shout.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Shout.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Shout.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.MenuDisplayObject ?? true)
                    {
                        fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if ((printMask?.WordsOfPower?.Overall ?? true)
                        && WordsOfPower.TryGet(out var WordsOfPowerItem))
                    {
                        fg.AppendLine("WordsOfPower =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(WordsOfPowerItem.Overall);
                            if (WordsOfPowerItem.Specific != null)
                            {
                                foreach (var subItem in WordsOfPowerItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ASpell.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? MenuDisplayObject;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ShoutWord.ErrorMask?>>?>? WordsOfPower;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Shout_FieldIndex enu = (Shout_FieldIndex)index;
                switch (enu)
                {
                    case Shout_FieldIndex.Name:
                        return Name;
                    case Shout_FieldIndex.MenuDisplayObject:
                        return MenuDisplayObject;
                    case Shout_FieldIndex.Description:
                        return Description;
                    case Shout_FieldIndex.WordsOfPower:
                        return WordsOfPower;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Shout_FieldIndex enu = (Shout_FieldIndex)index;
                switch (enu)
                {
                    case Shout_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Shout_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = ex;
                        break;
                    case Shout_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Shout_FieldIndex.WordsOfPower:
                        this.WordsOfPower = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ShoutWord.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Shout_FieldIndex enu = (Shout_FieldIndex)index;
                switch (enu)
                {
                    case Shout_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Shout_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = (Exception?)obj;
                        break;
                    case Shout_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Shout_FieldIndex.WordsOfPower:
                        this.WordsOfPower = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ShoutWord.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (MenuDisplayObject != null) return true;
                if (Description != null) return true;
                if (WordsOfPower != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                fg.AppendItem(Description, "Description");
                if (WordsOfPower.TryGet(out var WordsOfPowerItem))
                {
                    fg.AppendLine("WordsOfPower =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(WordsOfPowerItem.Overall);
                        if (WordsOfPowerItem.Specific != null)
                        {
                            foreach (var subItem in WordsOfPowerItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.MenuDisplayObject = this.MenuDisplayObject.Combine(rhs.MenuDisplayObject);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.WordsOfPower = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ShoutWord.ErrorMask?>>?>(ExceptionExt.Combine(this.WordsOfPower?.Overall, rhs.WordsOfPower?.Overall), ExceptionExt.Combine(this.WordsOfPower?.Specific, rhs.WordsOfPower?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ASpell.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool MenuDisplayObject;
            public bool Description;
            public ShoutWord.TranslationMask? WordsOfPower;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.MenuDisplayObject = defaultOn;
                this.Description = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((MenuDisplayObject, null));
                ret.Add((Description, null));
                ret.Add((WordsOfPower == null ? DefaultOn : !WordsOfPower.GetCrystal().CopyNothing, WordsOfPower?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Shout_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ShoutCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ShoutSetterCommon.Instance.RemapLinks(this, mapping);
        public Shout(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Shout(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Shout(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Shout(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Shout(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ShoutBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ShoutBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Shout CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Shout();
            ((ShoutSetterCommon)((IShoutGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Shout item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ShoutSetterCommon)((IShoutGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Shout GetNew()
        {
            return new Shout();
        }

    }
    #endregion

    #region Interface
    public partial interface IShout :
        IShoutGetter,
        IASpell,
        IObjectId,
        ITranslatedNamed,
        ILoquiObjectSetter<IShoutInternal>,
        IFormLinkContainer
    {
        new TranslatedString? Name { get; set; }
        new FormLinkNullable<IStaticGetter> MenuDisplayObject { get; set; }
        new TranslatedString? Description { get; set; }
        new ExtendedList<ShoutWord> WordsOfPower { get; }
        #region Mutagen
        new Shout.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IShoutInternal :
        IASpellInternal,
        IShout,
        IShoutGetter
    {
    }

    public partial interface IShoutGetter :
        IASpellGetter,
        IObjectIdGetter,
        ITranslatedNamedGetter,
        ILoquiObject<IShoutGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Shout_Registration.Instance;
        ITranslatedStringGetter? Name { get; }
        FormLinkNullable<IStaticGetter> MenuDisplayObject { get; }
        ITranslatedStringGetter? Description { get; }
        IReadOnlyList<IShoutWordGetter> WordsOfPower { get; }

        #region Mutagen
        Shout.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class ShoutMixIn
    {
        public static void Clear(this IShoutInternal item)
        {
            ((ShoutSetterCommon)((IShoutGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Shout.Mask<bool> GetEqualsMask(
            this IShoutGetter item,
            IShoutGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ShoutCommon)((IShoutGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IShoutGetter item,
            string? name = null,
            Shout.Mask<bool>? printMask = null)
        {
            return ((ShoutCommon)((IShoutGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IShoutGetter item,
            FileGeneration fg,
            string? name = null,
            Shout.Mask<bool>? printMask = null)
        {
            ((ShoutCommon)((IShoutGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IShoutGetter item,
            IShoutGetter rhs)
        {
            return ((ShoutCommon)((IShoutGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IShoutInternal lhs,
            IShoutGetter rhs,
            out Shout.ErrorMask errorMask,
            Shout.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ShoutSetterTranslationCommon)((IShoutGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Shout.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IShoutInternal lhs,
            IShoutGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ShoutSetterTranslationCommon)((IShoutGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Shout DeepCopy(
            this IShoutGetter item,
            Shout.TranslationMask? copyMask = null)
        {
            return ((ShoutSetterTranslationCommon)((IShoutGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Shout DeepCopy(
            this IShoutGetter item,
            out Shout.ErrorMask errorMask,
            Shout.TranslationMask? copyMask = null)
        {
            return ((ShoutSetterTranslationCommon)((IShoutGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Shout DeepCopy(
            this IShoutGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ShoutSetterTranslationCommon)((IShoutGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Shout Duplicate(
            this IShoutGetter item,
            FormKey formKey,
            Shout.TranslationMask? copyMask = null)
        {
            return ((ShoutCommon)((IShoutGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IShoutInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ShoutSetterCommon)((IShoutGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Shout_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        MenuDisplayObject = 7,
        Description = 8,
        WordsOfPower = 9,
    }
    #endregion

    #region Registration
    public partial class Shout_Registration : ILoquiRegistration
    {
        public static readonly Shout_Registration Instance = new Shout_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 147,
            version: 0);

        public const string GUID = "61a903b0-ef7c-4014-a0b3-ed1fbc0c4a81";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(Shout.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Shout.ErrorMask);

        public static readonly Type ClassType = typeof(Shout);

        public static readonly Type GetterType = typeof(IShoutGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IShout);

        public static readonly Type? InternalSetterType = typeof(IShoutInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Shout";

        public const string Name = "Shout";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SHOU;
        public static readonly Type BinaryWriteTranslation = typeof(ShoutBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ShoutSetterCommon : ASpellSetterCommon
    {
        public new static readonly ShoutSetterCommon Instance = new ShoutSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IShoutInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.MenuDisplayObject = FormLinkNullable<IStaticGetter>.Null;
            item.Description = default;
            item.WordsOfPower.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IASpellInternal item)
        {
            Clear(item: (IShoutInternal)item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IShoutInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IShoutInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IShout obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.MenuDisplayObject = obj.MenuDisplayObject.Relink(mapping);
            obj.WordsOfPower.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IShoutInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IShoutInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ShoutBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ShoutBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IASpellInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Shout)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Shout)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Shout)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ShoutCommon : ASpellCommon
    {
        public new static readonly ShoutCommon Instance = new ShoutCommon();

        public Shout.Mask<bool> GetEqualsMask(
            IShoutGetter item,
            IShoutGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Shout.Mask<bool>(false);
            ((ShoutCommon)((IShoutGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IShoutGetter item,
            IShoutGetter rhs,
            Shout.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.MenuDisplayObject = item.MenuDisplayObject.Equals(rhs.MenuDisplayObject);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.WordsOfPower = item.WordsOfPower.CollectionEqualsHelper(
                rhs.WordsOfPower,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IShoutGetter item,
            string? name = null,
            Shout.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IShoutGetter item,
            FileGeneration fg,
            string? name = null,
            Shout.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Shout =>");
            }
            else
            {
                fg.AppendLine($"{name} (Shout) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IShoutGetter item,
            FileGeneration fg,
            Shout.Mask<bool>? printMask = null)
        {
            ASpellCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.MenuDisplayObject ?? true)
            {
                fg.AppendItem(item.MenuDisplayObject.FormKeyNullable, "MenuDisplayObject");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.WordsOfPower?.Overall ?? true)
            {
                fg.AppendLine("WordsOfPower =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.WordsOfPower)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static Shout_FieldIndex ConvertFieldIndex(ASpell_FieldIndex index)
        {
            switch (index)
            {
                case ASpell_FieldIndex.MajorRecordFlagsRaw:
                    return (Shout_FieldIndex)((int)index);
                case ASpell_FieldIndex.FormKey:
                    return (Shout_FieldIndex)((int)index);
                case ASpell_FieldIndex.VersionControl:
                    return (Shout_FieldIndex)((int)index);
                case ASpell_FieldIndex.EditorID:
                    return (Shout_FieldIndex)((int)index);
                case ASpell_FieldIndex.FormVersion:
                    return (Shout_FieldIndex)((int)index);
                case ASpell_FieldIndex.Version2:
                    return (Shout_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Shout_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Shout_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Shout_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Shout_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Shout_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Shout_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Shout_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Shout_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Shout_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Shout_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Shout_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Shout_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IShoutGetter? lhs,
            IShoutGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IASpellGetter)lhs, (IASpellGetter)rhs)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.MenuDisplayObject.Equals(rhs.MenuDisplayObject)) return false;
            if (!object.Equals(lhs.Description, rhs.Description)) return false;
            if (!lhs.WordsOfPower.SequenceEqualNullable(rhs.WordsOfPower)) return false;
            return true;
        }
        
        public override bool Equals(
            IASpellGetter? lhs,
            IASpellGetter? rhs)
        {
            return Equals(
                lhs: (IShoutGetter?)lhs,
                rhs: rhs as IShoutGetter);
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IShoutGetter?)lhs,
                rhs: rhs as IShoutGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IShoutGetter?)lhs,
                rhs: rhs as IShoutGetter);
        }
        
        public virtual int GetHashCode(IShoutGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.MenuDisplayObject);
            if (item.Description.TryGet(out var Descriptionitem))
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.WordsOfPower);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IASpellGetter item)
        {
            return GetHashCode(item: (IShoutGetter)item);
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IShoutGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IShoutGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Shout.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IShoutGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.MenuDisplayObject.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.MenuDisplayObject);
            }
            foreach (var item in obj.WordsOfPower.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public Shout Duplicate(
            IShoutGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Shout(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override ASpell Duplicate(
            IASpellGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IShout)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IShout)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IShout)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ShoutSetterTranslationCommon : ASpellSetterTranslationCommon
    {
        public new static readonly ShoutSetterTranslationCommon Instance = new ShoutSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IShoutInternal item,
            IShoutGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IShout item,
            IShoutGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IASpell)item,
                (IASpellGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Shout_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Shout_FieldIndex.MenuDisplayObject) ?? true))
            {
                item.MenuDisplayObject = new FormLinkNullable<IStaticGetter>(rhs.MenuDisplayObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Shout_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Shout_FieldIndex.WordsOfPower) ?? true))
            {
                errorMask?.PushIndex((int)Shout_FieldIndex.WordsOfPower);
                try
                {
                    item.WordsOfPower.SetTo(
                        rhs.WordsOfPower
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IASpellInternal item,
            IASpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IShoutInternal)item,
                rhs: (IShoutGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IASpell item,
            IASpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IShout)item,
                rhs: (IShoutGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IShoutInternal)item,
                rhs: (IShoutGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IShout)item,
                rhs: (IShoutGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IShoutInternal)item,
                rhs: (IShoutGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IShout)item,
                rhs: (IShoutGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Shout DeepCopy(
            IShoutGetter item,
            Shout.TranslationMask? copyMask = null)
        {
            Shout ret = (Shout)((ShoutCommon)((IShoutGetter)item).CommonInstance()!).GetNew();
            ((ShoutSetterTranslationCommon)((IShoutGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Shout DeepCopy(
            IShoutGetter item,
            out Shout.ErrorMask errorMask,
            Shout.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Shout ret = (Shout)((ShoutCommon)((IShoutGetter)item).CommonInstance()!).GetNew();
            ((ShoutSetterTranslationCommon)((IShoutGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Shout.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Shout DeepCopy(
            IShoutGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Shout ret = (Shout)((ShoutCommon)((IShoutGetter)item).CommonInstance()!).GetNew();
            ((ShoutSetterTranslationCommon)((IShoutGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Shout
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Shout_Registration.Instance;
        public new static Shout_Registration Registration => Shout_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ShoutCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ShoutSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ShoutSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ShoutBinaryWriteTranslation :
        ASpellBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ShoutBinaryWriteTranslation Instance = new ShoutBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IShoutGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MenuDisplayObject,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MDOB));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IShoutWordGetter>.Instance.Write(
                writer: writer,
                items: item.WordsOfPower,
                transl: (MutagenWriter subWriter, IShoutWordGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((ShoutWordBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IShoutGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.SHOU),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IShoutGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IASpellGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IShoutGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IShoutGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IShoutGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ShoutBinaryCreateTranslation : ASpellBinaryCreateTranslation
    {
        public new readonly static ShoutBinaryCreateTranslation Instance = new ShoutBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SHOU;
        public static void FillBinaryStructs(
            IShoutInternal item,
            MutagenFrame frame)
        {
            ASpellBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IShoutInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Shout_FieldIndex.Name;
                }
                case RecordTypeInts.MDOB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MenuDisplayObject = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Shout_FieldIndex.MenuDisplayObject;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Shout_FieldIndex.Description;
                }
                case RecordTypeInts.SNAM:
                {
                    item.WordsOfPower.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ShoutWord>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.SNAM,
                            recordTypeConverter: recordTypeConverter,
                            transl: ShoutWord.TryCreateFromBinary));
                    return (int)Shout_FieldIndex.WordsOfPower;
                }
                default:
                    return ASpellBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ShoutBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ShoutBinaryOverlay :
        ASpellBinaryOverlay,
        IShoutGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Shout_Registration.Instance;
        public new static Shout_Registration Registration => Shout_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ShoutCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ShoutSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ShoutCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ShoutBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ShoutBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Shout.MajorFlag MajorFlags => (Shout.MajorFlag)this.MajorRecordFlagsRaw;

        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region MenuDisplayObject
        private int? _MenuDisplayObjectLocation;
        public FormLinkNullable<IStaticGetter> MenuDisplayObject => _MenuDisplayObjectLocation.HasValue ? new FormLinkNullable<IStaticGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MenuDisplayObjectLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IStaticGetter>.Null;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IShoutWordGetter> WordsOfPower { get; private set; } = ListExt.Empty<ShoutWordBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ShoutBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ShoutBinaryOverlay ShoutFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new ShoutBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ShoutBinaryOverlay ShoutFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ShoutFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Shout_FieldIndex.Name;
                }
                case RecordTypeInts.MDOB:
                {
                    _MenuDisplayObjectLocation = (stream.Position - offset);
                    return (int)Shout_FieldIndex.MenuDisplayObject;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Shout_FieldIndex.Description;
                }
                case RecordTypeInts.SNAM:
                {
                    this.WordsOfPower = BinaryOverlayList.FactoryByArray<ShoutWordBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => ShoutWordBinaryOverlay.ShoutWordFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Shout_FieldIndex.WordsOfPower;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ShoutMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IShoutGetter rhs)) return false;
            return ((ShoutCommon)((IShoutGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IShoutGetter? obj)
        {
            return ((ShoutCommon)((IShoutGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ShoutCommon)((IShoutGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

