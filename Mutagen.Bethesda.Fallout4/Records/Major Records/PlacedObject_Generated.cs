/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PlacedObject :
        APlaced,
        IPlacedObjectInternal,
        ILoquiObjectSetter<PlacedObject>,
        IEquatable<IPlacedObjectGetter>
    {
        #region Ctor
        protected PlacedObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IPlacedObjectGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Base
        public FormLinkNullable<IFallout4MajorRecordGetter> Base { get; set; } = new FormLinkNullable<IFallout4MajorRecordGetter>();
        #endregion
        #region BoundHalfExtents
        public P3Float? BoundHalfExtents { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P3Float? IPlacedObjectGetter.BoundHalfExtents => this.BoundHalfExtents;
        #endregion
        #region Primitive
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PlacedPrimitive? _Primitive;
        public PlacedPrimitive? Primitive
        {
            get => _Primitive;
            set => _Primitive = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlacedPrimitiveGetter? IPlacedObjectGetter.Primitive => this.Primitive;
        #endregion
        #region XORD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XORD;
        public MemorySlice<Byte>? XORD
        {
            get => this._XORD;
            set => this._XORD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XORD => this.XORD;
        #endregion
        #region OcclusionPlane
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Bounding? _OcclusionPlane;
        public Bounding? OcclusionPlane
        {
            get => _OcclusionPlane;
            set => _OcclusionPlane = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBoundingGetter? IPlacedObjectGetter.OcclusionPlane => this.OcclusionPlane;
        #endregion
        #region Portals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Portal>? _Portals;
        public ExtendedList<Portal>? Portals
        {
            get => this._Portals;
            set => this._Portals = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPortalGetter>? IPlacedObjectGetter.Portals => _Portals;
        #endregion

        #endregion
        #region RoomPortal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Bounding? _RoomPortal;
        public Bounding? RoomPortal
        {
            get => _RoomPortal;
            set => _RoomPortal = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBoundingGetter? IPlacedObjectGetter.RoomPortal => this.RoomPortal;
        #endregion
        #region Unknown
        public Int16 Unknown { get; set; } = default;
        #endregion
        #region LightingTemplate
        public FormLinkNullable<ILightGetter> LightingTemplate { get; set; } = new FormLinkNullable<ILightGetter>();
        #endregion
        #region ImageSpace
        public FormLinkNullable<IImageSpaceAdapterGetter> ImageSpace { get; set; } = new FormLinkNullable<IImageSpaceAdapterGetter>();
        #endregion
        #region LinkedRooms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IPlacedObjectGetter>> _LinkedRooms = new ExtendedList<IFormLink<IPlacedObjectGetter>>();
        public ExtendedList<IFormLink<IPlacedObjectGetter>> LinkedRooms
        {
            get => this._LinkedRooms;
            protected set => this._LinkedRooms = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IPlacedObjectGetter>> IPlacedObjectGetter.LinkedRooms => _LinkedRooms;
        #endregion

        #endregion
        #region MultiBoundPrimitive
        public Boolean MultiBoundPrimitive { get; set; } = default;
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _RagdollData;
        public MemorySlice<Byte>? RagdollData
        {
            get => this._RagdollData;
            set => this._RagdollData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.RagdollData => this.RagdollData;
        #endregion
        #region RagdollBipedData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _RagdollBipedData;
        public MemorySlice<Byte>? RagdollBipedData
        {
            get => this._RagdollBipedData;
            set => this._RagdollBipedData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.RagdollBipedData => this.RagdollBipedData;
        #endregion
        #region Radius
        public Single? Radius { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.Radius => this.Radius;
        #endregion
        #region Reflections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WaterReflection> _Reflections = new ExtendedList<WaterReflection>();
        public ExtendedList<WaterReflection> Reflections
        {
            get => this._Reflections;
            protected set => this._Reflections = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWaterReflectionGetter> IPlacedObjectGetter.Reflections => _Reflections;
        #endregion

        #endregion
        #region LitWater
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IPlacedObjectGetter>> _LitWater = new ExtendedList<IFormLink<IPlacedObjectGetter>>();
        public ExtendedList<IFormLink<IPlacedObjectGetter>> LitWater
        {
            get => this._LitWater;
            protected set => this._LitWater = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IPlacedObjectGetter>> IPlacedObjectGetter.LitWater => _LitWater;
        #endregion

        #endregion
        #region Emittance
        public FormLinkNullable<IEmittanceGetter> Emittance { get; set; } = new FormLinkNullable<IEmittanceGetter>();
        #endregion
        #region LightData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LightData? _LightData;
        public LightData? LightData
        {
            get => _LightData;
            set => _LightData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILightDataGetter? IPlacedObjectGetter.LightData => this.LightData;
        #endregion
        #region Alpha
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Alpha? _Alpha;
        public Alpha? Alpha
        {
            get => _Alpha;
            set => _Alpha = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAlphaGetter? IPlacedObjectGetter.Alpha => this.Alpha;
        #endregion
        #region TeleportDestination
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TeleportDestination? _TeleportDestination;
        public TeleportDestination? TeleportDestination
        {
            get => _TeleportDestination;
            set => _TeleportDestination = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITeleportDestinationGetter? IPlacedObjectGetter.TeleportDestination => this.TeleportDestination;
        #endregion
        #region TeleportMessageBox
        public FormLinkNullable<IMessageGetter> TeleportMessageBox { get; set; } = new FormLinkNullable<IMessageGetter>();
        #endregion
        #region MultiboundReference
        public FormLinkNullable<IPlacedObjectGetter> MultiboundReference { get; set; } = new FormLinkNullable<IPlacedObjectGetter>();
        #endregion
        #region XWCN
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XWCN;
        public MemorySlice<Byte>? XWCN
        {
            get => this._XWCN;
            set => this._XWCN = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XWCN => this.XWCN;
        #endregion
        #region XWCS
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XWCS;
        public MemorySlice<Byte>? XWCS
        {
            get => this._XWCS;
            set => this._XWCS = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XWCS => this.XWCS;
        #endregion
        #region WaterVelocity
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WaterVelocity? _WaterVelocity;
        public WaterVelocity? WaterVelocity
        {
            get => _WaterVelocity;
            set => _WaterVelocity = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWaterVelocityGetter? IPlacedObjectGetter.WaterVelocity => this.WaterVelocity;
        #endregion
        #region XCVL
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XCVL;
        public MemorySlice<Byte>? XCVL
        {
            get => this._XCVL;
            set => this._XCVL = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XCVL => this.XCVL;
        #endregion
        #region XCZR
        public FormLinkNullable<ILinkedReferenceGetter> XCZR { get; set; } = new FormLinkNullable<ILinkedReferenceGetter>();
        #endregion
        #region XCZA
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XCZA;
        public MemorySlice<Byte>? XCZA
        {
            get => this._XCZA;
            set => this._XCZA = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XCZA => this.XCZA;
        #endregion
        #region XCZC
        public FormLinkNullable<ICellGetter> XCZC { get; set; } = new FormLinkNullable<ICellGetter>();
        #endregion
        #region Scale
        public Single? Scale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.Scale => this.Scale;
        #endregion
        #region SpawnContainer
        public FormLinkNullable<IPlacedObjectGetter> SpawnContainer { get; set; } = new FormLinkNullable<IPlacedObjectGetter>();
        #endregion
        #region ActivateParents
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActivateParents? _ActivateParents;
        public ActivateParents? ActivateParents
        {
            get => _ActivateParents;
            set => _ActivateParents = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IActivateParentsGetter? IPlacedObjectGetter.ActivateParents => this.ActivateParents;
        #endregion
        #region LeveledItemBaseObject
        public FormLinkNullable<ILeveledItemGetter> LeveledItemBaseObject { get; set; } = new FormLinkNullable<ILeveledItemGetter>();
        #endregion
        #region LevelModifier
        public Level? LevelModifier { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Level? IPlacedObjectGetter.LevelModifier => this.LevelModifier;
        #endregion
        #region PersistentLocation
        public FormLinkNullable<ILocationGetter> PersistentLocation { get; set; } = new FormLinkNullable<ILocationGetter>();
        #endregion
        #region CollisionLayer
        public UInt32? CollisionLayer { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlacedObjectGetter.CollisionLayer => this.CollisionLayer;
        #endregion
        #region Lock
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LockData? _Lock;
        public LockData? Lock
        {
            get => _Lock;
            set => _Lock = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILockDataGetter? IPlacedObjectGetter.Lock => this.Lock;
        #endregion
        #region EncounterZone
        public FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; } = new FormLinkNullable<IEncounterZoneGetter>();
        #endregion
        #region NavigationDoorLink
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NavigationDoorLink? _NavigationDoorLink;
        public NavigationDoorLink? NavigationDoorLink
        {
            get => _NavigationDoorLink;
            set => _NavigationDoorLink = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INavigationDoorLinkGetter? IPlacedObjectGetter.NavigationDoorLink => this.NavigationDoorLink;
        #endregion
        #region LocationRefTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<ILocationReferenceTypeGetter>>? _LocationRefTypes;
        public ExtendedList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes
        {
            get => this._LocationRefTypes;
            set => this._LocationRefTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? IPlacedObjectGetter.LocationRefTypes => _LocationRefTypes;
        #endregion

        #endregion
        #region IgnoredBySandbox
        public Boolean IgnoredBySandbox { get; set; } = default;
        #endregion
        #region Ownership
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Ownership? _Ownership;
        public Ownership? Ownership
        {
            get => _Ownership;
            set => _Ownership = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOwnershipGetter? IPlacedObjectGetter.Ownership => this.Ownership;
        #endregion
        #region ItemCount
        public Int32? ItemCount { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedObjectGetter.ItemCount => this.ItemCount;
        #endregion
        #region Charge
        public Single? Charge { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.Charge => this.Charge;
        #endregion
        #region LocationReference
        public FormLinkNullable<ILocationRecordGetter> LocationReference { get; set; } = new FormLinkNullable<ILocationRecordGetter>();
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IPlacedObjectGetter.EnableParent => this.EnableParent;
        #endregion
        #region LinkedReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LinkedReferences> _LinkedReferences = new ExtendedList<LinkedReferences>();
        public ExtendedList<LinkedReferences> LinkedReferences
        {
            get => this._LinkedReferences;
            protected set => this._LinkedReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILinkedReferencesGetter> IPlacedObjectGetter.LinkedReferences => _LinkedReferences;
        #endregion

        #endregion
        #region Patrol
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Patrol? _Patrol;
        public Patrol? Patrol
        {
            get => _Patrol;
            set => _Patrol = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPatrolGetter? IPlacedObjectGetter.Patrol => this.Patrol;
        #endregion
        #region Action
        public PlacedObject.ActionFlag? Action { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        PlacedObject.ActionFlag? IPlacedObjectGetter.Action => this.Action;
        #endregion
        #region HeadTrackingWeight
        public Single? HeadTrackingWeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.HeadTrackingWeight => this.HeadTrackingWeight;
        #endregion
        #region FavorCost
        public Single? FavorCost { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.FavorCost => this.FavorCost;
        #endregion
        #region OpenByDefault
        public Boolean OpenByDefault { get; set; } = default;
        #endregion
        #region MapMarker
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MapMarker? _MapMarker;
        public MapMarker? MapMarker
        {
            get => _MapMarker;
            set => _MapMarker = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMapMarkerGetter? IPlacedObjectGetter.MapMarker => this.MapMarker;
        #endregion
        #region AttachRef
        public FormLinkNullable<IPlacedThingGetter> AttachRef { get; set; } = new FormLinkNullable<IPlacedThingGetter>();
        #endregion
        #region DistantLodData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DistantLodData;
        public MemorySlice<Byte>? DistantLodData
        {
            get => this._DistantLodData;
            set => this._DistantLodData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.DistantLodData => this.DistantLodData;
        #endregion
        #region Placement
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Placement? _Placement;
        public Placement? Placement
        {
            get => _Placement;
            set => _Placement = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlacementGetter? IPlacedObjectGetter.Placement => this.Placement;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlacedObjectGetter rhs)) return false;
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPlacedObjectGetter? obj)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APlaced.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.Base = initialValue;
                this.BoundHalfExtents = initialValue;
                this.Primitive = new MaskItem<TItem, PlacedPrimitive.Mask<TItem>?>(initialValue, new PlacedPrimitive.Mask<TItem>(initialValue));
                this.XORD = initialValue;
                this.OcclusionPlane = new MaskItem<TItem, Bounding.Mask<TItem>?>(initialValue, new Bounding.Mask<TItem>(initialValue));
                this.Portals = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Portal.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Portal.Mask<TItem>?>>());
                this.RoomPortal = new MaskItem<TItem, Bounding.Mask<TItem>?>(initialValue, new Bounding.Mask<TItem>(initialValue));
                this.Unknown = initialValue;
                this.LightingTemplate = initialValue;
                this.ImageSpace = initialValue;
                this.LinkedRooms = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MultiBoundPrimitive = initialValue;
                this.RagdollData = initialValue;
                this.RagdollBipedData = initialValue;
                this.Radius = initialValue;
                this.Reflections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>());
                this.LitWater = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Emittance = initialValue;
                this.LightData = new MaskItem<TItem, LightData.Mask<TItem>?>(initialValue, new LightData.Mask<TItem>(initialValue));
                this.Alpha = new MaskItem<TItem, Alpha.Mask<TItem>?>(initialValue, new Alpha.Mask<TItem>(initialValue));
                this.TeleportDestination = new MaskItem<TItem, TeleportDestination.Mask<TItem>?>(initialValue, new TeleportDestination.Mask<TItem>(initialValue));
                this.TeleportMessageBox = initialValue;
                this.MultiboundReference = initialValue;
                this.XWCN = initialValue;
                this.XWCS = initialValue;
                this.WaterVelocity = new MaskItem<TItem, WaterVelocity.Mask<TItem>?>(initialValue, new WaterVelocity.Mask<TItem>(initialValue));
                this.XCVL = initialValue;
                this.XCZR = initialValue;
                this.XCZA = initialValue;
                this.XCZC = initialValue;
                this.Scale = initialValue;
                this.SpawnContainer = initialValue;
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(initialValue, new ActivateParents.Mask<TItem>(initialValue));
                this.LeveledItemBaseObject = initialValue;
                this.LevelModifier = initialValue;
                this.PersistentLocation = initialValue;
                this.CollisionLayer = initialValue;
                this.Lock = new MaskItem<TItem, LockData.Mask<TItem>?>(initialValue, new LockData.Mask<TItem>(initialValue));
                this.EncounterZone = initialValue;
                this.NavigationDoorLink = new MaskItem<TItem, NavigationDoorLink.Mask<TItem>?>(initialValue, new NavigationDoorLink.Mask<TItem>(initialValue));
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.IgnoredBySandbox = initialValue;
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(initialValue, new Ownership.Mask<TItem>(initialValue));
                this.ItemCount = initialValue;
                this.Charge = initialValue;
                this.LocationReference = initialValue;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.Patrol = new MaskItem<TItem, Patrol.Mask<TItem>?>(initialValue, new Patrol.Mask<TItem>(initialValue));
                this.Action = initialValue;
                this.HeadTrackingWeight = initialValue;
                this.FavorCost = initialValue;
                this.OpenByDefault = initialValue;
                this.MapMarker = new MaskItem<TItem, MapMarker.Mask<TItem>?>(initialValue, new MapMarker.Mask<TItem>(initialValue));
                this.AttachRef = initialValue;
                this.DistantLodData = initialValue;
                this.Placement = new MaskItem<TItem, Placement.Mask<TItem>?>(initialValue, new Placement.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem Base,
                TItem BoundHalfExtents,
                TItem Primitive,
                TItem XORD,
                TItem OcclusionPlane,
                TItem Portals,
                TItem RoomPortal,
                TItem Unknown,
                TItem LightingTemplate,
                TItem ImageSpace,
                TItem LinkedRooms,
                TItem MultiBoundPrimitive,
                TItem RagdollData,
                TItem RagdollBipedData,
                TItem Radius,
                TItem Reflections,
                TItem LitWater,
                TItem Emittance,
                TItem LightData,
                TItem Alpha,
                TItem TeleportDestination,
                TItem TeleportMessageBox,
                TItem MultiboundReference,
                TItem XWCN,
                TItem XWCS,
                TItem WaterVelocity,
                TItem XCVL,
                TItem XCZR,
                TItem XCZA,
                TItem XCZC,
                TItem Scale,
                TItem SpawnContainer,
                TItem ActivateParents,
                TItem LeveledItemBaseObject,
                TItem LevelModifier,
                TItem PersistentLocation,
                TItem CollisionLayer,
                TItem Lock,
                TItem EncounterZone,
                TItem NavigationDoorLink,
                TItem LocationRefTypes,
                TItem IgnoredBySandbox,
                TItem Ownership,
                TItem ItemCount,
                TItem Charge,
                TItem LocationReference,
                TItem EnableParent,
                TItem LinkedReferences,
                TItem Patrol,
                TItem Action,
                TItem HeadTrackingWeight,
                TItem FavorCost,
                TItem OpenByDefault,
                TItem MapMarker,
                TItem AttachRef,
                TItem DistantLodData,
                TItem Placement)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Base = Base;
                this.BoundHalfExtents = BoundHalfExtents;
                this.Primitive = new MaskItem<TItem, PlacedPrimitive.Mask<TItem>?>(Primitive, new PlacedPrimitive.Mask<TItem>(Primitive));
                this.XORD = XORD;
                this.OcclusionPlane = new MaskItem<TItem, Bounding.Mask<TItem>?>(OcclusionPlane, new Bounding.Mask<TItem>(OcclusionPlane));
                this.Portals = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Portal.Mask<TItem>?>>?>(Portals, Enumerable.Empty<MaskItemIndexed<TItem, Portal.Mask<TItem>?>>());
                this.RoomPortal = new MaskItem<TItem, Bounding.Mask<TItem>?>(RoomPortal, new Bounding.Mask<TItem>(RoomPortal));
                this.Unknown = Unknown;
                this.LightingTemplate = LightingTemplate;
                this.ImageSpace = ImageSpace;
                this.LinkedRooms = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LinkedRooms, Enumerable.Empty<(int Index, TItem Value)>());
                this.MultiBoundPrimitive = MultiBoundPrimitive;
                this.RagdollData = RagdollData;
                this.RagdollBipedData = RagdollBipedData;
                this.Radius = Radius;
                this.Reflections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>(Reflections, Enumerable.Empty<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>());
                this.LitWater = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LitWater, Enumerable.Empty<(int Index, TItem Value)>());
                this.Emittance = Emittance;
                this.LightData = new MaskItem<TItem, LightData.Mask<TItem>?>(LightData, new LightData.Mask<TItem>(LightData));
                this.Alpha = new MaskItem<TItem, Alpha.Mask<TItem>?>(Alpha, new Alpha.Mask<TItem>(Alpha));
                this.TeleportDestination = new MaskItem<TItem, TeleportDestination.Mask<TItem>?>(TeleportDestination, new TeleportDestination.Mask<TItem>(TeleportDestination));
                this.TeleportMessageBox = TeleportMessageBox;
                this.MultiboundReference = MultiboundReference;
                this.XWCN = XWCN;
                this.XWCS = XWCS;
                this.WaterVelocity = new MaskItem<TItem, WaterVelocity.Mask<TItem>?>(WaterVelocity, new WaterVelocity.Mask<TItem>(WaterVelocity));
                this.XCVL = XCVL;
                this.XCZR = XCZR;
                this.XCZA = XCZA;
                this.XCZC = XCZC;
                this.Scale = Scale;
                this.SpawnContainer = SpawnContainer;
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(ActivateParents, new ActivateParents.Mask<TItem>(ActivateParents));
                this.LeveledItemBaseObject = LeveledItemBaseObject;
                this.LevelModifier = LevelModifier;
                this.PersistentLocation = PersistentLocation;
                this.CollisionLayer = CollisionLayer;
                this.Lock = new MaskItem<TItem, LockData.Mask<TItem>?>(Lock, new LockData.Mask<TItem>(Lock));
                this.EncounterZone = EncounterZone;
                this.NavigationDoorLink = new MaskItem<TItem, NavigationDoorLink.Mask<TItem>?>(NavigationDoorLink, new NavigationDoorLink.Mask<TItem>(NavigationDoorLink));
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LocationRefTypes, Enumerable.Empty<(int Index, TItem Value)>());
                this.IgnoredBySandbox = IgnoredBySandbox;
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(Ownership, new Ownership.Mask<TItem>(Ownership));
                this.ItemCount = ItemCount;
                this.Charge = Charge;
                this.LocationReference = LocationReference;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(LinkedReferences, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.Patrol = new MaskItem<TItem, Patrol.Mask<TItem>?>(Patrol, new Patrol.Mask<TItem>(Patrol));
                this.Action = Action;
                this.HeadTrackingWeight = HeadTrackingWeight;
                this.FavorCost = FavorCost;
                this.OpenByDefault = OpenByDefault;
                this.MapMarker = new MaskItem<TItem, MapMarker.Mask<TItem>?>(MapMarker, new MapMarker.Mask<TItem>(MapMarker));
                this.AttachRef = AttachRef;
                this.DistantLodData = DistantLodData;
                this.Placement = new MaskItem<TItem, Placement.Mask<TItem>?>(Placement, new Placement.Mask<TItem>(Placement));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Base;
            public TItem BoundHalfExtents;
            public MaskItem<TItem, PlacedPrimitive.Mask<TItem>?>? Primitive { get; set; }
            public TItem XORD;
            public MaskItem<TItem, Bounding.Mask<TItem>?>? OcclusionPlane { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Portal.Mask<TItem>?>>?>? Portals;
            public MaskItem<TItem, Bounding.Mask<TItem>?>? RoomPortal { get; set; }
            public TItem Unknown;
            public TItem LightingTemplate;
            public TItem ImageSpace;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LinkedRooms;
            public TItem MultiBoundPrimitive;
            public TItem RagdollData;
            public TItem RagdollBipedData;
            public TItem Radius;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>? Reflections;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LitWater;
            public TItem Emittance;
            public MaskItem<TItem, LightData.Mask<TItem>?>? LightData { get; set; }
            public MaskItem<TItem, Alpha.Mask<TItem>?>? Alpha { get; set; }
            public MaskItem<TItem, TeleportDestination.Mask<TItem>?>? TeleportDestination { get; set; }
            public TItem TeleportMessageBox;
            public TItem MultiboundReference;
            public TItem XWCN;
            public TItem XWCS;
            public MaskItem<TItem, WaterVelocity.Mask<TItem>?>? WaterVelocity { get; set; }
            public TItem XCVL;
            public TItem XCZR;
            public TItem XCZA;
            public TItem XCZC;
            public TItem Scale;
            public TItem SpawnContainer;
            public MaskItem<TItem, ActivateParents.Mask<TItem>?>? ActivateParents { get; set; }
            public TItem LeveledItemBaseObject;
            public TItem LevelModifier;
            public TItem PersistentLocation;
            public TItem CollisionLayer;
            public MaskItem<TItem, LockData.Mask<TItem>?>? Lock { get; set; }
            public TItem EncounterZone;
            public MaskItem<TItem, NavigationDoorLink.Mask<TItem>?>? NavigationDoorLink { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LocationRefTypes;
            public TItem IgnoredBySandbox;
            public MaskItem<TItem, Ownership.Mask<TItem>?>? Ownership { get; set; }
            public TItem ItemCount;
            public TItem Charge;
            public TItem LocationReference;
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>? LinkedReferences;
            public MaskItem<TItem, Patrol.Mask<TItem>?>? Patrol { get; set; }
            public TItem Action;
            public TItem HeadTrackingWeight;
            public TItem FavorCost;
            public TItem OpenByDefault;
            public MaskItem<TItem, MapMarker.Mask<TItem>?>? MapMarker { get; set; }
            public TItem AttachRef;
            public TItem DistantLodData;
            public MaskItem<TItem, Placement.Mask<TItem>?>? Placement { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Base, rhs.Base)) return false;
                if (!object.Equals(this.BoundHalfExtents, rhs.BoundHalfExtents)) return false;
                if (!object.Equals(this.Primitive, rhs.Primitive)) return false;
                if (!object.Equals(this.XORD, rhs.XORD)) return false;
                if (!object.Equals(this.OcclusionPlane, rhs.OcclusionPlane)) return false;
                if (!object.Equals(this.Portals, rhs.Portals)) return false;
                if (!object.Equals(this.RoomPortal, rhs.RoomPortal)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.LightingTemplate, rhs.LightingTemplate)) return false;
                if (!object.Equals(this.ImageSpace, rhs.ImageSpace)) return false;
                if (!object.Equals(this.LinkedRooms, rhs.LinkedRooms)) return false;
                if (!object.Equals(this.MultiBoundPrimitive, rhs.MultiBoundPrimitive)) return false;
                if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
                if (!object.Equals(this.RagdollBipedData, rhs.RagdollBipedData)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.Reflections, rhs.Reflections)) return false;
                if (!object.Equals(this.LitWater, rhs.LitWater)) return false;
                if (!object.Equals(this.Emittance, rhs.Emittance)) return false;
                if (!object.Equals(this.LightData, rhs.LightData)) return false;
                if (!object.Equals(this.Alpha, rhs.Alpha)) return false;
                if (!object.Equals(this.TeleportDestination, rhs.TeleportDestination)) return false;
                if (!object.Equals(this.TeleportMessageBox, rhs.TeleportMessageBox)) return false;
                if (!object.Equals(this.MultiboundReference, rhs.MultiboundReference)) return false;
                if (!object.Equals(this.XWCN, rhs.XWCN)) return false;
                if (!object.Equals(this.XWCS, rhs.XWCS)) return false;
                if (!object.Equals(this.WaterVelocity, rhs.WaterVelocity)) return false;
                if (!object.Equals(this.XCVL, rhs.XCVL)) return false;
                if (!object.Equals(this.XCZR, rhs.XCZR)) return false;
                if (!object.Equals(this.XCZA, rhs.XCZA)) return false;
                if (!object.Equals(this.XCZC, rhs.XCZC)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.SpawnContainer, rhs.SpawnContainer)) return false;
                if (!object.Equals(this.ActivateParents, rhs.ActivateParents)) return false;
                if (!object.Equals(this.LeveledItemBaseObject, rhs.LeveledItemBaseObject)) return false;
                if (!object.Equals(this.LevelModifier, rhs.LevelModifier)) return false;
                if (!object.Equals(this.PersistentLocation, rhs.PersistentLocation)) return false;
                if (!object.Equals(this.CollisionLayer, rhs.CollisionLayer)) return false;
                if (!object.Equals(this.Lock, rhs.Lock)) return false;
                if (!object.Equals(this.EncounterZone, rhs.EncounterZone)) return false;
                if (!object.Equals(this.NavigationDoorLink, rhs.NavigationDoorLink)) return false;
                if (!object.Equals(this.LocationRefTypes, rhs.LocationRefTypes)) return false;
                if (!object.Equals(this.IgnoredBySandbox, rhs.IgnoredBySandbox)) return false;
                if (!object.Equals(this.Ownership, rhs.Ownership)) return false;
                if (!object.Equals(this.ItemCount, rhs.ItemCount)) return false;
                if (!object.Equals(this.Charge, rhs.Charge)) return false;
                if (!object.Equals(this.LocationReference, rhs.LocationReference)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.LinkedReferences, rhs.LinkedReferences)) return false;
                if (!object.Equals(this.Patrol, rhs.Patrol)) return false;
                if (!object.Equals(this.Action, rhs.Action)) return false;
                if (!object.Equals(this.HeadTrackingWeight, rhs.HeadTrackingWeight)) return false;
                if (!object.Equals(this.FavorCost, rhs.FavorCost)) return false;
                if (!object.Equals(this.OpenByDefault, rhs.OpenByDefault)) return false;
                if (!object.Equals(this.MapMarker, rhs.MapMarker)) return false;
                if (!object.Equals(this.AttachRef, rhs.AttachRef)) return false;
                if (!object.Equals(this.DistantLodData, rhs.DistantLodData)) return false;
                if (!object.Equals(this.Placement, rhs.Placement)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Base);
                hash.Add(this.BoundHalfExtents);
                hash.Add(this.Primitive);
                hash.Add(this.XORD);
                hash.Add(this.OcclusionPlane);
                hash.Add(this.Portals);
                hash.Add(this.RoomPortal);
                hash.Add(this.Unknown);
                hash.Add(this.LightingTemplate);
                hash.Add(this.ImageSpace);
                hash.Add(this.LinkedRooms);
                hash.Add(this.MultiBoundPrimitive);
                hash.Add(this.RagdollData);
                hash.Add(this.RagdollBipedData);
                hash.Add(this.Radius);
                hash.Add(this.Reflections);
                hash.Add(this.LitWater);
                hash.Add(this.Emittance);
                hash.Add(this.LightData);
                hash.Add(this.Alpha);
                hash.Add(this.TeleportDestination);
                hash.Add(this.TeleportMessageBox);
                hash.Add(this.MultiboundReference);
                hash.Add(this.XWCN);
                hash.Add(this.XWCS);
                hash.Add(this.WaterVelocity);
                hash.Add(this.XCVL);
                hash.Add(this.XCZR);
                hash.Add(this.XCZA);
                hash.Add(this.XCZC);
                hash.Add(this.Scale);
                hash.Add(this.SpawnContainer);
                hash.Add(this.ActivateParents);
                hash.Add(this.LeveledItemBaseObject);
                hash.Add(this.LevelModifier);
                hash.Add(this.PersistentLocation);
                hash.Add(this.CollisionLayer);
                hash.Add(this.Lock);
                hash.Add(this.EncounterZone);
                hash.Add(this.NavigationDoorLink);
                hash.Add(this.LocationRefTypes);
                hash.Add(this.IgnoredBySandbox);
                hash.Add(this.Ownership);
                hash.Add(this.ItemCount);
                hash.Add(this.Charge);
                hash.Add(this.LocationReference);
                hash.Add(this.EnableParent);
                hash.Add(this.LinkedReferences);
                hash.Add(this.Patrol);
                hash.Add(this.Action);
                hash.Add(this.HeadTrackingWeight);
                hash.Add(this.FavorCost);
                hash.Add(this.OpenByDefault);
                hash.Add(this.MapMarker);
                hash.Add(this.AttachRef);
                hash.Add(this.DistantLodData);
                hash.Add(this.Placement);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Base)) return false;
                if (!eval(this.BoundHalfExtents)) return false;
                if (Primitive != null)
                {
                    if (!eval(this.Primitive.Overall)) return false;
                    if (this.Primitive.Specific != null && !this.Primitive.Specific.All(eval)) return false;
                }
                if (!eval(this.XORD)) return false;
                if (OcclusionPlane != null)
                {
                    if (!eval(this.OcclusionPlane.Overall)) return false;
                    if (this.OcclusionPlane.Specific != null && !this.OcclusionPlane.Specific.All(eval)) return false;
                }
                if (this.Portals != null)
                {
                    if (!eval(this.Portals.Overall)) return false;
                    if (this.Portals.Specific != null)
                    {
                        foreach (var item in this.Portals.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (RoomPortal != null)
                {
                    if (!eval(this.RoomPortal.Overall)) return false;
                    if (this.RoomPortal.Specific != null && !this.RoomPortal.Specific.All(eval)) return false;
                }
                if (!eval(this.Unknown)) return false;
                if (!eval(this.LightingTemplate)) return false;
                if (!eval(this.ImageSpace)) return false;
                if (this.LinkedRooms != null)
                {
                    if (!eval(this.LinkedRooms.Overall)) return false;
                    if (this.LinkedRooms.Specific != null)
                    {
                        foreach (var item in this.LinkedRooms.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.MultiBoundPrimitive)) return false;
                if (!eval(this.RagdollData)) return false;
                if (!eval(this.RagdollBipedData)) return false;
                if (!eval(this.Radius)) return false;
                if (this.Reflections != null)
                {
                    if (!eval(this.Reflections.Overall)) return false;
                    if (this.Reflections.Specific != null)
                    {
                        foreach (var item in this.Reflections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LitWater != null)
                {
                    if (!eval(this.LitWater.Overall)) return false;
                    if (this.LitWater.Specific != null)
                    {
                        foreach (var item in this.LitWater.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Emittance)) return false;
                if (LightData != null)
                {
                    if (!eval(this.LightData.Overall)) return false;
                    if (this.LightData.Specific != null && !this.LightData.Specific.All(eval)) return false;
                }
                if (Alpha != null)
                {
                    if (!eval(this.Alpha.Overall)) return false;
                    if (this.Alpha.Specific != null && !this.Alpha.Specific.All(eval)) return false;
                }
                if (TeleportDestination != null)
                {
                    if (!eval(this.TeleportDestination.Overall)) return false;
                    if (this.TeleportDestination.Specific != null && !this.TeleportDestination.Specific.All(eval)) return false;
                }
                if (!eval(this.TeleportMessageBox)) return false;
                if (!eval(this.MultiboundReference)) return false;
                if (!eval(this.XWCN)) return false;
                if (!eval(this.XWCS)) return false;
                if (WaterVelocity != null)
                {
                    if (!eval(this.WaterVelocity.Overall)) return false;
                    if (this.WaterVelocity.Specific != null && !this.WaterVelocity.Specific.All(eval)) return false;
                }
                if (!eval(this.XCVL)) return false;
                if (!eval(this.XCZR)) return false;
                if (!eval(this.XCZA)) return false;
                if (!eval(this.XCZC)) return false;
                if (!eval(this.Scale)) return false;
                if (!eval(this.SpawnContainer)) return false;
                if (ActivateParents != null)
                {
                    if (!eval(this.ActivateParents.Overall)) return false;
                    if (this.ActivateParents.Specific != null && !this.ActivateParents.Specific.All(eval)) return false;
                }
                if (!eval(this.LeveledItemBaseObject)) return false;
                if (!eval(this.LevelModifier)) return false;
                if (!eval(this.PersistentLocation)) return false;
                if (!eval(this.CollisionLayer)) return false;
                if (Lock != null)
                {
                    if (!eval(this.Lock.Overall)) return false;
                    if (this.Lock.Specific != null && !this.Lock.Specific.All(eval)) return false;
                }
                if (!eval(this.EncounterZone)) return false;
                if (NavigationDoorLink != null)
                {
                    if (!eval(this.NavigationDoorLink.Overall)) return false;
                    if (this.NavigationDoorLink.Specific != null && !this.NavigationDoorLink.Specific.All(eval)) return false;
                }
                if (this.LocationRefTypes != null)
                {
                    if (!eval(this.LocationRefTypes.Overall)) return false;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.IgnoredBySandbox)) return false;
                if (Ownership != null)
                {
                    if (!eval(this.Ownership.Overall)) return false;
                    if (this.Ownership.Specific != null && !this.Ownership.Specific.All(eval)) return false;
                }
                if (!eval(this.ItemCount)) return false;
                if (!eval(this.Charge)) return false;
                if (!eval(this.LocationReference)) return false;
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (this.LinkedReferences != null)
                {
                    if (!eval(this.LinkedReferences.Overall)) return false;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Patrol != null)
                {
                    if (!eval(this.Patrol.Overall)) return false;
                    if (this.Patrol.Specific != null && !this.Patrol.Specific.All(eval)) return false;
                }
                if (!eval(this.Action)) return false;
                if (!eval(this.HeadTrackingWeight)) return false;
                if (!eval(this.FavorCost)) return false;
                if (!eval(this.OpenByDefault)) return false;
                if (MapMarker != null)
                {
                    if (!eval(this.MapMarker.Overall)) return false;
                    if (this.MapMarker.Specific != null && !this.MapMarker.Specific.All(eval)) return false;
                }
                if (!eval(this.AttachRef)) return false;
                if (!eval(this.DistantLodData)) return false;
                if (Placement != null)
                {
                    if (!eval(this.Placement.Overall)) return false;
                    if (this.Placement.Specific != null && !this.Placement.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Base)) return true;
                if (eval(this.BoundHalfExtents)) return true;
                if (Primitive != null)
                {
                    if (eval(this.Primitive.Overall)) return true;
                    if (this.Primitive.Specific != null && this.Primitive.Specific.Any(eval)) return true;
                }
                if (eval(this.XORD)) return true;
                if (OcclusionPlane != null)
                {
                    if (eval(this.OcclusionPlane.Overall)) return true;
                    if (this.OcclusionPlane.Specific != null && this.OcclusionPlane.Specific.Any(eval)) return true;
                }
                if (this.Portals != null)
                {
                    if (eval(this.Portals.Overall)) return true;
                    if (this.Portals.Specific != null)
                    {
                        foreach (var item in this.Portals.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (RoomPortal != null)
                {
                    if (eval(this.RoomPortal.Overall)) return true;
                    if (this.RoomPortal.Specific != null && this.RoomPortal.Specific.Any(eval)) return true;
                }
                if (eval(this.Unknown)) return true;
                if (eval(this.LightingTemplate)) return true;
                if (eval(this.ImageSpace)) return true;
                if (this.LinkedRooms != null)
                {
                    if (eval(this.LinkedRooms.Overall)) return true;
                    if (this.LinkedRooms.Specific != null)
                    {
                        foreach (var item in this.LinkedRooms.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.MultiBoundPrimitive)) return true;
                if (eval(this.RagdollData)) return true;
                if (eval(this.RagdollBipedData)) return true;
                if (eval(this.Radius)) return true;
                if (this.Reflections != null)
                {
                    if (eval(this.Reflections.Overall)) return true;
                    if (this.Reflections.Specific != null)
                    {
                        foreach (var item in this.Reflections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LitWater != null)
                {
                    if (eval(this.LitWater.Overall)) return true;
                    if (this.LitWater.Specific != null)
                    {
                        foreach (var item in this.LitWater.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Emittance)) return true;
                if (LightData != null)
                {
                    if (eval(this.LightData.Overall)) return true;
                    if (this.LightData.Specific != null && this.LightData.Specific.Any(eval)) return true;
                }
                if (Alpha != null)
                {
                    if (eval(this.Alpha.Overall)) return true;
                    if (this.Alpha.Specific != null && this.Alpha.Specific.Any(eval)) return true;
                }
                if (TeleportDestination != null)
                {
                    if (eval(this.TeleportDestination.Overall)) return true;
                    if (this.TeleportDestination.Specific != null && this.TeleportDestination.Specific.Any(eval)) return true;
                }
                if (eval(this.TeleportMessageBox)) return true;
                if (eval(this.MultiboundReference)) return true;
                if (eval(this.XWCN)) return true;
                if (eval(this.XWCS)) return true;
                if (WaterVelocity != null)
                {
                    if (eval(this.WaterVelocity.Overall)) return true;
                    if (this.WaterVelocity.Specific != null && this.WaterVelocity.Specific.Any(eval)) return true;
                }
                if (eval(this.XCVL)) return true;
                if (eval(this.XCZR)) return true;
                if (eval(this.XCZA)) return true;
                if (eval(this.XCZC)) return true;
                if (eval(this.Scale)) return true;
                if (eval(this.SpawnContainer)) return true;
                if (ActivateParents != null)
                {
                    if (eval(this.ActivateParents.Overall)) return true;
                    if (this.ActivateParents.Specific != null && this.ActivateParents.Specific.Any(eval)) return true;
                }
                if (eval(this.LeveledItemBaseObject)) return true;
                if (eval(this.LevelModifier)) return true;
                if (eval(this.PersistentLocation)) return true;
                if (eval(this.CollisionLayer)) return true;
                if (Lock != null)
                {
                    if (eval(this.Lock.Overall)) return true;
                    if (this.Lock.Specific != null && this.Lock.Specific.Any(eval)) return true;
                }
                if (eval(this.EncounterZone)) return true;
                if (NavigationDoorLink != null)
                {
                    if (eval(this.NavigationDoorLink.Overall)) return true;
                    if (this.NavigationDoorLink.Specific != null && this.NavigationDoorLink.Specific.Any(eval)) return true;
                }
                if (this.LocationRefTypes != null)
                {
                    if (eval(this.LocationRefTypes.Overall)) return true;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.IgnoredBySandbox)) return true;
                if (Ownership != null)
                {
                    if (eval(this.Ownership.Overall)) return true;
                    if (this.Ownership.Specific != null && this.Ownership.Specific.Any(eval)) return true;
                }
                if (eval(this.ItemCount)) return true;
                if (eval(this.Charge)) return true;
                if (eval(this.LocationReference)) return true;
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (this.LinkedReferences != null)
                {
                    if (eval(this.LinkedReferences.Overall)) return true;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Patrol != null)
                {
                    if (eval(this.Patrol.Overall)) return true;
                    if (this.Patrol.Specific != null && this.Patrol.Specific.Any(eval)) return true;
                }
                if (eval(this.Action)) return true;
                if (eval(this.HeadTrackingWeight)) return true;
                if (eval(this.FavorCost)) return true;
                if (eval(this.OpenByDefault)) return true;
                if (MapMarker != null)
                {
                    if (eval(this.MapMarker.Overall)) return true;
                    if (this.MapMarker.Specific != null && this.MapMarker.Specific.Any(eval)) return true;
                }
                if (eval(this.AttachRef)) return true;
                if (eval(this.DistantLodData)) return true;
                if (Placement != null)
                {
                    if (eval(this.Placement.Overall)) return true;
                    if (this.Placement.Specific != null && this.Placement.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedObject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Base = eval(this.Base);
                obj.BoundHalfExtents = eval(this.BoundHalfExtents);
                obj.Primitive = this.Primitive == null ? null : new MaskItem<R, PlacedPrimitive.Mask<R>?>(eval(this.Primitive.Overall), this.Primitive.Specific?.Translate(eval));
                obj.XORD = eval(this.XORD);
                obj.OcclusionPlane = this.OcclusionPlane == null ? null : new MaskItem<R, Bounding.Mask<R>?>(eval(this.OcclusionPlane.Overall), this.OcclusionPlane.Specific?.Translate(eval));
                if (Portals != null)
                {
                    obj.Portals = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Portal.Mask<R>?>>?>(eval(this.Portals.Overall), Enumerable.Empty<MaskItemIndexed<R, Portal.Mask<R>?>>());
                    if (Portals.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Portal.Mask<R>?>>();
                        obj.Portals.Specific = l;
                        foreach (var item in Portals.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Portal.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Portal.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.RoomPortal = this.RoomPortal == null ? null : new MaskItem<R, Bounding.Mask<R>?>(eval(this.RoomPortal.Overall), this.RoomPortal.Specific?.Translate(eval));
                obj.Unknown = eval(this.Unknown);
                obj.LightingTemplate = eval(this.LightingTemplate);
                obj.ImageSpace = eval(this.ImageSpace);
                if (LinkedRooms != null)
                {
                    obj.LinkedRooms = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LinkedRooms.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LinkedRooms.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LinkedRooms.Specific = l;
                        foreach (var item in LinkedRooms.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.MultiBoundPrimitive = eval(this.MultiBoundPrimitive);
                obj.RagdollData = eval(this.RagdollData);
                obj.RagdollBipedData = eval(this.RagdollBipedData);
                obj.Radius = eval(this.Radius);
                if (Reflections != null)
                {
                    obj.Reflections = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WaterReflection.Mask<R>?>>?>(eval(this.Reflections.Overall), Enumerable.Empty<MaskItemIndexed<R, WaterReflection.Mask<R>?>>());
                    if (Reflections.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WaterReflection.Mask<R>?>>();
                        obj.Reflections.Specific = l;
                        foreach (var item in Reflections.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WaterReflection.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WaterReflection.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (LitWater != null)
                {
                    obj.LitWater = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LitWater.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LitWater.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LitWater.Specific = l;
                        foreach (var item in LitWater.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Emittance = eval(this.Emittance);
                obj.LightData = this.LightData == null ? null : new MaskItem<R, LightData.Mask<R>?>(eval(this.LightData.Overall), this.LightData.Specific?.Translate(eval));
                obj.Alpha = this.Alpha == null ? null : new MaskItem<R, Alpha.Mask<R>?>(eval(this.Alpha.Overall), this.Alpha.Specific?.Translate(eval));
                obj.TeleportDestination = this.TeleportDestination == null ? null : new MaskItem<R, TeleportDestination.Mask<R>?>(eval(this.TeleportDestination.Overall), this.TeleportDestination.Specific?.Translate(eval));
                obj.TeleportMessageBox = eval(this.TeleportMessageBox);
                obj.MultiboundReference = eval(this.MultiboundReference);
                obj.XWCN = eval(this.XWCN);
                obj.XWCS = eval(this.XWCS);
                obj.WaterVelocity = this.WaterVelocity == null ? null : new MaskItem<R, WaterVelocity.Mask<R>?>(eval(this.WaterVelocity.Overall), this.WaterVelocity.Specific?.Translate(eval));
                obj.XCVL = eval(this.XCVL);
                obj.XCZR = eval(this.XCZR);
                obj.XCZA = eval(this.XCZA);
                obj.XCZC = eval(this.XCZC);
                obj.Scale = eval(this.Scale);
                obj.SpawnContainer = eval(this.SpawnContainer);
                obj.ActivateParents = this.ActivateParents == null ? null : new MaskItem<R, ActivateParents.Mask<R>?>(eval(this.ActivateParents.Overall), this.ActivateParents.Specific?.Translate(eval));
                obj.LeveledItemBaseObject = eval(this.LeveledItemBaseObject);
                obj.LevelModifier = eval(this.LevelModifier);
                obj.PersistentLocation = eval(this.PersistentLocation);
                obj.CollisionLayer = eval(this.CollisionLayer);
                obj.Lock = this.Lock == null ? null : new MaskItem<R, LockData.Mask<R>?>(eval(this.Lock.Overall), this.Lock.Specific?.Translate(eval));
                obj.EncounterZone = eval(this.EncounterZone);
                obj.NavigationDoorLink = this.NavigationDoorLink == null ? null : new MaskItem<R, NavigationDoorLink.Mask<R>?>(eval(this.NavigationDoorLink.Overall), this.NavigationDoorLink.Specific?.Translate(eval));
                if (LocationRefTypes != null)
                {
                    obj.LocationRefTypes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LocationRefTypes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LocationRefTypes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LocationRefTypes.Specific = l;
                        foreach (var item in LocationRefTypes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.IgnoredBySandbox = eval(this.IgnoredBySandbox);
                obj.Ownership = this.Ownership == null ? null : new MaskItem<R, Ownership.Mask<R>?>(eval(this.Ownership.Overall), this.Ownership.Specific?.Translate(eval));
                obj.ItemCount = eval(this.ItemCount);
                obj.Charge = eval(this.Charge);
                obj.LocationReference = eval(this.LocationReference);
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                if (LinkedReferences != null)
                {
                    obj.LinkedReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>?>(eval(this.LinkedReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>());
                    if (LinkedReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>();
                        obj.LinkedReferences.Specific = l;
                        foreach (var item in LinkedReferences.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, LinkedReferences.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, LinkedReferences.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Patrol = this.Patrol == null ? null : new MaskItem<R, Patrol.Mask<R>?>(eval(this.Patrol.Overall), this.Patrol.Specific?.Translate(eval));
                obj.Action = eval(this.Action);
                obj.HeadTrackingWeight = eval(this.HeadTrackingWeight);
                obj.FavorCost = eval(this.FavorCost);
                obj.OpenByDefault = eval(this.OpenByDefault);
                obj.MapMarker = this.MapMarker == null ? null : new MaskItem<R, MapMarker.Mask<R>?>(eval(this.MapMarker.Overall), this.MapMarker.Specific?.Translate(eval));
                obj.AttachRef = eval(this.AttachRef);
                obj.DistantLodData = eval(this.DistantLodData);
                obj.Placement = this.Placement == null ? null : new MaskItem<R, Placement.Mask<R>?>(eval(this.Placement.Overall), this.Placement.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PlacedObject.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PlacedObject.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PlacedObject.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.Base ?? true)
                    {
                        fg.AppendItem(Base, "Base");
                    }
                    if (printMask?.BoundHalfExtents ?? true)
                    {
                        fg.AppendItem(BoundHalfExtents, "BoundHalfExtents");
                    }
                    if (printMask?.Primitive?.Overall ?? true)
                    {
                        Primitive?.ToString(fg);
                    }
                    if (printMask?.XORD ?? true)
                    {
                        fg.AppendItem(XORD, "XORD");
                    }
                    if (printMask?.OcclusionPlane?.Overall ?? true)
                    {
                        OcclusionPlane?.ToString(fg);
                    }
                    if ((printMask?.Portals?.Overall ?? true)
                        && Portals.TryGet(out var PortalsItem))
                    {
                        fg.AppendLine("Portals =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PortalsItem.Overall);
                            if (PortalsItem.Specific != null)
                            {
                                foreach (var subItem in PortalsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.RoomPortal?.Overall ?? true)
                    {
                        RoomPortal?.ToString(fg);
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.LightingTemplate ?? true)
                    {
                        fg.AppendItem(LightingTemplate, "LightingTemplate");
                    }
                    if (printMask?.ImageSpace ?? true)
                    {
                        fg.AppendItem(ImageSpace, "ImageSpace");
                    }
                    if ((printMask?.LinkedRooms?.Overall ?? true)
                        && LinkedRooms.TryGet(out var LinkedRoomsItem))
                    {
                        fg.AppendLine("LinkedRooms =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LinkedRoomsItem.Overall);
                            if (LinkedRoomsItem.Specific != null)
                            {
                                foreach (var subItem in LinkedRoomsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.MultiBoundPrimitive ?? true)
                    {
                        fg.AppendItem(MultiBoundPrimitive, "MultiBoundPrimitive");
                    }
                    if (printMask?.RagdollData ?? true)
                    {
                        fg.AppendItem(RagdollData, "RagdollData");
                    }
                    if (printMask?.RagdollBipedData ?? true)
                    {
                        fg.AppendItem(RagdollBipedData, "RagdollBipedData");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        fg.AppendItem(Radius, "Radius");
                    }
                    if ((printMask?.Reflections?.Overall ?? true)
                        && Reflections.TryGet(out var ReflectionsItem))
                    {
                        fg.AppendLine("Reflections =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ReflectionsItem.Overall);
                            if (ReflectionsItem.Specific != null)
                            {
                                foreach (var subItem in ReflectionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.LitWater?.Overall ?? true)
                        && LitWater.TryGet(out var LitWaterItem))
                    {
                        fg.AppendLine("LitWater =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LitWaterItem.Overall);
                            if (LitWaterItem.Specific != null)
                            {
                                foreach (var subItem in LitWaterItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Emittance ?? true)
                    {
                        fg.AppendItem(Emittance, "Emittance");
                    }
                    if (printMask?.LightData?.Overall ?? true)
                    {
                        LightData?.ToString(fg);
                    }
                    if (printMask?.Alpha?.Overall ?? true)
                    {
                        Alpha?.ToString(fg);
                    }
                    if (printMask?.TeleportDestination?.Overall ?? true)
                    {
                        TeleportDestination?.ToString(fg);
                    }
                    if (printMask?.TeleportMessageBox ?? true)
                    {
                        fg.AppendItem(TeleportMessageBox, "TeleportMessageBox");
                    }
                    if (printMask?.MultiboundReference ?? true)
                    {
                        fg.AppendItem(MultiboundReference, "MultiboundReference");
                    }
                    if (printMask?.XWCN ?? true)
                    {
                        fg.AppendItem(XWCN, "XWCN");
                    }
                    if (printMask?.XWCS ?? true)
                    {
                        fg.AppendItem(XWCS, "XWCS");
                    }
                    if (printMask?.WaterVelocity?.Overall ?? true)
                    {
                        WaterVelocity?.ToString(fg);
                    }
                    if (printMask?.XCVL ?? true)
                    {
                        fg.AppendItem(XCVL, "XCVL");
                    }
                    if (printMask?.XCZR ?? true)
                    {
                        fg.AppendItem(XCZR, "XCZR");
                    }
                    if (printMask?.XCZA ?? true)
                    {
                        fg.AppendItem(XCZA, "XCZA");
                    }
                    if (printMask?.XCZC ?? true)
                    {
                        fg.AppendItem(XCZC, "XCZC");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        fg.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.SpawnContainer ?? true)
                    {
                        fg.AppendItem(SpawnContainer, "SpawnContainer");
                    }
                    if (printMask?.ActivateParents?.Overall ?? true)
                    {
                        ActivateParents?.ToString(fg);
                    }
                    if (printMask?.LeveledItemBaseObject ?? true)
                    {
                        fg.AppendItem(LeveledItemBaseObject, "LeveledItemBaseObject");
                    }
                    if (printMask?.LevelModifier ?? true)
                    {
                        fg.AppendItem(LevelModifier, "LevelModifier");
                    }
                    if (printMask?.PersistentLocation ?? true)
                    {
                        fg.AppendItem(PersistentLocation, "PersistentLocation");
                    }
                    if (printMask?.CollisionLayer ?? true)
                    {
                        fg.AppendItem(CollisionLayer, "CollisionLayer");
                    }
                    if (printMask?.Lock?.Overall ?? true)
                    {
                        Lock?.ToString(fg);
                    }
                    if (printMask?.EncounterZone ?? true)
                    {
                        fg.AppendItem(EncounterZone, "EncounterZone");
                    }
                    if (printMask?.NavigationDoorLink?.Overall ?? true)
                    {
                        NavigationDoorLink?.ToString(fg);
                    }
                    if ((printMask?.LocationRefTypes?.Overall ?? true)
                        && LocationRefTypes.TryGet(out var LocationRefTypesItem))
                    {
                        fg.AppendLine("LocationRefTypes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LocationRefTypesItem.Overall);
                            if (LocationRefTypesItem.Specific != null)
                            {
                                foreach (var subItem in LocationRefTypesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.IgnoredBySandbox ?? true)
                    {
                        fg.AppendItem(IgnoredBySandbox, "IgnoredBySandbox");
                    }
                    if (printMask?.Ownership?.Overall ?? true)
                    {
                        Ownership?.ToString(fg);
                    }
                    if (printMask?.ItemCount ?? true)
                    {
                        fg.AppendItem(ItemCount, "ItemCount");
                    }
                    if (printMask?.Charge ?? true)
                    {
                        fg.AppendItem(Charge, "Charge");
                    }
                    if (printMask?.LocationReference ?? true)
                    {
                        fg.AppendItem(LocationReference, "LocationReference");
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.ToString(fg);
                    }
                    if ((printMask?.LinkedReferences?.Overall ?? true)
                        && LinkedReferences.TryGet(out var LinkedReferencesItem))
                    {
                        fg.AppendLine("LinkedReferences =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LinkedReferencesItem.Overall);
                            if (LinkedReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LinkedReferencesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Patrol?.Overall ?? true)
                    {
                        Patrol?.ToString(fg);
                    }
                    if (printMask?.Action ?? true)
                    {
                        fg.AppendItem(Action, "Action");
                    }
                    if (printMask?.HeadTrackingWeight ?? true)
                    {
                        fg.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                    }
                    if (printMask?.FavorCost ?? true)
                    {
                        fg.AppendItem(FavorCost, "FavorCost");
                    }
                    if (printMask?.OpenByDefault ?? true)
                    {
                        fg.AppendItem(OpenByDefault, "OpenByDefault");
                    }
                    if (printMask?.MapMarker?.Overall ?? true)
                    {
                        MapMarker?.ToString(fg);
                    }
                    if (printMask?.AttachRef ?? true)
                    {
                        fg.AppendItem(AttachRef, "AttachRef");
                    }
                    if (printMask?.DistantLodData ?? true)
                    {
                        fg.AppendItem(DistantLodData, "DistantLodData");
                    }
                    if (printMask?.Placement?.Overall ?? true)
                    {
                        Placement?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APlaced.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Base;
            public Exception? BoundHalfExtents;
            public MaskItem<Exception?, PlacedPrimitive.ErrorMask?>? Primitive;
            public Exception? XORD;
            public MaskItem<Exception?, Bounding.ErrorMask?>? OcclusionPlane;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Portal.ErrorMask?>>?>? Portals;
            public MaskItem<Exception?, Bounding.ErrorMask?>? RoomPortal;
            public Exception? Unknown;
            public Exception? LightingTemplate;
            public Exception? ImageSpace;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LinkedRooms;
            public Exception? MultiBoundPrimitive;
            public Exception? RagdollData;
            public Exception? RagdollBipedData;
            public Exception? Radius;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>? Reflections;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LitWater;
            public Exception? Emittance;
            public MaskItem<Exception?, LightData.ErrorMask?>? LightData;
            public MaskItem<Exception?, Alpha.ErrorMask?>? Alpha;
            public MaskItem<Exception?, TeleportDestination.ErrorMask?>? TeleportDestination;
            public Exception? TeleportMessageBox;
            public Exception? MultiboundReference;
            public Exception? XWCN;
            public Exception? XWCS;
            public MaskItem<Exception?, WaterVelocity.ErrorMask?>? WaterVelocity;
            public Exception? XCVL;
            public Exception? XCZR;
            public Exception? XCZA;
            public Exception? XCZC;
            public Exception? Scale;
            public Exception? SpawnContainer;
            public MaskItem<Exception?, ActivateParents.ErrorMask?>? ActivateParents;
            public Exception? LeveledItemBaseObject;
            public Exception? LevelModifier;
            public Exception? PersistentLocation;
            public Exception? CollisionLayer;
            public MaskItem<Exception?, LockData.ErrorMask?>? Lock;
            public Exception? EncounterZone;
            public MaskItem<Exception?, NavigationDoorLink.ErrorMask?>? NavigationDoorLink;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LocationRefTypes;
            public Exception? IgnoredBySandbox;
            public MaskItem<Exception?, Ownership.ErrorMask?>? Ownership;
            public Exception? ItemCount;
            public Exception? Charge;
            public Exception? LocationReference;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>? LinkedReferences;
            public MaskItem<Exception?, Patrol.ErrorMask?>? Patrol;
            public Exception? Action;
            public Exception? HeadTrackingWeight;
            public Exception? FavorCost;
            public Exception? OpenByDefault;
            public MaskItem<Exception?, MapMarker.ErrorMask?>? MapMarker;
            public Exception? AttachRef;
            public Exception? DistantLodData;
            public MaskItem<Exception?, Placement.ErrorMask?>? Placement;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case PlacedObject_FieldIndex.Base:
                        return Base;
                    case PlacedObject_FieldIndex.BoundHalfExtents:
                        return BoundHalfExtents;
                    case PlacedObject_FieldIndex.Primitive:
                        return Primitive;
                    case PlacedObject_FieldIndex.XORD:
                        return XORD;
                    case PlacedObject_FieldIndex.OcclusionPlane:
                        return OcclusionPlane;
                    case PlacedObject_FieldIndex.Portals:
                        return Portals;
                    case PlacedObject_FieldIndex.RoomPortal:
                        return RoomPortal;
                    case PlacedObject_FieldIndex.Unknown:
                        return Unknown;
                    case PlacedObject_FieldIndex.LightingTemplate:
                        return LightingTemplate;
                    case PlacedObject_FieldIndex.ImageSpace:
                        return ImageSpace;
                    case PlacedObject_FieldIndex.LinkedRooms:
                        return LinkedRooms;
                    case PlacedObject_FieldIndex.MultiBoundPrimitive:
                        return MultiBoundPrimitive;
                    case PlacedObject_FieldIndex.RagdollData:
                        return RagdollData;
                    case PlacedObject_FieldIndex.RagdollBipedData:
                        return RagdollBipedData;
                    case PlacedObject_FieldIndex.Radius:
                        return Radius;
                    case PlacedObject_FieldIndex.Reflections:
                        return Reflections;
                    case PlacedObject_FieldIndex.LitWater:
                        return LitWater;
                    case PlacedObject_FieldIndex.Emittance:
                        return Emittance;
                    case PlacedObject_FieldIndex.LightData:
                        return LightData;
                    case PlacedObject_FieldIndex.Alpha:
                        return Alpha;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        return TeleportDestination;
                    case PlacedObject_FieldIndex.TeleportMessageBox:
                        return TeleportMessageBox;
                    case PlacedObject_FieldIndex.MultiboundReference:
                        return MultiboundReference;
                    case PlacedObject_FieldIndex.XWCN:
                        return XWCN;
                    case PlacedObject_FieldIndex.XWCS:
                        return XWCS;
                    case PlacedObject_FieldIndex.WaterVelocity:
                        return WaterVelocity;
                    case PlacedObject_FieldIndex.XCVL:
                        return XCVL;
                    case PlacedObject_FieldIndex.XCZR:
                        return XCZR;
                    case PlacedObject_FieldIndex.XCZA:
                        return XCZA;
                    case PlacedObject_FieldIndex.XCZC:
                        return XCZC;
                    case PlacedObject_FieldIndex.Scale:
                        return Scale;
                    case PlacedObject_FieldIndex.SpawnContainer:
                        return SpawnContainer;
                    case PlacedObject_FieldIndex.ActivateParents:
                        return ActivateParents;
                    case PlacedObject_FieldIndex.LeveledItemBaseObject:
                        return LeveledItemBaseObject;
                    case PlacedObject_FieldIndex.LevelModifier:
                        return LevelModifier;
                    case PlacedObject_FieldIndex.PersistentLocation:
                        return PersistentLocation;
                    case PlacedObject_FieldIndex.CollisionLayer:
                        return CollisionLayer;
                    case PlacedObject_FieldIndex.Lock:
                        return Lock;
                    case PlacedObject_FieldIndex.EncounterZone:
                        return EncounterZone;
                    case PlacedObject_FieldIndex.NavigationDoorLink:
                        return NavigationDoorLink;
                    case PlacedObject_FieldIndex.LocationRefTypes:
                        return LocationRefTypes;
                    case PlacedObject_FieldIndex.IgnoredBySandbox:
                        return IgnoredBySandbox;
                    case PlacedObject_FieldIndex.Ownership:
                        return Ownership;
                    case PlacedObject_FieldIndex.ItemCount:
                        return ItemCount;
                    case PlacedObject_FieldIndex.Charge:
                        return Charge;
                    case PlacedObject_FieldIndex.LocationReference:
                        return LocationReference;
                    case PlacedObject_FieldIndex.EnableParent:
                        return EnableParent;
                    case PlacedObject_FieldIndex.LinkedReferences:
                        return LinkedReferences;
                    case PlacedObject_FieldIndex.Patrol:
                        return Patrol;
                    case PlacedObject_FieldIndex.Action:
                        return Action;
                    case PlacedObject_FieldIndex.HeadTrackingWeight:
                        return HeadTrackingWeight;
                    case PlacedObject_FieldIndex.FavorCost:
                        return FavorCost;
                    case PlacedObject_FieldIndex.OpenByDefault:
                        return OpenByDefault;
                    case PlacedObject_FieldIndex.MapMarker:
                        return MapMarker;
                    case PlacedObject_FieldIndex.AttachRef:
                        return AttachRef;
                    case PlacedObject_FieldIndex.DistantLodData:
                        return DistantLodData;
                    case PlacedObject_FieldIndex.Placement:
                        return Placement;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Base:
                        this.Base = ex;
                        break;
                    case PlacedObject_FieldIndex.BoundHalfExtents:
                        this.BoundHalfExtents = ex;
                        break;
                    case PlacedObject_FieldIndex.Primitive:
                        this.Primitive = new MaskItem<Exception?, PlacedPrimitive.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.XORD:
                        this.XORD = ex;
                        break;
                    case PlacedObject_FieldIndex.OcclusionPlane:
                        this.OcclusionPlane = new MaskItem<Exception?, Bounding.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Portals:
                        this.Portals = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Portal.ErrorMask?>>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.RoomPortal:
                        this.RoomPortal = new MaskItem<Exception?, Bounding.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case PlacedObject_FieldIndex.LightingTemplate:
                        this.LightingTemplate = ex;
                        break;
                    case PlacedObject_FieldIndex.ImageSpace:
                        this.ImageSpace = ex;
                        break;
                    case PlacedObject_FieldIndex.LinkedRooms:
                        this.LinkedRooms = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.MultiBoundPrimitive:
                        this.MultiBoundPrimitive = ex;
                        break;
                    case PlacedObject_FieldIndex.RagdollData:
                        this.RagdollData = ex;
                        break;
                    case PlacedObject_FieldIndex.RagdollBipedData:
                        this.RagdollBipedData = ex;
                        break;
                    case PlacedObject_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case PlacedObject_FieldIndex.Reflections:
                        this.Reflections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.LitWater:
                        this.LitWater = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Emittance:
                        this.Emittance = ex;
                        break;
                    case PlacedObject_FieldIndex.LightData:
                        this.LightData = new MaskItem<Exception?, LightData.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Alpha:
                        this.Alpha = new MaskItem<Exception?, Alpha.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        this.TeleportDestination = new MaskItem<Exception?, TeleportDestination.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.TeleportMessageBox:
                        this.TeleportMessageBox = ex;
                        break;
                    case PlacedObject_FieldIndex.MultiboundReference:
                        this.MultiboundReference = ex;
                        break;
                    case PlacedObject_FieldIndex.XWCN:
                        this.XWCN = ex;
                        break;
                    case PlacedObject_FieldIndex.XWCS:
                        this.XWCS = ex;
                        break;
                    case PlacedObject_FieldIndex.WaterVelocity:
                        this.WaterVelocity = new MaskItem<Exception?, WaterVelocity.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.XCVL:
                        this.XCVL = ex;
                        break;
                    case PlacedObject_FieldIndex.XCZR:
                        this.XCZR = ex;
                        break;
                    case PlacedObject_FieldIndex.XCZA:
                        this.XCZA = ex;
                        break;
                    case PlacedObject_FieldIndex.XCZC:
                        this.XCZC = ex;
                        break;
                    case PlacedObject_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case PlacedObject_FieldIndex.SpawnContainer:
                        this.SpawnContainer = ex;
                        break;
                    case PlacedObject_FieldIndex.ActivateParents:
                        this.ActivateParents = new MaskItem<Exception?, ActivateParents.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.LeveledItemBaseObject:
                        this.LeveledItemBaseObject = ex;
                        break;
                    case PlacedObject_FieldIndex.LevelModifier:
                        this.LevelModifier = ex;
                        break;
                    case PlacedObject_FieldIndex.PersistentLocation:
                        this.PersistentLocation = ex;
                        break;
                    case PlacedObject_FieldIndex.CollisionLayer:
                        this.CollisionLayer = ex;
                        break;
                    case PlacedObject_FieldIndex.Lock:
                        this.Lock = new MaskItem<Exception?, LockData.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.EncounterZone:
                        this.EncounterZone = ex;
                        break;
                    case PlacedObject_FieldIndex.NavigationDoorLink:
                        this.NavigationDoorLink = new MaskItem<Exception?, NavigationDoorLink.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.IgnoredBySandbox:
                        this.IgnoredBySandbox = ex;
                        break;
                    case PlacedObject_FieldIndex.Ownership:
                        this.Ownership = new MaskItem<Exception?, Ownership.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.ItemCount:
                        this.ItemCount = ex;
                        break;
                    case PlacedObject_FieldIndex.Charge:
                        this.Charge = ex;
                        break;
                    case PlacedObject_FieldIndex.LocationReference:
                        this.LocationReference = ex;
                        break;
                    case PlacedObject_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.LinkedReferences:
                        this.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Patrol:
                        this.Patrol = new MaskItem<Exception?, Patrol.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Action:
                        this.Action = ex;
                        break;
                    case PlacedObject_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = ex;
                        break;
                    case PlacedObject_FieldIndex.FavorCost:
                        this.FavorCost = ex;
                        break;
                    case PlacedObject_FieldIndex.OpenByDefault:
                        this.OpenByDefault = ex;
                        break;
                    case PlacedObject_FieldIndex.MapMarker:
                        this.MapMarker = new MaskItem<Exception?, MapMarker.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.AttachRef:
                        this.AttachRef = ex;
                        break;
                    case PlacedObject_FieldIndex.DistantLodData:
                        this.DistantLodData = ex;
                        break;
                    case PlacedObject_FieldIndex.Placement:
                        this.Placement = new MaskItem<Exception?, Placement.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Base:
                        this.Base = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.BoundHalfExtents:
                        this.BoundHalfExtents = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Primitive:
                        this.Primitive = (MaskItem<Exception?, PlacedPrimitive.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.XORD:
                        this.XORD = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.OcclusionPlane:
                        this.OcclusionPlane = (MaskItem<Exception?, Bounding.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Portals:
                        this.Portals = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Portal.ErrorMask?>>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.RoomPortal:
                        this.RoomPortal = (MaskItem<Exception?, Bounding.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LightingTemplate:
                        this.LightingTemplate = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.ImageSpace:
                        this.ImageSpace = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LinkedRooms:
                        this.LinkedRooms = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.MultiBoundPrimitive:
                        this.MultiBoundPrimitive = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.RagdollData:
                        this.RagdollData = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.RagdollBipedData:
                        this.RagdollBipedData = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Reflections:
                        this.Reflections = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.LitWater:
                        this.LitWater = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.Emittance:
                        this.Emittance = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LightData:
                        this.LightData = (MaskItem<Exception?, LightData.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Alpha:
                        this.Alpha = (MaskItem<Exception?, Alpha.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        this.TeleportDestination = (MaskItem<Exception?, TeleportDestination.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.TeleportMessageBox:
                        this.TeleportMessageBox = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.MultiboundReference:
                        this.MultiboundReference = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XWCN:
                        this.XWCN = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XWCS:
                        this.XWCS = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.WaterVelocity:
                        this.WaterVelocity = (MaskItem<Exception?, WaterVelocity.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.XCVL:
                        this.XCVL = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XCZR:
                        this.XCZR = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XCZA:
                        this.XCZA = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XCZC:
                        this.XCZC = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.SpawnContainer:
                        this.SpawnContainer = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.ActivateParents:
                        this.ActivateParents = (MaskItem<Exception?, ActivateParents.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.LeveledItemBaseObject:
                        this.LeveledItemBaseObject = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LevelModifier:
                        this.LevelModifier = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.PersistentLocation:
                        this.PersistentLocation = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.CollisionLayer:
                        this.CollisionLayer = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Lock:
                        this.Lock = (MaskItem<Exception?, LockData.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.EncounterZone:
                        this.EncounterZone = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.NavigationDoorLink:
                        this.NavigationDoorLink = (MaskItem<Exception?, NavigationDoorLink.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.IgnoredBySandbox:
                        this.IgnoredBySandbox = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Ownership:
                        this.Ownership = (MaskItem<Exception?, Ownership.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.ItemCount:
                        this.ItemCount = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Charge:
                        this.Charge = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LocationReference:
                        this.LocationReference = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.LinkedReferences:
                        this.LinkedReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.Patrol:
                        this.Patrol = (MaskItem<Exception?, Patrol.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Action:
                        this.Action = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.FavorCost:
                        this.FavorCost = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.OpenByDefault:
                        this.OpenByDefault = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.MapMarker:
                        this.MapMarker = (MaskItem<Exception?, MapMarker.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.AttachRef:
                        this.AttachRef = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.DistantLodData:
                        this.DistantLodData = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Placement:
                        this.Placement = (MaskItem<Exception?, Placement.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Base != null) return true;
                if (BoundHalfExtents != null) return true;
                if (Primitive != null) return true;
                if (XORD != null) return true;
                if (OcclusionPlane != null) return true;
                if (Portals != null) return true;
                if (RoomPortal != null) return true;
                if (Unknown != null) return true;
                if (LightingTemplate != null) return true;
                if (ImageSpace != null) return true;
                if (LinkedRooms != null) return true;
                if (MultiBoundPrimitive != null) return true;
                if (RagdollData != null) return true;
                if (RagdollBipedData != null) return true;
                if (Radius != null) return true;
                if (Reflections != null) return true;
                if (LitWater != null) return true;
                if (Emittance != null) return true;
                if (LightData != null) return true;
                if (Alpha != null) return true;
                if (TeleportDestination != null) return true;
                if (TeleportMessageBox != null) return true;
                if (MultiboundReference != null) return true;
                if (XWCN != null) return true;
                if (XWCS != null) return true;
                if (WaterVelocity != null) return true;
                if (XCVL != null) return true;
                if (XCZR != null) return true;
                if (XCZA != null) return true;
                if (XCZC != null) return true;
                if (Scale != null) return true;
                if (SpawnContainer != null) return true;
                if (ActivateParents != null) return true;
                if (LeveledItemBaseObject != null) return true;
                if (LevelModifier != null) return true;
                if (PersistentLocation != null) return true;
                if (CollisionLayer != null) return true;
                if (Lock != null) return true;
                if (EncounterZone != null) return true;
                if (NavigationDoorLink != null) return true;
                if (LocationRefTypes != null) return true;
                if (IgnoredBySandbox != null) return true;
                if (Ownership != null) return true;
                if (ItemCount != null) return true;
                if (Charge != null) return true;
                if (LocationReference != null) return true;
                if (EnableParent != null) return true;
                if (LinkedReferences != null) return true;
                if (Patrol != null) return true;
                if (Action != null) return true;
                if (HeadTrackingWeight != null) return true;
                if (FavorCost != null) return true;
                if (OpenByDefault != null) return true;
                if (MapMarker != null) return true;
                if (AttachRef != null) return true;
                if (DistantLodData != null) return true;
                if (Placement != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(Base, "Base");
                fg.AppendItem(BoundHalfExtents, "BoundHalfExtents");
                Primitive?.ToString(fg);
                fg.AppendItem(XORD, "XORD");
                OcclusionPlane?.ToString(fg);
                if (Portals.TryGet(out var PortalsItem))
                {
                    fg.AppendLine("Portals =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PortalsItem.Overall);
                        if (PortalsItem.Specific != null)
                        {
                            foreach (var subItem in PortalsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                RoomPortal?.ToString(fg);
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(LightingTemplate, "LightingTemplate");
                fg.AppendItem(ImageSpace, "ImageSpace");
                if (LinkedRooms.TryGet(out var LinkedRoomsItem))
                {
                    fg.AppendLine("LinkedRooms =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LinkedRoomsItem.Overall);
                        if (LinkedRoomsItem.Specific != null)
                        {
                            foreach (var subItem in LinkedRoomsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(MultiBoundPrimitive, "MultiBoundPrimitive");
                fg.AppendItem(RagdollData, "RagdollData");
                fg.AppendItem(RagdollBipedData, "RagdollBipedData");
                fg.AppendItem(Radius, "Radius");
                if (Reflections.TryGet(out var ReflectionsItem))
                {
                    fg.AppendLine("Reflections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ReflectionsItem.Overall);
                        if (ReflectionsItem.Specific != null)
                        {
                            foreach (var subItem in ReflectionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (LitWater.TryGet(out var LitWaterItem))
                {
                    fg.AppendLine("LitWater =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LitWaterItem.Overall);
                        if (LitWaterItem.Specific != null)
                        {
                            foreach (var subItem in LitWaterItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Emittance, "Emittance");
                LightData?.ToString(fg);
                Alpha?.ToString(fg);
                TeleportDestination?.ToString(fg);
                fg.AppendItem(TeleportMessageBox, "TeleportMessageBox");
                fg.AppendItem(MultiboundReference, "MultiboundReference");
                fg.AppendItem(XWCN, "XWCN");
                fg.AppendItem(XWCS, "XWCS");
                WaterVelocity?.ToString(fg);
                fg.AppendItem(XCVL, "XCVL");
                fg.AppendItem(XCZR, "XCZR");
                fg.AppendItem(XCZA, "XCZA");
                fg.AppendItem(XCZC, "XCZC");
                fg.AppendItem(Scale, "Scale");
                fg.AppendItem(SpawnContainer, "SpawnContainer");
                ActivateParents?.ToString(fg);
                fg.AppendItem(LeveledItemBaseObject, "LeveledItemBaseObject");
                fg.AppendItem(LevelModifier, "LevelModifier");
                fg.AppendItem(PersistentLocation, "PersistentLocation");
                fg.AppendItem(CollisionLayer, "CollisionLayer");
                Lock?.ToString(fg);
                fg.AppendItem(EncounterZone, "EncounterZone");
                NavigationDoorLink?.ToString(fg);
                if (LocationRefTypes.TryGet(out var LocationRefTypesItem))
                {
                    fg.AppendLine("LocationRefTypes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LocationRefTypesItem.Overall);
                        if (LocationRefTypesItem.Specific != null)
                        {
                            foreach (var subItem in LocationRefTypesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(IgnoredBySandbox, "IgnoredBySandbox");
                Ownership?.ToString(fg);
                fg.AppendItem(ItemCount, "ItemCount");
                fg.AppendItem(Charge, "Charge");
                fg.AppendItem(LocationReference, "LocationReference");
                EnableParent?.ToString(fg);
                if (LinkedReferences.TryGet(out var LinkedReferencesItem))
                {
                    fg.AppendLine("LinkedReferences =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LinkedReferencesItem.Overall);
                        if (LinkedReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LinkedReferencesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Patrol?.ToString(fg);
                fg.AppendItem(Action, "Action");
                fg.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                fg.AppendItem(FavorCost, "FavorCost");
                fg.AppendItem(OpenByDefault, "OpenByDefault");
                MapMarker?.ToString(fg);
                fg.AppendItem(AttachRef, "AttachRef");
                fg.AppendItem(DistantLodData, "DistantLodData");
                Placement?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Base = this.Base.Combine(rhs.Base);
                ret.BoundHalfExtents = this.BoundHalfExtents.Combine(rhs.BoundHalfExtents);
                ret.Primitive = this.Primitive.Combine(rhs.Primitive, (l, r) => l.Combine(r));
                ret.XORD = this.XORD.Combine(rhs.XORD);
                ret.OcclusionPlane = this.OcclusionPlane.Combine(rhs.OcclusionPlane, (l, r) => l.Combine(r));
                ret.Portals = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Portal.ErrorMask?>>?>(ExceptionExt.Combine(this.Portals?.Overall, rhs.Portals?.Overall), ExceptionExt.Combine(this.Portals?.Specific, rhs.Portals?.Specific));
                ret.RoomPortal = this.RoomPortal.Combine(rhs.RoomPortal, (l, r) => l.Combine(r));
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.LightingTemplate = this.LightingTemplate.Combine(rhs.LightingTemplate);
                ret.ImageSpace = this.ImageSpace.Combine(rhs.ImageSpace);
                ret.LinkedRooms = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.LinkedRooms?.Overall, rhs.LinkedRooms?.Overall), ExceptionExt.Combine(this.LinkedRooms?.Specific, rhs.LinkedRooms?.Specific));
                ret.MultiBoundPrimitive = this.MultiBoundPrimitive.Combine(rhs.MultiBoundPrimitive);
                ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
                ret.RagdollBipedData = this.RagdollBipedData.Combine(rhs.RagdollBipedData);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.Reflections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>(ExceptionExt.Combine(this.Reflections?.Overall, rhs.Reflections?.Overall), ExceptionExt.Combine(this.Reflections?.Specific, rhs.Reflections?.Specific));
                ret.LitWater = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.LitWater?.Overall, rhs.LitWater?.Overall), ExceptionExt.Combine(this.LitWater?.Specific, rhs.LitWater?.Specific));
                ret.Emittance = this.Emittance.Combine(rhs.Emittance);
                ret.LightData = this.LightData.Combine(rhs.LightData, (l, r) => l.Combine(r));
                ret.Alpha = this.Alpha.Combine(rhs.Alpha, (l, r) => l.Combine(r));
                ret.TeleportDestination = this.TeleportDestination.Combine(rhs.TeleportDestination, (l, r) => l.Combine(r));
                ret.TeleportMessageBox = this.TeleportMessageBox.Combine(rhs.TeleportMessageBox);
                ret.MultiboundReference = this.MultiboundReference.Combine(rhs.MultiboundReference);
                ret.XWCN = this.XWCN.Combine(rhs.XWCN);
                ret.XWCS = this.XWCS.Combine(rhs.XWCS);
                ret.WaterVelocity = this.WaterVelocity.Combine(rhs.WaterVelocity, (l, r) => l.Combine(r));
                ret.XCVL = this.XCVL.Combine(rhs.XCVL);
                ret.XCZR = this.XCZR.Combine(rhs.XCZR);
                ret.XCZA = this.XCZA.Combine(rhs.XCZA);
                ret.XCZC = this.XCZC.Combine(rhs.XCZC);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.SpawnContainer = this.SpawnContainer.Combine(rhs.SpawnContainer);
                ret.ActivateParents = this.ActivateParents.Combine(rhs.ActivateParents, (l, r) => l.Combine(r));
                ret.LeveledItemBaseObject = this.LeveledItemBaseObject.Combine(rhs.LeveledItemBaseObject);
                ret.LevelModifier = this.LevelModifier.Combine(rhs.LevelModifier);
                ret.PersistentLocation = this.PersistentLocation.Combine(rhs.PersistentLocation);
                ret.CollisionLayer = this.CollisionLayer.Combine(rhs.CollisionLayer);
                ret.Lock = this.Lock.Combine(rhs.Lock, (l, r) => l.Combine(r));
                ret.EncounterZone = this.EncounterZone.Combine(rhs.EncounterZone);
                ret.NavigationDoorLink = this.NavigationDoorLink.Combine(rhs.NavigationDoorLink, (l, r) => l.Combine(r));
                ret.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.LocationRefTypes?.Overall, rhs.LocationRefTypes?.Overall), ExceptionExt.Combine(this.LocationRefTypes?.Specific, rhs.LocationRefTypes?.Specific));
                ret.IgnoredBySandbox = this.IgnoredBySandbox.Combine(rhs.IgnoredBySandbox);
                ret.Ownership = this.Ownership.Combine(rhs.Ownership, (l, r) => l.Combine(r));
                ret.ItemCount = this.ItemCount.Combine(rhs.ItemCount);
                ret.Charge = this.Charge.Combine(rhs.Charge);
                ret.LocationReference = this.LocationReference.Combine(rhs.LocationReference);
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ExceptionExt.Combine(this.LinkedReferences?.Overall, rhs.LinkedReferences?.Overall), ExceptionExt.Combine(this.LinkedReferences?.Specific, rhs.LinkedReferences?.Specific));
                ret.Patrol = this.Patrol.Combine(rhs.Patrol, (l, r) => l.Combine(r));
                ret.Action = this.Action.Combine(rhs.Action);
                ret.HeadTrackingWeight = this.HeadTrackingWeight.Combine(rhs.HeadTrackingWeight);
                ret.FavorCost = this.FavorCost.Combine(rhs.FavorCost);
                ret.OpenByDefault = this.OpenByDefault.Combine(rhs.OpenByDefault);
                ret.MapMarker = this.MapMarker.Combine(rhs.MapMarker, (l, r) => l.Combine(r));
                ret.AttachRef = this.AttachRef.Combine(rhs.AttachRef);
                ret.DistantLodData = this.DistantLodData.Combine(rhs.DistantLodData);
                ret.Placement = this.Placement.Combine(rhs.Placement, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APlaced.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public bool Base;
            public bool BoundHalfExtents;
            public PlacedPrimitive.TranslationMask? Primitive;
            public bool XORD;
            public Bounding.TranslationMask? OcclusionPlane;
            public Portal.TranslationMask? Portals;
            public Bounding.TranslationMask? RoomPortal;
            public bool Unknown;
            public bool LightingTemplate;
            public bool ImageSpace;
            public bool LinkedRooms;
            public bool MultiBoundPrimitive;
            public bool RagdollData;
            public bool RagdollBipedData;
            public bool Radius;
            public WaterReflection.TranslationMask? Reflections;
            public bool LitWater;
            public bool Emittance;
            public LightData.TranslationMask? LightData;
            public Alpha.TranslationMask? Alpha;
            public TeleportDestination.TranslationMask? TeleportDestination;
            public bool TeleportMessageBox;
            public bool MultiboundReference;
            public bool XWCN;
            public bool XWCS;
            public WaterVelocity.TranslationMask? WaterVelocity;
            public bool XCVL;
            public bool XCZR;
            public bool XCZA;
            public bool XCZC;
            public bool Scale;
            public bool SpawnContainer;
            public ActivateParents.TranslationMask? ActivateParents;
            public bool LeveledItemBaseObject;
            public bool LevelModifier;
            public bool PersistentLocation;
            public bool CollisionLayer;
            public LockData.TranslationMask? Lock;
            public bool EncounterZone;
            public NavigationDoorLink.TranslationMask? NavigationDoorLink;
            public bool LocationRefTypes;
            public bool IgnoredBySandbox;
            public Ownership.TranslationMask? Ownership;
            public bool ItemCount;
            public bool Charge;
            public bool LocationReference;
            public EnableParent.TranslationMask? EnableParent;
            public LinkedReferences.TranslationMask? LinkedReferences;
            public Patrol.TranslationMask? Patrol;
            public bool Action;
            public bool HeadTrackingWeight;
            public bool FavorCost;
            public bool OpenByDefault;
            public MapMarker.TranslationMask? MapMarker;
            public bool AttachRef;
            public bool DistantLodData;
            public Placement.TranslationMask? Placement;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Base = defaultOn;
                this.BoundHalfExtents = defaultOn;
                this.XORD = defaultOn;
                this.Unknown = defaultOn;
                this.LightingTemplate = defaultOn;
                this.ImageSpace = defaultOn;
                this.LinkedRooms = defaultOn;
                this.MultiBoundPrimitive = defaultOn;
                this.RagdollData = defaultOn;
                this.RagdollBipedData = defaultOn;
                this.Radius = defaultOn;
                this.LitWater = defaultOn;
                this.Emittance = defaultOn;
                this.TeleportMessageBox = defaultOn;
                this.MultiboundReference = defaultOn;
                this.XWCN = defaultOn;
                this.XWCS = defaultOn;
                this.XCVL = defaultOn;
                this.XCZR = defaultOn;
                this.XCZA = defaultOn;
                this.XCZC = defaultOn;
                this.Scale = defaultOn;
                this.SpawnContainer = defaultOn;
                this.LeveledItemBaseObject = defaultOn;
                this.LevelModifier = defaultOn;
                this.PersistentLocation = defaultOn;
                this.CollisionLayer = defaultOn;
                this.EncounterZone = defaultOn;
                this.LocationRefTypes = defaultOn;
                this.IgnoredBySandbox = defaultOn;
                this.ItemCount = defaultOn;
                this.Charge = defaultOn;
                this.LocationReference = defaultOn;
                this.Action = defaultOn;
                this.HeadTrackingWeight = defaultOn;
                this.FavorCost = defaultOn;
                this.OpenByDefault = defaultOn;
                this.AttachRef = defaultOn;
                this.DistantLodData = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Base, null));
                ret.Add((BoundHalfExtents, null));
                ret.Add((Primitive != null ? Primitive.OnOverall : DefaultOn, Primitive?.GetCrystal()));
                ret.Add((XORD, null));
                ret.Add((OcclusionPlane != null ? OcclusionPlane.OnOverall : DefaultOn, OcclusionPlane?.GetCrystal()));
                ret.Add((Portals == null ? DefaultOn : !Portals.GetCrystal().CopyNothing, Portals?.GetCrystal()));
                ret.Add((RoomPortal != null ? RoomPortal.OnOverall : DefaultOn, RoomPortal?.GetCrystal()));
                ret.Add((Unknown, null));
                ret.Add((LightingTemplate, null));
                ret.Add((ImageSpace, null));
                ret.Add((LinkedRooms, null));
                ret.Add((MultiBoundPrimitive, null));
                ret.Add((RagdollData, null));
                ret.Add((RagdollBipedData, null));
                ret.Add((Radius, null));
                ret.Add((Reflections == null ? DefaultOn : !Reflections.GetCrystal().CopyNothing, Reflections?.GetCrystal()));
                ret.Add((LitWater, null));
                ret.Add((Emittance, null));
                ret.Add((LightData != null ? LightData.OnOverall : DefaultOn, LightData?.GetCrystal()));
                ret.Add((Alpha != null ? Alpha.OnOverall : DefaultOn, Alpha?.GetCrystal()));
                ret.Add((TeleportDestination != null ? TeleportDestination.OnOverall : DefaultOn, TeleportDestination?.GetCrystal()));
                ret.Add((TeleportMessageBox, null));
                ret.Add((MultiboundReference, null));
                ret.Add((XWCN, null));
                ret.Add((XWCS, null));
                ret.Add((WaterVelocity != null ? WaterVelocity.OnOverall : DefaultOn, WaterVelocity?.GetCrystal()));
                ret.Add((XCVL, null));
                ret.Add((XCZR, null));
                ret.Add((XCZA, null));
                ret.Add((XCZC, null));
                ret.Add((Scale, null));
                ret.Add((SpawnContainer, null));
                ret.Add((ActivateParents != null ? ActivateParents.OnOverall : DefaultOn, ActivateParents?.GetCrystal()));
                ret.Add((LeveledItemBaseObject, null));
                ret.Add((LevelModifier, null));
                ret.Add((PersistentLocation, null));
                ret.Add((CollisionLayer, null));
                ret.Add((Lock != null ? Lock.OnOverall : DefaultOn, Lock?.GetCrystal()));
                ret.Add((EncounterZone, null));
                ret.Add((NavigationDoorLink != null ? NavigationDoorLink.OnOverall : DefaultOn, NavigationDoorLink?.GetCrystal()));
                ret.Add((LocationRefTypes, null));
                ret.Add((IgnoredBySandbox, null));
                ret.Add((Ownership != null ? Ownership.OnOverall : DefaultOn, Ownership?.GetCrystal()));
                ret.Add((ItemCount, null));
                ret.Add((Charge, null));
                ret.Add((LocationReference, null));
                ret.Add((EnableParent != null ? EnableParent.OnOverall : DefaultOn, EnableParent?.GetCrystal()));
                ret.Add((LinkedReferences == null ? DefaultOn : !LinkedReferences.GetCrystal().CopyNothing, LinkedReferences?.GetCrystal()));
                ret.Add((Patrol != null ? Patrol.OnOverall : DefaultOn, Patrol?.GetCrystal()));
                ret.Add((Action, null));
                ret.Add((HeadTrackingWeight, null));
                ret.Add((FavorCost, null));
                ret.Add((OpenByDefault, null));
                ret.Add((MapMarker != null ? MapMarker.OnOverall : DefaultOn, MapMarker?.GetCrystal()));
                ret.Add((AttachRef, null));
                ret.Add((DistantLodData, null));
                ret.Add((Placement != null ? Placement.OnOverall : DefaultOn, Placement?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = PlacedObject_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PlacedObjectCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedObjectSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedObject(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private PlacedObject(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal PlacedObject(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public PlacedObject(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public PlacedObject(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static PlacedObject CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PlacedObject();
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedObject item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedObject GetNew()
        {
            return new PlacedObject();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedObject :
        IPlacedObjectGetter,
        IAPlaced,
        ILinkedReference,
        IKeywordLinkedReference,
        IPlaced,
        IPlacedSimple,
        IPlacedThing,
        ILocationTargetable,
        ILoquiObjectSetter<IPlacedObjectInternal>,
        IFormLinkContainer
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new FormLinkNullable<IFallout4MajorRecordGetter> Base { get; set; }
        new P3Float? BoundHalfExtents { get; set; }
        new PlacedPrimitive? Primitive { get; set; }
        new MemorySlice<Byte>? XORD { get; set; }
        new Bounding? OcclusionPlane { get; set; }
        new ExtendedList<Portal>? Portals { get; set; }
        new Bounding? RoomPortal { get; set; }
        new Int16 Unknown { get; set; }
        new FormLinkNullable<ILightGetter> LightingTemplate { get; set; }
        new FormLinkNullable<IImageSpaceAdapterGetter> ImageSpace { get; set; }
        new ExtendedList<IFormLink<IPlacedObjectGetter>> LinkedRooms { get; }
        new Boolean MultiBoundPrimitive { get; set; }
        new MemorySlice<Byte>? RagdollData { get; set; }
        new MemorySlice<Byte>? RagdollBipedData { get; set; }
        new Single? Radius { get; set; }
        new ExtendedList<WaterReflection> Reflections { get; }
        new ExtendedList<IFormLink<IPlacedObjectGetter>> LitWater { get; }
        new FormLinkNullable<IEmittanceGetter> Emittance { get; set; }
        new LightData? LightData { get; set; }
        new Alpha? Alpha { get; set; }
        new TeleportDestination? TeleportDestination { get; set; }
        new FormLinkNullable<IMessageGetter> TeleportMessageBox { get; set; }
        new FormLinkNullable<IPlacedObjectGetter> MultiboundReference { get; set; }
        new MemorySlice<Byte>? XWCN { get; set; }
        new MemorySlice<Byte>? XWCS { get; set; }
        new WaterVelocity? WaterVelocity { get; set; }
        new MemorySlice<Byte>? XCVL { get; set; }
        new FormLinkNullable<ILinkedReferenceGetter> XCZR { get; set; }
        new MemorySlice<Byte>? XCZA { get; set; }
        new FormLinkNullable<ICellGetter> XCZC { get; set; }
        new Single? Scale { get; set; }
        new FormLinkNullable<IPlacedObjectGetter> SpawnContainer { get; set; }
        new ActivateParents? ActivateParents { get; set; }
        new FormLinkNullable<ILeveledItemGetter> LeveledItemBaseObject { get; set; }
        new Level? LevelModifier { get; set; }
        new FormLinkNullable<ILocationGetter> PersistentLocation { get; set; }
        new UInt32? CollisionLayer { get; set; }
        new LockData? Lock { get; set; }
        new FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; }
        new NavigationDoorLink? NavigationDoorLink { get; set; }
        new ExtendedList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes { get; set; }
        new Boolean IgnoredBySandbox { get; set; }
        new Ownership? Ownership { get; set; }
        new Int32? ItemCount { get; set; }
        new Single? Charge { get; set; }
        new FormLinkNullable<ILocationRecordGetter> LocationReference { get; set; }
        new EnableParent? EnableParent { get; set; }
        new ExtendedList<LinkedReferences> LinkedReferences { get; }
        new Patrol? Patrol { get; set; }
        new PlacedObject.ActionFlag? Action { get; set; }
        new Single? HeadTrackingWeight { get; set; }
        new Single? FavorCost { get; set; }
        new Boolean OpenByDefault { get; set; }
        new MapMarker? MapMarker { get; set; }
        new FormLinkNullable<IPlacedThingGetter> AttachRef { get; set; }
        new MemorySlice<Byte>? DistantLodData { get; set; }
        new Placement? Placement { get; set; }
    }

    public partial interface IPlacedObjectInternal :
        IAPlacedInternal,
        IPlacedObject,
        IPlacedObjectGetter
    {
    }

    public partial interface IPlacedObjectGetter :
        IAPlacedGetter,
        ILinkedReferenceGetter,
        IKeywordLinkedReferenceGetter,
        IPlacedGetter,
        IPlacedSimpleGetter,
        IPlacedThingGetter,
        ILocationTargetableGetter,
        ILoquiObject<IPlacedObjectGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => PlacedObject_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        FormLinkNullable<IFallout4MajorRecordGetter> Base { get; }
        P3Float? BoundHalfExtents { get; }
        IPlacedPrimitiveGetter? Primitive { get; }
        ReadOnlyMemorySlice<Byte>? XORD { get; }
        IBoundingGetter? OcclusionPlane { get; }
        IReadOnlyList<IPortalGetter>? Portals { get; }
        IBoundingGetter? RoomPortal { get; }
        Int16 Unknown { get; }
        FormLinkNullable<ILightGetter> LightingTemplate { get; }
        FormLinkNullable<IImageSpaceAdapterGetter> ImageSpace { get; }
        IReadOnlyList<IFormLink<IPlacedObjectGetter>> LinkedRooms { get; }
        Boolean MultiBoundPrimitive { get; }
        ReadOnlyMemorySlice<Byte>? RagdollData { get; }
        ReadOnlyMemorySlice<Byte>? RagdollBipedData { get; }
        Single? Radius { get; }
        IReadOnlyList<IWaterReflectionGetter> Reflections { get; }
        IReadOnlyList<IFormLink<IPlacedObjectGetter>> LitWater { get; }
        FormLinkNullable<IEmittanceGetter> Emittance { get; }
        ILightDataGetter? LightData { get; }
        IAlphaGetter? Alpha { get; }
        ITeleportDestinationGetter? TeleportDestination { get; }
        FormLinkNullable<IMessageGetter> TeleportMessageBox { get; }
        FormLinkNullable<IPlacedObjectGetter> MultiboundReference { get; }
        ReadOnlyMemorySlice<Byte>? XWCN { get; }
        ReadOnlyMemorySlice<Byte>? XWCS { get; }
        IWaterVelocityGetter? WaterVelocity { get; }
        ReadOnlyMemorySlice<Byte>? XCVL { get; }
        FormLinkNullable<ILinkedReferenceGetter> XCZR { get; }
        ReadOnlyMemorySlice<Byte>? XCZA { get; }
        FormLinkNullable<ICellGetter> XCZC { get; }
        Single? Scale { get; }
        FormLinkNullable<IPlacedObjectGetter> SpawnContainer { get; }
        IActivateParentsGetter? ActivateParents { get; }
        FormLinkNullable<ILeveledItemGetter> LeveledItemBaseObject { get; }
        Level? LevelModifier { get; }
        FormLinkNullable<ILocationGetter> PersistentLocation { get; }
        UInt32? CollisionLayer { get; }
        ILockDataGetter? Lock { get; }
        FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; }
        INavigationDoorLinkGetter? NavigationDoorLink { get; }
        IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes { get; }
        Boolean IgnoredBySandbox { get; }
        IOwnershipGetter? Ownership { get; }
        Int32? ItemCount { get; }
        Single? Charge { get; }
        FormLinkNullable<ILocationRecordGetter> LocationReference { get; }
        IEnableParentGetter? EnableParent { get; }
        IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; }
        IPatrolGetter? Patrol { get; }
        PlacedObject.ActionFlag? Action { get; }
        Single? HeadTrackingWeight { get; }
        Single? FavorCost { get; }
        Boolean OpenByDefault { get; }
        IMapMarkerGetter? MapMarker { get; }
        FormLinkNullable<IPlacedThingGetter> AttachRef { get; }
        ReadOnlyMemorySlice<Byte>? DistantLodData { get; }
        IPlacementGetter? Placement { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedObjectMixIn
    {
        public static void Clear(this IPlacedObjectInternal item)
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedObject.Mask<bool> GetEqualsMask(
            this IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPlacedObjectGetter item,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPlacedObjectGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedObjectGetter item,
            IPlacedObjectGetter rhs)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPlacedObjectInternal lhs,
            IPlacedObjectGetter rhs,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedObjectInternal lhs,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            PlacedObject.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedObject Duplicate(
            this IPlacedObjectGetter item,
            FormKey formKey,
            PlacedObject.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedObjectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PlacedObject_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        Base = 7,
        BoundHalfExtents = 8,
        Primitive = 9,
        XORD = 10,
        OcclusionPlane = 11,
        Portals = 12,
        RoomPortal = 13,
        Unknown = 14,
        LightingTemplate = 15,
        ImageSpace = 16,
        LinkedRooms = 17,
        MultiBoundPrimitive = 18,
        RagdollData = 19,
        RagdollBipedData = 20,
        Radius = 21,
        Reflections = 22,
        LitWater = 23,
        Emittance = 24,
        LightData = 25,
        Alpha = 26,
        TeleportDestination = 27,
        TeleportMessageBox = 28,
        MultiboundReference = 29,
        XWCN = 30,
        XWCS = 31,
        WaterVelocity = 32,
        XCVL = 33,
        XCZR = 34,
        XCZA = 35,
        XCZC = 36,
        Scale = 37,
        SpawnContainer = 38,
        ActivateParents = 39,
        LeveledItemBaseObject = 40,
        LevelModifier = 41,
        PersistentLocation = 42,
        CollisionLayer = 43,
        Lock = 44,
        EncounterZone = 45,
        NavigationDoorLink = 46,
        LocationRefTypes = 47,
        IgnoredBySandbox = 48,
        Ownership = 49,
        ItemCount = 50,
        Charge = 51,
        LocationReference = 52,
        EnableParent = 53,
        LinkedReferences = 54,
        Patrol = 55,
        Action = 56,
        HeadTrackingWeight = 57,
        FavorCost = 58,
        OpenByDefault = 59,
        MapMarker = 60,
        AttachRef = 61,
        DistantLodData = 62,
        Placement = 63,
    }
    #endregion

    #region Registration
    public partial class PlacedObject_Registration : ILoquiRegistration
    {
        public static readonly PlacedObject_Registration Instance = new PlacedObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 30,
            version: 0);

        public const string GUID = "15cab6c0-7390-410a-b2a8-7ee0e58569a6";

        public const ushort AdditionalFieldCount = 58;

        public const ushort FieldCount = 64;

        public static readonly Type MaskType = typeof(PlacedObject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedObject.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedObject);

        public static readonly Type GetterType = typeof(IPlacedObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedObject);

        public static readonly Type? InternalSetterType = typeof(IPlacedObjectInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.PlacedObject";

        public const string Name = "PlacedObject";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.REFR;
        public static readonly Type BinaryWriteTranslation = typeof(PlacedObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PlacedObjectSetterCommon : APlacedSetterCommon
    {
        public new static readonly PlacedObjectSetterCommon Instance = new PlacedObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedObjectInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Base = FormLinkNullable<IFallout4MajorRecordGetter>.Null;
            item.BoundHalfExtents = default;
            item.Primitive = null;
            item.XORD = default;
            item.OcclusionPlane = null;
            item.Portals = null;
            item.RoomPortal = null;
            item.Unknown = default;
            item.LightingTemplate = FormLinkNullable<ILightGetter>.Null;
            item.ImageSpace = FormLinkNullable<IImageSpaceAdapterGetter>.Null;
            item.LinkedRooms.Clear();
            item.MultiBoundPrimitive = default;
            item.RagdollData = default;
            item.RagdollBipedData = default;
            item.Radius = default;
            item.Reflections.Clear();
            item.LitWater.Clear();
            item.Emittance = FormLinkNullable<IEmittanceGetter>.Null;
            item.LightData = null;
            item.Alpha = null;
            item.TeleportDestination = null;
            item.TeleportMessageBox = FormLinkNullable<IMessageGetter>.Null;
            item.MultiboundReference = FormLinkNullable<IPlacedObjectGetter>.Null;
            item.XWCN = default;
            item.XWCS = default;
            item.WaterVelocity = null;
            item.XCVL = default;
            item.XCZR = FormLinkNullable<ILinkedReferenceGetter>.Null;
            item.XCZA = default;
            item.XCZC = FormLinkNullable<ICellGetter>.Null;
            item.Scale = default;
            item.SpawnContainer = FormLinkNullable<IPlacedObjectGetter>.Null;
            item.ActivateParents = null;
            item.LeveledItemBaseObject = FormLinkNullable<ILeveledItemGetter>.Null;
            item.LevelModifier = default;
            item.PersistentLocation = FormLinkNullable<ILocationGetter>.Null;
            item.CollisionLayer = default;
            item.Lock = null;
            item.EncounterZone = FormLinkNullable<IEncounterZoneGetter>.Null;
            item.NavigationDoorLink = null;
            item.LocationRefTypes = null;
            item.IgnoredBySandbox = default;
            item.Ownership = null;
            item.ItemCount = default;
            item.Charge = default;
            item.LocationReference = FormLinkNullable<ILocationRecordGetter>.Null;
            item.EnableParent = null;
            item.LinkedReferences.Clear();
            item.Patrol = null;
            item.Action = default;
            item.HeadTrackingWeight = default;
            item.FavorCost = default;
            item.OpenByDefault = default;
            item.MapMarker = null;
            item.AttachRef = FormLinkNullable<IPlacedThingGetter>.Null;
            item.DistantLodData = default;
            item.Placement = null;
            base.Clear(item);
        }
        
        public override void Clear(IAPlacedInternal item)
        {
            Clear(item: (IPlacedObjectInternal)item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IPlacedObjectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedObjectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedObject obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Base = obj.Base.Relink(mapping);
            obj.Portals?.RemapLinks(mapping);
            obj.LightingTemplate = obj.LightingTemplate.Relink(mapping);
            obj.ImageSpace = obj.ImageSpace.Relink(mapping);
            obj.LinkedRooms.RemapLinks(mapping);
            obj.Reflections.RemapLinks(mapping);
            obj.LitWater.RemapLinks(mapping);
            obj.Emittance = obj.Emittance.Relink(mapping);
            obj.TeleportDestination?.RemapLinks(mapping);
            obj.TeleportMessageBox = obj.TeleportMessageBox.Relink(mapping);
            obj.MultiboundReference = obj.MultiboundReference.Relink(mapping);
            obj.XCZR = obj.XCZR.Relink(mapping);
            obj.XCZC = obj.XCZC.Relink(mapping);
            obj.SpawnContainer = obj.SpawnContainer.Relink(mapping);
            obj.ActivateParents?.RemapLinks(mapping);
            obj.LeveledItemBaseObject = obj.LeveledItemBaseObject.Relink(mapping);
            obj.PersistentLocation = obj.PersistentLocation.Relink(mapping);
            obj.Lock?.RemapLinks(mapping);
            obj.EncounterZone = obj.EncounterZone.Relink(mapping);
            obj.NavigationDoorLink?.RemapLinks(mapping);
            obj.LocationRefTypes?.RemapLinks(mapping);
            obj.Ownership?.RemapLinks(mapping);
            obj.LocationReference = obj.LocationReference.Relink(mapping);
            obj.EnableParent?.RemapLinks(mapping);
            obj.LinkedReferences.RemapLinks(mapping);
            obj.Patrol?.RemapLinks(mapping);
            obj.AttachRef = obj.AttachRef.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedObjectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IPlacedObjectInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PlacedObjectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedObjectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPlacedInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedObject)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedObject)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedObject)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PlacedObjectCommon : APlacedCommon
    {
        public new static readonly PlacedObjectCommon Instance = new PlacedObjectCommon();

        public PlacedObject.Mask<bool> GetEqualsMask(
            IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedObject.Mask<bool>(false);
            ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            PlacedObject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Base = item.Base.Equals(rhs.Base);
            ret.BoundHalfExtents = item.BoundHalfExtents.Equals(rhs.BoundHalfExtents);
            ret.Primitive = EqualsMaskHelper.EqualsHelper(
                item.Primitive,
                rhs.Primitive,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.XORD = MemorySliceExt.Equal(item.XORD, rhs.XORD);
            ret.OcclusionPlane = EqualsMaskHelper.EqualsHelper(
                item.OcclusionPlane,
                rhs.OcclusionPlane,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Portals = item.Portals.CollectionEqualsHelper(
                rhs.Portals,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RoomPortal = EqualsMaskHelper.EqualsHelper(
                item.RoomPortal,
                rhs.RoomPortal,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.LightingTemplate = item.LightingTemplate.Equals(rhs.LightingTemplate);
            ret.ImageSpace = item.ImageSpace.Equals(rhs.ImageSpace);
            ret.LinkedRooms = item.LinkedRooms.CollectionEqualsHelper(
                rhs.LinkedRooms,
                (l, r) => object.Equals(l, r),
                include);
            ret.MultiBoundPrimitive = item.MultiBoundPrimitive == rhs.MultiBoundPrimitive;
            ret.RagdollData = MemorySliceExt.Equal(item.RagdollData, rhs.RagdollData);
            ret.RagdollBipedData = MemorySliceExt.Equal(item.RagdollBipedData, rhs.RagdollBipedData);
            ret.Radius = item.Radius.EqualsWithin(rhs.Radius);
            ret.Reflections = item.Reflections.CollectionEqualsHelper(
                rhs.Reflections,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LitWater = item.LitWater.CollectionEqualsHelper(
                rhs.LitWater,
                (l, r) => object.Equals(l, r),
                include);
            ret.Emittance = item.Emittance.Equals(rhs.Emittance);
            ret.LightData = EqualsMaskHelper.EqualsHelper(
                item.LightData,
                rhs.LightData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Alpha = EqualsMaskHelper.EqualsHelper(
                item.Alpha,
                rhs.Alpha,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TeleportDestination = EqualsMaskHelper.EqualsHelper(
                item.TeleportDestination,
                rhs.TeleportDestination,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TeleportMessageBox = item.TeleportMessageBox.Equals(rhs.TeleportMessageBox);
            ret.MultiboundReference = item.MultiboundReference.Equals(rhs.MultiboundReference);
            ret.XWCN = MemorySliceExt.Equal(item.XWCN, rhs.XWCN);
            ret.XWCS = MemorySliceExt.Equal(item.XWCS, rhs.XWCS);
            ret.WaterVelocity = EqualsMaskHelper.EqualsHelper(
                item.WaterVelocity,
                rhs.WaterVelocity,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.XCVL = MemorySliceExt.Equal(item.XCVL, rhs.XCVL);
            ret.XCZR = item.XCZR.Equals(rhs.XCZR);
            ret.XCZA = MemorySliceExt.Equal(item.XCZA, rhs.XCZA);
            ret.XCZC = item.XCZC.Equals(rhs.XCZC);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.SpawnContainer = item.SpawnContainer.Equals(rhs.SpawnContainer);
            ret.ActivateParents = EqualsMaskHelper.EqualsHelper(
                item.ActivateParents,
                rhs.ActivateParents,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LeveledItemBaseObject = item.LeveledItemBaseObject.Equals(rhs.LeveledItemBaseObject);
            ret.LevelModifier = item.LevelModifier == rhs.LevelModifier;
            ret.PersistentLocation = item.PersistentLocation.Equals(rhs.PersistentLocation);
            ret.CollisionLayer = item.CollisionLayer == rhs.CollisionLayer;
            ret.Lock = EqualsMaskHelper.EqualsHelper(
                item.Lock,
                rhs.Lock,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EncounterZone = item.EncounterZone.Equals(rhs.EncounterZone);
            ret.NavigationDoorLink = EqualsMaskHelper.EqualsHelper(
                item.NavigationDoorLink,
                rhs.NavigationDoorLink,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LocationRefTypes = item.LocationRefTypes.CollectionEqualsHelper(
                rhs.LocationRefTypes,
                (l, r) => object.Equals(l, r),
                include);
            ret.IgnoredBySandbox = item.IgnoredBySandbox == rhs.IgnoredBySandbox;
            ret.Ownership = EqualsMaskHelper.EqualsHelper(
                item.Ownership,
                rhs.Ownership,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ItemCount = item.ItemCount == rhs.ItemCount;
            ret.Charge = item.Charge.EqualsWithin(rhs.Charge);
            ret.LocationReference = item.LocationReference.Equals(rhs.LocationReference);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LinkedReferences = item.LinkedReferences.CollectionEqualsHelper(
                rhs.LinkedReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Patrol = EqualsMaskHelper.EqualsHelper(
                item.Patrol,
                rhs.Patrol,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Action = item.Action == rhs.Action;
            ret.HeadTrackingWeight = item.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight);
            ret.FavorCost = item.FavorCost.EqualsWithin(rhs.FavorCost);
            ret.OpenByDefault = item.OpenByDefault == rhs.OpenByDefault;
            ret.MapMarker = EqualsMaskHelper.EqualsHelper(
                item.MapMarker,
                rhs.MapMarker,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AttachRef = item.AttachRef.Equals(rhs.AttachRef);
            ret.DistantLodData = MemorySliceExt.Equal(item.DistantLodData, rhs.DistantLodData);
            ret.Placement = EqualsMaskHelper.EqualsHelper(
                item.Placement,
                rhs.Placement,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPlacedObjectGetter item,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPlacedObjectGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PlacedObject =>");
            }
            else
            {
                fg.AppendLine($"{name} (PlacedObject) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPlacedObjectGetter item,
            FileGeneration fg,
            PlacedObject.Mask<bool>? printMask = null)
        {
            APlacedCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.Base ?? true)
            {
                fg.AppendItem(item.Base.FormKeyNullable, "Base");
            }
            if ((printMask?.BoundHalfExtents ?? true)
                && item.BoundHalfExtents.TryGet(out var BoundHalfExtentsItem))
            {
                fg.AppendItem(BoundHalfExtentsItem, "BoundHalfExtents");
            }
            if ((printMask?.Primitive?.Overall ?? true)
                && item.Primitive.TryGet(out var PrimitiveItem))
            {
                PrimitiveItem?.ToString(fg, "Primitive");
            }
            if ((printMask?.XORD ?? true)
                && item.XORD.TryGet(out var XORDItem))
            {
                fg.AppendLine($"XORD => {SpanExt.ToHexString(XORDItem)}");
            }
            if ((printMask?.OcclusionPlane?.Overall ?? true)
                && item.OcclusionPlane.TryGet(out var OcclusionPlaneItem))
            {
                OcclusionPlaneItem?.ToString(fg, "OcclusionPlane");
            }
            if ((printMask?.Portals?.Overall ?? true)
                && item.Portals.TryGet(out var PortalsItem))
            {
                fg.AppendLine("Portals =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in PortalsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.RoomPortal?.Overall ?? true)
                && item.RoomPortal.TryGet(out var RoomPortalItem))
            {
                RoomPortalItem?.ToString(fg, "RoomPortal");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.LightingTemplate ?? true)
            {
                fg.AppendItem(item.LightingTemplate.FormKeyNullable, "LightingTemplate");
            }
            if (printMask?.ImageSpace ?? true)
            {
                fg.AppendItem(item.ImageSpace.FormKeyNullable, "ImageSpace");
            }
            if (printMask?.LinkedRooms?.Overall ?? true)
            {
                fg.AppendLine("LinkedRooms =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LinkedRooms)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.MultiBoundPrimitive ?? true)
            {
                fg.AppendItem(item.MultiBoundPrimitive, "MultiBoundPrimitive");
            }
            if ((printMask?.RagdollData ?? true)
                && item.RagdollData.TryGet(out var RagdollDataItem))
            {
                fg.AppendLine($"RagdollData => {SpanExt.ToHexString(RagdollDataItem)}");
            }
            if ((printMask?.RagdollBipedData ?? true)
                && item.RagdollBipedData.TryGet(out var RagdollBipedDataItem))
            {
                fg.AppendLine($"RagdollBipedData => {SpanExt.ToHexString(RagdollBipedDataItem)}");
            }
            if ((printMask?.Radius ?? true)
                && item.Radius.TryGet(out var RadiusItem))
            {
                fg.AppendItem(RadiusItem, "Radius");
            }
            if (printMask?.Reflections?.Overall ?? true)
            {
                fg.AppendLine("Reflections =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Reflections)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LitWater?.Overall ?? true)
            {
                fg.AppendLine("LitWater =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LitWater)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Emittance ?? true)
            {
                fg.AppendItem(item.Emittance.FormKeyNullable, "Emittance");
            }
            if ((printMask?.LightData?.Overall ?? true)
                && item.LightData.TryGet(out var LightDataItem))
            {
                LightDataItem?.ToString(fg, "LightData");
            }
            if ((printMask?.Alpha?.Overall ?? true)
                && item.Alpha.TryGet(out var AlphaItem))
            {
                AlphaItem?.ToString(fg, "Alpha");
            }
            if ((printMask?.TeleportDestination?.Overall ?? true)
                && item.TeleportDestination.TryGet(out var TeleportDestinationItem))
            {
                TeleportDestinationItem?.ToString(fg, "TeleportDestination");
            }
            if (printMask?.TeleportMessageBox ?? true)
            {
                fg.AppendItem(item.TeleportMessageBox.FormKeyNullable, "TeleportMessageBox");
            }
            if (printMask?.MultiboundReference ?? true)
            {
                fg.AppendItem(item.MultiboundReference.FormKeyNullable, "MultiboundReference");
            }
            if ((printMask?.XWCN ?? true)
                && item.XWCN.TryGet(out var XWCNItem))
            {
                fg.AppendLine($"XWCN => {SpanExt.ToHexString(XWCNItem)}");
            }
            if ((printMask?.XWCS ?? true)
                && item.XWCS.TryGet(out var XWCSItem))
            {
                fg.AppendLine($"XWCS => {SpanExt.ToHexString(XWCSItem)}");
            }
            if ((printMask?.WaterVelocity?.Overall ?? true)
                && item.WaterVelocity.TryGet(out var WaterVelocityItem))
            {
                WaterVelocityItem?.ToString(fg, "WaterVelocity");
            }
            if ((printMask?.XCVL ?? true)
                && item.XCVL.TryGet(out var XCVLItem))
            {
                fg.AppendLine($"XCVL => {SpanExt.ToHexString(XCVLItem)}");
            }
            if (printMask?.XCZR ?? true)
            {
                fg.AppendItem(item.XCZR.FormKeyNullable, "XCZR");
            }
            if ((printMask?.XCZA ?? true)
                && item.XCZA.TryGet(out var XCZAItem))
            {
                fg.AppendLine($"XCZA => {SpanExt.ToHexString(XCZAItem)}");
            }
            if (printMask?.XCZC ?? true)
            {
                fg.AppendItem(item.XCZC.FormKeyNullable, "XCZC");
            }
            if ((printMask?.Scale ?? true)
                && item.Scale.TryGet(out var ScaleItem))
            {
                fg.AppendItem(ScaleItem, "Scale");
            }
            if (printMask?.SpawnContainer ?? true)
            {
                fg.AppendItem(item.SpawnContainer.FormKeyNullable, "SpawnContainer");
            }
            if ((printMask?.ActivateParents?.Overall ?? true)
                && item.ActivateParents.TryGet(out var ActivateParentsItem))
            {
                ActivateParentsItem?.ToString(fg, "ActivateParents");
            }
            if (printMask?.LeveledItemBaseObject ?? true)
            {
                fg.AppendItem(item.LeveledItemBaseObject.FormKeyNullable, "LeveledItemBaseObject");
            }
            if ((printMask?.LevelModifier ?? true)
                && item.LevelModifier.TryGet(out var LevelModifierItem))
            {
                fg.AppendItem(LevelModifierItem, "LevelModifier");
            }
            if (printMask?.PersistentLocation ?? true)
            {
                fg.AppendItem(item.PersistentLocation.FormKeyNullable, "PersistentLocation");
            }
            if ((printMask?.CollisionLayer ?? true)
                && item.CollisionLayer.TryGet(out var CollisionLayerItem))
            {
                fg.AppendItem(CollisionLayerItem, "CollisionLayer");
            }
            if ((printMask?.Lock?.Overall ?? true)
                && item.Lock.TryGet(out var LockItem))
            {
                LockItem?.ToString(fg, "Lock");
            }
            if (printMask?.EncounterZone ?? true)
            {
                fg.AppendItem(item.EncounterZone.FormKeyNullable, "EncounterZone");
            }
            if ((printMask?.NavigationDoorLink?.Overall ?? true)
                && item.NavigationDoorLink.TryGet(out var NavigationDoorLinkItem))
            {
                NavigationDoorLinkItem?.ToString(fg, "NavigationDoorLink");
            }
            if ((printMask?.LocationRefTypes?.Overall ?? true)
                && item.LocationRefTypes.TryGet(out var LocationRefTypesItem))
            {
                fg.AppendLine("LocationRefTypes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in LocationRefTypesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.IgnoredBySandbox ?? true)
            {
                fg.AppendItem(item.IgnoredBySandbox, "IgnoredBySandbox");
            }
            if ((printMask?.Ownership?.Overall ?? true)
                && item.Ownership.TryGet(out var OwnershipItem))
            {
                OwnershipItem?.ToString(fg, "Ownership");
            }
            if ((printMask?.ItemCount ?? true)
                && item.ItemCount.TryGet(out var ItemCountItem))
            {
                fg.AppendItem(ItemCountItem, "ItemCount");
            }
            if ((printMask?.Charge ?? true)
                && item.Charge.TryGet(out var ChargeItem))
            {
                fg.AppendItem(ChargeItem, "Charge");
            }
            if (printMask?.LocationReference ?? true)
            {
                fg.AppendItem(item.LocationReference.FormKeyNullable, "LocationReference");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent.TryGet(out var EnableParentItem))
            {
                EnableParentItem?.ToString(fg, "EnableParent");
            }
            if (printMask?.LinkedReferences?.Overall ?? true)
            {
                fg.AppendLine("LinkedReferences =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LinkedReferences)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Patrol?.Overall ?? true)
                && item.Patrol.TryGet(out var PatrolItem))
            {
                PatrolItem?.ToString(fg, "Patrol");
            }
            if ((printMask?.Action ?? true)
                && item.Action.TryGet(out var ActionItem))
            {
                fg.AppendItem(ActionItem, "Action");
            }
            if ((printMask?.HeadTrackingWeight ?? true)
                && item.HeadTrackingWeight.TryGet(out var HeadTrackingWeightItem))
            {
                fg.AppendItem(HeadTrackingWeightItem, "HeadTrackingWeight");
            }
            if ((printMask?.FavorCost ?? true)
                && item.FavorCost.TryGet(out var FavorCostItem))
            {
                fg.AppendItem(FavorCostItem, "FavorCost");
            }
            if (printMask?.OpenByDefault ?? true)
            {
                fg.AppendItem(item.OpenByDefault, "OpenByDefault");
            }
            if ((printMask?.MapMarker?.Overall ?? true)
                && item.MapMarker.TryGet(out var MapMarkerItem))
            {
                MapMarkerItem?.ToString(fg, "MapMarker");
            }
            if (printMask?.AttachRef ?? true)
            {
                fg.AppendItem(item.AttachRef.FormKeyNullable, "AttachRef");
            }
            if ((printMask?.DistantLodData ?? true)
                && item.DistantLodData.TryGet(out var DistantLodDataItem))
            {
                fg.AppendLine($"DistantLodData => {SpanExt.ToHexString(DistantLodDataItem)}");
            }
            if ((printMask?.Placement?.Overall ?? true)
                && item.Placement.TryGet(out var PlacementItem))
            {
                PlacementItem?.ToString(fg, "Placement");
            }
        }
        
        public static PlacedObject_FieldIndex ConvertFieldIndex(APlaced_FieldIndex index)
        {
            switch (index)
            {
                case APlaced_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedObject_FieldIndex)((int)index);
                case APlaced_FieldIndex.FormKey:
                    return (PlacedObject_FieldIndex)((int)index);
                case APlaced_FieldIndex.VersionControl:
                    return (PlacedObject_FieldIndex)((int)index);
                case APlaced_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                case APlaced_FieldIndex.FormVersion:
                    return (PlacedObject_FieldIndex)((int)index);
                case APlaced_FieldIndex.Version2:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedObject_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (PlacedObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (PlacedObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (PlacedObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedObjectGetter? lhs,
            IPlacedObjectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAPlacedGetter)lhs, (IAPlacedGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!lhs.Base.Equals(rhs.Base)) return false;
            if (!lhs.BoundHalfExtents.Equals(rhs.BoundHalfExtents)) return false;
            if (!object.Equals(lhs.Primitive, rhs.Primitive)) return false;
            if (!MemorySliceExt.Equal(lhs.XORD, rhs.XORD)) return false;
            if (!object.Equals(lhs.OcclusionPlane, rhs.OcclusionPlane)) return false;
            if (!lhs.Portals.SequenceEqualNullable(rhs.Portals)) return false;
            if (!object.Equals(lhs.RoomPortal, rhs.RoomPortal)) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!lhs.LightingTemplate.Equals(rhs.LightingTemplate)) return false;
            if (!lhs.ImageSpace.Equals(rhs.ImageSpace)) return false;
            if (!lhs.LinkedRooms.SequenceEqualNullable(rhs.LinkedRooms)) return false;
            if (lhs.MultiBoundPrimitive != rhs.MultiBoundPrimitive) return false;
            if (!MemorySliceExt.Equal(lhs.RagdollData, rhs.RagdollData)) return false;
            if (!MemorySliceExt.Equal(lhs.RagdollBipedData, rhs.RagdollBipedData)) return false;
            if (!lhs.Radius.EqualsWithin(rhs.Radius)) return false;
            if (!lhs.Reflections.SequenceEqualNullable(rhs.Reflections)) return false;
            if (!lhs.LitWater.SequenceEqualNullable(rhs.LitWater)) return false;
            if (!lhs.Emittance.Equals(rhs.Emittance)) return false;
            if (!object.Equals(lhs.LightData, rhs.LightData)) return false;
            if (!object.Equals(lhs.Alpha, rhs.Alpha)) return false;
            if (!object.Equals(lhs.TeleportDestination, rhs.TeleportDestination)) return false;
            if (!lhs.TeleportMessageBox.Equals(rhs.TeleportMessageBox)) return false;
            if (!lhs.MultiboundReference.Equals(rhs.MultiboundReference)) return false;
            if (!MemorySliceExt.Equal(lhs.XWCN, rhs.XWCN)) return false;
            if (!MemorySliceExt.Equal(lhs.XWCS, rhs.XWCS)) return false;
            if (!object.Equals(lhs.WaterVelocity, rhs.WaterVelocity)) return false;
            if (!MemorySliceExt.Equal(lhs.XCVL, rhs.XCVL)) return false;
            if (!lhs.XCZR.Equals(rhs.XCZR)) return false;
            if (!MemorySliceExt.Equal(lhs.XCZA, rhs.XCZA)) return false;
            if (!lhs.XCZC.Equals(rhs.XCZC)) return false;
            if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            if (!lhs.SpawnContainer.Equals(rhs.SpawnContainer)) return false;
            if (!object.Equals(lhs.ActivateParents, rhs.ActivateParents)) return false;
            if (!lhs.LeveledItemBaseObject.Equals(rhs.LeveledItemBaseObject)) return false;
            if (lhs.LevelModifier != rhs.LevelModifier) return false;
            if (!lhs.PersistentLocation.Equals(rhs.PersistentLocation)) return false;
            if (lhs.CollisionLayer != rhs.CollisionLayer) return false;
            if (!object.Equals(lhs.Lock, rhs.Lock)) return false;
            if (!lhs.EncounterZone.Equals(rhs.EncounterZone)) return false;
            if (!object.Equals(lhs.NavigationDoorLink, rhs.NavigationDoorLink)) return false;
            if (!lhs.LocationRefTypes.SequenceEqualNullable(rhs.LocationRefTypes)) return false;
            if (lhs.IgnoredBySandbox != rhs.IgnoredBySandbox) return false;
            if (!object.Equals(lhs.Ownership, rhs.Ownership)) return false;
            if (lhs.ItemCount != rhs.ItemCount) return false;
            if (!lhs.Charge.EqualsWithin(rhs.Charge)) return false;
            if (!lhs.LocationReference.Equals(rhs.LocationReference)) return false;
            if (!object.Equals(lhs.EnableParent, rhs.EnableParent)) return false;
            if (!lhs.LinkedReferences.SequenceEqualNullable(rhs.LinkedReferences)) return false;
            if (!object.Equals(lhs.Patrol, rhs.Patrol)) return false;
            if (lhs.Action != rhs.Action) return false;
            if (!lhs.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight)) return false;
            if (!lhs.FavorCost.EqualsWithin(rhs.FavorCost)) return false;
            if (lhs.OpenByDefault != rhs.OpenByDefault) return false;
            if (!object.Equals(lhs.MapMarker, rhs.MapMarker)) return false;
            if (!lhs.AttachRef.Equals(rhs.AttachRef)) return false;
            if (!MemorySliceExt.Equal(lhs.DistantLodData, rhs.DistantLodData)) return false;
            if (!object.Equals(lhs.Placement, rhs.Placement)) return false;
            return true;
        }
        
        public override bool Equals(
            IAPlacedGetter? lhs,
            IAPlacedGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedObjectGetter?)lhs,
                rhs: rhs as IPlacedObjectGetter);
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedObjectGetter?)lhs,
                rhs: rhs as IPlacedObjectGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedObjectGetter?)lhs,
                rhs: rhs as IPlacedObjectGetter);
        }
        
        public virtual int GetHashCode(IPlacedObjectGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.Base);
            if (item.BoundHalfExtents.TryGet(out var BoundHalfExtentsitem))
            {
                hash.Add(BoundHalfExtentsitem);
            }
            if (item.Primitive.TryGet(out var Primitiveitem))
            {
                hash.Add(Primitiveitem);
            }
            if (item.XORD.TryGet(out var XORDItem))
            {
                hash.Add(XORDItem);
            }
            if (item.OcclusionPlane.TryGet(out var OcclusionPlaneitem))
            {
                hash.Add(OcclusionPlaneitem);
            }
            hash.Add(item.Portals);
            if (item.RoomPortal.TryGet(out var RoomPortalitem))
            {
                hash.Add(RoomPortalitem);
            }
            hash.Add(item.Unknown);
            hash.Add(item.LightingTemplate);
            hash.Add(item.ImageSpace);
            hash.Add(item.LinkedRooms);
            hash.Add(item.MultiBoundPrimitive);
            if (item.RagdollData.TryGet(out var RagdollDataItem))
            {
                hash.Add(RagdollDataItem);
            }
            if (item.RagdollBipedData.TryGet(out var RagdollBipedDataItem))
            {
                hash.Add(RagdollBipedDataItem);
            }
            if (item.Radius.TryGet(out var Radiusitem))
            {
                hash.Add(Radiusitem);
            }
            hash.Add(item.Reflections);
            hash.Add(item.LitWater);
            hash.Add(item.Emittance);
            if (item.LightData.TryGet(out var LightDataitem))
            {
                hash.Add(LightDataitem);
            }
            if (item.Alpha.TryGet(out var Alphaitem))
            {
                hash.Add(Alphaitem);
            }
            if (item.TeleportDestination.TryGet(out var TeleportDestinationitem))
            {
                hash.Add(TeleportDestinationitem);
            }
            hash.Add(item.TeleportMessageBox);
            hash.Add(item.MultiboundReference);
            if (item.XWCN.TryGet(out var XWCNItem))
            {
                hash.Add(XWCNItem);
            }
            if (item.XWCS.TryGet(out var XWCSItem))
            {
                hash.Add(XWCSItem);
            }
            if (item.WaterVelocity.TryGet(out var WaterVelocityitem))
            {
                hash.Add(WaterVelocityitem);
            }
            if (item.XCVL.TryGet(out var XCVLItem))
            {
                hash.Add(XCVLItem);
            }
            hash.Add(item.XCZR);
            if (item.XCZA.TryGet(out var XCZAItem))
            {
                hash.Add(XCZAItem);
            }
            hash.Add(item.XCZC);
            if (item.Scale.TryGet(out var Scaleitem))
            {
                hash.Add(Scaleitem);
            }
            hash.Add(item.SpawnContainer);
            if (item.ActivateParents.TryGet(out var ActivateParentsitem))
            {
                hash.Add(ActivateParentsitem);
            }
            hash.Add(item.LeveledItemBaseObject);
            if (item.LevelModifier.TryGet(out var LevelModifieritem))
            {
                hash.Add(LevelModifieritem);
            }
            hash.Add(item.PersistentLocation);
            if (item.CollisionLayer.TryGet(out var CollisionLayeritem))
            {
                hash.Add(CollisionLayeritem);
            }
            if (item.Lock.TryGet(out var Lockitem))
            {
                hash.Add(Lockitem);
            }
            hash.Add(item.EncounterZone);
            if (item.NavigationDoorLink.TryGet(out var NavigationDoorLinkitem))
            {
                hash.Add(NavigationDoorLinkitem);
            }
            hash.Add(item.LocationRefTypes);
            hash.Add(item.IgnoredBySandbox);
            if (item.Ownership.TryGet(out var Ownershipitem))
            {
                hash.Add(Ownershipitem);
            }
            if (item.ItemCount.TryGet(out var ItemCountitem))
            {
                hash.Add(ItemCountitem);
            }
            if (item.Charge.TryGet(out var Chargeitem))
            {
                hash.Add(Chargeitem);
            }
            hash.Add(item.LocationReference);
            if (item.EnableParent.TryGet(out var EnableParentitem))
            {
                hash.Add(EnableParentitem);
            }
            hash.Add(item.LinkedReferences);
            if (item.Patrol.TryGet(out var Patrolitem))
            {
                hash.Add(Patrolitem);
            }
            if (item.Action.TryGet(out var Actionitem))
            {
                hash.Add(Actionitem);
            }
            if (item.HeadTrackingWeight.TryGet(out var HeadTrackingWeightitem))
            {
                hash.Add(HeadTrackingWeightitem);
            }
            if (item.FavorCost.TryGet(out var FavorCostitem))
            {
                hash.Add(FavorCostitem);
            }
            hash.Add(item.OpenByDefault);
            if (item.MapMarker.TryGet(out var MapMarkeritem))
            {
                hash.Add(MapMarkeritem);
            }
            hash.Add(item.AttachRef);
            if (item.DistantLodData.TryGet(out var DistantLodDataItem))
            {
                hash.Add(DistantLodDataItem);
            }
            if (item.Placement.TryGet(out var Placementitem))
            {
                hash.Add(Placementitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPlacedGetter item)
        {
            return GetHashCode(item: (IPlacedObjectGetter)item);
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedObjectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedObjectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedObject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPlacedObjectGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Base.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Base);
            }
            if (obj.Portals.TryGet(out var PortalsItem))
            {
                foreach (var item in PortalsItem.SelectMany(f => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.LightingTemplate.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.LightingTemplate);
            }
            if (obj.ImageSpace.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ImageSpace);
            }
            foreach (var item in obj.LinkedRooms)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Reflections.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.LitWater)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Emittance.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Emittance);
            }
            if (obj.TeleportDestination.TryGet(out var TeleportDestinationItems))
            {
                foreach (var item in TeleportDestinationItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.TeleportMessageBox.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.TeleportMessageBox);
            }
            if (obj.MultiboundReference.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.MultiboundReference);
            }
            if (obj.XCZR.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.XCZR);
            }
            if (obj.XCZC.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.XCZC);
            }
            if (obj.SpawnContainer.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.SpawnContainer);
            }
            if (obj.ActivateParents.TryGet(out var ActivateParentsItems))
            {
                foreach (var item in ActivateParentsItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LeveledItemBaseObject.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.LeveledItemBaseObject);
            }
            if (obj.PersistentLocation.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PersistentLocation);
            }
            if (obj.Lock.TryGet(out var LockItems))
            {
                foreach (var item in LockItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.EncounterZone.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.EncounterZone);
            }
            if (obj.NavigationDoorLink.TryGet(out var NavigationDoorLinkItems))
            {
                foreach (var item in NavigationDoorLinkItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LocationRefTypes.TryGet(out var LocationRefTypesItem))
            {
                foreach (var item in LocationRefTypesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Ownership.TryGet(out var OwnershipItems))
            {
                foreach (var item in OwnershipItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LocationReference.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.LocationReference);
            }
            if (obj.EnableParent.TryGet(out var EnableParentItems))
            {
                foreach (var item in EnableParentItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.LinkedReferences.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Patrol.TryGet(out var PatrolItems))
            {
                foreach (var item in PatrolItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.AttachRef.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AttachRef);
            }
            yield break;
        }
        
        #region Duplicate
        public PlacedObject Duplicate(
            IPlacedObjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedObject(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override APlaced Duplicate(
            IAPlacedGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedObject)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedObject)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedObject)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class PlacedObjectSetterTranslationCommon : APlacedSetterTranslationCommon
    {
        public new static readonly PlacedObjectSetterTranslationCommon Instance = new PlacedObjectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedObjectInternal item,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedObject item,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPlaced)item,
                (IAPlacedGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Base) ?? true))
            {
                item.Base = new FormLinkNullable<IFallout4MajorRecordGetter>(rhs.Base.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.BoundHalfExtents) ?? true))
            {
                item.BoundHalfExtents = rhs.BoundHalfExtents;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Primitive) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Primitive);
                try
                {
                    if(rhs.Primitive.TryGet(out var rhsPrimitive))
                    {
                        item.Primitive = rhsPrimitive.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Primitive));
                    }
                    else
                    {
                        item.Primitive = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XORD) ?? true))
            {
                if(rhs.XORD.TryGet(out var XORDrhs))
                {
                    item.XORD = XORDrhs.ToArray();
                }
                else
                {
                    item.XORD = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.OcclusionPlane) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.OcclusionPlane);
                try
                {
                    if(rhs.OcclusionPlane.TryGet(out var rhsOcclusionPlane))
                    {
                        item.OcclusionPlane = rhsOcclusionPlane.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.OcclusionPlane));
                    }
                    else
                    {
                        item.OcclusionPlane = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Portals) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Portals);
                try
                {
                    if ((rhs.Portals != null))
                    {
                        item.Portals = 
                            rhs.Portals
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Portal>();
                    }
                    else
                    {
                        item.Portals = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RoomPortal) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.RoomPortal);
                try
                {
                    if(rhs.RoomPortal.TryGet(out var rhsRoomPortal))
                    {
                        item.RoomPortal = rhsRoomPortal.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.RoomPortal));
                    }
                    else
                    {
                        item.RoomPortal = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LightingTemplate) ?? true))
            {
                item.LightingTemplate = new FormLinkNullable<ILightGetter>(rhs.LightingTemplate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ImageSpace) ?? true))
            {
                item.ImageSpace = new FormLinkNullable<IImageSpaceAdapterGetter>(rhs.ImageSpace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LinkedRooms) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LinkedRooms);
                try
                {
                    item.LinkedRooms.SetTo(
                        rhs.LinkedRooms
                        .Select(r => (IFormLink<IPlacedObjectGetter>)new FormLink<IPlacedObjectGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MultiBoundPrimitive) ?? true))
            {
                item.MultiBoundPrimitive = rhs.MultiBoundPrimitive;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollData) ?? true))
            {
                if(rhs.RagdollData.TryGet(out var RagdollDatarhs))
                {
                    item.RagdollData = RagdollDatarhs.ToArray();
                }
                else
                {
                    item.RagdollData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollBipedData) ?? true))
            {
                if(rhs.RagdollBipedData.TryGet(out var RagdollBipedDatarhs))
                {
                    item.RagdollBipedData = RagdollBipedDatarhs.ToArray();
                }
                else
                {
                    item.RagdollBipedData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Reflections) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Reflections);
                try
                {
                    item.Reflections.SetTo(
                        rhs.Reflections
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LitWater) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LitWater);
                try
                {
                    item.LitWater.SetTo(
                        rhs.LitWater
                        .Select(r => (IFormLink<IPlacedObjectGetter>)new FormLink<IPlacedObjectGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Emittance) ?? true))
            {
                item.Emittance = new FormLinkNullable<IEmittanceGetter>(rhs.Emittance.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LightData) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LightData);
                try
                {
                    if(rhs.LightData.TryGet(out var rhsLightData))
                    {
                        item.LightData = rhsLightData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.LightData));
                    }
                    else
                    {
                        item.LightData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Alpha) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Alpha);
                try
                {
                    if(rhs.Alpha.TryGet(out var rhsAlpha))
                    {
                        item.Alpha = rhsAlpha.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Alpha));
                    }
                    else
                    {
                        item.Alpha = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportDestination) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.TeleportDestination);
                try
                {
                    if(rhs.TeleportDestination.TryGet(out var rhsTeleportDestination))
                    {
                        item.TeleportDestination = rhsTeleportDestination.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination));
                    }
                    else
                    {
                        item.TeleportDestination = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportMessageBox) ?? true))
            {
                item.TeleportMessageBox = new FormLinkNullable<IMessageGetter>(rhs.TeleportMessageBox.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MultiboundReference) ?? true))
            {
                item.MultiboundReference = new FormLinkNullable<IPlacedObjectGetter>(rhs.MultiboundReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XWCN) ?? true))
            {
                if(rhs.XWCN.TryGet(out var XWCNrhs))
                {
                    item.XWCN = XWCNrhs.ToArray();
                }
                else
                {
                    item.XWCN = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XWCS) ?? true))
            {
                if(rhs.XWCS.TryGet(out var XWCSrhs))
                {
                    item.XWCS = XWCSrhs.ToArray();
                }
                else
                {
                    item.XWCS = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.WaterVelocity) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.WaterVelocity);
                try
                {
                    if(rhs.WaterVelocity.TryGet(out var rhsWaterVelocity))
                    {
                        item.WaterVelocity = rhsWaterVelocity.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.WaterVelocity));
                    }
                    else
                    {
                        item.WaterVelocity = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCVL) ?? true))
            {
                if(rhs.XCVL.TryGet(out var XCVLrhs))
                {
                    item.XCVL = XCVLrhs.ToArray();
                }
                else
                {
                    item.XCVL = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCZR) ?? true))
            {
                item.XCZR = new FormLinkNullable<ILinkedReferenceGetter>(rhs.XCZR.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCZA) ?? true))
            {
                if(rhs.XCZA.TryGet(out var XCZArhs))
                {
                    item.XCZA = XCZArhs.ToArray();
                }
                else
                {
                    item.XCZA = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCZC) ?? true))
            {
                item.XCZC = new FormLinkNullable<ICellGetter>(rhs.XCZC.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.SpawnContainer) ?? true))
            {
                item.SpawnContainer = new FormLinkNullable<IPlacedObjectGetter>(rhs.SpawnContainer.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ActivateParents) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.ActivateParents);
                try
                {
                    if(rhs.ActivateParents.TryGet(out var rhsActivateParents))
                    {
                        item.ActivateParents = rhsActivateParents.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.ActivateParents));
                    }
                    else
                    {
                        item.ActivateParents = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LeveledItemBaseObject) ?? true))
            {
                item.LeveledItemBaseObject = new FormLinkNullable<ILeveledItemGetter>(rhs.LeveledItemBaseObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LevelModifier) ?? true))
            {
                item.LevelModifier = rhs.LevelModifier;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.PersistentLocation) ?? true))
            {
                item.PersistentLocation = new FormLinkNullable<ILocationGetter>(rhs.PersistentLocation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.CollisionLayer) ?? true))
            {
                item.CollisionLayer = rhs.CollisionLayer;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Lock) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Lock);
                try
                {
                    if(rhs.Lock.TryGet(out var rhsLock))
                    {
                        item.Lock = rhsLock.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock));
                    }
                    else
                    {
                        item.Lock = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EncounterZone) ?? true))
            {
                item.EncounterZone = new FormLinkNullable<IEncounterZoneGetter>(rhs.EncounterZone.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.NavigationDoorLink) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.NavigationDoorLink);
                try
                {
                    if(rhs.NavigationDoorLink.TryGet(out var rhsNavigationDoorLink))
                    {
                        item.NavigationDoorLink = rhsNavigationDoorLink.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.NavigationDoorLink));
                    }
                    else
                    {
                        item.NavigationDoorLink = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LocationRefTypes) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LocationRefTypes);
                try
                {
                    if ((rhs.LocationRefTypes != null))
                    {
                        item.LocationRefTypes = 
                            rhs.LocationRefTypes
                            .Select(r => (IFormLink<ILocationReferenceTypeGetter>)new FormLink<ILocationReferenceTypeGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<ILocationReferenceTypeGetter>>();
                    }
                    else
                    {
                        item.LocationRefTypes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.IgnoredBySandbox) ?? true))
            {
                item.IgnoredBySandbox = rhs.IgnoredBySandbox;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Ownership) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Ownership);
                try
                {
                    if(rhs.Ownership.TryGet(out var rhsOwnership))
                    {
                        item.Ownership = rhsOwnership.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Ownership));
                    }
                    else
                    {
                        item.Ownership = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ItemCount) ?? true))
            {
                item.ItemCount = rhs.ItemCount;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Charge) ?? true))
            {
                item.Charge = rhs.Charge;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LocationReference) ?? true))
            {
                item.LocationReference = new FormLinkNullable<ILocationRecordGetter>(rhs.LocationReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent.TryGet(out var rhsEnableParent))
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LinkedReferences) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LinkedReferences);
                try
                {
                    item.LinkedReferences.SetTo(
                        rhs.LinkedReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Patrol) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Patrol);
                try
                {
                    if(rhs.Patrol.TryGet(out var rhsPatrol))
                    {
                        item.Patrol = rhsPatrol.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Patrol));
                    }
                    else
                    {
                        item.Patrol = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Action) ?? true))
            {
                item.Action = rhs.Action;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.HeadTrackingWeight) ?? true))
            {
                item.HeadTrackingWeight = rhs.HeadTrackingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FavorCost) ?? true))
            {
                item.FavorCost = rhs.FavorCost;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.OpenByDefault) ?? true))
            {
                item.OpenByDefault = rhs.OpenByDefault;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MapMarker) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.MapMarker);
                try
                {
                    if(rhs.MapMarker.TryGet(out var rhsMapMarker))
                    {
                        item.MapMarker = rhsMapMarker.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker));
                    }
                    else
                    {
                        item.MapMarker = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.AttachRef) ?? true))
            {
                item.AttachRef = new FormLinkNullable<IPlacedThingGetter>(rhs.AttachRef.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DistantLodData) ?? true))
            {
                if(rhs.DistantLodData.TryGet(out var DistantLodDatarhs))
                {
                    item.DistantLodData = DistantLodDatarhs.ToArray();
                }
                else
                {
                    item.DistantLodData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Placement) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Placement);
                try
                {
                    if(rhs.Placement.TryGet(out var rhsPlacement))
                    {
                        item.Placement = rhsPlacement.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Placement));
                    }
                    else
                    {
                        item.Placement = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IAPlacedInternal item,
            IAPlacedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObjectInternal)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlaced item,
            IAPlacedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObject)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObjectInternal)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObject)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObjectInternal)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObject)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            PlacedObject.TranslationMask? copyMask = null)
        {
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedObject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PlacedObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObject_Registration.Instance;
        public new static PlacedObject_Registration Registration => PlacedObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedObjectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PlacedObjectBinaryWriteTranslation :
        APlacedBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PlacedObjectBinaryWriteTranslation Instance = new PlacedObjectBinaryWriteTranslation();

        static partial void WriteBinaryBoundDataCustom(
            MutagenWriter writer,
            IPlacedObjectGetter item);

        public static void WriteBinaryBoundData(
            MutagenWriter writer,
            IPlacedObjectGetter item)
        {
            WriteBinaryBoundDataCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IPlacedObjectGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IPlacedObjectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Base,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAME));
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BoundHalfExtents,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XMBO));
            if (item.Primitive.TryGet(out var PrimitiveItem))
            {
                ((PlacedPrimitiveBinaryWriteTranslation)((IBinaryItem)PrimitiveItem).BinaryWriteTranslator).Write(
                    item: PrimitiveItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.XORD,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XORD));
            if (item.OcclusionPlane.TryGet(out var OcclusionPlaneItem))
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.XOCP))
                {
                    ((BoundingBinaryWriteTranslation)((IBinaryItem)OcclusionPlaneItem).BinaryWriteTranslator).Write(
                        item: OcclusionPlaneItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IPortalGetter>.Instance.Write(
                writer: writer,
                items: item.Portals,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.XPOD),
                transl: (MutagenWriter subWriter, IPortalGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((PortalBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.RoomPortal.TryGet(out var RoomPortalItem))
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.XPTL))
                {
                    ((BoundingBinaryWriteTranslation)((IBinaryItem)RoomPortalItem).BinaryWriteTranslator).Write(
                        item: RoomPortalItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            PlacedObjectBinaryWriteTranslation.WriteBinaryBoundData(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.BooleanBinaryTranslation.Instance.WriteAsMarker(
                writer: writer,
                item: item.MultiBoundPrimitive,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XMBP));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RagdollData,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XRGD));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RagdollBipedData,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XRGB));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Radius,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XRDS));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IWaterReflectionGetter>.Instance.Write(
                writer: writer,
                items: item.Reflections,
                transl: (MutagenWriter subWriter, IWaterReflectionGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((WaterReflectionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IPlacedObjectGetter>>.Instance.Write(
                writer: writer,
                items: item.LitWater,
                transl: (MutagenWriter subWriter, IFormLink<IPlacedObjectGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.XLTW));
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Emittance,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XEMI));
            if (item.LightData.TryGet(out var LightDataItem))
            {
                ((LightDataBinaryWriteTranslation)((IBinaryItem)LightDataItem).BinaryWriteTranslator).Write(
                    item: LightDataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Alpha.TryGet(out var AlphaItem))
            {
                ((AlphaBinaryWriteTranslation)((IBinaryItem)AlphaItem).BinaryWriteTranslator).Write(
                    item: AlphaItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.TeleportDestination.TryGet(out var TeleportDestinationItem))
            {
                ((TeleportDestinationBinaryWriteTranslation)((IBinaryItem)TeleportDestinationItem).BinaryWriteTranslator).Write(
                    item: TeleportDestinationItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TeleportMessageBox,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XTNM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MultiboundReference,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XMBR));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.XWCN,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XWCN));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.XWCS,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XWCS));
            if (item.WaterVelocity.TryGet(out var WaterVelocityItem))
            {
                ((WaterVelocityBinaryWriteTranslation)((IBinaryItem)WaterVelocityItem).BinaryWriteTranslator).Write(
                    item: WaterVelocityItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.XCVL,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCVL));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.XCZR,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCZR));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.XCZA,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCZA));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.XCZC,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCZC));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XSCL));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpawnContainer,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XSPC));
            if (item.ActivateParents.TryGet(out var ActivateParentsItem))
            {
                ((ActivateParentsBinaryWriteTranslation)((IBinaryItem)ActivateParentsItem).BinaryWriteTranslator).Write(
                    item: ActivateParentsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LeveledItemBaseObject,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLIB));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Level>.Instance.WriteNullable(
                writer,
                item.LevelModifier,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLCM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PersistentLocation,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLCN));
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CollisionLayer,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XTRI));
            if (item.Lock.TryGet(out var LockItem))
            {
                ((LockDataBinaryWriteTranslation)((IBinaryItem)LockItem).BinaryWriteTranslator).Write(
                    item: LockItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EncounterZone,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XEZN));
            if (item.NavigationDoorLink.TryGet(out var NavigationDoorLinkItem))
            {
                ((NavigationDoorLinkBinaryWriteTranslation)((IBinaryItem)NavigationDoorLinkItem).BinaryWriteTranslator).Write(
                    item: NavigationDoorLinkItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ILocationReferenceTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.LocationRefTypes,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.XLRT),
                transl: (MutagenWriter subWriter, IFormLink<ILocationReferenceTypeGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.BooleanBinaryTranslation.Instance.WriteAsMarker(
                writer: writer,
                item: item.IgnoredBySandbox,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XIS2));
            if (item.Ownership.TryGet(out var OwnershipItem))
            {
                ((OwnershipBinaryWriteTranslation)((IBinaryItem)OwnershipItem).BinaryWriteTranslator).Write(
                    item: OwnershipItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ItemCount,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCNT));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Charge,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XCHG));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LocationReference,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLRL));
            if (item.EnableParent.TryGet(out var EnableParentItem))
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ILinkedReferencesGetter>.Instance.Write(
                writer: writer,
                items: item.LinkedReferences,
                transl: (MutagenWriter subWriter, ILinkedReferencesGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((LinkedReferencesBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.Patrol.TryGet(out var PatrolItem))
            {
                ((PatrolBinaryWriteTranslation)((IBinaryItem)PatrolItem).BinaryWriteTranslator).Write(
                    item: PatrolItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<PlacedObject.ActionFlag>.Instance.WriteNullable(
                writer,
                item.Action,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XACT));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HeadTrackingWeight,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XHTW));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FavorCost,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XFVC));
            Mutagen.Bethesda.Binary.BooleanBinaryTranslation.Instance.WriteAsMarker(
                writer: writer,
                item: item.OpenByDefault,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ONAM));
            if (item.MapMarker.TryGet(out var MapMarkerItem))
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.XMRK)) { }
                ((MapMarkerBinaryWriteTranslation)((IBinaryItem)MapMarkerItem).BinaryWriteTranslator).Write(
                    item: MapMarkerItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttachRef,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XATR));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DistantLodData,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLOD));
            if (item.Placement.TryGet(out var PlacementItem))
            {
                ((PlacementBinaryWriteTranslation)((IBinaryItem)PlacementItem).BinaryWriteTranslator).Write(
                    item: PlacementItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IPlacedObjectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.REFR),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPlacedGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PlacedObjectBinaryCreateTranslation : APlacedBinaryCreateTranslation
    {
        public new readonly static PlacedObjectBinaryCreateTranslation Instance = new PlacedObjectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.REFR;
        public static void FillBinaryStructs(
            IPlacedObjectInternal item,
            MutagenFrame frame)
        {
            APlacedBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IPlacedObjectInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Base = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.Base;
                }
                case RecordTypeInts.XMBO:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BoundHalfExtents = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.BoundHalfExtents;
                }
                case RecordTypeInts.XPRM:
                {
                    item.Primitive = Mutagen.Bethesda.Fallout4.PlacedPrimitive.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.Primitive;
                }
                case RecordTypeInts.XORD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XORD = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.XORD;
                }
                case RecordTypeInts.XOCP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.OcclusionPlane = Mutagen.Bethesda.Fallout4.Bounding.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.OcclusionPlane;
                }
                case RecordTypeInts.XPOD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Portals = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Portal>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: Portal.TryCreateFromBinary)
                        .CastExtendedList<Portal>();
                    return (int)PlacedObject_FieldIndex.Portals;
                }
                case RecordTypeInts.XPTL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.RoomPortal = Mutagen.Bethesda.Fallout4.Bounding.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.RoomPortal;
                }
                case RecordTypeInts.XRMR:
                {
                    PlacedObjectBinaryCreateTranslation.FillBinaryBoundDataCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                case RecordTypeInts.XMBP:
                {
                    item.MultiBoundPrimitive = true;
                    return (int)PlacedObject_FieldIndex.MultiBoundPrimitive;
                }
                case RecordTypeInts.XRGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XRGB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollBipedData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.RagdollBipedData;
                }
                case RecordTypeInts.XRDS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Radius = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.Radius;
                }
                case RecordTypeInts.XPWR:
                {
                    item.Reflections.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<WaterReflection>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.XPWR,
                            recordTypeConverter: recordTypeConverter,
                            transl: WaterReflection.TryCreateFromBinary));
                    return (int)PlacedObject_FieldIndex.Reflections;
                }
                case RecordTypeInts.XLTW:
                {
                    item.LitWater.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IPlacedObjectGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.XLTW),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)PlacedObject_FieldIndex.LitWater;
                }
                case RecordTypeInts.XEMI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Emittance = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.Emittance;
                }
                case RecordTypeInts.XLIG:
                {
                    item.LightData = Mutagen.Bethesda.Fallout4.LightData.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.LightData;
                }
                case RecordTypeInts.XALP:
                {
                    item.Alpha = Mutagen.Bethesda.Fallout4.Alpha.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.Alpha;
                }
                case RecordTypeInts.XTEL:
                {
                    item.TeleportDestination = Mutagen.Bethesda.Fallout4.TeleportDestination.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.TeleportDestination;
                }
                case RecordTypeInts.XTNM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TeleportMessageBox = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.TeleportMessageBox;
                }
                case RecordTypeInts.XMBR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MultiboundReference = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.MultiboundReference;
                }
                case RecordTypeInts.XWCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XWCN = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.XWCN;
                }
                case RecordTypeInts.XWCS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XWCS = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.XWCS;
                }
                case RecordTypeInts.XWCU:
                {
                    item.WaterVelocity = Mutagen.Bethesda.Fallout4.WaterVelocity.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.WaterVelocity;
                }
                case RecordTypeInts.XCVL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XCVL = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.XCVL;
                }
                case RecordTypeInts.XCZR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XCZR = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.XCZR;
                }
                case RecordTypeInts.XCZA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XCZA = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.XCZA;
                }
                case RecordTypeInts.XCZC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XCZC = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.XCZC;
                }
                case RecordTypeInts.XSCL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.Scale;
                }
                case RecordTypeInts.XSPC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpawnContainer = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.SpawnContainer;
                }
                case RecordTypeInts.XAPD:
                {
                    item.ActivateParents = Mutagen.Bethesda.Fallout4.ActivateParents.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedObject_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XLIB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LeveledItemBaseObject = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.LeveledItemBaseObject;
                }
                case RecordTypeInts.XLCM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LevelModifier = EnumBinaryTranslation<Level>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.LevelModifier;
                }
                case RecordTypeInts.XLCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PersistentLocation = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.PersistentLocation;
                }
                case RecordTypeInts.XTRI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CollisionLayer = frame.ReadUInt32();
                    return (int)PlacedObject_FieldIndex.CollisionLayer;
                }
                case RecordTypeInts.XLOC:
                {
                    item.Lock = Mutagen.Bethesda.Fallout4.LockData.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.Lock;
                }
                case RecordTypeInts.XEZN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EncounterZone = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XNDP:
                {
                    item.NavigationDoorLink = Mutagen.Bethesda.Fallout4.NavigationDoorLink.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.NavigationDoorLink;
                }
                case RecordTypeInts.XLRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationRefTypes = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ILocationReferenceTypeGetter>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<ILocationReferenceTypeGetter>>();
                    return (int)PlacedObject_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XIS2:
                {
                    item.IgnoredBySandbox = true;
                    return (int)PlacedObject_FieldIndex.IgnoredBySandbox;
                }
                case RecordTypeInts.XOWN:
                case RecordTypeInts.XRNK:
                {
                    item.Ownership = Mutagen.Bethesda.Fallout4.Ownership.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedObject_FieldIndex.Ownership;
                }
                case RecordTypeInts.XCNT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ItemCount = frame.ReadInt32();
                    return (int)PlacedObject_FieldIndex.ItemCount;
                }
                case RecordTypeInts.XCHG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Charge = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.Charge;
                }
                case RecordTypeInts.XLRL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationReference = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XESP:
                {
                    item.EnableParent = Mutagen.Bethesda.Fallout4.EnableParent.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XLKR:
                {
                    item.LinkedReferences.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<LinkedReferences>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.XLKR,
                            recordTypeConverter: recordTypeConverter,
                            transl: LinkedReferences.TryCreateFromBinary));
                    return (int)PlacedObject_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XPRD:
                {
                    item.Patrol = Mutagen.Bethesda.Fallout4.Patrol.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedObject_FieldIndex.Patrol;
                }
                case RecordTypeInts.XACT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Action = EnumBinaryTranslation<PlacedObject.ActionFlag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.Action;
                }
                case RecordTypeInts.XHTW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeadTrackingWeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XFVC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FavorCost = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.FavorCost;
                }
                case RecordTypeInts.ONAM:
                {
                    item.OpenByDefault = true;
                    return (int)PlacedObject_FieldIndex.OpenByDefault;
                }
                case RecordTypeInts.XMRK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.MapMarker = Mutagen.Bethesda.Fallout4.MapMarker.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedObject_FieldIndex.MapMarker;
                }
                case RecordTypeInts.XATR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttachRef = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)PlacedObject_FieldIndex.AttachRef;
                }
                case RecordTypeInts.XLOD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DistantLodData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.DistantLodData;
                }
                case RecordTypeInts.DATA:
                {
                    item.Placement = Mutagen.Bethesda.Fallout4.Placement.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.Placement;
                }
                default:
                    return APlacedBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryBoundDataCustom(
            MutagenFrame frame,
            IPlacedObjectInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PlacedObjectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PlacedObjectBinaryOverlay :
        APlacedBinaryOverlay,
        IPlacedObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObject_Registration.Instance;
        public new static PlacedObject_Registration Registration => PlacedObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedObjectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PlacedObjectCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Base
        private int? _BaseLocation;
        public FormLinkNullable<IFallout4MajorRecordGetter> Base => _BaseLocation.HasValue ? new FormLinkNullable<IFallout4MajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _BaseLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFallout4MajorRecordGetter>.Null;
        #endregion
        #region BoundHalfExtents
        private int? _BoundHalfExtentsLocation;
        public P3Float? BoundHalfExtents => _BoundHalfExtentsLocation.HasValue ? P3FloatBinaryTranslation.Read(HeaderTranslation.ExtractSubrecordMemory(_data, _BoundHalfExtentsLocation.Value, _package.MetaData.Constants)) : default(P3Float?);
        #endregion
        #region Primitive
        private RangeInt32? _PrimitiveLocation;
        public IPlacedPrimitiveGetter? Primitive => _PrimitiveLocation.HasValue ? PlacedPrimitiveBinaryOverlay.PlacedPrimitiveFactory(new OverlayStream(_data.Slice(_PrimitiveLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region XORD
        private int? _XORDLocation;
        public ReadOnlyMemorySlice<Byte>? XORD => _XORDLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _XORDLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IBoundingGetter? OcclusionPlane { get; private set; }
        public IReadOnlyList<IPortalGetter>? Portals { get; private set; }
        public IBoundingGetter? RoomPortal { get; private set; }
        #region BoundData
        partial void BoundDataCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region MultiBoundPrimitive
        private int? _MultiBoundPrimitiveLocation;
        public Boolean MultiBoundPrimitive => _MultiBoundPrimitiveLocation.HasValue ? true : default;
        #endregion
        #region RagdollData
        private int? _RagdollDataLocation;
        public ReadOnlyMemorySlice<Byte>? RagdollData => _RagdollDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _RagdollDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region RagdollBipedData
        private int? _RagdollBipedDataLocation;
        public ReadOnlyMemorySlice<Byte>? RagdollBipedData => _RagdollBipedDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _RagdollBipedDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Radius
        private int? _RadiusLocation;
        public Single? Radius => _RadiusLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _RadiusLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public IReadOnlyList<IWaterReflectionGetter> Reflections { get; private set; } = ListExt.Empty<WaterReflectionBinaryOverlay>();
        public IReadOnlyList<IFormLink<IPlacedObjectGetter>> LitWater { get; private set; } = ListExt.Empty<IFormLink<IPlacedObjectGetter>>();
        #region Emittance
        private int? _EmittanceLocation;
        public FormLinkNullable<IEmittanceGetter> Emittance => _EmittanceLocation.HasValue ? new FormLinkNullable<IEmittanceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EmittanceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEmittanceGetter>.Null;
        #endregion
        #region LightData
        private RangeInt32? _LightDataLocation;
        public ILightDataGetter? LightData => _LightDataLocation.HasValue ? LightDataBinaryOverlay.LightDataFactory(new OverlayStream(_data.Slice(_LightDataLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Alpha
        private RangeInt32? _AlphaLocation;
        public IAlphaGetter? Alpha => _AlphaLocation.HasValue ? AlphaBinaryOverlay.AlphaFactory(new OverlayStream(_data.Slice(_AlphaLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region TeleportDestination
        private RangeInt32? _TeleportDestinationLocation;
        public ITeleportDestinationGetter? TeleportDestination => _TeleportDestinationLocation.HasValue ? TeleportDestinationBinaryOverlay.TeleportDestinationFactory(new OverlayStream(_data.Slice(_TeleportDestinationLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region TeleportMessageBox
        private int? _TeleportMessageBoxLocation;
        public FormLinkNullable<IMessageGetter> TeleportMessageBox => _TeleportMessageBoxLocation.HasValue ? new FormLinkNullable<IMessageGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _TeleportMessageBoxLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IMessageGetter>.Null;
        #endregion
        #region MultiboundReference
        private int? _MultiboundReferenceLocation;
        public FormLinkNullable<IPlacedObjectGetter> MultiboundReference => _MultiboundReferenceLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MultiboundReferenceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region XWCN
        private int? _XWCNLocation;
        public ReadOnlyMemorySlice<Byte>? XWCN => _XWCNLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _XWCNLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region XWCS
        private int? _XWCSLocation;
        public ReadOnlyMemorySlice<Byte>? XWCS => _XWCSLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _XWCSLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region WaterVelocity
        private RangeInt32? _WaterVelocityLocation;
        public IWaterVelocityGetter? WaterVelocity => _WaterVelocityLocation.HasValue ? WaterVelocityBinaryOverlay.WaterVelocityFactory(new OverlayStream(_data.Slice(_WaterVelocityLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region XCVL
        private int? _XCVLLocation;
        public ReadOnlyMemorySlice<Byte>? XCVL => _XCVLLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _XCVLLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region XCZR
        private int? _XCZRLocation;
        public FormLinkNullable<ILinkedReferenceGetter> XCZR => _XCZRLocation.HasValue ? new FormLinkNullable<ILinkedReferenceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _XCZRLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILinkedReferenceGetter>.Null;
        #endregion
        #region XCZA
        private int? _XCZALocation;
        public ReadOnlyMemorySlice<Byte>? XCZA => _XCZALocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _XCZALocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region XCZC
        private int? _XCZCLocation;
        public FormLinkNullable<ICellGetter> XCZC => _XCZCLocation.HasValue ? new FormLinkNullable<ICellGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _XCZCLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ICellGetter>.Null;
        #endregion
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region SpawnContainer
        private int? _SpawnContainerLocation;
        public FormLinkNullable<IPlacedObjectGetter> SpawnContainer => _SpawnContainerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SpawnContainerLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        public IActivateParentsGetter? ActivateParents { get; private set; }
        #region LeveledItemBaseObject
        private int? _LeveledItemBaseObjectLocation;
        public FormLinkNullable<ILeveledItemGetter> LeveledItemBaseObject => _LeveledItemBaseObjectLocation.HasValue ? new FormLinkNullable<ILeveledItemGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LeveledItemBaseObjectLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILeveledItemGetter>.Null;
        #endregion
        #region LevelModifier
        private int? _LevelModifierLocation;
        public Level? LevelModifier => _LevelModifierLocation.HasValue ? (Level)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LevelModifierLocation!.Value, _package.MetaData.Constants)) : default(Level?);
        #endregion
        #region PersistentLocation
        private int? _PersistentLocationLocation;
        public FormLinkNullable<ILocationGetter> PersistentLocation => _PersistentLocationLocation.HasValue ? new FormLinkNullable<ILocationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PersistentLocationLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationGetter>.Null;
        #endregion
        #region CollisionLayer
        private int? _CollisionLayerLocation;
        public UInt32? CollisionLayer => _CollisionLayerLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CollisionLayerLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region Lock
        private RangeInt32? _LockLocation;
        public ILockDataGetter? Lock => _LockLocation.HasValue ? LockDataBinaryOverlay.LockDataFactory(new OverlayStream(_data.Slice(_LockLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region EncounterZone
        private int? _EncounterZoneLocation;
        public FormLinkNullable<IEncounterZoneGetter> EncounterZone => _EncounterZoneLocation.HasValue ? new FormLinkNullable<IEncounterZoneGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EncounterZoneLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEncounterZoneGetter>.Null;
        #endregion
        #region NavigationDoorLink
        private RangeInt32? _NavigationDoorLinkLocation;
        public INavigationDoorLinkGetter? NavigationDoorLink => _NavigationDoorLinkLocation.HasValue ? NavigationDoorLinkBinaryOverlay.NavigationDoorLinkFactory(new OverlayStream(_data.Slice(_NavigationDoorLinkLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes { get; private set; }
        #region IgnoredBySandbox
        private int? _IgnoredBySandboxLocation;
        public Boolean IgnoredBySandbox => _IgnoredBySandboxLocation.HasValue ? true : default;
        #endregion
        public IOwnershipGetter? Ownership { get; private set; }
        #region ItemCount
        private int? _ItemCountLocation;
        public Int32? ItemCount => _ItemCountLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ItemCountLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region Charge
        private int? _ChargeLocation;
        public Single? Charge => _ChargeLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ChargeLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region LocationReference
        private int? _LocationReferenceLocation;
        public FormLinkNullable<ILocationRecordGetter> LocationReference => _LocationReferenceLocation.HasValue ? new FormLinkNullable<ILocationRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LocationReferenceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationRecordGetter>.Null;
        #endregion
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        public IEnableParentGetter? EnableParent => _EnableParentLocation.HasValue ? EnableParentBinaryOverlay.EnableParentFactory(new OverlayStream(_data.Slice(_EnableParentLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; private set; } = ListExt.Empty<LinkedReferencesBinaryOverlay>();
        public IPatrolGetter? Patrol { get; private set; }
        #region Action
        private int? _ActionLocation;
        public PlacedObject.ActionFlag? Action => _ActionLocation.HasValue ? (PlacedObject.ActionFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ActionLocation!.Value, _package.MetaData.Constants)) : default(PlacedObject.ActionFlag?);
        #endregion
        #region HeadTrackingWeight
        private int? _HeadTrackingWeightLocation;
        public Single? HeadTrackingWeight => _HeadTrackingWeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _HeadTrackingWeightLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region FavorCost
        private int? _FavorCostLocation;
        public Single? FavorCost => _FavorCostLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _FavorCostLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region OpenByDefault
        private int? _OpenByDefaultLocation;
        public Boolean OpenByDefault => _OpenByDefaultLocation.HasValue ? true : default;
        #endregion
        public IMapMarkerGetter? MapMarker { get; private set; }
        #region AttachRef
        private int? _AttachRefLocation;
        public FormLinkNullable<IPlacedThingGetter> AttachRef => _AttachRefLocation.HasValue ? new FormLinkNullable<IPlacedThingGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AttachRefLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedThingGetter>.Null;
        #endregion
        #region DistantLodData
        private int? _DistantLodDataLocation;
        public ReadOnlyMemorySlice<Byte>? DistantLodData => _DistantLodDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _DistantLodDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Placement
        private RangeInt32? _PlacementLocation;
        public IPlacementGetter? Placement => _PlacementLocation.HasValue ? PlacementBinaryOverlay.PlacementFactory(new OverlayStream(_data.Slice(_PlacementLocation!.Value.Min), _package), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedObjectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PlacedObjectBinaryOverlay PlacedObjectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new PlacedObjectBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PlacedObjectBinaryOverlay PlacedObjectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PlacedObjectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedObject_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    _BaseLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Base;
                }
                case RecordTypeInts.XMBO:
                {
                    _BoundHalfExtentsLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.BoundHalfExtents;
                }
                case RecordTypeInts.XPRM:
                {
                    _PrimitiveLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedObject_FieldIndex.Primitive;
                }
                case RecordTypeInts.XORD:
                {
                    _XORDLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XORD;
                }
                case RecordTypeInts.XOCP:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.OcclusionPlane = BoundingBinaryOverlay.BoundingFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedObject_FieldIndex.OcclusionPlane;
                }
                case RecordTypeInts.XPOD:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.Portals = BinaryOverlayList.FactoryByStartIndex<PortalBinaryOverlay>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 8,
                        getter: (s, p) => PortalBinaryOverlay.PortalFactory(s, p));
                    stream.Position += subLen;
                    return (int)PlacedObject_FieldIndex.Portals;
                }
                case RecordTypeInts.XPTL:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.RoomPortal = BoundingBinaryOverlay.BoundingFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedObject_FieldIndex.RoomPortal;
                }
                case RecordTypeInts.XRMR:
                {
                    BoundDataCustomParse(
                        stream,
                        offset);
                    return null;
                }
                case RecordTypeInts.XMBP:
                {
                    _MultiBoundPrimitiveLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.MultiBoundPrimitive;
                }
                case RecordTypeInts.XRGD:
                {
                    _RagdollDataLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XRGB:
                {
                    _RagdollBipedDataLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.RagdollBipedData;
                }
                case RecordTypeInts.XRDS:
                {
                    _RadiusLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Radius;
                }
                case RecordTypeInts.XPWR:
                {
                    this.Reflections = BinaryOverlayList.FactoryByArray<WaterReflectionBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => WaterReflectionBinaryOverlay.WaterReflectionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)PlacedObject_FieldIndex.Reflections;
                }
                case RecordTypeInts.XLTW:
                {
                    this.LitWater = BinaryOverlayList.FactoryByArray<IFormLink<IPlacedObjectGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IPlacedObjectGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)PlacedObject_FieldIndex.LitWater;
                }
                case RecordTypeInts.XEMI:
                {
                    _EmittanceLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Emittance;
                }
                case RecordTypeInts.XLIG:
                {
                    _LightDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedObject_FieldIndex.LightData;
                }
                case RecordTypeInts.XALP:
                {
                    _AlphaLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedObject_FieldIndex.Alpha;
                }
                case RecordTypeInts.XTEL:
                {
                    _TeleportDestinationLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedObject_FieldIndex.TeleportDestination;
                }
                case RecordTypeInts.XTNM:
                {
                    _TeleportMessageBoxLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.TeleportMessageBox;
                }
                case RecordTypeInts.XMBR:
                {
                    _MultiboundReferenceLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.MultiboundReference;
                }
                case RecordTypeInts.XWCN:
                {
                    _XWCNLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XWCN;
                }
                case RecordTypeInts.XWCS:
                {
                    _XWCSLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XWCS;
                }
                case RecordTypeInts.XWCU:
                {
                    _WaterVelocityLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedObject_FieldIndex.WaterVelocity;
                }
                case RecordTypeInts.XCVL:
                {
                    _XCVLLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XCVL;
                }
                case RecordTypeInts.XCZR:
                {
                    _XCZRLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XCZR;
                }
                case RecordTypeInts.XCZA:
                {
                    _XCZALocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XCZA;
                }
                case RecordTypeInts.XCZC:
                {
                    _XCZCLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XCZC;
                }
                case RecordTypeInts.XSCL:
                {
                    _ScaleLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Scale;
                }
                case RecordTypeInts.XSPC:
                {
                    _SpawnContainerLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.SpawnContainer;
                }
                case RecordTypeInts.XAPD:
                {
                    this.ActivateParents = ActivateParentsBinaryOverlay.ActivateParentsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedObject_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XLIB:
                {
                    _LeveledItemBaseObjectLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.LeveledItemBaseObject;
                }
                case RecordTypeInts.XLCM:
                {
                    _LevelModifierLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.LevelModifier;
                }
                case RecordTypeInts.XLCN:
                {
                    _PersistentLocationLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.PersistentLocation;
                }
                case RecordTypeInts.XTRI:
                {
                    _CollisionLayerLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.CollisionLayer;
                }
                case RecordTypeInts.XLOC:
                {
                    _LockLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedObject_FieldIndex.Lock;
                }
                case RecordTypeInts.XEZN:
                {
                    _EncounterZoneLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XNDP:
                {
                    _NavigationDoorLinkLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedObject_FieldIndex.NavigationDoorLink;
                }
                case RecordTypeInts.XLRT:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.LocationRefTypes = BinaryOverlayList.FactoryByStartIndex<IFormLink<ILocationReferenceTypeGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<ILocationReferenceTypeGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return (int)PlacedObject_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XIS2:
                {
                    _IgnoredBySandboxLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.IgnoredBySandbox;
                }
                case RecordTypeInts.XOWN:
                case RecordTypeInts.XRNK:
                {
                    this.Ownership = OwnershipBinaryOverlay.OwnershipFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedObject_FieldIndex.Ownership;
                }
                case RecordTypeInts.XCNT:
                {
                    _ItemCountLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.ItemCount;
                }
                case RecordTypeInts.XCHG:
                {
                    _ChargeLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Charge;
                }
                case RecordTypeInts.XLRL:
                {
                    _LocationReferenceLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XESP:
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedObject_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XLKR:
                {
                    this.LinkedReferences = BinaryOverlayList.FactoryByArray<LinkedReferencesBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => LinkedReferencesBinaryOverlay.LinkedReferencesFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)PlacedObject_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XPRD:
                {
                    this.Patrol = PatrolBinaryOverlay.PatrolFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedObject_FieldIndex.Patrol;
                }
                case RecordTypeInts.XACT:
                {
                    _ActionLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Action;
                }
                case RecordTypeInts.XHTW:
                {
                    _HeadTrackingWeightLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XFVC:
                {
                    _FavorCostLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.FavorCost;
                }
                case RecordTypeInts.ONAM:
                {
                    _OpenByDefaultLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.OpenByDefault;
                }
                case RecordTypeInts.XMRK:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.MapMarker = MapMarkerBinaryOverlay.MapMarkerFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PlacedObject_FieldIndex.MapMarker;
                }
                case RecordTypeInts.XATR:
                {
                    _AttachRefLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.AttachRef;
                }
                case RecordTypeInts.XLOD:
                {
                    _DistantLodDataLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.DistantLodData;
                }
                case RecordTypeInts.DATA:
                {
                    _PlacementLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PlacedObject_FieldIndex.Placement;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlacedObjectGetter rhs)) return false;
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPlacedObjectGetter? obj)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

