/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class SoundLoopAndRumble :
        ISoundLoopAndRumble,
        ILoquiObjectSetter<SoundLoopAndRumble>,
        IEquatable<ISoundLoopAndRumbleGetter>
    {
        #region Ctor
        public SoundLoopAndRumble()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown
        public Byte Unknown { get; set; } = default;
        #endregion
        #region Loop
        public SoundDescriptor.LoopType Loop { get; set; } = default;
        #endregion
        #region Unknown2
        public Byte Unknown2 { get; set; } = default;
        #endregion
        #region RumbleValues
        public Byte RumbleValues { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoundLoopAndRumbleMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISoundLoopAndRumbleGetter rhs)) return false;
            return ((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISoundLoopAndRumbleGetter? obj)
        {
            return ((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Unknown = initialValue;
                this.Loop = initialValue;
                this.Unknown2 = initialValue;
                this.RumbleValues = initialValue;
            }

            public Mask(
                TItem Unknown,
                TItem Loop,
                TItem Unknown2,
                TItem RumbleValues)
            {
                this.Unknown = Unknown;
                this.Loop = Loop;
                this.Unknown2 = Unknown2;
                this.RumbleValues = RumbleValues;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Unknown;
            public TItem Loop;
            public TItem Unknown2;
            public TItem RumbleValues;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Loop, rhs.Loop)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.RumbleValues, rhs.RumbleValues)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Unknown);
                hash.Add(this.Loop);
                hash.Add(this.Unknown2);
                hash.Add(this.RumbleValues);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Loop)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.RumbleValues)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Unknown)) return true;
                if (eval(this.Loop)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.RumbleValues)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundLoopAndRumble.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Unknown = eval(this.Unknown);
                obj.Loop = eval(this.Loop);
                obj.Unknown2 = eval(this.Unknown2);
                obj.RumbleValues = eval(this.RumbleValues);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SoundLoopAndRumble.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SoundLoopAndRumble.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SoundLoopAndRumble.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Loop ?? true)
                    {
                        fg.AppendItem(Loop, "Loop");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.RumbleValues ?? true)
                    {
                        fg.AppendItem(RumbleValues, "RumbleValues");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Unknown;
            public Exception? Loop;
            public Exception? Unknown2;
            public Exception? RumbleValues;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SoundLoopAndRumble_FieldIndex enu = (SoundLoopAndRumble_FieldIndex)index;
                switch (enu)
                {
                    case SoundLoopAndRumble_FieldIndex.Unknown:
                        return Unknown;
                    case SoundLoopAndRumble_FieldIndex.Loop:
                        return Loop;
                    case SoundLoopAndRumble_FieldIndex.Unknown2:
                        return Unknown2;
                    case SoundLoopAndRumble_FieldIndex.RumbleValues:
                        return RumbleValues;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SoundLoopAndRumble_FieldIndex enu = (SoundLoopAndRumble_FieldIndex)index;
                switch (enu)
                {
                    case SoundLoopAndRumble_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case SoundLoopAndRumble_FieldIndex.Loop:
                        this.Loop = ex;
                        break;
                    case SoundLoopAndRumble_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case SoundLoopAndRumble_FieldIndex.RumbleValues:
                        this.RumbleValues = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SoundLoopAndRumble_FieldIndex enu = (SoundLoopAndRumble_FieldIndex)index;
                switch (enu)
                {
                    case SoundLoopAndRumble_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case SoundLoopAndRumble_FieldIndex.Loop:
                        this.Loop = (Exception?)obj;
                        break;
                    case SoundLoopAndRumble_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case SoundLoopAndRumble_FieldIndex.RumbleValues:
                        this.RumbleValues = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Unknown != null) return true;
                if (Loop != null) return true;
                if (Unknown2 != null) return true;
                if (RumbleValues != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(Loop, "Loop");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(RumbleValues, "RumbleValues");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Loop = this.Loop.Combine(rhs.Loop);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.RumbleValues = this.RumbleValues.Combine(rhs.RumbleValues);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Unknown;
            public bool Loop;
            public bool Unknown2;
            public bool RumbleValues;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Unknown = defaultOn;
                this.Loop = defaultOn;
                this.Unknown2 = defaultOn;
                this.RumbleValues = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Unknown, null));
                ret.Add((Loop, null));
                ret.Add((Unknown2, null));
                ret.Add((RumbleValues, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SoundLoopAndRumble_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundLoopAndRumbleBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundLoopAndRumbleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static SoundLoopAndRumble CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SoundLoopAndRumble();
            ((SoundLoopAndRumbleSetterCommon)((ISoundLoopAndRumbleGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundLoopAndRumble item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((SoundLoopAndRumbleSetterCommon)((ISoundLoopAndRumbleGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SoundLoopAndRumble GetNew()
        {
            return new SoundLoopAndRumble();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundLoopAndRumble :
        ISoundLoopAndRumbleGetter,
        ILoquiObjectSetter<ISoundLoopAndRumble>
    {
        new Byte Unknown { get; set; }
        new SoundDescriptor.LoopType Loop { get; set; }
        new Byte Unknown2 { get; set; }
        new Byte RumbleValues { get; set; }
    }

    public partial interface ISoundLoopAndRumbleGetter :
        ILoquiObject,
        ILoquiObject<ISoundLoopAndRumbleGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => SoundLoopAndRumble_Registration.Instance;
        Byte Unknown { get; }
        SoundDescriptor.LoopType Loop { get; }
        Byte Unknown2 { get; }
        Byte RumbleValues { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundLoopAndRumbleMixIn
    {
        public static void Clear(this ISoundLoopAndRumble item)
        {
            ((SoundLoopAndRumbleSetterCommon)((ISoundLoopAndRumbleGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundLoopAndRumble.Mask<bool> GetEqualsMask(
            this ISoundLoopAndRumbleGetter item,
            ISoundLoopAndRumbleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISoundLoopAndRumbleGetter item,
            string? name = null,
            SoundLoopAndRumble.Mask<bool>? printMask = null)
        {
            return ((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISoundLoopAndRumbleGetter item,
            FileGeneration fg,
            string? name = null,
            SoundLoopAndRumble.Mask<bool>? printMask = null)
        {
            ((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundLoopAndRumbleGetter item,
            ISoundLoopAndRumbleGetter rhs)
        {
            return ((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISoundLoopAndRumble lhs,
            ISoundLoopAndRumbleGetter rhs)
        {
            ((SoundLoopAndRumbleSetterTranslationCommon)((ISoundLoopAndRumbleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundLoopAndRumble lhs,
            ISoundLoopAndRumbleGetter rhs,
            SoundLoopAndRumble.TranslationMask? copyMask = null)
        {
            ((SoundLoopAndRumbleSetterTranslationCommon)((ISoundLoopAndRumbleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundLoopAndRumble lhs,
            ISoundLoopAndRumbleGetter rhs,
            out SoundLoopAndRumble.ErrorMask errorMask,
            SoundLoopAndRumble.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundLoopAndRumbleSetterTranslationCommon)((ISoundLoopAndRumbleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundLoopAndRumble.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundLoopAndRumble lhs,
            ISoundLoopAndRumbleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundLoopAndRumbleSetterTranslationCommon)((ISoundLoopAndRumbleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundLoopAndRumble DeepCopy(
            this ISoundLoopAndRumbleGetter item,
            SoundLoopAndRumble.TranslationMask? copyMask = null)
        {
            return ((SoundLoopAndRumbleSetterTranslationCommon)((ISoundLoopAndRumbleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundLoopAndRumble DeepCopy(
            this ISoundLoopAndRumbleGetter item,
            out SoundLoopAndRumble.ErrorMask errorMask,
            SoundLoopAndRumble.TranslationMask? copyMask = null)
        {
            return ((SoundLoopAndRumbleSetterTranslationCommon)((ISoundLoopAndRumbleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundLoopAndRumble DeepCopy(
            this ISoundLoopAndRumbleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundLoopAndRumbleSetterTranslationCommon)((ISoundLoopAndRumbleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundLoopAndRumble item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundLoopAndRumbleSetterCommon)((ISoundLoopAndRumbleGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum SoundLoopAndRumble_FieldIndex
    {
        Unknown = 0,
        Loop = 1,
        Unknown2 = 2,
        RumbleValues = 3,
    }
    #endregion

    #region Registration
    public partial class SoundLoopAndRumble_Registration : ILoquiRegistration
    {
        public static readonly SoundLoopAndRumble_Registration Instance = new SoundLoopAndRumble_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 474,
            version: 0);

        public const string GUID = "97e1c779-cd41-49df-bf1c-a6d6644860dc";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(SoundLoopAndRumble.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundLoopAndRumble.ErrorMask);

        public static readonly Type ClassType = typeof(SoundLoopAndRumble);

        public static readonly Type GetterType = typeof(ISoundLoopAndRumbleGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundLoopAndRumble);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.SoundLoopAndRumble";

        public const string Name = "SoundLoopAndRumble";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LNAM;
        public static readonly Type BinaryWriteTranslation = typeof(SoundLoopAndRumbleBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class SoundLoopAndRumbleSetterCommon
    {
        public static readonly SoundLoopAndRumbleSetterCommon Instance = new SoundLoopAndRumbleSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundLoopAndRumble item)
        {
            ClearPartial();
            item.Unknown = default;
            item.Loop = default;
            item.Unknown2 = default;
            item.RumbleValues = default;
        }
        
        #region Mutagen
        public void RemapLinks(ISoundLoopAndRumble obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundLoopAndRumble item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.LNAM)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: SoundLoopAndRumbleBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class SoundLoopAndRumbleCommon
    {
        public static readonly SoundLoopAndRumbleCommon Instance = new SoundLoopAndRumbleCommon();

        public SoundLoopAndRumble.Mask<bool> GetEqualsMask(
            ISoundLoopAndRumbleGetter item,
            ISoundLoopAndRumbleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundLoopAndRumble.Mask<bool>(false);
            ((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundLoopAndRumbleGetter item,
            ISoundLoopAndRumbleGetter rhs,
            SoundLoopAndRumble.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Loop = item.Loop == rhs.Loop;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.RumbleValues = item.RumbleValues == rhs.RumbleValues;
        }
        
        public string ToString(
            ISoundLoopAndRumbleGetter item,
            string? name = null,
            SoundLoopAndRumble.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISoundLoopAndRumbleGetter item,
            FileGeneration fg,
            string? name = null,
            SoundLoopAndRumble.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SoundLoopAndRumble =>");
            }
            else
            {
                fg.AppendLine($"{name} (SoundLoopAndRumble) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISoundLoopAndRumbleGetter item,
            FileGeneration fg,
            SoundLoopAndRumble.Mask<bool>? printMask = null)
        {
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Loop ?? true)
            {
                fg.AppendItem(item.Loop, "Loop");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.RumbleValues ?? true)
            {
                fg.AppendItem(item.RumbleValues, "RumbleValues");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundLoopAndRumbleGetter? lhs,
            ISoundLoopAndRumbleGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.Loop != rhs.Loop) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            if (lhs.RumbleValues != rhs.RumbleValues) return false;
            return true;
        }
        
        public virtual int GetHashCode(ISoundLoopAndRumbleGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Unknown);
            hash.Add(item.Loop);
            hash.Add(item.Unknown2);
            hash.Add(item.RumbleValues);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SoundLoopAndRumble.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ISoundLoopAndRumbleGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class SoundLoopAndRumbleSetterTranslationCommon
    {
        public static readonly SoundLoopAndRumbleSetterTranslationCommon Instance = new SoundLoopAndRumbleSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundLoopAndRumble item,
            ISoundLoopAndRumbleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)SoundLoopAndRumble_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundLoopAndRumble_FieldIndex.Loop) ?? true))
            {
                item.Loop = rhs.Loop;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundLoopAndRumble_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundLoopAndRumble_FieldIndex.RumbleValues) ?? true))
            {
                item.RumbleValues = rhs.RumbleValues;
            }
        }
        
        #endregion
        
        public SoundLoopAndRumble DeepCopy(
            ISoundLoopAndRumbleGetter item,
            SoundLoopAndRumble.TranslationMask? copyMask = null)
        {
            SoundLoopAndRumble ret = (SoundLoopAndRumble)((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)item).CommonInstance()!).GetNew();
            ((SoundLoopAndRumbleSetterTranslationCommon)((ISoundLoopAndRumbleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundLoopAndRumble DeepCopy(
            ISoundLoopAndRumbleGetter item,
            out SoundLoopAndRumble.ErrorMask errorMask,
            SoundLoopAndRumble.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundLoopAndRumble ret = (SoundLoopAndRumble)((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)item).CommonInstance()!).GetNew();
            ((SoundLoopAndRumbleSetterTranslationCommon)((ISoundLoopAndRumbleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundLoopAndRumble.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundLoopAndRumble DeepCopy(
            ISoundLoopAndRumbleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundLoopAndRumble ret = (SoundLoopAndRumble)((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)item).CommonInstance()!).GetNew();
            ((SoundLoopAndRumbleSetterTranslationCommon)((ISoundLoopAndRumbleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundLoopAndRumble
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundLoopAndRumble_Registration.Instance;
        public static SoundLoopAndRumble_Registration Registration => SoundLoopAndRumble_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundLoopAndRumbleCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SoundLoopAndRumbleSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundLoopAndRumbleSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundLoopAndRumbleGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISoundLoopAndRumbleGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISoundLoopAndRumbleGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SoundLoopAndRumbleBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static SoundLoopAndRumbleBinaryWriteTranslation Instance = new SoundLoopAndRumbleBinaryWriteTranslation();

        public static void WriteEmbedded(
            ISoundLoopAndRumbleGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Unknown);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoundDescriptor.LoopType>.Instance.Write(
                writer,
                item.Loop,
                length: 1);
            writer.Write(item.Unknown2);
            writer.Write(item.RumbleValues);
        }

        public void Write(
            MutagenWriter writer,
            ISoundLoopAndRumbleGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.LNAM),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoundLoopAndRumbleGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SoundLoopAndRumbleBinaryCreateTranslation
    {
        public readonly static SoundLoopAndRumbleBinaryCreateTranslation Instance = new SoundLoopAndRumbleBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISoundLoopAndRumble item,
            MutagenFrame frame)
        {
            item.Unknown = frame.ReadUInt8();
            item.Loop = EnumBinaryTranslation<SoundDescriptor.LoopType>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.Unknown2 = frame.ReadUInt8();
            item.RumbleValues = frame.ReadUInt8();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SoundLoopAndRumbleBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISoundLoopAndRumbleGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundLoopAndRumbleBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SoundLoopAndRumbleBinaryOverlay :
        BinaryOverlay,
        ISoundLoopAndRumbleGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundLoopAndRumble_Registration.Instance;
        public static SoundLoopAndRumble_Registration Registration => SoundLoopAndRumble_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundLoopAndRumbleCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundLoopAndRumbleSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundLoopAndRumbleGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISoundLoopAndRumbleGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISoundLoopAndRumbleGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundLoopAndRumbleBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundLoopAndRumbleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Byte Unknown => _data.Span[0x0];
        public SoundDescriptor.LoopType Loop => (SoundDescriptor.LoopType)_data.Span.Slice(0x1, 0x1)[0];
        public Byte Unknown2 => _data.Span[0x2];
        public Byte RumbleValues => _data.Span[0x3];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundLoopAndRumbleBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static SoundLoopAndRumbleBinaryOverlay SoundLoopAndRumbleFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SoundLoopAndRumbleBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x4 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static SoundLoopAndRumbleBinaryOverlay SoundLoopAndRumbleFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return SoundLoopAndRumbleFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoundLoopAndRumbleMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISoundLoopAndRumbleGetter rhs)) return false;
            return ((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISoundLoopAndRumbleGetter? obj)
        {
            return ((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

