/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PackageBranch :
        IPackageBranch,
        ILoquiObjectSetter<PackageBranch>,
        IEquatable<IPackageBranchGetter>
    {
        #region Ctor
        public PackageBranch()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region BranchType
        public String BranchType { get; set; } = string.Empty;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IPackageBranchGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Root
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageRoot? _Root;
        public PackageRoot? Root
        {
            get => _Root;
            set => _Root = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageRootGetter? IPackageBranchGetter.Root => this.Root;
        #endregion
        #region ProcedureType
        public String? ProcedureType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPackageBranchGetter.ProcedureType => this.ProcedureType;
        #endregion
        #region Flags
        public PackageBranch.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        PackageBranch.Flag? IPackageBranchGetter.Flags => this.Flags;
        #endregion
        #region DataInputIndices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Byte> _DataInputIndices = new ExtendedList<Byte>();
        public ExtendedList<Byte> DataInputIndices
        {
            get => this._DataInputIndices;
            protected set => this._DataInputIndices = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Byte> IPackageBranchGetter.DataInputIndices => _DataInputIndices;
        #endregion

        #endregion
        #region FlagsOverride
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageFlagsOverride? _FlagsOverride;
        public PackageFlagsOverride? FlagsOverride
        {
            get => _FlagsOverride;
            set => _FlagsOverride = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageFlagsOverrideGetter? IPackageBranchGetter.FlagsOverride => this.FlagsOverride;
        #endregion
        #region FlagsOverrideUnused
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageFlagsOverride? _FlagsOverrideUnused;
        public PackageFlagsOverride? FlagsOverrideUnused
        {
            get => _FlagsOverrideUnused;
            set => _FlagsOverrideUnused = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageFlagsOverrideGetter? IPackageBranchGetter.FlagsOverrideUnused => this.FlagsOverrideUnused;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SliceList<byte> _Unknown = new SliceList<byte>();
        public SliceList<byte> Unknown
        {
            get => this._Unknown;
            protected set => this._Unknown = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ReadOnlyMemorySlice<Byte>> IPackageBranchGetter.Unknown => _Unknown;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageBranchMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPackageBranchGetter rhs)) return false;
            return ((PackageBranchCommon)((IPackageBranchGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPackageBranchGetter? obj)
        {
            return ((PackageBranchCommon)((IPackageBranchGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PackageBranchCommon)((IPackageBranchGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.BranchType = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Root = new MaskItem<TItem, PackageRoot.Mask<TItem>?>(initialValue, new PackageRoot.Mask<TItem>(initialValue));
                this.ProcedureType = initialValue;
                this.Flags = initialValue;
                this.DataInputIndices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FlagsOverride = new MaskItem<TItem, PackageFlagsOverride.Mask<TItem>?>(initialValue, new PackageFlagsOverride.Mask<TItem>(initialValue));
                this.FlagsOverrideUnused = new MaskItem<TItem, PackageFlagsOverride.Mask<TItem>?>(initialValue, new PackageFlagsOverride.Mask<TItem>(initialValue));
                this.Unknown = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem BranchType,
                TItem Conditions,
                TItem Root,
                TItem ProcedureType,
                TItem Flags,
                TItem DataInputIndices,
                TItem FlagsOverride,
                TItem FlagsOverrideUnused,
                TItem Unknown)
            {
                this.BranchType = BranchType;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Root = new MaskItem<TItem, PackageRoot.Mask<TItem>?>(Root, new PackageRoot.Mask<TItem>(Root));
                this.ProcedureType = ProcedureType;
                this.Flags = Flags;
                this.DataInputIndices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(DataInputIndices, Enumerable.Empty<(int Index, TItem Value)>());
                this.FlagsOverride = new MaskItem<TItem, PackageFlagsOverride.Mask<TItem>?>(FlagsOverride, new PackageFlagsOverride.Mask<TItem>(FlagsOverride));
                this.FlagsOverrideUnused = new MaskItem<TItem, PackageFlagsOverride.Mask<TItem>?>(FlagsOverrideUnused, new PackageFlagsOverride.Mask<TItem>(FlagsOverrideUnused));
                this.Unknown = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Unknown, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem BranchType;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, PackageRoot.Mask<TItem>?>? Root { get; set; }
            public TItem ProcedureType;
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? DataInputIndices;
            public MaskItem<TItem, PackageFlagsOverride.Mask<TItem>?>? FlagsOverride { get; set; }
            public MaskItem<TItem, PackageFlagsOverride.Mask<TItem>?>? FlagsOverrideUnused { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.BranchType, rhs.BranchType)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Root, rhs.Root)) return false;
                if (!object.Equals(this.ProcedureType, rhs.ProcedureType)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.DataInputIndices, rhs.DataInputIndices)) return false;
                if (!object.Equals(this.FlagsOverride, rhs.FlagsOverride)) return false;
                if (!object.Equals(this.FlagsOverrideUnused, rhs.FlagsOverrideUnused)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.BranchType);
                hash.Add(this.Conditions);
                hash.Add(this.Root);
                hash.Add(this.ProcedureType);
                hash.Add(this.Flags);
                hash.Add(this.DataInputIndices);
                hash.Add(this.FlagsOverride);
                hash.Add(this.FlagsOverrideUnused);
                hash.Add(this.Unknown);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.BranchType)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Root != null)
                {
                    if (!eval(this.Root.Overall)) return false;
                    if (this.Root.Specific != null && !this.Root.Specific.All(eval)) return false;
                }
                if (!eval(this.ProcedureType)) return false;
                if (!eval(this.Flags)) return false;
                if (this.DataInputIndices != null)
                {
                    if (!eval(this.DataInputIndices.Overall)) return false;
                    if (this.DataInputIndices.Specific != null)
                    {
                        foreach (var item in this.DataInputIndices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (FlagsOverride != null)
                {
                    if (!eval(this.FlagsOverride.Overall)) return false;
                    if (this.FlagsOverride.Specific != null && !this.FlagsOverride.Specific.All(eval)) return false;
                }
                if (FlagsOverrideUnused != null)
                {
                    if (!eval(this.FlagsOverrideUnused.Overall)) return false;
                    if (this.FlagsOverrideUnused.Specific != null && !this.FlagsOverrideUnused.Specific.All(eval)) return false;
                }
                if (this.Unknown != null)
                {
                    if (!eval(this.Unknown.Overall)) return false;
                    if (this.Unknown.Specific != null)
                    {
                        foreach (var item in this.Unknown.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.BranchType)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Root != null)
                {
                    if (eval(this.Root.Overall)) return true;
                    if (this.Root.Specific != null && this.Root.Specific.Any(eval)) return true;
                }
                if (eval(this.ProcedureType)) return true;
                if (eval(this.Flags)) return true;
                if (this.DataInputIndices != null)
                {
                    if (eval(this.DataInputIndices.Overall)) return true;
                    if (this.DataInputIndices.Specific != null)
                    {
                        foreach (var item in this.DataInputIndices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (FlagsOverride != null)
                {
                    if (eval(this.FlagsOverride.Overall)) return true;
                    if (this.FlagsOverride.Specific != null && this.FlagsOverride.Specific.Any(eval)) return true;
                }
                if (FlagsOverrideUnused != null)
                {
                    if (eval(this.FlagsOverrideUnused.Overall)) return true;
                    if (this.FlagsOverrideUnused.Specific != null && this.FlagsOverrideUnused.Specific.Any(eval)) return true;
                }
                if (this.Unknown != null)
                {
                    if (eval(this.Unknown.Overall)) return true;
                    if (this.Unknown.Specific != null)
                    {
                        foreach (var item in this.Unknown.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PackageBranch.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.BranchType = eval(this.BranchType);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Root = this.Root == null ? null : new MaskItem<R, PackageRoot.Mask<R>?>(eval(this.Root.Overall), this.Root.Specific?.Translate(eval));
                obj.ProcedureType = eval(this.ProcedureType);
                obj.Flags = eval(this.Flags);
                if (DataInputIndices != null)
                {
                    obj.DataInputIndices = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.DataInputIndices.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (DataInputIndices.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.DataInputIndices.Specific = l;
                        foreach (var item in DataInputIndices.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.FlagsOverride = this.FlagsOverride == null ? null : new MaskItem<R, PackageFlagsOverride.Mask<R>?>(eval(this.FlagsOverride.Overall), this.FlagsOverride.Specific?.Translate(eval));
                obj.FlagsOverrideUnused = this.FlagsOverrideUnused == null ? null : new MaskItem<R, PackageFlagsOverride.Mask<R>?>(eval(this.FlagsOverrideUnused.Overall), this.FlagsOverrideUnused.Specific?.Translate(eval));
                if (Unknown != null)
                {
                    obj.Unknown = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Unknown.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Unknown.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Unknown.Specific = l;
                        foreach (var item in Unknown.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PackageBranch.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PackageBranch.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PackageBranch.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.BranchType ?? true)
                    {
                        fg.AppendItem(BranchType, "BranchType");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Root?.Overall ?? true)
                    {
                        Root?.ToString(fg);
                    }
                    if (printMask?.ProcedureType ?? true)
                    {
                        fg.AppendItem(ProcedureType, "ProcedureType");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.DataInputIndices?.Overall ?? true)
                        && DataInputIndices.TryGet(out var DataInputIndicesItem))
                    {
                        fg.AppendLine("DataInputIndices =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(DataInputIndicesItem.Overall);
                            if (DataInputIndicesItem.Specific != null)
                            {
                                foreach (var subItem in DataInputIndicesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.FlagsOverride?.Overall ?? true)
                    {
                        FlagsOverride?.ToString(fg);
                    }
                    if (printMask?.FlagsOverrideUnused?.Overall ?? true)
                    {
                        FlagsOverrideUnused?.ToString(fg);
                    }
                    if ((printMask?.Unknown?.Overall ?? true)
                        && Unknown.TryGet(out var UnknownItem))
                    {
                        fg.AppendLine("Unknown =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(UnknownItem.Overall);
                            if (UnknownItem.Specific != null)
                            {
                                foreach (var subItem in UnknownItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? BranchType;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, PackageRoot.ErrorMask?>? Root;
            public Exception? ProcedureType;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? DataInputIndices;
            public MaskItem<Exception?, PackageFlagsOverride.ErrorMask?>? FlagsOverride;
            public MaskItem<Exception?, PackageFlagsOverride.ErrorMask?>? FlagsOverrideUnused;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Unknown;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PackageBranch_FieldIndex enu = (PackageBranch_FieldIndex)index;
                switch (enu)
                {
                    case PackageBranch_FieldIndex.BranchType:
                        return BranchType;
                    case PackageBranch_FieldIndex.Conditions:
                        return Conditions;
                    case PackageBranch_FieldIndex.Root:
                        return Root;
                    case PackageBranch_FieldIndex.ProcedureType:
                        return ProcedureType;
                    case PackageBranch_FieldIndex.Flags:
                        return Flags;
                    case PackageBranch_FieldIndex.DataInputIndices:
                        return DataInputIndices;
                    case PackageBranch_FieldIndex.FlagsOverride:
                        return FlagsOverride;
                    case PackageBranch_FieldIndex.FlagsOverrideUnused:
                        return FlagsOverrideUnused;
                    case PackageBranch_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PackageBranch_FieldIndex enu = (PackageBranch_FieldIndex)index;
                switch (enu)
                {
                    case PackageBranch_FieldIndex.BranchType:
                        this.BranchType = ex;
                        break;
                    case PackageBranch_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case PackageBranch_FieldIndex.Root:
                        this.Root = new MaskItem<Exception?, PackageRoot.ErrorMask?>(ex, null);
                        break;
                    case PackageBranch_FieldIndex.ProcedureType:
                        this.ProcedureType = ex;
                        break;
                    case PackageBranch_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case PackageBranch_FieldIndex.DataInputIndices:
                        this.DataInputIndices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PackageBranch_FieldIndex.FlagsOverride:
                        this.FlagsOverride = new MaskItem<Exception?, PackageFlagsOverride.ErrorMask?>(ex, null);
                        break;
                    case PackageBranch_FieldIndex.FlagsOverrideUnused:
                        this.FlagsOverrideUnused = new MaskItem<Exception?, PackageFlagsOverride.ErrorMask?>(ex, null);
                        break;
                    case PackageBranch_FieldIndex.Unknown:
                        this.Unknown = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PackageBranch_FieldIndex enu = (PackageBranch_FieldIndex)index;
                switch (enu)
                {
                    case PackageBranch_FieldIndex.BranchType:
                        this.BranchType = (Exception?)obj;
                        break;
                    case PackageBranch_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case PackageBranch_FieldIndex.Root:
                        this.Root = (MaskItem<Exception?, PackageRoot.ErrorMask?>?)obj;
                        break;
                    case PackageBranch_FieldIndex.ProcedureType:
                        this.ProcedureType = (Exception?)obj;
                        break;
                    case PackageBranch_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case PackageBranch_FieldIndex.DataInputIndices:
                        this.DataInputIndices = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PackageBranch_FieldIndex.FlagsOverride:
                        this.FlagsOverride = (MaskItem<Exception?, PackageFlagsOverride.ErrorMask?>?)obj;
                        break;
                    case PackageBranch_FieldIndex.FlagsOverrideUnused:
                        this.FlagsOverrideUnused = (MaskItem<Exception?, PackageFlagsOverride.ErrorMask?>?)obj;
                        break;
                    case PackageBranch_FieldIndex.Unknown:
                        this.Unknown = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (BranchType != null) return true;
                if (Conditions != null) return true;
                if (Root != null) return true;
                if (ProcedureType != null) return true;
                if (Flags != null) return true;
                if (DataInputIndices != null) return true;
                if (FlagsOverride != null) return true;
                if (FlagsOverrideUnused != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(BranchType, "BranchType");
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Root?.ToString(fg);
                fg.AppendItem(ProcedureType, "ProcedureType");
                fg.AppendItem(Flags, "Flags");
                if (DataInputIndices.TryGet(out var DataInputIndicesItem))
                {
                    fg.AppendLine("DataInputIndices =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(DataInputIndicesItem.Overall);
                        if (DataInputIndicesItem.Specific != null)
                        {
                            foreach (var subItem in DataInputIndicesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                FlagsOverride?.ToString(fg);
                FlagsOverrideUnused?.ToString(fg);
                if (Unknown.TryGet(out var UnknownItem))
                {
                    fg.AppendLine("Unknown =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(UnknownItem.Overall);
                        if (UnknownItem.Specific != null)
                        {
                            foreach (var subItem in UnknownItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.BranchType = this.BranchType.Combine(rhs.BranchType);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Root = this.Root.Combine(rhs.Root, (l, r) => l.Combine(r));
                ret.ProcedureType = this.ProcedureType.Combine(rhs.ProcedureType);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.DataInputIndices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.DataInputIndices?.Overall, rhs.DataInputIndices?.Overall), ExceptionExt.Combine(this.DataInputIndices?.Specific, rhs.DataInputIndices?.Specific));
                ret.FlagsOverride = this.FlagsOverride.Combine(rhs.FlagsOverride, (l, r) => l.Combine(r));
                ret.FlagsOverrideUnused = this.FlagsOverrideUnused.Combine(rhs.FlagsOverrideUnused, (l, r) => l.Combine(r));
                ret.Unknown = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Unknown?.Overall, rhs.Unknown?.Overall), ExceptionExt.Combine(this.Unknown?.Specific, rhs.Unknown?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool BranchType;
            public Condition.TranslationMask? Conditions;
            public PackageRoot.TranslationMask? Root;
            public bool ProcedureType;
            public bool Flags;
            public bool DataInputIndices;
            public PackageFlagsOverride.TranslationMask? FlagsOverride;
            public PackageFlagsOverride.TranslationMask? FlagsOverrideUnused;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.BranchType = defaultOn;
                this.ProcedureType = defaultOn;
                this.Flags = defaultOn;
                this.DataInputIndices = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((BranchType, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Root != null ? Root.OnOverall : DefaultOn, Root?.GetCrystal()));
                ret.Add((ProcedureType, null));
                ret.Add((Flags, null));
                ret.Add((DataInputIndices, null));
                ret.Add((FlagsOverride != null ? FlagsOverride.OnOverall : DefaultOn, FlagsOverride?.GetCrystal()));
                ret.Add((FlagsOverrideUnused != null ? FlagsOverrideUnused.OnOverall : DefaultOn, FlagsOverrideUnused?.GetCrystal()));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PackageBranch_Registration.TriggeringRecordType;
        public IEnumerable<FormLinkInformation> ContainedFormLinks => PackageBranchCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PackageBranchSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PackageBranchBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageBranchBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static PackageBranch CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PackageBranch();
            ((PackageBranchSetterCommon)((IPackageBranchGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PackageBranch item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PackageBranchSetterCommon)((IPackageBranchGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PackageBranch GetNew()
        {
            return new PackageBranch();
        }

    }
    #endregion

    #region Interface
    public partial interface IPackageBranch :
        IPackageBranchGetter,
        ILoquiObjectSetter<IPackageBranch>,
        IFormLinkContainer
    {
        new String BranchType { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new PackageRoot? Root { get; set; }
        new String? ProcedureType { get; set; }
        new PackageBranch.Flag? Flags { get; set; }
        new ExtendedList<Byte> DataInputIndices { get; }
        new PackageFlagsOverride? FlagsOverride { get; set; }
        new PackageFlagsOverride? FlagsOverrideUnused { get; set; }
        new SliceList<byte> Unknown { get; }
    }

    public partial interface IPackageBranchGetter :
        ILoquiObject,
        ILoquiObject<IPackageBranchGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => PackageBranch_Registration.Instance;
        String BranchType { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IPackageRootGetter? Root { get; }
        String? ProcedureType { get; }
        PackageBranch.Flag? Flags { get; }
        IReadOnlyList<Byte> DataInputIndices { get; }
        IPackageFlagsOverrideGetter? FlagsOverride { get; }
        IPackageFlagsOverrideGetter? FlagsOverrideUnused { get; }
        IReadOnlyList<ReadOnlyMemorySlice<Byte>> Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PackageBranchMixIn
    {
        public static void Clear(this IPackageBranch item)
        {
            ((PackageBranchSetterCommon)((IPackageBranchGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PackageBranch.Mask<bool> GetEqualsMask(
            this IPackageBranchGetter item,
            IPackageBranchGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PackageBranchCommon)((IPackageBranchGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPackageBranchGetter item,
            string? name = null,
            PackageBranch.Mask<bool>? printMask = null)
        {
            return ((PackageBranchCommon)((IPackageBranchGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPackageBranchGetter item,
            FileGeneration fg,
            string? name = null,
            PackageBranch.Mask<bool>? printMask = null)
        {
            ((PackageBranchCommon)((IPackageBranchGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPackageBranchGetter item,
            IPackageBranchGetter rhs)
        {
            return ((PackageBranchCommon)((IPackageBranchGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPackageBranch lhs,
            IPackageBranchGetter rhs)
        {
            ((PackageBranchSetterTranslationCommon)((IPackageBranchGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPackageBranch lhs,
            IPackageBranchGetter rhs,
            PackageBranch.TranslationMask? copyMask = null)
        {
            ((PackageBranchSetterTranslationCommon)((IPackageBranchGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPackageBranch lhs,
            IPackageBranchGetter rhs,
            out PackageBranch.ErrorMask errorMask,
            PackageBranch.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PackageBranchSetterTranslationCommon)((IPackageBranchGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PackageBranch.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPackageBranch lhs,
            IPackageBranchGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PackageBranchSetterTranslationCommon)((IPackageBranchGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PackageBranch DeepCopy(
            this IPackageBranchGetter item,
            PackageBranch.TranslationMask? copyMask = null)
        {
            return ((PackageBranchSetterTranslationCommon)((IPackageBranchGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PackageBranch DeepCopy(
            this IPackageBranchGetter item,
            out PackageBranch.ErrorMask errorMask,
            PackageBranch.TranslationMask? copyMask = null)
        {
            return ((PackageBranchSetterTranslationCommon)((IPackageBranchGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PackageBranch DeepCopy(
            this IPackageBranchGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PackageBranchSetterTranslationCommon)((IPackageBranchGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPackageBranch item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageBranchSetterCommon)((IPackageBranchGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PackageBranch_FieldIndex
    {
        BranchType = 0,
        Conditions = 1,
        Root = 2,
        ProcedureType = 3,
        Flags = 4,
        DataInputIndices = 5,
        FlagsOverride = 6,
        FlagsOverrideUnused = 7,
        Unknown = 8,
    }
    #endregion

    #region Registration
    public partial class PackageBranch_Registration : ILoquiRegistration
    {
        public static readonly PackageBranch_Registration Instance = new PackageBranch_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 383,
            version: 0);

        public const string GUID = "571810b7-1ca9-4979-8322-cd0124cbca44";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(PackageBranch.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PackageBranch.ErrorMask);

        public static readonly Type ClassType = typeof(PackageBranch);

        public static readonly Type GetterType = typeof(IPackageBranchGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPackageBranch);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PackageBranch";

        public const string Name = "PackageBranch";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ANAM;
        public static readonly Type BinaryWriteTranslation = typeof(PackageBranchBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PackageBranchSetterCommon
    {
        public static readonly PackageBranchSetterCommon Instance = new PackageBranchSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPackageBranch item)
        {
            ClearPartial();
            item.BranchType = string.Empty;
            item.Conditions.Clear();
            item.Root = null;
            item.ProcedureType = default;
            item.Flags = default;
            item.DataInputIndices.Clear();
            item.FlagsOverride = null;
            item.FlagsOverrideUnused = null;
            item.Unknown.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IPackageBranch obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Conditions.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPackageBranch item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PackageBranchBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PackageBranchBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class PackageBranchCommon
    {
        public static readonly PackageBranchCommon Instance = new PackageBranchCommon();

        public PackageBranch.Mask<bool> GetEqualsMask(
            IPackageBranchGetter item,
            IPackageBranchGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PackageBranch.Mask<bool>(false);
            ((PackageBranchCommon)((IPackageBranchGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPackageBranchGetter item,
            IPackageBranchGetter rhs,
            PackageBranch.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.BranchType = string.Equals(item.BranchType, rhs.BranchType);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Root = EqualsMaskHelper.EqualsHelper(
                item.Root,
                rhs.Root,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ProcedureType = string.Equals(item.ProcedureType, rhs.ProcedureType);
            ret.Flags = item.Flags == rhs.Flags;
            ret.DataInputIndices = item.DataInputIndices.CollectionEqualsHelper(
                rhs.DataInputIndices,
                (l, r) => l == r,
                include);
            ret.FlagsOverride = EqualsMaskHelper.EqualsHelper(
                item.FlagsOverride,
                rhs.FlagsOverride,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FlagsOverrideUnused = EqualsMaskHelper.EqualsHelper(
                item.FlagsOverrideUnused,
                rhs.FlagsOverrideUnused,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unknown = item.Unknown.CollectionEqualsHelper(
                rhs.Unknown,
                (l, r) => MemoryExtensions.SequenceEqual(l.Span, r.Span),
                include);
        }
        
        public string ToString(
            IPackageBranchGetter item,
            string? name = null,
            PackageBranch.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPackageBranchGetter item,
            FileGeneration fg,
            string? name = null,
            PackageBranch.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PackageBranch =>");
            }
            else
            {
                fg.AppendLine($"{name} (PackageBranch) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPackageBranchGetter item,
            FileGeneration fg,
            PackageBranch.Mask<bool>? printMask = null)
        {
            if (printMask?.BranchType ?? true)
            {
                fg.AppendItem(item.BranchType, "BranchType");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Root?.Overall ?? true)
                && item.Root.TryGet(out var RootItem))
            {
                RootItem?.ToString(fg, "Root");
            }
            if ((printMask?.ProcedureType ?? true)
                && item.ProcedureType.TryGet(out var ProcedureTypeItem))
            {
                fg.AppendItem(ProcedureTypeItem, "ProcedureType");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.DataInputIndices?.Overall ?? true)
            {
                fg.AppendLine("DataInputIndices =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.DataInputIndices)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.FlagsOverride?.Overall ?? true)
                && item.FlagsOverride.TryGet(out var FlagsOverrideItem))
            {
                FlagsOverrideItem?.ToString(fg, "FlagsOverride");
            }
            if ((printMask?.FlagsOverrideUnused?.Overall ?? true)
                && item.FlagsOverrideUnused.TryGet(out var FlagsOverrideUnusedItem))
            {
                FlagsOverrideUnusedItem?.ToString(fg, "FlagsOverrideUnused");
            }
            if (printMask?.Unknown?.Overall ?? true)
            {
                fg.AppendLine("Unknown =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Unknown)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {SpanExt.ToHexString(subItem)}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPackageBranchGetter? lhs,
            IPackageBranchGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.BranchType, rhs.BranchType)) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            if (!object.Equals(lhs.Root, rhs.Root)) return false;
            if (!string.Equals(lhs.ProcedureType, rhs.ProcedureType)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.DataInputIndices.SequenceEqualNullable(rhs.DataInputIndices)) return false;
            if (!object.Equals(lhs.FlagsOverride, rhs.FlagsOverride)) return false;
            if (!object.Equals(lhs.FlagsOverrideUnused, rhs.FlagsOverrideUnused)) return false;
            if (!lhs.Unknown.SequenceEqualNullable(rhs.Unknown)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IPackageBranchGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.BranchType);
            hash.Add(item.Conditions);
            if (item.Root.TryGet(out var Rootitem))
            {
                hash.Add(Rootitem);
            }
            if (item.ProcedureType.TryGet(out var ProcedureTypeitem))
            {
                hash.Add(ProcedureTypeitem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.DataInputIndices);
            if (item.FlagsOverride.TryGet(out var FlagsOverrideitem))
            {
                hash.Add(FlagsOverrideitem);
            }
            if (item.FlagsOverrideUnused.TryGet(out var FlagsOverrideUnuseditem))
            {
                hash.Add(FlagsOverrideUnuseditem);
            }
            hash.Add(item.Unknown);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PackageBranch.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPackageBranchGetter obj)
        {
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class PackageBranchSetterTranslationCommon
    {
        public static readonly PackageBranchSetterTranslationCommon Instance = new PackageBranchSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPackageBranch item,
            IPackageBranchGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PackageBranch_FieldIndex.BranchType) ?? true))
            {
                item.BranchType = rhs.BranchType;
            }
            if ((copyMask?.GetShouldTranslate((int)PackageBranch_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)PackageBranch_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PackageBranch_FieldIndex.Root) ?? true))
            {
                errorMask?.PushIndex((int)PackageBranch_FieldIndex.Root);
                try
                {
                    if(rhs.Root.TryGet(out var rhsRoot))
                    {
                        item.Root = rhsRoot.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PackageBranch_FieldIndex.Root));
                    }
                    else
                    {
                        item.Root = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PackageBranch_FieldIndex.ProcedureType) ?? true))
            {
                item.ProcedureType = rhs.ProcedureType;
            }
            if ((copyMask?.GetShouldTranslate((int)PackageBranch_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)PackageBranch_FieldIndex.DataInputIndices) ?? true))
            {
                errorMask?.PushIndex((int)PackageBranch_FieldIndex.DataInputIndices);
                try
                {
                    item.DataInputIndices.SetTo(rhs.DataInputIndices);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PackageBranch_FieldIndex.FlagsOverride) ?? true))
            {
                errorMask?.PushIndex((int)PackageBranch_FieldIndex.FlagsOverride);
                try
                {
                    if(rhs.FlagsOverride.TryGet(out var rhsFlagsOverride))
                    {
                        item.FlagsOverride = rhsFlagsOverride.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PackageBranch_FieldIndex.FlagsOverride));
                    }
                    else
                    {
                        item.FlagsOverride = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PackageBranch_FieldIndex.FlagsOverrideUnused) ?? true))
            {
                errorMask?.PushIndex((int)PackageBranch_FieldIndex.FlagsOverrideUnused);
                try
                {
                    if(rhs.FlagsOverrideUnused.TryGet(out var rhsFlagsOverrideUnused))
                    {
                        item.FlagsOverrideUnused = rhsFlagsOverrideUnused.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PackageBranch_FieldIndex.FlagsOverrideUnused));
                    }
                    else
                    {
                        item.FlagsOverrideUnused = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PackageBranch_FieldIndex.Unknown) ?? true))
            {
                errorMask?.PushIndex((int)PackageBranch_FieldIndex.Unknown);
                try
                {
                    item.Unknown.SetTo(
                        rhs.Unknown
                            .Select(b => new MemorySlice<byte>(b.ToArray())));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public PackageBranch DeepCopy(
            IPackageBranchGetter item,
            PackageBranch.TranslationMask? copyMask = null)
        {
            PackageBranch ret = (PackageBranch)((PackageBranchCommon)((IPackageBranchGetter)item).CommonInstance()!).GetNew();
            ((PackageBranchSetterTranslationCommon)((IPackageBranchGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PackageBranch DeepCopy(
            IPackageBranchGetter item,
            out PackageBranch.ErrorMask errorMask,
            PackageBranch.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PackageBranch ret = (PackageBranch)((PackageBranchCommon)((IPackageBranchGetter)item).CommonInstance()!).GetNew();
            ((PackageBranchSetterTranslationCommon)((IPackageBranchGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PackageBranch.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PackageBranch DeepCopy(
            IPackageBranchGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PackageBranch ret = (PackageBranch)((PackageBranchCommon)((IPackageBranchGetter)item).CommonInstance()!).GetNew();
            ((PackageBranchSetterTranslationCommon)((IPackageBranchGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PackageBranch
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageBranch_Registration.Instance;
        public static PackageBranch_Registration Registration => PackageBranch_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PackageBranchCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PackageBranchSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PackageBranchSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPackageBranchGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPackageBranchGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPackageBranchGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PackageBranchBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static PackageBranchBinaryWriteTranslation Instance = new PackageBranchBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IPackageBranchGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IPackageBranchGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryFlagsOverrideCustom(
            MutagenWriter writer,
            IPackageBranchGetter item);

        public static void WriteBinaryFlagsOverride(
            MutagenWriter writer,
            IPackageBranchGetter item)
        {
            WriteBinaryFlagsOverrideCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IPackageBranchGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BranchType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM),
                binaryType: StringBinaryType.NullTerminate);
            PackageBranchBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            if (item.Root.TryGet(out var RootItem))
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.PRCB))
                {
                    ((PackageRootBinaryWriteTranslation)((IBinaryItem)RootItem).BinaryWriteTranslator).Write(
                        item: RootItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ProcedureType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.PNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<PackageBranch.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Byte>.Instance.WritePerItem(
                writer: writer,
                items: item.DataInputIndices,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.PKC2),
                transl: ByteBinaryTranslation.Instance.Write);
            PackageBranchBinaryWriteTranslation.WriteBinaryFlagsOverride(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ReadOnlyMemorySlice<Byte>>.Instance.WritePerItem(
                writer: writer,
                items: item.Unknown,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.PFOR),
                transl: ByteArrayBinaryTranslation.Instance.Write);
        }

        public void Write(
            MutagenWriter writer,
            IPackageBranchGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageBranchGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PackageBranchBinaryCreateTranslation
    {
        public readonly static PackageBranchBinaryCreateTranslation Instance = new PackageBranchBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPackageBranch item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IPackageBranch item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ANAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)PackageBranch_FieldIndex.BranchType) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BranchType = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)PackageBranch_FieldIndex.BranchType;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    PackageBranchBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)PackageBranch_FieldIndex.Conditions;
                }
                case RecordTypeInts.PRCB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.Root = Mutagen.Bethesda.Fallout4.PackageRoot.CreateFromBinary(frame: frame);
                    return (int)PackageBranch_FieldIndex.Root;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ProcedureType = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)PackageBranch_FieldIndex.ProcedureType;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<PackageBranch.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)PackageBranch_FieldIndex.Flags;
                }
                case RecordTypeInts.PKC2:
                {
                    item.DataInputIndices.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Byte>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.PKC2),
                            transl: ByteBinaryTranslation.Instance.Parse));
                    return (int)PackageBranch_FieldIndex.DataInputIndices;
                }
                case RecordTypeInts.PFO2:
                {
                    PackageBranchBinaryCreateTranslation.FillBinaryFlagsOverrideCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)PackageBranch_FieldIndex.FlagsOverride;
                }
                case RecordTypeInts.PFOR:
                {
                    item.Unknown.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<MemorySlice<Byte>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.PFOR),
                            transl: ByteArrayBinaryTranslation.Instance.Parse));
                    return (int)PackageBranch_FieldIndex.Unknown;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IPackageBranch item);

        static partial void FillBinaryFlagsOverrideCustom(
            MutagenFrame frame,
            IPackageBranch item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PackageBranchBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPackageBranchGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageBranchBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PackageBranchBinaryOverlay :
        BinaryOverlay,
        IPackageBranchGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageBranch_Registration.Instance;
        public static PackageBranch_Registration Registration => PackageBranch_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PackageBranchCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PackageBranchSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPackageBranchGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPackageBranchGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPackageBranchGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => PackageBranchCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PackageBranchBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageBranchBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region BranchType
        private int? _BranchTypeLocation;
        public String BranchType => _BranchTypeLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _BranchTypeLocation.Value, _package.MetaData.Constants)) : string.Empty;
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        public IPackageRootGetter? Root { get; private set; }
        #region ProcedureType
        private int? _ProcedureTypeLocation;
        public String? ProcedureType => _ProcedureTypeLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _ProcedureTypeLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public PackageBranch.Flag? Flags => _FlagsLocation.HasValue ? (PackageBranch.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(PackageBranch.Flag?);
        #endregion
        public IReadOnlyList<Byte> DataInputIndices { get; private set; } = ListExt.Empty<Byte>();
        #region FlagsOverride
        partial void FlagsOverrideCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public IPackageFlagsOverrideGetter? FlagsOverride => GetFlagsOverrideCustom();
        #endregion
        public IReadOnlyList<ReadOnlyMemorySlice<Byte>> Unknown { get; private set; } = ListExt.Empty<ReadOnlyMemorySlice<Byte>>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PackageBranchBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PackageBranchBinaryOverlay PackageBranchFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PackageBranchBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PackageBranchBinaryOverlay PackageBranchFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PackageBranchFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ANAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)PackageBranch_FieldIndex.BranchType) return ParseResult.Stop;
                    _BranchTypeLocation = (stream.Position - offset);
                    return (int)PackageBranch_FieldIndex.BranchType;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)PackageBranch_FieldIndex.Conditions;
                }
                case RecordTypeInts.PRCB:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.Root = PackageRootBinaryOverlay.PackageRootFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)PackageBranch_FieldIndex.Root;
                }
                case RecordTypeInts.PNAM:
                {
                    _ProcedureTypeLocation = (stream.Position - offset);
                    return (int)PackageBranch_FieldIndex.ProcedureType;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)PackageBranch_FieldIndex.Flags;
                }
                case RecordTypeInts.PKC2:
                {
                    this.DataInputIndices = BinaryOverlayList.FactoryByArray<Byte>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => s[0],
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)PackageBranch_FieldIndex.DataInputIndices;
                }
                case RecordTypeInts.PFO2:
                {
                    FlagsOverrideCustomParse(
                        stream,
                        finalPos,
                        offset);
                    return (int)PackageBranch_FieldIndex.FlagsOverride;
                }
                case RecordTypeInts.PFOR:
                {
                    this.Unknown = BinaryOverlayList.FactoryByArray<ReadOnlyMemorySlice<Byte>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => p.MetaData.Constants.SubrecordFrame(s).Content,
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: false,
                            recordTypeConverter: recordTypeConverter));
                    return (int)PackageBranch_FieldIndex.Unknown;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageBranchMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPackageBranchGetter rhs)) return false;
            return ((PackageBranchCommon)((IPackageBranchGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPackageBranchGetter? obj)
        {
            return ((PackageBranchCommon)((IPackageBranchGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PackageBranchCommon)((IPackageBranchGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

