/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class RegionArea :
        IRegionArea,
        ILoquiObjectSetter<RegionArea>,
        IEquatable<IRegionAreaGetter>
    {
        #region Ctor
        public RegionArea()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EdgeFallOff
        public UInt32? EdgeFallOff { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IRegionAreaGetter.EdgeFallOff => this.EdgeFallOff;
        #endregion
        #region RegionPointListData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<P2Float>? _RegionPointListData;
        public ExtendedList<P2Float>? RegionPointListData
        {
            get => this._RegionPointListData;
            set => this._RegionPointListData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<P2Float>? IRegionAreaGetter.RegionPointListData => _RegionPointListData;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RegionAreaMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRegionAreaGetter rhs)) return false;
            return ((RegionAreaCommon)((IRegionAreaGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IRegionAreaGetter? obj)
        {
            return ((RegionAreaCommon)((IRegionAreaGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionAreaCommon)((IRegionAreaGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.EdgeFallOff = initialValue;
                this.RegionPointListData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem EdgeFallOff,
                TItem RegionPointListData)
            {
                this.EdgeFallOff = EdgeFallOff;
                this.RegionPointListData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RegionPointListData, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem EdgeFallOff;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RegionPointListData;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.EdgeFallOff, rhs.EdgeFallOff)) return false;
                if (!object.Equals(this.RegionPointListData, rhs.RegionPointListData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.EdgeFallOff);
                hash.Add(this.RegionPointListData);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.EdgeFallOff)) return false;
                if (this.RegionPointListData != null)
                {
                    if (!eval(this.RegionPointListData.Overall)) return false;
                    if (this.RegionPointListData.Specific != null)
                    {
                        foreach (var item in this.RegionPointListData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.EdgeFallOff)) return true;
                if (this.RegionPointListData != null)
                {
                    if (eval(this.RegionPointListData.Overall)) return true;
                    if (this.RegionPointListData.Specific != null)
                    {
                        foreach (var item in this.RegionPointListData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RegionArea.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.EdgeFallOff = eval(this.EdgeFallOff);
                if (RegionPointListData != null)
                {
                    obj.RegionPointListData = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RegionPointListData.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RegionPointListData.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RegionPointListData.Specific = l;
                        foreach (var item in RegionPointListData.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RegionArea.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RegionArea.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RegionArea.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.EdgeFallOff ?? true)
                    {
                        fg.AppendItem(EdgeFallOff, "EdgeFallOff");
                    }
                    if ((printMask?.RegionPointListData?.Overall ?? true)
                        && RegionPointListData.TryGet(out var RegionPointListDataItem))
                    {
                        fg.AppendLine("RegionPointListData =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RegionPointListDataItem.Overall);
                            if (RegionPointListDataItem.Specific != null)
                            {
                                foreach (var subItem in RegionPointListDataItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? EdgeFallOff;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RegionPointListData;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
                switch (enu)
                {
                    case RegionArea_FieldIndex.EdgeFallOff:
                        return EdgeFallOff;
                    case RegionArea_FieldIndex.RegionPointListData:
                        return RegionPointListData;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
                switch (enu)
                {
                    case RegionArea_FieldIndex.EdgeFallOff:
                        this.EdgeFallOff = ex;
                        break;
                    case RegionArea_FieldIndex.RegionPointListData:
                        this.RegionPointListData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                RegionArea_FieldIndex enu = (RegionArea_FieldIndex)index;
                switch (enu)
                {
                    case RegionArea_FieldIndex.EdgeFallOff:
                        this.EdgeFallOff = (Exception?)obj;
                        break;
                    case RegionArea_FieldIndex.RegionPointListData:
                        this.RegionPointListData = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (EdgeFallOff != null) return true;
                if (RegionPointListData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(EdgeFallOff, "EdgeFallOff");
                if (RegionPointListData.TryGet(out var RegionPointListDataItem))
                {
                    fg.AppendLine("RegionPointListData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RegionPointListDataItem.Overall);
                        if (RegionPointListDataItem.Specific != null)
                        {
                            foreach (var subItem in RegionPointListDataItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.EdgeFallOff = this.EdgeFallOff.Combine(rhs.EdgeFallOff);
                ret.RegionPointListData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.RegionPointListData?.Overall, rhs.RegionPointListData?.Overall), ExceptionExt.Combine(this.RegionPointListData?.Specific, rhs.RegionPointListData?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool EdgeFallOff;
            public bool RegionPointListData;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.EdgeFallOff = defaultOn;
                this.RegionPointListData = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((EdgeFallOff, null));
                ret.Add((RegionPointListData, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RegionAreaBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionAreaBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static RegionArea CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RegionArea();
            ((RegionAreaSetterCommon)((IRegionAreaGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out RegionArea item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((RegionAreaSetterCommon)((IRegionAreaGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RegionArea GetNew()
        {
            return new RegionArea();
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionArea :
        IRegionAreaGetter,
        ILoquiObjectSetter<IRegionArea>
    {
        new UInt32? EdgeFallOff { get; set; }
        new ExtendedList<P2Float>? RegionPointListData { get; set; }
    }

    public partial interface IRegionAreaGetter :
        ILoquiObject,
        ILoquiObject<IRegionAreaGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => RegionArea_Registration.Instance;
        UInt32? EdgeFallOff { get; }
        IReadOnlyList<P2Float>? RegionPointListData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RegionAreaMixIn
    {
        public static void Clear(this IRegionArea item)
        {
            ((RegionAreaSetterCommon)((IRegionAreaGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RegionArea.Mask<bool> GetEqualsMask(
            this IRegionAreaGetter item,
            IRegionAreaGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionAreaCommon)((IRegionAreaGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionAreaGetter item,
            string? name = null,
            RegionArea.Mask<bool>? printMask = null)
        {
            return ((RegionAreaCommon)((IRegionAreaGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionAreaGetter item,
            FileGeneration fg,
            string? name = null,
            RegionArea.Mask<bool>? printMask = null)
        {
            ((RegionAreaCommon)((IRegionAreaGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRegionAreaGetter item,
            IRegionAreaGetter rhs)
        {
            return ((RegionAreaCommon)((IRegionAreaGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRegionArea lhs,
            IRegionAreaGetter rhs)
        {
            ((RegionAreaSetterTranslationCommon)((IRegionAreaGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRegionArea lhs,
            IRegionAreaGetter rhs,
            RegionArea.TranslationMask? copyMask = null)
        {
            ((RegionAreaSetterTranslationCommon)((IRegionAreaGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRegionArea lhs,
            IRegionAreaGetter rhs,
            out RegionArea.ErrorMask errorMask,
            RegionArea.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RegionAreaSetterTranslationCommon)((IRegionAreaGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = RegionArea.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRegionArea lhs,
            IRegionAreaGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RegionAreaSetterTranslationCommon)((IRegionAreaGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static RegionArea DeepCopy(
            this IRegionAreaGetter item,
            RegionArea.TranslationMask? copyMask = null)
        {
            return ((RegionAreaSetterTranslationCommon)((IRegionAreaGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RegionArea DeepCopy(
            this IRegionAreaGetter item,
            out RegionArea.ErrorMask errorMask,
            RegionArea.TranslationMask? copyMask = null)
        {
            return ((RegionAreaSetterTranslationCommon)((IRegionAreaGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RegionArea DeepCopy(
            this IRegionAreaGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RegionAreaSetterTranslationCommon)((IRegionAreaGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRegionArea item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionAreaSetterCommon)((IRegionAreaGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum RegionArea_FieldIndex
    {
        EdgeFallOff = 0,
        RegionPointListData = 1,
    }
    #endregion

    #region Registration
    public partial class RegionArea_Registration : ILoquiRegistration
    {
        public static readonly RegionArea_Registration Instance = new RegionArea_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 259,
            version: 0);

        public const string GUID = "722b7070-0d0a-4d2d-97e5-0ea574ddcfff";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RegionArea.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionArea.ErrorMask);

        public static readonly Type ClassType = typeof(RegionArea);

        public static readonly Type GetterType = typeof(IRegionAreaGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegionArea);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.RegionArea";

        public const string Name = "RegionArea";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.RPLI,
                        RecordTypes.RPLD
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(RegionAreaBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionAreaSetterCommon
    {
        public static readonly RegionAreaSetterCommon Instance = new RegionAreaSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRegionArea item)
        {
            ClearPartial();
            item.EdgeFallOff = default;
            item.RegionPointListData = null;
        }
        
        #region Mutagen
        public void RemapLinks(IRegionArea obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRegionArea item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: RegionAreaBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RegionAreaBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RegionAreaCommon
    {
        public static readonly RegionAreaCommon Instance = new RegionAreaCommon();

        public RegionArea.Mask<bool> GetEqualsMask(
            IRegionAreaGetter item,
            IRegionAreaGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionArea.Mask<bool>(false);
            ((RegionAreaCommon)((IRegionAreaGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRegionAreaGetter item,
            IRegionAreaGetter rhs,
            RegionArea.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.EdgeFallOff = item.EdgeFallOff == rhs.EdgeFallOff;
            ret.RegionPointListData = item.RegionPointListData.CollectionEqualsHelper(
                rhs.RegionPointListData,
                (l, r) => l.Equals(r),
                include);
        }
        
        public string ToString(
            IRegionAreaGetter item,
            string? name = null,
            RegionArea.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRegionAreaGetter item,
            FileGeneration fg,
            string? name = null,
            RegionArea.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RegionArea =>");
            }
            else
            {
                fg.AppendLine($"{name} (RegionArea) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRegionAreaGetter item,
            FileGeneration fg,
            RegionArea.Mask<bool>? printMask = null)
        {
            if ((printMask?.EdgeFallOff ?? true)
                && item.EdgeFallOff.TryGet(out var EdgeFallOffItem))
            {
                fg.AppendItem(EdgeFallOffItem, "EdgeFallOff");
            }
            if ((printMask?.RegionPointListData?.Overall ?? true)
                && item.RegionPointListData.TryGet(out var RegionPointListDataItem))
            {
                fg.AppendLine("RegionPointListData =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in RegionPointListDataItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRegionAreaGetter? lhs,
            IRegionAreaGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.EdgeFallOff != rhs.EdgeFallOff) return false;
            if (!lhs.RegionPointListData.SequenceEqualNullable(rhs.RegionPointListData)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IRegionAreaGetter item)
        {
            var hash = new HashCode();
            if (item.EdgeFallOff.TryGet(out var EdgeFallOffitem))
            {
                hash.Add(EdgeFallOffitem);
            }
            hash.Add(item.RegionPointListData);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return RegionArea.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IRegionAreaGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class RegionAreaSetterTranslationCommon
    {
        public static readonly RegionAreaSetterTranslationCommon Instance = new RegionAreaSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRegionArea item,
            IRegionAreaGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)RegionArea_FieldIndex.EdgeFallOff) ?? true))
            {
                item.EdgeFallOff = rhs.EdgeFallOff;
            }
            if ((copyMask?.GetShouldTranslate((int)RegionArea_FieldIndex.RegionPointListData) ?? true))
            {
                errorMask?.PushIndex((int)RegionArea_FieldIndex.RegionPointListData);
                try
                {
                    if ((rhs.RegionPointListData != null))
                    {
                        item.RegionPointListData = 
                            rhs.RegionPointListData
                            .ToExtendedList<P2Float>();
                    }
                    else
                    {
                        item.RegionPointListData = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public RegionArea DeepCopy(
            IRegionAreaGetter item,
            RegionArea.TranslationMask? copyMask = null)
        {
            RegionArea ret = (RegionArea)((RegionAreaCommon)((IRegionAreaGetter)item).CommonInstance()!).GetNew();
            ((RegionAreaSetterTranslationCommon)((IRegionAreaGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public RegionArea DeepCopy(
            IRegionAreaGetter item,
            out RegionArea.ErrorMask errorMask,
            RegionArea.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionArea ret = (RegionArea)((RegionAreaCommon)((IRegionAreaGetter)item).CommonInstance()!).GetNew();
            ((RegionAreaSetterTranslationCommon)((IRegionAreaGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = RegionArea.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public RegionArea DeepCopy(
            IRegionAreaGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RegionArea ret = (RegionArea)((RegionAreaCommon)((IRegionAreaGetter)item).CommonInstance()!).GetNew();
            ((RegionAreaSetterTranslationCommon)((IRegionAreaGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class RegionArea
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionArea_Registration.Instance;
        public static RegionArea_Registration Registration => RegionArea_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RegionAreaCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RegionAreaSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RegionAreaSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRegionAreaGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRegionAreaGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRegionAreaGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RegionAreaBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RegionAreaBinaryWriteTranslation Instance = new RegionAreaBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IRegionAreaGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EdgeFallOff,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.RPLI));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<P2Float>.Instance.Write(
                writer: writer,
                items: item.RegionPointListData,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.RPLD),
                transl: P2FloatBinaryTranslation.Instance.Write);
        }

        public void Write(
            MutagenWriter writer,
            IRegionAreaGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRegionAreaGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RegionAreaBinaryCreateTranslation
    {
        public readonly static RegionAreaBinaryCreateTranslation Instance = new RegionAreaBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IRegionArea item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IRegionArea item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.RPLI:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RegionArea_FieldIndex.EdgeFallOff) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EdgeFallOff = frame.ReadUInt32();
                    return (int)RegionArea_FieldIndex.EdgeFallOff;
                }
                case RecordTypeInts.RPLD:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RegionArea_FieldIndex.RegionPointListData) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RegionPointListData = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<P2Float>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: P2FloatBinaryTranslation.Instance.Parse)
                        .CastExtendedList<P2Float>();
                    return (int)RegionArea_FieldIndex.RegionPointListData;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class RegionAreaBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRegionAreaGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionAreaBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RegionAreaBinaryOverlay :
        BinaryOverlay,
        IRegionAreaGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionArea_Registration.Instance;
        public static RegionArea_Registration Registration => RegionArea_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RegionAreaCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RegionAreaSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRegionAreaGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRegionAreaGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRegionAreaGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RegionAreaBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionAreaBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region EdgeFallOff
        private int? _EdgeFallOffLocation;
        public UInt32? EdgeFallOff => _EdgeFallOffLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EdgeFallOffLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        public IReadOnlyList<P2Float>? RegionPointListData { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RegionAreaBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static RegionAreaBinaryOverlay RegionAreaFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RegionAreaBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RegionAreaBinaryOverlay RegionAreaFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return RegionAreaFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.RPLI:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RegionArea_FieldIndex.EdgeFallOff) return ParseResult.Stop;
                    _EdgeFallOffLocation = (stream.Position - offset);
                    return (int)RegionArea_FieldIndex.EdgeFallOff;
                }
                case RecordTypeInts.RPLD:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RegionArea_FieldIndex.RegionPointListData) return ParseResult.Stop;
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.RegionPointListData = BinaryOverlayList.FactoryByStartIndex<P2Float>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 8,
                        getter: (s, p) => P2FloatBinaryTranslation.Read(s));
                    stream.Position += subLen;
                    return (int)RegionArea_FieldIndex.RegionPointListData;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RegionAreaMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRegionAreaGetter rhs)) return false;
            return ((RegionAreaCommon)((IRegionAreaGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IRegionAreaGetter? obj)
        {
            return ((RegionAreaCommon)((IRegionAreaGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionAreaCommon)((IRegionAreaGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

