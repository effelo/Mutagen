/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Spell :
        ASpell,
        ISpellInternal,
        ILoquiObjectSetter<Spell>,
        IEquatable<ISpellGetter>
    {
        #region Ctor
        protected Spell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ISpellGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ISpellGetter.Name => this.Name;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IKeywordGetter>>? _Keywords;
        public ExtendedList<IFormLink<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IKeywordGetter>>? ISpellGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLink<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region MenuDisplayObject
        public FormLinkNullable<IStaticGetter> MenuDisplayObject { get; set; } = new FormLinkNullable<IStaticGetter>();
        #endregion
        #region EquipmentType
        public FormLinkNullable<IEquipTypeGetter> EquipmentType { get; set; } = new FormLinkNullable<IEquipTypeGetter>();
        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter ISpellGetter.Description => this.Description;
        #endregion
        #region BaseCost
        public UInt32 BaseCost { get; set; } = default;
        #endregion
        #region Flags
        public SpellDataFlag Flags { get; set; } = default;
        #endregion
        #region Type
        public SpellType Type { get; set; } = default;
        #endregion
        #region ChargeTime
        public Single ChargeTime { get; set; } = default;
        #endregion
        #region CastType
        public CastType CastType { get; set; } = default;
        #endregion
        #region TargetType
        public TargetType TargetType { get; set; } = default;
        #endregion
        #region CastDuration
        public Single CastDuration { get; set; } = default;
        #endregion
        #region Range
        public Single Range { get; set; } = default;
        #endregion
        #region HalfCostPerk
        public FormLink<IPerkGetter> HalfCostPerk { get; set; } = new FormLink<IPerkGetter>();
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Effect> _Effects = new ExtendedList<Effect>();
        public ExtendedList<Effect> Effects
        {
            get => this._Effects;
            protected set => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEffectGetter> ISpellGetter.Effects => _Effects;
        #endregion

        #endregion
        #region SPITDataTypeState
        public Spell.SPITDataType SPITDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SpellMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISpellGetter rhs)) return false;
            return ((SpellCommon)((ISpellGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISpellGetter? obj)
        {
            return ((SpellCommon)((ISpellGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SpellCommon)((ISpellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ASpell.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MenuDisplayObject = initialValue;
                this.EquipmentType = initialValue;
                this.Description = initialValue;
                this.BaseCost = initialValue;
                this.Flags = initialValue;
                this.Type = initialValue;
                this.ChargeTime = initialValue;
                this.CastType = initialValue;
                this.TargetType = initialValue;
                this.CastDuration = initialValue;
                this.Range = initialValue;
                this.HalfCostPerk = initialValue;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.SPITDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Name,
                TItem Keywords,
                TItem MenuDisplayObject,
                TItem EquipmentType,
                TItem Description,
                TItem BaseCost,
                TItem Flags,
                TItem Type,
                TItem ChargeTime,
                TItem CastType,
                TItem TargetType,
                TItem CastDuration,
                TItem Range,
                TItem HalfCostPerk,
                TItem Effects,
                TItem SPITDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.MenuDisplayObject = MenuDisplayObject;
                this.EquipmentType = EquipmentType;
                this.Description = Description;
                this.BaseCost = BaseCost;
                this.Flags = Flags;
                this.Type = Type;
                this.ChargeTime = ChargeTime;
                this.CastType = CastType;
                this.TargetType = TargetType;
                this.CastDuration = CastDuration;
                this.Range = Range;
                this.HalfCostPerk = HalfCostPerk;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.SPITDataTypeState = SPITDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem MenuDisplayObject;
            public TItem EquipmentType;
            public TItem Description;
            public TItem BaseCost;
            public TItem Flags;
            public TItem Type;
            public TItem ChargeTime;
            public TItem CastType;
            public TItem TargetType;
            public TItem CastDuration;
            public TItem Range;
            public TItem HalfCostPerk;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>? Effects;
            public TItem SPITDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.MenuDisplayObject, rhs.MenuDisplayObject)) return false;
                if (!object.Equals(this.EquipmentType, rhs.EquipmentType)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.ChargeTime, rhs.ChargeTime)) return false;
                if (!object.Equals(this.CastType, rhs.CastType)) return false;
                if (!object.Equals(this.TargetType, rhs.TargetType)) return false;
                if (!object.Equals(this.CastDuration, rhs.CastDuration)) return false;
                if (!object.Equals(this.Range, rhs.Range)) return false;
                if (!object.Equals(this.HalfCostPerk, rhs.HalfCostPerk)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                if (!object.Equals(this.SPITDataTypeState, rhs.SPITDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Keywords);
                hash.Add(this.MenuDisplayObject);
                hash.Add(this.EquipmentType);
                hash.Add(this.Description);
                hash.Add(this.BaseCost);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.ChargeTime);
                hash.Add(this.CastType);
                hash.Add(this.TargetType);
                hash.Add(this.CastDuration);
                hash.Add(this.Range);
                hash.Add(this.HalfCostPerk);
                hash.Add(this.Effects);
                hash.Add(this.SPITDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.MenuDisplayObject)) return false;
                if (!eval(this.EquipmentType)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.BaseCost)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.ChargeTime)) return false;
                if (!eval(this.CastType)) return false;
                if (!eval(this.TargetType)) return false;
                if (!eval(this.CastDuration)) return false;
                if (!eval(this.Range)) return false;
                if (!eval(this.HalfCostPerk)) return false;
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SPITDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.MenuDisplayObject)) return true;
                if (eval(this.EquipmentType)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.BaseCost)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.ChargeTime)) return true;
                if (eval(this.CastType)) return true;
                if (eval(this.TargetType)) return true;
                if (eval(this.CastDuration)) return true;
                if (eval(this.Range)) return true;
                if (eval(this.HalfCostPerk)) return true;
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SPITDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Spell.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.MenuDisplayObject = eval(this.MenuDisplayObject);
                obj.EquipmentType = eval(this.EquipmentType);
                obj.Description = eval(this.Description);
                obj.BaseCost = eval(this.BaseCost);
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.ChargeTime = eval(this.ChargeTime);
                obj.CastType = eval(this.CastType);
                obj.TargetType = eval(this.TargetType);
                obj.CastDuration = eval(this.CastDuration);
                obj.Range = eval(this.Range);
                obj.HalfCostPerk = eval(this.HalfCostPerk);
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SPITDataTypeState = eval(this.SPITDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Spell.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Spell.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Spell.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.MenuDisplayObject ?? true)
                    {
                        fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                    }
                    if (printMask?.EquipmentType ?? true)
                    {
                        fg.AppendItem(EquipmentType, "EquipmentType");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.BaseCost ?? true)
                    {
                        fg.AppendItem(BaseCost, "BaseCost");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.ChargeTime ?? true)
                    {
                        fg.AppendItem(ChargeTime, "ChargeTime");
                    }
                    if (printMask?.CastType ?? true)
                    {
                        fg.AppendItem(CastType, "CastType");
                    }
                    if (printMask?.TargetType ?? true)
                    {
                        fg.AppendItem(TargetType, "TargetType");
                    }
                    if (printMask?.CastDuration ?? true)
                    {
                        fg.AppendItem(CastDuration, "CastDuration");
                    }
                    if (printMask?.Range ?? true)
                    {
                        fg.AppendItem(Range, "Range");
                    }
                    if (printMask?.HalfCostPerk ?? true)
                    {
                        fg.AppendItem(HalfCostPerk, "HalfCostPerk");
                    }
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects.TryGet(out var EffectsItem))
                    {
                        fg.AppendLine("Effects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.SPITDataTypeState ?? true)
                    {
                        fg.AppendItem(SPITDataTypeState, "SPITDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ASpell.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? MenuDisplayObject;
            public Exception? EquipmentType;
            public Exception? Description;
            public Exception? BaseCost;
            public Exception? Flags;
            public Exception? Type;
            public Exception? ChargeTime;
            public Exception? CastType;
            public Exception? TargetType;
            public Exception? CastDuration;
            public Exception? Range;
            public Exception? HalfCostPerk;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            public Exception? SPITDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Spell_FieldIndex enu = (Spell_FieldIndex)index;
                switch (enu)
                {
                    case Spell_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Spell_FieldIndex.Name:
                        return Name;
                    case Spell_FieldIndex.Keywords:
                        return Keywords;
                    case Spell_FieldIndex.MenuDisplayObject:
                        return MenuDisplayObject;
                    case Spell_FieldIndex.EquipmentType:
                        return EquipmentType;
                    case Spell_FieldIndex.Description:
                        return Description;
                    case Spell_FieldIndex.BaseCost:
                        return BaseCost;
                    case Spell_FieldIndex.Flags:
                        return Flags;
                    case Spell_FieldIndex.Type:
                        return Type;
                    case Spell_FieldIndex.ChargeTime:
                        return ChargeTime;
                    case Spell_FieldIndex.CastType:
                        return CastType;
                    case Spell_FieldIndex.TargetType:
                        return TargetType;
                    case Spell_FieldIndex.CastDuration:
                        return CastDuration;
                    case Spell_FieldIndex.Range:
                        return Range;
                    case Spell_FieldIndex.HalfCostPerk:
                        return HalfCostPerk;
                    case Spell_FieldIndex.Effects:
                        return Effects;
                    case Spell_FieldIndex.SPITDataTypeState:
                        return SPITDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Spell_FieldIndex enu = (Spell_FieldIndex)index;
                switch (enu)
                {
                    case Spell_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Spell_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Spell_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Spell_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = ex;
                        break;
                    case Spell_FieldIndex.EquipmentType:
                        this.EquipmentType = ex;
                        break;
                    case Spell_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Spell_FieldIndex.BaseCost:
                        this.BaseCost = ex;
                        break;
                    case Spell_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Spell_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Spell_FieldIndex.ChargeTime:
                        this.ChargeTime = ex;
                        break;
                    case Spell_FieldIndex.CastType:
                        this.CastType = ex;
                        break;
                    case Spell_FieldIndex.TargetType:
                        this.TargetType = ex;
                        break;
                    case Spell_FieldIndex.CastDuration:
                        this.CastDuration = ex;
                        break;
                    case Spell_FieldIndex.Range:
                        this.Range = ex;
                        break;
                    case Spell_FieldIndex.HalfCostPerk:
                        this.HalfCostPerk = ex;
                        break;
                    case Spell_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    case Spell_FieldIndex.SPITDataTypeState:
                        this.SPITDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Spell_FieldIndex enu = (Spell_FieldIndex)index;
                switch (enu)
                {
                    case Spell_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Spell_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Spell_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.EquipmentType:
                        this.EquipmentType = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.BaseCost:
                        this.BaseCost = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.ChargeTime:
                        this.ChargeTime = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.CastType:
                        this.CastType = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.TargetType:
                        this.TargetType = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.CastDuration:
                        this.CastDuration = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Range:
                        this.Range = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.HalfCostPerk:
                        this.HalfCostPerk = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    case Spell_FieldIndex.SPITDataTypeState:
                        this.SPITDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Keywords != null) return true;
                if (MenuDisplayObject != null) return true;
                if (EquipmentType != null) return true;
                if (Description != null) return true;
                if (BaseCost != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (ChargeTime != null) return true;
                if (CastType != null) return true;
                if (TargetType != null) return true;
                if (CastDuration != null) return true;
                if (Range != null) return true;
                if (HalfCostPerk != null) return true;
                if (Effects != null) return true;
                if (SPITDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                fg.AppendItem(EquipmentType, "EquipmentType");
                fg.AppendItem(Description, "Description");
                fg.AppendItem(BaseCost, "BaseCost");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Type, "Type");
                fg.AppendItem(ChargeTime, "ChargeTime");
                fg.AppendItem(CastType, "CastType");
                fg.AppendItem(TargetType, "TargetType");
                fg.AppendItem(CastDuration, "CastDuration");
                fg.AppendItem(Range, "Range");
                fg.AppendItem(HalfCostPerk, "HalfCostPerk");
                if (Effects.TryGet(out var EffectsItem))
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(SPITDataTypeState, "SPITDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.MenuDisplayObject = this.MenuDisplayObject.Combine(rhs.MenuDisplayObject);
                ret.EquipmentType = this.EquipmentType.Combine(rhs.EquipmentType);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.ChargeTime = this.ChargeTime.Combine(rhs.ChargeTime);
                ret.CastType = this.CastType.Combine(rhs.CastType);
                ret.TargetType = this.TargetType.Combine(rhs.TargetType);
                ret.CastDuration = this.CastDuration.Combine(rhs.CastDuration);
                ret.Range = this.Range.Combine(rhs.Range);
                ret.HalfCostPerk = this.HalfCostPerk.Combine(rhs.HalfCostPerk);
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                ret.SPITDataTypeState = this.SPITDataTypeState.Combine(rhs.SPITDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ASpell.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public bool Keywords;
            public bool MenuDisplayObject;
            public bool EquipmentType;
            public bool Description;
            public bool BaseCost;
            public bool Flags;
            public bool Type;
            public bool ChargeTime;
            public bool CastType;
            public bool TargetType;
            public bool CastDuration;
            public bool Range;
            public bool HalfCostPerk;
            public Effect.TranslationMask? Effects;
            public bool SPITDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.MenuDisplayObject = defaultOn;
                this.EquipmentType = defaultOn;
                this.Description = defaultOn;
                this.BaseCost = defaultOn;
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.ChargeTime = defaultOn;
                this.CastType = defaultOn;
                this.TargetType = defaultOn;
                this.CastDuration = defaultOn;
                this.Range = defaultOn;
                this.HalfCostPerk = defaultOn;
                this.SPITDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Keywords, null));
                ret.Add((MenuDisplayObject, null));
                ret.Add((EquipmentType, null));
                ret.Add((Description, null));
                ret.Add((BaseCost, null));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((ChargeTime, null));
                ret.Add((CastType, null));
                ret.Add((TargetType, null));
                ret.Add((CastDuration, null));
                ret.Add((Range, null));
                ret.Add((HalfCostPerk, null));
                ret.Add((Effects == null ? DefaultOn : !Effects.GetCrystal().CopyNothing, Effects?.GetCrystal()));
                ret.Add((SPITDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Spell_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => SpellCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SpellSetterCommon.Instance.RemapLinks(this, mapping);
        public Spell(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Spell(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Spell(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Spell(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Spell(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum SPITDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SpellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SpellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Spell CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Spell();
            ((SpellSetterCommon)((ISpellGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Spell item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((SpellSetterCommon)((ISpellGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Spell GetNew()
        {
            return new Spell();
        }

    }
    #endregion

    #region Interface
    public partial interface ISpell :
        ISpellGetter,
        IASpell,
        IObjectId,
        IEffectRecord,
        ISpellSpawn,
        ITranslatedNamed,
        IObjectBounded,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<ISpellInternal>,
        IFormLinkContainer
    {
        new ObjectBounds ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new ExtendedList<IFormLink<IKeywordGetter>>? Keywords { get; set; }
        new FormLinkNullable<IStaticGetter> MenuDisplayObject { get; set; }
        new FormLinkNullable<IEquipTypeGetter> EquipmentType { get; set; }
        new TranslatedString Description { get; set; }
        new UInt32 BaseCost { get; set; }
        new SpellDataFlag Flags { get; set; }
        new SpellType Type { get; set; }
        new Single ChargeTime { get; set; }
        new CastType CastType { get; set; }
        new TargetType TargetType { get; set; }
        new Single CastDuration { get; set; }
        new Single Range { get; set; }
        new FormLink<IPerkGetter> HalfCostPerk { get; set; }
        new ExtendedList<Effect> Effects { get; }
        new Spell.SPITDataType SPITDataTypeState { get; set; }
    }

    public partial interface ISpellInternal :
        IASpellInternal,
        ISpell,
        ISpellGetter
    {
    }

    public partial interface ISpellGetter :
        IASpellGetter,
        IObjectIdGetter,
        IEffectRecordGetter,
        ISpellSpawnGetter,
        ITranslatedNamedGetter,
        IObjectBoundedGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<ISpellGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Spell_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        ITranslatedStringGetter? Name { get; }
        IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; }
        FormLinkNullable<IStaticGetter> MenuDisplayObject { get; }
        FormLinkNullable<IEquipTypeGetter> EquipmentType { get; }
        ITranslatedStringGetter Description { get; }
        UInt32 BaseCost { get; }
        SpellDataFlag Flags { get; }
        SpellType Type { get; }
        Single ChargeTime { get; }
        CastType CastType { get; }
        TargetType TargetType { get; }
        Single CastDuration { get; }
        Single Range { get; }
        FormLink<IPerkGetter> HalfCostPerk { get; }
        IReadOnlyList<IEffectGetter> Effects { get; }
        Spell.SPITDataType SPITDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SpellMixIn
    {
        public static void Clear(this ISpellInternal item)
        {
            ((SpellSetterCommon)((ISpellGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Spell.Mask<bool> GetEqualsMask(
            this ISpellGetter item,
            ISpellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SpellCommon)((ISpellGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISpellGetter item,
            string? name = null,
            Spell.Mask<bool>? printMask = null)
        {
            return ((SpellCommon)((ISpellGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISpellGetter item,
            FileGeneration fg,
            string? name = null,
            Spell.Mask<bool>? printMask = null)
        {
            ((SpellCommon)((ISpellGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISpellGetter item,
            ISpellGetter rhs)
        {
            return ((SpellCommon)((ISpellGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISpellInternal lhs,
            ISpellGetter rhs,
            out Spell.ErrorMask errorMask,
            Spell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SpellSetterTranslationCommon)((ISpellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Spell.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISpellInternal lhs,
            ISpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SpellSetterTranslationCommon)((ISpellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Spell DeepCopy(
            this ISpellGetter item,
            Spell.TranslationMask? copyMask = null)
        {
            return ((SpellSetterTranslationCommon)((ISpellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Spell DeepCopy(
            this ISpellGetter item,
            out Spell.ErrorMask errorMask,
            Spell.TranslationMask? copyMask = null)
        {
            return ((SpellSetterTranslationCommon)((ISpellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Spell DeepCopy(
            this ISpellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SpellSetterTranslationCommon)((ISpellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Spell Duplicate(
            this ISpellGetter item,
            FormKey formKey,
            Spell.TranslationMask? copyMask = null)
        {
            return ((SpellCommon)((ISpellGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISpellInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SpellSetterCommon)((ISpellGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Spell_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Name = 7,
        Keywords = 8,
        MenuDisplayObject = 9,
        EquipmentType = 10,
        Description = 11,
        BaseCost = 12,
        Flags = 13,
        Type = 14,
        ChargeTime = 15,
        CastType = 16,
        TargetType = 17,
        CastDuration = 18,
        Range = 19,
        HalfCostPerk = 20,
        Effects = 21,
        SPITDataTypeState = 22,
    }
    #endregion

    #region Registration
    public partial class Spell_Registration : ILoquiRegistration
    {
        public static readonly Spell_Registration Instance = new Spell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 115,
            version: 0);

        public const string GUID = "9bc07114-08cb-4a62-8819-b3edc36ab87e";

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(Spell.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Spell.ErrorMask);

        public static readonly Type ClassType = typeof(Spell);

        public static readonly Type GetterType = typeof(ISpellGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISpell);

        public static readonly Type? InternalSetterType = typeof(ISpellInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Spell";

        public const string Name = "Spell";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SPEL;
        public static readonly Type BinaryWriteTranslation = typeof(SpellBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class SpellSetterCommon : ASpellSetterCommon
    {
        public new static readonly SpellSetterCommon Instance = new SpellSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISpellInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Keywords = null;
            item.MenuDisplayObject = FormLinkNullable<IStaticGetter>.Null;
            item.EquipmentType = FormLinkNullable<IEquipTypeGetter>.Null;
            item.Description.Clear();
            item.BaseCost = default;
            item.Flags = default;
            item.Type = default;
            item.ChargeTime = default;
            item.CastType = default;
            item.TargetType = default;
            item.CastDuration = default;
            item.Range = default;
            item.HalfCostPerk = FormLink<IPerkGetter>.Null;
            item.Effects.Clear();
            item.SPITDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IASpellInternal item)
        {
            Clear(item: (ISpellInternal)item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ISpellInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISpellInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISpell obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.MenuDisplayObject = obj.MenuDisplayObject.Relink(mapping);
            obj.EquipmentType = obj.EquipmentType.Relink(mapping);
            obj.HalfCostPerk = obj.HalfCostPerk.Relink(mapping);
            obj.Effects.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISpellInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ISpellInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: SpellBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SpellBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IASpellInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Spell)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Spell)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Spell)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class SpellCommon : ASpellCommon
    {
        public new static readonly SpellCommon Instance = new SpellCommon();

        public Spell.Mask<bool> GetEqualsMask(
            ISpellGetter item,
            ISpellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Spell.Mask<bool>(false);
            ((SpellCommon)((ISpellGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISpellGetter item,
            ISpellGetter rhs,
            Spell.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.MenuDisplayObject = item.MenuDisplayObject.Equals(rhs.MenuDisplayObject);
            ret.EquipmentType = item.EquipmentType.Equals(rhs.EquipmentType);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.BaseCost = item.BaseCost == rhs.BaseCost;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.ChargeTime = item.ChargeTime.EqualsWithin(rhs.ChargeTime);
            ret.CastType = item.CastType == rhs.CastType;
            ret.TargetType = item.TargetType == rhs.TargetType;
            ret.CastDuration = item.CastDuration.EqualsWithin(rhs.CastDuration);
            ret.Range = item.Range.EqualsWithin(rhs.Range);
            ret.HalfCostPerk = item.HalfCostPerk.Equals(rhs.HalfCostPerk);
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SPITDataTypeState = item.SPITDataTypeState == rhs.SPITDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ISpellGetter item,
            string? name = null,
            Spell.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISpellGetter item,
            FileGeneration fg,
            string? name = null,
            Spell.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Spell =>");
            }
            else
            {
                fg.AppendLine($"{name} (Spell) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISpellGetter item,
            FileGeneration fg,
            Spell.Mask<bool>? printMask = null)
        {
            ASpellCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.MenuDisplayObject ?? true)
            {
                fg.AppendItem(item.MenuDisplayObject.FormKeyNullable, "MenuDisplayObject");
            }
            if (printMask?.EquipmentType ?? true)
            {
                fg.AppendItem(item.EquipmentType.FormKeyNullable, "EquipmentType");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendItem(item.Description, "Description");
            }
            if (printMask?.BaseCost ?? true)
            {
                fg.AppendItem(item.BaseCost, "BaseCost");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if (printMask?.ChargeTime ?? true)
            {
                fg.AppendItem(item.ChargeTime, "ChargeTime");
            }
            if (printMask?.CastType ?? true)
            {
                fg.AppendItem(item.CastType, "CastType");
            }
            if (printMask?.TargetType ?? true)
            {
                fg.AppendItem(item.TargetType, "TargetType");
            }
            if (printMask?.CastDuration ?? true)
            {
                fg.AppendItem(item.CastDuration, "CastDuration");
            }
            if (printMask?.Range ?? true)
            {
                fg.AppendItem(item.Range, "Range");
            }
            if (printMask?.HalfCostPerk ?? true)
            {
                fg.AppendItem(item.HalfCostPerk.FormKey, "HalfCostPerk");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                fg.AppendLine("Effects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Effects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.SPITDataTypeState ?? true)
            {
                fg.AppendItem(item.SPITDataTypeState, "SPITDataTypeState");
            }
        }
        
        public static Spell_FieldIndex ConvertFieldIndex(ASpell_FieldIndex index)
        {
            switch (index)
            {
                case ASpell_FieldIndex.MajorRecordFlagsRaw:
                    return (Spell_FieldIndex)((int)index);
                case ASpell_FieldIndex.FormKey:
                    return (Spell_FieldIndex)((int)index);
                case ASpell_FieldIndex.VersionControl:
                    return (Spell_FieldIndex)((int)index);
                case ASpell_FieldIndex.EditorID:
                    return (Spell_FieldIndex)((int)index);
                case ASpell_FieldIndex.FormVersion:
                    return (Spell_FieldIndex)((int)index);
                case ASpell_FieldIndex.Version2:
                    return (Spell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Spell_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Spell_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Spell_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Spell_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Spell_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Spell_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Spell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Spell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Spell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Spell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Spell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Spell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISpellGetter? lhs,
            ISpellGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IASpellGetter)lhs, (IASpellGetter)rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            if (!lhs.MenuDisplayObject.Equals(rhs.MenuDisplayObject)) return false;
            if (!lhs.EquipmentType.Equals(rhs.EquipmentType)) return false;
            if (!object.Equals(lhs.Description, rhs.Description)) return false;
            if (lhs.BaseCost != rhs.BaseCost) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Type != rhs.Type) return false;
            if (!lhs.ChargeTime.EqualsWithin(rhs.ChargeTime)) return false;
            if (lhs.CastType != rhs.CastType) return false;
            if (lhs.TargetType != rhs.TargetType) return false;
            if (!lhs.CastDuration.EqualsWithin(rhs.CastDuration)) return false;
            if (!lhs.Range.EqualsWithin(rhs.Range)) return false;
            if (!lhs.HalfCostPerk.Equals(rhs.HalfCostPerk)) return false;
            if (!lhs.Effects.SequenceEqualNullable(rhs.Effects)) return false;
            if (lhs.SPITDataTypeState != rhs.SPITDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IASpellGetter? lhs,
            IASpellGetter? rhs)
        {
            return Equals(
                lhs: (ISpellGetter?)lhs,
                rhs: rhs as ISpellGetter);
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISpellGetter?)lhs,
                rhs: rhs as ISpellGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISpellGetter?)lhs,
                rhs: rhs as ISpellGetter);
        }
        
        public virtual int GetHashCode(ISpellGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.MenuDisplayObject);
            hash.Add(item.EquipmentType);
            hash.Add(item.Description);
            hash.Add(item.BaseCost);
            hash.Add(item.Flags);
            hash.Add(item.Type);
            hash.Add(item.ChargeTime);
            hash.Add(item.CastType);
            hash.Add(item.TargetType);
            hash.Add(item.CastDuration);
            hash.Add(item.Range);
            hash.Add(item.HalfCostPerk);
            hash.Add(item.Effects);
            hash.Add(item.SPITDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IASpellGetter item)
        {
            return GetHashCode(item: (ISpellGetter)item);
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ISpellGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISpellGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Spell.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ISpellGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.MenuDisplayObject.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.MenuDisplayObject);
            }
            if (obj.EquipmentType.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.EquipmentType);
            }
            yield return FormLinkInformation.Factory(obj.HalfCostPerk);
            foreach (var item in obj.Effects.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public Spell Duplicate(
            ISpellGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Spell(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override ASpell Duplicate(
            IASpellGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISpell)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISpell)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISpell)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class SpellSetterTranslationCommon : ASpellSetterTranslationCommon
    {
        public new static readonly SpellSetterTranslationCommon Instance = new SpellSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISpellInternal item,
            ISpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISpell item,
            ISpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IASpell)item,
                (IASpellGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Spell_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Spell_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Spell_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.MenuDisplayObject) ?? true))
            {
                item.MenuDisplayObject = new FormLinkNullable<IStaticGetter>(rhs.MenuDisplayObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.EquipmentType) ?? true))
            {
                item.EquipmentType = new FormLinkNullable<IEquipTypeGetter>(rhs.EquipmentType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.BaseCost) ?? true))
            {
                item.BaseCost = rhs.BaseCost;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.ChargeTime) ?? true))
            {
                item.ChargeTime = rhs.ChargeTime;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.CastType) ?? true))
            {
                item.CastType = rhs.CastType;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.TargetType) ?? true))
            {
                item.TargetType = rhs.TargetType;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.CastDuration) ?? true))
            {
                item.CastDuration = rhs.CastDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Range) ?? true))
            {
                item.Range = rhs.Range;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.HalfCostPerk) ?? true))
            {
                item.HalfCostPerk = new FormLink<IPerkGetter>(rhs.HalfCostPerk.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)Spell_FieldIndex.Effects);
                try
                {
                    item.Effects.SetTo(
                        rhs.Effects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.SPITDataTypeState) ?? true))
            {
                item.SPITDataTypeState = rhs.SPITDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IASpellInternal item,
            IASpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpellInternal)item,
                rhs: (ISpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IASpell item,
            IASpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpell)item,
                rhs: (ISpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpellInternal)item,
                rhs: (ISpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpell)item,
                rhs: (ISpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpellInternal)item,
                rhs: (ISpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpell)item,
                rhs: (ISpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Spell DeepCopy(
            ISpellGetter item,
            Spell.TranslationMask? copyMask = null)
        {
            Spell ret = (Spell)((SpellCommon)((ISpellGetter)item).CommonInstance()!).GetNew();
            ((SpellSetterTranslationCommon)((ISpellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Spell DeepCopy(
            ISpellGetter item,
            out Spell.ErrorMask errorMask,
            Spell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Spell ret = (Spell)((SpellCommon)((ISpellGetter)item).CommonInstance()!).GetNew();
            ((SpellSetterTranslationCommon)((ISpellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Spell.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Spell DeepCopy(
            ISpellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Spell ret = (Spell)((SpellCommon)((ISpellGetter)item).CommonInstance()!).GetNew();
            ((SpellSetterTranslationCommon)((ISpellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Spell
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Spell_Registration.Instance;
        public new static Spell_Registration Registration => Spell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SpellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SpellSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SpellSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SpellBinaryWriteTranslation :
        ASpellBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SpellBinaryWriteTranslation Instance = new SpellBinaryWriteTranslation();

        public static void WriteEmbedded(
            ISpellGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ISpellGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLink<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MenuDisplayObject,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MDOB));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EquipmentType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ETYP));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.SPIT)))
            {
                writer.Write(item.BaseCost);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<SpellDataFlag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<SpellType>.Instance.Write(
                    writer,
                    item.Type,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ChargeTime);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<CastType>.Instance.Write(
                    writer,
                    item.CastType,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<TargetType>.Instance.Write(
                    writer,
                    item.TargetType,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CastDuration);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Range);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HalfCostPerk);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ISpellGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.SPEL),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISpellGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IASpellGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISpellGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISpellGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISpellGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SpellBinaryCreateTranslation : ASpellBinaryCreateTranslation
    {
        public new readonly static SpellBinaryCreateTranslation Instance = new SpellBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SPEL;
        public static void FillBinaryStructs(
            ISpellInternal item,
            MutagenFrame frame)
        {
            ASpellBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ISpellInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Spell_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Spell_FieldIndex.Name;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.Parse(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<IKeywordGetter>>();
                    return (int)Spell_FieldIndex.Keywords;
                }
                case RecordTypeInts.MDOB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MenuDisplayObject = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Spell_FieldIndex.MenuDisplayObject;
                }
                case RecordTypeInts.ETYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipmentType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Spell_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Spell_FieldIndex.Description;
                }
                case RecordTypeInts.SPIT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.BaseCost = dataFrame.ReadUInt32();
                    item.Flags = EnumBinaryTranslation<SpellDataFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Type = EnumBinaryTranslation<SpellType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ChargeTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.CastType = EnumBinaryTranslation<CastType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.TargetType = EnumBinaryTranslation<TargetType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.CastDuration = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Range = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HalfCostPerk = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    return (int)Spell_FieldIndex.HalfCostPerk;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                {
                    item.Effects.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Effect_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: Effect.TryCreateFromBinary));
                    return (int)Spell_FieldIndex.Effects;
                }
                default:
                    return ASpellBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SpellBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SpellBinaryOverlay :
        ASpellBinaryOverlay,
        ISpellGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Spell_Registration.Instance;
        public new static Spell_Registration Registration => Spell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SpellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SpellSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => SpellCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SpellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SpellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region MenuDisplayObject
        private int? _MenuDisplayObjectLocation;
        public FormLinkNullable<IStaticGetter> MenuDisplayObject => _MenuDisplayObjectLocation.HasValue ? new FormLinkNullable<IStaticGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MenuDisplayObjectLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IStaticGetter>.Null;
        #endregion
        #region EquipmentType
        private int? _EquipmentTypeLocation;
        public FormLinkNullable<IEquipTypeGetter> EquipmentType => _EquipmentTypeLocation.HasValue ? new FormLinkNullable<IEquipTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EquipmentTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEquipTypeGetter>.Null;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : TranslatedString.Empty;
        #endregion
        private int? _SPITLocation;
        public Spell.SPITDataType SPITDataTypeState { get; private set; }
        #region BaseCost
        private int _BaseCostLocation => _SPITLocation!.Value;
        private bool _BaseCost_IsSet => _SPITLocation.HasValue;
        public UInt32 BaseCost => _BaseCost_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_BaseCostLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _SPITLocation!.Value + 0x4;
        private bool _Flags_IsSet => _SPITLocation.HasValue;
        public SpellDataFlag Flags => _Flags_IsSet ? (SpellDataFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region Type
        private int _TypeLocation => _SPITLocation!.Value + 0x8;
        private bool _Type_IsSet => _SPITLocation.HasValue;
        public SpellType Type => _Type_IsSet ? (SpellType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TypeLocation, 0x4)) : default;
        #endregion
        #region ChargeTime
        private int _ChargeTimeLocation => _SPITLocation!.Value + 0xC;
        private bool _ChargeTime_IsSet => _SPITLocation.HasValue;
        public Single ChargeTime => _ChargeTime_IsSet ? _data.Slice(_ChargeTimeLocation, 4).Float() : default;
        #endregion
        #region CastType
        private int _CastTypeLocation => _SPITLocation!.Value + 0x10;
        private bool _CastType_IsSet => _SPITLocation.HasValue;
        public CastType CastType => _CastType_IsSet ? (CastType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_CastTypeLocation, 0x4)) : default;
        #endregion
        #region TargetType
        private int _TargetTypeLocation => _SPITLocation!.Value + 0x14;
        private bool _TargetType_IsSet => _SPITLocation.HasValue;
        public TargetType TargetType => _TargetType_IsSet ? (TargetType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TargetTypeLocation, 0x4)) : default;
        #endregion
        #region CastDuration
        private int _CastDurationLocation => _SPITLocation!.Value + 0x18;
        private bool _CastDuration_IsSet => _SPITLocation.HasValue;
        public Single CastDuration => _CastDuration_IsSet ? _data.Slice(_CastDurationLocation, 4).Float() : default;
        #endregion
        #region Range
        private int _RangeLocation => _SPITLocation!.Value + 0x1C;
        private bool _Range_IsSet => _SPITLocation.HasValue;
        public Single Range => _Range_IsSet ? _data.Slice(_RangeLocation, 4).Float() : default;
        #endregion
        #region HalfCostPerk
        private int _HalfCostPerkLocation => _SPITLocation!.Value + 0x20;
        private bool _HalfCostPerk_IsSet => _SPITLocation.HasValue;
        public FormLink<IPerkGetter> HalfCostPerk => _HalfCostPerk_IsSet ? new FormLink<IPerkGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_HalfCostPerkLocation, 0x4)))) : FormLink<IPerkGetter>.Null;
        #endregion
        public IReadOnlyList<IEffectGetter> Effects { get; private set; } = ListExt.Empty<EffectBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SpellBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static SpellBinaryOverlay SpellFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new SpellBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static SpellBinaryOverlay SpellFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return SpellFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Spell_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Spell_FieldIndex.Name;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLink<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Spell_FieldIndex.Keywords;
                }
                case RecordTypeInts.MDOB:
                {
                    _MenuDisplayObjectLocation = (stream.Position - offset);
                    return (int)Spell_FieldIndex.MenuDisplayObject;
                }
                case RecordTypeInts.ETYP:
                {
                    _EquipmentTypeLocation = (stream.Position - offset);
                    return (int)Spell_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Spell_FieldIndex.Description;
                }
                case RecordTypeInts.SPIT:
                {
                    _SPITLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Spell_FieldIndex.HalfCostPerk;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<EffectBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: Effect_Registration.TriggeringRecordTypes,
                        factory:  EffectBinaryOverlay.EffectFactory);
                    return (int)Spell_FieldIndex.Effects;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SpellMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISpellGetter rhs)) return false;
            return ((SpellCommon)((ISpellGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISpellGetter? obj)
        {
            return ((SpellCommon)((ISpellGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SpellCommon)((ISpellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

