/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class LayerHeader :
        ILayerHeader,
        ILoquiObjectSetter<LayerHeader>,
        IEquatable<ILayerHeaderGetter>
    {
        #region Ctor
        public LayerHeader()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Texture
        public FormLink<ILandscapeTextureGetter> Texture { get; set; } = new FormLink<ILandscapeTextureGetter>();
        #endregion
        #region Quadrant
        public Quadrant Quadrant { get; set; } = default;
        #endregion
        #region LayerNumber
        public UInt16 LayerNumber { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LayerHeaderMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILayerHeaderGetter rhs)) return false;
            return ((LayerHeaderCommon)((ILayerHeaderGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILayerHeaderGetter? obj)
        {
            return ((LayerHeaderCommon)((ILayerHeaderGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LayerHeaderCommon)((ILayerHeaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Texture = initialValue;
                this.Quadrant = initialValue;
                this.LayerNumber = initialValue;
            }

            public Mask(
                TItem Texture,
                TItem Quadrant,
                TItem LayerNumber)
            {
                this.Texture = Texture;
                this.Quadrant = Quadrant;
                this.LayerNumber = LayerNumber;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Texture;
            public TItem Quadrant;
            public TItem LayerNumber;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Texture, rhs.Texture)) return false;
                if (!object.Equals(this.Quadrant, rhs.Quadrant)) return false;
                if (!object.Equals(this.LayerNumber, rhs.LayerNumber)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Texture);
                hash.Add(this.Quadrant);
                hash.Add(this.LayerNumber);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Texture)) return false;
                if (!eval(this.Quadrant)) return false;
                if (!eval(this.LayerNumber)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Texture)) return true;
                if (eval(this.Quadrant)) return true;
                if (eval(this.LayerNumber)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LayerHeader.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Texture = eval(this.Texture);
                obj.Quadrant = eval(this.Quadrant);
                obj.LayerNumber = eval(this.LayerNumber);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LayerHeader.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LayerHeader.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LayerHeader.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Texture ?? true)
                    {
                        fg.AppendItem(Texture, "Texture");
                    }
                    if (printMask?.Quadrant ?? true)
                    {
                        fg.AppendItem(Quadrant, "Quadrant");
                    }
                    if (printMask?.LayerNumber ?? true)
                    {
                        fg.AppendItem(LayerNumber, "LayerNumber");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Texture;
            public Exception? Quadrant;
            public Exception? LayerNumber;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LayerHeader_FieldIndex enu = (LayerHeader_FieldIndex)index;
                switch (enu)
                {
                    case LayerHeader_FieldIndex.Texture:
                        return Texture;
                    case LayerHeader_FieldIndex.Quadrant:
                        return Quadrant;
                    case LayerHeader_FieldIndex.LayerNumber:
                        return LayerNumber;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LayerHeader_FieldIndex enu = (LayerHeader_FieldIndex)index;
                switch (enu)
                {
                    case LayerHeader_FieldIndex.Texture:
                        this.Texture = ex;
                        break;
                    case LayerHeader_FieldIndex.Quadrant:
                        this.Quadrant = ex;
                        break;
                    case LayerHeader_FieldIndex.LayerNumber:
                        this.LayerNumber = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LayerHeader_FieldIndex enu = (LayerHeader_FieldIndex)index;
                switch (enu)
                {
                    case LayerHeader_FieldIndex.Texture:
                        this.Texture = (Exception?)obj;
                        break;
                    case LayerHeader_FieldIndex.Quadrant:
                        this.Quadrant = (Exception?)obj;
                        break;
                    case LayerHeader_FieldIndex.LayerNumber:
                        this.LayerNumber = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Texture != null) return true;
                if (Quadrant != null) return true;
                if (LayerNumber != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Texture, "Texture");
                fg.AppendItem(Quadrant, "Quadrant");
                fg.AppendItem(LayerNumber, "LayerNumber");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Texture = this.Texture.Combine(rhs.Texture);
                ret.Quadrant = this.Quadrant.Combine(rhs.Quadrant);
                ret.LayerNumber = this.LayerNumber.Combine(rhs.LayerNumber);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Texture;
            public bool Quadrant;
            public bool LayerNumber;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Texture = defaultOn;
                this.Quadrant = defaultOn;
                this.LayerNumber = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Texture, null));
                ret.Add((Quadrant, null));
                ret.Add((LayerNumber, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = LayerHeader_Registration.TriggeringRecordType;
        public IEnumerable<FormLinkInformation> ContainedFormLinks => LayerHeaderCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LayerHeaderSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LayerHeaderBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LayerHeaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static LayerHeader CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LayerHeader();
            ((LayerHeaderSetterCommon)((ILayerHeaderGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LayerHeader item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LayerHeaderSetterCommon)((ILayerHeaderGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LayerHeader GetNew()
        {
            return new LayerHeader();
        }

    }
    #endregion

    #region Interface
    public partial interface ILayerHeader :
        ILayerHeaderGetter,
        ILoquiObjectSetter<ILayerHeader>,
        IFormLinkContainer
    {
        new FormLink<ILandscapeTextureGetter> Texture { get; set; }
        new Quadrant Quadrant { get; set; }
        new UInt16 LayerNumber { get; set; }
    }

    public partial interface ILayerHeaderGetter :
        ILoquiObject,
        ILoquiObject<ILayerHeaderGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => LayerHeader_Registration.Instance;
        FormLink<ILandscapeTextureGetter> Texture { get; }
        Quadrant Quadrant { get; }
        UInt16 LayerNumber { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LayerHeaderMixIn
    {
        public static void Clear(this ILayerHeader item)
        {
            ((LayerHeaderSetterCommon)((ILayerHeaderGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LayerHeader.Mask<bool> GetEqualsMask(
            this ILayerHeaderGetter item,
            ILayerHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LayerHeaderCommon)((ILayerHeaderGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILayerHeaderGetter item,
            string? name = null,
            LayerHeader.Mask<bool>? printMask = null)
        {
            return ((LayerHeaderCommon)((ILayerHeaderGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILayerHeaderGetter item,
            FileGeneration fg,
            string? name = null,
            LayerHeader.Mask<bool>? printMask = null)
        {
            ((LayerHeaderCommon)((ILayerHeaderGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILayerHeaderGetter item,
            ILayerHeaderGetter rhs)
        {
            return ((LayerHeaderCommon)((ILayerHeaderGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILayerHeader lhs,
            ILayerHeaderGetter rhs)
        {
            ((LayerHeaderSetterTranslationCommon)((ILayerHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILayerHeader lhs,
            ILayerHeaderGetter rhs,
            LayerHeader.TranslationMask? copyMask = null)
        {
            ((LayerHeaderSetterTranslationCommon)((ILayerHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILayerHeader lhs,
            ILayerHeaderGetter rhs,
            out LayerHeader.ErrorMask errorMask,
            LayerHeader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LayerHeaderSetterTranslationCommon)((ILayerHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LayerHeader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILayerHeader lhs,
            ILayerHeaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LayerHeaderSetterTranslationCommon)((ILayerHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LayerHeader DeepCopy(
            this ILayerHeaderGetter item,
            LayerHeader.TranslationMask? copyMask = null)
        {
            return ((LayerHeaderSetterTranslationCommon)((ILayerHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LayerHeader DeepCopy(
            this ILayerHeaderGetter item,
            out LayerHeader.ErrorMask errorMask,
            LayerHeader.TranslationMask? copyMask = null)
        {
            return ((LayerHeaderSetterTranslationCommon)((ILayerHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LayerHeader DeepCopy(
            this ILayerHeaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LayerHeaderSetterTranslationCommon)((ILayerHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILayerHeader item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LayerHeaderSetterCommon)((ILayerHeaderGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum LayerHeader_FieldIndex
    {
        Texture = 0,
        Quadrant = 1,
        LayerNumber = 2,
    }
    #endregion

    #region Registration
    public partial class LayerHeader_Registration : ILoquiRegistration
    {
        public static readonly LayerHeader_Registration Instance = new LayerHeader_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 348,
            version: 0);

        public const string GUID = "6d96352d-8353-4eb9-b1dd-658a76b55abf";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(LayerHeader.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LayerHeader.ErrorMask);

        public static readonly Type ClassType = typeof(LayerHeader);

        public static readonly Type GetterType = typeof(ILayerHeaderGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILayerHeader);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.LayerHeader";

        public const string Name = "LayerHeader";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BTXT;
        public static readonly Type BinaryWriteTranslation = typeof(LayerHeaderBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class LayerHeaderSetterCommon
    {
        public static readonly LayerHeaderSetterCommon Instance = new LayerHeaderSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILayerHeader item)
        {
            ClearPartial();
            item.Texture = FormLink<ILandscapeTextureGetter>.Null;
            item.Quadrant = default;
            item.LayerNumber = default;
        }
        
        #region Mutagen
        public void RemapLinks(ILayerHeader obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Texture = obj.Texture.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILayerHeader item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.BTXT)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LayerHeaderBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class LayerHeaderCommon
    {
        public static readonly LayerHeaderCommon Instance = new LayerHeaderCommon();

        public LayerHeader.Mask<bool> GetEqualsMask(
            ILayerHeaderGetter item,
            ILayerHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LayerHeader.Mask<bool>(false);
            ((LayerHeaderCommon)((ILayerHeaderGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILayerHeaderGetter item,
            ILayerHeaderGetter rhs,
            LayerHeader.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Texture = item.Texture.Equals(rhs.Texture);
            ret.Quadrant = item.Quadrant == rhs.Quadrant;
            ret.LayerNumber = item.LayerNumber == rhs.LayerNumber;
        }
        
        public string ToString(
            ILayerHeaderGetter item,
            string? name = null,
            LayerHeader.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILayerHeaderGetter item,
            FileGeneration fg,
            string? name = null,
            LayerHeader.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LayerHeader =>");
            }
            else
            {
                fg.AppendLine($"{name} (LayerHeader) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILayerHeaderGetter item,
            FileGeneration fg,
            LayerHeader.Mask<bool>? printMask = null)
        {
            if (printMask?.Texture ?? true)
            {
                fg.AppendItem(item.Texture.FormKey, "Texture");
            }
            if (printMask?.Quadrant ?? true)
            {
                fg.AppendItem(item.Quadrant, "Quadrant");
            }
            if (printMask?.LayerNumber ?? true)
            {
                fg.AppendItem(item.LayerNumber, "LayerNumber");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILayerHeaderGetter? lhs,
            ILayerHeaderGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Texture.Equals(rhs.Texture)) return false;
            if (lhs.Quadrant != rhs.Quadrant) return false;
            if (lhs.LayerNumber != rhs.LayerNumber) return false;
            return true;
        }
        
        public virtual int GetHashCode(ILayerHeaderGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Texture);
            hash.Add(item.Quadrant);
            hash.Add(item.LayerNumber);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LayerHeader.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ILayerHeaderGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Texture);
            yield break;
        }
        
        #endregion
        
    }
    public partial class LayerHeaderSetterTranslationCommon
    {
        public static readonly LayerHeaderSetterTranslationCommon Instance = new LayerHeaderSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILayerHeader item,
            ILayerHeaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)LayerHeader_FieldIndex.Texture) ?? true))
            {
                item.Texture = new FormLink<ILandscapeTextureGetter>(rhs.Texture.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)LayerHeader_FieldIndex.Quadrant) ?? true))
            {
                item.Quadrant = rhs.Quadrant;
            }
            if ((copyMask?.GetShouldTranslate((int)LayerHeader_FieldIndex.LayerNumber) ?? true))
            {
                item.LayerNumber = rhs.LayerNumber;
            }
        }
        
        #endregion
        
        public LayerHeader DeepCopy(
            ILayerHeaderGetter item,
            LayerHeader.TranslationMask? copyMask = null)
        {
            LayerHeader ret = (LayerHeader)((LayerHeaderCommon)((ILayerHeaderGetter)item).CommonInstance()!).GetNew();
            ((LayerHeaderSetterTranslationCommon)((ILayerHeaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LayerHeader DeepCopy(
            ILayerHeaderGetter item,
            out LayerHeader.ErrorMask errorMask,
            LayerHeader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LayerHeader ret = (LayerHeader)((LayerHeaderCommon)((ILayerHeaderGetter)item).CommonInstance()!).GetNew();
            ((LayerHeaderSetterTranslationCommon)((ILayerHeaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LayerHeader.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LayerHeader DeepCopy(
            ILayerHeaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LayerHeader ret = (LayerHeader)((LayerHeaderCommon)((ILayerHeaderGetter)item).CommonInstance()!).GetNew();
            ((LayerHeaderSetterTranslationCommon)((ILayerHeaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class LayerHeader
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LayerHeader_Registration.Instance;
        public static LayerHeader_Registration Registration => LayerHeader_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LayerHeaderCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LayerHeaderSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LayerHeaderSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILayerHeaderGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILayerHeaderGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILayerHeaderGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LayerHeaderBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LayerHeaderBinaryWriteTranslation Instance = new LayerHeaderBinaryWriteTranslation();

        public static void WriteEmbedded(
            ILayerHeaderGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Texture);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Quadrant>.Instance.Write(
                writer,
                item.Quadrant,
                length: 2);
            writer.Write(item.LayerNumber);
        }

        public void Write(
            MutagenWriter writer,
            ILayerHeaderGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.BTXT),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILayerHeaderGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LayerHeaderBinaryCreateTranslation
    {
        public readonly static LayerHeaderBinaryCreateTranslation Instance = new LayerHeaderBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILayerHeader item,
            MutagenFrame frame)
        {
            item.Texture = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.Quadrant = EnumBinaryTranslation<Quadrant>.Instance.Parse(frame: frame.SpawnWithLength(2));
            item.LayerNumber = frame.ReadUInt16();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class LayerHeaderBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILayerHeaderGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LayerHeaderBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LayerHeaderBinaryOverlay :
        BinaryOverlay,
        ILayerHeaderGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LayerHeader_Registration.Instance;
        public static LayerHeader_Registration Registration => LayerHeader_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LayerHeaderCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LayerHeaderSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILayerHeaderGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILayerHeaderGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILayerHeaderGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => LayerHeaderCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LayerHeaderBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LayerHeaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public FormLink<ILandscapeTextureGetter> Texture => new FormLink<ILandscapeTextureGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x0, 0x4))));
        public Quadrant Quadrant => (Quadrant)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(0x4, 0x2));
        public UInt16 LayerNumber => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x6, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LayerHeaderBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LayerHeaderBinaryOverlay LayerHeaderFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LayerHeaderBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x8 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static LayerHeaderBinaryOverlay LayerHeaderFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LayerHeaderFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LayerHeaderMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILayerHeaderGetter rhs)) return false;
            return ((LayerHeaderCommon)((ILayerHeaderGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILayerHeaderGetter? obj)
        {
            return ((LayerHeaderCommon)((ILayerHeaderGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LayerHeaderCommon)((ILayerHeaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

