/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Scroll :
        Fallout4MajorRecord,
        IScrollInternal,
        ILoquiObjectSetter<Scroll>,
        IEquatable<IScrollGetter>
    {
        #region Ctor
        protected Scroll()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IScrollGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IScrollGetter.Name => this.Name;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IKeywordGetter>>? _Keywords;
        public ExtendedList<IFormLink<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IKeywordGetter>>? IScrollGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLink<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region MenuDisplayObject
        public FormLinkNullable<IStaticGetter> MenuDisplayObject { get; set; } = new FormLinkNullable<IStaticGetter>();
        #endregion
        #region EquipmentType
        public FormLinkNullable<IEquipTypeGetter> EquipmentType { get; set; } = new FormLinkNullable<IEquipTypeGetter>();
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IScrollGetter.Description => this.Description;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IScrollGetter.Model => this.Model;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IScrollGetter.Destructible => this.Destructible;
        #endregion
        #region PickUpSound
        public FormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region PutDownSound
        public FormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region Value
        public UInt32 Value { get; set; } = default;
        #endregion
        #region Weight
        public Single Weight { get; set; } = default;
        #endregion
        #region BaseCost
        public UInt32 BaseCost { get; set; } = default;
        #endregion
        #region Flags
        public SpellDataFlag Flags { get; set; } = default;
        #endregion
        #region Type
        public SpellType Type { get; set; } = default;
        #endregion
        #region ChargeTime
        public Single ChargeTime { get; set; } = default;
        #endregion
        #region CastType
        public CastType CastType { get; set; } = default;
        #endregion
        #region TargetType
        public TargetType TargetType { get; set; } = default;
        #endregion
        #region CastDuration
        public Single CastDuration { get; set; } = default;
        #endregion
        #region Range
        public Single Range { get; set; } = default;
        #endregion
        #region HalfCostPerk
        public FormLink<IPerkGetter> HalfCostPerk { get; set; } = new FormLink<IPerkGetter>();
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Effect> _Effects = new ExtendedList<Effect>();
        public ExtendedList<Effect> Effects
        {
            get => this._Effects;
            protected set => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEffectGetter> IScrollGetter.Effects => _Effects;
        #endregion

        #endregion
        #region DATADataTypeState
        public Scroll.DATADataType DATADataTypeState { get; set; } = default;
        #endregion
        #region SPITDataTypeState
        public Scroll.SPITDataType SPITDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScrollMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScrollGetter rhs)) return false;
            return ((ScrollCommon)((IScrollGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IScrollGetter? obj)
        {
            return ((ScrollCommon)((IScrollGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScrollCommon)((IScrollGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MenuDisplayObject = initialValue;
                this.EquipmentType = initialValue;
                this.Description = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.PickUpSound = initialValue;
                this.PutDownSound = initialValue;
                this.Value = initialValue;
                this.Weight = initialValue;
                this.BaseCost = initialValue;
                this.Flags = initialValue;
                this.Type = initialValue;
                this.ChargeTime = initialValue;
                this.CastType = initialValue;
                this.TargetType = initialValue;
                this.CastDuration = initialValue;
                this.Range = initialValue;
                this.HalfCostPerk = initialValue;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.DATADataTypeState = initialValue;
                this.SPITDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Name,
                TItem Keywords,
                TItem MenuDisplayObject,
                TItem EquipmentType,
                TItem Description,
                TItem Model,
                TItem Destructible,
                TItem PickUpSound,
                TItem PutDownSound,
                TItem Value,
                TItem Weight,
                TItem BaseCost,
                TItem Flags,
                TItem Type,
                TItem ChargeTime,
                TItem CastType,
                TItem TargetType,
                TItem CastDuration,
                TItem Range,
                TItem HalfCostPerk,
                TItem Effects,
                TItem DATADataTypeState,
                TItem SPITDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.MenuDisplayObject = MenuDisplayObject;
                this.EquipmentType = EquipmentType;
                this.Description = Description;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.PickUpSound = PickUpSound;
                this.PutDownSound = PutDownSound;
                this.Value = Value;
                this.Weight = Weight;
                this.BaseCost = BaseCost;
                this.Flags = Flags;
                this.Type = Type;
                this.ChargeTime = ChargeTime;
                this.CastType = CastType;
                this.TargetType = TargetType;
                this.CastDuration = CastDuration;
                this.Range = Range;
                this.HalfCostPerk = HalfCostPerk;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.DATADataTypeState = DATADataTypeState;
                this.SPITDataTypeState = SPITDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem MenuDisplayObject;
            public TItem EquipmentType;
            public TItem Description;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem PickUpSound;
            public TItem PutDownSound;
            public TItem Value;
            public TItem Weight;
            public TItem BaseCost;
            public TItem Flags;
            public TItem Type;
            public TItem ChargeTime;
            public TItem CastType;
            public TItem TargetType;
            public TItem CastDuration;
            public TItem Range;
            public TItem HalfCostPerk;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>? Effects;
            public TItem DATADataTypeState;
            public TItem SPITDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.MenuDisplayObject, rhs.MenuDisplayObject)) return false;
                if (!object.Equals(this.EquipmentType, rhs.EquipmentType)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.PickUpSound, rhs.PickUpSound)) return false;
                if (!object.Equals(this.PutDownSound, rhs.PutDownSound)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.ChargeTime, rhs.ChargeTime)) return false;
                if (!object.Equals(this.CastType, rhs.CastType)) return false;
                if (!object.Equals(this.TargetType, rhs.TargetType)) return false;
                if (!object.Equals(this.CastDuration, rhs.CastDuration)) return false;
                if (!object.Equals(this.Range, rhs.Range)) return false;
                if (!object.Equals(this.HalfCostPerk, rhs.HalfCostPerk)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                if (!object.Equals(this.SPITDataTypeState, rhs.SPITDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Keywords);
                hash.Add(this.MenuDisplayObject);
                hash.Add(this.EquipmentType);
                hash.Add(this.Description);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.PickUpSound);
                hash.Add(this.PutDownSound);
                hash.Add(this.Value);
                hash.Add(this.Weight);
                hash.Add(this.BaseCost);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.ChargeTime);
                hash.Add(this.CastType);
                hash.Add(this.TargetType);
                hash.Add(this.CastDuration);
                hash.Add(this.Range);
                hash.Add(this.HalfCostPerk);
                hash.Add(this.Effects);
                hash.Add(this.DATADataTypeState);
                hash.Add(this.SPITDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.MenuDisplayObject)) return false;
                if (!eval(this.EquipmentType)) return false;
                if (!eval(this.Description)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.PickUpSound)) return false;
                if (!eval(this.PutDownSound)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.BaseCost)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.ChargeTime)) return false;
                if (!eval(this.CastType)) return false;
                if (!eval(this.TargetType)) return false;
                if (!eval(this.CastDuration)) return false;
                if (!eval(this.Range)) return false;
                if (!eval(this.HalfCostPerk)) return false;
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DATADataTypeState)) return false;
                if (!eval(this.SPITDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.MenuDisplayObject)) return true;
                if (eval(this.EquipmentType)) return true;
                if (eval(this.Description)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.PickUpSound)) return true;
                if (eval(this.PutDownSound)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.BaseCost)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.ChargeTime)) return true;
                if (eval(this.CastType)) return true;
                if (eval(this.TargetType)) return true;
                if (eval(this.CastDuration)) return true;
                if (eval(this.Range)) return true;
                if (eval(this.HalfCostPerk)) return true;
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DATADataTypeState)) return true;
                if (eval(this.SPITDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Scroll.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.MenuDisplayObject = eval(this.MenuDisplayObject);
                obj.EquipmentType = eval(this.EquipmentType);
                obj.Description = eval(this.Description);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.PickUpSound = eval(this.PickUpSound);
                obj.PutDownSound = eval(this.PutDownSound);
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
                obj.BaseCost = eval(this.BaseCost);
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.ChargeTime = eval(this.ChargeTime);
                obj.CastType = eval(this.CastType);
                obj.TargetType = eval(this.TargetType);
                obj.CastDuration = eval(this.CastDuration);
                obj.Range = eval(this.Range);
                obj.HalfCostPerk = eval(this.HalfCostPerk);
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DATADataTypeState = eval(this.DATADataTypeState);
                obj.SPITDataTypeState = eval(this.SPITDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Scroll.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Scroll.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Scroll.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.MenuDisplayObject ?? true)
                    {
                        fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                    }
                    if (printMask?.EquipmentType ?? true)
                    {
                        fg.AppendItem(EquipmentType, "EquipmentType");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.PickUpSound ?? true)
                    {
                        fg.AppendItem(PickUpSound, "PickUpSound");
                    }
                    if (printMask?.PutDownSound ?? true)
                    {
                        fg.AppendItem(PutDownSound, "PutDownSound");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.BaseCost ?? true)
                    {
                        fg.AppendItem(BaseCost, "BaseCost");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.ChargeTime ?? true)
                    {
                        fg.AppendItem(ChargeTime, "ChargeTime");
                    }
                    if (printMask?.CastType ?? true)
                    {
                        fg.AppendItem(CastType, "CastType");
                    }
                    if (printMask?.TargetType ?? true)
                    {
                        fg.AppendItem(TargetType, "TargetType");
                    }
                    if (printMask?.CastDuration ?? true)
                    {
                        fg.AppendItem(CastDuration, "CastDuration");
                    }
                    if (printMask?.Range ?? true)
                    {
                        fg.AppendItem(Range, "Range");
                    }
                    if (printMask?.HalfCostPerk ?? true)
                    {
                        fg.AppendItem(HalfCostPerk, "HalfCostPerk");
                    }
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects.TryGet(out var EffectsItem))
                    {
                        fg.AppendLine("Effects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                    if (printMask?.SPITDataTypeState ?? true)
                    {
                        fg.AppendItem(SPITDataTypeState, "SPITDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? MenuDisplayObject;
            public Exception? EquipmentType;
            public Exception? Description;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? PickUpSound;
            public Exception? PutDownSound;
            public Exception? Value;
            public Exception? Weight;
            public Exception? BaseCost;
            public Exception? Flags;
            public Exception? Type;
            public Exception? ChargeTime;
            public Exception? CastType;
            public Exception? TargetType;
            public Exception? CastDuration;
            public Exception? Range;
            public Exception? HalfCostPerk;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            public Exception? DATADataTypeState;
            public Exception? SPITDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
                switch (enu)
                {
                    case Scroll_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Scroll_FieldIndex.Name:
                        return Name;
                    case Scroll_FieldIndex.Keywords:
                        return Keywords;
                    case Scroll_FieldIndex.MenuDisplayObject:
                        return MenuDisplayObject;
                    case Scroll_FieldIndex.EquipmentType:
                        return EquipmentType;
                    case Scroll_FieldIndex.Description:
                        return Description;
                    case Scroll_FieldIndex.Model:
                        return Model;
                    case Scroll_FieldIndex.Destructible:
                        return Destructible;
                    case Scroll_FieldIndex.PickUpSound:
                        return PickUpSound;
                    case Scroll_FieldIndex.PutDownSound:
                        return PutDownSound;
                    case Scroll_FieldIndex.Value:
                        return Value;
                    case Scroll_FieldIndex.Weight:
                        return Weight;
                    case Scroll_FieldIndex.BaseCost:
                        return BaseCost;
                    case Scroll_FieldIndex.Flags:
                        return Flags;
                    case Scroll_FieldIndex.Type:
                        return Type;
                    case Scroll_FieldIndex.ChargeTime:
                        return ChargeTime;
                    case Scroll_FieldIndex.CastType:
                        return CastType;
                    case Scroll_FieldIndex.TargetType:
                        return TargetType;
                    case Scroll_FieldIndex.CastDuration:
                        return CastDuration;
                    case Scroll_FieldIndex.Range:
                        return Range;
                    case Scroll_FieldIndex.HalfCostPerk:
                        return HalfCostPerk;
                    case Scroll_FieldIndex.Effects:
                        return Effects;
                    case Scroll_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    case Scroll_FieldIndex.SPITDataTypeState:
                        return SPITDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
                switch (enu)
                {
                    case Scroll_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Scroll_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Scroll_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Scroll_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = ex;
                        break;
                    case Scroll_FieldIndex.EquipmentType:
                        this.EquipmentType = ex;
                        break;
                    case Scroll_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Scroll_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Scroll_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Scroll_FieldIndex.PickUpSound:
                        this.PickUpSound = ex;
                        break;
                    case Scroll_FieldIndex.PutDownSound:
                        this.PutDownSound = ex;
                        break;
                    case Scroll_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case Scroll_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Scroll_FieldIndex.BaseCost:
                        this.BaseCost = ex;
                        break;
                    case Scroll_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Scroll_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Scroll_FieldIndex.ChargeTime:
                        this.ChargeTime = ex;
                        break;
                    case Scroll_FieldIndex.CastType:
                        this.CastType = ex;
                        break;
                    case Scroll_FieldIndex.TargetType:
                        this.TargetType = ex;
                        break;
                    case Scroll_FieldIndex.CastDuration:
                        this.CastDuration = ex;
                        break;
                    case Scroll_FieldIndex.Range:
                        this.Range = ex;
                        break;
                    case Scroll_FieldIndex.HalfCostPerk:
                        this.HalfCostPerk = ex;
                        break;
                    case Scroll_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    case Scroll_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    case Scroll_FieldIndex.SPITDataTypeState:
                        this.SPITDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
                switch (enu)
                {
                    case Scroll_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Scroll_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Scroll_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.EquipmentType:
                        this.EquipmentType = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Scroll_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Scroll_FieldIndex.PickUpSound:
                        this.PickUpSound = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.PutDownSound:
                        this.PutDownSound = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.BaseCost:
                        this.BaseCost = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.ChargeTime:
                        this.ChargeTime = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.CastType:
                        this.CastType = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.TargetType:
                        this.TargetType = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.CastDuration:
                        this.CastDuration = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Range:
                        this.Range = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.HalfCostPerk:
                        this.HalfCostPerk = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    case Scroll_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.SPITDataTypeState:
                        this.SPITDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Keywords != null) return true;
                if (MenuDisplayObject != null) return true;
                if (EquipmentType != null) return true;
                if (Description != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (PickUpSound != null) return true;
                if (PutDownSound != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                if (BaseCost != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (ChargeTime != null) return true;
                if (CastType != null) return true;
                if (TargetType != null) return true;
                if (CastDuration != null) return true;
                if (Range != null) return true;
                if (HalfCostPerk != null) return true;
                if (Effects != null) return true;
                if (DATADataTypeState != null) return true;
                if (SPITDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                fg.AppendItem(EquipmentType, "EquipmentType");
                fg.AppendItem(Description, "Description");
                Model?.ToString(fg);
                Destructible?.ToString(fg);
                fg.AppendItem(PickUpSound, "PickUpSound");
                fg.AppendItem(PutDownSound, "PutDownSound");
                fg.AppendItem(Value, "Value");
                fg.AppendItem(Weight, "Weight");
                fg.AppendItem(BaseCost, "BaseCost");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Type, "Type");
                fg.AppendItem(ChargeTime, "ChargeTime");
                fg.AppendItem(CastType, "CastType");
                fg.AppendItem(TargetType, "TargetType");
                fg.AppendItem(CastDuration, "CastDuration");
                fg.AppendItem(Range, "Range");
                fg.AppendItem(HalfCostPerk, "HalfCostPerk");
                if (Effects.TryGet(out var EffectsItem))
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                fg.AppendItem(SPITDataTypeState, "SPITDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.MenuDisplayObject = this.MenuDisplayObject.Combine(rhs.MenuDisplayObject);
                ret.EquipmentType = this.EquipmentType.Combine(rhs.EquipmentType);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.PickUpSound = this.PickUpSound.Combine(rhs.PickUpSound);
                ret.PutDownSound = this.PutDownSound.Combine(rhs.PutDownSound);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.ChargeTime = this.ChargeTime.Combine(rhs.ChargeTime);
                ret.CastType = this.CastType.Combine(rhs.CastType);
                ret.TargetType = this.TargetType.Combine(rhs.TargetType);
                ret.CastDuration = this.CastDuration.Combine(rhs.CastDuration);
                ret.Range = this.Range.Combine(rhs.Range);
                ret.HalfCostPerk = this.HalfCostPerk.Combine(rhs.HalfCostPerk);
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                ret.SPITDataTypeState = this.SPITDataTypeState.Combine(rhs.SPITDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public bool Keywords;
            public bool MenuDisplayObject;
            public bool EquipmentType;
            public bool Description;
            public Model.TranslationMask? Model;
            public Destructible.TranslationMask? Destructible;
            public bool PickUpSound;
            public bool PutDownSound;
            public bool Value;
            public bool Weight;
            public bool BaseCost;
            public bool Flags;
            public bool Type;
            public bool ChargeTime;
            public bool CastType;
            public bool TargetType;
            public bool CastDuration;
            public bool Range;
            public bool HalfCostPerk;
            public Effect.TranslationMask? Effects;
            public bool DATADataTypeState;
            public bool SPITDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.MenuDisplayObject = defaultOn;
                this.EquipmentType = defaultOn;
                this.Description = defaultOn;
                this.PickUpSound = defaultOn;
                this.PutDownSound = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
                this.BaseCost = defaultOn;
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.ChargeTime = defaultOn;
                this.CastType = defaultOn;
                this.TargetType = defaultOn;
                this.CastDuration = defaultOn;
                this.Range = defaultOn;
                this.HalfCostPerk = defaultOn;
                this.DATADataTypeState = defaultOn;
                this.SPITDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Keywords, null));
                ret.Add((MenuDisplayObject, null));
                ret.Add((EquipmentType, null));
                ret.Add((Description, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((PickUpSound, null));
                ret.Add((PutDownSound, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
                ret.Add((BaseCost, null));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((ChargeTime, null));
                ret.Add((CastType, null));
                ret.Add((TargetType, null));
                ret.Add((CastDuration, null));
                ret.Add((Range, null));
                ret.Add((HalfCostPerk, null));
                ret.Add((Effects == null ? DefaultOn : !Effects.GetCrystal().CopyNothing, Effects?.GetCrystal()));
                ret.Add((DATADataTypeState, null));
                ret.Add((SPITDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Scroll_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ScrollCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScrollSetterCommon.Instance.RemapLinks(this, mapping);
        public Scroll(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Scroll(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Scroll(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Scroll(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Scroll(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
        }
        [Flags]
        public enum SPITDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScrollBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScrollBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Scroll CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Scroll();
            ((ScrollSetterCommon)((IScrollGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Scroll item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ScrollSetterCommon)((IScrollGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Scroll GetNew()
        {
            return new Scroll();
        }

    }
    #endregion

    #region Interface
    public partial interface IScroll :
        IScrollGetter,
        IFallout4MajorRecord,
        IObjectId,
        IItem,
        ITranslatedNamed,
        IModeled,
        IObjectBounded,
        IWeightValue,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IScrollInternal>,
        IFormLinkContainer
    {
        new ObjectBounds ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new ExtendedList<IFormLink<IKeywordGetter>>? Keywords { get; set; }
        new FormLinkNullable<IStaticGetter> MenuDisplayObject { get; set; }
        new FormLinkNullable<IEquipTypeGetter> EquipmentType { get; set; }
        new TranslatedString? Description { get; set; }
        new Model? Model { get; set; }
        new Destructible? Destructible { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; set; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
        new UInt32 BaseCost { get; set; }
        new SpellDataFlag Flags { get; set; }
        new SpellType Type { get; set; }
        new Single ChargeTime { get; set; }
        new CastType CastType { get; set; }
        new TargetType TargetType { get; set; }
        new Single CastDuration { get; set; }
        new Single Range { get; set; }
        new FormLink<IPerkGetter> HalfCostPerk { get; set; }
        new ExtendedList<Effect> Effects { get; }
        new Scroll.DATADataType DATADataTypeState { get; set; }
        new Scroll.SPITDataType SPITDataTypeState { get; set; }
    }

    public partial interface IScrollInternal :
        IFallout4MajorRecordInternal,
        IScroll,
        IScrollGetter
    {
    }

    public partial interface IScrollGetter :
        IFallout4MajorRecordGetter,
        IObjectIdGetter,
        IItemGetter,
        ITranslatedNamedGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        IWeightValueGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IScrollGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Scroll_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        ITranslatedStringGetter? Name { get; }
        IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; }
        FormLinkNullable<IStaticGetter> MenuDisplayObject { get; }
        FormLinkNullable<IEquipTypeGetter> EquipmentType { get; }
        ITranslatedStringGetter? Description { get; }
        IModelGetter? Model { get; }
        IDestructibleGetter? Destructible { get; }
        FormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; }
        FormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; }
        UInt32 Value { get; }
        Single Weight { get; }
        UInt32 BaseCost { get; }
        SpellDataFlag Flags { get; }
        SpellType Type { get; }
        Single ChargeTime { get; }
        CastType CastType { get; }
        TargetType TargetType { get; }
        Single CastDuration { get; }
        Single Range { get; }
        FormLink<IPerkGetter> HalfCostPerk { get; }
        IReadOnlyList<IEffectGetter> Effects { get; }
        Scroll.DATADataType DATADataTypeState { get; }
        Scroll.SPITDataType SPITDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScrollMixIn
    {
        public static void Clear(this IScrollInternal item)
        {
            ((ScrollSetterCommon)((IScrollGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Scroll.Mask<bool> GetEqualsMask(
            this IScrollGetter item,
            IScrollGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScrollGetter item,
            string? name = null,
            Scroll.Mask<bool>? printMask = null)
        {
            return ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScrollGetter item,
            FileGeneration fg,
            string? name = null,
            Scroll.Mask<bool>? printMask = null)
        {
            ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IScrollGetter item,
            IScrollGetter rhs)
        {
            return ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IScrollInternal lhs,
            IScrollGetter rhs,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScrollSetterTranslationCommon)((IScrollGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Scroll.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScrollInternal lhs,
            IScrollGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScrollSetterTranslationCommon)((IScrollGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Scroll DeepCopy(
            this IScrollGetter item,
            Scroll.TranslationMask? copyMask = null)
        {
            return ((ScrollSetterTranslationCommon)((IScrollGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Scroll DeepCopy(
            this IScrollGetter item,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? copyMask = null)
        {
            return ((ScrollSetterTranslationCommon)((IScrollGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Scroll DeepCopy(
            this IScrollGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScrollSetterTranslationCommon)((IScrollGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Scroll Duplicate(
            this IScrollGetter item,
            FormKey formKey,
            Scroll.TranslationMask? copyMask = null)
        {
            return ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IScrollInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScrollSetterCommon)((IScrollGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Scroll_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Name = 7,
        Keywords = 8,
        MenuDisplayObject = 9,
        EquipmentType = 10,
        Description = 11,
        Model = 12,
        Destructible = 13,
        PickUpSound = 14,
        PutDownSound = 15,
        Value = 16,
        Weight = 17,
        BaseCost = 18,
        Flags = 19,
        Type = 20,
        ChargeTime = 21,
        CastType = 22,
        TargetType = 23,
        CastDuration = 24,
        Range = 25,
        HalfCostPerk = 26,
        Effects = 27,
        DATADataTypeState = 28,
        SPITDataTypeState = 29,
    }
    #endregion

    #region Registration
    public partial class Scroll_Registration : ILoquiRegistration
    {
        public static readonly Scroll_Registration Instance = new Scroll_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 139,
            version: 0);

        public const string GUID = "966367fb-9898-41f3-a250-d453749a138b";

        public const ushort AdditionalFieldCount = 24;

        public const ushort FieldCount = 30;

        public static readonly Type MaskType = typeof(Scroll.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Scroll.ErrorMask);

        public static readonly Type ClassType = typeof(Scroll);

        public static readonly Type GetterType = typeof(IScrollGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScroll);

        public static readonly Type? InternalSetterType = typeof(IScrollInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Scroll";

        public const string Name = "Scroll";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SCRL;
        public static readonly Type BinaryWriteTranslation = typeof(ScrollBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ScrollSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ScrollSetterCommon Instance = new ScrollSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScrollInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Keywords = null;
            item.MenuDisplayObject = FormLinkNullable<IStaticGetter>.Null;
            item.EquipmentType = FormLinkNullable<IEquipTypeGetter>.Null;
            item.Description = default;
            item.Model = null;
            item.Destructible = null;
            item.PickUpSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.PutDownSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.Value = default;
            item.Weight = default;
            item.BaseCost = default;
            item.Flags = default;
            item.Type = default;
            item.ChargeTime = default;
            item.CastType = default;
            item.TargetType = default;
            item.CastDuration = default;
            item.Range = default;
            item.HalfCostPerk = FormLink<IPerkGetter>.Null;
            item.Effects.Clear();
            item.DATADataTypeState = default;
            item.SPITDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IScrollInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IScrollInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IScroll obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.MenuDisplayObject = obj.MenuDisplayObject.Relink(mapping);
            obj.EquipmentType = obj.EquipmentType.Relink(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.PickUpSound = obj.PickUpSound.Relink(mapping);
            obj.PutDownSound = obj.PutDownSound.Relink(mapping);
            obj.HalfCostPerk = obj.HalfCostPerk.Relink(mapping);
            obj.Effects.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScrollInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IScrollInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ScrollBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ScrollBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Scroll)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Scroll)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ScrollCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ScrollCommon Instance = new ScrollCommon();

        public Scroll.Mask<bool> GetEqualsMask(
            IScrollGetter item,
            IScrollGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Scroll.Mask<bool>(false);
            ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScrollGetter item,
            IScrollGetter rhs,
            Scroll.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.MenuDisplayObject = item.MenuDisplayObject.Equals(rhs.MenuDisplayObject);
            ret.EquipmentType = item.EquipmentType.Equals(rhs.EquipmentType);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PickUpSound = item.PickUpSound.Equals(rhs.PickUpSound);
            ret.PutDownSound = item.PutDownSound.Equals(rhs.PutDownSound);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.BaseCost = item.BaseCost == rhs.BaseCost;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.ChargeTime = item.ChargeTime.EqualsWithin(rhs.ChargeTime);
            ret.CastType = item.CastType == rhs.CastType;
            ret.TargetType = item.TargetType == rhs.TargetType;
            ret.CastDuration = item.CastDuration.EqualsWithin(rhs.CastDuration);
            ret.Range = item.Range.EqualsWithin(rhs.Range);
            ret.HalfCostPerk = item.HalfCostPerk.Equals(rhs.HalfCostPerk);
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            ret.SPITDataTypeState = item.SPITDataTypeState == rhs.SPITDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IScrollGetter item,
            string? name = null,
            Scroll.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScrollGetter item,
            FileGeneration fg,
            string? name = null,
            Scroll.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Scroll =>");
            }
            else
            {
                fg.AppendLine($"{name} (Scroll) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScrollGetter item,
            FileGeneration fg,
            Scroll.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.MenuDisplayObject ?? true)
            {
                fg.AppendItem(item.MenuDisplayObject.FormKeyNullable, "MenuDisplayObject");
            }
            if (printMask?.EquipmentType ?? true)
            {
                fg.AppendItem(item.EquipmentType.FormKeyNullable, "EquipmentType");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if (printMask?.PickUpSound ?? true)
            {
                fg.AppendItem(item.PickUpSound.FormKeyNullable, "PickUpSound");
            }
            if (printMask?.PutDownSound ?? true)
            {
                fg.AppendItem(item.PutDownSound.FormKeyNullable, "PutDownSound");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.BaseCost ?? true)
            {
                fg.AppendItem(item.BaseCost, "BaseCost");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if (printMask?.ChargeTime ?? true)
            {
                fg.AppendItem(item.ChargeTime, "ChargeTime");
            }
            if (printMask?.CastType ?? true)
            {
                fg.AppendItem(item.CastType, "CastType");
            }
            if (printMask?.TargetType ?? true)
            {
                fg.AppendItem(item.TargetType, "TargetType");
            }
            if (printMask?.CastDuration ?? true)
            {
                fg.AppendItem(item.CastDuration, "CastDuration");
            }
            if (printMask?.Range ?? true)
            {
                fg.AppendItem(item.Range, "Range");
            }
            if (printMask?.HalfCostPerk ?? true)
            {
                fg.AppendItem(item.HalfCostPerk.FormKey, "HalfCostPerk");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                fg.AppendLine("Effects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Effects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
            if (printMask?.SPITDataTypeState ?? true)
            {
                fg.AppendItem(item.SPITDataTypeState, "SPITDataTypeState");
            }
        }
        
        public static Scroll_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Scroll_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Scroll_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Scroll_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Scroll_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Scroll_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Scroll_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Scroll_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Scroll_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Scroll_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Scroll_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Scroll_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScrollGetter? lhs,
            IScrollGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            if (!lhs.MenuDisplayObject.Equals(rhs.MenuDisplayObject)) return false;
            if (!lhs.EquipmentType.Equals(rhs.EquipmentType)) return false;
            if (!object.Equals(lhs.Description, rhs.Description)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (!lhs.PickUpSound.Equals(rhs.PickUpSound)) return false;
            if (!lhs.PutDownSound.Equals(rhs.PutDownSound)) return false;
            if (lhs.Value != rhs.Value) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (lhs.BaseCost != rhs.BaseCost) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Type != rhs.Type) return false;
            if (!lhs.ChargeTime.EqualsWithin(rhs.ChargeTime)) return false;
            if (lhs.CastType != rhs.CastType) return false;
            if (lhs.TargetType != rhs.TargetType) return false;
            if (!lhs.CastDuration.EqualsWithin(rhs.CastDuration)) return false;
            if (!lhs.Range.EqualsWithin(rhs.Range)) return false;
            if (!lhs.HalfCostPerk.Equals(rhs.HalfCostPerk)) return false;
            if (!lhs.Effects.SequenceEqualNullable(rhs.Effects)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            if (lhs.SPITDataTypeState != rhs.SPITDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IScrollGetter?)lhs,
                rhs: rhs as IScrollGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IScrollGetter?)lhs,
                rhs: rhs as IScrollGetter);
        }
        
        public virtual int GetHashCode(IScrollGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.MenuDisplayObject);
            hash.Add(item.EquipmentType);
            if (item.Description.TryGet(out var Descriptionitem))
            {
                hash.Add(Descriptionitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.PickUpSound);
            hash.Add(item.PutDownSound);
            hash.Add(item.Value);
            hash.Add(item.Weight);
            hash.Add(item.BaseCost);
            hash.Add(item.Flags);
            hash.Add(item.Type);
            hash.Add(item.ChargeTime);
            hash.Add(item.CastType);
            hash.Add(item.TargetType);
            hash.Add(item.CastDuration);
            hash.Add(item.Range);
            hash.Add(item.HalfCostPerk);
            hash.Add(item.Effects);
            hash.Add(item.DATADataTypeState);
            hash.Add(item.SPITDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IScrollGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IScrollGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Scroll.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IScrollGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.MenuDisplayObject.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.MenuDisplayObject);
            }
            if (obj.EquipmentType.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.EquipmentType);
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.PickUpSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PickUpSound);
            }
            if (obj.PutDownSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PutDownSound);
            }
            yield return FormLinkInformation.Factory(obj.HalfCostPerk);
            foreach (var item in obj.Effects.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public Scroll Duplicate(
            IScrollGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Scroll(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IScroll)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IScroll)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ScrollSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ScrollSetterTranslationCommon Instance = new ScrollSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IScrollInternal item,
            IScrollGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IScroll item,
            IScrollGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Scroll_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Scroll_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Scroll_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.MenuDisplayObject) ?? true))
            {
                item.MenuDisplayObject = new FormLinkNullable<IStaticGetter>(rhs.MenuDisplayObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.EquipmentType) ?? true))
            {
                item.EquipmentType = new FormLinkNullable<IEquipTypeGetter>(rhs.EquipmentType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Scroll_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Scroll_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Scroll_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Scroll_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.PickUpSound) ?? true))
            {
                item.PickUpSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.PickUpSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.PutDownSound) ?? true))
            {
                item.PutDownSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.PutDownSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.BaseCost) ?? true))
            {
                item.BaseCost = rhs.BaseCost;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.ChargeTime) ?? true))
            {
                item.ChargeTime = rhs.ChargeTime;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.CastType) ?? true))
            {
                item.CastType = rhs.CastType;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.TargetType) ?? true))
            {
                item.TargetType = rhs.TargetType;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.CastDuration) ?? true))
            {
                item.CastDuration = rhs.CastDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Range) ?? true))
            {
                item.Range = rhs.Range;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.HalfCostPerk) ?? true))
            {
                item.HalfCostPerk = new FormLink<IPerkGetter>(rhs.HalfCostPerk.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)Scroll_FieldIndex.Effects);
                try
                {
                    item.Effects.SetTo(
                        rhs.Effects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.SPITDataTypeState) ?? true))
            {
                item.SPITDataTypeState = rhs.SPITDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScrollInternal)item,
                rhs: (IScrollGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScroll)item,
                rhs: (IScrollGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScrollInternal)item,
                rhs: (IScrollGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScroll)item,
                rhs: (IScrollGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Scroll DeepCopy(
            IScrollGetter item,
            Scroll.TranslationMask? copyMask = null)
        {
            Scroll ret = (Scroll)((ScrollCommon)((IScrollGetter)item).CommonInstance()!).GetNew();
            ((ScrollSetterTranslationCommon)((IScrollGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Scroll DeepCopy(
            IScrollGetter item,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Scroll ret = (Scroll)((ScrollCommon)((IScrollGetter)item).CommonInstance()!).GetNew();
            ((ScrollSetterTranslationCommon)((IScrollGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Scroll.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Scroll DeepCopy(
            IScrollGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Scroll ret = (Scroll)((ScrollCommon)((IScrollGetter)item).CommonInstance()!).GetNew();
            ((ScrollSetterTranslationCommon)((IScrollGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Scroll
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Scroll_Registration.Instance;
        public new static Scroll_Registration Registration => Scroll_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScrollCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ScrollSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScrollSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScrollBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ScrollBinaryWriteTranslation Instance = new ScrollBinaryWriteTranslation();

        public static void WriteEmbedded(
            IScrollGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IScrollGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLink<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MenuDisplayObject,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MDOB));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EquipmentType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ETYP));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PickUpSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.YNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PutDownSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ZNAM));
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Value);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.SPIT)))
            {
                writer.Write(item.BaseCost);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<SpellDataFlag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<SpellType>.Instance.Write(
                    writer,
                    item.Type,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ChargeTime);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<CastType>.Instance.Write(
                    writer,
                    item.CastType,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<TargetType>.Instance.Write(
                    writer,
                    item.TargetType,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CastDuration);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Range);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HalfCostPerk);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IScrollGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.SCRL),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScrollGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScrollGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScrollGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ScrollBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static ScrollBinaryCreateTranslation Instance = new ScrollBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SCRL;
        public static void FillBinaryStructs(
            IScrollInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IScrollInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Scroll_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Scroll_FieldIndex.Name;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.Parse(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<IKeywordGetter>>();
                    return (int)Scroll_FieldIndex.Keywords;
                }
                case RecordTypeInts.MDOB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MenuDisplayObject = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Scroll_FieldIndex.MenuDisplayObject;
                }
                case RecordTypeInts.ETYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipmentType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Scroll_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Scroll_FieldIndex.Description;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Scroll_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Fallout4.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Scroll_FieldIndex.Destructible;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PickUpSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Scroll_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PutDownSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Scroll_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Value = dataFrame.ReadUInt32();
                    item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)Scroll_FieldIndex.Weight;
                }
                case RecordTypeInts.SPIT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.BaseCost = dataFrame.ReadUInt32();
                    item.Flags = EnumBinaryTranslation<SpellDataFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Type = EnumBinaryTranslation<SpellType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ChargeTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.CastType = EnumBinaryTranslation<CastType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.TargetType = EnumBinaryTranslation<TargetType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.CastDuration = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Range = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HalfCostPerk = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    return (int)Scroll_FieldIndex.HalfCostPerk;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                {
                    item.Effects.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Effect_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: Effect.TryCreateFromBinary));
                    return (int)Scroll_FieldIndex.Effects;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ScrollBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScrollBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IScrollGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Scroll_Registration.Instance;
        public new static Scroll_Registration Registration => Scroll_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScrollCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScrollSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ScrollCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScrollBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScrollBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region MenuDisplayObject
        private int? _MenuDisplayObjectLocation;
        public FormLinkNullable<IStaticGetter> MenuDisplayObject => _MenuDisplayObjectLocation.HasValue ? new FormLinkNullable<IStaticGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MenuDisplayObjectLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IStaticGetter>.Null;
        #endregion
        #region EquipmentType
        private int? _EquipmentTypeLocation;
        public FormLinkNullable<IEquipTypeGetter> EquipmentType => _EquipmentTypeLocation.HasValue ? new FormLinkNullable<IEquipTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EquipmentTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEquipTypeGetter>.Null;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region PickUpSound
        private int? _PickUpSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> PickUpSound => _PickUpSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PickUpSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region PutDownSound
        private int? _PutDownSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> PutDownSound => _PutDownSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PutDownSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        private int? _DATALocation;
        public Scroll.DATADataType DATADataTypeState { get; private set; }
        #region Value
        private int _ValueLocation => _DATALocation!.Value;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0x4;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? _data.Slice(_WeightLocation, 4).Float() : default;
        #endregion
        private int? _SPITLocation;
        public Scroll.SPITDataType SPITDataTypeState { get; private set; }
        #region BaseCost
        private int _BaseCostLocation => _SPITLocation!.Value;
        private bool _BaseCost_IsSet => _SPITLocation.HasValue;
        public UInt32 BaseCost => _BaseCost_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_BaseCostLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _SPITLocation!.Value + 0x4;
        private bool _Flags_IsSet => _SPITLocation.HasValue;
        public SpellDataFlag Flags => _Flags_IsSet ? (SpellDataFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region Type
        private int _TypeLocation => _SPITLocation!.Value + 0x8;
        private bool _Type_IsSet => _SPITLocation.HasValue;
        public SpellType Type => _Type_IsSet ? (SpellType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TypeLocation, 0x4)) : default;
        #endregion
        #region ChargeTime
        private int _ChargeTimeLocation => _SPITLocation!.Value + 0xC;
        private bool _ChargeTime_IsSet => _SPITLocation.HasValue;
        public Single ChargeTime => _ChargeTime_IsSet ? _data.Slice(_ChargeTimeLocation, 4).Float() : default;
        #endregion
        #region CastType
        private int _CastTypeLocation => _SPITLocation!.Value + 0x10;
        private bool _CastType_IsSet => _SPITLocation.HasValue;
        public CastType CastType => _CastType_IsSet ? (CastType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_CastTypeLocation, 0x4)) : default;
        #endregion
        #region TargetType
        private int _TargetTypeLocation => _SPITLocation!.Value + 0x14;
        private bool _TargetType_IsSet => _SPITLocation.HasValue;
        public TargetType TargetType => _TargetType_IsSet ? (TargetType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TargetTypeLocation, 0x4)) : default;
        #endregion
        #region CastDuration
        private int _CastDurationLocation => _SPITLocation!.Value + 0x18;
        private bool _CastDuration_IsSet => _SPITLocation.HasValue;
        public Single CastDuration => _CastDuration_IsSet ? _data.Slice(_CastDurationLocation, 4).Float() : default;
        #endregion
        #region Range
        private int _RangeLocation => _SPITLocation!.Value + 0x1C;
        private bool _Range_IsSet => _SPITLocation.HasValue;
        public Single Range => _Range_IsSet ? _data.Slice(_RangeLocation, 4).Float() : default;
        #endregion
        #region HalfCostPerk
        private int _HalfCostPerkLocation => _SPITLocation!.Value + 0x20;
        private bool _HalfCostPerk_IsSet => _SPITLocation.HasValue;
        public FormLink<IPerkGetter> HalfCostPerk => _HalfCostPerk_IsSet ? new FormLink<IPerkGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_HalfCostPerkLocation, 0x4)))) : FormLink<IPerkGetter>.Null;
        #endregion
        public IReadOnlyList<IEffectGetter> Effects { get; private set; } = ListExt.Empty<EffectBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScrollBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ScrollBinaryOverlay ScrollFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new ScrollBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ScrollBinaryOverlay ScrollFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ScrollFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Scroll_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Scroll_FieldIndex.Name;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLink<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Scroll_FieldIndex.Keywords;
                }
                case RecordTypeInts.MDOB:
                {
                    _MenuDisplayObjectLocation = (stream.Position - offset);
                    return (int)Scroll_FieldIndex.MenuDisplayObject;
                }
                case RecordTypeInts.ETYP:
                {
                    _EquipmentTypeLocation = (stream.Position - offset);
                    return (int)Scroll_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Scroll_FieldIndex.Description;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Scroll_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Scroll_FieldIndex.Destructible;
                }
                case RecordTypeInts.YNAM:
                {
                    _PickUpSoundLocation = (stream.Position - offset);
                    return (int)Scroll_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    _PutDownSoundLocation = (stream.Position - offset);
                    return (int)Scroll_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Scroll_FieldIndex.Weight;
                }
                case RecordTypeInts.SPIT:
                {
                    _SPITLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Scroll_FieldIndex.HalfCostPerk;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<EffectBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: Effect_Registration.TriggeringRecordTypes,
                        factory:  EffectBinaryOverlay.EffectFactory);
                    return (int)Scroll_FieldIndex.Effects;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScrollMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScrollGetter rhs)) return false;
            return ((ScrollCommon)((IScrollGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IScrollGetter? obj)
        {
            return ((ScrollCommon)((IScrollGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScrollCommon)((IScrollGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

