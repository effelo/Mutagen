/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Grass :
        Fallout4MajorRecord,
        IGrassInternal,
        ILoquiObjectSetter<Grass>,
        IEquatable<IGrassGetter>
    {
        #region Ctor
        protected Grass()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IGrassGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IGrassGetter.Model => this.Model;
        #endregion
        #region Density
        public Byte Density { get; set; } = default;
        #endregion
        #region MinSlope
        public Byte MinSlope { get; set; } = default;
        #endregion
        #region MaxSlope
        public Byte MaxSlope { get; set; } = default;
        #endregion
        #region Unknown
        public Byte Unknown { get; set; } = default;
        #endregion
        #region UnitsFromWater
        public UInt16 UnitsFromWater { get; set; } = default;
        #endregion
        #region Unknown2
        public UInt16 Unknown2 { get; set; } = default;
        #endregion
        #region UnitsFromWaterType
        public Grass.UnitsFromWaterTypeEnum UnitsFromWaterType { get; set; } = default;
        #endregion
        #region PositionRange
        public Single PositionRange { get; set; } = default;
        #endregion
        #region HeightRange
        public Single HeightRange { get; set; } = default;
        #endregion
        #region ColorRange
        public Single ColorRange { get; set; } = default;
        #endregion
        #region WavePeriod
        public Single WavePeriod { get; set; } = default;
        #endregion
        #region Flags
        public Grass.Flag Flags { get; set; } = default;
        #endregion
        #region Unknown3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown3 = new byte[3];
        public MemorySlice<Byte> Unknown3
        {
            get => _Unknown3;
            set => this._Unknown3 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IGrassGetter.Unknown3 => this.Unknown3;
        #endregion
        #region DATADataTypeState
        public Grass.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            GrassMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IGrassGetter rhs)) return false;
            return ((GrassCommon)((IGrassGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IGrassGetter? obj)
        {
            return ((GrassCommon)((IGrassGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((GrassCommon)((IGrassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Density = initialValue;
                this.MinSlope = initialValue;
                this.MaxSlope = initialValue;
                this.Unknown = initialValue;
                this.UnitsFromWater = initialValue;
                this.Unknown2 = initialValue;
                this.UnitsFromWaterType = initialValue;
                this.PositionRange = initialValue;
                this.HeightRange = initialValue;
                this.ColorRange = initialValue;
                this.WavePeriod = initialValue;
                this.Flags = initialValue;
                this.Unknown3 = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Model,
                TItem Density,
                TItem MinSlope,
                TItem MaxSlope,
                TItem Unknown,
                TItem UnitsFromWater,
                TItem Unknown2,
                TItem UnitsFromWaterType,
                TItem PositionRange,
                TItem HeightRange,
                TItem ColorRange,
                TItem WavePeriod,
                TItem Flags,
                TItem Unknown3,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Density = Density;
                this.MinSlope = MinSlope;
                this.MaxSlope = MaxSlope;
                this.Unknown = Unknown;
                this.UnitsFromWater = UnitsFromWater;
                this.Unknown2 = Unknown2;
                this.UnitsFromWaterType = UnitsFromWaterType;
                this.PositionRange = PositionRange;
                this.HeightRange = HeightRange;
                this.ColorRange = ColorRange;
                this.WavePeriod = WavePeriod;
                this.Flags = Flags;
                this.Unknown3 = Unknown3;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Density;
            public TItem MinSlope;
            public TItem MaxSlope;
            public TItem Unknown;
            public TItem UnitsFromWater;
            public TItem Unknown2;
            public TItem UnitsFromWaterType;
            public TItem PositionRange;
            public TItem HeightRange;
            public TItem ColorRange;
            public TItem WavePeriod;
            public TItem Flags;
            public TItem Unknown3;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Density, rhs.Density)) return false;
                if (!object.Equals(this.MinSlope, rhs.MinSlope)) return false;
                if (!object.Equals(this.MaxSlope, rhs.MaxSlope)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.UnitsFromWater, rhs.UnitsFromWater)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.UnitsFromWaterType, rhs.UnitsFromWaterType)) return false;
                if (!object.Equals(this.PositionRange, rhs.PositionRange)) return false;
                if (!object.Equals(this.HeightRange, rhs.HeightRange)) return false;
                if (!object.Equals(this.ColorRange, rhs.ColorRange)) return false;
                if (!object.Equals(this.WavePeriod, rhs.WavePeriod)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Model);
                hash.Add(this.Density);
                hash.Add(this.MinSlope);
                hash.Add(this.MaxSlope);
                hash.Add(this.Unknown);
                hash.Add(this.UnitsFromWater);
                hash.Add(this.Unknown2);
                hash.Add(this.UnitsFromWaterType);
                hash.Add(this.PositionRange);
                hash.Add(this.HeightRange);
                hash.Add(this.ColorRange);
                hash.Add(this.WavePeriod);
                hash.Add(this.Flags);
                hash.Add(this.Unknown3);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Density)) return false;
                if (!eval(this.MinSlope)) return false;
                if (!eval(this.MaxSlope)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.UnitsFromWater)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.UnitsFromWaterType)) return false;
                if (!eval(this.PositionRange)) return false;
                if (!eval(this.HeightRange)) return false;
                if (!eval(this.ColorRange)) return false;
                if (!eval(this.WavePeriod)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Density)) return true;
                if (eval(this.MinSlope)) return true;
                if (eval(this.MaxSlope)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.UnitsFromWater)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.UnitsFromWaterType)) return true;
                if (eval(this.PositionRange)) return true;
                if (eval(this.HeightRange)) return true;
                if (eval(this.ColorRange)) return true;
                if (eval(this.WavePeriod)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Grass.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Density = eval(this.Density);
                obj.MinSlope = eval(this.MinSlope);
                obj.MaxSlope = eval(this.MaxSlope);
                obj.Unknown = eval(this.Unknown);
                obj.UnitsFromWater = eval(this.UnitsFromWater);
                obj.Unknown2 = eval(this.Unknown2);
                obj.UnitsFromWaterType = eval(this.UnitsFromWaterType);
                obj.PositionRange = eval(this.PositionRange);
                obj.HeightRange = eval(this.HeightRange);
                obj.ColorRange = eval(this.ColorRange);
                obj.WavePeriod = eval(this.WavePeriod);
                obj.Flags = eval(this.Flags);
                obj.Unknown3 = eval(this.Unknown3);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Grass.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Grass.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Grass.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Density ?? true)
                    {
                        fg.AppendItem(Density, "Density");
                    }
                    if (printMask?.MinSlope ?? true)
                    {
                        fg.AppendItem(MinSlope, "MinSlope");
                    }
                    if (printMask?.MaxSlope ?? true)
                    {
                        fg.AppendItem(MaxSlope, "MaxSlope");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.UnitsFromWater ?? true)
                    {
                        fg.AppendItem(UnitsFromWater, "UnitsFromWater");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.UnitsFromWaterType ?? true)
                    {
                        fg.AppendItem(UnitsFromWaterType, "UnitsFromWaterType");
                    }
                    if (printMask?.PositionRange ?? true)
                    {
                        fg.AppendItem(PositionRange, "PositionRange");
                    }
                    if (printMask?.HeightRange ?? true)
                    {
                        fg.AppendItem(HeightRange, "HeightRange");
                    }
                    if (printMask?.ColorRange ?? true)
                    {
                        fg.AppendItem(ColorRange, "ColorRange");
                    }
                    if (printMask?.WavePeriod ?? true)
                    {
                        fg.AppendItem(WavePeriod, "WavePeriod");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        fg.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Density;
            public Exception? MinSlope;
            public Exception? MaxSlope;
            public Exception? Unknown;
            public Exception? UnitsFromWater;
            public Exception? Unknown2;
            public Exception? UnitsFromWaterType;
            public Exception? PositionRange;
            public Exception? HeightRange;
            public Exception? ColorRange;
            public Exception? WavePeriod;
            public Exception? Flags;
            public Exception? Unknown3;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Grass_FieldIndex enu = (Grass_FieldIndex)index;
                switch (enu)
                {
                    case Grass_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Grass_FieldIndex.Model:
                        return Model;
                    case Grass_FieldIndex.Density:
                        return Density;
                    case Grass_FieldIndex.MinSlope:
                        return MinSlope;
                    case Grass_FieldIndex.MaxSlope:
                        return MaxSlope;
                    case Grass_FieldIndex.Unknown:
                        return Unknown;
                    case Grass_FieldIndex.UnitsFromWater:
                        return UnitsFromWater;
                    case Grass_FieldIndex.Unknown2:
                        return Unknown2;
                    case Grass_FieldIndex.UnitsFromWaterType:
                        return UnitsFromWaterType;
                    case Grass_FieldIndex.PositionRange:
                        return PositionRange;
                    case Grass_FieldIndex.HeightRange:
                        return HeightRange;
                    case Grass_FieldIndex.ColorRange:
                        return ColorRange;
                    case Grass_FieldIndex.WavePeriod:
                        return WavePeriod;
                    case Grass_FieldIndex.Flags:
                        return Flags;
                    case Grass_FieldIndex.Unknown3:
                        return Unknown3;
                    case Grass_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Grass_FieldIndex enu = (Grass_FieldIndex)index;
                switch (enu)
                {
                    case Grass_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Grass_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Grass_FieldIndex.Density:
                        this.Density = ex;
                        break;
                    case Grass_FieldIndex.MinSlope:
                        this.MinSlope = ex;
                        break;
                    case Grass_FieldIndex.MaxSlope:
                        this.MaxSlope = ex;
                        break;
                    case Grass_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Grass_FieldIndex.UnitsFromWater:
                        this.UnitsFromWater = ex;
                        break;
                    case Grass_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case Grass_FieldIndex.UnitsFromWaterType:
                        this.UnitsFromWaterType = ex;
                        break;
                    case Grass_FieldIndex.PositionRange:
                        this.PositionRange = ex;
                        break;
                    case Grass_FieldIndex.HeightRange:
                        this.HeightRange = ex;
                        break;
                    case Grass_FieldIndex.ColorRange:
                        this.ColorRange = ex;
                        break;
                    case Grass_FieldIndex.WavePeriod:
                        this.WavePeriod = ex;
                        break;
                    case Grass_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Grass_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case Grass_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Grass_FieldIndex enu = (Grass_FieldIndex)index;
                switch (enu)
                {
                    case Grass_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Grass_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Grass_FieldIndex.Density:
                        this.Density = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.MinSlope:
                        this.MinSlope = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.MaxSlope:
                        this.MaxSlope = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.UnitsFromWater:
                        this.UnitsFromWater = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.UnitsFromWaterType:
                        this.UnitsFromWaterType = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.PositionRange:
                        this.PositionRange = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.HeightRange:
                        this.HeightRange = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.ColorRange:
                        this.ColorRange = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.WavePeriod:
                        this.WavePeriod = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Model != null) return true;
                if (Density != null) return true;
                if (MinSlope != null) return true;
                if (MaxSlope != null) return true;
                if (Unknown != null) return true;
                if (UnitsFromWater != null) return true;
                if (Unknown2 != null) return true;
                if (UnitsFromWaterType != null) return true;
                if (PositionRange != null) return true;
                if (HeightRange != null) return true;
                if (ColorRange != null) return true;
                if (WavePeriod != null) return true;
                if (Flags != null) return true;
                if (Unknown3 != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                Model?.ToString(fg);
                fg.AppendItem(Density, "Density");
                fg.AppendItem(MinSlope, "MinSlope");
                fg.AppendItem(MaxSlope, "MaxSlope");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(UnitsFromWater, "UnitsFromWater");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(UnitsFromWaterType, "UnitsFromWaterType");
                fg.AppendItem(PositionRange, "PositionRange");
                fg.AppendItem(HeightRange, "HeightRange");
                fg.AppendItem(ColorRange, "ColorRange");
                fg.AppendItem(WavePeriod, "WavePeriod");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Unknown3, "Unknown3");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Density = this.Density.Combine(rhs.Density);
                ret.MinSlope = this.MinSlope.Combine(rhs.MinSlope);
                ret.MaxSlope = this.MaxSlope.Combine(rhs.MaxSlope);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.UnitsFromWater = this.UnitsFromWater.Combine(rhs.UnitsFromWater);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.UnitsFromWaterType = this.UnitsFromWaterType.Combine(rhs.UnitsFromWaterType);
                ret.PositionRange = this.PositionRange.Combine(rhs.PositionRange);
                ret.HeightRange = this.HeightRange.Combine(rhs.HeightRange);
                ret.ColorRange = this.ColorRange.Combine(rhs.ColorRange);
                ret.WavePeriod = this.WavePeriod.Combine(rhs.WavePeriod);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public Model.TranslationMask? Model;
            public bool Density;
            public bool MinSlope;
            public bool MaxSlope;
            public bool Unknown;
            public bool UnitsFromWater;
            public bool Unknown2;
            public bool UnitsFromWaterType;
            public bool PositionRange;
            public bool HeightRange;
            public bool ColorRange;
            public bool WavePeriod;
            public bool Flags;
            public bool Unknown3;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Density = defaultOn;
                this.MinSlope = defaultOn;
                this.MaxSlope = defaultOn;
                this.Unknown = defaultOn;
                this.UnitsFromWater = defaultOn;
                this.Unknown2 = defaultOn;
                this.UnitsFromWaterType = defaultOn;
                this.PositionRange = defaultOn;
                this.HeightRange = defaultOn;
                this.ColorRange = defaultOn;
                this.WavePeriod = defaultOn;
                this.Flags = defaultOn;
                this.Unknown3 = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Density, null));
                ret.Add((MinSlope, null));
                ret.Add((MaxSlope, null));
                ret.Add((Unknown, null));
                ret.Add((UnitsFromWater, null));
                ret.Add((Unknown2, null));
                ret.Add((UnitsFromWaterType, null));
                ret.Add((PositionRange, null));
                ret.Add((HeightRange, null));
                ret.Add((ColorRange, null));
                ret.Add((WavePeriod, null));
                ret.Add((Flags, null));
                ret.Add((Unknown3, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Grass_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => GrassCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => GrassSetterCommon.Instance.RemapLinks(this, mapping);
        public Grass(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Grass(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Grass(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Grass(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Grass(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GrassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((GrassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Grass CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Grass();
            ((GrassSetterCommon)((IGrassGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Grass item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((GrassSetterCommon)((IGrassGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Grass GetNew()
        {
            return new Grass();
        }

    }
    #endregion

    #region Interface
    public partial interface IGrass :
        IGrassGetter,
        IFallout4MajorRecord,
        IModeled,
        IObjectBounded,
        ILoquiObjectSetter<IGrassInternal>,
        IFormLinkContainer
    {
        new ObjectBounds ObjectBounds { get; set; }
        new Model? Model { get; set; }
        new Byte Density { get; set; }
        new Byte MinSlope { get; set; }
        new Byte MaxSlope { get; set; }
        new Byte Unknown { get; set; }
        new UInt16 UnitsFromWater { get; set; }
        new UInt16 Unknown2 { get; set; }
        new Grass.UnitsFromWaterTypeEnum UnitsFromWaterType { get; set; }
        new Single PositionRange { get; set; }
        new Single HeightRange { get; set; }
        new Single ColorRange { get; set; }
        new Single WavePeriod { get; set; }
        new Grass.Flag Flags { get; set; }
        new MemorySlice<Byte> Unknown3 { get; set; }
        new Grass.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IGrassInternal :
        IFallout4MajorRecordInternal,
        IGrass,
        IGrassGetter
    {
    }

    public partial interface IGrassGetter :
        IFallout4MajorRecordGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        ILoquiObject<IGrassGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Grass_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        IModelGetter? Model { get; }
        Byte Density { get; }
        Byte MinSlope { get; }
        Byte MaxSlope { get; }
        Byte Unknown { get; }
        UInt16 UnitsFromWater { get; }
        UInt16 Unknown2 { get; }
        Grass.UnitsFromWaterTypeEnum UnitsFromWaterType { get; }
        Single PositionRange { get; }
        Single HeightRange { get; }
        Single ColorRange { get; }
        Single WavePeriod { get; }
        Grass.Flag Flags { get; }
        ReadOnlyMemorySlice<Byte> Unknown3 { get; }
        Grass.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GrassMixIn
    {
        public static void Clear(this IGrassInternal item)
        {
            ((GrassSetterCommon)((IGrassGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Grass.Mask<bool> GetEqualsMask(
            this IGrassGetter item,
            IGrassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IGrassGetter item,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IGrassGetter item,
            FileGeneration fg,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            ((GrassCommon)((IGrassGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGrassGetter item,
            IGrassGetter rhs)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IGrassInternal lhs,
            IGrassGetter rhs,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GrassSetterTranslationCommon)((IGrassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Grass.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGrassInternal lhs,
            IGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GrassSetterTranslationCommon)((IGrassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Grass DeepCopy(
            this IGrassGetter item,
            Grass.TranslationMask? copyMask = null)
        {
            return ((GrassSetterTranslationCommon)((IGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Grass DeepCopy(
            this IGrassGetter item,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? copyMask = null)
        {
            return ((GrassSetterTranslationCommon)((IGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Grass DeepCopy(
            this IGrassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GrassSetterTranslationCommon)((IGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Grass Duplicate(
            this IGrassGetter item,
            FormKey formKey,
            Grass.TranslationMask? copyMask = null)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGrassInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((GrassSetterCommon)((IGrassGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Grass_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Model = 7,
        Density = 8,
        MinSlope = 9,
        MaxSlope = 10,
        Unknown = 11,
        UnitsFromWater = 12,
        Unknown2 = 13,
        UnitsFromWaterType = 14,
        PositionRange = 15,
        HeightRange = 16,
        ColorRange = 17,
        WavePeriod = 18,
        Flags = 19,
        Unknown3 = 20,
        DATADataTypeState = 21,
    }
    #endregion

    #region Registration
    public partial class Grass_Registration : ILoquiRegistration
    {
        public static readonly Grass_Registration Instance = new Grass_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 129,
            version: 0);

        public const string GUID = "40ec1abd-2509-4d30-b323-24e660c36412";

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(Grass.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Grass.ErrorMask);

        public static readonly Type ClassType = typeof(Grass);

        public static readonly Type GetterType = typeof(IGrassGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGrass);

        public static readonly Type? InternalSetterType = typeof(IGrassInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Grass";

        public const string Name = "Grass";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.GRAS;
        public static readonly Type BinaryWriteTranslation = typeof(GrassBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class GrassSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly GrassSetterCommon Instance = new GrassSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGrassInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Model = null;
            item.Density = default;
            item.MinSlope = default;
            item.MaxSlope = default;
            item.Unknown = default;
            item.UnitsFromWater = default;
            item.Unknown2 = default;
            item.UnitsFromWaterType = default;
            item.PositionRange = default;
            item.HeightRange = default;
            item.ColorRange = default;
            item.WavePeriod = default;
            item.Flags = default;
            item.Unknown3 = new byte[3];
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IGrassInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IGrassInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IGrass obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Model?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGrassInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IGrassInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: GrassBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: GrassBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Grass)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Grass)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class GrassCommon : Fallout4MajorRecordCommon
    {
        public new static readonly GrassCommon Instance = new GrassCommon();

        public Grass.Mask<bool> GetEqualsMask(
            IGrassGetter item,
            IGrassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Grass.Mask<bool>(false);
            ((GrassCommon)((IGrassGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGrassGetter item,
            IGrassGetter rhs,
            Grass.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Density = item.Density == rhs.Density;
            ret.MinSlope = item.MinSlope == rhs.MinSlope;
            ret.MaxSlope = item.MaxSlope == rhs.MaxSlope;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.UnitsFromWater = item.UnitsFromWater == rhs.UnitsFromWater;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.UnitsFromWaterType = item.UnitsFromWaterType == rhs.UnitsFromWaterType;
            ret.PositionRange = item.PositionRange.EqualsWithin(rhs.PositionRange);
            ret.HeightRange = item.HeightRange.EqualsWithin(rhs.HeightRange);
            ret.ColorRange = item.ColorRange.EqualsWithin(rhs.ColorRange);
            ret.WavePeriod = item.WavePeriod.EqualsWithin(rhs.WavePeriod);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Unknown3 = MemoryExtensions.SequenceEqual(item.Unknown3.Span, rhs.Unknown3.Span);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IGrassGetter item,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IGrassGetter item,
            FileGeneration fg,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Grass =>");
            }
            else
            {
                fg.AppendLine($"{name} (Grass) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IGrassGetter item,
            FileGeneration fg,
            Grass.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.Density ?? true)
            {
                fg.AppendItem(item.Density, "Density");
            }
            if (printMask?.MinSlope ?? true)
            {
                fg.AppendItem(item.MinSlope, "MinSlope");
            }
            if (printMask?.MaxSlope ?? true)
            {
                fg.AppendItem(item.MaxSlope, "MaxSlope");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.UnitsFromWater ?? true)
            {
                fg.AppendItem(item.UnitsFromWater, "UnitsFromWater");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.UnitsFromWaterType ?? true)
            {
                fg.AppendItem(item.UnitsFromWaterType, "UnitsFromWaterType");
            }
            if (printMask?.PositionRange ?? true)
            {
                fg.AppendItem(item.PositionRange, "PositionRange");
            }
            if (printMask?.HeightRange ?? true)
            {
                fg.AppendItem(item.HeightRange, "HeightRange");
            }
            if (printMask?.ColorRange ?? true)
            {
                fg.AppendItem(item.ColorRange, "ColorRange");
            }
            if (printMask?.WavePeriod ?? true)
            {
                fg.AppendItem(item.WavePeriod, "WavePeriod");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Unknown3 ?? true)
            {
                fg.AppendLine($"Unknown3 => {SpanExt.ToHexString(item.Unknown3)}");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static Grass_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Grass_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Grass_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Grass_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Grass_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Grass_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Grass_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Grass_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Grass_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGrassGetter? lhs,
            IGrassGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (lhs.Density != rhs.Density) return false;
            if (lhs.MinSlope != rhs.MinSlope) return false;
            if (lhs.MaxSlope != rhs.MaxSlope) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.UnitsFromWater != rhs.UnitsFromWater) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            if (lhs.UnitsFromWaterType != rhs.UnitsFromWaterType) return false;
            if (!lhs.PositionRange.EqualsWithin(rhs.PositionRange)) return false;
            if (!lhs.HeightRange.EqualsWithin(rhs.HeightRange)) return false;
            if (!lhs.ColorRange.EqualsWithin(rhs.ColorRange)) return false;
            if (!lhs.WavePeriod.EqualsWithin(rhs.WavePeriod)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown3.Span, rhs.Unknown3.Span)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IGrassGetter?)lhs,
                rhs: rhs as IGrassGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IGrassGetter?)lhs,
                rhs: rhs as IGrassGetter);
        }
        
        public virtual int GetHashCode(IGrassGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Density);
            hash.Add(item.MinSlope);
            hash.Add(item.MaxSlope);
            hash.Add(item.Unknown);
            hash.Add(item.UnitsFromWater);
            hash.Add(item.Unknown2);
            hash.Add(item.UnitsFromWaterType);
            hash.Add(item.PositionRange);
            hash.Add(item.HeightRange);
            hash.Add(item.ColorRange);
            hash.Add(item.WavePeriod);
            hash.Add(item.Flags);
            hash.Add(item.Unknown3);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IGrassGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IGrassGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Grass.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IGrassGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Grass Duplicate(
            IGrassGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Grass(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGrass)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGrass)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class GrassSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly GrassSetterTranslationCommon Instance = new GrassSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGrassInternal item,
            IGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IGrass item,
            IGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Grass_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Grass_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Density) ?? true))
            {
                item.Density = rhs.Density;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.MinSlope) ?? true))
            {
                item.MinSlope = rhs.MinSlope;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.MaxSlope) ?? true))
            {
                item.MaxSlope = rhs.MaxSlope;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.UnitsFromWater) ?? true))
            {
                item.UnitsFromWater = rhs.UnitsFromWater;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.UnitsFromWaterType) ?? true))
            {
                item.UnitsFromWaterType = rhs.UnitsFromWaterType;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.PositionRange) ?? true))
            {
                item.PositionRange = rhs.PositionRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.HeightRange) ?? true))
            {
                item.HeightRange = rhs.HeightRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.ColorRange) ?? true))
            {
                item.ColorRange = rhs.ColorRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.WavePeriod) ?? true))
            {
                item.WavePeriod = rhs.WavePeriod;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGrassInternal)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGrass)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGrassInternal)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGrass)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Grass DeepCopy(
            IGrassGetter item,
            Grass.TranslationMask? copyMask = null)
        {
            Grass ret = (Grass)((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetNew();
            ((GrassSetterTranslationCommon)((IGrassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Grass DeepCopy(
            IGrassGetter item,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Grass ret = (Grass)((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetNew();
            ((GrassSetterTranslationCommon)((IGrassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Grass.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Grass DeepCopy(
            IGrassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Grass ret = (Grass)((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetNew();
            ((GrassSetterTranslationCommon)((IGrassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Grass
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Grass_Registration.Instance;
        public new static Grass_Registration Registration => Grass_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GrassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GrassSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GrassSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class GrassBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static GrassBinaryWriteTranslation Instance = new GrassBinaryWriteTranslation();

        public static void WriteEmbedded(
            IGrassGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IGrassGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Density);
                writer.Write(item.MinSlope);
                writer.Write(item.MaxSlope);
                writer.Write(item.Unknown);
                writer.Write(item.UnitsFromWater);
                writer.Write(item.Unknown2);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Grass.UnitsFromWaterTypeEnum>.Instance.Write(
                    writer,
                    item.UnitsFromWaterType,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.PositionRange);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HeightRange);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorRange);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.WavePeriod);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Grass.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown3);
            }
        }

        public void Write(
            MutagenWriter writer,
            IGrassGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.GRAS),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IGrassGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IGrassGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IGrassGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class GrassBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static GrassBinaryCreateTranslation Instance = new GrassBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.GRAS;
        public static void FillBinaryStructs(
            IGrassInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IGrassInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Grass_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Grass_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Density = dataFrame.ReadUInt8();
                    item.MinSlope = dataFrame.ReadUInt8();
                    item.MaxSlope = dataFrame.ReadUInt8();
                    item.Unknown = dataFrame.ReadUInt8();
                    item.UnitsFromWater = dataFrame.ReadUInt16();
                    item.Unknown2 = dataFrame.ReadUInt16();
                    item.UnitsFromWaterType = EnumBinaryTranslation<Grass.UnitsFromWaterTypeEnum>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.PositionRange = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HeightRange = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ColorRange = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.WavePeriod = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Flags = EnumBinaryTranslation<Grass.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Unknown3 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(3));
                    return (int)Grass_FieldIndex.Unknown3;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class GrassBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class GrassBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IGrassGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Grass_Registration.Instance;
        public new static Grass_Registration Registration => Grass_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GrassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GrassSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => GrassCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GrassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((GrassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        public IModelGetter? Model { get; private set; }
        private int? _DATALocation;
        public Grass.DATADataType DATADataTypeState { get; private set; }
        #region Density
        private int _DensityLocation => _DATALocation!.Value;
        private bool _Density_IsSet => _DATALocation.HasValue;
        public Byte Density => _Density_IsSet ? _data.Span[_DensityLocation] : default;
        #endregion
        #region MinSlope
        private int _MinSlopeLocation => _DATALocation!.Value + 0x1;
        private bool _MinSlope_IsSet => _DATALocation.HasValue;
        public Byte MinSlope => _MinSlope_IsSet ? _data.Span[_MinSlopeLocation] : default;
        #endregion
        #region MaxSlope
        private int _MaxSlopeLocation => _DATALocation!.Value + 0x2;
        private bool _MaxSlope_IsSet => _DATALocation.HasValue;
        public Byte MaxSlope => _MaxSlope_IsSet ? _data.Span[_MaxSlopeLocation] : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value + 0x3;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public Byte Unknown => _Unknown_IsSet ? _data.Span[_UnknownLocation] : default;
        #endregion
        #region UnitsFromWater
        private int _UnitsFromWaterLocation => _DATALocation!.Value + 0x4;
        private bool _UnitsFromWater_IsSet => _DATALocation.HasValue;
        public UInt16 UnitsFromWater => _UnitsFromWater_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(_UnitsFromWaterLocation, 2)) : default;
        #endregion
        #region Unknown2
        private int _Unknown2Location => _DATALocation!.Value + 0x6;
        private bool _Unknown2_IsSet => _DATALocation.HasValue;
        public UInt16 Unknown2 => _Unknown2_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(_Unknown2Location, 2)) : default;
        #endregion
        #region UnitsFromWaterType
        private int _UnitsFromWaterTypeLocation => _DATALocation!.Value + 0x8;
        private bool _UnitsFromWaterType_IsSet => _DATALocation.HasValue;
        public Grass.UnitsFromWaterTypeEnum UnitsFromWaterType => _UnitsFromWaterType_IsSet ? (Grass.UnitsFromWaterTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_UnitsFromWaterTypeLocation, 0x4)) : default;
        #endregion
        #region PositionRange
        private int _PositionRangeLocation => _DATALocation!.Value + 0xC;
        private bool _PositionRange_IsSet => _DATALocation.HasValue;
        public Single PositionRange => _PositionRange_IsSet ? _data.Slice(_PositionRangeLocation, 4).Float() : default;
        #endregion
        #region HeightRange
        private int _HeightRangeLocation => _DATALocation!.Value + 0x10;
        private bool _HeightRange_IsSet => _DATALocation.HasValue;
        public Single HeightRange => _HeightRange_IsSet ? _data.Slice(_HeightRangeLocation, 4).Float() : default;
        #endregion
        #region ColorRange
        private int _ColorRangeLocation => _DATALocation!.Value + 0x14;
        private bool _ColorRange_IsSet => _DATALocation.HasValue;
        public Single ColorRange => _ColorRange_IsSet ? _data.Slice(_ColorRangeLocation, 4).Float() : default;
        #endregion
        #region WavePeriod
        private int _WavePeriodLocation => _DATALocation!.Value + 0x18;
        private bool _WavePeriod_IsSet => _DATALocation.HasValue;
        public Single WavePeriod => _WavePeriod_IsSet ? _data.Slice(_WavePeriodLocation, 4).Float() : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x1C;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Grass.Flag Flags => _Flags_IsSet ? (Grass.Flag)_data.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region Unknown3
        private int _Unknown3Location => _DATALocation!.Value + 0x1D;
        private bool _Unknown3_IsSet => _DATALocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown3 => _Unknown3_IsSet ? _data.Span.Slice(_Unknown3Location, 3).ToArray() : default(ReadOnlyMemorySlice<byte>);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GrassBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static GrassBinaryOverlay GrassFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new GrassBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static GrassBinaryOverlay GrassFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return GrassFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Grass_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Grass_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Grass_FieldIndex.Unknown3;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            GrassMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IGrassGetter rhs)) return false;
            return ((GrassCommon)((IGrassGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IGrassGetter? obj)
        {
            return ((GrassCommon)((IGrassGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((GrassCommon)((IGrassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

