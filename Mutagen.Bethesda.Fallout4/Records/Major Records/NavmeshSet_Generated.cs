/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class NavmeshSet :
        INavmeshSet,
        ILoquiObjectSetter<NavmeshSet>,
        IEquatable<INavmeshSetGetter>
    {
        #region Ctor
        public NavmeshSet()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Navmeshes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IANavigationMeshGetter>> _Navmeshes = new ExtendedList<IFormLink<IANavigationMeshGetter>>();
        public ExtendedList<IFormLink<IANavigationMeshGetter>> Navmeshes
        {
            get => this._Navmeshes;
            protected set => this._Navmeshes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IANavigationMeshGetter>> INavmeshSetGetter.Navmeshes => _Navmeshes;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NavmeshSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INavmeshSetGetter rhs)) return false;
            return ((NavmeshSetCommon)((INavmeshSetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INavmeshSetGetter? obj)
        {
            return ((NavmeshSetCommon)((INavmeshSetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NavmeshSetCommon)((INavmeshSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem Navmeshes)
            {
                this.Navmeshes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Navmeshes, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Navmeshes;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Navmeshes, rhs.Navmeshes)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Navmeshes);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (this.Navmeshes != null)
                {
                    if (!eval(this.Navmeshes.Overall)) return false;
                    if (this.Navmeshes.Specific != null)
                    {
                        foreach (var item in this.Navmeshes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (this.Navmeshes != null)
                {
                    if (eval(this.Navmeshes.Overall)) return true;
                    if (this.Navmeshes.Specific != null)
                    {
                        foreach (var item in this.Navmeshes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NavmeshSet.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                if (Navmeshes != null)
                {
                    obj.Navmeshes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Navmeshes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Navmeshes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Navmeshes.Specific = l;
                        foreach (var item in Navmeshes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NavmeshSet.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NavmeshSet.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NavmeshSet.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.Navmeshes?.Overall ?? true)
                        && Navmeshes.TryGet(out var NavmeshesItem))
                    {
                        fg.AppendLine("Navmeshes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(NavmeshesItem.Overall);
                            if (NavmeshesItem.Specific != null)
                            {
                                foreach (var subItem in NavmeshesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Navmeshes;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NavmeshSet_FieldIndex enu = (NavmeshSet_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshSet_FieldIndex.Navmeshes:
                        return Navmeshes;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NavmeshSet_FieldIndex enu = (NavmeshSet_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshSet_FieldIndex.Navmeshes:
                        this.Navmeshes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NavmeshSet_FieldIndex enu = (NavmeshSet_FieldIndex)index;
                switch (enu)
                {
                    case NavmeshSet_FieldIndex.Navmeshes:
                        this.Navmeshes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Navmeshes != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                if (Navmeshes.TryGet(out var NavmeshesItem))
                {
                    fg.AppendLine("Navmeshes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(NavmeshesItem.Overall);
                        if (NavmeshesItem.Specific != null)
                        {
                            foreach (var subItem in NavmeshesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Navmeshes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Navmeshes?.Overall, rhs.Navmeshes?.Overall), ExceptionExt.Combine(this.Navmeshes?.Specific, rhs.Navmeshes?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Navmeshes;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Navmeshes = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Navmeshes, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<FormLinkInformation> ContainedFormLinks => NavmeshSetCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavmeshSetSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavmeshSetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavmeshSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static NavmeshSet CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NavmeshSet();
            ((NavmeshSetSetterCommon)((INavmeshSetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NavmeshSet item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((NavmeshSetSetterCommon)((INavmeshSetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NavmeshSet GetNew()
        {
            return new NavmeshSet();
        }

    }
    #endregion

    #region Interface
    public partial interface INavmeshSet :
        INavmeshSetGetter,
        ILoquiObjectSetter<INavmeshSet>,
        IFormLinkContainer
    {
        new ExtendedList<IFormLink<IANavigationMeshGetter>> Navmeshes { get; }
    }

    public partial interface INavmeshSetGetter :
        ILoquiObject,
        ILoquiObject<INavmeshSetGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => NavmeshSet_Registration.Instance;
        IReadOnlyList<IFormLink<IANavigationMeshGetter>> Navmeshes { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NavmeshSetMixIn
    {
        public static void Clear(this INavmeshSet item)
        {
            ((NavmeshSetSetterCommon)((INavmeshSetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NavmeshSet.Mask<bool> GetEqualsMask(
            this INavmeshSetGetter item,
            INavmeshSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NavmeshSetCommon)((INavmeshSetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INavmeshSetGetter item,
            string? name = null,
            NavmeshSet.Mask<bool>? printMask = null)
        {
            return ((NavmeshSetCommon)((INavmeshSetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INavmeshSetGetter item,
            FileGeneration fg,
            string? name = null,
            NavmeshSet.Mask<bool>? printMask = null)
        {
            ((NavmeshSetCommon)((INavmeshSetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INavmeshSetGetter item,
            INavmeshSetGetter rhs)
        {
            return ((NavmeshSetCommon)((INavmeshSetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this INavmeshSet lhs,
            INavmeshSetGetter rhs)
        {
            ((NavmeshSetSetterTranslationCommon)((INavmeshSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavmeshSet lhs,
            INavmeshSetGetter rhs,
            NavmeshSet.TranslationMask? copyMask = null)
        {
            ((NavmeshSetSetterTranslationCommon)((INavmeshSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavmeshSet lhs,
            INavmeshSetGetter rhs,
            out NavmeshSet.ErrorMask errorMask,
            NavmeshSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NavmeshSetSetterTranslationCommon)((INavmeshSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NavmeshSet.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INavmeshSet lhs,
            INavmeshSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NavmeshSetSetterTranslationCommon)((INavmeshSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NavmeshSet DeepCopy(
            this INavmeshSetGetter item,
            NavmeshSet.TranslationMask? copyMask = null)
        {
            return ((NavmeshSetSetterTranslationCommon)((INavmeshSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NavmeshSet DeepCopy(
            this INavmeshSetGetter item,
            out NavmeshSet.ErrorMask errorMask,
            NavmeshSet.TranslationMask? copyMask = null)
        {
            return ((NavmeshSetSetterTranslationCommon)((INavmeshSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NavmeshSet DeepCopy(
            this INavmeshSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NavmeshSetSetterTranslationCommon)((INavmeshSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INavmeshSet item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavmeshSetSetterCommon)((INavmeshSetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum NavmeshSet_FieldIndex
    {
        Navmeshes = 0,
    }
    #endregion

    #region Registration
    public partial class NavmeshSet_Registration : ILoquiRegistration
    {
        public static readonly NavmeshSet_Registration Instance = new NavmeshSet_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 281,
            version: 0);

        public const string GUID = "f1a0d70b-42bc-418c-8a71-248af57c2337";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(NavmeshSet.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NavmeshSet.ErrorMask);

        public static readonly Type ClassType = typeof(NavmeshSet);

        public static readonly Type GetterType = typeof(INavmeshSetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INavmeshSet);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.NavmeshSet";

        public const string Name = "NavmeshSet";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(NavmeshSetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class NavmeshSetSetterCommon
    {
        public static readonly NavmeshSetSetterCommon Instance = new NavmeshSetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INavmeshSet item)
        {
            ClearPartial();
            item.Navmeshes.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(INavmeshSet obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Navmeshes.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INavmeshSet item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: NavmeshSetBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class NavmeshSetCommon
    {
        public static readonly NavmeshSetCommon Instance = new NavmeshSetCommon();

        public NavmeshSet.Mask<bool> GetEqualsMask(
            INavmeshSetGetter item,
            INavmeshSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NavmeshSet.Mask<bool>(false);
            ((NavmeshSetCommon)((INavmeshSetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INavmeshSetGetter item,
            INavmeshSetGetter rhs,
            NavmeshSet.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Navmeshes = item.Navmeshes.CollectionEqualsHelper(
                rhs.Navmeshes,
                (l, r) => object.Equals(l, r),
                include);
        }
        
        public string ToString(
            INavmeshSetGetter item,
            string? name = null,
            NavmeshSet.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INavmeshSetGetter item,
            FileGeneration fg,
            string? name = null,
            NavmeshSet.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NavmeshSet =>");
            }
            else
            {
                fg.AppendLine($"{name} (NavmeshSet) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INavmeshSetGetter item,
            FileGeneration fg,
            NavmeshSet.Mask<bool>? printMask = null)
        {
            if (printMask?.Navmeshes?.Overall ?? true)
            {
                fg.AppendLine("Navmeshes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Navmeshes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INavmeshSetGetter? lhs,
            INavmeshSetGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Navmeshes.SequenceEqualNullable(rhs.Navmeshes)) return false;
            return true;
        }
        
        public virtual int GetHashCode(INavmeshSetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Navmeshes);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NavmeshSet.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(INavmeshSetGetter obj)
        {
            foreach (var item in obj.Navmeshes)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class NavmeshSetSetterTranslationCommon
    {
        public static readonly NavmeshSetSetterTranslationCommon Instance = new NavmeshSetSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INavmeshSet item,
            INavmeshSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NavmeshSet_FieldIndex.Navmeshes) ?? true))
            {
                errorMask?.PushIndex((int)NavmeshSet_FieldIndex.Navmeshes);
                try
                {
                    item.Navmeshes.SetTo(
                        rhs.Navmeshes
                        .Select(r => (IFormLink<IANavigationMeshGetter>)new FormLink<IANavigationMeshGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public NavmeshSet DeepCopy(
            INavmeshSetGetter item,
            NavmeshSet.TranslationMask? copyMask = null)
        {
            NavmeshSet ret = (NavmeshSet)((NavmeshSetCommon)((INavmeshSetGetter)item).CommonInstance()!).GetNew();
            ((NavmeshSetSetterTranslationCommon)((INavmeshSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NavmeshSet DeepCopy(
            INavmeshSetGetter item,
            out NavmeshSet.ErrorMask errorMask,
            NavmeshSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NavmeshSet ret = (NavmeshSet)((NavmeshSetCommon)((INavmeshSetGetter)item).CommonInstance()!).GetNew();
            ((NavmeshSetSetterTranslationCommon)((INavmeshSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NavmeshSet.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NavmeshSet DeepCopy(
            INavmeshSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NavmeshSet ret = (NavmeshSet)((NavmeshSetCommon)((INavmeshSetGetter)item).CommonInstance()!).GetNew();
            ((NavmeshSetSetterTranslationCommon)((INavmeshSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class NavmeshSet
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavmeshSet_Registration.Instance;
        public static NavmeshSet_Registration Registration => NavmeshSet_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavmeshSetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NavmeshSetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavmeshSetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavmeshSetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INavmeshSetGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INavmeshSetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NavmeshSetBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static NavmeshSetBinaryWriteTranslation Instance = new NavmeshSetBinaryWriteTranslation();

        public static void WriteEmbedded(
            INavmeshSetGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IANavigationMeshGetter>>.Instance.Write(
                writer: writer,
                items: item.Navmeshes,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IFormLink<IANavigationMeshGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public void Write(
            MutagenWriter writer,
            INavmeshSetGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INavmeshSetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class NavmeshSetBinaryCreateTranslation
    {
        public readonly static NavmeshSetBinaryCreateTranslation Instance = new NavmeshSetBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INavmeshSet item,
            MutagenFrame frame)
        {
            item.Navmeshes.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IANavigationMeshGetter>>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    frame: frame,
                    transl: FormLinkBinaryTranslation.Instance.Parse));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NavmeshSetBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INavmeshSetGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavmeshSetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NavmeshSetBinaryOverlay :
        BinaryOverlay,
        INavmeshSetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavmeshSet_Registration.Instance;
        public static NavmeshSet_Registration Registration => NavmeshSet_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavmeshSetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavmeshSetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavmeshSetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INavmeshSetGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INavmeshSetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => NavmeshSetCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavmeshSetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavmeshSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Navmeshes
        public IReadOnlyList<IFormLink<IANavigationMeshGetter>> Navmeshes => BinaryOverlayList.FactoryByCountLength<IFormLink<IANavigationMeshGetter>>(_data, _package, 4, countLength: 4, (s, p) => new FormLink<IANavigationMeshGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
        protected int NavmeshesEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NavmeshSetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static NavmeshSetBinaryOverlay NavmeshSetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NavmeshSetBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.NavmeshesEndingPos = BinaryPrimitives.ReadInt32LittleEndian(ret._data) * 4 + 4;
            stream.Position += ret.NavmeshesEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static NavmeshSetBinaryOverlay NavmeshSetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return NavmeshSetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NavmeshSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INavmeshSetGetter rhs)) return false;
            return ((NavmeshSetCommon)((INavmeshSetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INavmeshSetGetter? obj)
        {
            return ((NavmeshSetCommon)((INavmeshSetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NavmeshSetCommon)((INavmeshSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

