/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class NpcSoundTypes :
        ANpcSoundDefinition,
        INpcSoundTypes,
        ILoquiObjectSetter<NpcSoundTypes>,
        IEquatable<INpcSoundTypesGetter>
    {
        #region Ctor
        public NpcSoundTypes()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Types
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NpcSoundType> _Types = new ExtendedList<NpcSoundType>();
        public ExtendedList<NpcSoundType> Types
        {
            get => this._Types;
            protected set => this._Types = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INpcSoundTypeGetter> INpcSoundTypesGetter.Types => _Types;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcSoundTypesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INpcSoundTypesGetter rhs)) return false;
            return ((NpcSoundTypesCommon)((INpcSoundTypesGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INpcSoundTypesGetter? obj)
        {
            return ((NpcSoundTypesCommon)((INpcSoundTypesGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NpcSoundTypesCommon)((INpcSoundTypesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ANpcSoundDefinition.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem Types)
            : base()
            {
                this.Types = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcSoundType.Mask<TItem>?>>?>(Types, Enumerable.Empty<MaskItemIndexed<TItem, NpcSoundType.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcSoundType.Mask<TItem>?>>?>? Types;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Types, rhs.Types)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Types);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Types != null)
                {
                    if (!eval(this.Types.Overall)) return false;
                    if (this.Types.Specific != null)
                    {
                        foreach (var item in this.Types.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Types != null)
                {
                    if (eval(this.Types.Overall)) return true;
                    if (this.Types.Specific != null)
                    {
                        foreach (var item in this.Types.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcSoundTypes.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Types != null)
                {
                    obj.Types = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NpcSoundType.Mask<R>?>>?>(eval(this.Types.Overall), Enumerable.Empty<MaskItemIndexed<R, NpcSoundType.Mask<R>?>>());
                    if (Types.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NpcSoundType.Mask<R>?>>();
                        obj.Types.Specific = l;
                        foreach (var item in Types.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, NpcSoundType.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, NpcSoundType.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NpcSoundTypes.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NpcSoundTypes.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NpcSoundTypes.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.Types?.Overall ?? true)
                        && Types.TryGet(out var TypesItem))
                    {
                        fg.AppendLine("Types =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TypesItem.Overall);
                            if (TypesItem.Specific != null)
                            {
                                foreach (var subItem in TypesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ANpcSoundDefinition.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcSoundType.ErrorMask?>>?>? Types;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                NpcSoundTypes_FieldIndex enu = (NpcSoundTypes_FieldIndex)index;
                switch (enu)
                {
                    case NpcSoundTypes_FieldIndex.Types:
                        return Types;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                NpcSoundTypes_FieldIndex enu = (NpcSoundTypes_FieldIndex)index;
                switch (enu)
                {
                    case NpcSoundTypes_FieldIndex.Types:
                        this.Types = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcSoundType.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                NpcSoundTypes_FieldIndex enu = (NpcSoundTypes_FieldIndex)index;
                switch (enu)
                {
                    case NpcSoundTypes_FieldIndex.Types:
                        this.Types = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcSoundType.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Types != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (Types.TryGet(out var TypesItem))
                {
                    fg.AppendLine("Types =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TypesItem.Overall);
                        if (TypesItem.Specific != null)
                        {
                            foreach (var subItem in TypesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Types = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcSoundType.ErrorMask?>>?>(ExceptionExt.Combine(this.Types?.Overall, rhs.Types?.Overall), ExceptionExt.Combine(this.Types?.Specific, rhs.Types?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ANpcSoundDefinition.TranslationMask,
            ITranslationMask
        {
            #region Members
            public NpcSoundType.TranslationMask? Types;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Types == null ? DefaultOn : !Types.GetCrystal().CopyNothing, Types?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => NpcSoundTypesCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcSoundTypesSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcSoundTypesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcSoundTypesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static NpcSoundTypes CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NpcSoundTypes();
            ((NpcSoundTypesSetterCommon)((INpcSoundTypesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NpcSoundTypes item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((NpcSoundTypesSetterCommon)((INpcSoundTypesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new NpcSoundTypes GetNew()
        {
            return new NpcSoundTypes();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcSoundTypes :
        INpcSoundTypesGetter,
        IANpcSoundDefinition,
        ILoquiObjectSetter<INpcSoundTypes>,
        IFormLinkContainer
    {
        new ExtendedList<NpcSoundType> Types { get; }
    }

    public partial interface INpcSoundTypesGetter :
        IANpcSoundDefinitionGetter,
        ILoquiObject<INpcSoundTypesGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => NpcSoundTypes_Registration.Instance;
        IReadOnlyList<INpcSoundTypeGetter> Types { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcSoundTypesMixIn
    {
        public static void Clear(this INpcSoundTypes item)
        {
            ((NpcSoundTypesSetterCommon)((INpcSoundTypesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcSoundTypes.Mask<bool> GetEqualsMask(
            this INpcSoundTypesGetter item,
            INpcSoundTypesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcSoundTypesCommon)((INpcSoundTypesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INpcSoundTypesGetter item,
            string? name = null,
            NpcSoundTypes.Mask<bool>? printMask = null)
        {
            return ((NpcSoundTypesCommon)((INpcSoundTypesGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INpcSoundTypesGetter item,
            FileGeneration fg,
            string? name = null,
            NpcSoundTypes.Mask<bool>? printMask = null)
        {
            ((NpcSoundTypesCommon)((INpcSoundTypesGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcSoundTypesGetter item,
            INpcSoundTypesGetter rhs)
        {
            return ((NpcSoundTypesCommon)((INpcSoundTypesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this INpcSoundTypes lhs,
            INpcSoundTypesGetter rhs,
            out NpcSoundTypes.ErrorMask errorMask,
            NpcSoundTypes.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcSoundTypesSetterTranslationCommon)((INpcSoundTypesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NpcSoundTypes.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcSoundTypes lhs,
            INpcSoundTypesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcSoundTypesSetterTranslationCommon)((INpcSoundTypesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NpcSoundTypes DeepCopy(
            this INpcSoundTypesGetter item,
            NpcSoundTypes.TranslationMask? copyMask = null)
        {
            return ((NpcSoundTypesSetterTranslationCommon)((INpcSoundTypesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcSoundTypes DeepCopy(
            this INpcSoundTypesGetter item,
            out NpcSoundTypes.ErrorMask errorMask,
            NpcSoundTypes.TranslationMask? copyMask = null)
        {
            return ((NpcSoundTypesSetterTranslationCommon)((INpcSoundTypesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcSoundTypes DeepCopy(
            this INpcSoundTypesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcSoundTypesSetterTranslationCommon)((INpcSoundTypesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcSoundTypes item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcSoundTypesSetterCommon)((INpcSoundTypesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum NpcSoundTypes_FieldIndex
    {
        Types = 0,
    }
    #endregion

    #region Registration
    public partial class NpcSoundTypes_Registration : ILoquiRegistration
    {
        public static readonly NpcSoundTypes_Registration Instance = new NpcSoundTypes_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 212,
            version: 0);

        public const string GUID = "b3f45db9-9574-4f61-bc64-325358c7735d";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(NpcSoundTypes.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcSoundTypes.ErrorMask);

        public static readonly Type ClassType = typeof(NpcSoundTypes);

        public static readonly Type GetterType = typeof(INpcSoundTypesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcSoundTypes);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.NpcSoundTypes";

        public const string Name = "NpcSoundTypes";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.CSDT,
                        RecordTypes.CSDI,
                        RecordTypes.CSDC
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(NpcSoundTypesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class NpcSoundTypesSetterCommon : ANpcSoundDefinitionSetterCommon
    {
        public new static readonly NpcSoundTypesSetterCommon Instance = new NpcSoundTypesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcSoundTypes item)
        {
            ClearPartial();
            item.Types.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IANpcSoundDefinition item)
        {
            Clear(item: (INpcSoundTypes)item);
        }
        
        #region Mutagen
        public void RemapLinks(INpcSoundTypes obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Types.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcSoundTypes item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: NpcSoundTypesBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: NpcSoundTypesBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IANpcSoundDefinition item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (NpcSoundTypes)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class NpcSoundTypesCommon : ANpcSoundDefinitionCommon
    {
        public new static readonly NpcSoundTypesCommon Instance = new NpcSoundTypesCommon();

        public NpcSoundTypes.Mask<bool> GetEqualsMask(
            INpcSoundTypesGetter item,
            INpcSoundTypesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcSoundTypes.Mask<bool>(false);
            ((NpcSoundTypesCommon)((INpcSoundTypesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcSoundTypesGetter item,
            INpcSoundTypesGetter rhs,
            NpcSoundTypes.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Types = item.Types.CollectionEqualsHelper(
                rhs.Types,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            INpcSoundTypesGetter item,
            string? name = null,
            NpcSoundTypes.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INpcSoundTypesGetter item,
            FileGeneration fg,
            string? name = null,
            NpcSoundTypes.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NpcSoundTypes =>");
            }
            else
            {
                fg.AppendLine($"{name} (NpcSoundTypes) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INpcSoundTypesGetter item,
            FileGeneration fg,
            NpcSoundTypes.Mask<bool>? printMask = null)
        {
            ANpcSoundDefinitionCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Types?.Overall ?? true)
            {
                fg.AppendLine("Types =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Types)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static NpcSoundTypes_FieldIndex ConvertFieldIndex(ANpcSoundDefinition_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcSoundTypesGetter? lhs,
            INpcSoundTypesGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IANpcSoundDefinitionGetter)lhs, (IANpcSoundDefinitionGetter)rhs)) return false;
            if (!lhs.Types.SequenceEqualNullable(rhs.Types)) return false;
            return true;
        }
        
        public override bool Equals(
            IANpcSoundDefinitionGetter? lhs,
            IANpcSoundDefinitionGetter? rhs)
        {
            return Equals(
                lhs: (INpcSoundTypesGetter?)lhs,
                rhs: rhs as INpcSoundTypesGetter);
        }
        
        public virtual int GetHashCode(INpcSoundTypesGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Types);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IANpcSoundDefinitionGetter item)
        {
            return GetHashCode(item: (INpcSoundTypesGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return NpcSoundTypes.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(INpcSoundTypesGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Types.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class NpcSoundTypesSetterTranslationCommon : ANpcSoundDefinitionSetterTranslationCommon
    {
        public new static readonly NpcSoundTypesSetterTranslationCommon Instance = new NpcSoundTypesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcSoundTypes item,
            INpcSoundTypesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IANpcSoundDefinition)item,
                (IANpcSoundDefinitionGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)NpcSoundTypes_FieldIndex.Types) ?? true))
            {
                errorMask?.PushIndex((int)NpcSoundTypes_FieldIndex.Types);
                try
                {
                    item.Types.SetTo(
                        rhs.Types
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IANpcSoundDefinition item,
            IANpcSoundDefinitionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpcSoundTypes)item,
                rhs: (INpcSoundTypesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public NpcSoundTypes DeepCopy(
            INpcSoundTypesGetter item,
            NpcSoundTypes.TranslationMask? copyMask = null)
        {
            NpcSoundTypes ret = (NpcSoundTypes)((NpcSoundTypesCommon)((INpcSoundTypesGetter)item).CommonInstance()!).GetNew();
            ((NpcSoundTypesSetterTranslationCommon)((INpcSoundTypesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NpcSoundTypes DeepCopy(
            INpcSoundTypesGetter item,
            out NpcSoundTypes.ErrorMask errorMask,
            NpcSoundTypes.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NpcSoundTypes ret = (NpcSoundTypes)((NpcSoundTypesCommon)((INpcSoundTypesGetter)item).CommonInstance()!).GetNew();
            ((NpcSoundTypesSetterTranslationCommon)((INpcSoundTypesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NpcSoundTypes.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NpcSoundTypes DeepCopy(
            INpcSoundTypesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcSoundTypes ret = (NpcSoundTypes)((NpcSoundTypesCommon)((INpcSoundTypesGetter)item).CommonInstance()!).GetNew();
            ((NpcSoundTypesSetterTranslationCommon)((INpcSoundTypesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class NpcSoundTypes
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcSoundTypes_Registration.Instance;
        public new static NpcSoundTypes_Registration Registration => NpcSoundTypes_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcSoundTypesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NpcSoundTypesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSoundTypesSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NpcSoundTypesBinaryWriteTranslation :
        ANpcSoundDefinitionBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static NpcSoundTypesBinaryWriteTranslation Instance = new NpcSoundTypesBinaryWriteTranslation();

        public static void WriteRecordTypes(
            INpcSoundTypesGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<INpcSoundTypeGetter>.Instance.Write(
                writer: writer,
                items: item.Types,
                transl: (MutagenWriter subWriter, INpcSoundTypeGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((NpcSoundTypeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            INpcSoundTypesGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcSoundTypesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IANpcSoundDefinitionGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcSoundTypesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class NpcSoundTypesBinaryCreateTranslation : ANpcSoundDefinitionBinaryCreateTranslation
    {
        public new readonly static NpcSoundTypesBinaryCreateTranslation Instance = new NpcSoundTypesBinaryCreateTranslation();

        public static void FillBinaryStructs(
            INpcSoundTypes item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            INpcSoundTypes item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CSDT:
                case RecordTypeInts.CSDI:
                case RecordTypeInts.CSDC:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)NpcSoundTypes_FieldIndex.Types) return ParseResult.Stop;
                    item.Types.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<NpcSoundType>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: NpcSoundType_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: NpcSoundType.TryCreateFromBinary));
                    return (int)NpcSoundTypes_FieldIndex.Types;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NpcSoundTypesBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NpcSoundTypesBinaryOverlay :
        ANpcSoundDefinitionBinaryOverlay,
        INpcSoundTypesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcSoundTypes_Registration.Instance;
        public new static NpcSoundTypes_Registration Registration => NpcSoundTypes_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcSoundTypesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSoundTypesSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => NpcSoundTypesCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcSoundTypesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcSoundTypesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public IReadOnlyList<INpcSoundTypeGetter> Types { get; private set; } = ListExt.Empty<NpcSoundTypeBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcSoundTypesBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static NpcSoundTypesBinaryOverlay NpcSoundTypesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NpcSoundTypesBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static NpcSoundTypesBinaryOverlay NpcSoundTypesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return NpcSoundTypesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CSDT:
                case RecordTypeInts.CSDI:
                case RecordTypeInts.CSDC:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)NpcSoundTypes_FieldIndex.Types) return ParseResult.Stop;
                    this.Types = this.ParseRepeatedTypelessSubrecord<NpcSoundTypeBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: NpcSoundType_Registration.TriggeringRecordTypes,
                        factory:  NpcSoundTypeBinaryOverlay.NpcSoundTypeFactory);
                    return (int)NpcSoundTypes_FieldIndex.Types;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcSoundTypesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INpcSoundTypesGetter rhs)) return false;
            return ((NpcSoundTypesCommon)((INpcSoundTypesGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INpcSoundTypesGetter? obj)
        {
            return ((NpcSoundTypesCommon)((INpcSoundTypesGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NpcSoundTypesCommon)((INpcSoundTypesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

