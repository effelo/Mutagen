/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class FootstepSet :
        Fallout4MajorRecord,
        IFootstepSetInternal,
        ILoquiObjectSetter<FootstepSet>,
        IEquatable<IFootstepSetGetter>
    {
        #region Ctor
        protected FootstepSet()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region WalkForwardFootsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IFootstepGetter>> _WalkForwardFootsteps = new ExtendedList<IFormLink<IFootstepGetter>>();
        public ExtendedList<IFormLink<IFootstepGetter>> WalkForwardFootsteps
        {
            get => this._WalkForwardFootsteps;
            protected set => this._WalkForwardFootsteps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IFootstepGetter>> IFootstepSetGetter.WalkForwardFootsteps => _WalkForwardFootsteps;
        #endregion

        #endregion
        #region RunForwardFootsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IFootstepGetter>> _RunForwardFootsteps = new ExtendedList<IFormLink<IFootstepGetter>>();
        public ExtendedList<IFormLink<IFootstepGetter>> RunForwardFootsteps
        {
            get => this._RunForwardFootsteps;
            protected set => this._RunForwardFootsteps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IFootstepGetter>> IFootstepSetGetter.RunForwardFootsteps => _RunForwardFootsteps;
        #endregion

        #endregion
        #region WalkForwardAlternateFootsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IFootstepGetter>> _WalkForwardAlternateFootsteps = new ExtendedList<IFormLink<IFootstepGetter>>();
        public ExtendedList<IFormLink<IFootstepGetter>> WalkForwardAlternateFootsteps
        {
            get => this._WalkForwardAlternateFootsteps;
            protected set => this._WalkForwardAlternateFootsteps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IFootstepGetter>> IFootstepSetGetter.WalkForwardAlternateFootsteps => _WalkForwardAlternateFootsteps;
        #endregion

        #endregion
        #region RunForwardAlternateFootsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IFootstepGetter>> _RunForwardAlternateFootsteps = new ExtendedList<IFormLink<IFootstepGetter>>();
        public ExtendedList<IFormLink<IFootstepGetter>> RunForwardAlternateFootsteps
        {
            get => this._RunForwardAlternateFootsteps;
            protected set => this._RunForwardAlternateFootsteps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IFootstepGetter>> IFootstepSetGetter.RunForwardAlternateFootsteps => _RunForwardAlternateFootsteps;
        #endregion

        #endregion
        #region WalkForwardAlternateFootsteps2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IFootstepGetter>> _WalkForwardAlternateFootsteps2 = new ExtendedList<IFormLink<IFootstepGetter>>();
        public ExtendedList<IFormLink<IFootstepGetter>> WalkForwardAlternateFootsteps2
        {
            get => this._WalkForwardAlternateFootsteps2;
            protected set => this._WalkForwardAlternateFootsteps2 = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IFootstepGetter>> IFootstepSetGetter.WalkForwardAlternateFootsteps2 => _WalkForwardAlternateFootsteps2;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FootstepSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFootstepSetGetter rhs)) return false;
            return ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IFootstepSetGetter? obj)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.WalkForwardFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.RunForwardFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.WalkForwardAlternateFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.RunForwardAlternateFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.WalkForwardAlternateFootsteps2 = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem WalkForwardFootsteps,
                TItem RunForwardFootsteps,
                TItem WalkForwardAlternateFootsteps,
                TItem RunForwardAlternateFootsteps,
                TItem WalkForwardAlternateFootsteps2)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.WalkForwardFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(WalkForwardFootsteps, Enumerable.Empty<(int Index, TItem Value)>());
                this.RunForwardFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RunForwardFootsteps, Enumerable.Empty<(int Index, TItem Value)>());
                this.WalkForwardAlternateFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(WalkForwardAlternateFootsteps, Enumerable.Empty<(int Index, TItem Value)>());
                this.RunForwardAlternateFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RunForwardAlternateFootsteps, Enumerable.Empty<(int Index, TItem Value)>());
                this.WalkForwardAlternateFootsteps2 = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(WalkForwardAlternateFootsteps2, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? WalkForwardFootsteps;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RunForwardFootsteps;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? WalkForwardAlternateFootsteps;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RunForwardAlternateFootsteps;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? WalkForwardAlternateFootsteps2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.WalkForwardFootsteps, rhs.WalkForwardFootsteps)) return false;
                if (!object.Equals(this.RunForwardFootsteps, rhs.RunForwardFootsteps)) return false;
                if (!object.Equals(this.WalkForwardAlternateFootsteps, rhs.WalkForwardAlternateFootsteps)) return false;
                if (!object.Equals(this.RunForwardAlternateFootsteps, rhs.RunForwardAlternateFootsteps)) return false;
                if (!object.Equals(this.WalkForwardAlternateFootsteps2, rhs.WalkForwardAlternateFootsteps2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.WalkForwardFootsteps);
                hash.Add(this.RunForwardFootsteps);
                hash.Add(this.WalkForwardAlternateFootsteps);
                hash.Add(this.RunForwardAlternateFootsteps);
                hash.Add(this.WalkForwardAlternateFootsteps2);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.WalkForwardFootsteps != null)
                {
                    if (!eval(this.WalkForwardFootsteps.Overall)) return false;
                    if (this.WalkForwardFootsteps.Specific != null)
                    {
                        foreach (var item in this.WalkForwardFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.RunForwardFootsteps != null)
                {
                    if (!eval(this.RunForwardFootsteps.Overall)) return false;
                    if (this.RunForwardFootsteps.Specific != null)
                    {
                        foreach (var item in this.RunForwardFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.WalkForwardAlternateFootsteps != null)
                {
                    if (!eval(this.WalkForwardAlternateFootsteps.Overall)) return false;
                    if (this.WalkForwardAlternateFootsteps.Specific != null)
                    {
                        foreach (var item in this.WalkForwardAlternateFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.RunForwardAlternateFootsteps != null)
                {
                    if (!eval(this.RunForwardAlternateFootsteps.Overall)) return false;
                    if (this.RunForwardAlternateFootsteps.Specific != null)
                    {
                        foreach (var item in this.RunForwardAlternateFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.WalkForwardAlternateFootsteps2 != null)
                {
                    if (!eval(this.WalkForwardAlternateFootsteps2.Overall)) return false;
                    if (this.WalkForwardAlternateFootsteps2.Specific != null)
                    {
                        foreach (var item in this.WalkForwardAlternateFootsteps2.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.WalkForwardFootsteps != null)
                {
                    if (eval(this.WalkForwardFootsteps.Overall)) return true;
                    if (this.WalkForwardFootsteps.Specific != null)
                    {
                        foreach (var item in this.WalkForwardFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.RunForwardFootsteps != null)
                {
                    if (eval(this.RunForwardFootsteps.Overall)) return true;
                    if (this.RunForwardFootsteps.Specific != null)
                    {
                        foreach (var item in this.RunForwardFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.WalkForwardAlternateFootsteps != null)
                {
                    if (eval(this.WalkForwardAlternateFootsteps.Overall)) return true;
                    if (this.WalkForwardAlternateFootsteps.Specific != null)
                    {
                        foreach (var item in this.WalkForwardAlternateFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.RunForwardAlternateFootsteps != null)
                {
                    if (eval(this.RunForwardAlternateFootsteps.Overall)) return true;
                    if (this.RunForwardAlternateFootsteps.Specific != null)
                    {
                        foreach (var item in this.RunForwardAlternateFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.WalkForwardAlternateFootsteps2 != null)
                {
                    if (eval(this.WalkForwardAlternateFootsteps2.Overall)) return true;
                    if (this.WalkForwardAlternateFootsteps2.Specific != null)
                    {
                        foreach (var item in this.WalkForwardAlternateFootsteps2.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FootstepSet.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (WalkForwardFootsteps != null)
                {
                    obj.WalkForwardFootsteps = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.WalkForwardFootsteps.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (WalkForwardFootsteps.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.WalkForwardFootsteps.Specific = l;
                        foreach (var item in WalkForwardFootsteps.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (RunForwardFootsteps != null)
                {
                    obj.RunForwardFootsteps = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RunForwardFootsteps.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RunForwardFootsteps.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RunForwardFootsteps.Specific = l;
                        foreach (var item in RunForwardFootsteps.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (WalkForwardAlternateFootsteps != null)
                {
                    obj.WalkForwardAlternateFootsteps = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.WalkForwardAlternateFootsteps.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (WalkForwardAlternateFootsteps.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.WalkForwardAlternateFootsteps.Specific = l;
                        foreach (var item in WalkForwardAlternateFootsteps.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (RunForwardAlternateFootsteps != null)
                {
                    obj.RunForwardAlternateFootsteps = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RunForwardAlternateFootsteps.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RunForwardAlternateFootsteps.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RunForwardAlternateFootsteps.Specific = l;
                        foreach (var item in RunForwardAlternateFootsteps.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (WalkForwardAlternateFootsteps2 != null)
                {
                    obj.WalkForwardAlternateFootsteps2 = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.WalkForwardAlternateFootsteps2.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (WalkForwardAlternateFootsteps2.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.WalkForwardAlternateFootsteps2.Specific = l;
                        foreach (var item in WalkForwardAlternateFootsteps2.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FootstepSet.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, FootstepSet.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(FootstepSet.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.WalkForwardFootsteps?.Overall ?? true)
                        && WalkForwardFootsteps.TryGet(out var WalkForwardFootstepsItem))
                    {
                        fg.AppendLine("WalkForwardFootsteps =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(WalkForwardFootstepsItem.Overall);
                            if (WalkForwardFootstepsItem.Specific != null)
                            {
                                foreach (var subItem in WalkForwardFootstepsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.RunForwardFootsteps?.Overall ?? true)
                        && RunForwardFootsteps.TryGet(out var RunForwardFootstepsItem))
                    {
                        fg.AppendLine("RunForwardFootsteps =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RunForwardFootstepsItem.Overall);
                            if (RunForwardFootstepsItem.Specific != null)
                            {
                                foreach (var subItem in RunForwardFootstepsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.WalkForwardAlternateFootsteps?.Overall ?? true)
                        && WalkForwardAlternateFootsteps.TryGet(out var WalkForwardAlternateFootstepsItem))
                    {
                        fg.AppendLine("WalkForwardAlternateFootsteps =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(WalkForwardAlternateFootstepsItem.Overall);
                            if (WalkForwardAlternateFootstepsItem.Specific != null)
                            {
                                foreach (var subItem in WalkForwardAlternateFootstepsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.RunForwardAlternateFootsteps?.Overall ?? true)
                        && RunForwardAlternateFootsteps.TryGet(out var RunForwardAlternateFootstepsItem))
                    {
                        fg.AppendLine("RunForwardAlternateFootsteps =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RunForwardAlternateFootstepsItem.Overall);
                            if (RunForwardAlternateFootstepsItem.Specific != null)
                            {
                                foreach (var subItem in RunForwardAlternateFootstepsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.WalkForwardAlternateFootsteps2?.Overall ?? true)
                        && WalkForwardAlternateFootsteps2.TryGet(out var WalkForwardAlternateFootsteps2Item))
                    {
                        fg.AppendLine("WalkForwardAlternateFootsteps2 =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(WalkForwardAlternateFootsteps2Item.Overall);
                            if (WalkForwardAlternateFootsteps2Item.Specific != null)
                            {
                                foreach (var subItem in WalkForwardAlternateFootsteps2Item.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? WalkForwardFootsteps;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RunForwardFootsteps;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? WalkForwardAlternateFootsteps;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RunForwardAlternateFootsteps;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? WalkForwardAlternateFootsteps2;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                FootstepSet_FieldIndex enu = (FootstepSet_FieldIndex)index;
                switch (enu)
                {
                    case FootstepSet_FieldIndex.WalkForwardFootsteps:
                        return WalkForwardFootsteps;
                    case FootstepSet_FieldIndex.RunForwardFootsteps:
                        return RunForwardFootsteps;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps:
                        return WalkForwardAlternateFootsteps;
                    case FootstepSet_FieldIndex.RunForwardAlternateFootsteps:
                        return RunForwardAlternateFootsteps;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps2:
                        return WalkForwardAlternateFootsteps2;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                FootstepSet_FieldIndex enu = (FootstepSet_FieldIndex)index;
                switch (enu)
                {
                    case FootstepSet_FieldIndex.WalkForwardFootsteps:
                        this.WalkForwardFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case FootstepSet_FieldIndex.RunForwardFootsteps:
                        this.RunForwardFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps:
                        this.WalkForwardAlternateFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case FootstepSet_FieldIndex.RunForwardAlternateFootsteps:
                        this.RunForwardAlternateFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps2:
                        this.WalkForwardAlternateFootsteps2 = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                FootstepSet_FieldIndex enu = (FootstepSet_FieldIndex)index;
                switch (enu)
                {
                    case FootstepSet_FieldIndex.WalkForwardFootsteps:
                        this.WalkForwardFootsteps = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case FootstepSet_FieldIndex.RunForwardFootsteps:
                        this.RunForwardFootsteps = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps:
                        this.WalkForwardAlternateFootsteps = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case FootstepSet_FieldIndex.RunForwardAlternateFootsteps:
                        this.RunForwardAlternateFootsteps = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps2:
                        this.WalkForwardAlternateFootsteps2 = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (WalkForwardFootsteps != null) return true;
                if (RunForwardFootsteps != null) return true;
                if (WalkForwardAlternateFootsteps != null) return true;
                if (RunForwardAlternateFootsteps != null) return true;
                if (WalkForwardAlternateFootsteps2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (WalkForwardFootsteps.TryGet(out var WalkForwardFootstepsItem))
                {
                    fg.AppendLine("WalkForwardFootsteps =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(WalkForwardFootstepsItem.Overall);
                        if (WalkForwardFootstepsItem.Specific != null)
                        {
                            foreach (var subItem in WalkForwardFootstepsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RunForwardFootsteps.TryGet(out var RunForwardFootstepsItem))
                {
                    fg.AppendLine("RunForwardFootsteps =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RunForwardFootstepsItem.Overall);
                        if (RunForwardFootstepsItem.Specific != null)
                        {
                            foreach (var subItem in RunForwardFootstepsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (WalkForwardAlternateFootsteps.TryGet(out var WalkForwardAlternateFootstepsItem))
                {
                    fg.AppendLine("WalkForwardAlternateFootsteps =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(WalkForwardAlternateFootstepsItem.Overall);
                        if (WalkForwardAlternateFootstepsItem.Specific != null)
                        {
                            foreach (var subItem in WalkForwardAlternateFootstepsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RunForwardAlternateFootsteps.TryGet(out var RunForwardAlternateFootstepsItem))
                {
                    fg.AppendLine("RunForwardAlternateFootsteps =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RunForwardAlternateFootstepsItem.Overall);
                        if (RunForwardAlternateFootstepsItem.Specific != null)
                        {
                            foreach (var subItem in RunForwardAlternateFootstepsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (WalkForwardAlternateFootsteps2.TryGet(out var WalkForwardAlternateFootsteps2Item))
                {
                    fg.AppendLine("WalkForwardAlternateFootsteps2 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(WalkForwardAlternateFootsteps2Item.Overall);
                        if (WalkForwardAlternateFootsteps2Item.Specific != null)
                        {
                            foreach (var subItem in WalkForwardAlternateFootsteps2Item.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.WalkForwardFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.WalkForwardFootsteps?.Overall, rhs.WalkForwardFootsteps?.Overall), ExceptionExt.Combine(this.WalkForwardFootsteps?.Specific, rhs.WalkForwardFootsteps?.Specific));
                ret.RunForwardFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.RunForwardFootsteps?.Overall, rhs.RunForwardFootsteps?.Overall), ExceptionExt.Combine(this.RunForwardFootsteps?.Specific, rhs.RunForwardFootsteps?.Specific));
                ret.WalkForwardAlternateFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.WalkForwardAlternateFootsteps?.Overall, rhs.WalkForwardAlternateFootsteps?.Overall), ExceptionExt.Combine(this.WalkForwardAlternateFootsteps?.Specific, rhs.WalkForwardAlternateFootsteps?.Specific));
                ret.RunForwardAlternateFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.RunForwardAlternateFootsteps?.Overall, rhs.RunForwardAlternateFootsteps?.Overall), ExceptionExt.Combine(this.RunForwardAlternateFootsteps?.Specific, rhs.RunForwardAlternateFootsteps?.Specific));
                ret.WalkForwardAlternateFootsteps2 = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.WalkForwardAlternateFootsteps2?.Overall, rhs.WalkForwardAlternateFootsteps2?.Overall), ExceptionExt.Combine(this.WalkForwardAlternateFootsteps2?.Specific, rhs.WalkForwardAlternateFootsteps2?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool WalkForwardFootsteps;
            public bool RunForwardFootsteps;
            public bool WalkForwardAlternateFootsteps;
            public bool RunForwardAlternateFootsteps;
            public bool WalkForwardAlternateFootsteps2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.WalkForwardFootsteps = defaultOn;
                this.RunForwardFootsteps = defaultOn;
                this.WalkForwardAlternateFootsteps = defaultOn;
                this.RunForwardAlternateFootsteps = defaultOn;
                this.WalkForwardAlternateFootsteps2 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((WalkForwardFootsteps, null));
                ret.Add((RunForwardFootsteps, null));
                ret.Add((WalkForwardAlternateFootsteps, null));
                ret.Add((RunForwardAlternateFootsteps, null));
                ret.Add((WalkForwardAlternateFootsteps2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = FootstepSet_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => FootstepSetCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FootstepSetSetterCommon.Instance.RemapLinks(this, mapping);
        public FootstepSet(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private FootstepSet(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal FootstepSet(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public FootstepSet(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public FootstepSet(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FootstepSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FootstepSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static FootstepSet CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FootstepSet();
            ((FootstepSetSetterCommon)((IFootstepSetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FootstepSet item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((FootstepSetSetterCommon)((IFootstepSetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new FootstepSet GetNew()
        {
            return new FootstepSet();
        }

    }
    #endregion

    #region Interface
    public partial interface IFootstepSet :
        IFootstepSetGetter,
        IFallout4MajorRecord,
        ILoquiObjectSetter<IFootstepSetInternal>,
        IFormLinkContainer
    {
        new ExtendedList<IFormLink<IFootstepGetter>> WalkForwardFootsteps { get; }
        new ExtendedList<IFormLink<IFootstepGetter>> RunForwardFootsteps { get; }
        new ExtendedList<IFormLink<IFootstepGetter>> WalkForwardAlternateFootsteps { get; }
        new ExtendedList<IFormLink<IFootstepGetter>> RunForwardAlternateFootsteps { get; }
        new ExtendedList<IFormLink<IFootstepGetter>> WalkForwardAlternateFootsteps2 { get; }
    }

    public partial interface IFootstepSetInternal :
        IFallout4MajorRecordInternal,
        IFootstepSet,
        IFootstepSetGetter
    {
    }

    public partial interface IFootstepSetGetter :
        IFallout4MajorRecordGetter,
        ILoquiObject<IFootstepSetGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => FootstepSet_Registration.Instance;
        IReadOnlyList<IFormLink<IFootstepGetter>> WalkForwardFootsteps { get; }
        IReadOnlyList<IFormLink<IFootstepGetter>> RunForwardFootsteps { get; }
        IReadOnlyList<IFormLink<IFootstepGetter>> WalkForwardAlternateFootsteps { get; }
        IReadOnlyList<IFormLink<IFootstepGetter>> RunForwardAlternateFootsteps { get; }
        IReadOnlyList<IFormLink<IFootstepGetter>> WalkForwardAlternateFootsteps2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FootstepSetMixIn
    {
        public static void Clear(this IFootstepSetInternal item)
        {
            ((FootstepSetSetterCommon)((IFootstepSetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FootstepSet.Mask<bool> GetEqualsMask(
            this IFootstepSetGetter item,
            IFootstepSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFootstepSetGetter item,
            string? name = null,
            FootstepSet.Mask<bool>? printMask = null)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFootstepSetGetter item,
            FileGeneration fg,
            string? name = null,
            FootstepSet.Mask<bool>? printMask = null)
        {
            ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFootstepSetGetter item,
            IFootstepSetGetter rhs)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFootstepSetInternal lhs,
            IFootstepSetGetter rhs,
            out FootstepSet.ErrorMask errorMask,
            FootstepSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FootstepSet.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFootstepSetInternal lhs,
            IFootstepSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FootstepSet DeepCopy(
            this IFootstepSetGetter item,
            FootstepSet.TranslationMask? copyMask = null)
        {
            return ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FootstepSet DeepCopy(
            this IFootstepSetGetter item,
            out FootstepSet.ErrorMask errorMask,
            FootstepSet.TranslationMask? copyMask = null)
        {
            return ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FootstepSet DeepCopy(
            this IFootstepSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static FootstepSet Duplicate(
            this IFootstepSetGetter item,
            FormKey formKey,
            FootstepSet.TranslationMask? copyMask = null)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFootstepSetInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FootstepSetSetterCommon)((IFootstepSetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum FootstepSet_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        WalkForwardFootsteps = 6,
        RunForwardFootsteps = 7,
        WalkForwardAlternateFootsteps = 8,
        RunForwardAlternateFootsteps = 9,
        WalkForwardAlternateFootsteps2 = 10,
    }
    #endregion

    #region Registration
    public partial class FootstepSet_Registration : ILoquiRegistration
    {
        public static readonly FootstepSet_Registration Instance = new FootstepSet_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 441,
            version: 0);

        public const string GUID = "7bc68bd1-2eb5-4094-8e32-00eec9922c48";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(FootstepSet.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FootstepSet.ErrorMask);

        public static readonly Type ClassType = typeof(FootstepSet);

        public static readonly Type GetterType = typeof(IFootstepSetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFootstepSet);

        public static readonly Type? InternalSetterType = typeof(IFootstepSetInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.FootstepSet";

        public const string Name = "FootstepSet";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.FSTS;
        public static readonly Type BinaryWriteTranslation = typeof(FootstepSetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class FootstepSetSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly FootstepSetSetterCommon Instance = new FootstepSetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFootstepSetInternal item)
        {
            ClearPartial();
            item.WalkForwardFootsteps.Clear();
            item.RunForwardFootsteps.Clear();
            item.WalkForwardAlternateFootsteps.Clear();
            item.RunForwardAlternateFootsteps.Clear();
            item.WalkForwardAlternateFootsteps2.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IFootstepSetInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFootstepSetInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFootstepSet obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.WalkForwardFootsteps.RemapLinks(mapping);
            obj.RunForwardFootsteps.RemapLinks(mapping);
            obj.WalkForwardAlternateFootsteps.RemapLinks(mapping);
            obj.RunForwardAlternateFootsteps.RemapLinks(mapping);
            obj.WalkForwardAlternateFootsteps2.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFootstepSetInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IFootstepSetInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FootstepSetBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FootstepSetBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (FootstepSet)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (FootstepSet)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class FootstepSetCommon : Fallout4MajorRecordCommon
    {
        public new static readonly FootstepSetCommon Instance = new FootstepSetCommon();

        public FootstepSet.Mask<bool> GetEqualsMask(
            IFootstepSetGetter item,
            IFootstepSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FootstepSet.Mask<bool>(false);
            ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFootstepSetGetter item,
            IFootstepSetGetter rhs,
            FootstepSet.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.WalkForwardFootsteps = item.WalkForwardFootsteps.CollectionEqualsHelper(
                rhs.WalkForwardFootsteps,
                (l, r) => object.Equals(l, r),
                include);
            ret.RunForwardFootsteps = item.RunForwardFootsteps.CollectionEqualsHelper(
                rhs.RunForwardFootsteps,
                (l, r) => object.Equals(l, r),
                include);
            ret.WalkForwardAlternateFootsteps = item.WalkForwardAlternateFootsteps.CollectionEqualsHelper(
                rhs.WalkForwardAlternateFootsteps,
                (l, r) => object.Equals(l, r),
                include);
            ret.RunForwardAlternateFootsteps = item.RunForwardAlternateFootsteps.CollectionEqualsHelper(
                rhs.RunForwardAlternateFootsteps,
                (l, r) => object.Equals(l, r),
                include);
            ret.WalkForwardAlternateFootsteps2 = item.WalkForwardAlternateFootsteps2.CollectionEqualsHelper(
                rhs.WalkForwardAlternateFootsteps2,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFootstepSetGetter item,
            string? name = null,
            FootstepSet.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFootstepSetGetter item,
            FileGeneration fg,
            string? name = null,
            FootstepSet.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FootstepSet =>");
            }
            else
            {
                fg.AppendLine($"{name} (FootstepSet) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFootstepSetGetter item,
            FileGeneration fg,
            FootstepSet.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.WalkForwardFootsteps?.Overall ?? true)
            {
                fg.AppendLine("WalkForwardFootsteps =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.WalkForwardFootsteps)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.RunForwardFootsteps?.Overall ?? true)
            {
                fg.AppendLine("RunForwardFootsteps =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.RunForwardFootsteps)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.WalkForwardAlternateFootsteps?.Overall ?? true)
            {
                fg.AppendLine("WalkForwardAlternateFootsteps =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.WalkForwardAlternateFootsteps)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.RunForwardAlternateFootsteps?.Overall ?? true)
            {
                fg.AppendLine("RunForwardAlternateFootsteps =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.RunForwardAlternateFootsteps)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.WalkForwardAlternateFootsteps2?.Overall ?? true)
            {
                fg.AppendLine("WalkForwardAlternateFootsteps2 =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.WalkForwardAlternateFootsteps2)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static FootstepSet_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (FootstepSet_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (FootstepSet_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (FootstepSet_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (FootstepSet_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (FootstepSet_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (FootstepSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new FootstepSet_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (FootstepSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (FootstepSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (FootstepSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (FootstepSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFootstepSetGetter? lhs,
            IFootstepSetGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!lhs.WalkForwardFootsteps.SequenceEqualNullable(rhs.WalkForwardFootsteps)) return false;
            if (!lhs.RunForwardFootsteps.SequenceEqualNullable(rhs.RunForwardFootsteps)) return false;
            if (!lhs.WalkForwardAlternateFootsteps.SequenceEqualNullable(rhs.WalkForwardAlternateFootsteps)) return false;
            if (!lhs.RunForwardAlternateFootsteps.SequenceEqualNullable(rhs.RunForwardAlternateFootsteps)) return false;
            if (!lhs.WalkForwardAlternateFootsteps2.SequenceEqualNullable(rhs.WalkForwardAlternateFootsteps2)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFootstepSetGetter?)lhs,
                rhs: rhs as IFootstepSetGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFootstepSetGetter?)lhs,
                rhs: rhs as IFootstepSetGetter);
        }
        
        public virtual int GetHashCode(IFootstepSetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.WalkForwardFootsteps);
            hash.Add(item.RunForwardFootsteps);
            hash.Add(item.WalkForwardAlternateFootsteps);
            hash.Add(item.RunForwardAlternateFootsteps);
            hash.Add(item.WalkForwardAlternateFootsteps2);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IFootstepSetGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFootstepSetGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FootstepSet.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IFootstepSetGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.WalkForwardFootsteps)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.RunForwardFootsteps)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.WalkForwardAlternateFootsteps)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.RunForwardAlternateFootsteps)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.WalkForwardAlternateFootsteps2)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public FootstepSet Duplicate(
            IFootstepSetGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new FootstepSet(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFootstepSet)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFootstepSet)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class FootstepSetSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly FootstepSetSetterTranslationCommon Instance = new FootstepSetSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFootstepSetInternal item,
            IFootstepSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IFootstepSet item,
            IFootstepSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.WalkForwardFootsteps) ?? true))
            {
                errorMask?.PushIndex((int)FootstepSet_FieldIndex.WalkForwardFootsteps);
                try
                {
                    item.WalkForwardFootsteps.SetTo(
                        rhs.WalkForwardFootsteps
                        .Select(r => (IFormLink<IFootstepGetter>)new FormLink<IFootstepGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.RunForwardFootsteps) ?? true))
            {
                errorMask?.PushIndex((int)FootstepSet_FieldIndex.RunForwardFootsteps);
                try
                {
                    item.RunForwardFootsteps.SetTo(
                        rhs.RunForwardFootsteps
                        .Select(r => (IFormLink<IFootstepGetter>)new FormLink<IFootstepGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.WalkForwardAlternateFootsteps) ?? true))
            {
                errorMask?.PushIndex((int)FootstepSet_FieldIndex.WalkForwardAlternateFootsteps);
                try
                {
                    item.WalkForwardAlternateFootsteps.SetTo(
                        rhs.WalkForwardAlternateFootsteps
                        .Select(r => (IFormLink<IFootstepGetter>)new FormLink<IFootstepGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.RunForwardAlternateFootsteps) ?? true))
            {
                errorMask?.PushIndex((int)FootstepSet_FieldIndex.RunForwardAlternateFootsteps);
                try
                {
                    item.RunForwardAlternateFootsteps.SetTo(
                        rhs.RunForwardAlternateFootsteps
                        .Select(r => (IFormLink<IFootstepGetter>)new FormLink<IFootstepGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.WalkForwardAlternateFootsteps2) ?? true))
            {
                errorMask?.PushIndex((int)FootstepSet_FieldIndex.WalkForwardAlternateFootsteps2);
                try
                {
                    item.WalkForwardAlternateFootsteps2.SetTo(
                        rhs.WalkForwardAlternateFootsteps2
                        .Select(r => (IFormLink<IFootstepGetter>)new FormLink<IFootstepGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFootstepSetInternal)item,
                rhs: (IFootstepSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFootstepSet)item,
                rhs: (IFootstepSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFootstepSetInternal)item,
                rhs: (IFootstepSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFootstepSet)item,
                rhs: (IFootstepSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public FootstepSet DeepCopy(
            IFootstepSetGetter item,
            FootstepSet.TranslationMask? copyMask = null)
        {
            FootstepSet ret = (FootstepSet)((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).GetNew();
            ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FootstepSet DeepCopy(
            IFootstepSetGetter item,
            out FootstepSet.ErrorMask errorMask,
            FootstepSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FootstepSet ret = (FootstepSet)((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).GetNew();
            ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FootstepSet.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FootstepSet DeepCopy(
            IFootstepSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FootstepSet ret = (FootstepSet)((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).GetNew();
            ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class FootstepSet
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FootstepSet_Registration.Instance;
        public new static FootstepSet_Registration Registration => FootstepSet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FootstepSetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FootstepSetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FootstepSetSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class FootstepSetBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FootstepSetBinaryWriteTranslation Instance = new FootstepSetBinaryWriteTranslation();

        static partial void WriteBinaryCountCustom(
            MutagenWriter writer,
            IFootstepSetGetter item);

        public static void WriteBinaryCount(
            MutagenWriter writer,
            IFootstepSetGetter item)
        {
            WriteBinaryCountCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IFootstepSetGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IFootstepSetGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            FootstepSetBinaryWriteTranslation.WriteBinaryCount(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IFootstepSetGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.FSTS),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFootstepSetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFootstepSetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFootstepSetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FootstepSetBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static FootstepSetBinaryCreateTranslation Instance = new FootstepSetBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.FSTS;
        public static void FillBinaryStructs(
            IFootstepSetInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IFootstepSetInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.XCNT:
                {
                    FootstepSetBinaryCreateTranslation.FillBinaryCountCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryCountCustom(
            MutagenFrame frame,
            IFootstepSetInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class FootstepSetBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class FootstepSetBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IFootstepSetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FootstepSet_Registration.Instance;
        public new static FootstepSet_Registration Registration => FootstepSet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FootstepSetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FootstepSetSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => FootstepSetCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FootstepSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FootstepSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Count
        partial void CountCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FootstepSetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static FootstepSetBinaryOverlay FootstepSetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new FootstepSetBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static FootstepSetBinaryOverlay FootstepSetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return FootstepSetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.XCNT:
                {
                    CountCustomParse(
                        stream,
                        offset);
                    return null;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FootstepSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFootstepSetGetter rhs)) return false;
            return ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IFootstepSetGetter? obj)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

