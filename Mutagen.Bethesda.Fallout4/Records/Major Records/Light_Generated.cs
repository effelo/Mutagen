/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Light :
        Fallout4MajorRecord,
        ILightInternal,
        ILoquiObjectSetter<Light>,
        IEquatable<ILightGetter>
    {
        #region Ctor
        protected Light()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? ILightGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ILightGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ILightGetter.Model => this.Model;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? ILightGetter.Destructible => this.Destructible;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ILightGetter.Name => this.Name;
        #endregion
        #region Icons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Icons? _Icons;
        public Icons? Icons
        {
            get => _Icons;
            set => _Icons = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIconsGetter? ILightGetter.Icons => this.Icons;
        #endregion
        #region Time
        public Int32 Time { get; set; } = default;
        #endregion
        #region Radius
        public UInt32 Radius { get; set; } = default;
        #endregion
        #region Color
        public Color Color { get; set; } = default;
        #endregion
        #region Flags
        public Light.Flag Flags { get; set; } = default;
        #endregion
        #region FalloffExponent
        public Single FalloffExponent { get; set; } = default;
        #endregion
        #region FOV
        public Single FOV { get; set; } = default;
        #endregion
        #region NearClip
        public Single NearClip { get; set; } = default;
        #endregion
        #region FlickerPeriod
        public Single FlickerPeriod { get; set; } = default;
        #endregion
        #region FlickerIntensityAmplitude
        public Single FlickerIntensityAmplitude { get; set; } = default;
        #endregion
        #region FlickerMovementAmplitude
        public Single FlickerMovementAmplitude { get; set; } = default;
        #endregion
        #region Value
        public UInt32 Value { get; set; } = default;
        #endregion
        #region Weight
        public Single Weight { get; set; } = default;
        #endregion
        #region FadeValue
        public Single FadeValue { get; set; } = default;
        #endregion
        #region Sound
        public FormLinkNullable<ISoundDescriptorGetter> Sound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region DATADataTypeState
        public Light.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LightMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILightGetter rhs)) return false;
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILightGetter? obj)
        {
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LightCommon)((ILightGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(initialValue, new Icons.Mask<TItem>(initialValue));
                this.Time = initialValue;
                this.Radius = initialValue;
                this.Color = initialValue;
                this.Flags = initialValue;
                this.FalloffExponent = initialValue;
                this.FOV = initialValue;
                this.NearClip = initialValue;
                this.FlickerPeriod = initialValue;
                this.FlickerIntensityAmplitude = initialValue;
                this.FlickerMovementAmplitude = initialValue;
                this.Value = initialValue;
                this.Weight = initialValue;
                this.FadeValue = initialValue;
                this.Sound = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Model,
                TItem Destructible,
                TItem Name,
                TItem Icons,
                TItem Time,
                TItem Radius,
                TItem Color,
                TItem Flags,
                TItem FalloffExponent,
                TItem FOV,
                TItem NearClip,
                TItem FlickerPeriod,
                TItem FlickerIntensityAmplitude,
                TItem FlickerMovementAmplitude,
                TItem Value,
                TItem Weight,
                TItem FadeValue,
                TItem Sound,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Name = Name;
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(Icons, new Icons.Mask<TItem>(Icons));
                this.Time = Time;
                this.Radius = Radius;
                this.Color = Color;
                this.Flags = Flags;
                this.FalloffExponent = FalloffExponent;
                this.FOV = FOV;
                this.NearClip = NearClip;
                this.FlickerPeriod = FlickerPeriod;
                this.FlickerIntensityAmplitude = FlickerIntensityAmplitude;
                this.FlickerMovementAmplitude = FlickerMovementAmplitude;
                this.Value = Value;
                this.Weight = Weight;
                this.FadeValue = FadeValue;
                this.Sound = Sound;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem Name;
            public MaskItem<TItem, Icons.Mask<TItem>?>? Icons { get; set; }
            public TItem Time;
            public TItem Radius;
            public TItem Color;
            public TItem Flags;
            public TItem FalloffExponent;
            public TItem FOV;
            public TItem NearClip;
            public TItem FlickerPeriod;
            public TItem FlickerIntensityAmplitude;
            public TItem FlickerMovementAmplitude;
            public TItem Value;
            public TItem Weight;
            public TItem FadeValue;
            public TItem Sound;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Icons, rhs.Icons)) return false;
                if (!object.Equals(this.Time, rhs.Time)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.FalloffExponent, rhs.FalloffExponent)) return false;
                if (!object.Equals(this.FOV, rhs.FOV)) return false;
                if (!object.Equals(this.NearClip, rhs.NearClip)) return false;
                if (!object.Equals(this.FlickerPeriod, rhs.FlickerPeriod)) return false;
                if (!object.Equals(this.FlickerIntensityAmplitude, rhs.FlickerIntensityAmplitude)) return false;
                if (!object.Equals(this.FlickerMovementAmplitude, rhs.FlickerMovementAmplitude)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.FadeValue, rhs.FadeValue)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.Name);
                hash.Add(this.Icons);
                hash.Add(this.Time);
                hash.Add(this.Radius);
                hash.Add(this.Color);
                hash.Add(this.Flags);
                hash.Add(this.FalloffExponent);
                hash.Add(this.FOV);
                hash.Add(this.NearClip);
                hash.Add(this.FlickerPeriod);
                hash.Add(this.FlickerIntensityAmplitude);
                hash.Add(this.FlickerMovementAmplitude);
                hash.Add(this.Value);
                hash.Add(this.Weight);
                hash.Add(this.FadeValue);
                hash.Add(this.Sound);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Icons != null)
                {
                    if (!eval(this.Icons.Overall)) return false;
                    if (this.Icons.Specific != null && !this.Icons.Specific.All(eval)) return false;
                }
                if (!eval(this.Time)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.Color)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.FalloffExponent)) return false;
                if (!eval(this.FOV)) return false;
                if (!eval(this.NearClip)) return false;
                if (!eval(this.FlickerPeriod)) return false;
                if (!eval(this.FlickerIntensityAmplitude)) return false;
                if (!eval(this.FlickerMovementAmplitude)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.FadeValue)) return false;
                if (!eval(this.Sound)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Icons != null)
                {
                    if (eval(this.Icons.Overall)) return true;
                    if (this.Icons.Specific != null && this.Icons.Specific.Any(eval)) return true;
                }
                if (eval(this.Time)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.Color)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.FalloffExponent)) return true;
                if (eval(this.FOV)) return true;
                if (eval(this.NearClip)) return true;
                if (eval(this.FlickerPeriod)) return true;
                if (eval(this.FlickerIntensityAmplitude)) return true;
                if (eval(this.FlickerMovementAmplitude)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.FadeValue)) return true;
                if (eval(this.Sound)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Light.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Icons = this.Icons == null ? null : new MaskItem<R, Icons.Mask<R>?>(eval(this.Icons.Overall), this.Icons.Specific?.Translate(eval));
                obj.Time = eval(this.Time);
                obj.Radius = eval(this.Radius);
                obj.Color = eval(this.Color);
                obj.Flags = eval(this.Flags);
                obj.FalloffExponent = eval(this.FalloffExponent);
                obj.FOV = eval(this.FOV);
                obj.NearClip = eval(this.NearClip);
                obj.FlickerPeriod = eval(this.FlickerPeriod);
                obj.FlickerIntensityAmplitude = eval(this.FlickerIntensityAmplitude);
                obj.FlickerMovementAmplitude = eval(this.FlickerMovementAmplitude);
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
                obj.FadeValue = eval(this.FadeValue);
                obj.Sound = eval(this.Sound);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Light.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Light.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Light.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Icons?.Overall ?? true)
                    {
                        Icons?.ToString(fg);
                    }
                    if (printMask?.Time ?? true)
                    {
                        fg.AppendItem(Time, "Time");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        fg.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.Color ?? true)
                    {
                        fg.AppendItem(Color, "Color");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.FalloffExponent ?? true)
                    {
                        fg.AppendItem(FalloffExponent, "FalloffExponent");
                    }
                    if (printMask?.FOV ?? true)
                    {
                        fg.AppendItem(FOV, "FOV");
                    }
                    if (printMask?.NearClip ?? true)
                    {
                        fg.AppendItem(NearClip, "NearClip");
                    }
                    if (printMask?.FlickerPeriod ?? true)
                    {
                        fg.AppendItem(FlickerPeriod, "FlickerPeriod");
                    }
                    if (printMask?.FlickerIntensityAmplitude ?? true)
                    {
                        fg.AppendItem(FlickerIntensityAmplitude, "FlickerIntensityAmplitude");
                    }
                    if (printMask?.FlickerMovementAmplitude ?? true)
                    {
                        fg.AppendItem(FlickerMovementAmplitude, "FlickerMovementAmplitude");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.FadeValue ?? true)
                    {
                        fg.AppendItem(FadeValue, "FadeValue");
                    }
                    if (printMask?.Sound ?? true)
                    {
                        fg.AppendItem(Sound, "Sound");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? Name;
            public MaskItem<Exception?, Icons.ErrorMask?>? Icons;
            public Exception? Time;
            public Exception? Radius;
            public Exception? Color;
            public Exception? Flags;
            public Exception? FalloffExponent;
            public Exception? FOV;
            public Exception? NearClip;
            public Exception? FlickerPeriod;
            public Exception? FlickerIntensityAmplitude;
            public Exception? FlickerMovementAmplitude;
            public Exception? Value;
            public Exception? Weight;
            public Exception? FadeValue;
            public Exception? Sound;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Light_FieldIndex enu = (Light_FieldIndex)index;
                switch (enu)
                {
                    case Light_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Light_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Light_FieldIndex.Model:
                        return Model;
                    case Light_FieldIndex.Destructible:
                        return Destructible;
                    case Light_FieldIndex.Name:
                        return Name;
                    case Light_FieldIndex.Icons:
                        return Icons;
                    case Light_FieldIndex.Time:
                        return Time;
                    case Light_FieldIndex.Radius:
                        return Radius;
                    case Light_FieldIndex.Color:
                        return Color;
                    case Light_FieldIndex.Flags:
                        return Flags;
                    case Light_FieldIndex.FalloffExponent:
                        return FalloffExponent;
                    case Light_FieldIndex.FOV:
                        return FOV;
                    case Light_FieldIndex.NearClip:
                        return NearClip;
                    case Light_FieldIndex.FlickerPeriod:
                        return FlickerPeriod;
                    case Light_FieldIndex.FlickerIntensityAmplitude:
                        return FlickerIntensityAmplitude;
                    case Light_FieldIndex.FlickerMovementAmplitude:
                        return FlickerMovementAmplitude;
                    case Light_FieldIndex.Value:
                        return Value;
                    case Light_FieldIndex.Weight:
                        return Weight;
                    case Light_FieldIndex.FadeValue:
                        return FadeValue;
                    case Light_FieldIndex.Sound:
                        return Sound;
                    case Light_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Light_FieldIndex enu = (Light_FieldIndex)index;
                switch (enu)
                {
                    case Light_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Light_FieldIndex.Icons:
                        this.Icons = new MaskItem<Exception?, Icons.ErrorMask?>(ex, null);
                        break;
                    case Light_FieldIndex.Time:
                        this.Time = ex;
                        break;
                    case Light_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case Light_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case Light_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Light_FieldIndex.FalloffExponent:
                        this.FalloffExponent = ex;
                        break;
                    case Light_FieldIndex.FOV:
                        this.FOV = ex;
                        break;
                    case Light_FieldIndex.NearClip:
                        this.NearClip = ex;
                        break;
                    case Light_FieldIndex.FlickerPeriod:
                        this.FlickerPeriod = ex;
                        break;
                    case Light_FieldIndex.FlickerIntensityAmplitude:
                        this.FlickerIntensityAmplitude = ex;
                        break;
                    case Light_FieldIndex.FlickerMovementAmplitude:
                        this.FlickerMovementAmplitude = ex;
                        break;
                    case Light_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case Light_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Light_FieldIndex.FadeValue:
                        this.FadeValue = ex;
                        break;
                    case Light_FieldIndex.Sound:
                        this.Sound = ex;
                        break;
                    case Light_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Light_FieldIndex enu = (Light_FieldIndex)index;
                switch (enu)
                {
                    case Light_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Icons:
                        this.Icons = (MaskItem<Exception?, Icons.ErrorMask?>?)obj;
                        break;
                    case Light_FieldIndex.Time:
                        this.Time = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FalloffExponent:
                        this.FalloffExponent = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FOV:
                        this.FOV = (Exception?)obj;
                        break;
                    case Light_FieldIndex.NearClip:
                        this.NearClip = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FlickerPeriod:
                        this.FlickerPeriod = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FlickerIntensityAmplitude:
                        this.FlickerIntensityAmplitude = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FlickerMovementAmplitude:
                        this.FlickerMovementAmplitude = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Light_FieldIndex.FadeValue:
                        this.FadeValue = (Exception?)obj;
                        break;
                    case Light_FieldIndex.Sound:
                        this.Sound = (Exception?)obj;
                        break;
                    case Light_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (Name != null) return true;
                if (Icons != null) return true;
                if (Time != null) return true;
                if (Radius != null) return true;
                if (Color != null) return true;
                if (Flags != null) return true;
                if (FalloffExponent != null) return true;
                if (FOV != null) return true;
                if (NearClip != null) return true;
                if (FlickerPeriod != null) return true;
                if (FlickerIntensityAmplitude != null) return true;
                if (FlickerMovementAmplitude != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                if (FadeValue != null) return true;
                if (Sound != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                Model?.ToString(fg);
                Destructible?.ToString(fg);
                fg.AppendItem(Name, "Name");
                Icons?.ToString(fg);
                fg.AppendItem(Time, "Time");
                fg.AppendItem(Radius, "Radius");
                fg.AppendItem(Color, "Color");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(FalloffExponent, "FalloffExponent");
                fg.AppendItem(FOV, "FOV");
                fg.AppendItem(NearClip, "NearClip");
                fg.AppendItem(FlickerPeriod, "FlickerPeriod");
                fg.AppendItem(FlickerIntensityAmplitude, "FlickerIntensityAmplitude");
                fg.AppendItem(FlickerMovementAmplitude, "FlickerMovementAmplitude");
                fg.AppendItem(Value, "Value");
                fg.AppendItem(Weight, "Weight");
                fg.AppendItem(FadeValue, "FadeValue");
                fg.AppendItem(Sound, "Sound");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Icons = this.Icons.Combine(rhs.Icons, (l, r) => l.Combine(r));
                ret.Time = this.Time.Combine(rhs.Time);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.Color = this.Color.Combine(rhs.Color);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.FalloffExponent = this.FalloffExponent.Combine(rhs.FalloffExponent);
                ret.FOV = this.FOV.Combine(rhs.FOV);
                ret.NearClip = this.NearClip.Combine(rhs.NearClip);
                ret.FlickerPeriod = this.FlickerPeriod.Combine(rhs.FlickerPeriod);
                ret.FlickerIntensityAmplitude = this.FlickerIntensityAmplitude.Combine(rhs.FlickerIntensityAmplitude);
                ret.FlickerMovementAmplitude = this.FlickerMovementAmplitude.Combine(rhs.FlickerMovementAmplitude);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.FadeValue = this.FadeValue.Combine(rhs.FadeValue);
                ret.Sound = this.Sound.Combine(rhs.Sound);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public Model.TranslationMask? Model;
            public Destructible.TranslationMask? Destructible;
            public bool Name;
            public Icons.TranslationMask? Icons;
            public bool Time;
            public bool Radius;
            public bool Color;
            public bool Flags;
            public bool FalloffExponent;
            public bool FOV;
            public bool NearClip;
            public bool FlickerPeriod;
            public bool FlickerIntensityAmplitude;
            public bool FlickerMovementAmplitude;
            public bool Value;
            public bool Weight;
            public bool FadeValue;
            public bool Sound;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Time = defaultOn;
                this.Radius = defaultOn;
                this.Color = defaultOn;
                this.Flags = defaultOn;
                this.FalloffExponent = defaultOn;
                this.FOV = defaultOn;
                this.NearClip = defaultOn;
                this.FlickerPeriod = defaultOn;
                this.FlickerIntensityAmplitude = defaultOn;
                this.FlickerMovementAmplitude = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
                this.FadeValue = defaultOn;
                this.Sound = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Icons != null ? Icons.OnOverall : DefaultOn, Icons?.GetCrystal()));
                ret.Add((Time, null));
                ret.Add((Radius, null));
                ret.Add((Color, null));
                ret.Add((Flags, null));
                ret.Add((FalloffExponent, null));
                ret.Add((FOV, null));
                ret.Add((NearClip, null));
                ret.Add((FlickerPeriod, null));
                ret.Add((FlickerIntensityAmplitude, null));
                ret.Add((FlickerMovementAmplitude, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
                ret.Add((FadeValue, null));
                ret.Add((Sound, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Light_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => LightCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LightSetterCommon.Instance.RemapLinks(this, mapping);
        public Light(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Light(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Light(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Light(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Light(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LightBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LightBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Light CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Light();
            ((LightSetterCommon)((ILightGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Light item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LightSetterCommon)((ILightGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Light GetNew()
        {
            return new Light();
        }

    }
    #endregion

    #region Interface
    public partial interface ILight :
        ILightGetter,
        IFallout4MajorRecord,
        IItem,
        IEmittance,
        IObjectId,
        ITranslatedNamed,
        IHasIcons,
        IModeled,
        IObjectBounded,
        IWeightValue,
        ILoquiObjectSetter<ILightInternal>,
        IFormLinkContainer
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ObjectBounds ObjectBounds { get; set; }
        new Model? Model { get; set; }
        new Destructible? Destructible { get; set; }
        new TranslatedString? Name { get; set; }
        new Icons? Icons { get; set; }
        new Int32 Time { get; set; }
        new UInt32 Radius { get; set; }
        new Color Color { get; set; }
        new Light.Flag Flags { get; set; }
        new Single FalloffExponent { get; set; }
        new Single FOV { get; set; }
        new Single NearClip { get; set; }
        new Single FlickerPeriod { get; set; }
        new Single FlickerIntensityAmplitude { get; set; }
        new Single FlickerMovementAmplitude { get; set; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
        new Single FadeValue { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> Sound { get; set; }
        new Light.DATADataType DATADataTypeState { get; set; }
        #region Mutagen
        new Light.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ILightInternal :
        IFallout4MajorRecordInternal,
        ILight,
        ILightGetter
    {
    }

    public partial interface ILightGetter :
        IFallout4MajorRecordGetter,
        IItemGetter,
        IEmittanceGetter,
        IObjectIdGetter,
        ITranslatedNamedGetter,
        IHasIconsGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        IWeightValueGetter,
        ILoquiObject<ILightGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Light_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IObjectBoundsGetter ObjectBounds { get; }
        IModelGetter? Model { get; }
        IDestructibleGetter? Destructible { get; }
        ITranslatedStringGetter? Name { get; }
        IIconsGetter? Icons { get; }
        Int32 Time { get; }
        UInt32 Radius { get; }
        Color Color { get; }
        Light.Flag Flags { get; }
        Single FalloffExponent { get; }
        Single FOV { get; }
        Single NearClip { get; }
        Single FlickerPeriod { get; }
        Single FlickerIntensityAmplitude { get; }
        Single FlickerMovementAmplitude { get; }
        UInt32 Value { get; }
        Single Weight { get; }
        Single FadeValue { get; }
        FormLinkNullable<ISoundDescriptorGetter> Sound { get; }
        Light.DATADataType DATADataTypeState { get; }

        #region Mutagen
        Light.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class LightMixIn
    {
        public static void Clear(this ILightInternal item)
        {
            ((LightSetterCommon)((ILightGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Light.Mask<bool> GetEqualsMask(
            this ILightGetter item,
            ILightGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILightGetter item,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILightGetter item,
            FileGeneration fg,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            ((LightCommon)((ILightGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILightGetter item,
            ILightGetter rhs)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILightInternal lhs,
            ILightGetter rhs,
            out Light.ErrorMask errorMask,
            Light.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LightSetterTranslationCommon)((ILightGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Light.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILightInternal lhs,
            ILightGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LightSetterTranslationCommon)((ILightGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Light DeepCopy(
            this ILightGetter item,
            Light.TranslationMask? copyMask = null)
        {
            return ((LightSetterTranslationCommon)((ILightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Light DeepCopy(
            this ILightGetter item,
            out Light.ErrorMask errorMask,
            Light.TranslationMask? copyMask = null)
        {
            return ((LightSetterTranslationCommon)((ILightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Light DeepCopy(
            this ILightGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LightSetterTranslationCommon)((ILightGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Light Duplicate(
            this ILightGetter item,
            FormKey formKey,
            Light.TranslationMask? copyMask = null)
        {
            return ((LightCommon)((ILightGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILightInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LightSetterCommon)((ILightGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Light_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        Model = 8,
        Destructible = 9,
        Name = 10,
        Icons = 11,
        Time = 12,
        Radius = 13,
        Color = 14,
        Flags = 15,
        FalloffExponent = 16,
        FOV = 17,
        NearClip = 18,
        FlickerPeriod = 19,
        FlickerIntensityAmplitude = 20,
        FlickerMovementAmplitude = 21,
        Value = 22,
        Weight = 23,
        FadeValue = 24,
        Sound = 25,
        DATADataTypeState = 26,
    }
    #endregion

    #region Registration
    public partial class Light_Registration : ILoquiRegistration
    {
        public static readonly Light_Registration Instance = new Light_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 107,
            version: 0);

        public const string GUID = "749a2492-52b8-4580-ac1c-b645cabfd20b";

        public const ushort AdditionalFieldCount = 21;

        public const ushort FieldCount = 27;

        public static readonly Type MaskType = typeof(Light.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Light.ErrorMask);

        public static readonly Type ClassType = typeof(Light);

        public static readonly Type GetterType = typeof(ILightGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILight);

        public static readonly Type? InternalSetterType = typeof(ILightInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Light";

        public const string Name = "Light";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LIGH;
        public static readonly Type BinaryWriteTranslation = typeof(LightBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class LightSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly LightSetterCommon Instance = new LightSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILightInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Model = null;
            item.Destructible = null;
            item.Name = default;
            item.Icons = null;
            item.Time = default;
            item.Radius = default;
            item.Color = default;
            item.Flags = default;
            item.FalloffExponent = default;
            item.FOV = default;
            item.NearClip = default;
            item.FlickerPeriod = default;
            item.FlickerIntensityAmplitude = default;
            item.FlickerMovementAmplitude = default;
            item.Value = default;
            item.Weight = default;
            item.FadeValue = default;
            item.Sound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ILightInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILightInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILight obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.Sound = obj.Sound.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILightInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ILightInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LightBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LightBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Light)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Light)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class LightCommon : Fallout4MajorRecordCommon
    {
        public new static readonly LightCommon Instance = new LightCommon();

        public Light.Mask<bool> GetEqualsMask(
            ILightGetter item,
            ILightGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Light.Mask<bool>(false);
            ((LightCommon)((ILightGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILightGetter item,
            ILightGetter rhs,
            Light.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Icons = EqualsMaskHelper.EqualsHelper(
                item.Icons,
                rhs.Icons,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Time = item.Time == rhs.Time;
            ret.Radius = item.Radius == rhs.Radius;
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.Flags = item.Flags == rhs.Flags;
            ret.FalloffExponent = item.FalloffExponent.EqualsWithin(rhs.FalloffExponent);
            ret.FOV = item.FOV.EqualsWithin(rhs.FOV);
            ret.NearClip = item.NearClip.EqualsWithin(rhs.NearClip);
            ret.FlickerPeriod = item.FlickerPeriod.EqualsWithin(rhs.FlickerPeriod);
            ret.FlickerIntensityAmplitude = item.FlickerIntensityAmplitude.EqualsWithin(rhs.FlickerIntensityAmplitude);
            ret.FlickerMovementAmplitude = item.FlickerMovementAmplitude.EqualsWithin(rhs.FlickerMovementAmplitude);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.FadeValue = item.FadeValue.EqualsWithin(rhs.FadeValue);
            ret.Sound = item.Sound.Equals(rhs.Sound);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILightGetter item,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILightGetter item,
            FileGeneration fg,
            string? name = null,
            Light.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Light =>");
            }
            else
            {
                fg.AppendLine($"{name} (Light) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILightGetter item,
            FileGeneration fg,
            Light.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Icons?.Overall ?? true)
                && item.Icons.TryGet(out var IconsItem))
            {
                IconsItem?.ToString(fg, "Icons");
            }
            if (printMask?.Time ?? true)
            {
                fg.AppendItem(item.Time, "Time");
            }
            if (printMask?.Radius ?? true)
            {
                fg.AppendItem(item.Radius, "Radius");
            }
            if (printMask?.Color ?? true)
            {
                fg.AppendItem(item.Color, "Color");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.FalloffExponent ?? true)
            {
                fg.AppendItem(item.FalloffExponent, "FalloffExponent");
            }
            if (printMask?.FOV ?? true)
            {
                fg.AppendItem(item.FOV, "FOV");
            }
            if (printMask?.NearClip ?? true)
            {
                fg.AppendItem(item.NearClip, "NearClip");
            }
            if (printMask?.FlickerPeriod ?? true)
            {
                fg.AppendItem(item.FlickerPeriod, "FlickerPeriod");
            }
            if (printMask?.FlickerIntensityAmplitude ?? true)
            {
                fg.AppendItem(item.FlickerIntensityAmplitude, "FlickerIntensityAmplitude");
            }
            if (printMask?.FlickerMovementAmplitude ?? true)
            {
                fg.AppendItem(item.FlickerMovementAmplitude, "FlickerMovementAmplitude");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.FadeValue ?? true)
            {
                fg.AppendItem(item.FadeValue, "FadeValue");
            }
            if (printMask?.Sound ?? true)
            {
                fg.AppendItem(item.Sound.FormKeyNullable, "Sound");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static Light_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Light_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Light_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Light_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Light_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Light_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Light_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Light_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Light_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Light_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILightGetter? lhs,
            ILightGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Icons, rhs.Icons)) return false;
            if (lhs.Time != rhs.Time) return false;
            if (lhs.Radius != rhs.Radius) return false;
            if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.FalloffExponent.EqualsWithin(rhs.FalloffExponent)) return false;
            if (!lhs.FOV.EqualsWithin(rhs.FOV)) return false;
            if (!lhs.NearClip.EqualsWithin(rhs.NearClip)) return false;
            if (!lhs.FlickerPeriod.EqualsWithin(rhs.FlickerPeriod)) return false;
            if (!lhs.FlickerIntensityAmplitude.EqualsWithin(rhs.FlickerIntensityAmplitude)) return false;
            if (!lhs.FlickerMovementAmplitude.EqualsWithin(rhs.FlickerMovementAmplitude)) return false;
            if (lhs.Value != rhs.Value) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (!lhs.FadeValue.EqualsWithin(rhs.FadeValue)) return false;
            if (!lhs.Sound.Equals(rhs.Sound)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILightGetter?)lhs,
                rhs: rhs as ILightGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILightGetter?)lhs,
                rhs: rhs as ILightGetter);
        }
        
        public virtual int GetHashCode(ILightGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Icons.TryGet(out var Iconsitem))
            {
                hash.Add(Iconsitem);
            }
            hash.Add(item.Time);
            hash.Add(item.Radius);
            hash.Add(item.Color);
            hash.Add(item.Flags);
            hash.Add(item.FalloffExponent);
            hash.Add(item.FOV);
            hash.Add(item.NearClip);
            hash.Add(item.FlickerPeriod);
            hash.Add(item.FlickerIntensityAmplitude);
            hash.Add(item.FlickerMovementAmplitude);
            hash.Add(item.Value);
            hash.Add(item.Weight);
            hash.Add(item.FadeValue);
            hash.Add(item.Sound);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ILightGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILightGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Light.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ILightGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Sound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Sound);
            }
            yield break;
        }
        
        #region Duplicate
        public Light Duplicate(
            ILightGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Light(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILight)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILight)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class LightSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly LightSetterTranslationCommon Instance = new LightSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILightInternal item,
            ILightGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILight item,
            ILightGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Light_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Light_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Light_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Light_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Icons) ?? true))
            {
                errorMask?.PushIndex((int)Light_FieldIndex.Icons);
                try
                {
                    if(rhs.Icons.TryGet(out var rhsIcons))
                    {
                        item.Icons = rhsIcons.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Light_FieldIndex.Icons));
                    }
                    else
                    {
                        item.Icons = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Time) ?? true))
            {
                item.Time = rhs.Time;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FalloffExponent) ?? true))
            {
                item.FalloffExponent = rhs.FalloffExponent;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FOV) ?? true))
            {
                item.FOV = rhs.FOV;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.NearClip) ?? true))
            {
                item.NearClip = rhs.NearClip;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FlickerPeriod) ?? true))
            {
                item.FlickerPeriod = rhs.FlickerPeriod;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FlickerIntensityAmplitude) ?? true))
            {
                item.FlickerIntensityAmplitude = rhs.FlickerIntensityAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FlickerMovementAmplitude) ?? true))
            {
                item.FlickerMovementAmplitude = rhs.FlickerMovementAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.FadeValue) ?? true))
            {
                item.FadeValue = rhs.FadeValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.Sound) ?? true))
            {
                item.Sound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.Sound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Light_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILightInternal)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILight)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILightInternal)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILight)item,
                rhs: (ILightGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Light DeepCopy(
            ILightGetter item,
            Light.TranslationMask? copyMask = null)
        {
            Light ret = (Light)((LightCommon)((ILightGetter)item).CommonInstance()!).GetNew();
            ((LightSetterTranslationCommon)((ILightGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Light DeepCopy(
            ILightGetter item,
            out Light.ErrorMask errorMask,
            Light.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Light ret = (Light)((LightCommon)((ILightGetter)item).CommonInstance()!).GetNew();
            ((LightSetterTranslationCommon)((ILightGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Light.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Light DeepCopy(
            ILightGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Light ret = (Light)((LightCommon)((ILightGetter)item).CommonInstance()!).GetNew();
            ((LightSetterTranslationCommon)((ILightGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Light
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Light_Registration.Instance;
        public new static Light_Registration Registration => Light_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LightCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LightSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LightSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LightBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LightBinaryWriteTranslation Instance = new LightBinaryWriteTranslation();

        public static void WriteEmbedded(
            ILightGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ILightGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Icons.TryGet(out var IconsItem))
            {
                ((IconsBinaryWriteTranslation)((IBinaryItem)IconsItem).BinaryWriteTranslator).Write(
                    item: IconsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Time);
                writer.Write(item.Radius);
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Color);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Light.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FalloffExponent);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FOV);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.NearClip);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FlickerPeriod);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FlickerIntensityAmplitude);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FlickerMovementAmplitude);
                writer.Write(item.Value);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight);
            }
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FadeValue,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Sound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
        }

        public void Write(
            MutagenWriter writer,
            ILightGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.LIGH),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILightGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILightGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILightGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LightBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static LightBinaryCreateTranslation Instance = new LightBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LIGH;
        public static void FillBinaryStructs(
            ILightInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ILightInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)Light_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Light_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Light_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Fallout4.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Light_FieldIndex.Destructible;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Light_FieldIndex.Name;
                }
                case RecordTypeInts.ICON:
                {
                    item.Icons = Mutagen.Bethesda.Fallout4.Icons.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Light_FieldIndex.Icons;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Time = dataFrame.ReadInt32();
                    item.Radius = dataFrame.ReadUInt32();
                    item.Color = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    item.Flags = EnumBinaryTranslation<Light.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.FalloffExponent = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FOV = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.NearClip = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FlickerPeriod = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FlickerIntensityAmplitude = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FlickerMovementAmplitude = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Value = dataFrame.ReadUInt32();
                    item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)Light_FieldIndex.Weight;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FadeValue = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Light_FieldIndex.FadeValue;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Sound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Light_FieldIndex.Sound;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class LightBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LightBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ILightGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Light_Registration.Instance;
        public new static Light_Registration Registration => Light_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LightCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LightSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => LightCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LightBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LightBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Light.MajorFlag MajorFlags => (Light.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IIconsGetter? Icons { get; private set; }
        private int? _DATALocation;
        public Light.DATADataType DATADataTypeState { get; private set; }
        #region Time
        private int _TimeLocation => _DATALocation!.Value;
        private bool _Time_IsSet => _DATALocation.HasValue;
        public Int32 Time => _Time_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(_TimeLocation, 4)) : default;
        #endregion
        #region Radius
        private int _RadiusLocation => _DATALocation!.Value + 0x4;
        private bool _Radius_IsSet => _DATALocation.HasValue;
        public UInt32 Radius => _Radius_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_RadiusLocation, 4)) : default;
        #endregion
        #region Color
        private int _ColorLocation => _DATALocation!.Value + 0x8;
        private bool _Color_IsSet => _DATALocation.HasValue;
        public Color Color => _Color_IsSet ? _data.Slice(_ColorLocation, 4).ReadColor(ColorBinaryType.Alpha) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0xC;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Light.Flag Flags => _Flags_IsSet ? (Light.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region FalloffExponent
        private int _FalloffExponentLocation => _DATALocation!.Value + 0x10;
        private bool _FalloffExponent_IsSet => _DATALocation.HasValue;
        public Single FalloffExponent => _FalloffExponent_IsSet ? _data.Slice(_FalloffExponentLocation, 4).Float() : default;
        #endregion
        #region FOV
        private int _FOVLocation => _DATALocation!.Value + 0x14;
        private bool _FOV_IsSet => _DATALocation.HasValue;
        public Single FOV => _FOV_IsSet ? _data.Slice(_FOVLocation, 4).Float() : default;
        #endregion
        #region NearClip
        private int _NearClipLocation => _DATALocation!.Value + 0x18;
        private bool _NearClip_IsSet => _DATALocation.HasValue;
        public Single NearClip => _NearClip_IsSet ? _data.Slice(_NearClipLocation, 4).Float() : default;
        #endregion
        #region FlickerPeriod
        private int _FlickerPeriodLocation => _DATALocation!.Value + 0x1C;
        private bool _FlickerPeriod_IsSet => _DATALocation.HasValue;
        public Single FlickerPeriod => _FlickerPeriod_IsSet ? _data.Slice(_FlickerPeriodLocation, 4).Float() : default;
        #endregion
        #region FlickerIntensityAmplitude
        private int _FlickerIntensityAmplitudeLocation => _DATALocation!.Value + 0x20;
        private bool _FlickerIntensityAmplitude_IsSet => _DATALocation.HasValue;
        public Single FlickerIntensityAmplitude => _FlickerIntensityAmplitude_IsSet ? _data.Slice(_FlickerIntensityAmplitudeLocation, 4).Float() : default;
        #endregion
        #region FlickerMovementAmplitude
        private int _FlickerMovementAmplitudeLocation => _DATALocation!.Value + 0x24;
        private bool _FlickerMovementAmplitude_IsSet => _DATALocation.HasValue;
        public Single FlickerMovementAmplitude => _FlickerMovementAmplitude_IsSet ? _data.Slice(_FlickerMovementAmplitudeLocation, 4).Float() : default;
        #endregion
        #region Value
        private int _ValueLocation => _DATALocation!.Value + 0x28;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0x2C;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? _data.Slice(_WeightLocation, 4).Float() : default;
        #endregion
        #region FadeValue
        private int? _FadeValueLocation;
        public Single FadeValue => _FadeValueLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _FadeValueLocation.Value, _package.MetaData.Constants).Float() : default;
        #endregion
        #region Sound
        private int? _SoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> Sound => _SoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LightBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LightBinaryOverlay LightFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new LightBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static LightBinaryOverlay LightFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LightFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Light_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Light_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Light_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Light_FieldIndex.Destructible;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.Name;
                }
                case RecordTypeInts.ICON:
                {
                    this.Icons = IconsBinaryOverlay.IconsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Light_FieldIndex.Icons;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Light_FieldIndex.Weight;
                }
                case RecordTypeInts.FNAM:
                {
                    _FadeValueLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.FadeValue;
                }
                case RecordTypeInts.SNAM:
                {
                    _SoundLocation = (stream.Position - offset);
                    return (int)Light_FieldIndex.Sound;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LightMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILightGetter rhs)) return false;
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILightGetter? obj)
        {
            return ((LightCommon)((ILightGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LightCommon)((ILightGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

