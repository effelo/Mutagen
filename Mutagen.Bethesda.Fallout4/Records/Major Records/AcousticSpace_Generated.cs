/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class AcousticSpace :
        Fallout4MajorRecord,
        IAcousticSpaceInternal,
        ILoquiObjectSetter<AcousticSpace>,
        IEquatable<IAcousticSpaceGetter>
    {
        #region Ctor
        protected AcousticSpace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IAcousticSpaceGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region AmbientSound
        public FormLinkNullable<ISoundDescriptorGetter> AmbientSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region UseSoundFromRegion
        public FormLinkNullable<IRegionGetter> UseSoundFromRegion { get; set; } = new FormLinkNullable<IRegionGetter>();
        #endregion
        #region EnvironmentType
        public FormLinkNullable<IReverbParametersGetter> EnvironmentType { get; set; } = new FormLinkNullable<IReverbParametersGetter>();
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AcousticSpaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAcousticSpaceGetter rhs)) return false;
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAcousticSpaceGetter? obj)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.AmbientSound = initialValue;
                this.UseSoundFromRegion = initialValue;
                this.EnvironmentType = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem AmbientSound,
                TItem UseSoundFromRegion,
                TItem EnvironmentType)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.AmbientSound = AmbientSound;
                this.UseSoundFromRegion = UseSoundFromRegion;
                this.EnvironmentType = EnvironmentType;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem AmbientSound;
            public TItem UseSoundFromRegion;
            public TItem EnvironmentType;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.AmbientSound, rhs.AmbientSound)) return false;
                if (!object.Equals(this.UseSoundFromRegion, rhs.UseSoundFromRegion)) return false;
                if (!object.Equals(this.EnvironmentType, rhs.EnvironmentType)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.AmbientSound);
                hash.Add(this.UseSoundFromRegion);
                hash.Add(this.EnvironmentType);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.AmbientSound)) return false;
                if (!eval(this.UseSoundFromRegion)) return false;
                if (!eval(this.EnvironmentType)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.AmbientSound)) return true;
                if (eval(this.UseSoundFromRegion)) return true;
                if (eval(this.EnvironmentType)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AcousticSpace.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.AmbientSound = eval(this.AmbientSound);
                obj.UseSoundFromRegion = eval(this.UseSoundFromRegion);
                obj.EnvironmentType = eval(this.EnvironmentType);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AcousticSpace.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AcousticSpace.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AcousticSpace.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.AmbientSound ?? true)
                    {
                        fg.AppendItem(AmbientSound, "AmbientSound");
                    }
                    if (printMask?.UseSoundFromRegion ?? true)
                    {
                        fg.AppendItem(UseSoundFromRegion, "UseSoundFromRegion");
                    }
                    if (printMask?.EnvironmentType ?? true)
                    {
                        fg.AppendItem(EnvironmentType, "EnvironmentType");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? AmbientSound;
            public Exception? UseSoundFromRegion;
            public Exception? EnvironmentType;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AcousticSpace_FieldIndex enu = (AcousticSpace_FieldIndex)index;
                switch (enu)
                {
                    case AcousticSpace_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case AcousticSpace_FieldIndex.AmbientSound:
                        return AmbientSound;
                    case AcousticSpace_FieldIndex.UseSoundFromRegion:
                        return UseSoundFromRegion;
                    case AcousticSpace_FieldIndex.EnvironmentType:
                        return EnvironmentType;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AcousticSpace_FieldIndex enu = (AcousticSpace_FieldIndex)index;
                switch (enu)
                {
                    case AcousticSpace_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case AcousticSpace_FieldIndex.AmbientSound:
                        this.AmbientSound = ex;
                        break;
                    case AcousticSpace_FieldIndex.UseSoundFromRegion:
                        this.UseSoundFromRegion = ex;
                        break;
                    case AcousticSpace_FieldIndex.EnvironmentType:
                        this.EnvironmentType = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AcousticSpace_FieldIndex enu = (AcousticSpace_FieldIndex)index;
                switch (enu)
                {
                    case AcousticSpace_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case AcousticSpace_FieldIndex.AmbientSound:
                        this.AmbientSound = (Exception?)obj;
                        break;
                    case AcousticSpace_FieldIndex.UseSoundFromRegion:
                        this.UseSoundFromRegion = (Exception?)obj;
                        break;
                    case AcousticSpace_FieldIndex.EnvironmentType:
                        this.EnvironmentType = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (AmbientSound != null) return true;
                if (UseSoundFromRegion != null) return true;
                if (EnvironmentType != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(AmbientSound, "AmbientSound");
                fg.AppendItem(UseSoundFromRegion, "UseSoundFromRegion");
                fg.AppendItem(EnvironmentType, "EnvironmentType");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.AmbientSound = this.AmbientSound.Combine(rhs.AmbientSound);
                ret.UseSoundFromRegion = this.UseSoundFromRegion.Combine(rhs.UseSoundFromRegion);
                ret.EnvironmentType = this.EnvironmentType.Combine(rhs.EnvironmentType);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool AmbientSound;
            public bool UseSoundFromRegion;
            public bool EnvironmentType;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.AmbientSound = defaultOn;
                this.UseSoundFromRegion = defaultOn;
                this.EnvironmentType = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((AmbientSound, null));
                ret.Add((UseSoundFromRegion, null));
                ret.Add((EnvironmentType, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AcousticSpace_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => AcousticSpaceCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AcousticSpaceSetterCommon.Instance.RemapLinks(this, mapping);
        public AcousticSpace(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private AcousticSpace(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal AcousticSpace(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public AcousticSpace(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public AcousticSpace(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AcousticSpaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AcousticSpaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static AcousticSpace CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AcousticSpace();
            ((AcousticSpaceSetterCommon)((IAcousticSpaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AcousticSpace item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((AcousticSpaceSetterCommon)((IAcousticSpaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AcousticSpace GetNew()
        {
            return new AcousticSpace();
        }

    }
    #endregion

    #region Interface
    public partial interface IAcousticSpace :
        IAcousticSpaceGetter,
        IFallout4MajorRecord,
        IObjectBounded,
        ILoquiObjectSetter<IAcousticSpaceInternal>,
        IFormLinkContainer
    {
        new ObjectBounds ObjectBounds { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> AmbientSound { get; set; }
        new FormLinkNullable<IRegionGetter> UseSoundFromRegion { get; set; }
        new FormLinkNullable<IReverbParametersGetter> EnvironmentType { get; set; }
    }

    public partial interface IAcousticSpaceInternal :
        IFallout4MajorRecordInternal,
        IAcousticSpace,
        IAcousticSpaceGetter
    {
    }

    public partial interface IAcousticSpaceGetter :
        IFallout4MajorRecordGetter,
        IObjectBoundedGetter,
        ILoquiObject<IAcousticSpaceGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => AcousticSpace_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        FormLinkNullable<ISoundDescriptorGetter> AmbientSound { get; }
        FormLinkNullable<IRegionGetter> UseSoundFromRegion { get; }
        FormLinkNullable<IReverbParametersGetter> EnvironmentType { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AcousticSpaceMixIn
    {
        public static void Clear(this IAcousticSpaceInternal item)
        {
            ((AcousticSpaceSetterCommon)((IAcousticSpaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AcousticSpace.Mask<bool> GetEqualsMask(
            this IAcousticSpaceGetter item,
            IAcousticSpaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAcousticSpaceGetter item,
            string? name = null,
            AcousticSpace.Mask<bool>? printMask = null)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAcousticSpaceGetter item,
            FileGeneration fg,
            string? name = null,
            AcousticSpace.Mask<bool>? printMask = null)
        {
            ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAcousticSpaceGetter item,
            IAcousticSpaceGetter rhs)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAcousticSpaceInternal lhs,
            IAcousticSpaceGetter rhs,
            out AcousticSpace.ErrorMask errorMask,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AcousticSpace.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAcousticSpaceInternal lhs,
            IAcousticSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AcousticSpace DeepCopy(
            this IAcousticSpaceGetter item,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            return ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AcousticSpace DeepCopy(
            this IAcousticSpaceGetter item,
            out AcousticSpace.ErrorMask errorMask,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            return ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AcousticSpace DeepCopy(
            this IAcousticSpaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AcousticSpace Duplicate(
            this IAcousticSpaceGetter item,
            FormKey formKey,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAcousticSpaceInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AcousticSpaceSetterCommon)((IAcousticSpaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum AcousticSpace_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        AmbientSound = 7,
        UseSoundFromRegion = 8,
        EnvironmentType = 9,
    }
    #endregion

    #region Registration
    public partial class AcousticSpace_Registration : ILoquiRegistration
    {
        public static readonly AcousticSpace_Registration Instance = new AcousticSpace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 89,
            version: 0);

        public const string GUID = "d5cf0987-a611-4770-b62b-10b433b50ff3";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(AcousticSpace.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AcousticSpace.ErrorMask);

        public static readonly Type ClassType = typeof(AcousticSpace);

        public static readonly Type GetterType = typeof(IAcousticSpaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAcousticSpace);

        public static readonly Type? InternalSetterType = typeof(IAcousticSpaceInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.AcousticSpace";

        public const string Name = "AcousticSpace";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ASPC;
        public static readonly Type BinaryWriteTranslation = typeof(AcousticSpaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class AcousticSpaceSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly AcousticSpaceSetterCommon Instance = new AcousticSpaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAcousticSpaceInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.AmbientSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.UseSoundFromRegion = FormLinkNullable<IRegionGetter>.Null;
            item.EnvironmentType = FormLinkNullable<IReverbParametersGetter>.Null;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IAcousticSpaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAcousticSpaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAcousticSpace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.AmbientSound = obj.AmbientSound.Relink(mapping);
            obj.UseSoundFromRegion = obj.UseSoundFromRegion.Relink(mapping);
            obj.EnvironmentType = obj.EnvironmentType.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAcousticSpaceInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IAcousticSpaceInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: AcousticSpaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AcousticSpaceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AcousticSpace)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AcousticSpace)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class AcousticSpaceCommon : Fallout4MajorRecordCommon
    {
        public new static readonly AcousticSpaceCommon Instance = new AcousticSpaceCommon();

        public AcousticSpace.Mask<bool> GetEqualsMask(
            IAcousticSpaceGetter item,
            IAcousticSpaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AcousticSpace.Mask<bool>(false);
            ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAcousticSpaceGetter item,
            IAcousticSpaceGetter rhs,
            AcousticSpace.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.AmbientSound = item.AmbientSound.Equals(rhs.AmbientSound);
            ret.UseSoundFromRegion = item.UseSoundFromRegion.Equals(rhs.UseSoundFromRegion);
            ret.EnvironmentType = item.EnvironmentType.Equals(rhs.EnvironmentType);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAcousticSpaceGetter item,
            string? name = null,
            AcousticSpace.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAcousticSpaceGetter item,
            FileGeneration fg,
            string? name = null,
            AcousticSpace.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AcousticSpace =>");
            }
            else
            {
                fg.AppendLine($"{name} (AcousticSpace) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAcousticSpaceGetter item,
            FileGeneration fg,
            AcousticSpace.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if (printMask?.AmbientSound ?? true)
            {
                fg.AppendItem(item.AmbientSound.FormKeyNullable, "AmbientSound");
            }
            if (printMask?.UseSoundFromRegion ?? true)
            {
                fg.AppendItem(item.UseSoundFromRegion.FormKeyNullable, "UseSoundFromRegion");
            }
            if (printMask?.EnvironmentType ?? true)
            {
                fg.AppendItem(item.EnvironmentType.FormKeyNullable, "EnvironmentType");
            }
        }
        
        public static AcousticSpace_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AcousticSpace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (AcousticSpace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (AcousticSpace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (AcousticSpace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (AcousticSpace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (AcousticSpace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new AcousticSpace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AcousticSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AcousticSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AcousticSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AcousticSpace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAcousticSpaceGetter? lhs,
            IAcousticSpaceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!lhs.AmbientSound.Equals(rhs.AmbientSound)) return false;
            if (!lhs.UseSoundFromRegion.Equals(rhs.UseSoundFromRegion)) return false;
            if (!lhs.EnvironmentType.Equals(rhs.EnvironmentType)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAcousticSpaceGetter?)lhs,
                rhs: rhs as IAcousticSpaceGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAcousticSpaceGetter?)lhs,
                rhs: rhs as IAcousticSpaceGetter);
        }
        
        public virtual int GetHashCode(IAcousticSpaceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            hash.Add(item.AmbientSound);
            hash.Add(item.UseSoundFromRegion);
            hash.Add(item.EnvironmentType);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IAcousticSpaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAcousticSpaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AcousticSpace.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IAcousticSpaceGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.AmbientSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AmbientSound);
            }
            if (obj.UseSoundFromRegion.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.UseSoundFromRegion);
            }
            if (obj.EnvironmentType.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.EnvironmentType);
            }
            yield break;
        }
        
        #region Duplicate
        public AcousticSpace Duplicate(
            IAcousticSpaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new AcousticSpace(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAcousticSpace)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAcousticSpace)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class AcousticSpaceSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly AcousticSpaceSetterTranslationCommon Instance = new AcousticSpaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAcousticSpaceInternal item,
            IAcousticSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IAcousticSpace item,
            IAcousticSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)AcousticSpace_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)AcousticSpace_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.AmbientSound) ?? true))
            {
                item.AmbientSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.AmbientSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.UseSoundFromRegion) ?? true))
            {
                item.UseSoundFromRegion = new FormLinkNullable<IRegionGetter>(rhs.UseSoundFromRegion.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.EnvironmentType) ?? true))
            {
                item.EnvironmentType = new FormLinkNullable<IReverbParametersGetter>(rhs.EnvironmentType.FormKeyNullable);
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAcousticSpaceInternal)item,
                rhs: (IAcousticSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAcousticSpace)item,
                rhs: (IAcousticSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAcousticSpaceInternal)item,
                rhs: (IAcousticSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAcousticSpace)item,
                rhs: (IAcousticSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AcousticSpace DeepCopy(
            IAcousticSpaceGetter item,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            AcousticSpace ret = (AcousticSpace)((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).GetNew();
            ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AcousticSpace DeepCopy(
            IAcousticSpaceGetter item,
            out AcousticSpace.ErrorMask errorMask,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AcousticSpace ret = (AcousticSpace)((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).GetNew();
            ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AcousticSpace.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AcousticSpace DeepCopy(
            IAcousticSpaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AcousticSpace ret = (AcousticSpace)((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).GetNew();
            ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class AcousticSpace
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AcousticSpace_Registration.Instance;
        public new static AcousticSpace_Registration Registration => AcousticSpace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AcousticSpaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AcousticSpaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AcousticSpaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class AcousticSpaceBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AcousticSpaceBinaryWriteTranslation Instance = new AcousticSpaceBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IAcousticSpaceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AmbientSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UseSoundFromRegion,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.RDAT));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EnvironmentType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.BNAM));
        }

        public void Write(
            MutagenWriter writer,
            IAcousticSpaceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.ASPC),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAcousticSpaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAcousticSpaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAcousticSpaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AcousticSpaceBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static AcousticSpaceBinaryCreateTranslation Instance = new AcousticSpaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ASPC;
        public static void FillBinaryStructs(
            IAcousticSpaceInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IAcousticSpaceInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)AcousticSpace_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AmbientSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)AcousticSpace_FieldIndex.AmbientSound;
                }
                case RecordTypeInts.RDAT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UseSoundFromRegion = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)AcousticSpace_FieldIndex.UseSoundFromRegion;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EnvironmentType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)AcousticSpace_FieldIndex.EnvironmentType;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class AcousticSpaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class AcousticSpaceBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IAcousticSpaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AcousticSpace_Registration.Instance;
        public new static AcousticSpace_Registration Registration => AcousticSpace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AcousticSpaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AcousticSpaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => AcousticSpaceCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AcousticSpaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AcousticSpaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region AmbientSound
        private int? _AmbientSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> AmbientSound => _AmbientSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AmbientSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region UseSoundFromRegion
        private int? _UseSoundFromRegionLocation;
        public FormLinkNullable<IRegionGetter> UseSoundFromRegion => _UseSoundFromRegionLocation.HasValue ? new FormLinkNullable<IRegionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _UseSoundFromRegionLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IRegionGetter>.Null;
        #endregion
        #region EnvironmentType
        private int? _EnvironmentTypeLocation;
        public FormLinkNullable<IReverbParametersGetter> EnvironmentType => _EnvironmentTypeLocation.HasValue ? new FormLinkNullable<IReverbParametersGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EnvironmentTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IReverbParametersGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AcousticSpaceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static AcousticSpaceBinaryOverlay AcousticSpaceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new AcousticSpaceBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static AcousticSpaceBinaryOverlay AcousticSpaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return AcousticSpaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)AcousticSpace_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.SNAM:
                {
                    _AmbientSoundLocation = (stream.Position - offset);
                    return (int)AcousticSpace_FieldIndex.AmbientSound;
                }
                case RecordTypeInts.RDAT:
                {
                    _UseSoundFromRegionLocation = (stream.Position - offset);
                    return (int)AcousticSpace_FieldIndex.UseSoundFromRegion;
                }
                case RecordTypeInts.BNAM:
                {
                    _EnvironmentTypeLocation = (stream.Position - offset);
                    return (int)AcousticSpace_FieldIndex.EnvironmentType;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AcousticSpaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAcousticSpaceGetter rhs)) return false;
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAcousticSpaceGetter? obj)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

