/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PerkEntryPointSelectText :
        APerkEntryPointEffect,
        IPerkEntryPointSelectText,
        ILoquiObjectSetter<PerkEntryPointSelectText>,
        IEquatable<IPerkEntryPointSelectTextGetter>
    {
        #region Ctor
        public PerkEntryPointSelectText()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Text
        public String Text { get; set; } = string.Empty;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkEntryPointSelectTextMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPerkEntryPointSelectTextGetter rhs)) return false;
            return ((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPerkEntryPointSelectTextGetter? obj)
        {
            return ((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APerkEntryPointEffect.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Text = initialValue;
            }

            public Mask(
                TItem Rank,
                TItem Priority,
                TItem Conditions,
                TItem PRKEDataTypeState,
                TItem EntryPoint,
                TItem PerkConditionTabCount,
                TItem Text)
            : base(
                Rank: Rank,
                Priority: Priority,
                Conditions: Conditions,
                PRKEDataTypeState: PRKEDataTypeState,
                EntryPoint: EntryPoint,
                PerkConditionTabCount: PerkConditionTabCount)
            {
                this.Text = Text;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Text;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Text, rhs.Text)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Text);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Text)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Text)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PerkEntryPointSelectText.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Text = eval(this.Text);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PerkEntryPointSelectText.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PerkEntryPointSelectText.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PerkEntryPointSelectText.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Text ?? true)
                    {
                        fg.AppendItem(Text, "Text");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APerkEntryPointEffect.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Text;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PerkEntryPointSelectText_FieldIndex enu = (PerkEntryPointSelectText_FieldIndex)index;
                switch (enu)
                {
                    case PerkEntryPointSelectText_FieldIndex.Text:
                        return Text;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PerkEntryPointSelectText_FieldIndex enu = (PerkEntryPointSelectText_FieldIndex)index;
                switch (enu)
                {
                    case PerkEntryPointSelectText_FieldIndex.Text:
                        this.Text = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PerkEntryPointSelectText_FieldIndex enu = (PerkEntryPointSelectText_FieldIndex)index;
                switch (enu)
                {
                    case PerkEntryPointSelectText_FieldIndex.Text:
                        this.Text = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Text != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Text, "Text");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Text = this.Text.Combine(rhs.Text);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APerkEntryPointEffect.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Text;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Text = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Text, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PerkEntryPointSelectText_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PerkEntryPointSelectTextBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkEntryPointSelectTextBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static PerkEntryPointSelectText CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkEntryPointSelectText();
            ((PerkEntryPointSelectTextSetterCommon)((IPerkEntryPointSelectTextGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PerkEntryPointSelectText item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PerkEntryPointSelectTextSetterCommon)((IPerkEntryPointSelectTextGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PerkEntryPointSelectText GetNew()
        {
            return new PerkEntryPointSelectText();
        }

    }
    #endregion

    #region Interface
    public partial interface IPerkEntryPointSelectText :
        IPerkEntryPointSelectTextGetter,
        IAPerkEntryPointEffect,
        ILoquiObjectSetter<IPerkEntryPointSelectText>
    {
        new String Text { get; set; }
    }

    public partial interface IPerkEntryPointSelectTextGetter :
        IAPerkEntryPointEffectGetter,
        ILoquiObject<IPerkEntryPointSelectTextGetter>,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => PerkEntryPointSelectText_Registration.Instance;
        String Text { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PerkEntryPointSelectTextMixIn
    {
        public static void Clear(this IPerkEntryPointSelectText item)
        {
            ((PerkEntryPointSelectTextSetterCommon)((IPerkEntryPointSelectTextGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PerkEntryPointSelectText.Mask<bool> GetEqualsMask(
            this IPerkEntryPointSelectTextGetter item,
            IPerkEntryPointSelectTextGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPerkEntryPointSelectTextGetter item,
            string? name = null,
            PerkEntryPointSelectText.Mask<bool>? printMask = null)
        {
            return ((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPerkEntryPointSelectTextGetter item,
            FileGeneration fg,
            string? name = null,
            PerkEntryPointSelectText.Mask<bool>? printMask = null)
        {
            ((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPerkEntryPointSelectTextGetter item,
            IPerkEntryPointSelectTextGetter rhs)
        {
            return ((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPerkEntryPointSelectText lhs,
            IPerkEntryPointSelectTextGetter rhs,
            out PerkEntryPointSelectText.ErrorMask errorMask,
            PerkEntryPointSelectText.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PerkEntryPointSelectTextSetterTranslationCommon)((IPerkEntryPointSelectTextGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PerkEntryPointSelectText.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPerkEntryPointSelectText lhs,
            IPerkEntryPointSelectTextGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PerkEntryPointSelectTextSetterTranslationCommon)((IPerkEntryPointSelectTextGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PerkEntryPointSelectText DeepCopy(
            this IPerkEntryPointSelectTextGetter item,
            PerkEntryPointSelectText.TranslationMask? copyMask = null)
        {
            return ((PerkEntryPointSelectTextSetterTranslationCommon)((IPerkEntryPointSelectTextGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PerkEntryPointSelectText DeepCopy(
            this IPerkEntryPointSelectTextGetter item,
            out PerkEntryPointSelectText.ErrorMask errorMask,
            PerkEntryPointSelectText.TranslationMask? copyMask = null)
        {
            return ((PerkEntryPointSelectTextSetterTranslationCommon)((IPerkEntryPointSelectTextGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PerkEntryPointSelectText DeepCopy(
            this IPerkEntryPointSelectTextGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PerkEntryPointSelectTextSetterTranslationCommon)((IPerkEntryPointSelectTextGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPerkEntryPointSelectText item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkEntryPointSelectTextSetterCommon)((IPerkEntryPointSelectTextGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PerkEntryPointSelectText_FieldIndex
    {
        Rank = 0,
        Priority = 1,
        Conditions = 2,
        PRKEDataTypeState = 3,
        EntryPoint = 4,
        PerkConditionTabCount = 5,
        Text = 6,
    }
    #endregion

    #region Registration
    public partial class PerkEntryPointSelectText_Registration : ILoquiRegistration
    {
        public static readonly PerkEntryPointSelectText_Registration Instance = new PerkEntryPointSelectText_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 424,
            version: 0);

        public const string GUID = "2fd6a5c4-2007-450b-8505-5af44523b46a";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(PerkEntryPointSelectText.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PerkEntryPointSelectText.ErrorMask);

        public static readonly Type ClassType = typeof(PerkEntryPointSelectText);

        public static readonly Type GetterType = typeof(IPerkEntryPointSelectTextGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPerkEntryPointSelectText);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PerkEntryPointSelectText";

        public const string Name = "PerkEntryPointSelectText";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PRKE;
        public static readonly Type BinaryWriteTranslation = typeof(PerkEntryPointSelectTextBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PerkEntryPointSelectTextSetterCommon : APerkEntryPointEffectSetterCommon
    {
        public new static readonly PerkEntryPointSelectTextSetterCommon Instance = new PerkEntryPointSelectTextSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPerkEntryPointSelectText item)
        {
            ClearPartial();
            item.Text = string.Empty;
            base.Clear(item);
        }
        
        public override void Clear(IAPerkEntryPointEffect item)
        {
            Clear(item: (IPerkEntryPointSelectText)item);
        }
        
        public override void Clear(IAPerkEffect item)
        {
            Clear(item: (IPerkEntryPointSelectText)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPerkEntryPointSelectText obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPerkEntryPointSelectText item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PerkEntryPointSelectTextBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PerkEntryPointSelectTextBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPerkEntryPointEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PerkEntryPointSelectText)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IAPerkEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PerkEntryPointSelectText)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PerkEntryPointSelectTextCommon : APerkEntryPointEffectCommon
    {
        public new static readonly PerkEntryPointSelectTextCommon Instance = new PerkEntryPointSelectTextCommon();

        public PerkEntryPointSelectText.Mask<bool> GetEqualsMask(
            IPerkEntryPointSelectTextGetter item,
            IPerkEntryPointSelectTextGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PerkEntryPointSelectText.Mask<bool>(false);
            ((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPerkEntryPointSelectTextGetter item,
            IPerkEntryPointSelectTextGetter rhs,
            PerkEntryPointSelectText.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Text = string.Equals(item.Text, rhs.Text);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPerkEntryPointSelectTextGetter item,
            string? name = null,
            PerkEntryPointSelectText.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPerkEntryPointSelectTextGetter item,
            FileGeneration fg,
            string? name = null,
            PerkEntryPointSelectText.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PerkEntryPointSelectText =>");
            }
            else
            {
                fg.AppendLine($"{name} (PerkEntryPointSelectText) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPerkEntryPointSelectTextGetter item,
            FileGeneration fg,
            PerkEntryPointSelectText.Mask<bool>? printMask = null)
        {
            APerkEntryPointEffectCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Text ?? true)
            {
                fg.AppendItem(item.Text, "Text");
            }
        }
        
        public static PerkEntryPointSelectText_FieldIndex ConvertFieldIndex(APerkEntryPointEffect_FieldIndex index)
        {
            switch (index)
            {
                case APerkEntryPointEffect_FieldIndex.Rank:
                    return (PerkEntryPointSelectText_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.Priority:
                    return (PerkEntryPointSelectText_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.Conditions:
                    return (PerkEntryPointSelectText_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.PRKEDataTypeState:
                    return (PerkEntryPointSelectText_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.EntryPoint:
                    return (PerkEntryPointSelectText_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                    return (PerkEntryPointSelectText_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PerkEntryPointSelectText_FieldIndex ConvertFieldIndex(APerkEffect_FieldIndex index)
        {
            switch (index)
            {
                case APerkEffect_FieldIndex.Rank:
                    return (PerkEntryPointSelectText_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Priority:
                    return (PerkEntryPointSelectText_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Conditions:
                    return (PerkEntryPointSelectText_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.PRKEDataTypeState:
                    return (PerkEntryPointSelectText_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPerkEntryPointSelectTextGetter? lhs,
            IPerkEntryPointSelectTextGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAPerkEntryPointEffectGetter)lhs, (IAPerkEntryPointEffectGetter)rhs)) return false;
            if (!string.Equals(lhs.Text, rhs.Text)) return false;
            return true;
        }
        
        public override bool Equals(
            IAPerkEntryPointEffectGetter? lhs,
            IAPerkEntryPointEffectGetter? rhs)
        {
            return Equals(
                lhs: (IPerkEntryPointSelectTextGetter?)lhs,
                rhs: rhs as IPerkEntryPointSelectTextGetter);
        }
        
        public override bool Equals(
            IAPerkEffectGetter? lhs,
            IAPerkEffectGetter? rhs)
        {
            return Equals(
                lhs: (IPerkEntryPointSelectTextGetter?)lhs,
                rhs: rhs as IPerkEntryPointSelectTextGetter);
        }
        
        public virtual int GetHashCode(IPerkEntryPointSelectTextGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Text);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPerkEntryPointEffectGetter item)
        {
            return GetHashCode(item: (IPerkEntryPointSelectTextGetter)item);
        }
        
        public override int GetHashCode(IAPerkEffectGetter item)
        {
            return GetHashCode(item: (IPerkEntryPointSelectTextGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PerkEntryPointSelectText.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPerkEntryPointSelectTextGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class PerkEntryPointSelectTextSetterTranslationCommon : APerkEntryPointEffectSetterTranslationCommon
    {
        public new static readonly PerkEntryPointSelectTextSetterTranslationCommon Instance = new PerkEntryPointSelectTextSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPerkEntryPointSelectText item,
            IPerkEntryPointSelectTextGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPerkEntryPointEffect)item,
                (IAPerkEntryPointEffectGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PerkEntryPointSelectText_FieldIndex.Text) ?? true))
            {
                item.Text = rhs.Text;
            }
        }
        
        
        public override void DeepCopyIn(
            IAPerkEntryPointEffect item,
            IAPerkEntryPointEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPerkEntryPointSelectText)item,
                rhs: (IPerkEntryPointSelectTextGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        
        public override void DeepCopyIn(
            IAPerkEffect item,
            IAPerkEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPerkEntryPointSelectText)item,
                rhs: (IPerkEntryPointSelectTextGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PerkEntryPointSelectText DeepCopy(
            IPerkEntryPointSelectTextGetter item,
            PerkEntryPointSelectText.TranslationMask? copyMask = null)
        {
            PerkEntryPointSelectText ret = (PerkEntryPointSelectText)((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)item).CommonInstance()!).GetNew();
            ((PerkEntryPointSelectTextSetterTranslationCommon)((IPerkEntryPointSelectTextGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PerkEntryPointSelectText DeepCopy(
            IPerkEntryPointSelectTextGetter item,
            out PerkEntryPointSelectText.ErrorMask errorMask,
            PerkEntryPointSelectText.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PerkEntryPointSelectText ret = (PerkEntryPointSelectText)((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)item).CommonInstance()!).GetNew();
            ((PerkEntryPointSelectTextSetterTranslationCommon)((IPerkEntryPointSelectTextGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PerkEntryPointSelectText.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PerkEntryPointSelectText DeepCopy(
            IPerkEntryPointSelectTextGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PerkEntryPointSelectText ret = (PerkEntryPointSelectText)((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)item).CommonInstance()!).GetNew();
            ((PerkEntryPointSelectTextSetterTranslationCommon)((IPerkEntryPointSelectTextGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PerkEntryPointSelectText
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkEntryPointSelectText_Registration.Instance;
        public new static PerkEntryPointSelectText_Registration Registration => PerkEntryPointSelectText_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PerkEntryPointSelectTextCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PerkEntryPointSelectTextSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PerkEntryPointSelectTextSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PerkEntryPointSelectTextBinaryWriteTranslation :
        APerkEntryPointEffectBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PerkEntryPointSelectTextBinaryWriteTranslation Instance = new PerkEntryPointSelectTextBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPerkEntryPointSelectTextGetter item,
            MutagenWriter writer)
        {
            APerkEntryPointEffectBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Text,
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IPerkEntryPointSelectTextGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            APerkEntryPointEffectBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkEntryPointSelectTextGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPerkEntryPointEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkEntryPointSelectTextGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPerkEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkEntryPointSelectTextGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PerkEntryPointSelectTextBinaryCreateTranslation : APerkEntryPointEffectBinaryCreateTranslation
    {
        public new readonly static PerkEntryPointSelectTextBinaryCreateTranslation Instance = new PerkEntryPointSelectTextBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPerkEntryPointSelectText item,
            MutagenFrame frame)
        {
            APerkEntryPointEffectBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Text = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                frame: frame,
                stringBinaryType: StringBinaryType.NullTerminate,
                parseWhole: false);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PerkEntryPointSelectTextBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PerkEntryPointSelectTextBinaryOverlay :
        APerkEntryPointEffectBinaryOverlay,
        IPerkEntryPointSelectTextGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkEntryPointSelectText_Registration.Instance;
        public new static PerkEntryPointSelectText_Registration Registration => PerkEntryPointSelectText_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PerkEntryPointSelectTextCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PerkEntryPointSelectTextSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PerkEntryPointSelectTextBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkEntryPointSelectTextBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Text
        public String Text { get; private set; } = string.Empty;
        protected int TextEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PerkEntryPointSelectTextBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PerkEntryPointSelectTextBinaryOverlay PerkEntryPointSelectTextFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkEntryPointSelectTextBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.Text = BinaryStringUtility.ParseUnknownLengthString(ret._data.Slice(0x2));
            ret.TextEndingPos = 0x2 + ret.Text.Length + 1;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PerkEntryPointSelectTextBinaryOverlay PerkEntryPointSelectTextFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PerkEntryPointSelectTextFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkEntryPointSelectTextMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPerkEntryPointSelectTextGetter rhs)) return false;
            return ((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPerkEntryPointSelectTextGetter? obj)
        {
            return ((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PerkEntryPointSelectTextCommon)((IPerkEntryPointSelectTextGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

