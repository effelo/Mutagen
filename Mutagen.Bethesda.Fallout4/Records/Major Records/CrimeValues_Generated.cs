/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class CrimeValues :
        ICrimeValues,
        ILoquiObjectSetter<CrimeValues>,
        IEquatable<ICrimeValuesGetter>
    {
        #region Ctor
        public CrimeValues()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public CrimeValues.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region Arrest
        public Boolean Arrest { get; set; } = default;
        #endregion
        #region AttackOnSight
        public Boolean AttackOnSight { get; set; } = default;
        #endregion
        #region Murder
        public UInt16 Murder { get; set; } = default;
        #endregion
        #region Assault
        public UInt16 Assault { get; set; } = default;
        #endregion
        #region Trespass
        public UInt16 Trespass { get; set; } = default;
        #endregion
        #region Pickpocket
        public UInt16 Pickpocket { get; set; } = default;
        #endregion
        #region Unknown
        public UInt16 Unknown { get; set; } = default;
        #endregion
        #region StealMult
        public Single StealMult { get; set; } = default;
        #endregion
        #region Escape
        public UInt16 Escape { get; set; } = default;
        #endregion
        #region Werewolf
        public UInt16 Werewolf { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CrimeValuesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICrimeValuesGetter rhs)) return false;
            return ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICrimeValuesGetter? obj)
        {
            return ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Arrest = initialValue;
                this.AttackOnSight = initialValue;
                this.Murder = initialValue;
                this.Assault = initialValue;
                this.Trespass = initialValue;
                this.Pickpocket = initialValue;
                this.Unknown = initialValue;
                this.StealMult = initialValue;
                this.Escape = initialValue;
                this.Werewolf = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem Arrest,
                TItem AttackOnSight,
                TItem Murder,
                TItem Assault,
                TItem Trespass,
                TItem Pickpocket,
                TItem Unknown,
                TItem StealMult,
                TItem Escape,
                TItem Werewolf)
            {
                this.Versioning = Versioning;
                this.Arrest = Arrest;
                this.AttackOnSight = AttackOnSight;
                this.Murder = Murder;
                this.Assault = Assault;
                this.Trespass = Trespass;
                this.Pickpocket = Pickpocket;
                this.Unknown = Unknown;
                this.StealMult = StealMult;
                this.Escape = Escape;
                this.Werewolf = Werewolf;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Arrest;
            public TItem AttackOnSight;
            public TItem Murder;
            public TItem Assault;
            public TItem Trespass;
            public TItem Pickpocket;
            public TItem Unknown;
            public TItem StealMult;
            public TItem Escape;
            public TItem Werewolf;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Arrest, rhs.Arrest)) return false;
                if (!object.Equals(this.AttackOnSight, rhs.AttackOnSight)) return false;
                if (!object.Equals(this.Murder, rhs.Murder)) return false;
                if (!object.Equals(this.Assault, rhs.Assault)) return false;
                if (!object.Equals(this.Trespass, rhs.Trespass)) return false;
                if (!object.Equals(this.Pickpocket, rhs.Pickpocket)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.StealMult, rhs.StealMult)) return false;
                if (!object.Equals(this.Escape, rhs.Escape)) return false;
                if (!object.Equals(this.Werewolf, rhs.Werewolf)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Arrest);
                hash.Add(this.AttackOnSight);
                hash.Add(this.Murder);
                hash.Add(this.Assault);
                hash.Add(this.Trespass);
                hash.Add(this.Pickpocket);
                hash.Add(this.Unknown);
                hash.Add(this.StealMult);
                hash.Add(this.Escape);
                hash.Add(this.Werewolf);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Arrest)) return false;
                if (!eval(this.AttackOnSight)) return false;
                if (!eval(this.Murder)) return false;
                if (!eval(this.Assault)) return false;
                if (!eval(this.Trespass)) return false;
                if (!eval(this.Pickpocket)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.StealMult)) return false;
                if (!eval(this.Escape)) return false;
                if (!eval(this.Werewolf)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Arrest)) return true;
                if (eval(this.AttackOnSight)) return true;
                if (eval(this.Murder)) return true;
                if (eval(this.Assault)) return true;
                if (eval(this.Trespass)) return true;
                if (eval(this.Pickpocket)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.StealMult)) return true;
                if (eval(this.Escape)) return true;
                if (eval(this.Werewolf)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CrimeValues.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Arrest = eval(this.Arrest);
                obj.AttackOnSight = eval(this.AttackOnSight);
                obj.Murder = eval(this.Murder);
                obj.Assault = eval(this.Assault);
                obj.Trespass = eval(this.Trespass);
                obj.Pickpocket = eval(this.Pickpocket);
                obj.Unknown = eval(this.Unknown);
                obj.StealMult = eval(this.StealMult);
                obj.Escape = eval(this.Escape);
                obj.Werewolf = eval(this.Werewolf);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CrimeValues.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CrimeValues.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CrimeValues.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Arrest ?? true)
                    {
                        fg.AppendItem(Arrest, "Arrest");
                    }
                    if (printMask?.AttackOnSight ?? true)
                    {
                        fg.AppendItem(AttackOnSight, "AttackOnSight");
                    }
                    if (printMask?.Murder ?? true)
                    {
                        fg.AppendItem(Murder, "Murder");
                    }
                    if (printMask?.Assault ?? true)
                    {
                        fg.AppendItem(Assault, "Assault");
                    }
                    if (printMask?.Trespass ?? true)
                    {
                        fg.AppendItem(Trespass, "Trespass");
                    }
                    if (printMask?.Pickpocket ?? true)
                    {
                        fg.AppendItem(Pickpocket, "Pickpocket");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.StealMult ?? true)
                    {
                        fg.AppendItem(StealMult, "StealMult");
                    }
                    if (printMask?.Escape ?? true)
                    {
                        fg.AppendItem(Escape, "Escape");
                    }
                    if (printMask?.Werewolf ?? true)
                    {
                        fg.AppendItem(Werewolf, "Werewolf");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Arrest;
            public Exception? AttackOnSight;
            public Exception? Murder;
            public Exception? Assault;
            public Exception? Trespass;
            public Exception? Pickpocket;
            public Exception? Unknown;
            public Exception? StealMult;
            public Exception? Escape;
            public Exception? Werewolf;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CrimeValues_FieldIndex enu = (CrimeValues_FieldIndex)index;
                switch (enu)
                {
                    case CrimeValues_FieldIndex.Versioning:
                        return Versioning;
                    case CrimeValues_FieldIndex.Arrest:
                        return Arrest;
                    case CrimeValues_FieldIndex.AttackOnSight:
                        return AttackOnSight;
                    case CrimeValues_FieldIndex.Murder:
                        return Murder;
                    case CrimeValues_FieldIndex.Assault:
                        return Assault;
                    case CrimeValues_FieldIndex.Trespass:
                        return Trespass;
                    case CrimeValues_FieldIndex.Pickpocket:
                        return Pickpocket;
                    case CrimeValues_FieldIndex.Unknown:
                        return Unknown;
                    case CrimeValues_FieldIndex.StealMult:
                        return StealMult;
                    case CrimeValues_FieldIndex.Escape:
                        return Escape;
                    case CrimeValues_FieldIndex.Werewolf:
                        return Werewolf;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CrimeValues_FieldIndex enu = (CrimeValues_FieldIndex)index;
                switch (enu)
                {
                    case CrimeValues_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case CrimeValues_FieldIndex.Arrest:
                        this.Arrest = ex;
                        break;
                    case CrimeValues_FieldIndex.AttackOnSight:
                        this.AttackOnSight = ex;
                        break;
                    case CrimeValues_FieldIndex.Murder:
                        this.Murder = ex;
                        break;
                    case CrimeValues_FieldIndex.Assault:
                        this.Assault = ex;
                        break;
                    case CrimeValues_FieldIndex.Trespass:
                        this.Trespass = ex;
                        break;
                    case CrimeValues_FieldIndex.Pickpocket:
                        this.Pickpocket = ex;
                        break;
                    case CrimeValues_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case CrimeValues_FieldIndex.StealMult:
                        this.StealMult = ex;
                        break;
                    case CrimeValues_FieldIndex.Escape:
                        this.Escape = ex;
                        break;
                    case CrimeValues_FieldIndex.Werewolf:
                        this.Werewolf = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CrimeValues_FieldIndex enu = (CrimeValues_FieldIndex)index;
                switch (enu)
                {
                    case CrimeValues_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Arrest:
                        this.Arrest = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.AttackOnSight:
                        this.AttackOnSight = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Murder:
                        this.Murder = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Assault:
                        this.Assault = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Trespass:
                        this.Trespass = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Pickpocket:
                        this.Pickpocket = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.StealMult:
                        this.StealMult = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Escape:
                        this.Escape = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Werewolf:
                        this.Werewolf = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Arrest != null) return true;
                if (AttackOnSight != null) return true;
                if (Murder != null) return true;
                if (Assault != null) return true;
                if (Trespass != null) return true;
                if (Pickpocket != null) return true;
                if (Unknown != null) return true;
                if (StealMult != null) return true;
                if (Escape != null) return true;
                if (Werewolf != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(Arrest, "Arrest");
                fg.AppendItem(AttackOnSight, "AttackOnSight");
                fg.AppendItem(Murder, "Murder");
                fg.AppendItem(Assault, "Assault");
                fg.AppendItem(Trespass, "Trespass");
                fg.AppendItem(Pickpocket, "Pickpocket");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(StealMult, "StealMult");
                fg.AppendItem(Escape, "Escape");
                fg.AppendItem(Werewolf, "Werewolf");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Arrest = this.Arrest.Combine(rhs.Arrest);
                ret.AttackOnSight = this.AttackOnSight.Combine(rhs.AttackOnSight);
                ret.Murder = this.Murder.Combine(rhs.Murder);
                ret.Assault = this.Assault.Combine(rhs.Assault);
                ret.Trespass = this.Trespass.Combine(rhs.Trespass);
                ret.Pickpocket = this.Pickpocket.Combine(rhs.Pickpocket);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.StealMult = this.StealMult.Combine(rhs.StealMult);
                ret.Escape = this.Escape.Combine(rhs.Escape);
                ret.Werewolf = this.Werewolf.Combine(rhs.Werewolf);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool Arrest;
            public bool AttackOnSight;
            public bool Murder;
            public bool Assault;
            public bool Trespass;
            public bool Pickpocket;
            public bool Unknown;
            public bool StealMult;
            public bool Escape;
            public bool Werewolf;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.Arrest = defaultOn;
                this.AttackOnSight = defaultOn;
                this.Murder = defaultOn;
                this.Assault = defaultOn;
                this.Trespass = defaultOn;
                this.Pickpocket = defaultOn;
                this.Unknown = defaultOn;
                this.StealMult = defaultOn;
                this.Escape = defaultOn;
                this.Werewolf = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Arrest, null));
                ret.Add((AttackOnSight, null));
                ret.Add((Murder, null));
                ret.Add((Assault, null));
                ret.Add((Trespass, null));
                ret.Add((Pickpocket, null));
                ret.Add((Unknown, null));
                ret.Add((StealMult, null));
                ret.Add((Escape, null));
                ret.Add((Werewolf, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CrimeValues_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1,
            Break1 = 2
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CrimeValuesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CrimeValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static CrimeValues CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CrimeValues();
            ((CrimeValuesSetterCommon)((ICrimeValuesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CrimeValues item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CrimeValuesSetterCommon)((ICrimeValuesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CrimeValues GetNew()
        {
            return new CrimeValues();
        }

    }
    #endregion

    #region Interface
    public partial interface ICrimeValues :
        ICrimeValuesGetter,
        ILoquiObjectSetter<ICrimeValues>
    {
        new CrimeValues.VersioningBreaks Versioning { get; set; }
        new Boolean Arrest { get; set; }
        new Boolean AttackOnSight { get; set; }
        new UInt16 Murder { get; set; }
        new UInt16 Assault { get; set; }
        new UInt16 Trespass { get; set; }
        new UInt16 Pickpocket { get; set; }
        new UInt16 Unknown { get; set; }
        new Single StealMult { get; set; }
        new UInt16 Escape { get; set; }
        new UInt16 Werewolf { get; set; }
    }

    public partial interface ICrimeValuesGetter :
        ILoquiObject,
        ILoquiObject<ICrimeValuesGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => CrimeValues_Registration.Instance;
        CrimeValues.VersioningBreaks Versioning { get; }
        Boolean Arrest { get; }
        Boolean AttackOnSight { get; }
        UInt16 Murder { get; }
        UInt16 Assault { get; }
        UInt16 Trespass { get; }
        UInt16 Pickpocket { get; }
        UInt16 Unknown { get; }
        Single StealMult { get; }
        UInt16 Escape { get; }
        UInt16 Werewolf { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CrimeValuesMixIn
    {
        public static void Clear(this ICrimeValues item)
        {
            ((CrimeValuesSetterCommon)((ICrimeValuesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CrimeValues.Mask<bool> GetEqualsMask(
            this ICrimeValuesGetter item,
            ICrimeValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICrimeValuesGetter item,
            string? name = null,
            CrimeValues.Mask<bool>? printMask = null)
        {
            return ((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICrimeValuesGetter item,
            FileGeneration fg,
            string? name = null,
            CrimeValues.Mask<bool>? printMask = null)
        {
            ((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICrimeValuesGetter item,
            ICrimeValuesGetter rhs)
        {
            return ((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICrimeValues lhs,
            ICrimeValuesGetter rhs)
        {
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICrimeValues lhs,
            ICrimeValuesGetter rhs,
            CrimeValues.TranslationMask? copyMask = null)
        {
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICrimeValues lhs,
            ICrimeValuesGetter rhs,
            out CrimeValues.ErrorMask errorMask,
            CrimeValues.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CrimeValues.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICrimeValues lhs,
            ICrimeValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CrimeValues DeepCopy(
            this ICrimeValuesGetter item,
            CrimeValues.TranslationMask? copyMask = null)
        {
            return ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CrimeValues DeepCopy(
            this ICrimeValuesGetter item,
            out CrimeValues.ErrorMask errorMask,
            CrimeValues.TranslationMask? copyMask = null)
        {
            return ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CrimeValues DeepCopy(
            this ICrimeValuesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICrimeValues item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CrimeValuesSetterCommon)((ICrimeValuesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum CrimeValues_FieldIndex
    {
        Versioning = 0,
        Arrest = 1,
        AttackOnSight = 2,
        Murder = 3,
        Assault = 4,
        Trespass = 5,
        Pickpocket = 6,
        Unknown = 7,
        StealMult = 8,
        Escape = 9,
        Werewolf = 10,
    }
    #endregion

    #region Registration
    public partial class CrimeValues_Registration : ILoquiRegistration
    {
        public static readonly CrimeValues_Registration Instance = new CrimeValues_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 132,
            version: 0);

        public const string GUID = "7bd6c4ae-2666-4f6f-a7a0-f459a05b7787";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(CrimeValues.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CrimeValues.ErrorMask);

        public static readonly Type ClassType = typeof(CrimeValues);

        public static readonly Type GetterType = typeof(ICrimeValuesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICrimeValues);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.CrimeValues";

        public const string Name = "CrimeValues";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CRVA;
        public static readonly Type BinaryWriteTranslation = typeof(CrimeValuesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CrimeValuesSetterCommon
    {
        public static readonly CrimeValuesSetterCommon Instance = new CrimeValuesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICrimeValues item)
        {
            ClearPartial();
            item.Versioning = default;
            item.Arrest = default;
            item.AttackOnSight = default;
            item.Murder = default;
            item.Assault = default;
            item.Trespass = default;
            item.Pickpocket = default;
            item.Unknown = default;
            item.StealMult = default;
            item.Escape = default;
            item.Werewolf = default;
        }
        
        #region Mutagen
        public void RemapLinks(ICrimeValues obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICrimeValues item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.CRVA)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CrimeValuesBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CrimeValuesCommon
    {
        public static readonly CrimeValuesCommon Instance = new CrimeValuesCommon();

        public CrimeValues.Mask<bool> GetEqualsMask(
            ICrimeValuesGetter item,
            ICrimeValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CrimeValues.Mask<bool>(false);
            ((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICrimeValuesGetter item,
            ICrimeValuesGetter rhs,
            CrimeValues.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Arrest = item.Arrest == rhs.Arrest;
            ret.AttackOnSight = item.AttackOnSight == rhs.AttackOnSight;
            ret.Murder = item.Murder == rhs.Murder;
            ret.Assault = item.Assault == rhs.Assault;
            ret.Trespass = item.Trespass == rhs.Trespass;
            ret.Pickpocket = item.Pickpocket == rhs.Pickpocket;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.StealMult = item.StealMult.EqualsWithin(rhs.StealMult);
            ret.Escape = item.Escape == rhs.Escape;
            ret.Werewolf = item.Werewolf == rhs.Werewolf;
        }
        
        public string ToString(
            ICrimeValuesGetter item,
            string? name = null,
            CrimeValues.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICrimeValuesGetter item,
            FileGeneration fg,
            string? name = null,
            CrimeValues.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CrimeValues =>");
            }
            else
            {
                fg.AppendLine($"{name} (CrimeValues) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICrimeValuesGetter item,
            FileGeneration fg,
            CrimeValues.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Arrest ?? true)
            {
                fg.AppendItem(item.Arrest, "Arrest");
            }
            if (printMask?.AttackOnSight ?? true)
            {
                fg.AppendItem(item.AttackOnSight, "AttackOnSight");
            }
            if (printMask?.Murder ?? true)
            {
                fg.AppendItem(item.Murder, "Murder");
            }
            if (printMask?.Assault ?? true)
            {
                fg.AppendItem(item.Assault, "Assault");
            }
            if (printMask?.Trespass ?? true)
            {
                fg.AppendItem(item.Trespass, "Trespass");
            }
            if (printMask?.Pickpocket ?? true)
            {
                fg.AppendItem(item.Pickpocket, "Pickpocket");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.StealMult ?? true)
            {
                fg.AppendItem(item.StealMult, "StealMult");
            }
            if (printMask?.Escape ?? true)
            {
                fg.AppendItem(item.Escape, "Escape");
            }
            if (printMask?.Werewolf ?? true)
            {
                fg.AppendItem(item.Werewolf, "Werewolf");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICrimeValuesGetter? lhs,
            ICrimeValuesGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (lhs.Arrest != rhs.Arrest) return false;
            if (lhs.AttackOnSight != rhs.AttackOnSight) return false;
            if (lhs.Murder != rhs.Murder) return false;
            if (lhs.Assault != rhs.Assault) return false;
            if (lhs.Trespass != rhs.Trespass) return false;
            if (lhs.Pickpocket != rhs.Pickpocket) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!lhs.StealMult.EqualsWithin(rhs.StealMult)) return false;
            if (lhs.Escape != rhs.Escape) return false;
            if (lhs.Werewolf != rhs.Werewolf) return false;
            return true;
        }
        
        public virtual int GetHashCode(ICrimeValuesGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Arrest);
            hash.Add(item.AttackOnSight);
            hash.Add(item.Murder);
            hash.Add(item.Assault);
            hash.Add(item.Trespass);
            hash.Add(item.Pickpocket);
            hash.Add(item.Unknown);
            hash.Add(item.StealMult);
            hash.Add(item.Escape);
            hash.Add(item.Werewolf);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CrimeValues.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ICrimeValuesGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class CrimeValuesSetterTranslationCommon
    {
        public static readonly CrimeValuesSetterTranslationCommon Instance = new CrimeValuesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICrimeValues item,
            ICrimeValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Arrest) ?? true))
            {
                item.Arrest = rhs.Arrest;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.AttackOnSight) ?? true))
            {
                item.AttackOnSight = rhs.AttackOnSight;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Murder) ?? true))
            {
                item.Murder = rhs.Murder;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Assault) ?? true))
            {
                item.Assault = rhs.Assault;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Trespass) ?? true))
            {
                item.Trespass = rhs.Trespass;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Pickpocket) ?? true))
            {
                item.Pickpocket = rhs.Pickpocket;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if (rhs.Versioning.HasFlag(CrimeValues.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.StealMult) ?? true))
            {
                item.StealMult = rhs.StealMult;
            }
            if (rhs.Versioning.HasFlag(CrimeValues.VersioningBreaks.Break1)) return;
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Escape) ?? true))
            {
                item.Escape = rhs.Escape;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Werewolf) ?? true))
            {
                item.Werewolf = rhs.Werewolf;
            }
        }
        
        #endregion
        
        public CrimeValues DeepCopy(
            ICrimeValuesGetter item,
            CrimeValues.TranslationMask? copyMask = null)
        {
            CrimeValues ret = (CrimeValues)((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).GetNew();
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CrimeValues DeepCopy(
            ICrimeValuesGetter item,
            out CrimeValues.ErrorMask errorMask,
            CrimeValues.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CrimeValues ret = (CrimeValues)((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).GetNew();
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CrimeValues.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CrimeValues DeepCopy(
            ICrimeValuesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CrimeValues ret = (CrimeValues)((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).GetNew();
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class CrimeValues
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CrimeValues_Registration.Instance;
        public static CrimeValues_Registration Registration => CrimeValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CrimeValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CrimeValuesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CrimeValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICrimeValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICrimeValuesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICrimeValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CrimeValuesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CrimeValuesBinaryWriteTranslation Instance = new CrimeValuesBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICrimeValuesGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Arrest);
            writer.Write(item.AttackOnSight);
            writer.Write(item.Murder);
            writer.Write(item.Assault);
            writer.Write(item.Trespass);
            writer.Write(item.Pickpocket);
            writer.Write(item.Unknown);
            if (!item.Versioning.HasFlag(CrimeValues.VersioningBreaks.Break0))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.StealMult);
                if (!item.Versioning.HasFlag(CrimeValues.VersioningBreaks.Break1))
                {
                    writer.Write(item.Escape);
                    writer.Write(item.Werewolf);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ICrimeValuesGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.CRVA),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICrimeValuesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CrimeValuesBinaryCreateTranslation
    {
        public readonly static CrimeValuesBinaryCreateTranslation Instance = new CrimeValuesBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICrimeValues item,
            MutagenFrame frame)
        {
            item.Arrest = frame.ReadBoolean();
            item.AttackOnSight = frame.ReadBoolean();
            item.Murder = frame.ReadUInt16();
            item.Assault = frame.ReadUInt16();
            item.Trespass = frame.ReadUInt16();
            item.Pickpocket = frame.ReadUInt16();
            item.Unknown = frame.ReadUInt16();
            if (frame.Complete)
            {
                item.Versioning |= CrimeValues.VersioningBreaks.Break0;
                return;
            }
            item.StealMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= CrimeValues.VersioningBreaks.Break1;
                return;
            }
            item.Escape = frame.ReadUInt16();
            item.Werewolf = frame.ReadUInt16();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class CrimeValuesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICrimeValuesGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CrimeValuesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CrimeValuesBinaryOverlay :
        BinaryOverlay,
        ICrimeValuesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CrimeValues_Registration.Instance;
        public static CrimeValues_Registration Registration => CrimeValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CrimeValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CrimeValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICrimeValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICrimeValuesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICrimeValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CrimeValuesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CrimeValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public CrimeValues.VersioningBreaks Versioning { get; private set; }
        public Boolean Arrest => _data.Slice(0x0, 0x1)[0] == 1;
        public Boolean AttackOnSight => _data.Slice(0x1, 0x1)[0] == 1;
        public UInt16 Murder => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x2, 0x2));
        public UInt16 Assault => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x4, 0x2));
        public UInt16 Trespass => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x6, 0x2));
        public UInt16 Pickpocket => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x8, 0x2));
        public UInt16 Unknown => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0xA, 0x2));
        public Single StealMult => _data.Slice(0xC, 0x4).Float();
        public UInt16 Escape => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x10, 0x2));
        public UInt16 Werewolf => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x12, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CrimeValuesBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CrimeValuesBinaryOverlay CrimeValuesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CrimeValuesBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0xC)
            {
                ret.Versioning |= CrimeValues.VersioningBreaks.Break0;
            }
            if (ret._data.Length <= 0x10)
            {
                ret.Versioning |= CrimeValues.VersioningBreaks.Break1;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CrimeValuesBinaryOverlay CrimeValuesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CrimeValuesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CrimeValuesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICrimeValuesGetter rhs)) return false;
            return ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICrimeValuesGetter? obj)
        {
            return ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

