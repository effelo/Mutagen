/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class DialogTopic :
        Fallout4MajorRecord,
        IDialogTopicInternal,
        ILoquiObjectSetter<DialogTopic>,
        IEquatable<IDialogTopicGetter>
    {
        #region Ctor
        protected DialogTopic()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IDialogTopicGetter.Name => this.Name;
        #endregion
        #region Priority
        public Single Priority { get; set; } = default;
        #endregion
        #region Branch
        public FormLinkNullable<IDialogBranchGetter> Branch { get; set; } = new FormLinkNullable<IDialogBranchGetter>();
        #endregion
        #region Quest
        public FormLinkNullable<IQuestGetter> Quest { get; set; } = new FormLinkNullable<IQuestGetter>();
        #endregion
        #region TopicFlags
        public DialogTopic.TopicFlag TopicFlags { get; set; } = default;
        #endregion
        #region Category
        public DialogTopic.CategoryEnum Category { get; set; } = default;
        #endregion
        #region Subtype
        public DialogTopic.SubtypeEnum Subtype { get; set; } = default;
        #endregion
        #region SubtypeName
        public RecordType SubtypeName { get; set; } = RecordType.Null;
        #endregion
        #region Timestamp
        public Int32 Timestamp { get; set; } = default;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default;
        #endregion
        #region Responses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponses> _Responses = new ExtendedList<DialogResponses>();
        public ExtendedList<DialogResponses> Responses
        {
            get => this._Responses;
            protected set => this._Responses = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponsesGetter> IDialogTopicGetter.Responses => _Responses;
        #endregion

        #endregion
        #region DATADataTypeState
        public DialogTopic.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogTopicMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogTopicGetter rhs)) return false;
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDialogTopicGetter? obj)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Priority = initialValue;
                this.Branch = initialValue;
                this.Quest = initialValue;
                this.TopicFlags = initialValue;
                this.Category = initialValue;
                this.Subtype = initialValue;
                this.SubtypeName = initialValue;
                this.Timestamp = initialValue;
                this.Unknown = initialValue;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponses.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponses.Mask<TItem>?>>());
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem Priority,
                TItem Branch,
                TItem Quest,
                TItem TopicFlags,
                TItem Category,
                TItem Subtype,
                TItem SubtypeName,
                TItem Timestamp,
                TItem Unknown,
                TItem Responses,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Priority = Priority;
                this.Branch = Branch;
                this.Quest = Quest;
                this.TopicFlags = TopicFlags;
                this.Category = Category;
                this.Subtype = Subtype;
                this.SubtypeName = SubtypeName;
                this.Timestamp = Timestamp;
                this.Unknown = Unknown;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponses.Mask<TItem>?>>?>(Responses, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponses.Mask<TItem>?>>());
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Priority;
            public TItem Branch;
            public TItem Quest;
            public TItem TopicFlags;
            public TItem Category;
            public TItem Subtype;
            public TItem SubtypeName;
            public TItem Timestamp;
            public TItem Unknown;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponses.Mask<TItem>?>>?>? Responses;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Priority, rhs.Priority)) return false;
                if (!object.Equals(this.Branch, rhs.Branch)) return false;
                if (!object.Equals(this.Quest, rhs.Quest)) return false;
                if (!object.Equals(this.TopicFlags, rhs.TopicFlags)) return false;
                if (!object.Equals(this.Category, rhs.Category)) return false;
                if (!object.Equals(this.Subtype, rhs.Subtype)) return false;
                if (!object.Equals(this.SubtypeName, rhs.SubtypeName)) return false;
                if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Responses, rhs.Responses)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Priority);
                hash.Add(this.Branch);
                hash.Add(this.Quest);
                hash.Add(this.TopicFlags);
                hash.Add(this.Category);
                hash.Add(this.Subtype);
                hash.Add(this.SubtypeName);
                hash.Add(this.Timestamp);
                hash.Add(this.Unknown);
                hash.Add(this.Responses);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Priority)) return false;
                if (!eval(this.Branch)) return false;
                if (!eval(this.Quest)) return false;
                if (!eval(this.TopicFlags)) return false;
                if (!eval(this.Category)) return false;
                if (!eval(this.Subtype)) return false;
                if (!eval(this.SubtypeName)) return false;
                if (!eval(this.Timestamp)) return false;
                if (!eval(this.Unknown)) return false;
                if (this.Responses != null)
                {
                    if (!eval(this.Responses.Overall)) return false;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Priority)) return true;
                if (eval(this.Branch)) return true;
                if (eval(this.Quest)) return true;
                if (eval(this.TopicFlags)) return true;
                if (eval(this.Category)) return true;
                if (eval(this.Subtype)) return true;
                if (eval(this.SubtypeName)) return true;
                if (eval(this.Timestamp)) return true;
                if (eval(this.Unknown)) return true;
                if (this.Responses != null)
                {
                    if (eval(this.Responses.Overall)) return true;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogTopic.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Priority = eval(this.Priority);
                obj.Branch = eval(this.Branch);
                obj.Quest = eval(this.Quest);
                obj.TopicFlags = eval(this.TopicFlags);
                obj.Category = eval(this.Category);
                obj.Subtype = eval(this.Subtype);
                obj.SubtypeName = eval(this.SubtypeName);
                obj.Timestamp = eval(this.Timestamp);
                obj.Unknown = eval(this.Unknown);
                if (Responses != null)
                {
                    obj.Responses = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponses.Mask<R>?>>?>(eval(this.Responses.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponses.Mask<R>?>>());
                    if (Responses.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponses.Mask<R>?>>();
                        obj.Responses.Specific = l;
                        foreach (var item in Responses.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DialogResponses.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DialogResponses.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DialogTopic.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DialogTopic.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DialogTopic.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Priority ?? true)
                    {
                        fg.AppendItem(Priority, "Priority");
                    }
                    if (printMask?.Branch ?? true)
                    {
                        fg.AppendItem(Branch, "Branch");
                    }
                    if (printMask?.Quest ?? true)
                    {
                        fg.AppendItem(Quest, "Quest");
                    }
                    if (printMask?.TopicFlags ?? true)
                    {
                        fg.AppendItem(TopicFlags, "TopicFlags");
                    }
                    if (printMask?.Category ?? true)
                    {
                        fg.AppendItem(Category, "Category");
                    }
                    if (printMask?.Subtype ?? true)
                    {
                        fg.AppendItem(Subtype, "Subtype");
                    }
                    if (printMask?.SubtypeName ?? true)
                    {
                        fg.AppendItem(SubtypeName, "SubtypeName");
                    }
                    if (printMask?.Timestamp ?? true)
                    {
                        fg.AppendItem(Timestamp, "Timestamp");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if ((printMask?.Responses?.Overall ?? true)
                        && Responses.TryGet(out var ResponsesItem))
                    {
                        fg.AppendLine("Responses =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ResponsesItem.Overall);
                            if (ResponsesItem.Specific != null)
                            {
                                foreach (var subItem in ResponsesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Priority;
            public Exception? Branch;
            public Exception? Quest;
            public Exception? TopicFlags;
            public Exception? Category;
            public Exception? Subtype;
            public Exception? SubtypeName;
            public Exception? Timestamp;
            public Exception? Unknown;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponses.ErrorMask?>>?>? Responses;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
                switch (enu)
                {
                    case DialogTopic_FieldIndex.Name:
                        return Name;
                    case DialogTopic_FieldIndex.Priority:
                        return Priority;
                    case DialogTopic_FieldIndex.Branch:
                        return Branch;
                    case DialogTopic_FieldIndex.Quest:
                        return Quest;
                    case DialogTopic_FieldIndex.TopicFlags:
                        return TopicFlags;
                    case DialogTopic_FieldIndex.Category:
                        return Category;
                    case DialogTopic_FieldIndex.Subtype:
                        return Subtype;
                    case DialogTopic_FieldIndex.SubtypeName:
                        return SubtypeName;
                    case DialogTopic_FieldIndex.Timestamp:
                        return Timestamp;
                    case DialogTopic_FieldIndex.Unknown:
                        return Unknown;
                    case DialogTopic_FieldIndex.Responses:
                        return Responses;
                    case DialogTopic_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
                switch (enu)
                {
                    case DialogTopic_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case DialogTopic_FieldIndex.Priority:
                        this.Priority = ex;
                        break;
                    case DialogTopic_FieldIndex.Branch:
                        this.Branch = ex;
                        break;
                    case DialogTopic_FieldIndex.Quest:
                        this.Quest = ex;
                        break;
                    case DialogTopic_FieldIndex.TopicFlags:
                        this.TopicFlags = ex;
                        break;
                    case DialogTopic_FieldIndex.Category:
                        this.Category = ex;
                        break;
                    case DialogTopic_FieldIndex.Subtype:
                        this.Subtype = ex;
                        break;
                    case DialogTopic_FieldIndex.SubtypeName:
                        this.SubtypeName = ex;
                        break;
                    case DialogTopic_FieldIndex.Timestamp:
                        this.Timestamp = ex;
                        break;
                    case DialogTopic_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case DialogTopic_FieldIndex.Responses:
                        this.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponses.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogTopic_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
                switch (enu)
                {
                    case DialogTopic_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Priority:
                        this.Priority = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Branch:
                        this.Branch = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Quest:
                        this.Quest = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.TopicFlags:
                        this.TopicFlags = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Category:
                        this.Category = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Subtype:
                        this.Subtype = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.SubtypeName:
                        this.SubtypeName = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Timestamp:
                        this.Timestamp = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Responses:
                        this.Responses = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponses.ErrorMask?>>?>)obj;
                        break;
                    case DialogTopic_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Priority != null) return true;
                if (Branch != null) return true;
                if (Quest != null) return true;
                if (TopicFlags != null) return true;
                if (Category != null) return true;
                if (Subtype != null) return true;
                if (SubtypeName != null) return true;
                if (Timestamp != null) return true;
                if (Unknown != null) return true;
                if (Responses != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Priority, "Priority");
                fg.AppendItem(Branch, "Branch");
                fg.AppendItem(Quest, "Quest");
                fg.AppendItem(TopicFlags, "TopicFlags");
                fg.AppendItem(Category, "Category");
                fg.AppendItem(Subtype, "Subtype");
                fg.AppendItem(SubtypeName, "SubtypeName");
                fg.AppendItem(Timestamp, "Timestamp");
                fg.AppendItem(Unknown, "Unknown");
                if (Responses.TryGet(out var ResponsesItem))
                {
                    fg.AppendLine("Responses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ResponsesItem.Overall);
                        if (ResponsesItem.Specific != null)
                        {
                            foreach (var subItem in ResponsesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Priority = this.Priority.Combine(rhs.Priority);
                ret.Branch = this.Branch.Combine(rhs.Branch);
                ret.Quest = this.Quest.Combine(rhs.Quest);
                ret.TopicFlags = this.TopicFlags.Combine(rhs.TopicFlags);
                ret.Category = this.Category.Combine(rhs.Category);
                ret.Subtype = this.Subtype.Combine(rhs.Subtype);
                ret.SubtypeName = this.SubtypeName.Combine(rhs.SubtypeName);
                ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponses.ErrorMask?>>?>(ExceptionExt.Combine(this.Responses?.Overall, rhs.Responses?.Overall), ExceptionExt.Combine(this.Responses?.Specific, rhs.Responses?.Specific));
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Priority;
            public bool Branch;
            public bool Quest;
            public bool TopicFlags;
            public bool Category;
            public bool Subtype;
            public bool SubtypeName;
            public bool Timestamp;
            public bool Unknown;
            public DialogResponses.TranslationMask? Responses;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Priority = defaultOn;
                this.Branch = defaultOn;
                this.Quest = defaultOn;
                this.TopicFlags = defaultOn;
                this.Category = defaultOn;
                this.Subtype = defaultOn;
                this.SubtypeName = defaultOn;
                this.Timestamp = defaultOn;
                this.Unknown = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Priority, null));
                ret.Add((Branch, null));
                ret.Add((Quest, null));
                ret.Add((TopicFlags, null));
                ret.Add((Category, null));
                ret.Add((Subtype, null));
                ret.Add((SubtypeName, null));
                ret.Add((Timestamp, null));
                ret.Add((Unknown, null));
                ret.Add((Responses == null ? DefaultOn : !Responses.GetCrystal().CopyNothing, Responses?.GetCrystal()));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = DialogTopic_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => DialogTopicCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogTopicSetterCommon.Instance.RemapLinks(this, mapping);
        public DialogTopic(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private DialogTopic(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal DialogTopic(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public DialogTopic(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public DialogTopic(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [Flags]
        public enum DATADataType
        {
        }
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogTopicBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogTopicBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static DialogTopic CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DialogTopic();
            ((DialogTopicSetterCommon)((IDialogTopicGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogTopic item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogTopic GetNew()
        {
            return new DialogTopic();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogTopic :
        IDialogTopicGetter,
        IFallout4MajorRecord,
        IDialog,
        ITranslatedNamed,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IDialogTopicInternal>,
        IFormLinkContainer
    {
        new TranslatedString? Name { get; set; }
        new Single Priority { get; set; }
        new FormLinkNullable<IDialogBranchGetter> Branch { get; set; }
        new FormLinkNullable<IQuestGetter> Quest { get; set; }
        new DialogTopic.TopicFlag TopicFlags { get; set; }
        new DialogTopic.CategoryEnum Category { get; set; }
        new DialogTopic.SubtypeEnum Subtype { get; set; }
        new RecordType SubtypeName { get; set; }
        new Int32 Timestamp { get; set; }
        new Int32 Unknown { get; set; }
        new ExtendedList<DialogResponses> Responses { get; }
        new DialogTopic.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IDialogTopicInternal :
        IFallout4MajorRecordInternal,
        IDialogTopic,
        IDialogTopicGetter
    {
    }

    public partial interface IDialogTopicGetter :
        IFallout4MajorRecordGetter,
        IDialogGetter,
        ITranslatedNamedGetter,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IDialogTopicGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => DialogTopic_Registration.Instance;
        ITranslatedStringGetter? Name { get; }
        Single Priority { get; }
        FormLinkNullable<IDialogBranchGetter> Branch { get; }
        FormLinkNullable<IQuestGetter> Quest { get; }
        DialogTopic.TopicFlag TopicFlags { get; }
        DialogTopic.CategoryEnum Category { get; }
        DialogTopic.SubtypeEnum Subtype { get; }
        RecordType SubtypeName { get; }
        Int32 Timestamp { get; }
        Int32 Unknown { get; }
        IReadOnlyList<IDialogResponsesGetter> Responses { get; }
        DialogTopic.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogTopicMixIn
    {
        public static void Clear(this IDialogTopicInternal item)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogTopic.Mask<bool> GetEqualsMask(
            this IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogTopicGetter item,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogTopicGetter item,
            FileGeneration fg,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogTopicGetter item,
            IDialogTopicGetter rhs)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDialogTopicInternal lhs,
            IDialogTopicGetter rhs,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogTopic.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogTopicInternal lhs,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            DialogTopic.TranslationMask? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this IDialogTopicGetter obj)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IDialogTopicGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            this IDialogTopicGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommonGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this IDialogTopicInternal obj)
        {
            return ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IDialogTopicInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(
            this IDialogTopicInternal obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommon)m);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            IEnumerable<FormKey> keys)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            HashSet<FormKey> keys)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IDialogTopicInternal obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IDialogTopicInternal obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IDialogTopicInternal obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IDialogTopicInternal obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IDialogTopicInternal obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        public static DialogTopic Duplicate(
            this IDialogTopicGetter item,
            FormKey formKey,
            DialogTopic.TranslationMask? copyMask = null)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogTopicInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum DialogTopic_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        Priority = 7,
        Branch = 8,
        Quest = 9,
        TopicFlags = 10,
        Category = 11,
        Subtype = 12,
        SubtypeName = 13,
        Timestamp = 14,
        Unknown = 15,
        Responses = 16,
        DATADataTypeState = 17,
    }
    #endregion

    #region Registration
    public partial class DialogTopic_Registration : ILoquiRegistration
    {
        public static readonly DialogTopic_Registration Instance = new DialogTopic_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 314,
            version: 0);

        public const string GUID = "29f5de6a-ecd3-4ce8-8ffb-b443aad13295";

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(DialogTopic.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogTopic.ErrorMask);

        public static readonly Type ClassType = typeof(DialogTopic);

        public static readonly Type GetterType = typeof(IDialogTopicGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogTopic);

        public static readonly Type? InternalSetterType = typeof(IDialogTopicInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.DialogTopic";

        public const string Name = "DialogTopic";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DIAL;
        public static readonly Type BinaryWriteTranslation = typeof(DialogTopicBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogTopicSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly DialogTopicSetterCommon Instance = new DialogTopicSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogTopicInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Priority = default;
            item.Branch = FormLinkNullable<IDialogBranchGetter>.Null;
            item.Quest = FormLinkNullable<IQuestGetter>.Null;
            item.TopicFlags = default;
            item.Category = default;
            item.Subtype = default;
            item.SubtypeName = RecordType.Null;
            item.Timestamp = default;
            item.Unknown = default;
            item.Responses.Clear();
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IDialogTopicInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogTopicInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IDialogTopic obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Branch = obj.Branch.Relink(mapping);
            obj.Quest = obj.Quest.Relink(mapping);
            obj.Responses.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IDialogTopicInternal obj)
        {
            foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            IDialogTopicInternal obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IDialogTopicInternal obj,
            HashSet<FormKey> keys)
        {
            obj.Responses.Remove(keys);
        }
        
        public void Remove(
            IDialogTopicInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    if (!DialogTopic_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    obj.Responses.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogTopicInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IDialogTopicInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: DialogTopicBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogTopicBinaryCreateTranslation.FillBinaryRecordTypes);
            DialogTopicBinaryCreateTranslation.CustomBinaryEndImportPublic(
                frame: frame,
                obj: item);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogTopic)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogTopic)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class DialogTopicCommon : Fallout4MajorRecordCommon
    {
        public new static readonly DialogTopicCommon Instance = new DialogTopicCommon();

        public DialogTopic.Mask<bool> GetEqualsMask(
            IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogTopic.Mask<bool>(false);
            ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            DialogTopic.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Priority = item.Priority.EqualsWithin(rhs.Priority);
            ret.Branch = item.Branch.Equals(rhs.Branch);
            ret.Quest = item.Quest.Equals(rhs.Quest);
            ret.TopicFlags = item.TopicFlags == rhs.TopicFlags;
            ret.Category = item.Category == rhs.Category;
            ret.Subtype = item.Subtype == rhs.Subtype;
            ret.SubtypeName = item.SubtypeName == rhs.SubtypeName;
            ret.Timestamp = item.Timestamp == rhs.Timestamp;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Responses = item.Responses.CollectionEqualsHelper(
                rhs.Responses,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDialogTopicGetter item,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDialogTopicGetter item,
            FileGeneration fg,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogTopic =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogTopic) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDialogTopicGetter item,
            FileGeneration fg,
            DialogTopic.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.Priority ?? true)
            {
                fg.AppendItem(item.Priority, "Priority");
            }
            if (printMask?.Branch ?? true)
            {
                fg.AppendItem(item.Branch.FormKeyNullable, "Branch");
            }
            if (printMask?.Quest ?? true)
            {
                fg.AppendItem(item.Quest.FormKeyNullable, "Quest");
            }
            if (printMask?.TopicFlags ?? true)
            {
                fg.AppendItem(item.TopicFlags, "TopicFlags");
            }
            if (printMask?.Category ?? true)
            {
                fg.AppendItem(item.Category, "Category");
            }
            if (printMask?.Subtype ?? true)
            {
                fg.AppendItem(item.Subtype, "Subtype");
            }
            if (printMask?.SubtypeName ?? true)
            {
                fg.AppendItem(item.SubtypeName, "SubtypeName");
            }
            if (printMask?.Timestamp ?? true)
            {
                fg.AppendItem(item.Timestamp, "Timestamp");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Responses?.Overall ?? true)
            {
                fg.AppendLine("Responses =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Responses)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static DialogTopic_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogTopic_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (DialogTopic_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (DialogTopic_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (DialogTopic_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (DialogTopic_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (DialogTopic_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new DialogTopic_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogTopic_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogTopicGetter? lhs,
            IDialogTopicGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Priority.EqualsWithin(rhs.Priority)) return false;
            if (!lhs.Branch.Equals(rhs.Branch)) return false;
            if (!lhs.Quest.Equals(rhs.Quest)) return false;
            if (lhs.TopicFlags != rhs.TopicFlags) return false;
            if (lhs.Category != rhs.Category) return false;
            if (lhs.Subtype != rhs.Subtype) return false;
            if (lhs.SubtypeName != rhs.SubtypeName) return false;
            if (lhs.Timestamp != rhs.Timestamp) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!lhs.Responses.SequenceEqualNullable(rhs.Responses)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogTopicGetter?)lhs,
                rhs: rhs as IDialogTopicGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogTopicGetter?)lhs,
                rhs: rhs as IDialogTopicGetter);
        }
        
        public virtual int GetHashCode(IDialogTopicGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Priority);
            hash.Add(item.Branch);
            hash.Add(item.Quest);
            hash.Add(item.TopicFlags);
            hash.Add(item.Category);
            hash.Add(item.Subtype);
            hash.Add(item.SubtypeName);
            hash.Add(item.Timestamp);
            hash.Add(item.Unknown);
            hash.Add(item.Responses);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogTopicGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogTopicGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogTopic.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IDialogTopicGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Branch.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Branch);
            }
            if (obj.Quest.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Quest);
            }
            foreach (var item in obj.Responses.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IDialogTopicGetter obj)
        {
            foreach (var subItem in obj.Responses)
            {
                yield return subItem;
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            IDialogTopicGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!DialogTopic_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var subItem in obj.Responses)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            IDialogTopicGetter obj,
            ILinkCache linkCache,
            ModKey modKey,
            IModContext? parent,
            Func<IFallout4Mod, IDialogTopicGetter, IDialogTopic> getOrAddAsOverride,
            Func<IFallout4Mod, IDialogTopicGetter, string?, IDialogTopic> duplicateInto)
        {
            var curContext = new ModContext<IFallout4Mod, IDialogTopic, IDialogTopicGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            foreach (var subItem in obj.Responses)
            {
                yield return new ModContext<IFallout4Mod, IDialogResponsesInternal, IDialogResponsesGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var copy = (DialogResponses)((IDialogResponsesGetter)r).DeepCopy();
                        getOrAddAsOverride(m, linkCache.Resolve<IDialogTopicGetter>(obj.FormKey)).Responses.Add(copy);
                        return copy;
                    },
                    duplicateInto: (m, r, e) =>
                    {
                        var dup = (DialogResponses)((IDialogResponsesGetter)r).Duplicate(m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<IDialogTopicGetter>(obj.FormKey)).Responses.Add(dup);
                        return dup;
                    });
            }
        }
        
        public IEnumerable<IModContext<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            IDialogTopicGetter obj,
            ILinkCache linkCache,
            Type type,
            ModKey modKey,
            IModContext? parent,
            bool throwIfUnknown,
            Func<IFallout4Mod, IDialogTopicGetter, IDialogTopic> getOrAddAsOverride,
            Func<IFallout4Mod, IDialogTopicGetter, string?, IDialogTopic> duplicateInto)
        {
            var curContext = new ModContext<IFallout4Mod, IDialogTopic, IDialogTopicGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!DialogTopic_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var subItem in obj.Responses)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IFallout4Mod, IDialogResponsesInternal, IDialogResponsesGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var copy = (DialogResponses)((IDialogResponsesGetter)r).DeepCopy();
                                    getOrAddAsOverride(m, linkCache.Resolve<IDialogTopicGetter>(obj.FormKey)).Responses.Add(copy);
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var dup = (DialogResponses)((IDialogResponsesGetter)r).Duplicate(m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<IDialogTopicGetter>(obj.FormKey)).Responses.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        #region Duplicate
        public DialogTopic Duplicate(
            IDialogTopicGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new DialogTopic(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogTopic)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogTopic)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class DialogTopicSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly DialogTopicSetterTranslationCommon Instance = new DialogTopicSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogTopicInternal item,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IDialogTopic item,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Priority) ?? true))
            {
                item.Priority = rhs.Priority;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Branch) ?? true))
            {
                item.Branch = new FormLinkNullable<IDialogBranchGetter>(rhs.Branch.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Quest) ?? true))
            {
                item.Quest = new FormLinkNullable<IQuestGetter>(rhs.Quest.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.TopicFlags) ?? true))
            {
                item.TopicFlags = rhs.TopicFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Category) ?? true))
            {
                item.Category = rhs.Category;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Subtype) ?? true))
            {
                item.Subtype = rhs.Subtype;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.SubtypeName) ?? true))
            {
                item.SubtypeName = rhs.SubtypeName;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Timestamp) ?? true))
            {
                item.Timestamp = rhs.Timestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Responses) ?? true))
            {
                errorMask?.PushIndex((int)DialogTopic_FieldIndex.Responses);
                try
                {
                    item.Responses.SetTo(
                        rhs.Responses
                        .Select(r =>
                        {
                            return (DialogResponses)r.DeepCopy(
                                copyMask: default(TranslationCrystal),
                                errorMask: errorMask);
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogTopicInternal)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogTopic)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogTopicInternal)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogTopic)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            DialogTopic.TranslationMask? copyMask = null)
        {
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogTopic.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class DialogTopic
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogTopic_Registration.Instance;
        public new static DialogTopic_Registration Registration => DialogTopic_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogTopicCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogTopicSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogTopicSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class DialogTopicBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DialogTopicBinaryWriteTranslation Instance = new DialogTopicBinaryWriteTranslation();

        static partial void WriteBinaryResponseCountCustom(
            MutagenWriter writer,
            IDialogTopicGetter item);

        public static void WriteBinaryResponseCount(
            MutagenWriter writer,
            IDialogTopicGetter item)
        {
            WriteBinaryResponseCountCustom(
                writer: writer,
                item: item);
        }

        static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            IDialogTopicGetter obj);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            IDialogTopicGetter obj)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj);
        }
        public static void WriteEmbedded(
            IDialogTopicGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IDialogTopicGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Priority,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.PNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Branch,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.BNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Quest,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.QNAM));
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogTopic.TopicFlag>.Instance.Write(
                    writer,
                    item.TopicFlags,
                    length: 1);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogTopic.CategoryEnum>.Instance.Write(
                    writer,
                    item.Category,
                    length: 1);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogTopic.SubtypeEnum>.Instance.Write(
                    writer,
                    item.Subtype,
                    length: 2);
            }
            Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SubtypeName,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            DialogTopicBinaryWriteTranslation.WriteBinaryResponseCount(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IDialogTopicGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.DIAL),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DialogTopicBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static DialogTopicBinaryCreateTranslation Instance = new DialogTopicBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.DIAL;
        public static void FillBinaryStructs(
            IDialogTopicInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IDialogTopicInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)DialogTopic_FieldIndex.Name;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Priority = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)DialogTopic_FieldIndex.Priority;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Branch = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)DialogTopic_FieldIndex.Branch;
                }
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Quest = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)DialogTopic_FieldIndex.Quest;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.TopicFlags = EnumBinaryTranslation<DialogTopic.TopicFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Category = EnumBinaryTranslation<DialogTopic.CategoryEnum>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Subtype = EnumBinaryTranslation<DialogTopic.SubtypeEnum>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    return (int)DialogTopic_FieldIndex.Subtype;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SubtypeName = Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)DialogTopic_FieldIndex.SubtypeName;
                }
                case RecordTypeInts.TIFC:
                {
                    DialogTopicBinaryCreateTranslation.FillBinaryResponseCountCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryResponseCountCustom(
            MutagenFrame frame,
            IDialogTopicInternal item);

        static partial void CustomBinaryEndImport(
            MutagenFrame frame,
            IDialogTopicInternal obj);
        public static void CustomBinaryEndImportPublic(
            MutagenFrame frame,
            IDialogTopicInternal obj)
        {
            CustomBinaryEndImport(
                frame: frame,
                obj: obj);
        }
    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class DialogTopicBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class DialogTopicBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IDialogTopicGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogTopic_Registration.Instance;
        public new static DialogTopic_Registration Registration => DialogTopic_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogTopicCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogTopicSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => DialogTopicCommon.Instance.GetContainedFormLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogTopicBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogTopicBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Priority
        private int? _PriorityLocation;
        public Single Priority => _PriorityLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _PriorityLocation.Value, _package.MetaData.Constants).Float() : default;
        #endregion
        #region Branch
        private int? _BranchLocation;
        public FormLinkNullable<IDialogBranchGetter> Branch => _BranchLocation.HasValue ? new FormLinkNullable<IDialogBranchGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _BranchLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogBranchGetter>.Null;
        #endregion
        #region Quest
        private int? _QuestLocation;
        public FormLinkNullable<IQuestGetter> Quest => _QuestLocation.HasValue ? new FormLinkNullable<IQuestGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _QuestLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IQuestGetter>.Null;
        #endregion
        private int? _DATALocation;
        public DialogTopic.DATADataType DATADataTypeState { get; private set; }
        #region TopicFlags
        private int _TopicFlagsLocation => _DATALocation!.Value;
        private bool _TopicFlags_IsSet => _DATALocation.HasValue;
        public DialogTopic.TopicFlag TopicFlags => _TopicFlags_IsSet ? (DialogTopic.TopicFlag)_data.Span.Slice(_TopicFlagsLocation, 0x1)[0] : default;
        #endregion
        #region Category
        private int _CategoryLocation => _DATALocation!.Value + 0x1;
        private bool _Category_IsSet => _DATALocation.HasValue;
        public DialogTopic.CategoryEnum Category => _Category_IsSet ? (DialogTopic.CategoryEnum)_data.Span.Slice(_CategoryLocation, 0x1)[0] : default;
        #endregion
        #region Subtype
        private int _SubtypeLocation => _DATALocation!.Value + 0x2;
        private bool _Subtype_IsSet => _DATALocation.HasValue;
        public DialogTopic.SubtypeEnum Subtype => _Subtype_IsSet ? (DialogTopic.SubtypeEnum)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_SubtypeLocation, 0x2)) : default;
        #endregion
        #region SubtypeName
        private int? _SubtypeNameLocation;
        public RecordType SubtypeName => _SubtypeNameLocation.HasValue ? new RecordType(BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SubtypeNameLocation.Value, _package.MetaData.Constants))) : RecordType.Null;
        #endregion
        #region ResponseCount
        partial void ResponseCountCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogTopicBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DialogTopicBinaryOverlay DialogTopicFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var origStream = stream;
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new DialogTopicBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: origStream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static DialogTopicBinaryOverlay DialogTopicFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DialogTopicFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)DialogTopic_FieldIndex.Name;
                }
                case RecordTypeInts.PNAM:
                {
                    _PriorityLocation = (stream.Position - offset);
                    return (int)DialogTopic_FieldIndex.Priority;
                }
                case RecordTypeInts.BNAM:
                {
                    _BranchLocation = (stream.Position - offset);
                    return (int)DialogTopic_FieldIndex.Branch;
                }
                case RecordTypeInts.QNAM:
                {
                    _QuestLocation = (stream.Position - offset);
                    return (int)DialogTopic_FieldIndex.Quest;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)DialogTopic_FieldIndex.Subtype;
                }
                case RecordTypeInts.SNAM:
                {
                    _SubtypeNameLocation = (stream.Position - offset);
                    return (int)DialogTopic_FieldIndex.SubtypeName;
                }
                case RecordTypeInts.TIFC:
                {
                    ResponseCountCustomParse(
                        stream,
                        offset);
                    return null;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogTopicMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogTopicGetter rhs)) return false;
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IDialogTopicGetter? obj)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

