/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class TintLayer :
        ITintLayer,
        ILoquiObjectSetter<TintLayer>,
        IEquatable<ITintLayerGetter>
    {
        #region Ctor
        public TintLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        public UInt16? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? ITintLayerGetter.Index => this.Index;
        #endregion
        #region Color
        public Color? Color { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? ITintLayerGetter.Color => this.Color;
        #endregion
        #region InterpolationValue
        public Single? InterpolationValue { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ITintLayerGetter.InterpolationValue => this.InterpolationValue;
        #endregion
        #region Preset
        public Int16? Preset { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? ITintLayerGetter.Preset => this.Preset;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TintLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITintLayerGetter rhs)) return false;
            return ((TintLayerCommon)((ITintLayerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ITintLayerGetter? obj)
        {
            return ((TintLayerCommon)((ITintLayerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TintLayerCommon)((ITintLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Index = initialValue;
                this.Color = initialValue;
                this.InterpolationValue = initialValue;
                this.Preset = initialValue;
            }

            public Mask(
                TItem Index,
                TItem Color,
                TItem InterpolationValue,
                TItem Preset)
            {
                this.Index = Index;
                this.Color = Color;
                this.InterpolationValue = InterpolationValue;
                this.Preset = Preset;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Index;
            public TItem Color;
            public TItem InterpolationValue;
            public TItem Preset;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.InterpolationValue, rhs.InterpolationValue)) return false;
                if (!object.Equals(this.Preset, rhs.Preset)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Index);
                hash.Add(this.Color);
                hash.Add(this.InterpolationValue);
                hash.Add(this.Preset);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Index)) return false;
                if (!eval(this.Color)) return false;
                if (!eval(this.InterpolationValue)) return false;
                if (!eval(this.Preset)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Index)) return true;
                if (eval(this.Color)) return true;
                if (eval(this.InterpolationValue)) return true;
                if (eval(this.Preset)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TintLayer.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Index = eval(this.Index);
                obj.Color = eval(this.Color);
                obj.InterpolationValue = eval(this.InterpolationValue);
                obj.Preset = eval(this.Preset);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TintLayer.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TintLayer.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TintLayer.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Index ?? true)
                    {
                        fg.AppendItem(Index, "Index");
                    }
                    if (printMask?.Color ?? true)
                    {
                        fg.AppendItem(Color, "Color");
                    }
                    if (printMask?.InterpolationValue ?? true)
                    {
                        fg.AppendItem(InterpolationValue, "InterpolationValue");
                    }
                    if (printMask?.Preset ?? true)
                    {
                        fg.AppendItem(Preset, "Preset");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Index;
            public Exception? Color;
            public Exception? InterpolationValue;
            public Exception? Preset;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TintLayer_FieldIndex enu = (TintLayer_FieldIndex)index;
                switch (enu)
                {
                    case TintLayer_FieldIndex.Index:
                        return Index;
                    case TintLayer_FieldIndex.Color:
                        return Color;
                    case TintLayer_FieldIndex.InterpolationValue:
                        return InterpolationValue;
                    case TintLayer_FieldIndex.Preset:
                        return Preset;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TintLayer_FieldIndex enu = (TintLayer_FieldIndex)index;
                switch (enu)
                {
                    case TintLayer_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case TintLayer_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case TintLayer_FieldIndex.InterpolationValue:
                        this.InterpolationValue = ex;
                        break;
                    case TintLayer_FieldIndex.Preset:
                        this.Preset = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TintLayer_FieldIndex enu = (TintLayer_FieldIndex)index;
                switch (enu)
                {
                    case TintLayer_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case TintLayer_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case TintLayer_FieldIndex.InterpolationValue:
                        this.InterpolationValue = (Exception?)obj;
                        break;
                    case TintLayer_FieldIndex.Preset:
                        this.Preset = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Index != null) return true;
                if (Color != null) return true;
                if (InterpolationValue != null) return true;
                if (Preset != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Index, "Index");
                fg.AppendItem(Color, "Color");
                fg.AppendItem(InterpolationValue, "InterpolationValue");
                fg.AppendItem(Preset, "Preset");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Index = this.Index.Combine(rhs.Index);
                ret.Color = this.Color.Combine(rhs.Color);
                ret.InterpolationValue = this.InterpolationValue.Combine(rhs.InterpolationValue);
                ret.Preset = this.Preset.Combine(rhs.Preset);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Index;
            public bool Color;
            public bool InterpolationValue;
            public bool Preset;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Index = defaultOn;
                this.Color = defaultOn;
                this.InterpolationValue = defaultOn;
                this.Preset = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Index, null));
                ret.Add((Color, null));
                ret.Add((InterpolationValue, null));
                ret.Add((Preset, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static TintLayer CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TintLayer();
            ((TintLayerSetterCommon)((ITintLayerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TintLayer item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((TintLayerSetterCommon)((ITintLayerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TintLayer GetNew()
        {
            return new TintLayer();
        }

    }
    #endregion

    #region Interface
    public partial interface ITintLayer :
        ITintLayerGetter,
        ILoquiObjectSetter<ITintLayer>
    {
        new UInt16? Index { get; set; }
        new Color? Color { get; set; }
        new Single? InterpolationValue { get; set; }
        new Int16? Preset { get; set; }
    }

    public partial interface ITintLayerGetter :
        ILoquiObject,
        ILoquiObject<ITintLayerGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => TintLayer_Registration.Instance;
        UInt16? Index { get; }
        Color? Color { get; }
        Single? InterpolationValue { get; }
        Int16? Preset { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TintLayerMixIn
    {
        public static void Clear(this ITintLayer item)
        {
            ((TintLayerSetterCommon)((ITintLayerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TintLayer.Mask<bool> GetEqualsMask(
            this ITintLayerGetter item,
            ITintLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TintLayerCommon)((ITintLayerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITintLayerGetter item,
            string? name = null,
            TintLayer.Mask<bool>? printMask = null)
        {
            return ((TintLayerCommon)((ITintLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITintLayerGetter item,
            FileGeneration fg,
            string? name = null,
            TintLayer.Mask<bool>? printMask = null)
        {
            ((TintLayerCommon)((ITintLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITintLayerGetter item,
            ITintLayerGetter rhs)
        {
            return ((TintLayerCommon)((ITintLayerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITintLayer lhs,
            ITintLayerGetter rhs)
        {
            ((TintLayerSetterTranslationCommon)((ITintLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITintLayer lhs,
            ITintLayerGetter rhs,
            TintLayer.TranslationMask? copyMask = null)
        {
            ((TintLayerSetterTranslationCommon)((ITintLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITintLayer lhs,
            ITintLayerGetter rhs,
            out TintLayer.ErrorMask errorMask,
            TintLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TintLayerSetterTranslationCommon)((ITintLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TintLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITintLayer lhs,
            ITintLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TintLayerSetterTranslationCommon)((ITintLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TintLayer DeepCopy(
            this ITintLayerGetter item,
            TintLayer.TranslationMask? copyMask = null)
        {
            return ((TintLayerSetterTranslationCommon)((ITintLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TintLayer DeepCopy(
            this ITintLayerGetter item,
            out TintLayer.ErrorMask errorMask,
            TintLayer.TranslationMask? copyMask = null)
        {
            return ((TintLayerSetterTranslationCommon)((ITintLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TintLayer DeepCopy(
            this ITintLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TintLayerSetterTranslationCommon)((ITintLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITintLayer item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintLayerSetterCommon)((ITintLayerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum TintLayer_FieldIndex
    {
        Index = 0,
        Color = 1,
        InterpolationValue = 2,
        Preset = 3,
    }
    #endregion

    #region Registration
    public partial class TintLayer_Registration : ILoquiRegistration
    {
        public static readonly TintLayer_Registration Instance = new TintLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 218,
            version: 0);

        public const string GUID = "d5e96f2b-0bd0-4d61-a637-60c651e75004";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(TintLayer.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TintLayer.ErrorMask);

        public static readonly Type ClassType = typeof(TintLayer);

        public static readonly Type GetterType = typeof(ITintLayerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITintLayer);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.TintLayer";

        public const string Name = "TintLayer";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.TINI,
                        RecordTypes.TINC,
                        RecordTypes.TINV,
                        RecordTypes.TIAS
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(TintLayerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class TintLayerSetterCommon
    {
        public static readonly TintLayerSetterCommon Instance = new TintLayerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITintLayer item)
        {
            ClearPartial();
            item.Index = default;
            item.Color = default;
            item.InterpolationValue = default;
            item.Preset = default;
        }
        
        #region Mutagen
        public void RemapLinks(ITintLayer obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITintLayer item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: TintLayerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TintLayerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class TintLayerCommon
    {
        public static readonly TintLayerCommon Instance = new TintLayerCommon();

        public TintLayer.Mask<bool> GetEqualsMask(
            ITintLayerGetter item,
            ITintLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TintLayer.Mask<bool>(false);
            ((TintLayerCommon)((ITintLayerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITintLayerGetter item,
            ITintLayerGetter rhs,
            TintLayer.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Index = item.Index == rhs.Index;
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.InterpolationValue = item.InterpolationValue.EqualsWithin(rhs.InterpolationValue);
            ret.Preset = item.Preset == rhs.Preset;
        }
        
        public string ToString(
            ITintLayerGetter item,
            string? name = null,
            TintLayer.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITintLayerGetter item,
            FileGeneration fg,
            string? name = null,
            TintLayer.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TintLayer =>");
            }
            else
            {
                fg.AppendLine($"{name} (TintLayer) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITintLayerGetter item,
            FileGeneration fg,
            TintLayer.Mask<bool>? printMask = null)
        {
            if ((printMask?.Index ?? true)
                && item.Index.TryGet(out var IndexItem))
            {
                fg.AppendItem(IndexItem, "Index");
            }
            if ((printMask?.Color ?? true)
                && item.Color.TryGet(out var ColorItem))
            {
                fg.AppendItem(ColorItem, "Color");
            }
            if ((printMask?.InterpolationValue ?? true)
                && item.InterpolationValue.TryGet(out var InterpolationValueItem))
            {
                fg.AppendItem(InterpolationValueItem, "InterpolationValue");
            }
            if ((printMask?.Preset ?? true)
                && item.Preset.TryGet(out var PresetItem))
            {
                fg.AppendItem(PresetItem, "Preset");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITintLayerGetter? lhs,
            ITintLayerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Index != rhs.Index) return false;
            if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            if (!lhs.InterpolationValue.EqualsWithin(rhs.InterpolationValue)) return false;
            if (lhs.Preset != rhs.Preset) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITintLayerGetter item)
        {
            var hash = new HashCode();
            if (item.Index.TryGet(out var Indexitem))
            {
                hash.Add(Indexitem);
            }
            if (item.Color.TryGet(out var Coloritem))
            {
                hash.Add(Coloritem);
            }
            if (item.InterpolationValue.TryGet(out var InterpolationValueitem))
            {
                hash.Add(InterpolationValueitem);
            }
            if (item.Preset.TryGet(out var Presetitem))
            {
                hash.Add(Presetitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TintLayer.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ITintLayerGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class TintLayerSetterTranslationCommon
    {
        public static readonly TintLayerSetterTranslationCommon Instance = new TintLayerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITintLayer item,
            ITintLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)TintLayer_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)TintLayer_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            if ((copyMask?.GetShouldTranslate((int)TintLayer_FieldIndex.InterpolationValue) ?? true))
            {
                item.InterpolationValue = rhs.InterpolationValue;
            }
            if ((copyMask?.GetShouldTranslate((int)TintLayer_FieldIndex.Preset) ?? true))
            {
                item.Preset = rhs.Preset;
            }
        }
        
        #endregion
        
        public TintLayer DeepCopy(
            ITintLayerGetter item,
            TintLayer.TranslationMask? copyMask = null)
        {
            TintLayer ret = (TintLayer)((TintLayerCommon)((ITintLayerGetter)item).CommonInstance()!).GetNew();
            ((TintLayerSetterTranslationCommon)((ITintLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TintLayer DeepCopy(
            ITintLayerGetter item,
            out TintLayer.ErrorMask errorMask,
            TintLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TintLayer ret = (TintLayer)((TintLayerCommon)((ITintLayerGetter)item).CommonInstance()!).GetNew();
            ((TintLayerSetterTranslationCommon)((ITintLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TintLayer.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TintLayer DeepCopy(
            ITintLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TintLayer ret = (TintLayer)((TintLayerCommon)((ITintLayerGetter)item).CommonInstance()!).GetNew();
            ((TintLayerSetterTranslationCommon)((ITintLayerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class TintLayer
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintLayer_Registration.Instance;
        public static TintLayer_Registration Registration => TintLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintLayerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TintLayerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITintLayerGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITintLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class TintLayerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static TintLayerBinaryWriteTranslation Instance = new TintLayerBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ITintLayerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TINI));
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Color,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TINC));
            FloatBinaryTranslation.Write(
                writer: writer,
                item: item.InterpolationValue,
                integerType: FloatIntegerType.UInt,
                multiplier: 0.01,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TINV));
            Mutagen.Bethesda.Binary.Int16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Preset,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TIAS));
        }

        public void Write(
            MutagenWriter writer,
            ITintLayerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITintLayerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TintLayerBinaryCreateTranslation
    {
        public readonly static TintLayerBinaryCreateTranslation Instance = new TintLayerBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ITintLayer item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            ITintLayer item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TINI:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintLayer_FieldIndex.Index) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt16();
                    return (int)TintLayer_FieldIndex.Index;
                }
                case RecordTypeInts.TINC:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintLayer_FieldIndex.Color) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Color = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)TintLayer_FieldIndex.Color;
                }
                case RecordTypeInts.TINV:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintLayer_FieldIndex.InterpolationValue) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InterpolationValue = FloatBinaryTranslation.Parse(
                        frame: frame,
                        integerType: FloatIntegerType.UInt,
                        multiplier: 0.01);
                    return (int)TintLayer_FieldIndex.InterpolationValue;
                }
                case RecordTypeInts.TIAS:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintLayer_FieldIndex.Preset) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Preset = frame.ReadInt16();
                    return (int)TintLayer_FieldIndex.Preset;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class TintLayerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITintLayerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintLayerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class TintLayerBinaryOverlay :
        BinaryOverlay,
        ITintLayerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintLayer_Registration.Instance;
        public static TintLayer_Registration Registration => TintLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintLayerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITintLayerGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITintLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Index
        private int? _IndexLocation;
        public UInt16? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region Color
        private int? _ColorLocation;
        public Color? Color => _ColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color?);
        #endregion
        #region InterpolationValue
        private int? _InterpolationValueLocation;
        public Single? InterpolationValue => _InterpolationValueLocation.HasValue ? FloatBinaryTranslation.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _InterpolationValueLocation.Value, _package.MetaData.Constants), FloatIntegerType.UInt, 0.01) : default(Single?);
        #endregion
        #region Preset
        private int? _PresetLocation;
        public Int16? Preset => _PresetLocation.HasValue ? BinaryPrimitives.ReadInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PresetLocation.Value, _package.MetaData.Constants)) : default(Int16?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TintLayerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static TintLayerBinaryOverlay TintLayerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TintLayerBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static TintLayerBinaryOverlay TintLayerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return TintLayerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TINI:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintLayer_FieldIndex.Index) return ParseResult.Stop;
                    _IndexLocation = (stream.Position - offset);
                    return (int)TintLayer_FieldIndex.Index;
                }
                case RecordTypeInts.TINC:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintLayer_FieldIndex.Color) return ParseResult.Stop;
                    _ColorLocation = (stream.Position - offset);
                    return (int)TintLayer_FieldIndex.Color;
                }
                case RecordTypeInts.TINV:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintLayer_FieldIndex.InterpolationValue) return ParseResult.Stop;
                    _InterpolationValueLocation = (stream.Position - offset);
                    return (int)TintLayer_FieldIndex.InterpolationValue;
                }
                case RecordTypeInts.TIAS:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintLayer_FieldIndex.Preset) return ParseResult.Stop;
                    _PresetLocation = (stream.Position - offset);
                    return (int)TintLayer_FieldIndex.Preset;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TintLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITintLayerGetter rhs)) return false;
            return ((TintLayerCommon)((ITintLayerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ITintLayerGetter? obj)
        {
            return ((TintLayerCommon)((ITintLayerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TintLayerCommon)((ITintLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

