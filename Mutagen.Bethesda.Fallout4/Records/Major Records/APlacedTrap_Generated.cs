/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    /// <summary>
    /// Implemented by: [PlacedArrow, PlacedBeam, PlacedFlame, PlacedCone, PlacedBarrier, PlacedTrap, PlacedHazard, PlacedMissile]
    /// </summary>
    public abstract partial class APlacedTrap :
        APlaced,
        IAPlacedTrapInternal,
        ILoquiObjectSetter<APlacedTrap>,
        IEquatable<IAPlacedTrapGetter>
    {
        #region Ctor
        protected APlacedTrap()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IAPlacedTrapGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region EncounterZone
        public FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; } = new FormLinkNullable<IEncounterZoneGetter>();
        #endregion
        #region Ownership
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Ownership? _Ownership;
        public Ownership? Ownership
        {
            get => _Ownership;
            set => _Ownership = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOwnershipGetter? IAPlacedTrapGetter.Ownership => this.Ownership;
        #endregion
        #region HeadTrackingWeight
        public Single? HeadTrackingWeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAPlacedTrapGetter.HeadTrackingWeight => this.HeadTrackingWeight;
        #endregion
        #region FavorCost
        public Single? FavorCost { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAPlacedTrapGetter.FavorCost => this.FavorCost;
        #endregion
        #region Reflections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WaterReflection> _Reflections = new ExtendedList<WaterReflection>();
        public ExtendedList<WaterReflection> Reflections
        {
            get => this._Reflections;
            protected set => this._Reflections = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWaterReflectionGetter> IAPlacedTrapGetter.Reflections => _Reflections;
        #endregion

        #endregion
        #region LinkedReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LinkedReferences> _LinkedReferences = new ExtendedList<LinkedReferences>();
        public ExtendedList<LinkedReferences> LinkedReferences
        {
            get => this._LinkedReferences;
            protected set => this._LinkedReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILinkedReferencesGetter> IAPlacedTrapGetter.LinkedReferences => _LinkedReferences;
        #endregion

        #endregion
        #region ActivateParents
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActivateParents? _ActivateParents;
        public ActivateParents? ActivateParents
        {
            get => _ActivateParents;
            set => _ActivateParents = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IActivateParentsGetter? IAPlacedTrapGetter.ActivateParents => this.ActivateParents;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IAPlacedTrapGetter.EnableParent => this.EnableParent;
        #endregion
        #region Emittance
        public FormLinkNullable<IEmittanceGetter> Emittance { get; set; } = new FormLinkNullable<IEmittanceGetter>();
        #endregion
        #region MultiBoundReference
        public FormLinkNullable<IPlacedObjectGetter> MultiBoundReference { get; set; } = new FormLinkNullable<IPlacedObjectGetter>();
        #endregion
        #region IgnoredBySandbox
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _IgnoredBySandbox;
        public MemorySlice<Byte>? IgnoredBySandbox
        {
            get => this._IgnoredBySandbox;
            set => this._IgnoredBySandbox = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAPlacedTrapGetter.IgnoredBySandbox => this.IgnoredBySandbox;
        #endregion
        #region LocationRefTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<ILocationReferenceTypeGetter>>? _LocationRefTypes;
        public ExtendedList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes
        {
            get => this._LocationRefTypes;
            set => this._LocationRefTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? IAPlacedTrapGetter.LocationRefTypes => _LocationRefTypes;
        #endregion

        #endregion
        #region LocationReference
        public FormLinkNullable<ILocationRecordGetter> LocationReference { get; set; } = new FormLinkNullable<ILocationRecordGetter>();
        #endregion
        #region DistantLodData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Single>? _DistantLodData;
        public ExtendedList<Single>? DistantLodData
        {
            get => this._DistantLodData;
            set => this._DistantLodData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Single>? IAPlacedTrapGetter.DistantLodData => _DistantLodData;
        #endregion

        #endregion
        #region Scale
        public Single? Scale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAPlacedTrapGetter.Scale => this.Scale;
        #endregion
        #region Placement
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Placement? _Placement;
        public Placement? Placement
        {
            get => _Placement;
            set => _Placement = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlacementGetter? IAPlacedTrapGetter.Placement => this.Placement;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            APlacedTrapMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAPlacedTrapGetter rhs)) return false;
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAPlacedTrapGetter? obj)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APlaced.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.EncounterZone = initialValue;
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(initialValue, new Ownership.Mask<TItem>(initialValue));
                this.HeadTrackingWeight = initialValue;
                this.FavorCost = initialValue;
                this.Reflections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>());
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(initialValue, new ActivateParents.Mask<TItem>(initialValue));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.Emittance = initialValue;
                this.MultiBoundReference = initialValue;
                this.IgnoredBySandbox = initialValue;
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.LocationReference = initialValue;
                this.DistantLodData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Scale = initialValue;
                this.Placement = new MaskItem<TItem, Placement.Mask<TItem>?>(initialValue, new Placement.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem EncounterZone,
                TItem Ownership,
                TItem HeadTrackingWeight,
                TItem FavorCost,
                TItem Reflections,
                TItem LinkedReferences,
                TItem ActivateParents,
                TItem EnableParent,
                TItem Emittance,
                TItem MultiBoundReference,
                TItem IgnoredBySandbox,
                TItem LocationRefTypes,
                TItem LocationReference,
                TItem DistantLodData,
                TItem Scale,
                TItem Placement)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.EncounterZone = EncounterZone;
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(Ownership, new Ownership.Mask<TItem>(Ownership));
                this.HeadTrackingWeight = HeadTrackingWeight;
                this.FavorCost = FavorCost;
                this.Reflections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>(Reflections, Enumerable.Empty<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>());
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(LinkedReferences, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(ActivateParents, new ActivateParents.Mask<TItem>(ActivateParents));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.Emittance = Emittance;
                this.MultiBoundReference = MultiBoundReference;
                this.IgnoredBySandbox = IgnoredBySandbox;
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LocationRefTypes, Enumerable.Empty<(int Index, TItem Value)>());
                this.LocationReference = LocationReference;
                this.DistantLodData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(DistantLodData, Enumerable.Empty<(int Index, TItem Value)>());
                this.Scale = Scale;
                this.Placement = new MaskItem<TItem, Placement.Mask<TItem>?>(Placement, new Placement.Mask<TItem>(Placement));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem EncounterZone;
            public MaskItem<TItem, Ownership.Mask<TItem>?>? Ownership { get; set; }
            public TItem HeadTrackingWeight;
            public TItem FavorCost;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>? Reflections;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>? LinkedReferences;
            public MaskItem<TItem, ActivateParents.Mask<TItem>?>? ActivateParents { get; set; }
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public TItem Emittance;
            public TItem MultiBoundReference;
            public TItem IgnoredBySandbox;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LocationRefTypes;
            public TItem LocationReference;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? DistantLodData;
            public TItem Scale;
            public MaskItem<TItem, Placement.Mask<TItem>?>? Placement { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.EncounterZone, rhs.EncounterZone)) return false;
                if (!object.Equals(this.Ownership, rhs.Ownership)) return false;
                if (!object.Equals(this.HeadTrackingWeight, rhs.HeadTrackingWeight)) return false;
                if (!object.Equals(this.FavorCost, rhs.FavorCost)) return false;
                if (!object.Equals(this.Reflections, rhs.Reflections)) return false;
                if (!object.Equals(this.LinkedReferences, rhs.LinkedReferences)) return false;
                if (!object.Equals(this.ActivateParents, rhs.ActivateParents)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.Emittance, rhs.Emittance)) return false;
                if (!object.Equals(this.MultiBoundReference, rhs.MultiBoundReference)) return false;
                if (!object.Equals(this.IgnoredBySandbox, rhs.IgnoredBySandbox)) return false;
                if (!object.Equals(this.LocationRefTypes, rhs.LocationRefTypes)) return false;
                if (!object.Equals(this.LocationReference, rhs.LocationReference)) return false;
                if (!object.Equals(this.DistantLodData, rhs.DistantLodData)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.Placement, rhs.Placement)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.EncounterZone);
                hash.Add(this.Ownership);
                hash.Add(this.HeadTrackingWeight);
                hash.Add(this.FavorCost);
                hash.Add(this.Reflections);
                hash.Add(this.LinkedReferences);
                hash.Add(this.ActivateParents);
                hash.Add(this.EnableParent);
                hash.Add(this.Emittance);
                hash.Add(this.MultiBoundReference);
                hash.Add(this.IgnoredBySandbox);
                hash.Add(this.LocationRefTypes);
                hash.Add(this.LocationReference);
                hash.Add(this.DistantLodData);
                hash.Add(this.Scale);
                hash.Add(this.Placement);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.EncounterZone)) return false;
                if (Ownership != null)
                {
                    if (!eval(this.Ownership.Overall)) return false;
                    if (this.Ownership.Specific != null && !this.Ownership.Specific.All(eval)) return false;
                }
                if (!eval(this.HeadTrackingWeight)) return false;
                if (!eval(this.FavorCost)) return false;
                if (this.Reflections != null)
                {
                    if (!eval(this.Reflections.Overall)) return false;
                    if (this.Reflections.Specific != null)
                    {
                        foreach (var item in this.Reflections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LinkedReferences != null)
                {
                    if (!eval(this.LinkedReferences.Overall)) return false;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (ActivateParents != null)
                {
                    if (!eval(this.ActivateParents.Overall)) return false;
                    if (this.ActivateParents.Specific != null && !this.ActivateParents.Specific.All(eval)) return false;
                }
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (!eval(this.Emittance)) return false;
                if (!eval(this.MultiBoundReference)) return false;
                if (!eval(this.IgnoredBySandbox)) return false;
                if (this.LocationRefTypes != null)
                {
                    if (!eval(this.LocationRefTypes.Overall)) return false;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.LocationReference)) return false;
                if (this.DistantLodData != null)
                {
                    if (!eval(this.DistantLodData.Overall)) return false;
                    if (this.DistantLodData.Specific != null)
                    {
                        foreach (var item in this.DistantLodData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Scale)) return false;
                if (Placement != null)
                {
                    if (!eval(this.Placement.Overall)) return false;
                    if (this.Placement.Specific != null && !this.Placement.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.EncounterZone)) return true;
                if (Ownership != null)
                {
                    if (eval(this.Ownership.Overall)) return true;
                    if (this.Ownership.Specific != null && this.Ownership.Specific.Any(eval)) return true;
                }
                if (eval(this.HeadTrackingWeight)) return true;
                if (eval(this.FavorCost)) return true;
                if (this.Reflections != null)
                {
                    if (eval(this.Reflections.Overall)) return true;
                    if (this.Reflections.Specific != null)
                    {
                        foreach (var item in this.Reflections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LinkedReferences != null)
                {
                    if (eval(this.LinkedReferences.Overall)) return true;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (ActivateParents != null)
                {
                    if (eval(this.ActivateParents.Overall)) return true;
                    if (this.ActivateParents.Specific != null && this.ActivateParents.Specific.Any(eval)) return true;
                }
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (eval(this.Emittance)) return true;
                if (eval(this.MultiBoundReference)) return true;
                if (eval(this.IgnoredBySandbox)) return true;
                if (this.LocationRefTypes != null)
                {
                    if (eval(this.LocationRefTypes.Overall)) return true;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.LocationReference)) return true;
                if (this.DistantLodData != null)
                {
                    if (eval(this.DistantLodData.Overall)) return true;
                    if (this.DistantLodData.Specific != null)
                    {
                        foreach (var item in this.DistantLodData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Scale)) return true;
                if (Placement != null)
                {
                    if (eval(this.Placement.Overall)) return true;
                    if (this.Placement.Specific != null && this.Placement.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new APlacedTrap.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.EncounterZone = eval(this.EncounterZone);
                obj.Ownership = this.Ownership == null ? null : new MaskItem<R, Ownership.Mask<R>?>(eval(this.Ownership.Overall), this.Ownership.Specific?.Translate(eval));
                obj.HeadTrackingWeight = eval(this.HeadTrackingWeight);
                obj.FavorCost = eval(this.FavorCost);
                if (Reflections != null)
                {
                    obj.Reflections = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WaterReflection.Mask<R>?>>?>(eval(this.Reflections.Overall), Enumerable.Empty<MaskItemIndexed<R, WaterReflection.Mask<R>?>>());
                    if (Reflections.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WaterReflection.Mask<R>?>>();
                        obj.Reflections.Specific = l;
                        foreach (var item in Reflections.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WaterReflection.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WaterReflection.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (LinkedReferences != null)
                {
                    obj.LinkedReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>?>(eval(this.LinkedReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>());
                    if (LinkedReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>();
                        obj.LinkedReferences.Specific = l;
                        foreach (var item in LinkedReferences.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, LinkedReferences.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, LinkedReferences.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ActivateParents = this.ActivateParents == null ? null : new MaskItem<R, ActivateParents.Mask<R>?>(eval(this.ActivateParents.Overall), this.ActivateParents.Specific?.Translate(eval));
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                obj.Emittance = eval(this.Emittance);
                obj.MultiBoundReference = eval(this.MultiBoundReference);
                obj.IgnoredBySandbox = eval(this.IgnoredBySandbox);
                if (LocationRefTypes != null)
                {
                    obj.LocationRefTypes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LocationRefTypes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LocationRefTypes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LocationRefTypes.Specific = l;
                        foreach (var item in LocationRefTypes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.LocationReference = eval(this.LocationReference);
                if (DistantLodData != null)
                {
                    obj.DistantLodData = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.DistantLodData.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (DistantLodData.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.DistantLodData.Specific = l;
                        foreach (var item in DistantLodData.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Scale = eval(this.Scale);
                obj.Placement = this.Placement == null ? null : new MaskItem<R, Placement.Mask<R>?>(eval(this.Placement.Overall), this.Placement.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(APlacedTrap.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, APlacedTrap.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(APlacedTrap.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.EncounterZone ?? true)
                    {
                        fg.AppendItem(EncounterZone, "EncounterZone");
                    }
                    if (printMask?.Ownership?.Overall ?? true)
                    {
                        Ownership?.ToString(fg);
                    }
                    if (printMask?.HeadTrackingWeight ?? true)
                    {
                        fg.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                    }
                    if (printMask?.FavorCost ?? true)
                    {
                        fg.AppendItem(FavorCost, "FavorCost");
                    }
                    if ((printMask?.Reflections?.Overall ?? true)
                        && Reflections.TryGet(out var ReflectionsItem))
                    {
                        fg.AppendLine("Reflections =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ReflectionsItem.Overall);
                            if (ReflectionsItem.Specific != null)
                            {
                                foreach (var subItem in ReflectionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.LinkedReferences?.Overall ?? true)
                        && LinkedReferences.TryGet(out var LinkedReferencesItem))
                    {
                        fg.AppendLine("LinkedReferences =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LinkedReferencesItem.Overall);
                            if (LinkedReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LinkedReferencesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ActivateParents?.Overall ?? true)
                    {
                        ActivateParents?.ToString(fg);
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.ToString(fg);
                    }
                    if (printMask?.Emittance ?? true)
                    {
                        fg.AppendItem(Emittance, "Emittance");
                    }
                    if (printMask?.MultiBoundReference ?? true)
                    {
                        fg.AppendItem(MultiBoundReference, "MultiBoundReference");
                    }
                    if (printMask?.IgnoredBySandbox ?? true)
                    {
                        fg.AppendItem(IgnoredBySandbox, "IgnoredBySandbox");
                    }
                    if ((printMask?.LocationRefTypes?.Overall ?? true)
                        && LocationRefTypes.TryGet(out var LocationRefTypesItem))
                    {
                        fg.AppendLine("LocationRefTypes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LocationRefTypesItem.Overall);
                            if (LocationRefTypesItem.Specific != null)
                            {
                                foreach (var subItem in LocationRefTypesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.LocationReference ?? true)
                    {
                        fg.AppendItem(LocationReference, "LocationReference");
                    }
                    if ((printMask?.DistantLodData?.Overall ?? true)
                        && DistantLodData.TryGet(out var DistantLodDataItem))
                    {
                        fg.AppendLine("DistantLodData =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(DistantLodDataItem.Overall);
                            if (DistantLodDataItem.Specific != null)
                            {
                                foreach (var subItem in DistantLodDataItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        fg.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.Placement?.Overall ?? true)
                    {
                        Placement?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APlaced.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? EncounterZone;
            public MaskItem<Exception?, Ownership.ErrorMask?>? Ownership;
            public Exception? HeadTrackingWeight;
            public Exception? FavorCost;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>? Reflections;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>? LinkedReferences;
            public MaskItem<Exception?, ActivateParents.ErrorMask?>? ActivateParents;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public Exception? Emittance;
            public Exception? MultiBoundReference;
            public Exception? IgnoredBySandbox;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LocationRefTypes;
            public Exception? LocationReference;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? DistantLodData;
            public Exception? Scale;
            public MaskItem<Exception?, Placement.ErrorMask?>? Placement;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case APlacedTrap_FieldIndex.EncounterZone:
                        return EncounterZone;
                    case APlacedTrap_FieldIndex.Ownership:
                        return Ownership;
                    case APlacedTrap_FieldIndex.HeadTrackingWeight:
                        return HeadTrackingWeight;
                    case APlacedTrap_FieldIndex.FavorCost:
                        return FavorCost;
                    case APlacedTrap_FieldIndex.Reflections:
                        return Reflections;
                    case APlacedTrap_FieldIndex.LinkedReferences:
                        return LinkedReferences;
                    case APlacedTrap_FieldIndex.ActivateParents:
                        return ActivateParents;
                    case APlacedTrap_FieldIndex.EnableParent:
                        return EnableParent;
                    case APlacedTrap_FieldIndex.Emittance:
                        return Emittance;
                    case APlacedTrap_FieldIndex.MultiBoundReference:
                        return MultiBoundReference;
                    case APlacedTrap_FieldIndex.IgnoredBySandbox:
                        return IgnoredBySandbox;
                    case APlacedTrap_FieldIndex.LocationRefTypes:
                        return LocationRefTypes;
                    case APlacedTrap_FieldIndex.LocationReference:
                        return LocationReference;
                    case APlacedTrap_FieldIndex.DistantLodData:
                        return DistantLodData;
                    case APlacedTrap_FieldIndex.Scale:
                        return Scale;
                    case APlacedTrap_FieldIndex.Placement:
                        return Placement;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.EncounterZone:
                        this.EncounterZone = ex;
                        break;
                    case APlacedTrap_FieldIndex.Ownership:
                        this.Ownership = new MaskItem<Exception?, Ownership.ErrorMask?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = ex;
                        break;
                    case APlacedTrap_FieldIndex.FavorCost:
                        this.FavorCost = ex;
                        break;
                    case APlacedTrap_FieldIndex.Reflections:
                        this.Reflections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.LinkedReferences:
                        this.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.ActivateParents:
                        this.ActivateParents = new MaskItem<Exception?, ActivateParents.ErrorMask?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.Emittance:
                        this.Emittance = ex;
                        break;
                    case APlacedTrap_FieldIndex.MultiBoundReference:
                        this.MultiBoundReference = ex;
                        break;
                    case APlacedTrap_FieldIndex.IgnoredBySandbox:
                        this.IgnoredBySandbox = ex;
                        break;
                    case APlacedTrap_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.LocationReference:
                        this.LocationReference = ex;
                        break;
                    case APlacedTrap_FieldIndex.DistantLodData:
                        this.DistantLodData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case APlacedTrap_FieldIndex.Placement:
                        this.Placement = new MaskItem<Exception?, Placement.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case APlacedTrap_FieldIndex.EncounterZone:
                        this.EncounterZone = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Ownership:
                        this.Ownership = (MaskItem<Exception?, Ownership.ErrorMask?>?)obj;
                        break;
                    case APlacedTrap_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.FavorCost:
                        this.FavorCost = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Reflections:
                        this.Reflections = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.LinkedReferences:
                        this.LinkedReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.ActivateParents:
                        this.ActivateParents = (MaskItem<Exception?, ActivateParents.ErrorMask?>?)obj;
                        break;
                    case APlacedTrap_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Emittance:
                        this.Emittance = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.MultiBoundReference:
                        this.MultiBoundReference = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.IgnoredBySandbox:
                        this.IgnoredBySandbox = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.LocationReference:
                        this.LocationReference = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.DistantLodData:
                        this.DistantLodData = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Placement:
                        this.Placement = (MaskItem<Exception?, Placement.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (EncounterZone != null) return true;
                if (Ownership != null) return true;
                if (HeadTrackingWeight != null) return true;
                if (FavorCost != null) return true;
                if (Reflections != null) return true;
                if (LinkedReferences != null) return true;
                if (ActivateParents != null) return true;
                if (EnableParent != null) return true;
                if (Emittance != null) return true;
                if (MultiBoundReference != null) return true;
                if (IgnoredBySandbox != null) return true;
                if (LocationRefTypes != null) return true;
                if (LocationReference != null) return true;
                if (DistantLodData != null) return true;
                if (Scale != null) return true;
                if (Placement != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(EncounterZone, "EncounterZone");
                Ownership?.ToString(fg);
                fg.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                fg.AppendItem(FavorCost, "FavorCost");
                if (Reflections.TryGet(out var ReflectionsItem))
                {
                    fg.AppendLine("Reflections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ReflectionsItem.Overall);
                        if (ReflectionsItem.Specific != null)
                        {
                            foreach (var subItem in ReflectionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (LinkedReferences.TryGet(out var LinkedReferencesItem))
                {
                    fg.AppendLine("LinkedReferences =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LinkedReferencesItem.Overall);
                        if (LinkedReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LinkedReferencesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                ActivateParents?.ToString(fg);
                EnableParent?.ToString(fg);
                fg.AppendItem(Emittance, "Emittance");
                fg.AppendItem(MultiBoundReference, "MultiBoundReference");
                fg.AppendItem(IgnoredBySandbox, "IgnoredBySandbox");
                if (LocationRefTypes.TryGet(out var LocationRefTypesItem))
                {
                    fg.AppendLine("LocationRefTypes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LocationRefTypesItem.Overall);
                        if (LocationRefTypesItem.Specific != null)
                        {
                            foreach (var subItem in LocationRefTypesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(LocationReference, "LocationReference");
                if (DistantLodData.TryGet(out var DistantLodDataItem))
                {
                    fg.AppendLine("DistantLodData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(DistantLodDataItem.Overall);
                        if (DistantLodDataItem.Specific != null)
                        {
                            foreach (var subItem in DistantLodDataItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Scale, "Scale");
                Placement?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.EncounterZone = this.EncounterZone.Combine(rhs.EncounterZone);
                ret.Ownership = this.Ownership.Combine(rhs.Ownership, (l, r) => l.Combine(r));
                ret.HeadTrackingWeight = this.HeadTrackingWeight.Combine(rhs.HeadTrackingWeight);
                ret.FavorCost = this.FavorCost.Combine(rhs.FavorCost);
                ret.Reflections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>(ExceptionExt.Combine(this.Reflections?.Overall, rhs.Reflections?.Overall), ExceptionExt.Combine(this.Reflections?.Specific, rhs.Reflections?.Specific));
                ret.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ExceptionExt.Combine(this.LinkedReferences?.Overall, rhs.LinkedReferences?.Overall), ExceptionExt.Combine(this.LinkedReferences?.Specific, rhs.LinkedReferences?.Specific));
                ret.ActivateParents = this.ActivateParents.Combine(rhs.ActivateParents, (l, r) => l.Combine(r));
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.Emittance = this.Emittance.Combine(rhs.Emittance);
                ret.MultiBoundReference = this.MultiBoundReference.Combine(rhs.MultiBoundReference);
                ret.IgnoredBySandbox = this.IgnoredBySandbox.Combine(rhs.IgnoredBySandbox);
                ret.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.LocationRefTypes?.Overall, rhs.LocationRefTypes?.Overall), ExceptionExt.Combine(this.LocationRefTypes?.Specific, rhs.LocationRefTypes?.Specific));
                ret.LocationReference = this.LocationReference.Combine(rhs.LocationReference);
                ret.DistantLodData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.DistantLodData?.Overall, rhs.DistantLodData?.Overall), ExceptionExt.Combine(this.DistantLodData?.Specific, rhs.DistantLodData?.Specific));
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.Placement = this.Placement.Combine(rhs.Placement, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APlaced.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public bool EncounterZone;
            public Ownership.TranslationMask? Ownership;
            public bool HeadTrackingWeight;
            public bool FavorCost;
            public WaterReflection.TranslationMask? Reflections;
            public LinkedReferences.TranslationMask? LinkedReferences;
            public ActivateParents.TranslationMask? ActivateParents;
            public EnableParent.TranslationMask? EnableParent;
            public bool Emittance;
            public bool MultiBoundReference;
            public bool IgnoredBySandbox;
            public bool LocationRefTypes;
            public bool LocationReference;
            public bool DistantLodData;
            public bool Scale;
            public Placement.TranslationMask? Placement;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.EncounterZone = defaultOn;
                this.HeadTrackingWeight = defaultOn;
                this.FavorCost = defaultOn;
                this.Emittance = defaultOn;
                this.MultiBoundReference = defaultOn;
                this.IgnoredBySandbox = defaultOn;
                this.LocationRefTypes = defaultOn;
                this.LocationReference = defaultOn;
                this.DistantLodData = defaultOn;
                this.Scale = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((EncounterZone, null));
                ret.Add((Ownership != null ? Ownership.OnOverall : DefaultOn, Ownership?.GetCrystal()));
                ret.Add((HeadTrackingWeight, null));
                ret.Add((FavorCost, null));
                ret.Add((Reflections == null ? DefaultOn : !Reflections.GetCrystal().CopyNothing, Reflections?.GetCrystal()));
                ret.Add((LinkedReferences == null ? DefaultOn : !LinkedReferences.GetCrystal().CopyNothing, LinkedReferences?.GetCrystal()));
                ret.Add((ActivateParents != null ? ActivateParents.OnOverall : DefaultOn, ActivateParents?.GetCrystal()));
                ret.Add((EnableParent != null ? EnableParent.OnOverall : DefaultOn, EnableParent?.GetCrystal()));
                ret.Add((Emittance, null));
                ret.Add((MultiBoundReference, null));
                ret.Add((IgnoredBySandbox, null));
                ret.Add((LocationRefTypes, null));
                ret.Add((LocationReference, null));
                ret.Add((DistantLodData, null));
                ret.Add((Scale, null));
                ret.Add((Placement != null ? Placement.OnOverall : DefaultOn, Placement?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => APlacedTrapCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APlacedTrapSetterCommon.Instance.RemapLinks(this, mapping);
        public APlacedTrap(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private APlacedTrap(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal APlacedTrap(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public APlacedTrap(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public APlacedTrap(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => APlacedTrapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APlacedTrapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((APlacedTrapSetterCommon)((IAPlacedTrapGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new APlacedTrap GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [PlacedArrow, PlacedBeam, PlacedFlame, PlacedCone, PlacedBarrier, PlacedTrap, PlacedHazard, PlacedMissile]
    /// </summary>
    public partial interface IAPlacedTrap :
        IAPlacedTrapGetter,
        IAPlaced,
        IPlaced,
        IPlacedThing,
        ILinkedReference,
        IKeywordLinkedReference,
        ILoquiObjectSetter<IAPlacedTrapInternal>,
        IFormLinkContainer
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; }
        new Ownership? Ownership { get; set; }
        new Single? HeadTrackingWeight { get; set; }
        new Single? FavorCost { get; set; }
        new ExtendedList<WaterReflection> Reflections { get; }
        new ExtendedList<LinkedReferences> LinkedReferences { get; }
        new ActivateParents? ActivateParents { get; set; }
        new EnableParent? EnableParent { get; set; }
        new FormLinkNullable<IEmittanceGetter> Emittance { get; set; }
        new FormLinkNullable<IPlacedObjectGetter> MultiBoundReference { get; set; }
        new MemorySlice<Byte>? IgnoredBySandbox { get; set; }
        new ExtendedList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes { get; set; }
        new FormLinkNullable<ILocationRecordGetter> LocationReference { get; set; }
        new ExtendedList<Single>? DistantLodData { get; set; }
        new Single? Scale { get; set; }
        new Placement? Placement { get; set; }
        #region Mutagen
        new APlacedTrap.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IAPlacedTrapInternal :
        IAPlacedInternal,
        IAPlacedTrap,
        IAPlacedTrapGetter
    {
    }

    /// <summary>
    /// Implemented by: [PlacedArrow, PlacedBeam, PlacedFlame, PlacedCone, PlacedBarrier, PlacedTrap, PlacedHazard, PlacedMissile]
    /// </summary>
    public partial interface IAPlacedTrapGetter :
        IAPlacedGetter,
        IPlacedGetter,
        IPlacedThingGetter,
        ILinkedReferenceGetter,
        IKeywordLinkedReferenceGetter,
        ILoquiObject<IAPlacedTrapGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => APlacedTrap_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; }
        IOwnershipGetter? Ownership { get; }
        Single? HeadTrackingWeight { get; }
        Single? FavorCost { get; }
        IReadOnlyList<IWaterReflectionGetter> Reflections { get; }
        IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; }
        IActivateParentsGetter? ActivateParents { get; }
        IEnableParentGetter? EnableParent { get; }
        FormLinkNullable<IEmittanceGetter> Emittance { get; }
        FormLinkNullable<IPlacedObjectGetter> MultiBoundReference { get; }
        ReadOnlyMemorySlice<Byte>? IgnoredBySandbox { get; }
        IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes { get; }
        FormLinkNullable<ILocationRecordGetter> LocationReference { get; }
        IReadOnlyList<Single>? DistantLodData { get; }
        Single? Scale { get; }
        IPlacementGetter? Placement { get; }

        #region Mutagen
        APlacedTrap.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class APlacedTrapMixIn
    {
        public static void Clear(this IAPlacedTrapInternal item)
        {
            ((APlacedTrapSetterCommon)((IAPlacedTrapGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static APlacedTrap.Mask<bool> GetEqualsMask(
            this IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAPlacedTrapGetter item,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAPlacedTrapGetter item,
            FileGeneration fg,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAPlacedTrapInternal lhs,
            IAPlacedTrapGetter rhs,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = APlacedTrap.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAPlacedTrapInternal lhs,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static APlacedTrap DeepCopy(
            this IAPlacedTrapGetter item,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            return ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static APlacedTrap DeepCopy(
            this IAPlacedTrapGetter item,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            return ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static APlacedTrap DeepCopy(
            this IAPlacedTrapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static APlacedTrap Duplicate(
            this IAPlacedTrapGetter item,
            FormKey formKey,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAPlacedTrapInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APlacedTrapSetterCommon)((IAPlacedTrapGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum APlacedTrap_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        EncounterZone = 7,
        Ownership = 8,
        HeadTrackingWeight = 9,
        FavorCost = 10,
        Reflections = 11,
        LinkedReferences = 12,
        ActivateParents = 13,
        EnableParent = 14,
        Emittance = 15,
        MultiBoundReference = 16,
        IgnoredBySandbox = 17,
        LocationRefTypes = 18,
        LocationReference = 19,
        DistantLodData = 20,
        Scale = 21,
        Placement = 22,
    }
    #endregion

    #region Registration
    public partial class APlacedTrap_Registration : ILoquiRegistration
    {
        public static readonly APlacedTrap_Registration Instance = new APlacedTrap_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 294,
            version: 0);

        public const string GUID = "29f40f03-4046-4b2d-b061-b0c5c48d253b";

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(APlacedTrap.Mask<>);

        public static readonly Type ErrorMaskType = typeof(APlacedTrap.ErrorMask);

        public static readonly Type ClassType = typeof(APlacedTrap);

        public static readonly Type GetterType = typeof(IAPlacedTrapGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAPlacedTrap);

        public static readonly Type? InternalSetterType = typeof(IAPlacedTrapInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.APlacedTrap";

        public const string Name = "APlacedTrap";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.VMAD,
                        RecordTypes.NAME,
                        RecordTypes.XEZN,
                        RecordTypes.XOWN,
                        RecordTypes.XRNK,
                        RecordTypes.XHTW,
                        RecordTypes.XFVC,
                        RecordTypes.XPWR,
                        RecordTypes.XLKR,
                        RecordTypes.XAPD,
                        RecordTypes.XESP,
                        RecordTypes.XEMI,
                        RecordTypes.XMBR,
                        RecordTypes.XIS2,
                        RecordTypes.XLRT,
                        RecordTypes.XLRL,
                        RecordTypes.XLOD,
                        RecordTypes.XSCL,
                        RecordTypes.DATA,
                        RecordTypes.PARW,
                        RecordTypes.PBEA,
                        RecordTypes.PFLA,
                        RecordTypes.PCON,
                        RecordTypes.PBAR,
                        RecordTypes.PGRE,
                        RecordTypes.PHZD,
                        RecordTypes.PMIS
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(APlacedTrapBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class APlacedTrapSetterCommon : APlacedSetterCommon
    {
        public new static readonly APlacedTrapSetterCommon Instance = new APlacedTrapSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAPlacedTrapInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.EncounterZone = FormLinkNullable<IEncounterZoneGetter>.Null;
            item.Ownership = null;
            item.HeadTrackingWeight = default;
            item.FavorCost = default;
            item.Reflections.Clear();
            item.LinkedReferences.Clear();
            item.ActivateParents = null;
            item.EnableParent = null;
            item.Emittance = FormLinkNullable<IEmittanceGetter>.Null;
            item.MultiBoundReference = FormLinkNullable<IPlacedObjectGetter>.Null;
            item.IgnoredBySandbox = default;
            item.LocationRefTypes = null;
            item.LocationReference = FormLinkNullable<ILocationRecordGetter>.Null;
            item.DistantLodData = null;
            item.Scale = default;
            item.Placement = null;
            base.Clear(item);
        }
        
        public override void Clear(IAPlacedInternal item)
        {
            Clear(item: (IAPlacedTrapInternal)item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IAPlacedTrapInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAPlacedTrapInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAPlacedTrap obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.EncounterZone = obj.EncounterZone.Relink(mapping);
            obj.Ownership?.RemapLinks(mapping);
            obj.Reflections.RemapLinks(mapping);
            obj.LinkedReferences.RemapLinks(mapping);
            obj.ActivateParents?.RemapLinks(mapping);
            obj.EnableParent?.RemapLinks(mapping);
            obj.Emittance = obj.Emittance.Relink(mapping);
            obj.MultiBoundReference = obj.MultiBoundReference.Relink(mapping);
            obj.LocationRefTypes?.RemapLinks(mapping);
            obj.LocationReference = obj.LocationReference.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAPlacedTrapInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
        }
        
        public override void CopyInFromBinary(
            IAPlacedInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (APlacedTrap)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (APlacedTrap)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (APlacedTrap)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class APlacedTrapCommon : APlacedCommon
    {
        public new static readonly APlacedTrapCommon Instance = new APlacedTrapCommon();

        public APlacedTrap.Mask<bool> GetEqualsMask(
            IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new APlacedTrap.Mask<bool>(false);
            ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs,
            APlacedTrap.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EncounterZone = item.EncounterZone.Equals(rhs.EncounterZone);
            ret.Ownership = EqualsMaskHelper.EqualsHelper(
                item.Ownership,
                rhs.Ownership,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.HeadTrackingWeight = item.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight);
            ret.FavorCost = item.FavorCost.EqualsWithin(rhs.FavorCost);
            ret.Reflections = item.Reflections.CollectionEqualsHelper(
                rhs.Reflections,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LinkedReferences = item.LinkedReferences.CollectionEqualsHelper(
                rhs.LinkedReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ActivateParents = EqualsMaskHelper.EqualsHelper(
                item.ActivateParents,
                rhs.ActivateParents,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Emittance = item.Emittance.Equals(rhs.Emittance);
            ret.MultiBoundReference = item.MultiBoundReference.Equals(rhs.MultiBoundReference);
            ret.IgnoredBySandbox = MemorySliceExt.Equal(item.IgnoredBySandbox, rhs.IgnoredBySandbox);
            ret.LocationRefTypes = item.LocationRefTypes.CollectionEqualsHelper(
                rhs.LocationRefTypes,
                (l, r) => object.Equals(l, r),
                include);
            ret.LocationReference = item.LocationReference.Equals(rhs.LocationReference);
            ret.DistantLodData = item.DistantLodData.CollectionEqualsHelper(
                rhs.DistantLodData,
                (l, r) => l.EqualsWithin(r),
                include);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.Placement = EqualsMaskHelper.EqualsHelper(
                item.Placement,
                rhs.Placement,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAPlacedTrapGetter item,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAPlacedTrapGetter item,
            FileGeneration fg,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"APlacedTrap =>");
            }
            else
            {
                fg.AppendLine($"{name} (APlacedTrap) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAPlacedTrapGetter item,
            FileGeneration fg,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            APlacedCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.EncounterZone ?? true)
            {
                fg.AppendItem(item.EncounterZone.FormKeyNullable, "EncounterZone");
            }
            if ((printMask?.Ownership?.Overall ?? true)
                && item.Ownership.TryGet(out var OwnershipItem))
            {
                OwnershipItem?.ToString(fg, "Ownership");
            }
            if ((printMask?.HeadTrackingWeight ?? true)
                && item.HeadTrackingWeight.TryGet(out var HeadTrackingWeightItem))
            {
                fg.AppendItem(HeadTrackingWeightItem, "HeadTrackingWeight");
            }
            if ((printMask?.FavorCost ?? true)
                && item.FavorCost.TryGet(out var FavorCostItem))
            {
                fg.AppendItem(FavorCostItem, "FavorCost");
            }
            if (printMask?.Reflections?.Overall ?? true)
            {
                fg.AppendLine("Reflections =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Reflections)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LinkedReferences?.Overall ?? true)
            {
                fg.AppendLine("LinkedReferences =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LinkedReferences)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.ActivateParents?.Overall ?? true)
                && item.ActivateParents.TryGet(out var ActivateParentsItem))
            {
                ActivateParentsItem?.ToString(fg, "ActivateParents");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent.TryGet(out var EnableParentItem))
            {
                EnableParentItem?.ToString(fg, "EnableParent");
            }
            if (printMask?.Emittance ?? true)
            {
                fg.AppendItem(item.Emittance.FormKeyNullable, "Emittance");
            }
            if (printMask?.MultiBoundReference ?? true)
            {
                fg.AppendItem(item.MultiBoundReference.FormKeyNullable, "MultiBoundReference");
            }
            if ((printMask?.IgnoredBySandbox ?? true)
                && item.IgnoredBySandbox.TryGet(out var IgnoredBySandboxItem))
            {
                fg.AppendLine($"IgnoredBySandbox => {SpanExt.ToHexString(IgnoredBySandboxItem)}");
            }
            if ((printMask?.LocationRefTypes?.Overall ?? true)
                && item.LocationRefTypes.TryGet(out var LocationRefTypesItem))
            {
                fg.AppendLine("LocationRefTypes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in LocationRefTypesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LocationReference ?? true)
            {
                fg.AppendItem(item.LocationReference.FormKeyNullable, "LocationReference");
            }
            if ((printMask?.DistantLodData?.Overall ?? true)
                && item.DistantLodData.TryGet(out var DistantLodDataItem))
            {
                fg.AppendLine("DistantLodData =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in DistantLodDataItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Scale ?? true)
                && item.Scale.TryGet(out var ScaleItem))
            {
                fg.AppendItem(ScaleItem, "Scale");
            }
            if ((printMask?.Placement?.Overall ?? true)
                && item.Placement.TryGet(out var PlacementItem))
            {
                PlacementItem?.ToString(fg, "Placement");
            }
        }
        
        public static APlacedTrap_FieldIndex ConvertFieldIndex(APlaced_FieldIndex index)
        {
            switch (index)
            {
                case APlaced_FieldIndex.MajorRecordFlagsRaw:
                    return (APlacedTrap_FieldIndex)((int)index);
                case APlaced_FieldIndex.FormKey:
                    return (APlacedTrap_FieldIndex)((int)index);
                case APlaced_FieldIndex.VersionControl:
                    return (APlacedTrap_FieldIndex)((int)index);
                case APlaced_FieldIndex.EditorID:
                    return (APlacedTrap_FieldIndex)((int)index);
                case APlaced_FieldIndex.FormVersion:
                    return (APlacedTrap_FieldIndex)((int)index);
                case APlaced_FieldIndex.Version2:
                    return (APlacedTrap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new APlacedTrap_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (APlacedTrap_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (APlacedTrap_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (APlacedTrap_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (APlacedTrap_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (APlacedTrap_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (APlacedTrap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new APlacedTrap_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (APlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (APlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (APlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (APlacedTrap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAPlacedTrapGetter? lhs,
            IAPlacedTrapGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAPlacedGetter)lhs, (IAPlacedGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!lhs.EncounterZone.Equals(rhs.EncounterZone)) return false;
            if (!object.Equals(lhs.Ownership, rhs.Ownership)) return false;
            if (!lhs.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight)) return false;
            if (!lhs.FavorCost.EqualsWithin(rhs.FavorCost)) return false;
            if (!lhs.Reflections.SequenceEqualNullable(rhs.Reflections)) return false;
            if (!lhs.LinkedReferences.SequenceEqualNullable(rhs.LinkedReferences)) return false;
            if (!object.Equals(lhs.ActivateParents, rhs.ActivateParents)) return false;
            if (!object.Equals(lhs.EnableParent, rhs.EnableParent)) return false;
            if (!lhs.Emittance.Equals(rhs.Emittance)) return false;
            if (!lhs.MultiBoundReference.Equals(rhs.MultiBoundReference)) return false;
            if (!MemorySliceExt.Equal(lhs.IgnoredBySandbox, rhs.IgnoredBySandbox)) return false;
            if (!lhs.LocationRefTypes.SequenceEqualNullable(rhs.LocationRefTypes)) return false;
            if (!lhs.LocationReference.Equals(rhs.LocationReference)) return false;
            if (!lhs.DistantLodData.SequenceEqualNullable(rhs.DistantLodData)) return false;
            if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            if (!object.Equals(lhs.Placement, rhs.Placement)) return false;
            return true;
        }
        
        public override bool Equals(
            IAPlacedGetter? lhs,
            IAPlacedGetter? rhs)
        {
            return Equals(
                lhs: (IAPlacedTrapGetter?)lhs,
                rhs: rhs as IAPlacedTrapGetter);
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAPlacedTrapGetter?)lhs,
                rhs: rhs as IAPlacedTrapGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAPlacedTrapGetter?)lhs,
                rhs: rhs as IAPlacedTrapGetter);
        }
        
        public virtual int GetHashCode(IAPlacedTrapGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.EncounterZone);
            if (item.Ownership.TryGet(out var Ownershipitem))
            {
                hash.Add(Ownershipitem);
            }
            if (item.HeadTrackingWeight.TryGet(out var HeadTrackingWeightitem))
            {
                hash.Add(HeadTrackingWeightitem);
            }
            if (item.FavorCost.TryGet(out var FavorCostitem))
            {
                hash.Add(FavorCostitem);
            }
            hash.Add(item.Reflections);
            hash.Add(item.LinkedReferences);
            if (item.ActivateParents.TryGet(out var ActivateParentsitem))
            {
                hash.Add(ActivateParentsitem);
            }
            if (item.EnableParent.TryGet(out var EnableParentitem))
            {
                hash.Add(EnableParentitem);
            }
            hash.Add(item.Emittance);
            hash.Add(item.MultiBoundReference);
            if (item.IgnoredBySandbox.TryGet(out var IgnoredBySandboxItem))
            {
                hash.Add(IgnoredBySandboxItem);
            }
            hash.Add(item.LocationRefTypes);
            hash.Add(item.LocationReference);
            hash.Add(item.DistantLodData);
            if (item.Scale.TryGet(out var Scaleitem))
            {
                hash.Add(Scaleitem);
            }
            if (item.Placement.TryGet(out var Placementitem))
            {
                hash.Add(Placementitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPlacedGetter item)
        {
            return GetHashCode(item: (IAPlacedTrapGetter)item);
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IAPlacedTrapGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAPlacedTrapGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return APlacedTrap.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IAPlacedTrapGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.EncounterZone.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.EncounterZone);
            }
            if (obj.Ownership.TryGet(out var OwnershipItems))
            {
                foreach (var item in OwnershipItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Reflections.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.LinkedReferences.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.ActivateParents.TryGet(out var ActivateParentsItems))
            {
                foreach (var item in ActivateParentsItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.EnableParent.TryGet(out var EnableParentItems))
            {
                foreach (var item in EnableParentItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Emittance.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Emittance);
            }
            if (obj.MultiBoundReference.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.MultiBoundReference);
            }
            if (obj.LocationRefTypes.TryGet(out var LocationRefTypesItem))
            {
                foreach (var item in LocationRefTypesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.LocationReference.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.LocationReference);
            }
            yield break;
        }
        
        #region Duplicate
        public virtual APlacedTrap Duplicate(
            IAPlacedTrapGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            throw new NotImplementedException();
        }
        
        public override APlaced Duplicate(
            IAPlacedGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAPlacedTrap)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAPlacedTrap)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAPlacedTrap)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class APlacedTrapSetterTranslationCommon : APlacedSetterTranslationCommon
    {
        public new static readonly APlacedTrapSetterTranslationCommon Instance = new APlacedTrapSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IAPlacedTrapInternal item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public virtual void DeepCopyIn(
            IAPlacedTrap item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPlaced)item,
                (IAPlacedGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.EncounterZone) ?? true))
            {
                item.EncounterZone = new FormLinkNullable<IEncounterZoneGetter>(rhs.EncounterZone.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Ownership) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Ownership);
                try
                {
                    if(rhs.Ownership.TryGet(out var rhsOwnership))
                    {
                        item.Ownership = rhsOwnership.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.Ownership));
                    }
                    else
                    {
                        item.Ownership = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.HeadTrackingWeight) ?? true))
            {
                item.HeadTrackingWeight = rhs.HeadTrackingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.FavorCost) ?? true))
            {
                item.FavorCost = rhs.FavorCost;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Reflections) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Reflections);
                try
                {
                    item.Reflections.SetTo(
                        rhs.Reflections
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LinkedReferences) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.LinkedReferences);
                try
                {
                    item.LinkedReferences.SetTo(
                        rhs.LinkedReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.ActivateParents) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.ActivateParents);
                try
                {
                    if(rhs.ActivateParents.TryGet(out var rhsActivateParents))
                    {
                        item.ActivateParents = rhsActivateParents.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.ActivateParents));
                    }
                    else
                    {
                        item.ActivateParents = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent.TryGet(out var rhsEnableParent))
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Emittance) ?? true))
            {
                item.Emittance = new FormLinkNullable<IEmittanceGetter>(rhs.Emittance.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.MultiBoundReference) ?? true))
            {
                item.MultiBoundReference = new FormLinkNullable<IPlacedObjectGetter>(rhs.MultiBoundReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.IgnoredBySandbox) ?? true))
            {
                if(rhs.IgnoredBySandbox.TryGet(out var IgnoredBySandboxrhs))
                {
                    item.IgnoredBySandbox = IgnoredBySandboxrhs.ToArray();
                }
                else
                {
                    item.IgnoredBySandbox = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LocationRefTypes) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.LocationRefTypes);
                try
                {
                    if ((rhs.LocationRefTypes != null))
                    {
                        item.LocationRefTypes = 
                            rhs.LocationRefTypes
                            .Select(r => (IFormLink<ILocationReferenceTypeGetter>)new FormLink<ILocationReferenceTypeGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<ILocationReferenceTypeGetter>>();
                    }
                    else
                    {
                        item.LocationRefTypes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LocationReference) ?? true))
            {
                item.LocationReference = new FormLinkNullable<ILocationRecordGetter>(rhs.LocationReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.DistantLodData) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.DistantLodData);
                try
                {
                    if ((rhs.DistantLodData != null))
                    {
                        item.DistantLodData = 
                            rhs.DistantLodData
                            .ToExtendedList<Single>();
                    }
                    else
                    {
                        item.DistantLodData = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Placement) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Placement);
                try
                {
                    if(rhs.Placement.TryGet(out var rhsPlacement))
                    {
                        item.Placement = rhsPlacement.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.Placement));
                    }
                    else
                    {
                        item.Placement = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IAPlacedInternal item,
            IAPlacedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrapInternal)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlaced item,
            IAPlacedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrap)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrapInternal)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrap)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrapInternal)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrap)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public APlacedTrap DeepCopy(
            IAPlacedTrapGetter item,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            APlacedTrap ret = (APlacedTrap)((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public APlacedTrap DeepCopy(
            IAPlacedTrapGetter item,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            APlacedTrap ret = (APlacedTrap)((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = APlacedTrap.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public APlacedTrap DeepCopy(
            IAPlacedTrapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            APlacedTrap ret = (APlacedTrap)((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class APlacedTrap
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APlacedTrap_Registration.Instance;
        public new static APlacedTrap_Registration Registration => APlacedTrap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => APlacedTrapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return APlacedTrapSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => APlacedTrapSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class APlacedTrapBinaryWriteTranslation :
        APlacedBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static APlacedTrapBinaryWriteTranslation Instance = new APlacedTrapBinaryWriteTranslation();

        static partial void WriteBinaryTrapFormCustom(
            MutagenWriter writer,
            IAPlacedTrapGetter item);

        public static void WriteBinaryTrapForm(
            MutagenWriter writer,
            IAPlacedTrapGetter item)
        {
            WriteBinaryTrapFormCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IAPlacedTrapGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            APlacedTrapBinaryWriteTranslation.WriteBinaryTrapForm(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EncounterZone,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XEZN));
            if (item.Ownership.TryGet(out var OwnershipItem))
            {
                ((OwnershipBinaryWriteTranslation)((IBinaryItem)OwnershipItem).BinaryWriteTranslator).Write(
                    item: OwnershipItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HeadTrackingWeight,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XHTW));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FavorCost,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XFVC));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IWaterReflectionGetter>.Instance.Write(
                writer: writer,
                items: item.Reflections,
                transl: (MutagenWriter subWriter, IWaterReflectionGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((WaterReflectionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ILinkedReferencesGetter>.Instance.Write(
                writer: writer,
                items: item.LinkedReferences,
                transl: (MutagenWriter subWriter, ILinkedReferencesGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((LinkedReferencesBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.ActivateParents.TryGet(out var ActivateParentsItem))
            {
                ((ActivateParentsBinaryWriteTranslation)((IBinaryItem)ActivateParentsItem).BinaryWriteTranslator).Write(
                    item: ActivateParentsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.EnableParent.TryGet(out var EnableParentItem))
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Emittance,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XEMI));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MultiBoundReference,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XMBR));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.IgnoredBySandbox,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XIS2));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ILocationReferenceTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.LocationRefTypes,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.XLRT),
                transl: (MutagenWriter subWriter, IFormLink<ILocationReferenceTypeGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LocationReference,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLRL));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Single>.Instance.Write(
                writer: writer,
                items: item.DistantLodData,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.XLOD),
                transl: FloatBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XSCL));
            if (item.Placement.TryGet(out var PlacementItem))
            {
                ((PlacementBinaryWriteTranslation)((IBinaryItem)PlacementItem).BinaryWriteTranslator).Write(
                    item: PlacementItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            IAPlacedTrapGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            try
            {
                Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                writer.MetaData.FormVersion = item.FormVersion;
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                writer.MetaData.FormVersion = null;
            }
            catch (Exception ex)
            {
                throw RecordException.Factory(ex, item.FormKey, item.EditorID);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPlacedGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class APlacedTrapBinaryCreateTranslation : APlacedBinaryCreateTranslation
    {
        public new readonly static APlacedTrapBinaryCreateTranslation Instance = new APlacedTrapBinaryCreateTranslation();

        public override RecordType RecordType => throw new ArgumentException();
        public static ParseResult FillBinaryRecordTypes(
            IAPlacedTrapInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)APlacedTrap_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    APlacedTrapBinaryCreateTranslation.FillBinaryTrapFormCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                case RecordTypeInts.XEZN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EncounterZone = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)APlacedTrap_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XOWN:
                case RecordTypeInts.XRNK:
                {
                    item.Ownership = Mutagen.Bethesda.Fallout4.Ownership.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)APlacedTrap_FieldIndex.Ownership;
                }
                case RecordTypeInts.XHTW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeadTrackingWeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)APlacedTrap_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XFVC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FavorCost = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)APlacedTrap_FieldIndex.FavorCost;
                }
                case RecordTypeInts.XPWR:
                {
                    item.Reflections.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<WaterReflection>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.XPWR,
                            recordTypeConverter: recordTypeConverter,
                            transl: WaterReflection.TryCreateFromBinary));
                    return (int)APlacedTrap_FieldIndex.Reflections;
                }
                case RecordTypeInts.XLKR:
                {
                    item.LinkedReferences.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<LinkedReferences>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.XLKR,
                            recordTypeConverter: recordTypeConverter,
                            transl: LinkedReferences.TryCreateFromBinary));
                    return (int)APlacedTrap_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XAPD:
                {
                    item.ActivateParents = Mutagen.Bethesda.Fallout4.ActivateParents.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)APlacedTrap_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XESP:
                {
                    item.EnableParent = Mutagen.Bethesda.Fallout4.EnableParent.CreateFromBinary(frame: frame);
                    return (int)APlacedTrap_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XEMI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Emittance = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)APlacedTrap_FieldIndex.Emittance;
                }
                case RecordTypeInts.XMBR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MultiBoundReference = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)APlacedTrap_FieldIndex.MultiBoundReference;
                }
                case RecordTypeInts.XIS2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IgnoredBySandbox = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)APlacedTrap_FieldIndex.IgnoredBySandbox;
                }
                case RecordTypeInts.XLRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationRefTypes = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ILocationReferenceTypeGetter>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<ILocationReferenceTypeGetter>>();
                    return (int)APlacedTrap_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XLRL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationReference = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)APlacedTrap_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XLOD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DistantLodData = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Single>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FloatBinaryTranslation.Instance.Parse)
                        .CastExtendedList<Single>();
                    return (int)APlacedTrap_FieldIndex.DistantLodData;
                }
                case RecordTypeInts.XSCL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)APlacedTrap_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    item.Placement = Mutagen.Bethesda.Fallout4.Placement.CreateFromBinary(frame: frame);
                    return (int)APlacedTrap_FieldIndex.Placement;
                }
                default:
                    return APlacedBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryTrapFormCustom(
            MutagenFrame frame,
            IAPlacedTrapInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class APlacedTrapBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class APlacedTrapBinaryOverlay :
        APlacedBinaryOverlay,
        IAPlacedTrapGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APlacedTrap_Registration.Instance;
        public new static APlacedTrap_Registration Registration => APlacedTrap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => APlacedTrapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => APlacedTrapSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => APlacedTrapCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => APlacedTrapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((APlacedTrapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public APlacedTrap.MajorFlag MajorFlags => (APlacedTrap.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region TrapForm
        partial void TrapFormCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region EncounterZone
        private int? _EncounterZoneLocation;
        public FormLinkNullable<IEncounterZoneGetter> EncounterZone => _EncounterZoneLocation.HasValue ? new FormLinkNullable<IEncounterZoneGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EncounterZoneLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEncounterZoneGetter>.Null;
        #endregion
        public IOwnershipGetter? Ownership { get; private set; }
        #region HeadTrackingWeight
        private int? _HeadTrackingWeightLocation;
        public Single? HeadTrackingWeight => _HeadTrackingWeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _HeadTrackingWeightLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region FavorCost
        private int? _FavorCostLocation;
        public Single? FavorCost => _FavorCostLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _FavorCostLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public IReadOnlyList<IWaterReflectionGetter> Reflections { get; private set; } = ListExt.Empty<WaterReflectionBinaryOverlay>();
        public IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; private set; } = ListExt.Empty<LinkedReferencesBinaryOverlay>();
        public IActivateParentsGetter? ActivateParents { get; private set; }
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        public IEnableParentGetter? EnableParent => _EnableParentLocation.HasValue ? EnableParentBinaryOverlay.EnableParentFactory(new OverlayStream(_data.Slice(_EnableParentLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Emittance
        private int? _EmittanceLocation;
        public FormLinkNullable<IEmittanceGetter> Emittance => _EmittanceLocation.HasValue ? new FormLinkNullable<IEmittanceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EmittanceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEmittanceGetter>.Null;
        #endregion
        #region MultiBoundReference
        private int? _MultiBoundReferenceLocation;
        public FormLinkNullable<IPlacedObjectGetter> MultiBoundReference => _MultiBoundReferenceLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MultiBoundReferenceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region IgnoredBySandbox
        private int? _IgnoredBySandboxLocation;
        public ReadOnlyMemorySlice<Byte>? IgnoredBySandbox => _IgnoredBySandboxLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _IgnoredBySandboxLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IFormLink<ILocationReferenceTypeGetter>>? LocationRefTypes { get; private set; }
        #region LocationReference
        private int? _LocationReferenceLocation;
        public FormLinkNullable<ILocationRecordGetter> LocationReference => _LocationReferenceLocation.HasValue ? new FormLinkNullable<ILocationRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LocationReferenceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationRecordGetter>.Null;
        #endregion
        public IReadOnlyList<Single>? DistantLodData { get; private set; }
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Placement
        private RangeInt32? _PlacementLocation;
        public IPlacementGetter? Placement => _PlacementLocation.HasValue ? PlacementBinaryOverlay.PlacementFactory(new OverlayStream(_data.Slice(_PlacementLocation!.Value.Min), _package), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected APlacedTrapBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }


        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)APlacedTrap_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    TrapFormCustomParse(
                        stream,
                        offset);
                    return null;
                }
                case RecordTypeInts.XEZN:
                {
                    _EncounterZoneLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XOWN:
                case RecordTypeInts.XRNK:
                {
                    this.Ownership = OwnershipBinaryOverlay.OwnershipFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)APlacedTrap_FieldIndex.Ownership;
                }
                case RecordTypeInts.XHTW:
                {
                    _HeadTrackingWeightLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XFVC:
                {
                    _FavorCostLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.FavorCost;
                }
                case RecordTypeInts.XPWR:
                {
                    this.Reflections = BinaryOverlayList.FactoryByArray<WaterReflectionBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => WaterReflectionBinaryOverlay.WaterReflectionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)APlacedTrap_FieldIndex.Reflections;
                }
                case RecordTypeInts.XLKR:
                {
                    this.LinkedReferences = BinaryOverlayList.FactoryByArray<LinkedReferencesBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => LinkedReferencesBinaryOverlay.LinkedReferencesFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)APlacedTrap_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XAPD:
                {
                    this.ActivateParents = ActivateParentsBinaryOverlay.ActivateParentsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)APlacedTrap_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XESP:
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)APlacedTrap_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XEMI:
                {
                    _EmittanceLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.Emittance;
                }
                case RecordTypeInts.XMBR:
                {
                    _MultiBoundReferenceLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.MultiBoundReference;
                }
                case RecordTypeInts.XIS2:
                {
                    _IgnoredBySandboxLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.IgnoredBySandbox;
                }
                case RecordTypeInts.XLRT:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.LocationRefTypes = BinaryOverlayList.FactoryByStartIndex<IFormLink<ILocationReferenceTypeGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<ILocationReferenceTypeGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return (int)APlacedTrap_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XLRL:
                {
                    _LocationReferenceLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XLOD:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.DistantLodData = BinaryOverlayList.FactoryByStartIndex<Single>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => s.Float());
                    stream.Position += subLen;
                    return (int)APlacedTrap_FieldIndex.DistantLodData;
                }
                case RecordTypeInts.XSCL:
                {
                    _ScaleLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    _PlacementLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)APlacedTrap_FieldIndex.Placement;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            APlacedTrapMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAPlacedTrapGetter rhs)) return false;
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAPlacedTrapGetter? obj)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

