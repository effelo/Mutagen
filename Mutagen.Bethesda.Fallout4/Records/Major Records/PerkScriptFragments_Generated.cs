/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PerkScriptFragments :
        IPerkScriptFragments,
        ILoquiObjectSetter<PerkScriptFragments>,
        IEquatable<IPerkScriptFragmentsGetter>
    {
        #region Ctor
        public PerkScriptFragments()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown
        public SByte Unknown { get; set; } = default;
        #endregion
        #region FileName
        public String FileName { get; set; } = string.Empty;
        #endregion
        #region Fragments
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IndexedScriptFragment> _Fragments = new ExtendedList<IndexedScriptFragment>();
        public ExtendedList<IndexedScriptFragment> Fragments
        {
            get => this._Fragments;
            protected set => this._Fragments = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IIndexedScriptFragmentGetter> IPerkScriptFragmentsGetter.Fragments => _Fragments;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkScriptFragmentsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPerkScriptFragmentsGetter rhs)) return false;
            return ((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPerkScriptFragmentsGetter? obj)
        {
            return ((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Unknown = initialValue;
                this.FileName = initialValue;
                this.Fragments = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IndexedScriptFragment.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, IndexedScriptFragment.Mask<TItem>?>>());
            }

            public Mask(
                TItem Unknown,
                TItem FileName,
                TItem Fragments)
            {
                this.Unknown = Unknown;
                this.FileName = FileName;
                this.Fragments = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IndexedScriptFragment.Mask<TItem>?>>?>(Fragments, Enumerable.Empty<MaskItemIndexed<TItem, IndexedScriptFragment.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Unknown;
            public TItem FileName;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IndexedScriptFragment.Mask<TItem>?>>?>? Fragments;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.FileName, rhs.FileName)) return false;
                if (!object.Equals(this.Fragments, rhs.Fragments)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Unknown);
                hash.Add(this.FileName);
                hash.Add(this.Fragments);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Unknown)) return false;
                if (!eval(this.FileName)) return false;
                if (this.Fragments != null)
                {
                    if (!eval(this.Fragments.Overall)) return false;
                    if (this.Fragments.Specific != null)
                    {
                        foreach (var item in this.Fragments.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Unknown)) return true;
                if (eval(this.FileName)) return true;
                if (this.Fragments != null)
                {
                    if (eval(this.Fragments.Overall)) return true;
                    if (this.Fragments.Specific != null)
                    {
                        foreach (var item in this.Fragments.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PerkScriptFragments.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Unknown = eval(this.Unknown);
                obj.FileName = eval(this.FileName);
                if (Fragments != null)
                {
                    obj.Fragments = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IndexedScriptFragment.Mask<R>?>>?>(eval(this.Fragments.Overall), Enumerable.Empty<MaskItemIndexed<R, IndexedScriptFragment.Mask<R>?>>());
                    if (Fragments.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IndexedScriptFragment.Mask<R>?>>();
                        obj.Fragments.Specific = l;
                        foreach (var item in Fragments.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, IndexedScriptFragment.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, IndexedScriptFragment.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PerkScriptFragments.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PerkScriptFragments.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PerkScriptFragments.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.FileName ?? true)
                    {
                        fg.AppendItem(FileName, "FileName");
                    }
                    if ((printMask?.Fragments?.Overall ?? true)
                        && Fragments.TryGet(out var FragmentsItem))
                    {
                        fg.AppendLine("Fragments =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(FragmentsItem.Overall);
                            if (FragmentsItem.Specific != null)
                            {
                                foreach (var subItem in FragmentsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Unknown;
            public Exception? FileName;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IndexedScriptFragment.ErrorMask?>>?>? Fragments;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PerkScriptFragments_FieldIndex enu = (PerkScriptFragments_FieldIndex)index;
                switch (enu)
                {
                    case PerkScriptFragments_FieldIndex.Unknown:
                        return Unknown;
                    case PerkScriptFragments_FieldIndex.FileName:
                        return FileName;
                    case PerkScriptFragments_FieldIndex.Fragments:
                        return Fragments;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PerkScriptFragments_FieldIndex enu = (PerkScriptFragments_FieldIndex)index;
                switch (enu)
                {
                    case PerkScriptFragments_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case PerkScriptFragments_FieldIndex.FileName:
                        this.FileName = ex;
                        break;
                    case PerkScriptFragments_FieldIndex.Fragments:
                        this.Fragments = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IndexedScriptFragment.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PerkScriptFragments_FieldIndex enu = (PerkScriptFragments_FieldIndex)index;
                switch (enu)
                {
                    case PerkScriptFragments_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case PerkScriptFragments_FieldIndex.FileName:
                        this.FileName = (Exception?)obj;
                        break;
                    case PerkScriptFragments_FieldIndex.Fragments:
                        this.Fragments = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IndexedScriptFragment.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Unknown != null) return true;
                if (FileName != null) return true;
                if (Fragments != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(FileName, "FileName");
                if (Fragments.TryGet(out var FragmentsItem))
                {
                    fg.AppendLine("Fragments =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(FragmentsItem.Overall);
                        if (FragmentsItem.Specific != null)
                        {
                            foreach (var subItem in FragmentsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.FileName = this.FileName.Combine(rhs.FileName);
                ret.Fragments = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IndexedScriptFragment.ErrorMask?>>?>(ExceptionExt.Combine(this.Fragments?.Overall, rhs.Fragments?.Overall), ExceptionExt.Combine(this.Fragments?.Specific, rhs.Fragments?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Unknown;
            public bool FileName;
            public IndexedScriptFragment.TranslationMask? Fragments;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Unknown = defaultOn;
                this.FileName = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Unknown, null));
                ret.Add((FileName, null));
                ret.Add((Fragments == null ? DefaultOn : !Fragments.GetCrystal().CopyNothing, Fragments?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PerkScriptFragmentsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkScriptFragmentsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static PerkScriptFragments CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkScriptFragments();
            ((PerkScriptFragmentsSetterCommon)((IPerkScriptFragmentsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PerkScriptFragments item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PerkScriptFragmentsSetterCommon)((IPerkScriptFragmentsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PerkScriptFragments GetNew()
        {
            return new PerkScriptFragments();
        }

    }
    #endregion

    #region Interface
    public partial interface IPerkScriptFragments :
        IPerkScriptFragmentsGetter,
        ILoquiObjectSetter<IPerkScriptFragments>
    {
        new SByte Unknown { get; set; }
        new String FileName { get; set; }
        new ExtendedList<IndexedScriptFragment> Fragments { get; }
    }

    public partial interface IPerkScriptFragmentsGetter :
        ILoquiObject,
        ILoquiObject<IPerkScriptFragmentsGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => PerkScriptFragments_Registration.Instance;
        SByte Unknown { get; }
        String FileName { get; }
        IReadOnlyList<IIndexedScriptFragmentGetter> Fragments { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PerkScriptFragmentsMixIn
    {
        public static void Clear(this IPerkScriptFragments item)
        {
            ((PerkScriptFragmentsSetterCommon)((IPerkScriptFragmentsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PerkScriptFragments.Mask<bool> GetEqualsMask(
            this IPerkScriptFragmentsGetter item,
            IPerkScriptFragmentsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPerkScriptFragmentsGetter item,
            string? name = null,
            PerkScriptFragments.Mask<bool>? printMask = null)
        {
            return ((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPerkScriptFragmentsGetter item,
            FileGeneration fg,
            string? name = null,
            PerkScriptFragments.Mask<bool>? printMask = null)
        {
            ((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPerkScriptFragmentsGetter item,
            IPerkScriptFragmentsGetter rhs)
        {
            return ((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPerkScriptFragments lhs,
            IPerkScriptFragmentsGetter rhs)
        {
            ((PerkScriptFragmentsSetterTranslationCommon)((IPerkScriptFragmentsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPerkScriptFragments lhs,
            IPerkScriptFragmentsGetter rhs,
            PerkScriptFragments.TranslationMask? copyMask = null)
        {
            ((PerkScriptFragmentsSetterTranslationCommon)((IPerkScriptFragmentsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPerkScriptFragments lhs,
            IPerkScriptFragmentsGetter rhs,
            out PerkScriptFragments.ErrorMask errorMask,
            PerkScriptFragments.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PerkScriptFragmentsSetterTranslationCommon)((IPerkScriptFragmentsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PerkScriptFragments.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPerkScriptFragments lhs,
            IPerkScriptFragmentsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PerkScriptFragmentsSetterTranslationCommon)((IPerkScriptFragmentsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PerkScriptFragments DeepCopy(
            this IPerkScriptFragmentsGetter item,
            PerkScriptFragments.TranslationMask? copyMask = null)
        {
            return ((PerkScriptFragmentsSetterTranslationCommon)((IPerkScriptFragmentsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PerkScriptFragments DeepCopy(
            this IPerkScriptFragmentsGetter item,
            out PerkScriptFragments.ErrorMask errorMask,
            PerkScriptFragments.TranslationMask? copyMask = null)
        {
            return ((PerkScriptFragmentsSetterTranslationCommon)((IPerkScriptFragmentsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PerkScriptFragments DeepCopy(
            this IPerkScriptFragmentsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PerkScriptFragmentsSetterTranslationCommon)((IPerkScriptFragmentsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPerkScriptFragments item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkScriptFragmentsSetterCommon)((IPerkScriptFragmentsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PerkScriptFragments_FieldIndex
    {
        Unknown = 0,
        FileName = 1,
        Fragments = 2,
    }
    #endregion

    #region Registration
    public partial class PerkScriptFragments_Registration : ILoquiRegistration
    {
        public static readonly PerkScriptFragments_Registration Instance = new PerkScriptFragments_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 430,
            version: 0);

        public const string GUID = "111c1431-8ddc-44ab-83e1-8acac57ea4f2";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(PerkScriptFragments.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PerkScriptFragments.ErrorMask);

        public static readonly Type ClassType = typeof(PerkScriptFragments);

        public static readonly Type GetterType = typeof(IPerkScriptFragmentsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPerkScriptFragments);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PerkScriptFragments";

        public const string Name = "PerkScriptFragments";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(PerkScriptFragmentsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PerkScriptFragmentsSetterCommon
    {
        public static readonly PerkScriptFragmentsSetterCommon Instance = new PerkScriptFragmentsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPerkScriptFragments item)
        {
            ClearPartial();
            item.Unknown = default;
            item.FileName = string.Empty;
            item.Fragments.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IPerkScriptFragments obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPerkScriptFragments item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PerkScriptFragmentsBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class PerkScriptFragmentsCommon
    {
        public static readonly PerkScriptFragmentsCommon Instance = new PerkScriptFragmentsCommon();

        public PerkScriptFragments.Mask<bool> GetEqualsMask(
            IPerkScriptFragmentsGetter item,
            IPerkScriptFragmentsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PerkScriptFragments.Mask<bool>(false);
            ((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPerkScriptFragmentsGetter item,
            IPerkScriptFragmentsGetter rhs,
            PerkScriptFragments.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.FileName = string.Equals(item.FileName, rhs.FileName);
            ret.Fragments = item.Fragments.CollectionEqualsHelper(
                rhs.Fragments,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IPerkScriptFragmentsGetter item,
            string? name = null,
            PerkScriptFragments.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPerkScriptFragmentsGetter item,
            FileGeneration fg,
            string? name = null,
            PerkScriptFragments.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PerkScriptFragments =>");
            }
            else
            {
                fg.AppendLine($"{name} (PerkScriptFragments) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPerkScriptFragmentsGetter item,
            FileGeneration fg,
            PerkScriptFragments.Mask<bool>? printMask = null)
        {
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.FileName ?? true)
            {
                fg.AppendItem(item.FileName, "FileName");
            }
            if (printMask?.Fragments?.Overall ?? true)
            {
                fg.AppendLine("Fragments =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Fragments)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPerkScriptFragmentsGetter? lhs,
            IPerkScriptFragmentsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!string.Equals(lhs.FileName, rhs.FileName)) return false;
            if (!lhs.Fragments.SequenceEqualNullable(rhs.Fragments)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IPerkScriptFragmentsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Unknown);
            hash.Add(item.FileName);
            hash.Add(item.Fragments);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PerkScriptFragments.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPerkScriptFragmentsGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class PerkScriptFragmentsSetterTranslationCommon
    {
        public static readonly PerkScriptFragmentsSetterTranslationCommon Instance = new PerkScriptFragmentsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPerkScriptFragments item,
            IPerkScriptFragmentsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PerkScriptFragments_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)PerkScriptFragments_FieldIndex.FileName) ?? true))
            {
                item.FileName = rhs.FileName;
            }
            if ((copyMask?.GetShouldTranslate((int)PerkScriptFragments_FieldIndex.Fragments) ?? true))
            {
                errorMask?.PushIndex((int)PerkScriptFragments_FieldIndex.Fragments);
                try
                {
                    item.Fragments.SetTo(
                        rhs.Fragments
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public PerkScriptFragments DeepCopy(
            IPerkScriptFragmentsGetter item,
            PerkScriptFragments.TranslationMask? copyMask = null)
        {
            PerkScriptFragments ret = (PerkScriptFragments)((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)item).CommonInstance()!).GetNew();
            ((PerkScriptFragmentsSetterTranslationCommon)((IPerkScriptFragmentsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PerkScriptFragments DeepCopy(
            IPerkScriptFragmentsGetter item,
            out PerkScriptFragments.ErrorMask errorMask,
            PerkScriptFragments.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PerkScriptFragments ret = (PerkScriptFragments)((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)item).CommonInstance()!).GetNew();
            ((PerkScriptFragmentsSetterTranslationCommon)((IPerkScriptFragmentsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PerkScriptFragments.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PerkScriptFragments DeepCopy(
            IPerkScriptFragmentsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PerkScriptFragments ret = (PerkScriptFragments)((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)item).CommonInstance()!).GetNew();
            ((PerkScriptFragmentsSetterTranslationCommon)((IPerkScriptFragmentsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PerkScriptFragments
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkScriptFragments_Registration.Instance;
        public static PerkScriptFragments_Registration Registration => PerkScriptFragments_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PerkScriptFragmentsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PerkScriptFragmentsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PerkScriptFragmentsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPerkScriptFragmentsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPerkScriptFragmentsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPerkScriptFragmentsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PerkScriptFragmentsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static PerkScriptFragmentsBinaryWriteTranslation Instance = new PerkScriptFragmentsBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPerkScriptFragmentsGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Unknown);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FileName,
                binaryType: StringBinaryType.PrependLengthUShort);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IIndexedScriptFragmentGetter>.Instance.Write(
                writer: writer,
                items: item.Fragments,
                countLengthLength: 2,
                transl: (MutagenWriter subWriter, IIndexedScriptFragmentGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((IndexedScriptFragmentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IPerkScriptFragmentsGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkScriptFragmentsGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PerkScriptFragmentsBinaryCreateTranslation
    {
        public readonly static PerkScriptFragmentsBinaryCreateTranslation Instance = new PerkScriptFragmentsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPerkScriptFragments item,
            MutagenFrame frame)
        {
            item.Unknown = frame.ReadInt8();
            item.FileName = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                frame: frame,
                stringBinaryType: StringBinaryType.PrependLengthUShort);
            item.Fragments.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<IndexedScriptFragment>.Instance.Parse(
                    amount: frame.ReadUInt16(),
                    frame: frame,
                    transl: IndexedScriptFragment.TryCreateFromBinary));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PerkScriptFragmentsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPerkScriptFragmentsGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkScriptFragmentsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PerkScriptFragmentsBinaryOverlay :
        BinaryOverlay,
        IPerkScriptFragmentsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkScriptFragments_Registration.Instance;
        public static PerkScriptFragments_Registration Registration => PerkScriptFragments_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PerkScriptFragmentsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PerkScriptFragmentsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPerkScriptFragmentsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPerkScriptFragmentsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPerkScriptFragmentsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PerkScriptFragmentsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkScriptFragmentsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public SByte Unknown => (sbyte)_data.Slice(0x0, 0x1)[0];
        #region FileName
        public String FileName => BinaryStringUtility.ParsePrependedString(_data.Slice(0x1), lengthLength: 2);
        protected int FileNameEndingPos;
        #endregion
        #region Fragments
        protected int FragmentsEndingPos;
        partial void CustomFragmentsEndPos();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PerkScriptFragmentsBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PerkScriptFragmentsBinaryOverlay PerkScriptFragmentsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkScriptFragmentsBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FileNameEndingPos = 0x1 + BinaryPrimitives.ReadUInt16LittleEndian(ret._data.Slice(0x1)) + 2;
            ret.CustomFragmentsEndPos();
            stream.Position += ret.FragmentsEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static PerkScriptFragmentsBinaryOverlay PerkScriptFragmentsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PerkScriptFragmentsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkScriptFragmentsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPerkScriptFragmentsGetter rhs)) return false;
            return ((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPerkScriptFragmentsGetter? obj)
        {
            return ((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PerkScriptFragmentsCommon)((IPerkScriptFragmentsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

