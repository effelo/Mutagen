/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Worldspace :
        Fallout4MajorRecord,
        IWorldspaceInternal,
        ILoquiObjectSetter<Worldspace>,
        IEquatable<IWorldspaceGetter>
    {
        #region Ctor
        protected Worldspace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region LargeReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WorldspaceGridReference> _LargeReferences = new ExtendedList<WorldspaceGridReference>();
        public ExtendedList<WorldspaceGridReference> LargeReferences
        {
            get => this._LargeReferences;
            protected set => this._LargeReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWorldspaceGridReferenceGetter> IWorldspaceGetter.LargeReferences => _LargeReferences;
        #endregion

        #endregion
        #region MaxHeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WorldspaceMaxHeight? _MaxHeight;
        public WorldspaceMaxHeight? MaxHeight
        {
            get => _MaxHeight;
            set => _MaxHeight = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWorldspaceMaxHeightGetter? IWorldspaceGetter.MaxHeight => this.MaxHeight;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IWorldspaceGetter.Name => this.Name;
        #endregion
        #region FixedDimensionsCenterCell
        public P2Int16? FixedDimensionsCenterCell { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P2Int16? IWorldspaceGetter.FixedDimensionsCenterCell => this.FixedDimensionsCenterCell;
        #endregion
        #region InteriorLighting
        public FormLinkNullable<ILightingTemplateGetter> InteriorLighting { get; set; } = new FormLinkNullable<ILightingTemplateGetter>();
        #endregion
        #region EncounterZone
        public FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; } = new FormLinkNullable<IEncounterZoneGetter>();
        #endregion
        #region Location
        public FormLinkNullable<ILocationGetter> Location { get; set; } = new FormLinkNullable<ILocationGetter>();
        #endregion
        #region Parent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WorldspaceParent? _Parent;
        public WorldspaceParent? Parent
        {
            get => _Parent;
            set => _Parent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWorldspaceParentGetter? IWorldspaceGetter.Parent => this.Parent;
        #endregion
        #region Climate
        public FormLinkNullable<IClimateGetter> Climate { get; set; } = new FormLinkNullable<IClimateGetter>();
        #endregion
        #region Water
        public FormLinkNullable<IWaterGetter> Water { get; set; } = new FormLinkNullable<IWaterGetter>();
        #endregion
        #region LodWater
        public FormLinkNullable<IWaterGetter> LodWater { get; set; } = new FormLinkNullable<IWaterGetter>();
        #endregion
        #region LodWaterHeight
        public Single? LodWaterHeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IWorldspaceGetter.LodWaterHeight => this.LodWaterHeight;
        #endregion
        #region LandDefaults
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WorldspaceLandDefaults? _LandDefaults;
        public WorldspaceLandDefaults? LandDefaults
        {
            get => _LandDefaults;
            set => _LandDefaults = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWorldspaceLandDefaultsGetter? IWorldspaceGetter.LandDefaults => this.LandDefaults;
        #endregion
        #region MapImage
        public String? MapImage { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWorldspaceGetter.MapImage => this.MapImage;
        #endregion
        #region CloudModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _CloudModel;
        public Model? CloudModel
        {
            get => _CloudModel;
            set => _CloudModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IWorldspaceGetter.CloudModel => this.CloudModel;
        #endregion
        #region MapData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WorldspaceMap? _MapData;
        public WorldspaceMap? MapData
        {
            get => _MapData;
            set => _MapData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWorldspaceMapGetter? IWorldspaceGetter.MapData => this.MapData;
        #endregion
        #region MapOffset
        public WorldspaceMapOffset MapOffset { get; set; } = new WorldspaceMapOffset();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWorldspaceMapOffsetGetter IWorldspaceGetter.MapOffset => MapOffset;
        #endregion
        #region DistantLodMultiplier
        public Single? DistantLodMultiplier { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IWorldspaceGetter.DistantLodMultiplier => this.DistantLodMultiplier;
        #endregion
        #region Flags
        public Worldspace.Flag Flags { get; set; } = default;
        #endregion
        #region ObjectBounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WorldspaceObjectBounds? _ObjectBounds;
        public WorldspaceObjectBounds? ObjectBounds
        {
            get => _ObjectBounds;
            set => _ObjectBounds = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWorldspaceObjectBoundsGetter? IWorldspaceGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #region Music
        public FormLinkNullable<IMusicTypeGetter> Music { get; set; } = new FormLinkNullable<IMusicTypeGetter>();
        #endregion
        #region CanopyShadow
        public String? CanopyShadow { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWorldspaceGetter.CanopyShadow => this.CanopyShadow;
        #endregion
        #region WaterNoiseTexture
        public String? WaterNoiseTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWorldspaceGetter.WaterNoiseTexture => this.WaterNoiseTexture;
        #endregion
        #region HdLodDiffuseTexture
        public String? HdLodDiffuseTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWorldspaceGetter.HdLodDiffuseTexture => this.HdLodDiffuseTexture;
        #endregion
        #region HdLodNormalTexture
        public String? HdLodNormalTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWorldspaceGetter.HdLodNormalTexture => this.HdLodNormalTexture;
        #endregion
        #region WaterEnvironmentMap
        public String? WaterEnvironmentMap { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWorldspaceGetter.WaterEnvironmentMap => this.WaterEnvironmentMap;
        #endregion
        #region OffsetData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _OffsetData;
        public MemorySlice<Byte>? OffsetData
        {
            get => this._OffsetData;
            set => this._OffsetData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWorldspaceGetter.OffsetData => this.OffsetData;
        #endregion
        #region TopCell
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Cell? _TopCell;
        public Cell? TopCell
        {
            get => _TopCell;
            set => _TopCell = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellGetter? IWorldspaceGetter.TopCell => this.TopCell;
        #endregion
        #region SubCellsTimestamp
        public Int32 SubCellsTimestamp { get; set; } = default;
        #endregion
        #region SubCellsUnknown
        public Int32 SubCellsUnknown { get; set; } = default;
        #endregion
        #region SubCells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WorldspaceBlock> _SubCells = new ExtendedList<WorldspaceBlock>();
        public ExtendedList<WorldspaceBlock> SubCells
        {
            get => this._SubCells;
            protected set => this._SubCells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWorldspaceBlockGetter> IWorldspaceGetter.SubCells => _SubCells;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWorldspaceGetter rhs)) return false;
            return ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IWorldspaceGetter? obj)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.LargeReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceGridReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WorldspaceGridReference.Mask<TItem>?>>());
                this.MaxHeight = new MaskItem<TItem, WorldspaceMaxHeight.Mask<TItem>?>(initialValue, new WorldspaceMaxHeight.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.FixedDimensionsCenterCell = initialValue;
                this.InteriorLighting = initialValue;
                this.EncounterZone = initialValue;
                this.Location = initialValue;
                this.Parent = new MaskItem<TItem, WorldspaceParent.Mask<TItem>?>(initialValue, new WorldspaceParent.Mask<TItem>(initialValue));
                this.Climate = initialValue;
                this.Water = initialValue;
                this.LodWater = initialValue;
                this.LodWaterHeight = initialValue;
                this.LandDefaults = new MaskItem<TItem, WorldspaceLandDefaults.Mask<TItem>?>(initialValue, new WorldspaceLandDefaults.Mask<TItem>(initialValue));
                this.MapImage = initialValue;
                this.CloudModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.MapData = new MaskItem<TItem, WorldspaceMap.Mask<TItem>?>(initialValue, new WorldspaceMap.Mask<TItem>(initialValue));
                this.MapOffset = new MaskItem<TItem, WorldspaceMapOffset.Mask<TItem>?>(initialValue, new WorldspaceMapOffset.Mask<TItem>(initialValue));
                this.DistantLodMultiplier = initialValue;
                this.Flags = initialValue;
                this.ObjectBounds = new MaskItem<TItem, WorldspaceObjectBounds.Mask<TItem>?>(initialValue, new WorldspaceObjectBounds.Mask<TItem>(initialValue));
                this.Music = initialValue;
                this.CanopyShadow = initialValue;
                this.WaterNoiseTexture = initialValue;
                this.HdLodDiffuseTexture = initialValue;
                this.HdLodNormalTexture = initialValue;
                this.WaterEnvironmentMap = initialValue;
                this.OffsetData = initialValue;
                this.TopCell = new MaskItem<TItem, Cell.Mask<TItem>?>(initialValue, new Cell.Mask<TItem>(initialValue));
                this.SubCellsTimestamp = initialValue;
                this.SubCellsUnknown = initialValue;
                this.SubCells = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem LargeReferences,
                TItem MaxHeight,
                TItem Name,
                TItem FixedDimensionsCenterCell,
                TItem InteriorLighting,
                TItem EncounterZone,
                TItem Location,
                TItem Parent,
                TItem Climate,
                TItem Water,
                TItem LodWater,
                TItem LodWaterHeight,
                TItem LandDefaults,
                TItem MapImage,
                TItem CloudModel,
                TItem MapData,
                TItem MapOffset,
                TItem DistantLodMultiplier,
                TItem Flags,
                TItem ObjectBounds,
                TItem Music,
                TItem CanopyShadow,
                TItem WaterNoiseTexture,
                TItem HdLodDiffuseTexture,
                TItem HdLodNormalTexture,
                TItem WaterEnvironmentMap,
                TItem OffsetData,
                TItem TopCell,
                TItem SubCellsTimestamp,
                TItem SubCellsUnknown,
                TItem SubCells)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.LargeReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceGridReference.Mask<TItem>?>>?>(LargeReferences, Enumerable.Empty<MaskItemIndexed<TItem, WorldspaceGridReference.Mask<TItem>?>>());
                this.MaxHeight = new MaskItem<TItem, WorldspaceMaxHeight.Mask<TItem>?>(MaxHeight, new WorldspaceMaxHeight.Mask<TItem>(MaxHeight));
                this.Name = Name;
                this.FixedDimensionsCenterCell = FixedDimensionsCenterCell;
                this.InteriorLighting = InteriorLighting;
                this.EncounterZone = EncounterZone;
                this.Location = Location;
                this.Parent = new MaskItem<TItem, WorldspaceParent.Mask<TItem>?>(Parent, new WorldspaceParent.Mask<TItem>(Parent));
                this.Climate = Climate;
                this.Water = Water;
                this.LodWater = LodWater;
                this.LodWaterHeight = LodWaterHeight;
                this.LandDefaults = new MaskItem<TItem, WorldspaceLandDefaults.Mask<TItem>?>(LandDefaults, new WorldspaceLandDefaults.Mask<TItem>(LandDefaults));
                this.MapImage = MapImage;
                this.CloudModel = new MaskItem<TItem, Model.Mask<TItem>?>(CloudModel, new Model.Mask<TItem>(CloudModel));
                this.MapData = new MaskItem<TItem, WorldspaceMap.Mask<TItem>?>(MapData, new WorldspaceMap.Mask<TItem>(MapData));
                this.MapOffset = new MaskItem<TItem, WorldspaceMapOffset.Mask<TItem>?>(MapOffset, new WorldspaceMapOffset.Mask<TItem>(MapOffset));
                this.DistantLodMultiplier = DistantLodMultiplier;
                this.Flags = Flags;
                this.ObjectBounds = new MaskItem<TItem, WorldspaceObjectBounds.Mask<TItem>?>(ObjectBounds, new WorldspaceObjectBounds.Mask<TItem>(ObjectBounds));
                this.Music = Music;
                this.CanopyShadow = CanopyShadow;
                this.WaterNoiseTexture = WaterNoiseTexture;
                this.HdLodDiffuseTexture = HdLodDiffuseTexture;
                this.HdLodNormalTexture = HdLodNormalTexture;
                this.WaterEnvironmentMap = WaterEnvironmentMap;
                this.OffsetData = OffsetData;
                this.TopCell = new MaskItem<TItem, Cell.Mask<TItem>?>(TopCell, new Cell.Mask<TItem>(TopCell));
                this.SubCellsTimestamp = SubCellsTimestamp;
                this.SubCellsUnknown = SubCellsUnknown;
                this.SubCells = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>?>(SubCells, Enumerable.Empty<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceGridReference.Mask<TItem>?>>?>? LargeReferences;
            public MaskItem<TItem, WorldspaceMaxHeight.Mask<TItem>?>? MaxHeight { get; set; }
            public TItem Name;
            public TItem FixedDimensionsCenterCell;
            public TItem InteriorLighting;
            public TItem EncounterZone;
            public TItem Location;
            public MaskItem<TItem, WorldspaceParent.Mask<TItem>?>? Parent { get; set; }
            public TItem Climate;
            public TItem Water;
            public TItem LodWater;
            public TItem LodWaterHeight;
            public MaskItem<TItem, WorldspaceLandDefaults.Mask<TItem>?>? LandDefaults { get; set; }
            public TItem MapImage;
            public MaskItem<TItem, Model.Mask<TItem>?>? CloudModel { get; set; }
            public MaskItem<TItem, WorldspaceMap.Mask<TItem>?>? MapData { get; set; }
            public MaskItem<TItem, WorldspaceMapOffset.Mask<TItem>?>? MapOffset { get; set; }
            public TItem DistantLodMultiplier;
            public TItem Flags;
            public MaskItem<TItem, WorldspaceObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Music;
            public TItem CanopyShadow;
            public TItem WaterNoiseTexture;
            public TItem HdLodDiffuseTexture;
            public TItem HdLodNormalTexture;
            public TItem WaterEnvironmentMap;
            public TItem OffsetData;
            public MaskItem<TItem, Cell.Mask<TItem>?>? TopCell { get; set; }
            public TItem SubCellsTimestamp;
            public TItem SubCellsUnknown;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>?>? SubCells;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.LargeReferences, rhs.LargeReferences)) return false;
                if (!object.Equals(this.MaxHeight, rhs.MaxHeight)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.FixedDimensionsCenterCell, rhs.FixedDimensionsCenterCell)) return false;
                if (!object.Equals(this.InteriorLighting, rhs.InteriorLighting)) return false;
                if (!object.Equals(this.EncounterZone, rhs.EncounterZone)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.Climate, rhs.Climate)) return false;
                if (!object.Equals(this.Water, rhs.Water)) return false;
                if (!object.Equals(this.LodWater, rhs.LodWater)) return false;
                if (!object.Equals(this.LodWaterHeight, rhs.LodWaterHeight)) return false;
                if (!object.Equals(this.LandDefaults, rhs.LandDefaults)) return false;
                if (!object.Equals(this.MapImage, rhs.MapImage)) return false;
                if (!object.Equals(this.CloudModel, rhs.CloudModel)) return false;
                if (!object.Equals(this.MapData, rhs.MapData)) return false;
                if (!object.Equals(this.MapOffset, rhs.MapOffset)) return false;
                if (!object.Equals(this.DistantLodMultiplier, rhs.DistantLodMultiplier)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Music, rhs.Music)) return false;
                if (!object.Equals(this.CanopyShadow, rhs.CanopyShadow)) return false;
                if (!object.Equals(this.WaterNoiseTexture, rhs.WaterNoiseTexture)) return false;
                if (!object.Equals(this.HdLodDiffuseTexture, rhs.HdLodDiffuseTexture)) return false;
                if (!object.Equals(this.HdLodNormalTexture, rhs.HdLodNormalTexture)) return false;
                if (!object.Equals(this.WaterEnvironmentMap, rhs.WaterEnvironmentMap)) return false;
                if (!object.Equals(this.OffsetData, rhs.OffsetData)) return false;
                if (!object.Equals(this.TopCell, rhs.TopCell)) return false;
                if (!object.Equals(this.SubCellsTimestamp, rhs.SubCellsTimestamp)) return false;
                if (!object.Equals(this.SubCellsUnknown, rhs.SubCellsUnknown)) return false;
                if (!object.Equals(this.SubCells, rhs.SubCells)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.LargeReferences);
                hash.Add(this.MaxHeight);
                hash.Add(this.Name);
                hash.Add(this.FixedDimensionsCenterCell);
                hash.Add(this.InteriorLighting);
                hash.Add(this.EncounterZone);
                hash.Add(this.Location);
                hash.Add(this.Parent);
                hash.Add(this.Climate);
                hash.Add(this.Water);
                hash.Add(this.LodWater);
                hash.Add(this.LodWaterHeight);
                hash.Add(this.LandDefaults);
                hash.Add(this.MapImage);
                hash.Add(this.CloudModel);
                hash.Add(this.MapData);
                hash.Add(this.MapOffset);
                hash.Add(this.DistantLodMultiplier);
                hash.Add(this.Flags);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Music);
                hash.Add(this.CanopyShadow);
                hash.Add(this.WaterNoiseTexture);
                hash.Add(this.HdLodDiffuseTexture);
                hash.Add(this.HdLodNormalTexture);
                hash.Add(this.WaterEnvironmentMap);
                hash.Add(this.OffsetData);
                hash.Add(this.TopCell);
                hash.Add(this.SubCellsTimestamp);
                hash.Add(this.SubCellsUnknown);
                hash.Add(this.SubCells);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.LargeReferences != null)
                {
                    if (!eval(this.LargeReferences.Overall)) return false;
                    if (this.LargeReferences.Specific != null)
                    {
                        foreach (var item in this.LargeReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (MaxHeight != null)
                {
                    if (!eval(this.MaxHeight.Overall)) return false;
                    if (this.MaxHeight.Specific != null && !this.MaxHeight.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.FixedDimensionsCenterCell)) return false;
                if (!eval(this.InteriorLighting)) return false;
                if (!eval(this.EncounterZone)) return false;
                if (!eval(this.Location)) return false;
                if (Parent != null)
                {
                    if (!eval(this.Parent.Overall)) return false;
                    if (this.Parent.Specific != null && !this.Parent.Specific.All(eval)) return false;
                }
                if (!eval(this.Climate)) return false;
                if (!eval(this.Water)) return false;
                if (!eval(this.LodWater)) return false;
                if (!eval(this.LodWaterHeight)) return false;
                if (LandDefaults != null)
                {
                    if (!eval(this.LandDefaults.Overall)) return false;
                    if (this.LandDefaults.Specific != null && !this.LandDefaults.Specific.All(eval)) return false;
                }
                if (!eval(this.MapImage)) return false;
                if (CloudModel != null)
                {
                    if (!eval(this.CloudModel.Overall)) return false;
                    if (this.CloudModel.Specific != null && !this.CloudModel.Specific.All(eval)) return false;
                }
                if (MapData != null)
                {
                    if (!eval(this.MapData.Overall)) return false;
                    if (this.MapData.Specific != null && !this.MapData.Specific.All(eval)) return false;
                }
                if (MapOffset != null)
                {
                    if (!eval(this.MapOffset.Overall)) return false;
                    if (this.MapOffset.Specific != null && !this.MapOffset.Specific.All(eval)) return false;
                }
                if (!eval(this.DistantLodMultiplier)) return false;
                if (!eval(this.Flags)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Music)) return false;
                if (!eval(this.CanopyShadow)) return false;
                if (!eval(this.WaterNoiseTexture)) return false;
                if (!eval(this.HdLodDiffuseTexture)) return false;
                if (!eval(this.HdLodNormalTexture)) return false;
                if (!eval(this.WaterEnvironmentMap)) return false;
                if (!eval(this.OffsetData)) return false;
                if (TopCell != null)
                {
                    if (!eval(this.TopCell.Overall)) return false;
                    if (this.TopCell.Specific != null && !this.TopCell.Specific.All(eval)) return false;
                }
                if (!eval(this.SubCellsTimestamp)) return false;
                if (!eval(this.SubCellsUnknown)) return false;
                if (this.SubCells != null)
                {
                    if (!eval(this.SubCells.Overall)) return false;
                    if (this.SubCells.Specific != null)
                    {
                        foreach (var item in this.SubCells.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.LargeReferences != null)
                {
                    if (eval(this.LargeReferences.Overall)) return true;
                    if (this.LargeReferences.Specific != null)
                    {
                        foreach (var item in this.LargeReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (MaxHeight != null)
                {
                    if (eval(this.MaxHeight.Overall)) return true;
                    if (this.MaxHeight.Specific != null && this.MaxHeight.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.FixedDimensionsCenterCell)) return true;
                if (eval(this.InteriorLighting)) return true;
                if (eval(this.EncounterZone)) return true;
                if (eval(this.Location)) return true;
                if (Parent != null)
                {
                    if (eval(this.Parent.Overall)) return true;
                    if (this.Parent.Specific != null && this.Parent.Specific.Any(eval)) return true;
                }
                if (eval(this.Climate)) return true;
                if (eval(this.Water)) return true;
                if (eval(this.LodWater)) return true;
                if (eval(this.LodWaterHeight)) return true;
                if (LandDefaults != null)
                {
                    if (eval(this.LandDefaults.Overall)) return true;
                    if (this.LandDefaults.Specific != null && this.LandDefaults.Specific.Any(eval)) return true;
                }
                if (eval(this.MapImage)) return true;
                if (CloudModel != null)
                {
                    if (eval(this.CloudModel.Overall)) return true;
                    if (this.CloudModel.Specific != null && this.CloudModel.Specific.Any(eval)) return true;
                }
                if (MapData != null)
                {
                    if (eval(this.MapData.Overall)) return true;
                    if (this.MapData.Specific != null && this.MapData.Specific.Any(eval)) return true;
                }
                if (MapOffset != null)
                {
                    if (eval(this.MapOffset.Overall)) return true;
                    if (this.MapOffset.Specific != null && this.MapOffset.Specific.Any(eval)) return true;
                }
                if (eval(this.DistantLodMultiplier)) return true;
                if (eval(this.Flags)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Music)) return true;
                if (eval(this.CanopyShadow)) return true;
                if (eval(this.WaterNoiseTexture)) return true;
                if (eval(this.HdLodDiffuseTexture)) return true;
                if (eval(this.HdLodNormalTexture)) return true;
                if (eval(this.WaterEnvironmentMap)) return true;
                if (eval(this.OffsetData)) return true;
                if (TopCell != null)
                {
                    if (eval(this.TopCell.Overall)) return true;
                    if (this.TopCell.Specific != null && this.TopCell.Specific.Any(eval)) return true;
                }
                if (eval(this.SubCellsTimestamp)) return true;
                if (eval(this.SubCellsUnknown)) return true;
                if (this.SubCells != null)
                {
                    if (eval(this.SubCells.Overall)) return true;
                    if (this.SubCells.Specific != null)
                    {
                        foreach (var item in this.SubCells.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Worldspace.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (LargeReferences != null)
                {
                    obj.LargeReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WorldspaceGridReference.Mask<R>?>>?>(eval(this.LargeReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, WorldspaceGridReference.Mask<R>?>>());
                    if (LargeReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WorldspaceGridReference.Mask<R>?>>();
                        obj.LargeReferences.Specific = l;
                        foreach (var item in LargeReferences.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WorldspaceGridReference.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WorldspaceGridReference.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.MaxHeight = this.MaxHeight == null ? null : new MaskItem<R, WorldspaceMaxHeight.Mask<R>?>(eval(this.MaxHeight.Overall), this.MaxHeight.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.FixedDimensionsCenterCell = eval(this.FixedDimensionsCenterCell);
                obj.InteriorLighting = eval(this.InteriorLighting);
                obj.EncounterZone = eval(this.EncounterZone);
                obj.Location = eval(this.Location);
                obj.Parent = this.Parent == null ? null : new MaskItem<R, WorldspaceParent.Mask<R>?>(eval(this.Parent.Overall), this.Parent.Specific?.Translate(eval));
                obj.Climate = eval(this.Climate);
                obj.Water = eval(this.Water);
                obj.LodWater = eval(this.LodWater);
                obj.LodWaterHeight = eval(this.LodWaterHeight);
                obj.LandDefaults = this.LandDefaults == null ? null : new MaskItem<R, WorldspaceLandDefaults.Mask<R>?>(eval(this.LandDefaults.Overall), this.LandDefaults.Specific?.Translate(eval));
                obj.MapImage = eval(this.MapImage);
                obj.CloudModel = this.CloudModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.CloudModel.Overall), this.CloudModel.Specific?.Translate(eval));
                obj.MapData = this.MapData == null ? null : new MaskItem<R, WorldspaceMap.Mask<R>?>(eval(this.MapData.Overall), this.MapData.Specific?.Translate(eval));
                obj.MapOffset = this.MapOffset == null ? null : new MaskItem<R, WorldspaceMapOffset.Mask<R>?>(eval(this.MapOffset.Overall), this.MapOffset.Specific?.Translate(eval));
                obj.DistantLodMultiplier = eval(this.DistantLodMultiplier);
                obj.Flags = eval(this.Flags);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, WorldspaceObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Music = eval(this.Music);
                obj.CanopyShadow = eval(this.CanopyShadow);
                obj.WaterNoiseTexture = eval(this.WaterNoiseTexture);
                obj.HdLodDiffuseTexture = eval(this.HdLodDiffuseTexture);
                obj.HdLodNormalTexture = eval(this.HdLodNormalTexture);
                obj.WaterEnvironmentMap = eval(this.WaterEnvironmentMap);
                obj.OffsetData = eval(this.OffsetData);
                obj.TopCell = this.TopCell == null ? null : new MaskItem<R, Cell.Mask<R>?>(eval(this.TopCell.Overall), this.TopCell.Specific?.Translate(eval));
                obj.SubCellsTimestamp = eval(this.SubCellsTimestamp);
                obj.SubCellsUnknown = eval(this.SubCellsUnknown);
                if (SubCells != null)
                {
                    obj.SubCells = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>>?>(eval(this.SubCells.Overall), Enumerable.Empty<MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>>());
                    if (SubCells.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>>();
                        obj.SubCells.Specific = l;
                        foreach (var item in SubCells.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Worldspace.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Worldspace.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Worldspace.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.LargeReferences?.Overall ?? true)
                        && LargeReferences.TryGet(out var LargeReferencesItem))
                    {
                        fg.AppendLine("LargeReferences =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LargeReferencesItem.Overall);
                            if (LargeReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LargeReferencesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.MaxHeight?.Overall ?? true)
                    {
                        MaxHeight?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.FixedDimensionsCenterCell ?? true)
                    {
                        fg.AppendItem(FixedDimensionsCenterCell, "FixedDimensionsCenterCell");
                    }
                    if (printMask?.InteriorLighting ?? true)
                    {
                        fg.AppendItem(InteriorLighting, "InteriorLighting");
                    }
                    if (printMask?.EncounterZone ?? true)
                    {
                        fg.AppendItem(EncounterZone, "EncounterZone");
                    }
                    if (printMask?.Location ?? true)
                    {
                        fg.AppendItem(Location, "Location");
                    }
                    if (printMask?.Parent?.Overall ?? true)
                    {
                        Parent?.ToString(fg);
                    }
                    if (printMask?.Climate ?? true)
                    {
                        fg.AppendItem(Climate, "Climate");
                    }
                    if (printMask?.Water ?? true)
                    {
                        fg.AppendItem(Water, "Water");
                    }
                    if (printMask?.LodWater ?? true)
                    {
                        fg.AppendItem(LodWater, "LodWater");
                    }
                    if (printMask?.LodWaterHeight ?? true)
                    {
                        fg.AppendItem(LodWaterHeight, "LodWaterHeight");
                    }
                    if (printMask?.LandDefaults?.Overall ?? true)
                    {
                        LandDefaults?.ToString(fg);
                    }
                    if (printMask?.MapImage ?? true)
                    {
                        fg.AppendItem(MapImage, "MapImage");
                    }
                    if (printMask?.CloudModel?.Overall ?? true)
                    {
                        CloudModel?.ToString(fg);
                    }
                    if (printMask?.MapData?.Overall ?? true)
                    {
                        MapData?.ToString(fg);
                    }
                    if (printMask?.MapOffset?.Overall ?? true)
                    {
                        MapOffset?.ToString(fg);
                    }
                    if (printMask?.DistantLodMultiplier ?? true)
                    {
                        fg.AppendItem(DistantLodMultiplier, "DistantLodMultiplier");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Music ?? true)
                    {
                        fg.AppendItem(Music, "Music");
                    }
                    if (printMask?.CanopyShadow ?? true)
                    {
                        fg.AppendItem(CanopyShadow, "CanopyShadow");
                    }
                    if (printMask?.WaterNoiseTexture ?? true)
                    {
                        fg.AppendItem(WaterNoiseTexture, "WaterNoiseTexture");
                    }
                    if (printMask?.HdLodDiffuseTexture ?? true)
                    {
                        fg.AppendItem(HdLodDiffuseTexture, "HdLodDiffuseTexture");
                    }
                    if (printMask?.HdLodNormalTexture ?? true)
                    {
                        fg.AppendItem(HdLodNormalTexture, "HdLodNormalTexture");
                    }
                    if (printMask?.WaterEnvironmentMap ?? true)
                    {
                        fg.AppendItem(WaterEnvironmentMap, "WaterEnvironmentMap");
                    }
                    if (printMask?.OffsetData ?? true)
                    {
                        fg.AppendItem(OffsetData, "OffsetData");
                    }
                    if (printMask?.TopCell?.Overall ?? true)
                    {
                        TopCell?.ToString(fg);
                    }
                    if (printMask?.SubCellsTimestamp ?? true)
                    {
                        fg.AppendItem(SubCellsTimestamp, "SubCellsTimestamp");
                    }
                    if (printMask?.SubCellsUnknown ?? true)
                    {
                        fg.AppendItem(SubCellsUnknown, "SubCellsUnknown");
                    }
                    if ((printMask?.SubCells?.Overall ?? true)
                        && SubCells.TryGet(out var SubCellsItem))
                    {
                        fg.AppendLine("SubCells =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SubCellsItem.Overall);
                            if (SubCellsItem.Specific != null)
                            {
                                foreach (var subItem in SubCellsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceGridReference.ErrorMask?>>?>? LargeReferences;
            public MaskItem<Exception?, WorldspaceMaxHeight.ErrorMask?>? MaxHeight;
            public Exception? Name;
            public Exception? FixedDimensionsCenterCell;
            public Exception? InteriorLighting;
            public Exception? EncounterZone;
            public Exception? Location;
            public MaskItem<Exception?, WorldspaceParent.ErrorMask?>? Parent;
            public Exception? Climate;
            public Exception? Water;
            public Exception? LodWater;
            public Exception? LodWaterHeight;
            public MaskItem<Exception?, WorldspaceLandDefaults.ErrorMask?>? LandDefaults;
            public Exception? MapImage;
            public MaskItem<Exception?, Model.ErrorMask?>? CloudModel;
            public MaskItem<Exception?, WorldspaceMap.ErrorMask?>? MapData;
            public MaskItem<Exception?, WorldspaceMapOffset.ErrorMask?>? MapOffset;
            public Exception? DistantLodMultiplier;
            public Exception? Flags;
            public MaskItem<Exception?, WorldspaceObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Music;
            public Exception? CanopyShadow;
            public Exception? WaterNoiseTexture;
            public Exception? HdLodDiffuseTexture;
            public Exception? HdLodNormalTexture;
            public Exception? WaterEnvironmentMap;
            public Exception? OffsetData;
            public MaskItem<Exception?, Cell.ErrorMask?>? TopCell;
            public Exception? SubCellsTimestamp;
            public Exception? SubCellsUnknown;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>? SubCells;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
                switch (enu)
                {
                    case Worldspace_FieldIndex.LargeReferences:
                        return LargeReferences;
                    case Worldspace_FieldIndex.MaxHeight:
                        return MaxHeight;
                    case Worldspace_FieldIndex.Name:
                        return Name;
                    case Worldspace_FieldIndex.FixedDimensionsCenterCell:
                        return FixedDimensionsCenterCell;
                    case Worldspace_FieldIndex.InteriorLighting:
                        return InteriorLighting;
                    case Worldspace_FieldIndex.EncounterZone:
                        return EncounterZone;
                    case Worldspace_FieldIndex.Location:
                        return Location;
                    case Worldspace_FieldIndex.Parent:
                        return Parent;
                    case Worldspace_FieldIndex.Climate:
                        return Climate;
                    case Worldspace_FieldIndex.Water:
                        return Water;
                    case Worldspace_FieldIndex.LodWater:
                        return LodWater;
                    case Worldspace_FieldIndex.LodWaterHeight:
                        return LodWaterHeight;
                    case Worldspace_FieldIndex.LandDefaults:
                        return LandDefaults;
                    case Worldspace_FieldIndex.MapImage:
                        return MapImage;
                    case Worldspace_FieldIndex.CloudModel:
                        return CloudModel;
                    case Worldspace_FieldIndex.MapData:
                        return MapData;
                    case Worldspace_FieldIndex.MapOffset:
                        return MapOffset;
                    case Worldspace_FieldIndex.DistantLodMultiplier:
                        return DistantLodMultiplier;
                    case Worldspace_FieldIndex.Flags:
                        return Flags;
                    case Worldspace_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Worldspace_FieldIndex.Music:
                        return Music;
                    case Worldspace_FieldIndex.CanopyShadow:
                        return CanopyShadow;
                    case Worldspace_FieldIndex.WaterNoiseTexture:
                        return WaterNoiseTexture;
                    case Worldspace_FieldIndex.HdLodDiffuseTexture:
                        return HdLodDiffuseTexture;
                    case Worldspace_FieldIndex.HdLodNormalTexture:
                        return HdLodNormalTexture;
                    case Worldspace_FieldIndex.WaterEnvironmentMap:
                        return WaterEnvironmentMap;
                    case Worldspace_FieldIndex.OffsetData:
                        return OffsetData;
                    case Worldspace_FieldIndex.TopCell:
                        return TopCell;
                    case Worldspace_FieldIndex.SubCellsTimestamp:
                        return SubCellsTimestamp;
                    case Worldspace_FieldIndex.SubCellsUnknown:
                        return SubCellsUnknown;
                    case Worldspace_FieldIndex.SubCells:
                        return SubCells;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
                switch (enu)
                {
                    case Worldspace_FieldIndex.LargeReferences:
                        this.LargeReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceGridReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.MaxHeight:
                        this.MaxHeight = new MaskItem<Exception?, WorldspaceMaxHeight.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Worldspace_FieldIndex.FixedDimensionsCenterCell:
                        this.FixedDimensionsCenterCell = ex;
                        break;
                    case Worldspace_FieldIndex.InteriorLighting:
                        this.InteriorLighting = ex;
                        break;
                    case Worldspace_FieldIndex.EncounterZone:
                        this.EncounterZone = ex;
                        break;
                    case Worldspace_FieldIndex.Location:
                        this.Location = ex;
                        break;
                    case Worldspace_FieldIndex.Parent:
                        this.Parent = new MaskItem<Exception?, WorldspaceParent.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.Climate:
                        this.Climate = ex;
                        break;
                    case Worldspace_FieldIndex.Water:
                        this.Water = ex;
                        break;
                    case Worldspace_FieldIndex.LodWater:
                        this.LodWater = ex;
                        break;
                    case Worldspace_FieldIndex.LodWaterHeight:
                        this.LodWaterHeight = ex;
                        break;
                    case Worldspace_FieldIndex.LandDefaults:
                        this.LandDefaults = new MaskItem<Exception?, WorldspaceLandDefaults.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.MapImage:
                        this.MapImage = ex;
                        break;
                    case Worldspace_FieldIndex.CloudModel:
                        this.CloudModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.MapData:
                        this.MapData = new MaskItem<Exception?, WorldspaceMap.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.MapOffset:
                        this.MapOffset = new MaskItem<Exception?, WorldspaceMapOffset.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.DistantLodMultiplier:
                        this.DistantLodMultiplier = ex;
                        break;
                    case Worldspace_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Worldspace_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, WorldspaceObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.Music:
                        this.Music = ex;
                        break;
                    case Worldspace_FieldIndex.CanopyShadow:
                        this.CanopyShadow = ex;
                        break;
                    case Worldspace_FieldIndex.WaterNoiseTexture:
                        this.WaterNoiseTexture = ex;
                        break;
                    case Worldspace_FieldIndex.HdLodDiffuseTexture:
                        this.HdLodDiffuseTexture = ex;
                        break;
                    case Worldspace_FieldIndex.HdLodNormalTexture:
                        this.HdLodNormalTexture = ex;
                        break;
                    case Worldspace_FieldIndex.WaterEnvironmentMap:
                        this.WaterEnvironmentMap = ex;
                        break;
                    case Worldspace_FieldIndex.OffsetData:
                        this.OffsetData = ex;
                        break;
                    case Worldspace_FieldIndex.TopCell:
                        this.TopCell = new MaskItem<Exception?, Cell.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.SubCellsTimestamp:
                        this.SubCellsTimestamp = ex;
                        break;
                    case Worldspace_FieldIndex.SubCellsUnknown:
                        this.SubCellsUnknown = ex;
                        break;
                    case Worldspace_FieldIndex.SubCells:
                        this.SubCells = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
                switch (enu)
                {
                    case Worldspace_FieldIndex.LargeReferences:
                        this.LargeReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceGridReference.ErrorMask?>>?>)obj;
                        break;
                    case Worldspace_FieldIndex.MaxHeight:
                        this.MaxHeight = (MaskItem<Exception?, WorldspaceMaxHeight.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.FixedDimensionsCenterCell:
                        this.FixedDimensionsCenterCell = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.InteriorLighting:
                        this.InteriorLighting = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.EncounterZone:
                        this.EncounterZone = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Location:
                        this.Location = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Parent:
                        this.Parent = (MaskItem<Exception?, WorldspaceParent.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.Climate:
                        this.Climate = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Water:
                        this.Water = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.LodWater:
                        this.LodWater = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.LodWaterHeight:
                        this.LodWaterHeight = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.LandDefaults:
                        this.LandDefaults = (MaskItem<Exception?, WorldspaceLandDefaults.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.MapImage:
                        this.MapImage = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.CloudModel:
                        this.CloudModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.MapData:
                        this.MapData = (MaskItem<Exception?, WorldspaceMap.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.MapOffset:
                        this.MapOffset = (MaskItem<Exception?, WorldspaceMapOffset.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.DistantLodMultiplier:
                        this.DistantLodMultiplier = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, WorldspaceObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.Music:
                        this.Music = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.CanopyShadow:
                        this.CanopyShadow = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.WaterNoiseTexture:
                        this.WaterNoiseTexture = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.HdLodDiffuseTexture:
                        this.HdLodDiffuseTexture = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.HdLodNormalTexture:
                        this.HdLodNormalTexture = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.WaterEnvironmentMap:
                        this.WaterEnvironmentMap = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.OffsetData:
                        this.OffsetData = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.TopCell:
                        this.TopCell = (MaskItem<Exception?, Cell.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.SubCellsTimestamp:
                        this.SubCellsTimestamp = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.SubCellsUnknown:
                        this.SubCellsUnknown = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.SubCells:
                        this.SubCells = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (LargeReferences != null) return true;
                if (MaxHeight != null) return true;
                if (Name != null) return true;
                if (FixedDimensionsCenterCell != null) return true;
                if (InteriorLighting != null) return true;
                if (EncounterZone != null) return true;
                if (Location != null) return true;
                if (Parent != null) return true;
                if (Climate != null) return true;
                if (Water != null) return true;
                if (LodWater != null) return true;
                if (LodWaterHeight != null) return true;
                if (LandDefaults != null) return true;
                if (MapImage != null) return true;
                if (CloudModel != null) return true;
                if (MapData != null) return true;
                if (MapOffset != null) return true;
                if (DistantLodMultiplier != null) return true;
                if (Flags != null) return true;
                if (ObjectBounds != null) return true;
                if (Music != null) return true;
                if (CanopyShadow != null) return true;
                if (WaterNoiseTexture != null) return true;
                if (HdLodDiffuseTexture != null) return true;
                if (HdLodNormalTexture != null) return true;
                if (WaterEnvironmentMap != null) return true;
                if (OffsetData != null) return true;
                if (TopCell != null) return true;
                if (SubCellsTimestamp != null) return true;
                if (SubCellsUnknown != null) return true;
                if (SubCells != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (LargeReferences.TryGet(out var LargeReferencesItem))
                {
                    fg.AppendLine("LargeReferences =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LargeReferencesItem.Overall);
                        if (LargeReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LargeReferencesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                MaxHeight?.ToString(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(FixedDimensionsCenterCell, "FixedDimensionsCenterCell");
                fg.AppendItem(InteriorLighting, "InteriorLighting");
                fg.AppendItem(EncounterZone, "EncounterZone");
                fg.AppendItem(Location, "Location");
                Parent?.ToString(fg);
                fg.AppendItem(Climate, "Climate");
                fg.AppendItem(Water, "Water");
                fg.AppendItem(LodWater, "LodWater");
                fg.AppendItem(LodWaterHeight, "LodWaterHeight");
                LandDefaults?.ToString(fg);
                fg.AppendItem(MapImage, "MapImage");
                CloudModel?.ToString(fg);
                MapData?.ToString(fg);
                MapOffset?.ToString(fg);
                fg.AppendItem(DistantLodMultiplier, "DistantLodMultiplier");
                fg.AppendItem(Flags, "Flags");
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Music, "Music");
                fg.AppendItem(CanopyShadow, "CanopyShadow");
                fg.AppendItem(WaterNoiseTexture, "WaterNoiseTexture");
                fg.AppendItem(HdLodDiffuseTexture, "HdLodDiffuseTexture");
                fg.AppendItem(HdLodNormalTexture, "HdLodNormalTexture");
                fg.AppendItem(WaterEnvironmentMap, "WaterEnvironmentMap");
                fg.AppendItem(OffsetData, "OffsetData");
                TopCell?.ToString(fg);
                fg.AppendItem(SubCellsTimestamp, "SubCellsTimestamp");
                fg.AppendItem(SubCellsUnknown, "SubCellsUnknown");
                if (SubCells.TryGet(out var SubCellsItem))
                {
                    fg.AppendLine("SubCells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SubCellsItem.Overall);
                        if (SubCellsItem.Specific != null)
                        {
                            foreach (var subItem in SubCellsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.LargeReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceGridReference.ErrorMask?>>?>(ExceptionExt.Combine(this.LargeReferences?.Overall, rhs.LargeReferences?.Overall), ExceptionExt.Combine(this.LargeReferences?.Specific, rhs.LargeReferences?.Specific));
                ret.MaxHeight = this.MaxHeight.Combine(rhs.MaxHeight, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.FixedDimensionsCenterCell = this.FixedDimensionsCenterCell.Combine(rhs.FixedDimensionsCenterCell);
                ret.InteriorLighting = this.InteriorLighting.Combine(rhs.InteriorLighting);
                ret.EncounterZone = this.EncounterZone.Combine(rhs.EncounterZone);
                ret.Location = this.Location.Combine(rhs.Location);
                ret.Parent = this.Parent.Combine(rhs.Parent, (l, r) => l.Combine(r));
                ret.Climate = this.Climate.Combine(rhs.Climate);
                ret.Water = this.Water.Combine(rhs.Water);
                ret.LodWater = this.LodWater.Combine(rhs.LodWater);
                ret.LodWaterHeight = this.LodWaterHeight.Combine(rhs.LodWaterHeight);
                ret.LandDefaults = this.LandDefaults.Combine(rhs.LandDefaults, (l, r) => l.Combine(r));
                ret.MapImage = this.MapImage.Combine(rhs.MapImage);
                ret.CloudModel = this.CloudModel.Combine(rhs.CloudModel, (l, r) => l.Combine(r));
                ret.MapData = this.MapData.Combine(rhs.MapData, (l, r) => l.Combine(r));
                ret.MapOffset = this.MapOffset.Combine(rhs.MapOffset, (l, r) => l.Combine(r));
                ret.DistantLodMultiplier = this.DistantLodMultiplier.Combine(rhs.DistantLodMultiplier);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Music = this.Music.Combine(rhs.Music);
                ret.CanopyShadow = this.CanopyShadow.Combine(rhs.CanopyShadow);
                ret.WaterNoiseTexture = this.WaterNoiseTexture.Combine(rhs.WaterNoiseTexture);
                ret.HdLodDiffuseTexture = this.HdLodDiffuseTexture.Combine(rhs.HdLodDiffuseTexture);
                ret.HdLodNormalTexture = this.HdLodNormalTexture.Combine(rhs.HdLodNormalTexture);
                ret.WaterEnvironmentMap = this.WaterEnvironmentMap.Combine(rhs.WaterEnvironmentMap);
                ret.OffsetData = this.OffsetData.Combine(rhs.OffsetData);
                ret.TopCell = this.TopCell.Combine(rhs.TopCell, (l, r) => l.Combine(r));
                ret.SubCellsTimestamp = this.SubCellsTimestamp.Combine(rhs.SubCellsTimestamp);
                ret.SubCellsUnknown = this.SubCellsUnknown.Combine(rhs.SubCellsUnknown);
                ret.SubCells = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>(ExceptionExt.Combine(this.SubCells?.Overall, rhs.SubCells?.Overall), ExceptionExt.Combine(this.SubCells?.Specific, rhs.SubCells?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public WorldspaceGridReference.TranslationMask? LargeReferences;
            public WorldspaceMaxHeight.TranslationMask? MaxHeight;
            public bool Name;
            public bool FixedDimensionsCenterCell;
            public bool InteriorLighting;
            public bool EncounterZone;
            public bool Location;
            public WorldspaceParent.TranslationMask? Parent;
            public bool Climate;
            public bool Water;
            public bool LodWater;
            public bool LodWaterHeight;
            public WorldspaceLandDefaults.TranslationMask? LandDefaults;
            public bool MapImage;
            public Model.TranslationMask? CloudModel;
            public WorldspaceMap.TranslationMask? MapData;
            public WorldspaceMapOffset.TranslationMask? MapOffset;
            public bool DistantLodMultiplier;
            public bool Flags;
            public WorldspaceObjectBounds.TranslationMask? ObjectBounds;
            public bool Music;
            public bool CanopyShadow;
            public bool WaterNoiseTexture;
            public bool HdLodDiffuseTexture;
            public bool HdLodNormalTexture;
            public bool WaterEnvironmentMap;
            public bool OffsetData;
            public Cell.TranslationMask? TopCell;
            public bool SubCellsTimestamp;
            public bool SubCellsUnknown;
            public WorldspaceBlock.TranslationMask? SubCells;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.FixedDimensionsCenterCell = defaultOn;
                this.InteriorLighting = defaultOn;
                this.EncounterZone = defaultOn;
                this.Location = defaultOn;
                this.Climate = defaultOn;
                this.Water = defaultOn;
                this.LodWater = defaultOn;
                this.LodWaterHeight = defaultOn;
                this.MapImage = defaultOn;
                this.DistantLodMultiplier = defaultOn;
                this.Flags = defaultOn;
                this.Music = defaultOn;
                this.CanopyShadow = defaultOn;
                this.WaterNoiseTexture = defaultOn;
                this.HdLodDiffuseTexture = defaultOn;
                this.HdLodNormalTexture = defaultOn;
                this.WaterEnvironmentMap = defaultOn;
                this.OffsetData = defaultOn;
                this.SubCellsTimestamp = defaultOn;
                this.SubCellsUnknown = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((LargeReferences == null ? DefaultOn : !LargeReferences.GetCrystal().CopyNothing, LargeReferences?.GetCrystal()));
                ret.Add((MaxHeight != null ? MaxHeight.OnOverall : DefaultOn, MaxHeight?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((FixedDimensionsCenterCell, null));
                ret.Add((InteriorLighting, null));
                ret.Add((EncounterZone, null));
                ret.Add((Location, null));
                ret.Add((Parent != null ? Parent.OnOverall : DefaultOn, Parent?.GetCrystal()));
                ret.Add((Climate, null));
                ret.Add((Water, null));
                ret.Add((LodWater, null));
                ret.Add((LodWaterHeight, null));
                ret.Add((LandDefaults != null ? LandDefaults.OnOverall : DefaultOn, LandDefaults?.GetCrystal()));
                ret.Add((MapImage, null));
                ret.Add((CloudModel != null ? CloudModel.OnOverall : DefaultOn, CloudModel?.GetCrystal()));
                ret.Add((MapData != null ? MapData.OnOverall : DefaultOn, MapData?.GetCrystal()));
                ret.Add((MapOffset != null ? MapOffset.OnOverall : DefaultOn, MapOffset?.GetCrystal()));
                ret.Add((DistantLodMultiplier, null));
                ret.Add((Flags, null));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Music, null));
                ret.Add((CanopyShadow, null));
                ret.Add((WaterNoiseTexture, null));
                ret.Add((HdLodDiffuseTexture, null));
                ret.Add((HdLodNormalTexture, null));
                ret.Add((WaterEnvironmentMap, null));
                ret.Add((OffsetData, null));
                ret.Add((TopCell != null ? TopCell.OnOverall : DefaultOn, TopCell?.GetCrystal()));
                ret.Add((SubCellsTimestamp, null));
                ret.Add((SubCellsUnknown, null));
                ret.Add((SubCells == null ? DefaultOn : !SubCells.GetCrystal().CopyNothing, SubCells?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Worldspace_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => WorldspaceCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WorldspaceSetterCommon.Instance.RemapLinks(this, mapping);
        public Worldspace(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Worldspace(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Worldspace(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Worldspace(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Worldspace(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WorldspaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Worldspace CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Worldspace();
            ((WorldspaceSetterCommon)((IWorldspaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Worldspace item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Worldspace GetNew()
        {
            return new Worldspace();
        }

    }
    #endregion

    #region Interface
    public partial interface IWorldspace :
        IWorldspaceGetter,
        IFallout4MajorRecord,
        IComplexLocation,
        ITranslatedNamed,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IWorldspaceInternal>,
        IFormLinkContainer
    {
        new ExtendedList<WorldspaceGridReference> LargeReferences { get; }
        new WorldspaceMaxHeight? MaxHeight { get; set; }
        new TranslatedString? Name { get; set; }
        new P2Int16? FixedDimensionsCenterCell { get; set; }
        new FormLinkNullable<ILightingTemplateGetter> InteriorLighting { get; set; }
        new FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; }
        new FormLinkNullable<ILocationGetter> Location { get; set; }
        new WorldspaceParent? Parent { get; set; }
        new FormLinkNullable<IClimateGetter> Climate { get; set; }
        new FormLinkNullable<IWaterGetter> Water { get; set; }
        new FormLinkNullable<IWaterGetter> LodWater { get; set; }
        new Single? LodWaterHeight { get; set; }
        new WorldspaceLandDefaults? LandDefaults { get; set; }
        new String? MapImage { get; set; }
        new Model? CloudModel { get; set; }
        new WorldspaceMap? MapData { get; set; }
        new WorldspaceMapOffset MapOffset { get; set; }
        new Single? DistantLodMultiplier { get; set; }
        new Worldspace.Flag Flags { get; set; }
        new WorldspaceObjectBounds? ObjectBounds { get; set; }
        new FormLinkNullable<IMusicTypeGetter> Music { get; set; }
        new String? CanopyShadow { get; set; }
        new String? WaterNoiseTexture { get; set; }
        new String? HdLodDiffuseTexture { get; set; }
        new String? HdLodNormalTexture { get; set; }
        new String? WaterEnvironmentMap { get; set; }
        new MemorySlice<Byte>? OffsetData { get; set; }
        new Cell? TopCell { get; set; }
        new Int32 SubCellsTimestamp { get; set; }
        new Int32 SubCellsUnknown { get; set; }
        new ExtendedList<WorldspaceBlock> SubCells { get; }
        #region Mutagen
        new Worldspace.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IWorldspaceInternal :
        IFallout4MajorRecordInternal,
        IWorldspace,
        IWorldspaceGetter
    {
    }

    public partial interface IWorldspaceGetter :
        IFallout4MajorRecordGetter,
        IComplexLocationGetter,
        ITranslatedNamedGetter,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IWorldspaceGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Worldspace_Registration.Instance;
        IReadOnlyList<IWorldspaceGridReferenceGetter> LargeReferences { get; }
        IWorldspaceMaxHeightGetter? MaxHeight { get; }
        ITranslatedStringGetter? Name { get; }
        P2Int16? FixedDimensionsCenterCell { get; }
        FormLinkNullable<ILightingTemplateGetter> InteriorLighting { get; }
        FormLinkNullable<IEncounterZoneGetter> EncounterZone { get; }
        FormLinkNullable<ILocationGetter> Location { get; }
        IWorldspaceParentGetter? Parent { get; }
        FormLinkNullable<IClimateGetter> Climate { get; }
        FormLinkNullable<IWaterGetter> Water { get; }
        FormLinkNullable<IWaterGetter> LodWater { get; }
        Single? LodWaterHeight { get; }
        IWorldspaceLandDefaultsGetter? LandDefaults { get; }
        String? MapImage { get; }
        IModelGetter? CloudModel { get; }
        IWorldspaceMapGetter? MapData { get; }
        IWorldspaceMapOffsetGetter MapOffset { get; }
        Single? DistantLodMultiplier { get; }
        Worldspace.Flag Flags { get; }
        IWorldspaceObjectBoundsGetter? ObjectBounds { get; }
        FormLinkNullable<IMusicTypeGetter> Music { get; }
        String? CanopyShadow { get; }
        String? WaterNoiseTexture { get; }
        String? HdLodDiffuseTexture { get; }
        String? HdLodNormalTexture { get; }
        String? WaterEnvironmentMap { get; }
        ReadOnlyMemorySlice<Byte>? OffsetData { get; }
        ICellGetter? TopCell { get; }
        Int32 SubCellsTimestamp { get; }
        Int32 SubCellsUnknown { get; }
        IReadOnlyList<IWorldspaceBlockGetter> SubCells { get; }

        #region Mutagen
        Worldspace.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class WorldspaceMixIn
    {
        public static void Clear(this IWorldspaceInternal item)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Worldspace.Mask<bool> GetEqualsMask(
            this IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWorldspaceGetter item,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWorldspaceGetter item,
            FileGeneration fg,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWorldspaceGetter item,
            IWorldspaceGetter rhs)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWorldspaceInternal lhs,
            IWorldspaceGetter rhs,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Worldspace.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWorldspaceInternal lhs,
            IWorldspaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Worldspace DeepCopy(
            this IWorldspaceGetter item,
            Worldspace.TranslationMask? copyMask = null)
        {
            return ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Worldspace DeepCopy(
            this IWorldspaceGetter item,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? copyMask = null)
        {
            return ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Worldspace DeepCopy(
            this IWorldspaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this IWorldspaceGetter obj)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IWorldspaceGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            this IWorldspaceGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommonGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this IWorldspaceInternal obj)
        {
            return ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IWorldspaceInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(
            this IWorldspaceInternal obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommon)m);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            IEnumerable<FormKey> keys)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            HashSet<FormKey> keys)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IWorldspaceInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IWorldspaceInternal obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IWorldspaceInternal obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IWorldspaceInternal obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IWorldspaceInternal obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IWorldspaceInternal obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        public static Worldspace Duplicate(
            this IWorldspaceGetter item,
            FormKey formKey,
            Worldspace.TranslationMask? copyMask = null)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWorldspaceInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Worldspace_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        LargeReferences = 6,
        MaxHeight = 7,
        Name = 8,
        FixedDimensionsCenterCell = 9,
        InteriorLighting = 10,
        EncounterZone = 11,
        Location = 12,
        Parent = 13,
        Climate = 14,
        Water = 15,
        LodWater = 16,
        LodWaterHeight = 17,
        LandDefaults = 18,
        MapImage = 19,
        CloudModel = 20,
        MapData = 21,
        MapOffset = 22,
        DistantLodMultiplier = 23,
        Flags = 24,
        ObjectBounds = 25,
        Music = 26,
        CanopyShadow = 27,
        WaterNoiseTexture = 28,
        HdLodDiffuseTexture = 29,
        HdLodNormalTexture = 30,
        WaterEnvironmentMap = 31,
        OffsetData = 32,
        TopCell = 33,
        SubCellsTimestamp = 34,
        SubCellsUnknown = 35,
        SubCells = 36,
    }
    #endregion

    #region Registration
    public partial class Worldspace_Registration : ILoquiRegistration
    {
        public static readonly Worldspace_Registration Instance = new Worldspace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 268,
            version: 0);

        public const string GUID = "2ee9dfa0-e46f-43fe-b3e3-acc2314e4bce";

        public const ushort AdditionalFieldCount = 31;

        public const ushort FieldCount = 37;

        public static readonly Type MaskType = typeof(Worldspace.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Worldspace.ErrorMask);

        public static readonly Type ClassType = typeof(Worldspace);

        public static readonly Type GetterType = typeof(IWorldspaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWorldspace);

        public static readonly Type? InternalSetterType = typeof(IWorldspaceInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Worldspace";

        public const string Name = "Worldspace";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.WRLD;
        public static readonly Type BinaryWriteTranslation = typeof(WorldspaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class WorldspaceSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly WorldspaceSetterCommon Instance = new WorldspaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWorldspaceInternal item)
        {
            ClearPartial();
            item.LargeReferences.Clear();
            item.MaxHeight = null;
            item.Name = default;
            item.FixedDimensionsCenterCell = default;
            item.InteriorLighting = FormLinkNullable<ILightingTemplateGetter>.Null;
            item.EncounterZone = FormLinkNullable<IEncounterZoneGetter>.Null;
            item.Location = FormLinkNullable<ILocationGetter>.Null;
            item.Parent = null;
            item.Climate = FormLinkNullable<IClimateGetter>.Null;
            item.Water = FormLinkNullable<IWaterGetter>.Null;
            item.LodWater = FormLinkNullable<IWaterGetter>.Null;
            item.LodWaterHeight = default;
            item.LandDefaults = null;
            item.MapImage = default;
            item.CloudModel = null;
            item.MapData = null;
            item.MapOffset.Clear();
            item.DistantLodMultiplier = default;
            item.Flags = default;
            item.ObjectBounds = null;
            item.Music = FormLinkNullable<IMusicTypeGetter>.Null;
            item.CanopyShadow = default;
            item.WaterNoiseTexture = default;
            item.HdLodDiffuseTexture = default;
            item.HdLodNormalTexture = default;
            item.WaterEnvironmentMap = default;
            item.OffsetData = default;
            item.TopCell = null;
            item.SubCellsTimestamp = default;
            item.SubCellsUnknown = default;
            item.SubCells.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IWorldspaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWorldspaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IWorldspace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.LargeReferences.RemapLinks(mapping);
            obj.InteriorLighting = obj.InteriorLighting.Relink(mapping);
            obj.EncounterZone = obj.EncounterZone.Relink(mapping);
            obj.Location = obj.Location.Relink(mapping);
            obj.Parent?.RemapLinks(mapping);
            obj.Climate = obj.Climate.Relink(mapping);
            obj.Water = obj.Water.Relink(mapping);
            obj.LodWater = obj.LodWater.Relink(mapping);
            obj.CloudModel?.RemapLinks(mapping);
            obj.Music = obj.Music.Relink(mapping);
            obj.TopCell?.RemapLinks(mapping);
            obj.SubCells.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IWorldspaceInternal obj)
        {
            foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            IWorldspaceInternal obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IWorldspaceInternal obj,
            HashSet<FormKey> keys)
        {
            obj.TopCell?.Remove(keys);
            if (obj.TopCell != null && keys.Contains(obj.TopCell.FormKey))
            {
                obj.TopCell = null;
            }
            obj.SubCells.ForEach(i => i.Remove(keys));
            obj.SubCells.RemoveWhere(i => i.Items.Count == 0);
        }
        
        public void Remove(
            IWorldspaceInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "WorldspaceGridReference":
                case "IWorldspaceGridReferenceGetter":
                case "IWorldspaceGridReference":
                    break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            TopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "WorldspaceBlock":
                case "IWorldspaceBlockGetter":
                case "IWorldspaceBlock":
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.TopCell.TryGet(out var LandscapeTopCellitem))
                        {
                            LandscapeTopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    {
                        if (obj.TopCell.TryGet(out var ANavigationMeshTopCellitem))
                        {
                            ANavigationMeshTopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    {
                        if (obj.TopCell.TryGet(out var PlacedNpcTopCellitem))
                        {
                            PlacedNpcTopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    {
                        if (obj.TopCell.TryGet(out var PlacedObjectTopCellitem))
                        {
                            PlacedObjectTopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "APlaced":
                case "IAPlacedGetter":
                case "IAPlaced":
                case "IAPlacedInternal":
                    {
                        if (obj.TopCell.TryGet(out var APlacedTopCellitem))
                        {
                            APlacedTopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    {
                        if (obj.TopCell.TryGet(out var APlacedTrapTopCellitem))
                        {
                            APlacedTrapTopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IComplexLocation":
                case "IComplexLocationGetter":
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "ILocationTargetable":
                case "ILocationTargetableGetter":
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            TopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IOwner":
                case "IOwnerGetter":
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            TopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            TopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "ILinkedReference":
                case "ILinkedReferenceGetter":
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            TopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            TopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IPlacedSimple":
                case "IPlacedSimpleGetter":
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            TopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                case "IPlacedThing":
                case "IPlacedThingGetter":
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            TopCellitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        subItem.Remove(keys, type, throwIfUnknown: false);
                    }
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWorldspaceInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IWorldspaceInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: WorldspaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WorldspaceBinaryCreateTranslation.FillBinaryRecordTypes);
            WorldspaceBinaryCreateTranslation.CustomBinaryEndImportPublic(
                frame: frame,
                obj: item);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Worldspace)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Worldspace)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class WorldspaceCommon : Fallout4MajorRecordCommon
    {
        public new static readonly WorldspaceCommon Instance = new WorldspaceCommon();

        public Worldspace.Mask<bool> GetEqualsMask(
            IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Worldspace.Mask<bool>(false);
            ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            Worldspace.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.LargeReferences = item.LargeReferences.CollectionEqualsHelper(
                rhs.LargeReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MaxHeight = EqualsMaskHelper.EqualsHelper(
                item.MaxHeight,
                rhs.MaxHeight,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.FixedDimensionsCenterCell = item.FixedDimensionsCenterCell.Equals(rhs.FixedDimensionsCenterCell);
            ret.InteriorLighting = item.InteriorLighting.Equals(rhs.InteriorLighting);
            ret.EncounterZone = item.EncounterZone.Equals(rhs.EncounterZone);
            ret.Location = item.Location.Equals(rhs.Location);
            ret.Parent = EqualsMaskHelper.EqualsHelper(
                item.Parent,
                rhs.Parent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Climate = item.Climate.Equals(rhs.Climate);
            ret.Water = item.Water.Equals(rhs.Water);
            ret.LodWater = item.LodWater.Equals(rhs.LodWater);
            ret.LodWaterHeight = item.LodWaterHeight.EqualsWithin(rhs.LodWaterHeight);
            ret.LandDefaults = EqualsMaskHelper.EqualsHelper(
                item.LandDefaults,
                rhs.LandDefaults,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MapImage = string.Equals(item.MapImage, rhs.MapImage);
            ret.CloudModel = EqualsMaskHelper.EqualsHelper(
                item.CloudModel,
                rhs.CloudModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MapData = EqualsMaskHelper.EqualsHelper(
                item.MapData,
                rhs.MapData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MapOffset = MaskItemExt.Factory(item.MapOffset.GetEqualsMask(rhs.MapOffset, include), include);
            ret.DistantLodMultiplier = item.DistantLodMultiplier.EqualsWithin(rhs.DistantLodMultiplier);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ObjectBounds = EqualsMaskHelper.EqualsHelper(
                item.ObjectBounds,
                rhs.ObjectBounds,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Music = item.Music.Equals(rhs.Music);
            ret.CanopyShadow = string.Equals(item.CanopyShadow, rhs.CanopyShadow);
            ret.WaterNoiseTexture = string.Equals(item.WaterNoiseTexture, rhs.WaterNoiseTexture);
            ret.HdLodDiffuseTexture = string.Equals(item.HdLodDiffuseTexture, rhs.HdLodDiffuseTexture);
            ret.HdLodNormalTexture = string.Equals(item.HdLodNormalTexture, rhs.HdLodNormalTexture);
            ret.WaterEnvironmentMap = string.Equals(item.WaterEnvironmentMap, rhs.WaterEnvironmentMap);
            ret.OffsetData = MemorySliceExt.Equal(item.OffsetData, rhs.OffsetData);
            ret.TopCell = EqualsMaskHelper.EqualsHelper(
                item.TopCell,
                rhs.TopCell,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SubCellsTimestamp = item.SubCellsTimestamp == rhs.SubCellsTimestamp;
            ret.SubCellsUnknown = item.SubCellsUnknown == rhs.SubCellsUnknown;
            ret.SubCells = item.SubCells.CollectionEqualsHelper(
                rhs.SubCells,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IWorldspaceGetter item,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWorldspaceGetter item,
            FileGeneration fg,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Worldspace =>");
            }
            else
            {
                fg.AppendLine($"{name} (Worldspace) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWorldspaceGetter item,
            FileGeneration fg,
            Worldspace.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.LargeReferences?.Overall ?? true)
            {
                fg.AppendLine("LargeReferences =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LargeReferences)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.MaxHeight?.Overall ?? true)
                && item.MaxHeight.TryGet(out var MaxHeightItem))
            {
                MaxHeightItem?.ToString(fg, "MaxHeight");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.FixedDimensionsCenterCell ?? true)
                && item.FixedDimensionsCenterCell.TryGet(out var FixedDimensionsCenterCellItem))
            {
                fg.AppendItem(FixedDimensionsCenterCellItem, "FixedDimensionsCenterCell");
            }
            if (printMask?.InteriorLighting ?? true)
            {
                fg.AppendItem(item.InteriorLighting.FormKeyNullable, "InteriorLighting");
            }
            if (printMask?.EncounterZone ?? true)
            {
                fg.AppendItem(item.EncounterZone.FormKeyNullable, "EncounterZone");
            }
            if (printMask?.Location ?? true)
            {
                fg.AppendItem(item.Location.FormKeyNullable, "Location");
            }
            if ((printMask?.Parent?.Overall ?? true)
                && item.Parent.TryGet(out var ParentItem))
            {
                ParentItem?.ToString(fg, "Parent");
            }
            if (printMask?.Climate ?? true)
            {
                fg.AppendItem(item.Climate.FormKeyNullable, "Climate");
            }
            if (printMask?.Water ?? true)
            {
                fg.AppendItem(item.Water.FormKeyNullable, "Water");
            }
            if (printMask?.LodWater ?? true)
            {
                fg.AppendItem(item.LodWater.FormKeyNullable, "LodWater");
            }
            if ((printMask?.LodWaterHeight ?? true)
                && item.LodWaterHeight.TryGet(out var LodWaterHeightItem))
            {
                fg.AppendItem(LodWaterHeightItem, "LodWaterHeight");
            }
            if ((printMask?.LandDefaults?.Overall ?? true)
                && item.LandDefaults.TryGet(out var LandDefaultsItem))
            {
                LandDefaultsItem?.ToString(fg, "LandDefaults");
            }
            if ((printMask?.MapImage ?? true)
                && item.MapImage.TryGet(out var MapImageItem))
            {
                fg.AppendItem(MapImageItem, "MapImage");
            }
            if ((printMask?.CloudModel?.Overall ?? true)
                && item.CloudModel.TryGet(out var CloudModelItem))
            {
                CloudModelItem?.ToString(fg, "CloudModel");
            }
            if ((printMask?.MapData?.Overall ?? true)
                && item.MapData.TryGet(out var MapDataItem))
            {
                MapDataItem?.ToString(fg, "MapData");
            }
            if (printMask?.MapOffset?.Overall ?? true)
            {
                item.MapOffset?.ToString(fg, "MapOffset");
            }
            if ((printMask?.DistantLodMultiplier ?? true)
                && item.DistantLodMultiplier.TryGet(out var DistantLodMultiplierItem))
            {
                fg.AppendItem(DistantLodMultiplierItem, "DistantLodMultiplier");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.ObjectBounds?.Overall ?? true)
                && item.ObjectBounds.TryGet(out var ObjectBoundsItem))
            {
                ObjectBoundsItem?.ToString(fg, "ObjectBounds");
            }
            if (printMask?.Music ?? true)
            {
                fg.AppendItem(item.Music.FormKeyNullable, "Music");
            }
            if ((printMask?.CanopyShadow ?? true)
                && item.CanopyShadow.TryGet(out var CanopyShadowItem))
            {
                fg.AppendItem(CanopyShadowItem, "CanopyShadow");
            }
            if ((printMask?.WaterNoiseTexture ?? true)
                && item.WaterNoiseTexture.TryGet(out var WaterNoiseTextureItem))
            {
                fg.AppendItem(WaterNoiseTextureItem, "WaterNoiseTexture");
            }
            if ((printMask?.HdLodDiffuseTexture ?? true)
                && item.HdLodDiffuseTexture.TryGet(out var HdLodDiffuseTextureItem))
            {
                fg.AppendItem(HdLodDiffuseTextureItem, "HdLodDiffuseTexture");
            }
            if ((printMask?.HdLodNormalTexture ?? true)
                && item.HdLodNormalTexture.TryGet(out var HdLodNormalTextureItem))
            {
                fg.AppendItem(HdLodNormalTextureItem, "HdLodNormalTexture");
            }
            if ((printMask?.WaterEnvironmentMap ?? true)
                && item.WaterEnvironmentMap.TryGet(out var WaterEnvironmentMapItem))
            {
                fg.AppendItem(WaterEnvironmentMapItem, "WaterEnvironmentMap");
            }
            if ((printMask?.OffsetData ?? true)
                && item.OffsetData.TryGet(out var OffsetDataItem))
            {
                fg.AppendLine($"OffsetData => {SpanExt.ToHexString(OffsetDataItem)}");
            }
            if ((printMask?.TopCell?.Overall ?? true)
                && item.TopCell.TryGet(out var TopCellItem))
            {
                TopCellItem?.ToString(fg, "TopCell");
            }
            if (printMask?.SubCellsTimestamp ?? true)
            {
                fg.AppendItem(item.SubCellsTimestamp, "SubCellsTimestamp");
            }
            if (printMask?.SubCellsUnknown ?? true)
            {
                fg.AppendItem(item.SubCellsUnknown, "SubCellsUnknown");
            }
            if (printMask?.SubCells?.Overall ?? true)
            {
                fg.AppendLine("SubCells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SubCells)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static Worldspace_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Worldspace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Worldspace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Worldspace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Worldspace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Worldspace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWorldspaceGetter? lhs,
            IWorldspaceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!lhs.LargeReferences.SequenceEqualNullable(rhs.LargeReferences)) return false;
            if (!object.Equals(lhs.MaxHeight, rhs.MaxHeight)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.FixedDimensionsCenterCell.Equals(rhs.FixedDimensionsCenterCell)) return false;
            if (!lhs.InteriorLighting.Equals(rhs.InteriorLighting)) return false;
            if (!lhs.EncounterZone.Equals(rhs.EncounterZone)) return false;
            if (!lhs.Location.Equals(rhs.Location)) return false;
            if (!object.Equals(lhs.Parent, rhs.Parent)) return false;
            if (!lhs.Climate.Equals(rhs.Climate)) return false;
            if (!lhs.Water.Equals(rhs.Water)) return false;
            if (!lhs.LodWater.Equals(rhs.LodWater)) return false;
            if (!lhs.LodWaterHeight.EqualsWithin(rhs.LodWaterHeight)) return false;
            if (!object.Equals(lhs.LandDefaults, rhs.LandDefaults)) return false;
            if (!string.Equals(lhs.MapImage, rhs.MapImage)) return false;
            if (!object.Equals(lhs.CloudModel, rhs.CloudModel)) return false;
            if (!object.Equals(lhs.MapData, rhs.MapData)) return false;
            if (!object.Equals(lhs.MapOffset, rhs.MapOffset)) return false;
            if (!lhs.DistantLodMultiplier.EqualsWithin(rhs.DistantLodMultiplier)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!lhs.Music.Equals(rhs.Music)) return false;
            if (!string.Equals(lhs.CanopyShadow, rhs.CanopyShadow)) return false;
            if (!string.Equals(lhs.WaterNoiseTexture, rhs.WaterNoiseTexture)) return false;
            if (!string.Equals(lhs.HdLodDiffuseTexture, rhs.HdLodDiffuseTexture)) return false;
            if (!string.Equals(lhs.HdLodNormalTexture, rhs.HdLodNormalTexture)) return false;
            if (!string.Equals(lhs.WaterEnvironmentMap, rhs.WaterEnvironmentMap)) return false;
            if (!MemorySliceExt.Equal(lhs.OffsetData, rhs.OffsetData)) return false;
            if (!object.Equals(lhs.TopCell, rhs.TopCell)) return false;
            if (lhs.SubCellsTimestamp != rhs.SubCellsTimestamp) return false;
            if (lhs.SubCellsUnknown != rhs.SubCellsUnknown) return false;
            if (!lhs.SubCells.SequenceEqualNullable(rhs.SubCells)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWorldspaceGetter?)lhs,
                rhs: rhs as IWorldspaceGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWorldspaceGetter?)lhs,
                rhs: rhs as IWorldspaceGetter);
        }
        
        public virtual int GetHashCode(IWorldspaceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.LargeReferences);
            if (item.MaxHeight.TryGet(out var MaxHeightitem))
            {
                hash.Add(MaxHeightitem);
            }
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.FixedDimensionsCenterCell.TryGet(out var FixedDimensionsCenterCellitem))
            {
                hash.Add(FixedDimensionsCenterCellitem);
            }
            hash.Add(item.InteriorLighting);
            hash.Add(item.EncounterZone);
            hash.Add(item.Location);
            if (item.Parent.TryGet(out var Parentitem))
            {
                hash.Add(Parentitem);
            }
            hash.Add(item.Climate);
            hash.Add(item.Water);
            hash.Add(item.LodWater);
            if (item.LodWaterHeight.TryGet(out var LodWaterHeightitem))
            {
                hash.Add(LodWaterHeightitem);
            }
            if (item.LandDefaults.TryGet(out var LandDefaultsitem))
            {
                hash.Add(LandDefaultsitem);
            }
            if (item.MapImage.TryGet(out var MapImageitem))
            {
                hash.Add(MapImageitem);
            }
            if (item.CloudModel.TryGet(out var CloudModelitem))
            {
                hash.Add(CloudModelitem);
            }
            if (item.MapData.TryGet(out var MapDataitem))
            {
                hash.Add(MapDataitem);
            }
            hash.Add(item.MapOffset);
            if (item.DistantLodMultiplier.TryGet(out var DistantLodMultiplieritem))
            {
                hash.Add(DistantLodMultiplieritem);
            }
            hash.Add(item.Flags);
            if (item.ObjectBounds.TryGet(out var ObjectBoundsitem))
            {
                hash.Add(ObjectBoundsitem);
            }
            hash.Add(item.Music);
            if (item.CanopyShadow.TryGet(out var CanopyShadowitem))
            {
                hash.Add(CanopyShadowitem);
            }
            if (item.WaterNoiseTexture.TryGet(out var WaterNoiseTextureitem))
            {
                hash.Add(WaterNoiseTextureitem);
            }
            if (item.HdLodDiffuseTexture.TryGet(out var HdLodDiffuseTextureitem))
            {
                hash.Add(HdLodDiffuseTextureitem);
            }
            if (item.HdLodNormalTexture.TryGet(out var HdLodNormalTextureitem))
            {
                hash.Add(HdLodNormalTextureitem);
            }
            if (item.WaterEnvironmentMap.TryGet(out var WaterEnvironmentMapitem))
            {
                hash.Add(WaterEnvironmentMapitem);
            }
            if (item.OffsetData.TryGet(out var OffsetDataItem))
            {
                hash.Add(OffsetDataItem);
            }
            if (item.TopCell.TryGet(out var TopCellitem))
            {
                hash.Add(TopCellitem);
            }
            hash.Add(item.SubCellsTimestamp);
            hash.Add(item.SubCellsUnknown);
            hash.Add(item.SubCells);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IWorldspaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWorldspaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Worldspace.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IWorldspaceGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.LargeReferences.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.InteriorLighting.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.InteriorLighting);
            }
            if (obj.EncounterZone.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.EncounterZone);
            }
            if (obj.Location.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Location);
            }
            if (obj.Parent.TryGet(out var ParentItems))
            {
                foreach (var item in ParentItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Climate.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Climate);
            }
            if (obj.Water.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Water);
            }
            if (obj.LodWater.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.LodWater);
            }
            if (obj.CloudModel.TryGet(out var CloudModelItems))
            {
                foreach (var item in CloudModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Music.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Music);
            }
            if (obj.TopCell.TryGet(out var TopCellItems))
            {
                foreach (var item in TopCellItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.SubCells.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IWorldspaceGetter obj)
        {
            if ((obj.TopCell != null))
            {
                if (obj.TopCell.TryGet(out var TopCellitem))
                {
                    yield return TopCellitem;
                    foreach (var item in TopCellitem.EnumerateMajorRecords())
                    {
                        yield return item;
                    }
                }
            }
            foreach (var subItem in obj.SubCells)
            {
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            IWorldspaceGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "WorldspaceGridReference":
                case "IWorldspaceGridReferenceGetter":
                case "IWorldspaceGridReference":
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "WorldspaceBlock":
                case "IWorldspaceBlockGetter":
                case "IWorldspaceBlock":
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.TopCell.TryGet(out var LandscapeTopCellitem))
                        {
                            yield return LandscapeTopCellitem;
                            foreach (var item in LandscapeTopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    {
                        if (obj.TopCell.TryGet(out var ANavigationMeshTopCellitem))
                        {
                            yield return ANavigationMeshTopCellitem;
                            foreach (var item in ANavigationMeshTopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    {
                        if (obj.TopCell.TryGet(out var PlacedNpcTopCellitem))
                        {
                            yield return PlacedNpcTopCellitem;
                            foreach (var item in PlacedNpcTopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    {
                        if (obj.TopCell.TryGet(out var PlacedObjectTopCellitem))
                        {
                            yield return PlacedObjectTopCellitem;
                            foreach (var item in PlacedObjectTopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "APlaced":
                case "IAPlacedGetter":
                case "IAPlaced":
                case "IAPlacedInternal":
                    {
                        if (obj.TopCell.TryGet(out var APlacedTopCellitem))
                        {
                            yield return APlacedTopCellitem;
                            foreach (var item in APlacedTopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    {
                        if (obj.TopCell.TryGet(out var APlacedTrapTopCellitem))
                        {
                            yield return APlacedTrapTopCellitem;
                            foreach (var item in APlacedTrapTopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "IComplexLocation":
                {
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IComplexLocationGetter":
                {
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "ILocationTargetable":
                {
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "ILocationTargetableGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IOwner":
                {
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IOwnerGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IKeywordLinkedReference":
                {
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IKeywordLinkedReferenceGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "ILinkedReference":
                {
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "ILinkedReferenceGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlaced":
                {
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedSimple":
                {
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedSimpleGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedThing":
                {
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedThingGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var TopCellitem))
                        {
                            yield return TopCellitem;
                            foreach (var item in TopCellitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.SubCells)
                    {
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            IWorldspaceGetter obj,
            ILinkCache linkCache,
            ModKey modKey,
            IModContext? parent,
            Func<IFallout4Mod, IWorldspaceGetter, IWorldspace> getOrAddAsOverride,
            Func<IFallout4Mod, IWorldspaceGetter, string?, IWorldspace> duplicateInto)
        {
            var curContext = new ModContext<IFallout4Mod, IWorldspace, IWorldspaceGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            {
                if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                {
                    yield return new ModContext<IFallout4Mod, ICellInternal, ICellGetter>(
                        modKey: modKey,
                        record: WorldspaceTopCellitem,
                        parent: curContext,
                        getOrAddAsOverride: (m, r) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                            if (baseRec.TopCell != null) return baseRec.TopCell;
                            var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                            baseRec.TopCell = copy;
                            return copy;
                        },
                        duplicateInto: (m, r, e) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                            var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                            baseRec.TopCell = dupRec;
                            return dupRec;
                        });
                    foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                        obj: WorldspaceTopCellitem,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: curContext,
                        getOrAddAsOverride: (m, r) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                            if (baseRec.TopCell != null) return baseRec.TopCell;
                            var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                            baseRec.TopCell = copy;
                            return copy;
                        },
                        duplicateInto: (m, r, e) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                            var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                            baseRec.TopCell = dupRec;
                            return dupRec;
                        }))
                    {
                        yield return item;
                    }
                }
            }
            foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                type: typeof(IMajorRecordCommonGetter),
                modKey: modKey,
                parent: curContext,
                linkCache: linkCache,
                throwIfUnknown: false,
                worldspace: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto))
            {
                yield return item;
            }
        }
        
        public IEnumerable<IModContext<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            IWorldspaceGetter obj,
            ILinkCache linkCache,
            Type type,
            ModKey modKey,
            IModContext? parent,
            bool throwIfUnknown,
            Func<IFallout4Mod, IWorldspaceGetter, IWorldspace> getOrAddAsOverride,
            Func<IFallout4Mod, IWorldspaceGetter, string?, IWorldspace> duplicateInto)
        {
            var curContext = new ModContext<IFallout4Mod, IWorldspace, IWorldspaceGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!Worldspace_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "WorldspaceGridReference":
                case "IWorldspaceGridReferenceGetter":
                case "IWorldspaceGridReference":
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            yield return new ModContext<IFallout4Mod, ICellInternal, ICellGetter>(
                                modKey: modKey,
                                record: WorldspaceTopCellitem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                });
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "WorldspaceBlock":
                case "IWorldspaceBlockGetter":
                case "IWorldspaceBlock":
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "APlaced":
                case "IAPlacedGetter":
                case "IAPlaced":
                case "IAPlacedInternal":
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "IComplexLocation":
                case "IComplexLocationGetter":
                {
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILocationTargetable":
                case "ILocationTargetableGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IOwner":
                case "IOwnerGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILinkedReference":
                case "ILinkedReferenceGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlaced":
                case "IPlacedGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlacedSimple":
                case "IPlacedSimpleGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlacedThing":
                case "IPlacedThingGetter":
                {
                    {
                        if (obj.TopCell.TryGet(out var WorldspaceTopCellitem))
                        {
                            foreach (var item in ((CellCommon)((ICellGetter)WorldspaceTopCellitem).CommonInstance()!).EnumerateMajorRecordContexts(
                                obj: WorldspaceTopCellitem,
                                linkCache: linkCache,
                                type: type,
                                modKey: modKey,
                                parent: curContext,
                                throwIfUnknown: false,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    if (baseRec.TopCell != null) return baseRec.TopCell;
                                    var copy = r.DeepCopy(ModContextExt.CellCopyMask);
                                    baseRec.TopCell = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<IWorldspaceGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(m.GetNextFormKey(e), ModContextExt.CellCopyMask);
                                    baseRec.TopCell = dupRec;
                                    return dupRec;
                                }))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var item in obj.SubCells.EnumerateMajorRecordContexts(
                        type: type,
                        modKey: modKey,
                        parent: curContext,
                        linkCache: linkCache,
                        throwIfUnknown: false,
                        worldspace: obj,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                }
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        #region Duplicate
        public Worldspace Duplicate(
            IWorldspaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Worldspace(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWorldspace)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWorldspace)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class WorldspaceSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly WorldspaceSetterTranslationCommon Instance = new WorldspaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWorldspaceInternal item,
            IWorldspaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IWorldspace item,
            IWorldspaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.LargeReferences) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.LargeReferences);
                try
                {
                    item.LargeReferences.SetTo(
                        rhs.LargeReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.MaxHeight) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.MaxHeight);
                try
                {
                    if(rhs.MaxHeight.TryGet(out var rhsMaxHeight))
                    {
                        item.MaxHeight = rhsMaxHeight.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.MaxHeight));
                    }
                    else
                    {
                        item.MaxHeight = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.FixedDimensionsCenterCell) ?? true))
            {
                item.FixedDimensionsCenterCell = rhs.FixedDimensionsCenterCell;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.InteriorLighting) ?? true))
            {
                item.InteriorLighting = new FormLinkNullable<ILightingTemplateGetter>(rhs.InteriorLighting.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.EncounterZone) ?? true))
            {
                item.EncounterZone = new FormLinkNullable<IEncounterZoneGetter>(rhs.EncounterZone.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Location) ?? true))
            {
                item.Location = new FormLinkNullable<ILocationGetter>(rhs.Location.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Parent) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.Parent);
                try
                {
                    if(rhs.Parent.TryGet(out var rhsParent))
                    {
                        item.Parent = rhsParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.Parent));
                    }
                    else
                    {
                        item.Parent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Climate) ?? true))
            {
                item.Climate = new FormLinkNullable<IClimateGetter>(rhs.Climate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Water) ?? true))
            {
                item.Water = new FormLinkNullable<IWaterGetter>(rhs.Water.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.LodWater) ?? true))
            {
                item.LodWater = new FormLinkNullable<IWaterGetter>(rhs.LodWater.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.LodWaterHeight) ?? true))
            {
                item.LodWaterHeight = rhs.LodWaterHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.LandDefaults) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.LandDefaults);
                try
                {
                    if(rhs.LandDefaults.TryGet(out var rhsLandDefaults))
                    {
                        item.LandDefaults = rhsLandDefaults.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.LandDefaults));
                    }
                    else
                    {
                        item.LandDefaults = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.MapImage) ?? true))
            {
                item.MapImage = rhs.MapImage;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.CloudModel) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.CloudModel);
                try
                {
                    if(rhs.CloudModel.TryGet(out var rhsCloudModel))
                    {
                        item.CloudModel = rhsCloudModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.CloudModel));
                    }
                    else
                    {
                        item.CloudModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.MapData) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.MapData);
                try
                {
                    if(rhs.MapData.TryGet(out var rhsMapData))
                    {
                        item.MapData = rhsMapData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.MapData));
                    }
                    else
                    {
                        item.MapData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.MapOffset) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.MapOffset);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.MapOffset) ?? true))
                    {
                        item.MapOffset = rhs.MapOffset.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.MapOffset),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.DistantLodMultiplier) ?? true))
            {
                item.DistantLodMultiplier = rhs.DistantLodMultiplier;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.ObjectBounds);
                try
                {
                    if(rhs.ObjectBounds.TryGet(out var rhsObjectBounds))
                    {
                        item.ObjectBounds = rhsObjectBounds.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.ObjectBounds));
                    }
                    else
                    {
                        item.ObjectBounds = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Music) ?? true))
            {
                item.Music = new FormLinkNullable<IMusicTypeGetter>(rhs.Music.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.CanopyShadow) ?? true))
            {
                item.CanopyShadow = rhs.CanopyShadow;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.WaterNoiseTexture) ?? true))
            {
                item.WaterNoiseTexture = rhs.WaterNoiseTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.HdLodDiffuseTexture) ?? true))
            {
                item.HdLodDiffuseTexture = rhs.HdLodDiffuseTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.HdLodNormalTexture) ?? true))
            {
                item.HdLodNormalTexture = rhs.HdLodNormalTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.WaterEnvironmentMap) ?? true))
            {
                item.WaterEnvironmentMap = rhs.WaterEnvironmentMap;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.OffsetData) ?? true))
            {
                if(rhs.OffsetData.TryGet(out var OffsetDatarhs))
                {
                    item.OffsetData = OffsetDatarhs.ToArray();
                }
                else
                {
                    item.OffsetData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.TopCell) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.TopCell);
                try
                {
                    if(rhs.TopCell.TryGet(out var rhsTopCell))
                    {
                        item.TopCell = (Cell)rhsTopCell.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.TopCell),
                            errorMask: errorMask);
                    }
                    else
                    {
                        item.TopCell = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCellsTimestamp) ?? true))
            {
                item.SubCellsTimestamp = rhs.SubCellsTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCellsUnknown) ?? true))
            {
                item.SubCellsUnknown = rhs.SubCellsUnknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCells) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.SubCells);
                try
                {
                    item.SubCells.SetTo(
                        rhs.SubCells
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWorldspaceInternal)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWorldspace)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWorldspaceInternal)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWorldspace)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Worldspace DeepCopy(
            IWorldspaceGetter item,
            Worldspace.TranslationMask? copyMask = null)
        {
            Worldspace ret = (Worldspace)((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetNew();
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Worldspace DeepCopy(
            IWorldspaceGetter item,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Worldspace ret = (Worldspace)((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetNew();
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Worldspace.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Worldspace DeepCopy(
            IWorldspaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Worldspace ret = (Worldspace)((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetNew();
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Worldspace
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Worldspace_Registration.Instance;
        public new static Worldspace_Registration Registration => Worldspace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WorldspaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WorldspaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WorldspaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class WorldspaceBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static WorldspaceBinaryWriteTranslation Instance = new WorldspaceBinaryWriteTranslation();

        static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            IWorldspaceGetter obj);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            IWorldspaceGetter obj)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj);
        }
        public static void WriteEmbedded(
            IWorldspaceGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IWorldspaceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IWorldspaceGridReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.LargeReferences,
                transl: (MutagenWriter subWriter, IWorldspaceGridReferenceGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((WorldspaceGridReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.MaxHeight.TryGet(out var MaxHeightItem))
            {
                ((WorldspaceMaxHeightBinaryWriteTranslation)((IBinaryItem)MaxHeightItem).BinaryWriteTranslator).Write(
                    item: MaxHeightItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FixedDimensionsCenterCell,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.WCTR));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InteriorLighting,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.LTMP));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EncounterZone,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XEZN));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Location,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XLCN));
            if (item.Parent.TryGet(out var ParentItem))
            {
                ((WorldspaceParentBinaryWriteTranslation)((IBinaryItem)ParentItem).BinaryWriteTranslator).Write(
                    item: ParentItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Climate,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Water,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM2));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LodWater,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM3));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LodWaterHeight,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM4));
            if (item.LandDefaults.TryGet(out var LandDefaultsItem))
            {
                ((WorldspaceLandDefaultsBinaryWriteTranslation)((IBinaryItem)LandDefaultsItem).BinaryWriteTranslator).Write(
                    item: LandDefaultsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MapImage,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            if (item.CloudModel.TryGet(out var CloudModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)CloudModelItem).BinaryWriteTranslator).Write(
                    item: CloudModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.MapData.TryGet(out var MapDataItem))
            {
                ((WorldspaceMapBinaryWriteTranslation)((IBinaryItem)MapDataItem).BinaryWriteTranslator).Write(
                    item: MapDataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var MapOffsetItem = item.MapOffset;
            ((WorldspaceMapOffsetBinaryWriteTranslation)((IBinaryItem)MapOffsetItem).BinaryWriteTranslator).Write(
                item: MapOffsetItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DistantLodMultiplier,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAMA));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Worldspace.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DATA));
            if (item.ObjectBounds.TryGet(out var ObjectBoundsItem))
            {
                ((WorldspaceObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Music,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ZNAM));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CanopyShadow,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WaterNoiseTexture,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HdLodDiffuseTexture,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HdLodNormalTexture,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.UNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WaterEnvironmentMap,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XWEM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.OffsetData,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.OFST),
                overflowRecord: RecordTypes.XXXX);
        }

        public void Write(
            MutagenWriter writer,
            IWorldspaceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.WRLD),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WorldspaceBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static WorldspaceBinaryCreateTranslation Instance = new WorldspaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.WRLD;
        public static void FillBinaryStructs(
            IWorldspaceInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IWorldspaceInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.RNAM:
                {
                    item.LargeReferences.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<WorldspaceGridReference>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.RNAM,
                            recordTypeConverter: recordTypeConverter,
                            transl: WorldspaceGridReference.TryCreateFromBinary));
                    return (int)Worldspace_FieldIndex.LargeReferences;
                }
                case RecordTypeInts.MHDT:
                {
                    item.MaxHeight = Mutagen.Bethesda.Fallout4.WorldspaceMaxHeight.CreateFromBinary(frame: frame);
                    return (int)Worldspace_FieldIndex.MaxHeight;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Worldspace_FieldIndex.Name;
                }
                case RecordTypeInts.WCTR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FixedDimensionsCenterCell = Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Worldspace_FieldIndex.FixedDimensionsCenterCell;
                }
                case RecordTypeInts.LTMP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InteriorLighting = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Worldspace_FieldIndex.InteriorLighting;
                }
                case RecordTypeInts.XEZN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EncounterZone = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Worldspace_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XLCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Location = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Worldspace_FieldIndex.Location;
                }
                case RecordTypeInts.WNAM:
                {
                    item.Parent = Mutagen.Bethesda.Fallout4.WorldspaceParent.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Worldspace_FieldIndex.Parent;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Climate = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Worldspace_FieldIndex.Climate;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Water = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Worldspace_FieldIndex.Water;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LodWater = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Worldspace_FieldIndex.LodWater;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LodWaterHeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Worldspace_FieldIndex.LodWaterHeight;
                }
                case RecordTypeInts.DNAM:
                {
                    item.LandDefaults = Mutagen.Bethesda.Fallout4.WorldspaceLandDefaults.CreateFromBinary(frame: frame);
                    return (int)Worldspace_FieldIndex.LandDefaults;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MapImage = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Worldspace_FieldIndex.MapImage;
                }
                case RecordTypeInts.MODL:
                {
                    item.CloudModel = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Worldspace_FieldIndex.CloudModel;
                }
                case RecordTypeInts.MNAM:
                {
                    item.MapData = Mutagen.Bethesda.Fallout4.WorldspaceMap.CreateFromBinary(frame: frame);
                    return (int)Worldspace_FieldIndex.MapData;
                }
                case RecordTypeInts.ONAM:
                {
                    item.MapOffset = Mutagen.Bethesda.Fallout4.WorldspaceMapOffset.CreateFromBinary(frame: frame);
                    return (int)Worldspace_FieldIndex.MapOffset;
                }
                case RecordTypeInts.NAMA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DistantLodMultiplier = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Worldspace_FieldIndex.DistantLodMultiplier;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Worldspace.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Worldspace_FieldIndex.Flags;
                }
                case RecordTypeInts.NAM0:
                case RecordTypeInts.NAM9:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.WorldspaceObjectBounds.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Worldspace_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Music = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Worldspace_FieldIndex.Music;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CanopyShadow = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Worldspace_FieldIndex.CanopyShadow;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterNoiseTexture = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Worldspace_FieldIndex.WaterNoiseTexture;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HdLodDiffuseTexture = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Worldspace_FieldIndex.HdLodDiffuseTexture;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HdLodNormalTexture = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Worldspace_FieldIndex.HdLodNormalTexture;
                }
                case RecordTypeInts.XWEM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterEnvironmentMap = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Worldspace_FieldIndex.WaterEnvironmentMap;
                }
                case RecordTypeInts.OFST:
                case RecordTypeInts.XXXX:
                {
                    if (nextRecordType == RecordTypes.XXXX)
                    {
                        var overflowHeader = frame.ReadSubrecordFrame();
                        contentLength = checked((int)BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                    }
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OffsetData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Worldspace_FieldIndex.OffsetData;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void CustomBinaryEndImport(
            MutagenFrame frame,
            IWorldspaceInternal obj);
        public static void CustomBinaryEndImportPublic(
            MutagenFrame frame,
            IWorldspaceInternal obj)
        {
            CustomBinaryEndImport(
                frame: frame,
                obj: obj);
        }
    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class WorldspaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class WorldspaceBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IWorldspaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Worldspace_Registration.Instance;
        public new static Worldspace_Registration Registration => Worldspace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WorldspaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WorldspaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => WorldspaceCommon.Instance.GetContainedFormLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WorldspaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Worldspace.MajorFlag MajorFlags => (Worldspace.MajorFlag)this.MajorRecordFlagsRaw;

        public IReadOnlyList<IWorldspaceGridReferenceGetter> LargeReferences { get; private set; } = ListExt.Empty<WorldspaceGridReferenceBinaryOverlay>();
        #region MaxHeight
        private RangeInt32? _MaxHeightLocation;
        public IWorldspaceMaxHeightGetter? MaxHeight => _MaxHeightLocation.HasValue ? WorldspaceMaxHeightBinaryOverlay.WorldspaceMaxHeightFactory(new OverlayStream(_data.Slice(_MaxHeightLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region FixedDimensionsCenterCell
        private int? _FixedDimensionsCenterCellLocation;
        public P2Int16? FixedDimensionsCenterCell => _FixedDimensionsCenterCellLocation.HasValue ? P2Int16BinaryTranslation.Read(HeaderTranslation.ExtractSubrecordMemory(_data, _FixedDimensionsCenterCellLocation.Value, _package.MetaData.Constants)) : default(P2Int16?);
        #endregion
        #region InteriorLighting
        private int? _InteriorLightingLocation;
        public FormLinkNullable<ILightingTemplateGetter> InteriorLighting => _InteriorLightingLocation.HasValue ? new FormLinkNullable<ILightingTemplateGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _InteriorLightingLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILightingTemplateGetter>.Null;
        #endregion
        #region EncounterZone
        private int? _EncounterZoneLocation;
        public FormLinkNullable<IEncounterZoneGetter> EncounterZone => _EncounterZoneLocation.HasValue ? new FormLinkNullable<IEncounterZoneGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EncounterZoneLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEncounterZoneGetter>.Null;
        #endregion
        #region Location
        private int? _LocationLocation;
        public FormLinkNullable<ILocationGetter> Location => _LocationLocation.HasValue ? new FormLinkNullable<ILocationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LocationLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILocationGetter>.Null;
        #endregion
        public IWorldspaceParentGetter? Parent { get; private set; }
        #region Climate
        private int? _ClimateLocation;
        public FormLinkNullable<IClimateGetter> Climate => _ClimateLocation.HasValue ? new FormLinkNullable<IClimateGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ClimateLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IClimateGetter>.Null;
        #endregion
        #region Water
        private int? _WaterLocation;
        public FormLinkNullable<IWaterGetter> Water => _WaterLocation.HasValue ? new FormLinkNullable<IWaterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _WaterLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IWaterGetter>.Null;
        #endregion
        #region LodWater
        private int? _LodWaterLocation;
        public FormLinkNullable<IWaterGetter> LodWater => _LodWaterLocation.HasValue ? new FormLinkNullable<IWaterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LodWaterLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IWaterGetter>.Null;
        #endregion
        #region LodWaterHeight
        private int? _LodWaterHeightLocation;
        public Single? LodWaterHeight => _LodWaterHeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _LodWaterHeightLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region LandDefaults
        private RangeInt32? _LandDefaultsLocation;
        public IWorldspaceLandDefaultsGetter? LandDefaults => _LandDefaultsLocation.HasValue ? WorldspaceLandDefaultsBinaryOverlay.WorldspaceLandDefaultsFactory(new OverlayStream(_data.Slice(_LandDefaultsLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region MapImage
        private int? _MapImageLocation;
        public String? MapImage => _MapImageLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _MapImageLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IModelGetter? CloudModel { get; private set; }
        #region MapData
        private RangeInt32? _MapDataLocation;
        public IWorldspaceMapGetter? MapData => _MapDataLocation.HasValue ? WorldspaceMapBinaryOverlay.WorldspaceMapFactory(new OverlayStream(_data.Slice(_MapDataLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region MapOffset
        private RangeInt32? _MapOffsetLocation;
        private IWorldspaceMapOffsetGetter? _MapOffset => _MapOffsetLocation.HasValue ? WorldspaceMapOffsetBinaryOverlay.WorldspaceMapOffsetFactory(new OverlayStream(_data.Slice(_MapOffsetLocation!.Value.Min), _package), _package) : default;
        public IWorldspaceMapOffsetGetter MapOffset => _MapOffset ?? new WorldspaceMapOffset();
        #endregion
        #region DistantLodMultiplier
        private int? _DistantLodMultiplierLocation;
        public Single? DistantLodMultiplier => _DistantLodMultiplierLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _DistantLodMultiplierLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Worldspace.Flag Flags => _FlagsLocation.HasValue ? (Worldspace.Flag)HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(Worldspace.Flag);
        #endregion
        public IWorldspaceObjectBoundsGetter? ObjectBounds { get; private set; }
        #region Music
        private int? _MusicLocation;
        public FormLinkNullable<IMusicTypeGetter> Music => _MusicLocation.HasValue ? new FormLinkNullable<IMusicTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MusicLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IMusicTypeGetter>.Null;
        #endregion
        #region CanopyShadow
        private int? _CanopyShadowLocation;
        public String? CanopyShadow => _CanopyShadowLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _CanopyShadowLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region WaterNoiseTexture
        private int? _WaterNoiseTextureLocation;
        public String? WaterNoiseTexture => _WaterNoiseTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _WaterNoiseTextureLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region HdLodDiffuseTexture
        private int? _HdLodDiffuseTextureLocation;
        public String? HdLodDiffuseTexture => _HdLodDiffuseTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _HdLodDiffuseTextureLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region HdLodNormalTexture
        private int? _HdLodNormalTextureLocation;
        public String? HdLodNormalTexture => _HdLodNormalTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _HdLodNormalTextureLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region WaterEnvironmentMap
        private int? _WaterEnvironmentMapLocation;
        public String? WaterEnvironmentMap => _WaterEnvironmentMapLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _WaterEnvironmentMapLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region OffsetData
        private int? _OffsetDataLocation;
        public ReadOnlyMemorySlice<Byte>? OffsetData => UtilityTranslation.ReadByteArrayWithOverflow(
            _data,
            _package.MetaData.Constants,
            _OffsetDataLocation,
            RecordTypes.XXXX);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WorldspaceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static WorldspaceBinaryOverlay WorldspaceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var origStream = stream;
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new WorldspaceBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: origStream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static WorldspaceBinaryOverlay WorldspaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return WorldspaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.RNAM:
                {
                    this.LargeReferences = BinaryOverlayList.FactoryByArray<WorldspaceGridReferenceBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => WorldspaceGridReferenceBinaryOverlay.WorldspaceGridReferenceFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Worldspace_FieldIndex.LargeReferences;
                }
                case RecordTypeInts.MHDT:
                {
                    _MaxHeightLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Worldspace_FieldIndex.MaxHeight;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Name;
                }
                case RecordTypeInts.WCTR:
                {
                    _FixedDimensionsCenterCellLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.FixedDimensionsCenterCell;
                }
                case RecordTypeInts.LTMP:
                {
                    _InteriorLightingLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.InteriorLighting;
                }
                case RecordTypeInts.XEZN:
                {
                    _EncounterZoneLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XLCN:
                {
                    _LocationLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Location;
                }
                case RecordTypeInts.WNAM:
                {
                    this.Parent = WorldspaceParentBinaryOverlay.WorldspaceParentFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Worldspace_FieldIndex.Parent;
                }
                case RecordTypeInts.CNAM:
                {
                    _ClimateLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Climate;
                }
                case RecordTypeInts.NAM2:
                {
                    _WaterLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Water;
                }
                case RecordTypeInts.NAM3:
                {
                    _LodWaterLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.LodWater;
                }
                case RecordTypeInts.NAM4:
                {
                    _LodWaterHeightLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.LodWaterHeight;
                }
                case RecordTypeInts.DNAM:
                {
                    _LandDefaultsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Worldspace_FieldIndex.LandDefaults;
                }
                case RecordTypeInts.ICON:
                {
                    _MapImageLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.MapImage;
                }
                case RecordTypeInts.MODL:
                {
                    this.CloudModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Worldspace_FieldIndex.CloudModel;
                }
                case RecordTypeInts.MNAM:
                {
                    _MapDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Worldspace_FieldIndex.MapData;
                }
                case RecordTypeInts.ONAM:
                {
                    _MapOffsetLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Worldspace_FieldIndex.MapOffset;
                }
                case RecordTypeInts.NAMA:
                {
                    _DistantLodMultiplierLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.DistantLodMultiplier;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Flags;
                }
                case RecordTypeInts.NAM0:
                case RecordTypeInts.NAM9:
                {
                    this.ObjectBounds = WorldspaceObjectBoundsBinaryOverlay.WorldspaceObjectBoundsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Worldspace_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ZNAM:
                {
                    _MusicLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.Music;
                }
                case RecordTypeInts.NNAM:
                {
                    _CanopyShadowLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.CanopyShadow;
                }
                case RecordTypeInts.XNAM:
                {
                    _WaterNoiseTextureLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.WaterNoiseTexture;
                }
                case RecordTypeInts.TNAM:
                {
                    _HdLodDiffuseTextureLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.HdLodDiffuseTexture;
                }
                case RecordTypeInts.UNAM:
                {
                    _HdLodNormalTextureLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.HdLodNormalTexture;
                }
                case RecordTypeInts.XWEM:
                {
                    _WaterEnvironmentMapLocation = (stream.Position - offset);
                    return (int)Worldspace_FieldIndex.WaterEnvironmentMap;
                }
                case RecordTypeInts.OFST:
                case RecordTypeInts.XXXX:
                {
                    _OffsetDataLocation = UtilityTranslation.HandleOverlayRecordOverflow(
                        existingLoc: _OffsetDataLocation,
                        stream: stream,
                        offset: offset,
                        data: _data,
                        constants: _package.MetaData.Constants);
                    return (int)Worldspace_FieldIndex.OffsetData;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWorldspaceGetter rhs)) return false;
            return ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IWorldspaceGetter? obj)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

