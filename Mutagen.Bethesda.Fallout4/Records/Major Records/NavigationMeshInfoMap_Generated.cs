/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class NavigationMeshInfoMap :
        Fallout4MajorRecord,
        INavigationMeshInfoMapInternal,
        ILoquiObjectSetter<NavigationMeshInfoMap>,
        IEquatable<INavigationMeshInfoMapGetter>
    {
        #region Ctor
        protected NavigationMeshInfoMap()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NavMeshVersion
        public UInt32? NavMeshVersion { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? INavigationMeshInfoMapGetter.NavMeshVersion => this.NavMeshVersion;
        #endregion
        #region MapInfos
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NavigationMapInfo> _MapInfos = new ExtendedList<NavigationMapInfo>();
        public ExtendedList<NavigationMapInfo> MapInfos
        {
            get => this._MapInfos;
            protected set => this._MapInfos = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INavigationMapInfoGetter> INavigationMeshInfoMapGetter.MapInfos => _MapInfos;
        #endregion

        #endregion
        #region PreferredPathing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PreferredPathing? _PreferredPathing;
        public PreferredPathing? PreferredPathing
        {
            get => _PreferredPathing;
            set => _PreferredPathing = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPreferredPathingGetter? INavigationMeshInfoMapGetter.PreferredPathing => this.PreferredPathing;
        #endregion
        #region NVSI
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NVSI;
        public MemorySlice<Byte>? NVSI
        {
            get => this._NVSI;
            set => this._NVSI = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INavigationMeshInfoMapGetter.NVSI => this.NVSI;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NavigationMeshInfoMapMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INavigationMeshInfoMapGetter rhs)) return false;
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INavigationMeshInfoMapGetter? obj)
        {
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.NavMeshVersion = initialValue;
                this.MapInfos = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavigationMapInfo.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NavigationMapInfo.Mask<TItem>?>>());
                this.PreferredPathing = new MaskItem<TItem, PreferredPathing.Mask<TItem>?>(initialValue, new PreferredPathing.Mask<TItem>(initialValue));
                this.NVSI = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem NavMeshVersion,
                TItem MapInfos,
                TItem PreferredPathing,
                TItem NVSI)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.NavMeshVersion = NavMeshVersion;
                this.MapInfos = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavigationMapInfo.Mask<TItem>?>>?>(MapInfos, Enumerable.Empty<MaskItemIndexed<TItem, NavigationMapInfo.Mask<TItem>?>>());
                this.PreferredPathing = new MaskItem<TItem, PreferredPathing.Mask<TItem>?>(PreferredPathing, new PreferredPathing.Mask<TItem>(PreferredPathing));
                this.NVSI = NVSI;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NavMeshVersion;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NavigationMapInfo.Mask<TItem>?>>?>? MapInfos;
            public MaskItem<TItem, PreferredPathing.Mask<TItem>?>? PreferredPathing { get; set; }
            public TItem NVSI;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.NavMeshVersion, rhs.NavMeshVersion)) return false;
                if (!object.Equals(this.MapInfos, rhs.MapInfos)) return false;
                if (!object.Equals(this.PreferredPathing, rhs.PreferredPathing)) return false;
                if (!object.Equals(this.NVSI, rhs.NVSI)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NavMeshVersion);
                hash.Add(this.MapInfos);
                hash.Add(this.PreferredPathing);
                hash.Add(this.NVSI);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.NavMeshVersion)) return false;
                if (this.MapInfos != null)
                {
                    if (!eval(this.MapInfos.Overall)) return false;
                    if (this.MapInfos.Specific != null)
                    {
                        foreach (var item in this.MapInfos.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (PreferredPathing != null)
                {
                    if (!eval(this.PreferredPathing.Overall)) return false;
                    if (this.PreferredPathing.Specific != null && !this.PreferredPathing.Specific.All(eval)) return false;
                }
                if (!eval(this.NVSI)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.NavMeshVersion)) return true;
                if (this.MapInfos != null)
                {
                    if (eval(this.MapInfos.Overall)) return true;
                    if (this.MapInfos.Specific != null)
                    {
                        foreach (var item in this.MapInfos.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (PreferredPathing != null)
                {
                    if (eval(this.PreferredPathing.Overall)) return true;
                    if (this.PreferredPathing.Specific != null && this.PreferredPathing.Specific.Any(eval)) return true;
                }
                if (eval(this.NVSI)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NavigationMeshInfoMap.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.NavMeshVersion = eval(this.NavMeshVersion);
                if (MapInfos != null)
                {
                    obj.MapInfos = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NavigationMapInfo.Mask<R>?>>?>(eval(this.MapInfos.Overall), Enumerable.Empty<MaskItemIndexed<R, NavigationMapInfo.Mask<R>?>>());
                    if (MapInfos.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NavigationMapInfo.Mask<R>?>>();
                        obj.MapInfos.Specific = l;
                        foreach (var item in MapInfos.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, NavigationMapInfo.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, NavigationMapInfo.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.PreferredPathing = this.PreferredPathing == null ? null : new MaskItem<R, PreferredPathing.Mask<R>?>(eval(this.PreferredPathing.Overall), this.PreferredPathing.Specific?.Translate(eval));
                obj.NVSI = eval(this.NVSI);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NavigationMeshInfoMap.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NavigationMeshInfoMap.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NavigationMeshInfoMap.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.NavMeshVersion ?? true)
                    {
                        fg.AppendItem(NavMeshVersion, "NavMeshVersion");
                    }
                    if ((printMask?.MapInfos?.Overall ?? true)
                        && MapInfos.TryGet(out var MapInfosItem))
                    {
                        fg.AppendLine("MapInfos =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(MapInfosItem.Overall);
                            if (MapInfosItem.Specific != null)
                            {
                                foreach (var subItem in MapInfosItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.PreferredPathing?.Overall ?? true)
                    {
                        PreferredPathing?.ToString(fg);
                    }
                    if (printMask?.NVSI ?? true)
                    {
                        fg.AppendItem(NVSI, "NVSI");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? NavMeshVersion;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMapInfo.ErrorMask?>>?>? MapInfos;
            public MaskItem<Exception?, PreferredPathing.ErrorMask?>? PreferredPathing;
            public Exception? NVSI;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                        return NavMeshVersion;
                    case NavigationMeshInfoMap_FieldIndex.MapInfos:
                        return MapInfos;
                    case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                        return PreferredPathing;
                    case NavigationMeshInfoMap_FieldIndex.NVSI:
                        return NVSI;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                        this.NavMeshVersion = ex;
                        break;
                    case NavigationMeshInfoMap_FieldIndex.MapInfos:
                        this.MapInfos = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMapInfo.ErrorMask?>>?>(ex, null);
                        break;
                    case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                        this.PreferredPathing = new MaskItem<Exception?, PreferredPathing.ErrorMask?>(ex, null);
                        break;
                    case NavigationMeshInfoMap_FieldIndex.NVSI:
                        this.NVSI = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                NavigationMeshInfoMap_FieldIndex enu = (NavigationMeshInfoMap_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMeshInfoMap_FieldIndex.NavMeshVersion:
                        this.NavMeshVersion = (Exception?)obj;
                        break;
                    case NavigationMeshInfoMap_FieldIndex.MapInfos:
                        this.MapInfos = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMapInfo.ErrorMask?>>?>)obj;
                        break;
                    case NavigationMeshInfoMap_FieldIndex.PreferredPathing:
                        this.PreferredPathing = (MaskItem<Exception?, PreferredPathing.ErrorMask?>?)obj;
                        break;
                    case NavigationMeshInfoMap_FieldIndex.NVSI:
                        this.NVSI = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (NavMeshVersion != null) return true;
                if (MapInfos != null) return true;
                if (PreferredPathing != null) return true;
                if (NVSI != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(NavMeshVersion, "NavMeshVersion");
                if (MapInfos.TryGet(out var MapInfosItem))
                {
                    fg.AppendLine("MapInfos =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(MapInfosItem.Overall);
                        if (MapInfosItem.Specific != null)
                        {
                            foreach (var subItem in MapInfosItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                PreferredPathing?.ToString(fg);
                fg.AppendItem(NVSI, "NVSI");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NavMeshVersion = this.NavMeshVersion.Combine(rhs.NavMeshVersion);
                ret.MapInfos = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NavigationMapInfo.ErrorMask?>>?>(ExceptionExt.Combine(this.MapInfos?.Overall, rhs.MapInfos?.Overall), ExceptionExt.Combine(this.MapInfos?.Specific, rhs.MapInfos?.Specific));
                ret.PreferredPathing = this.PreferredPathing.Combine(rhs.PreferredPathing, (l, r) => l.Combine(r));
                ret.NVSI = this.NVSI.Combine(rhs.NVSI);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool NavMeshVersion;
            public NavigationMapInfo.TranslationMask? MapInfos;
            public PreferredPathing.TranslationMask? PreferredPathing;
            public bool NVSI;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.NavMeshVersion = defaultOn;
                this.NVSI = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((NavMeshVersion, null));
                ret.Add((MapInfos == null ? DefaultOn : !MapInfos.GetCrystal().CopyNothing, MapInfos?.GetCrystal()));
                ret.Add((PreferredPathing != null ? PreferredPathing.OnOverall : DefaultOn, PreferredPathing?.GetCrystal()));
                ret.Add((NVSI, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = NavigationMeshInfoMap_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => NavigationMeshInfoMapCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavigationMeshInfoMapSetterCommon.Instance.RemapLinks(this, mapping);
        public NavigationMeshInfoMap(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private NavigationMeshInfoMap(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal NavigationMeshInfoMap(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public NavigationMeshInfoMap(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public NavigationMeshInfoMap(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NavigationMeshInfoMapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavigationMeshInfoMapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static NavigationMeshInfoMap CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NavigationMeshInfoMap();
            ((NavigationMeshInfoMapSetterCommon)((INavigationMeshInfoMapGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NavigationMeshInfoMap item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((NavigationMeshInfoMapSetterCommon)((INavigationMeshInfoMapGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new NavigationMeshInfoMap GetNew()
        {
            return new NavigationMeshInfoMap();
        }

    }
    #endregion

    #region Interface
    public partial interface INavigationMeshInfoMap :
        INavigationMeshInfoMapGetter,
        IFallout4MajorRecord,
        ILoquiObjectSetter<INavigationMeshInfoMapInternal>,
        IFormLinkContainer
    {
        new UInt32? NavMeshVersion { get; set; }
        new ExtendedList<NavigationMapInfo> MapInfos { get; }
        new PreferredPathing? PreferredPathing { get; set; }
        new MemorySlice<Byte>? NVSI { get; set; }
    }

    public partial interface INavigationMeshInfoMapInternal :
        IFallout4MajorRecordInternal,
        INavigationMeshInfoMap,
        INavigationMeshInfoMapGetter
    {
    }

    public partial interface INavigationMeshInfoMapGetter :
        IFallout4MajorRecordGetter,
        ILoquiObject<INavigationMeshInfoMapGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => NavigationMeshInfoMap_Registration.Instance;
        UInt32? NavMeshVersion { get; }
        IReadOnlyList<INavigationMapInfoGetter> MapInfos { get; }
        IPreferredPathingGetter? PreferredPathing { get; }
        ReadOnlyMemorySlice<Byte>? NVSI { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NavigationMeshInfoMapMixIn
    {
        public static void Clear(this INavigationMeshInfoMapInternal item)
        {
            ((NavigationMeshInfoMapSetterCommon)((INavigationMeshInfoMapGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NavigationMeshInfoMap.Mask<bool> GetEqualsMask(
            this INavigationMeshInfoMapGetter item,
            INavigationMeshInfoMapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INavigationMeshInfoMapGetter item,
            string? name = null,
            NavigationMeshInfoMap.Mask<bool>? printMask = null)
        {
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INavigationMeshInfoMapGetter item,
            FileGeneration fg,
            string? name = null,
            NavigationMeshInfoMap.Mask<bool>? printMask = null)
        {
            ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INavigationMeshInfoMapGetter item,
            INavigationMeshInfoMapGetter rhs)
        {
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this INavigationMeshInfoMapInternal lhs,
            INavigationMeshInfoMapGetter rhs,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NavigationMeshInfoMap.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INavigationMeshInfoMapInternal lhs,
            INavigationMeshInfoMapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NavigationMeshInfoMap DeepCopy(
            this INavigationMeshInfoMapGetter item,
            NavigationMeshInfoMap.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NavigationMeshInfoMap DeepCopy(
            this INavigationMeshInfoMapGetter item,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NavigationMeshInfoMap DeepCopy(
            this INavigationMeshInfoMapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static NavigationMeshInfoMap Duplicate(
            this INavigationMeshInfoMapGetter item,
            FormKey formKey,
            NavigationMeshInfoMap.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this INavigationMeshInfoMapInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavigationMeshInfoMapSetterCommon)((INavigationMeshInfoMapGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum NavigationMeshInfoMap_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        NavMeshVersion = 6,
        MapInfos = 7,
        PreferredPathing = 8,
        NVSI = 9,
    }
    #endregion

    #region Registration
    public partial class NavigationMeshInfoMap_Registration : ILoquiRegistration
    {
        public static readonly NavigationMeshInfoMap_Registration Instance = new NavigationMeshInfoMap_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 273,
            version: 0);

        public const string GUID = "046f7be8-3a4f-44f6-ac46-f94f92ec47eb";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(NavigationMeshInfoMap.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NavigationMeshInfoMap.ErrorMask);

        public static readonly Type ClassType = typeof(NavigationMeshInfoMap);

        public static readonly Type GetterType = typeof(INavigationMeshInfoMapGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INavigationMeshInfoMap);

        public static readonly Type? InternalSetterType = typeof(INavigationMeshInfoMapInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.NavigationMeshInfoMap";

        public const string Name = "NavigationMeshInfoMap";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAVI;
        public static readonly Type BinaryWriteTranslation = typeof(NavigationMeshInfoMapBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class NavigationMeshInfoMapSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly NavigationMeshInfoMapSetterCommon Instance = new NavigationMeshInfoMapSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INavigationMeshInfoMapInternal item)
        {
            ClearPartial();
            item.NavMeshVersion = default;
            item.MapInfos.Clear();
            item.PreferredPathing = null;
            item.NVSI = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (INavigationMeshInfoMapInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INavigationMeshInfoMapInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(INavigationMeshInfoMap obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.MapInfos.RemapLinks(mapping);
            obj.PreferredPathing?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INavigationMeshInfoMapInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<INavigationMeshInfoMapInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: NavigationMeshInfoMapBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: NavigationMeshInfoMapBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (NavigationMeshInfoMap)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (NavigationMeshInfoMap)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class NavigationMeshInfoMapCommon : Fallout4MajorRecordCommon
    {
        public new static readonly NavigationMeshInfoMapCommon Instance = new NavigationMeshInfoMapCommon();

        public NavigationMeshInfoMap.Mask<bool> GetEqualsMask(
            INavigationMeshInfoMapGetter item,
            INavigationMeshInfoMapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NavigationMeshInfoMap.Mask<bool>(false);
            ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INavigationMeshInfoMapGetter item,
            INavigationMeshInfoMapGetter rhs,
            NavigationMeshInfoMap.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.NavMeshVersion = item.NavMeshVersion == rhs.NavMeshVersion;
            ret.MapInfos = item.MapInfos.CollectionEqualsHelper(
                rhs.MapInfos,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.PreferredPathing = EqualsMaskHelper.EqualsHelper(
                item.PreferredPathing,
                rhs.PreferredPathing,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.NVSI = MemorySliceExt.Equal(item.NVSI, rhs.NVSI);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            INavigationMeshInfoMapGetter item,
            string? name = null,
            NavigationMeshInfoMap.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INavigationMeshInfoMapGetter item,
            FileGeneration fg,
            string? name = null,
            NavigationMeshInfoMap.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NavigationMeshInfoMap =>");
            }
            else
            {
                fg.AppendLine($"{name} (NavigationMeshInfoMap) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INavigationMeshInfoMapGetter item,
            FileGeneration fg,
            NavigationMeshInfoMap.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.NavMeshVersion ?? true)
                && item.NavMeshVersion.TryGet(out var NavMeshVersionItem))
            {
                fg.AppendItem(NavMeshVersionItem, "NavMeshVersion");
            }
            if (printMask?.MapInfos?.Overall ?? true)
            {
                fg.AppendLine("MapInfos =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.MapInfos)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.PreferredPathing?.Overall ?? true)
                && item.PreferredPathing.TryGet(out var PreferredPathingItem))
            {
                PreferredPathingItem?.ToString(fg, "PreferredPathing");
            }
            if ((printMask?.NVSI ?? true)
                && item.NVSI.TryGet(out var NVSIItem))
            {
                fg.AppendLine($"NVSI => {SpanExt.ToHexString(NVSIItem)}");
            }
        }
        
        public static NavigationMeshInfoMap_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new NavigationMeshInfoMap_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (NavigationMeshInfoMap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INavigationMeshInfoMapGetter? lhs,
            INavigationMeshInfoMapGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (lhs.NavMeshVersion != rhs.NavMeshVersion) return false;
            if (!lhs.MapInfos.SequenceEqualNullable(rhs.MapInfos)) return false;
            if (!object.Equals(lhs.PreferredPathing, rhs.PreferredPathing)) return false;
            if (!MemorySliceExt.Equal(lhs.NVSI, rhs.NVSI)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (INavigationMeshInfoMapGetter?)lhs,
                rhs: rhs as INavigationMeshInfoMapGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (INavigationMeshInfoMapGetter?)lhs,
                rhs: rhs as INavigationMeshInfoMapGetter);
        }
        
        public virtual int GetHashCode(INavigationMeshInfoMapGetter item)
        {
            var hash = new HashCode();
            if (item.NavMeshVersion.TryGet(out var NavMeshVersionitem))
            {
                hash.Add(NavMeshVersionitem);
            }
            hash.Add(item.MapInfos);
            if (item.PreferredPathing.TryGet(out var PreferredPathingitem))
            {
                hash.Add(PreferredPathingitem);
            }
            if (item.NVSI.TryGet(out var NVSIItem))
            {
                hash.Add(NVSIItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (INavigationMeshInfoMapGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (INavigationMeshInfoMapGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return NavigationMeshInfoMap.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(INavigationMeshInfoMapGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.MapInfos.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.PreferredPathing.TryGet(out var PreferredPathingItems))
            {
                foreach (var item in PreferredPathingItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public NavigationMeshInfoMap Duplicate(
            INavigationMeshInfoMapGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new NavigationMeshInfoMap(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INavigationMeshInfoMap)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INavigationMeshInfoMap)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class NavigationMeshInfoMapSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly NavigationMeshInfoMapSetterTranslationCommon Instance = new NavigationMeshInfoMapSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INavigationMeshInfoMapInternal item,
            INavigationMeshInfoMapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            INavigationMeshInfoMap item,
            INavigationMeshInfoMapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.NavMeshVersion) ?? true))
            {
                item.NavMeshVersion = rhs.NavMeshVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.MapInfos) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMeshInfoMap_FieldIndex.MapInfos);
                try
                {
                    item.MapInfos.SetTo(
                        rhs.MapInfos
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing);
                try
                {
                    if(rhs.PreferredPathing.TryGet(out var rhsPreferredPathing))
                    {
                        item.PreferredPathing = rhsPreferredPathing.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NavigationMeshInfoMap_FieldIndex.PreferredPathing));
                    }
                    else
                    {
                        item.PreferredPathing = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshInfoMap_FieldIndex.NVSI) ?? true))
            {
                if(rhs.NVSI.TryGet(out var NVSIrhs))
                {
                    item.NVSI = NVSIrhs.ToArray();
                }
                else
                {
                    item.NVSI = default;
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInfoMapInternal)item,
                rhs: (INavigationMeshInfoMapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInfoMap)item,
                rhs: (INavigationMeshInfoMapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInfoMapInternal)item,
                rhs: (INavigationMeshInfoMapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInfoMap)item,
                rhs: (INavigationMeshInfoMapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public NavigationMeshInfoMap DeepCopy(
            INavigationMeshInfoMapGetter item,
            NavigationMeshInfoMap.TranslationMask? copyMask = null)
        {
            NavigationMeshInfoMap ret = (NavigationMeshInfoMap)((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NavigationMeshInfoMap DeepCopy(
            INavigationMeshInfoMapGetter item,
            out NavigationMeshInfoMap.ErrorMask errorMask,
            NavigationMeshInfoMap.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NavigationMeshInfoMap ret = (NavigationMeshInfoMap)((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NavigationMeshInfoMap.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NavigationMeshInfoMap DeepCopy(
            INavigationMeshInfoMapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NavigationMeshInfoMap ret = (NavigationMeshInfoMap)((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshInfoMapSetterTranslationCommon)((INavigationMeshInfoMapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class NavigationMeshInfoMap
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMeshInfoMap_Registration.Instance;
        public new static NavigationMeshInfoMap_Registration Registration => NavigationMeshInfoMap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NavigationMeshInfoMapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NavigationMeshInfoMapSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NavigationMeshInfoMapSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NavigationMeshInfoMapBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static NavigationMeshInfoMapBinaryWriteTranslation Instance = new NavigationMeshInfoMapBinaryWriteTranslation();

        public static void WriteRecordTypes(
            INavigationMeshInfoMapGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NavMeshVersion,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NVER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<INavigationMapInfoGetter>.Instance.Write(
                writer: writer,
                items: item.MapInfos,
                transl: (MutagenWriter subWriter, INavigationMapInfoGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((NavigationMapInfoBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.PreferredPathing.TryGet(out var PreferredPathingItem))
            {
                ((PreferredPathingBinaryWriteTranslation)((IBinaryItem)PreferredPathingItem).BinaryWriteTranslator).Write(
                    item: PreferredPathingItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NVSI,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NVSI));
        }

        public void Write(
            MutagenWriter writer,
            INavigationMeshInfoMapGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.NAVI),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INavigationMeshInfoMapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INavigationMeshInfoMapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INavigationMeshInfoMapGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class NavigationMeshInfoMapBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static NavigationMeshInfoMapBinaryCreateTranslation Instance = new NavigationMeshInfoMapBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.NAVI;
        public static void FillBinaryStructs(
            INavigationMeshInfoMapInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            INavigationMeshInfoMapInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NVER:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NavMeshVersion = frame.ReadUInt32();
                    return (int)NavigationMeshInfoMap_FieldIndex.NavMeshVersion;
                }
                case RecordTypeInts.NVMI:
                {
                    item.MapInfos.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<NavigationMapInfo>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.NVMI,
                            recordTypeConverter: recordTypeConverter,
                            transl: NavigationMapInfo.TryCreateFromBinary));
                    return (int)NavigationMeshInfoMap_FieldIndex.MapInfos;
                }
                case RecordTypeInts.NVPP:
                {
                    item.PreferredPathing = Mutagen.Bethesda.Fallout4.PreferredPathing.CreateFromBinary(frame: frame);
                    return (int)NavigationMeshInfoMap_FieldIndex.PreferredPathing;
                }
                case RecordTypeInts.NVSI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NVSI = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)NavigationMeshInfoMap_FieldIndex.NVSI;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NavigationMeshInfoMapBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NavigationMeshInfoMapBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        INavigationMeshInfoMapGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMeshInfoMap_Registration.Instance;
        public new static NavigationMeshInfoMap_Registration Registration => NavigationMeshInfoMap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NavigationMeshInfoMapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NavigationMeshInfoMapSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => NavigationMeshInfoMapCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NavigationMeshInfoMapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NavigationMeshInfoMapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region NavMeshVersion
        private int? _NavMeshVersionLocation;
        public UInt32? NavMeshVersion => _NavMeshVersionLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _NavMeshVersionLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        public IReadOnlyList<INavigationMapInfoGetter> MapInfos { get; private set; } = ListExt.Empty<NavigationMapInfoBinaryOverlay>();
        #region PreferredPathing
        private RangeInt32? _PreferredPathingLocation;
        public IPreferredPathingGetter? PreferredPathing => _PreferredPathingLocation.HasValue ? PreferredPathingBinaryOverlay.PreferredPathingFactory(new OverlayStream(_data.Slice(_PreferredPathingLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region NVSI
        private int? _NVSILocation;
        public ReadOnlyMemorySlice<Byte>? NVSI => _NVSILocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _NVSILocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NavigationMeshInfoMapBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static NavigationMeshInfoMapBinaryOverlay NavigationMeshInfoMapFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new NavigationMeshInfoMapBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static NavigationMeshInfoMapBinaryOverlay NavigationMeshInfoMapFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return NavigationMeshInfoMapFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NVER:
                {
                    _NavMeshVersionLocation = (stream.Position - offset);
                    return (int)NavigationMeshInfoMap_FieldIndex.NavMeshVersion;
                }
                case RecordTypeInts.NVMI:
                {
                    this.MapInfos = BinaryOverlayList.FactoryByArray<NavigationMapInfoBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => NavigationMapInfoBinaryOverlay.NavigationMapInfoFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)NavigationMeshInfoMap_FieldIndex.MapInfos;
                }
                case RecordTypeInts.NVPP:
                {
                    _PreferredPathingLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)NavigationMeshInfoMap_FieldIndex.PreferredPathing;
                }
                case RecordTypeInts.NVSI:
                {
                    _NVSILocation = (stream.Position - offset);
                    return (int)NavigationMeshInfoMap_FieldIndex.NVSI;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NavigationMeshInfoMapMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INavigationMeshInfoMapGetter rhs)) return false;
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INavigationMeshInfoMapGetter? obj)
        {
            return ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NavigationMeshInfoMapCommon)((INavigationMeshInfoMapGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

