/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class LeveledItemEntry :
        ILeveledItemEntry,
        ILoquiObjectSetter<LeveledItemEntry>,
        IEquatable<ILeveledItemEntryGetter>
    {
        #region Ctor
        public LeveledItemEntry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LeveledItemEntryData? _Data;
        public LeveledItemEntryData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILeveledItemEntryDataGetter? ILeveledItemEntryGetter.Data => this.Data;
        #endregion
        #region ExtraData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtraData? _ExtraData;
        public ExtraData? ExtraData
        {
            get => _ExtraData;
            set => _ExtraData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExtraDataGetter? ILeveledItemEntryGetter.ExtraData => this.ExtraData;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LeveledItemEntryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILeveledItemEntryGetter rhs)) return false;
            return ((LeveledItemEntryCommon)((ILeveledItemEntryGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILeveledItemEntryGetter? obj)
        {
            return ((LeveledItemEntryCommon)((ILeveledItemEntryGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LeveledItemEntryCommon)((ILeveledItemEntryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Data = new MaskItem<TItem, LeveledItemEntryData.Mask<TItem>?>(initialValue, new LeveledItemEntryData.Mask<TItem>(initialValue));
                this.ExtraData = new MaskItem<TItem, ExtraData.Mask<TItem>?>(initialValue, new ExtraData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Data,
                TItem ExtraData)
            {
                this.Data = new MaskItem<TItem, LeveledItemEntryData.Mask<TItem>?>(Data, new LeveledItemEntryData.Mask<TItem>(Data));
                this.ExtraData = new MaskItem<TItem, ExtraData.Mask<TItem>?>(ExtraData, new ExtraData.Mask<TItem>(ExtraData));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, LeveledItemEntryData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, ExtraData.Mask<TItem>?>? ExtraData { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.ExtraData, rhs.ExtraData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Data);
                hash.Add(this.ExtraData);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (ExtraData != null)
                {
                    if (!eval(this.ExtraData.Overall)) return false;
                    if (this.ExtraData.Specific != null && !this.ExtraData.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (ExtraData != null)
                {
                    if (eval(this.ExtraData.Overall)) return true;
                    if (this.ExtraData.Specific != null && this.ExtraData.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LeveledItemEntry.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Data = this.Data == null ? null : new MaskItem<R, LeveledItemEntryData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.ExtraData = this.ExtraData == null ? null : new MaskItem<R, ExtraData.Mask<R>?>(eval(this.ExtraData.Overall), this.ExtraData.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LeveledItemEntry.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LeveledItemEntry.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LeveledItemEntry.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if (printMask?.ExtraData?.Overall ?? true)
                    {
                        ExtraData?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, LeveledItemEntryData.ErrorMask?>? Data;
            public MaskItem<Exception?, ExtraData.ErrorMask?>? ExtraData;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LeveledItemEntry_FieldIndex enu = (LeveledItemEntry_FieldIndex)index;
                switch (enu)
                {
                    case LeveledItemEntry_FieldIndex.Data:
                        return Data;
                    case LeveledItemEntry_FieldIndex.ExtraData:
                        return ExtraData;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LeveledItemEntry_FieldIndex enu = (LeveledItemEntry_FieldIndex)index;
                switch (enu)
                {
                    case LeveledItemEntry_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, LeveledItemEntryData.ErrorMask?>(ex, null);
                        break;
                    case LeveledItemEntry_FieldIndex.ExtraData:
                        this.ExtraData = new MaskItem<Exception?, ExtraData.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LeveledItemEntry_FieldIndex enu = (LeveledItemEntry_FieldIndex)index;
                switch (enu)
                {
                    case LeveledItemEntry_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, LeveledItemEntryData.ErrorMask?>?)obj;
                        break;
                    case LeveledItemEntry_FieldIndex.ExtraData:
                        this.ExtraData = (MaskItem<Exception?, ExtraData.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Data != null) return true;
                if (ExtraData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                Data?.ToString(fg);
                ExtraData?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.ExtraData = this.ExtraData.Combine(rhs.ExtraData, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public LeveledItemEntryData.TranslationMask? Data;
            public ExtraData.TranslationMask? ExtraData;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((ExtraData != null ? ExtraData.OnOverall : DefaultOn, ExtraData?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<FormLinkInformation> ContainedFormLinks => LeveledItemEntryCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LeveledItemEntrySetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LeveledItemEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledItemEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static LeveledItemEntry CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LeveledItemEntry();
            ((LeveledItemEntrySetterCommon)((ILeveledItemEntryGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LeveledItemEntry item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LeveledItemEntrySetterCommon)((ILeveledItemEntryGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LeveledItemEntry GetNew()
        {
            return new LeveledItemEntry();
        }

    }
    #endregion

    #region Interface
    public partial interface ILeveledItemEntry :
        ILeveledItemEntryGetter,
        ILoquiObjectSetter<ILeveledItemEntry>,
        IFormLinkContainer
    {
        new LeveledItemEntryData? Data { get; set; }
        new ExtraData? ExtraData { get; set; }
    }

    public partial interface ILeveledItemEntryGetter :
        ILoquiObject,
        ILoquiObject<ILeveledItemEntryGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => LeveledItemEntry_Registration.Instance;
        ILeveledItemEntryDataGetter? Data { get; }
        IExtraDataGetter? ExtraData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LeveledItemEntryMixIn
    {
        public static void Clear(this ILeveledItemEntry item)
        {
            ((LeveledItemEntrySetterCommon)((ILeveledItemEntryGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LeveledItemEntry.Mask<bool> GetEqualsMask(
            this ILeveledItemEntryGetter item,
            ILeveledItemEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LeveledItemEntryCommon)((ILeveledItemEntryGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILeveledItemEntryGetter item,
            string? name = null,
            LeveledItemEntry.Mask<bool>? printMask = null)
        {
            return ((LeveledItemEntryCommon)((ILeveledItemEntryGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILeveledItemEntryGetter item,
            FileGeneration fg,
            string? name = null,
            LeveledItemEntry.Mask<bool>? printMask = null)
        {
            ((LeveledItemEntryCommon)((ILeveledItemEntryGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILeveledItemEntryGetter item,
            ILeveledItemEntryGetter rhs)
        {
            return ((LeveledItemEntryCommon)((ILeveledItemEntryGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILeveledItemEntry lhs,
            ILeveledItemEntryGetter rhs)
        {
            ((LeveledItemEntrySetterTranslationCommon)((ILeveledItemEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILeveledItemEntry lhs,
            ILeveledItemEntryGetter rhs,
            LeveledItemEntry.TranslationMask? copyMask = null)
        {
            ((LeveledItemEntrySetterTranslationCommon)((ILeveledItemEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILeveledItemEntry lhs,
            ILeveledItemEntryGetter rhs,
            out LeveledItemEntry.ErrorMask errorMask,
            LeveledItemEntry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LeveledItemEntrySetterTranslationCommon)((ILeveledItemEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LeveledItemEntry.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILeveledItemEntry lhs,
            ILeveledItemEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LeveledItemEntrySetterTranslationCommon)((ILeveledItemEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LeveledItemEntry DeepCopy(
            this ILeveledItemEntryGetter item,
            LeveledItemEntry.TranslationMask? copyMask = null)
        {
            return ((LeveledItemEntrySetterTranslationCommon)((ILeveledItemEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LeveledItemEntry DeepCopy(
            this ILeveledItemEntryGetter item,
            out LeveledItemEntry.ErrorMask errorMask,
            LeveledItemEntry.TranslationMask? copyMask = null)
        {
            return ((LeveledItemEntrySetterTranslationCommon)((ILeveledItemEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LeveledItemEntry DeepCopy(
            this ILeveledItemEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LeveledItemEntrySetterTranslationCommon)((ILeveledItemEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILeveledItemEntry item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledItemEntrySetterCommon)((ILeveledItemEntryGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum LeveledItemEntry_FieldIndex
    {
        Data = 0,
        ExtraData = 1,
    }
    #endregion

    #region Registration
    public partial class LeveledItemEntry_Registration : ILoquiRegistration
    {
        public static readonly LeveledItemEntry_Registration Instance = new LeveledItemEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 239,
            version: 0);

        public const string GUID = "a077418e-1fb2-4956-abe3-a48f9d76449b";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(LeveledItemEntry.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledItemEntry.ErrorMask);

        public static readonly Type ClassType = typeof(LeveledItemEntry);

        public static readonly Type GetterType = typeof(ILeveledItemEntryGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILeveledItemEntry);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.LeveledItemEntry";

        public const string Name = "LeveledItemEntry";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.LVLO,
                        RecordTypes.COED
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(LeveledItemEntryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class LeveledItemEntrySetterCommon
    {
        public static readonly LeveledItemEntrySetterCommon Instance = new LeveledItemEntrySetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILeveledItemEntry item)
        {
            ClearPartial();
            item.Data = null;
            item.ExtraData = null;
        }
        
        #region Mutagen
        public void RemapLinks(ILeveledItemEntry obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Data?.RemapLinks(mapping);
            obj.ExtraData?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILeveledItemEntry item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LeveledItemEntryBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LeveledItemEntryBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class LeveledItemEntryCommon
    {
        public static readonly LeveledItemEntryCommon Instance = new LeveledItemEntryCommon();

        public LeveledItemEntry.Mask<bool> GetEqualsMask(
            ILeveledItemEntryGetter item,
            ILeveledItemEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LeveledItemEntry.Mask<bool>(false);
            ((LeveledItemEntryCommon)((ILeveledItemEntryGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILeveledItemEntryGetter item,
            ILeveledItemEntryGetter rhs,
            LeveledItemEntry.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ExtraData = EqualsMaskHelper.EqualsHelper(
                item.ExtraData,
                rhs.ExtraData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            ILeveledItemEntryGetter item,
            string? name = null,
            LeveledItemEntry.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILeveledItemEntryGetter item,
            FileGeneration fg,
            string? name = null,
            LeveledItemEntry.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LeveledItemEntry =>");
            }
            else
            {
                fg.AppendLine($"{name} (LeveledItemEntry) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILeveledItemEntryGetter item,
            FileGeneration fg,
            LeveledItemEntry.Mask<bool>? printMask = null)
        {
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
            if ((printMask?.ExtraData?.Overall ?? true)
                && item.ExtraData.TryGet(out var ExtraDataItem))
            {
                ExtraDataItem?.ToString(fg, "ExtraData");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILeveledItemEntryGetter? lhs,
            ILeveledItemEntryGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (!object.Equals(lhs.ExtraData, rhs.ExtraData)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ILeveledItemEntryGetter item)
        {
            var hash = new HashCode();
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            if (item.ExtraData.TryGet(out var ExtraDataitem))
            {
                hash.Add(ExtraDataitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LeveledItemEntry.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ILeveledItemEntryGetter obj)
        {
            if (obj.Data.TryGet(out var DataItems))
            {
                foreach (var item in DataItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ExtraData is IFormLinkContainerGetter ExtraDatalinkCont)
            {
                foreach (var item in ExtraDatalinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class LeveledItemEntrySetterTranslationCommon
    {
        public static readonly LeveledItemEntrySetterTranslationCommon Instance = new LeveledItemEntrySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILeveledItemEntry item,
            ILeveledItemEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)LeveledItemEntry_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)LeveledItemEntry_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LeveledItemEntry_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledItemEntry_FieldIndex.ExtraData) ?? true))
            {
                errorMask?.PushIndex((int)LeveledItemEntry_FieldIndex.ExtraData);
                try
                {
                    if(rhs.ExtraData.TryGet(out var rhsExtraData))
                    {
                        item.ExtraData = rhsExtraData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LeveledItemEntry_FieldIndex.ExtraData));
                    }
                    else
                    {
                        item.ExtraData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public LeveledItemEntry DeepCopy(
            ILeveledItemEntryGetter item,
            LeveledItemEntry.TranslationMask? copyMask = null)
        {
            LeveledItemEntry ret = (LeveledItemEntry)((LeveledItemEntryCommon)((ILeveledItemEntryGetter)item).CommonInstance()!).GetNew();
            ((LeveledItemEntrySetterTranslationCommon)((ILeveledItemEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LeveledItemEntry DeepCopy(
            ILeveledItemEntryGetter item,
            out LeveledItemEntry.ErrorMask errorMask,
            LeveledItemEntry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LeveledItemEntry ret = (LeveledItemEntry)((LeveledItemEntryCommon)((ILeveledItemEntryGetter)item).CommonInstance()!).GetNew();
            ((LeveledItemEntrySetterTranslationCommon)((ILeveledItemEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LeveledItemEntry.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LeveledItemEntry DeepCopy(
            ILeveledItemEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LeveledItemEntry ret = (LeveledItemEntry)((LeveledItemEntryCommon)((ILeveledItemEntryGetter)item).CommonInstance()!).GetNew();
            ((LeveledItemEntrySetterTranslationCommon)((ILeveledItemEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class LeveledItemEntry
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledItemEntry_Registration.Instance;
        public static LeveledItemEntry_Registration Registration => LeveledItemEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LeveledItemEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LeveledItemEntrySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LeveledItemEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILeveledItemEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILeveledItemEntryGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILeveledItemEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LeveledItemEntryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LeveledItemEntryBinaryWriteTranslation Instance = new LeveledItemEntryBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ILeveledItemEntryGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            if (item.Data.TryGet(out var DataItem))
            {
                ((LeveledItemEntryDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.ExtraData.TryGet(out var ExtraDataItem))
            {
                ((ExtraDataBinaryWriteTranslation)((IBinaryItem)ExtraDataItem).BinaryWriteTranslator).Write(
                    item: ExtraDataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            ILeveledItemEntryGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILeveledItemEntryGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LeveledItemEntryBinaryCreateTranslation
    {
        public readonly static LeveledItemEntryBinaryCreateTranslation Instance = new LeveledItemEntryBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILeveledItemEntry item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            ILeveledItemEntry item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.LVLO:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LeveledItemEntry_FieldIndex.Data) return ParseResult.Stop;
                    item.Data = Mutagen.Bethesda.Fallout4.LeveledItemEntryData.CreateFromBinary(frame: frame);
                    return (int)LeveledItemEntry_FieldIndex.Data;
                }
                case RecordTypeInts.COED:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LeveledItemEntry_FieldIndex.ExtraData) return ParseResult.Stop;
                    item.ExtraData = Mutagen.Bethesda.Fallout4.ExtraData.CreateFromBinary(frame: frame);
                    return (int)LeveledItemEntry_FieldIndex.ExtraData;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class LeveledItemEntryBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILeveledItemEntryGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledItemEntryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LeveledItemEntryBinaryOverlay :
        BinaryOverlay,
        ILeveledItemEntryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledItemEntry_Registration.Instance;
        public static LeveledItemEntry_Registration Registration => LeveledItemEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LeveledItemEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LeveledItemEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILeveledItemEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILeveledItemEntryGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILeveledItemEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => LeveledItemEntryCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LeveledItemEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledItemEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Data
        private RangeInt32? _DataLocation;
        public ILeveledItemEntryDataGetter? Data => _DataLocation.HasValue ? LeveledItemEntryDataBinaryOverlay.LeveledItemEntryDataFactory(new OverlayStream(_data.Slice(_DataLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region ExtraData
        private RangeInt32? _ExtraDataLocation;
        public IExtraDataGetter? ExtraData => _ExtraDataLocation.HasValue ? ExtraDataBinaryOverlay.ExtraDataFactory(new OverlayStream(_data.Slice(_ExtraDataLocation!.Value.Min), _package), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LeveledItemEntryBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LeveledItemEntryBinaryOverlay LeveledItemEntryFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LeveledItemEntryBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static LeveledItemEntryBinaryOverlay LeveledItemEntryFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LeveledItemEntryFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.LVLO:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LeveledItemEntry_FieldIndex.Data) return ParseResult.Stop;
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)LeveledItemEntry_FieldIndex.Data;
                }
                case RecordTypeInts.COED:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LeveledItemEntry_FieldIndex.ExtraData) return ParseResult.Stop;
                    _ExtraDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)LeveledItemEntry_FieldIndex.ExtraData;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LeveledItemEntryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILeveledItemEntryGetter rhs)) return false;
            return ((LeveledItemEntryCommon)((ILeveledItemEntryGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILeveledItemEntryGetter? obj)
        {
            return ((LeveledItemEntryCommon)((ILeveledItemEntryGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LeveledItemEntryCommon)((ILeveledItemEntryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

