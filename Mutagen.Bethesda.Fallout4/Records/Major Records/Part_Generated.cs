/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Part :
        IPart,
        ILoquiObjectSetter<Part>,
        IEquatable<IPartGetter>
    {
        #region Ctor
        public Part()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region PartType
        public Part.PartTypeEnum? PartType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Part.PartTypeEnum? IPartGetter.PartType => this.PartType;
        #endregion
        #region FileName
        public String? FileName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPartGetter.FileName => this.FileName;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PartMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPartGetter rhs)) return false;
            return ((PartCommon)((IPartGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPartGetter? obj)
        {
            return ((PartCommon)((IPartGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PartCommon)((IPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.PartType = initialValue;
                this.FileName = initialValue;
            }

            public Mask(
                TItem PartType,
                TItem FileName)
            {
                this.PartType = PartType;
                this.FileName = FileName;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem PartType;
            public TItem FileName;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.PartType, rhs.PartType)) return false;
                if (!object.Equals(this.FileName, rhs.FileName)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.PartType);
                hash.Add(this.FileName);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.PartType)) return false;
                if (!eval(this.FileName)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.PartType)) return true;
                if (eval(this.FileName)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Part.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.PartType = eval(this.PartType);
                obj.FileName = eval(this.FileName);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Part.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Part.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Part.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.PartType ?? true)
                    {
                        fg.AppendItem(PartType, "PartType");
                    }
                    if (printMask?.FileName ?? true)
                    {
                        fg.AppendItem(FileName, "FileName");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? PartType;
            public Exception? FileName;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Part_FieldIndex enu = (Part_FieldIndex)index;
                switch (enu)
                {
                    case Part_FieldIndex.PartType:
                        return PartType;
                    case Part_FieldIndex.FileName:
                        return FileName;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Part_FieldIndex enu = (Part_FieldIndex)index;
                switch (enu)
                {
                    case Part_FieldIndex.PartType:
                        this.PartType = ex;
                        break;
                    case Part_FieldIndex.FileName:
                        this.FileName = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Part_FieldIndex enu = (Part_FieldIndex)index;
                switch (enu)
                {
                    case Part_FieldIndex.PartType:
                        this.PartType = (Exception?)obj;
                        break;
                    case Part_FieldIndex.FileName:
                        this.FileName = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (PartType != null) return true;
                if (FileName != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(PartType, "PartType");
                fg.AppendItem(FileName, "FileName");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.PartType = this.PartType.Combine(rhs.PartType);
                ret.FileName = this.FileName.Combine(rhs.FileName);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool PartType;
            public bool FileName;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.PartType = defaultOn;
                this.FileName = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((PartType, null));
                ret.Add((FileName, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PartBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static Part CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Part();
            ((PartSetterCommon)((IPartGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Part item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PartSetterCommon)((IPartGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Part GetNew()
        {
            return new Part();
        }

    }
    #endregion

    #region Interface
    public partial interface IPart :
        IPartGetter,
        ILoquiObjectSetter<IPart>
    {
        new Part.PartTypeEnum? PartType { get; set; }
        new String? FileName { get; set; }
    }

    public partial interface IPartGetter :
        ILoquiObject,
        ILoquiObject<IPartGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => Part_Registration.Instance;
        Part.PartTypeEnum? PartType { get; }
        String? FileName { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PartMixIn
    {
        public static void Clear(this IPart item)
        {
            ((PartSetterCommon)((IPartGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Part.Mask<bool> GetEqualsMask(
            this IPartGetter item,
            IPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PartCommon)((IPartGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPartGetter item,
            string? name = null,
            Part.Mask<bool>? printMask = null)
        {
            return ((PartCommon)((IPartGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPartGetter item,
            FileGeneration fg,
            string? name = null,
            Part.Mask<bool>? printMask = null)
        {
            ((PartCommon)((IPartGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPartGetter item,
            IPartGetter rhs)
        {
            return ((PartCommon)((IPartGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPart lhs,
            IPartGetter rhs)
        {
            ((PartSetterTranslationCommon)((IPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPart lhs,
            IPartGetter rhs,
            Part.TranslationMask? copyMask = null)
        {
            ((PartSetterTranslationCommon)((IPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPart lhs,
            IPartGetter rhs,
            out Part.ErrorMask errorMask,
            Part.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PartSetterTranslationCommon)((IPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Part.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPart lhs,
            IPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PartSetterTranslationCommon)((IPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Part DeepCopy(
            this IPartGetter item,
            Part.TranslationMask? copyMask = null)
        {
            return ((PartSetterTranslationCommon)((IPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Part DeepCopy(
            this IPartGetter item,
            out Part.ErrorMask errorMask,
            Part.TranslationMask? copyMask = null)
        {
            return ((PartSetterTranslationCommon)((IPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Part DeepCopy(
            this IPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PartSetterTranslationCommon)((IPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPart item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PartSetterCommon)((IPartGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Part_FieldIndex
    {
        PartType = 0,
        FileName = 1,
    }
    #endregion

    #region Registration
    public partial class Part_Registration : ILoquiRegistration
    {
        public static readonly Part_Registration Instance = new Part_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 45,
            version: 0);

        public const string GUID = "c4ffaf8a-c25b-42cd-aab4-35f7c641b1e8";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(Part.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Part.ErrorMask);

        public static readonly Type ClassType = typeof(Part);

        public static readonly Type GetterType = typeof(IPartGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPart);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.Part";

        public const string Name = "Part";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.NAM0,
                        RecordTypes.NAM1
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(PartBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PartSetterCommon
    {
        public static readonly PartSetterCommon Instance = new PartSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPart item)
        {
            ClearPartial();
            item.PartType = default;
            item.FileName = default;
        }
        
        #region Mutagen
        public void RemapLinks(IPart obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPart item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PartBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PartBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class PartCommon
    {
        public static readonly PartCommon Instance = new PartCommon();

        public Part.Mask<bool> GetEqualsMask(
            IPartGetter item,
            IPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Part.Mask<bool>(false);
            ((PartCommon)((IPartGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPartGetter item,
            IPartGetter rhs,
            Part.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.PartType = item.PartType == rhs.PartType;
            ret.FileName = string.Equals(item.FileName, rhs.FileName);
        }
        
        public string ToString(
            IPartGetter item,
            string? name = null,
            Part.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPartGetter item,
            FileGeneration fg,
            string? name = null,
            Part.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Part =>");
            }
            else
            {
                fg.AppendLine($"{name} (Part) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPartGetter item,
            FileGeneration fg,
            Part.Mask<bool>? printMask = null)
        {
            if ((printMask?.PartType ?? true)
                && item.PartType.TryGet(out var PartTypeItem))
            {
                fg.AppendItem(PartTypeItem, "PartType");
            }
            if ((printMask?.FileName ?? true)
                && item.FileName.TryGet(out var FileNameItem))
            {
                fg.AppendItem(FileNameItem, "FileName");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPartGetter? lhs,
            IPartGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.PartType != rhs.PartType) return false;
            if (!string.Equals(lhs.FileName, rhs.FileName)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IPartGetter item)
        {
            var hash = new HashCode();
            if (item.PartType.TryGet(out var PartTypeitem))
            {
                hash.Add(PartTypeitem);
            }
            if (item.FileName.TryGet(out var FileNameitem))
            {
                hash.Add(FileNameitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Part.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPartGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class PartSetterTranslationCommon
    {
        public static readonly PartSetterTranslationCommon Instance = new PartSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPart item,
            IPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Part_FieldIndex.PartType) ?? true))
            {
                item.PartType = rhs.PartType;
            }
            if ((copyMask?.GetShouldTranslate((int)Part_FieldIndex.FileName) ?? true))
            {
                item.FileName = rhs.FileName;
            }
        }
        
        #endregion
        
        public Part DeepCopy(
            IPartGetter item,
            Part.TranslationMask? copyMask = null)
        {
            Part ret = (Part)((PartCommon)((IPartGetter)item).CommonInstance()!).GetNew();
            ((PartSetterTranslationCommon)((IPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Part DeepCopy(
            IPartGetter item,
            out Part.ErrorMask errorMask,
            Part.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Part ret = (Part)((PartCommon)((IPartGetter)item).CommonInstance()!).GetNew();
            ((PartSetterTranslationCommon)((IPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Part.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Part DeepCopy(
            IPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Part ret = (Part)((PartCommon)((IPartGetter)item).CommonInstance()!).GetNew();
            ((PartSetterTranslationCommon)((IPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Part
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Part_Registration.Instance;
        public static Part_Registration Registration => Part_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PartCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PartSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PartSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPartGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPartGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPartGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PartBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static PartBinaryWriteTranslation Instance = new PartBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IPartGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Part.PartTypeEnum>.Instance.WriteNullable(
                writer,
                item.PartType,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM0));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FileName,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IPartGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPartGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PartBinaryCreateTranslation
    {
        public readonly static PartBinaryCreateTranslation Instance = new PartBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPart item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IPart item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NAM0:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Part_FieldIndex.PartType) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PartType = EnumBinaryTranslation<Part.PartTypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Part_FieldIndex.PartType;
                }
                case RecordTypeInts.NAM1:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Part_FieldIndex.FileName) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FileName = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Part_FieldIndex.FileName;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PartBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPartGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PartBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PartBinaryOverlay :
        BinaryOverlay,
        IPartGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Part_Registration.Instance;
        public static Part_Registration Registration => Part_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PartCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PartSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPartGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPartGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPartGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PartBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region PartType
        private int? _PartTypeLocation;
        public Part.PartTypeEnum? PartType => _PartTypeLocation.HasValue ? (Part.PartTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PartTypeLocation!.Value, _package.MetaData.Constants)) : default(Part.PartTypeEnum?);
        #endregion
        #region FileName
        private int? _FileNameLocation;
        public String? FileName => _FileNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FileNameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PartBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PartBinaryOverlay PartFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PartBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PartBinaryOverlay PartFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PartFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NAM0:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Part_FieldIndex.PartType) return ParseResult.Stop;
                    _PartTypeLocation = (stream.Position - offset);
                    return (int)Part_FieldIndex.PartType;
                }
                case RecordTypeInts.NAM1:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Part_FieldIndex.FileName) return ParseResult.Stop;
                    _FileNameLocation = (stream.Position - offset);
                    return (int)Part_FieldIndex.FileName;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PartMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPartGetter rhs)) return false;
            return ((PartCommon)((IPartGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPartGetter? obj)
        {
            return ((PartCommon)((IPartGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PartCommon)((IPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

