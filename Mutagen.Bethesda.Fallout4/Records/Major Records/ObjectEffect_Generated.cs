/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ObjectEffect :
        Fallout4MajorRecord,
        IObjectEffectInternal,
        ILoquiObjectSetter<ObjectEffect>,
        IEquatable<IObjectEffectGetter>
    {
        #region Ctor
        protected ObjectEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectEffectGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IObjectEffectGetter.Name => this.Name;
        #endregion
        #region EnchantmentCost
        public UInt32 EnchantmentCost { get; set; } = default;
        #endregion
        #region Flags
        public ObjectEffect.Flag Flags { get; set; } = default;
        #endregion
        #region CastType
        public CastType CastType { get; set; } = default;
        #endregion
        #region EnchantmentAmount
        public Int32 EnchantmentAmount { get; set; } = default;
        #endregion
        #region TargetType
        public TargetType TargetType { get; set; } = default;
        #endregion
        #region EnchantType
        public ObjectEffect.EnchantTypeEnum EnchantType { get; set; } = default;
        #endregion
        #region ChargeTime
        public Single ChargeTime { get; set; } = default;
        #endregion
        #region BaseEnchantment
        public FormLink<IObjectEffectGetter> BaseEnchantment { get; set; } = new FormLink<IObjectEffectGetter>();
        #endregion
        #region WornRestrictions
        public FormLink<IFormListGetter> WornRestrictions { get; set; } = new FormLink<IFormListGetter>();
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Effect> _Effects = new ExtendedList<Effect>();
        public ExtendedList<Effect> Effects
        {
            get => this._Effects;
            protected set => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEffectGetter> IObjectEffectGetter.Effects => _Effects;
        #endregion

        #endregion
        #region ENITDataTypeState
        public ObjectEffect.ENITDataType ENITDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IObjectEffectGetter rhs)) return false;
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IObjectEffectGetter? obj)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.EnchantmentCost = initialValue;
                this.Flags = initialValue;
                this.CastType = initialValue;
                this.EnchantmentAmount = initialValue;
                this.TargetType = initialValue;
                this.EnchantType = initialValue;
                this.ChargeTime = initialValue;
                this.BaseEnchantment = initialValue;
                this.WornRestrictions = initialValue;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.ENITDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Name,
                TItem EnchantmentCost,
                TItem Flags,
                TItem CastType,
                TItem EnchantmentAmount,
                TItem TargetType,
                TItem EnchantType,
                TItem ChargeTime,
                TItem BaseEnchantment,
                TItem WornRestrictions,
                TItem Effects,
                TItem ENITDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.EnchantmentCost = EnchantmentCost;
                this.Flags = Flags;
                this.CastType = CastType;
                this.EnchantmentAmount = EnchantmentAmount;
                this.TargetType = TargetType;
                this.EnchantType = EnchantType;
                this.ChargeTime = ChargeTime;
                this.BaseEnchantment = BaseEnchantment;
                this.WornRestrictions = WornRestrictions;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.ENITDataTypeState = ENITDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public TItem EnchantmentCost;
            public TItem Flags;
            public TItem CastType;
            public TItem EnchantmentAmount;
            public TItem TargetType;
            public TItem EnchantType;
            public TItem ChargeTime;
            public TItem BaseEnchantment;
            public TItem WornRestrictions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>? Effects;
            public TItem ENITDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.EnchantmentCost, rhs.EnchantmentCost)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.CastType, rhs.CastType)) return false;
                if (!object.Equals(this.EnchantmentAmount, rhs.EnchantmentAmount)) return false;
                if (!object.Equals(this.TargetType, rhs.TargetType)) return false;
                if (!object.Equals(this.EnchantType, rhs.EnchantType)) return false;
                if (!object.Equals(this.ChargeTime, rhs.ChargeTime)) return false;
                if (!object.Equals(this.BaseEnchantment, rhs.BaseEnchantment)) return false;
                if (!object.Equals(this.WornRestrictions, rhs.WornRestrictions)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                if (!object.Equals(this.ENITDataTypeState, rhs.ENITDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.EnchantmentCost);
                hash.Add(this.Flags);
                hash.Add(this.CastType);
                hash.Add(this.EnchantmentAmount);
                hash.Add(this.TargetType);
                hash.Add(this.EnchantType);
                hash.Add(this.ChargeTime);
                hash.Add(this.BaseEnchantment);
                hash.Add(this.WornRestrictions);
                hash.Add(this.Effects);
                hash.Add(this.ENITDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.EnchantmentCost)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.CastType)) return false;
                if (!eval(this.EnchantmentAmount)) return false;
                if (!eval(this.TargetType)) return false;
                if (!eval(this.EnchantType)) return false;
                if (!eval(this.ChargeTime)) return false;
                if (!eval(this.BaseEnchantment)) return false;
                if (!eval(this.WornRestrictions)) return false;
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ENITDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.EnchantmentCost)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.CastType)) return true;
                if (eval(this.EnchantmentAmount)) return true;
                if (eval(this.TargetType)) return true;
                if (eval(this.EnchantType)) return true;
                if (eval(this.ChargeTime)) return true;
                if (eval(this.BaseEnchantment)) return true;
                if (eval(this.WornRestrictions)) return true;
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ENITDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.EnchantmentCost = eval(this.EnchantmentCost);
                obj.Flags = eval(this.Flags);
                obj.CastType = eval(this.CastType);
                obj.EnchantmentAmount = eval(this.EnchantmentAmount);
                obj.TargetType = eval(this.TargetType);
                obj.EnchantType = eval(this.EnchantType);
                obj.ChargeTime = eval(this.ChargeTime);
                obj.BaseEnchantment = eval(this.BaseEnchantment);
                obj.WornRestrictions = eval(this.WornRestrictions);
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ENITDataTypeState = eval(this.ENITDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ObjectEffect.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ObjectEffect.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ObjectEffect.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.EnchantmentCost ?? true)
                    {
                        fg.AppendItem(EnchantmentCost, "EnchantmentCost");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.CastType ?? true)
                    {
                        fg.AppendItem(CastType, "CastType");
                    }
                    if (printMask?.EnchantmentAmount ?? true)
                    {
                        fg.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                    }
                    if (printMask?.TargetType ?? true)
                    {
                        fg.AppendItem(TargetType, "TargetType");
                    }
                    if (printMask?.EnchantType ?? true)
                    {
                        fg.AppendItem(EnchantType, "EnchantType");
                    }
                    if (printMask?.ChargeTime ?? true)
                    {
                        fg.AppendItem(ChargeTime, "ChargeTime");
                    }
                    if (printMask?.BaseEnchantment ?? true)
                    {
                        fg.AppendItem(BaseEnchantment, "BaseEnchantment");
                    }
                    if (printMask?.WornRestrictions ?? true)
                    {
                        fg.AppendItem(WornRestrictions, "WornRestrictions");
                    }
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects.TryGet(out var EffectsItem))
                    {
                        fg.AppendLine("Effects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ENITDataTypeState ?? true)
                    {
                        fg.AppendItem(ENITDataTypeState, "ENITDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public Exception? EnchantmentCost;
            public Exception? Flags;
            public Exception? CastType;
            public Exception? EnchantmentAmount;
            public Exception? TargetType;
            public Exception? EnchantType;
            public Exception? ChargeTime;
            public Exception? BaseEnchantment;
            public Exception? WornRestrictions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            public Exception? ENITDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case ObjectEffect_FieldIndex.Name:
                        return Name;
                    case ObjectEffect_FieldIndex.EnchantmentCost:
                        return EnchantmentCost;
                    case ObjectEffect_FieldIndex.Flags:
                        return Flags;
                    case ObjectEffect_FieldIndex.CastType:
                        return CastType;
                    case ObjectEffect_FieldIndex.EnchantmentAmount:
                        return EnchantmentAmount;
                    case ObjectEffect_FieldIndex.TargetType:
                        return TargetType;
                    case ObjectEffect_FieldIndex.EnchantType:
                        return EnchantType;
                    case ObjectEffect_FieldIndex.ChargeTime:
                        return ChargeTime;
                    case ObjectEffect_FieldIndex.BaseEnchantment:
                        return BaseEnchantment;
                    case ObjectEffect_FieldIndex.WornRestrictions:
                        return WornRestrictions;
                    case ObjectEffect_FieldIndex.Effects:
                        return Effects;
                    case ObjectEffect_FieldIndex.ENITDataTypeState:
                        return ENITDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case ObjectEffect_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ObjectEffect_FieldIndex.EnchantmentCost:
                        this.EnchantmentCost = ex;
                        break;
                    case ObjectEffect_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case ObjectEffect_FieldIndex.CastType:
                        this.CastType = ex;
                        break;
                    case ObjectEffect_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = ex;
                        break;
                    case ObjectEffect_FieldIndex.TargetType:
                        this.TargetType = ex;
                        break;
                    case ObjectEffect_FieldIndex.EnchantType:
                        this.EnchantType = ex;
                        break;
                    case ObjectEffect_FieldIndex.ChargeTime:
                        this.ChargeTime = ex;
                        break;
                    case ObjectEffect_FieldIndex.BaseEnchantment:
                        this.BaseEnchantment = ex;
                        break;
                    case ObjectEffect_FieldIndex.WornRestrictions:
                        this.WornRestrictions = ex;
                        break;
                    case ObjectEffect_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    case ObjectEffect_FieldIndex.ENITDataTypeState:
                        this.ENITDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case ObjectEffect_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.EnchantmentCost:
                        this.EnchantmentCost = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.CastType:
                        this.CastType = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.TargetType:
                        this.TargetType = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.EnchantType:
                        this.EnchantType = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.ChargeTime:
                        this.ChargeTime = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.BaseEnchantment:
                        this.BaseEnchantment = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.WornRestrictions:
                        this.WornRestrictions = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    case ObjectEffect_FieldIndex.ENITDataTypeState:
                        this.ENITDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (EnchantmentCost != null) return true;
                if (Flags != null) return true;
                if (CastType != null) return true;
                if (EnchantmentAmount != null) return true;
                if (TargetType != null) return true;
                if (EnchantType != null) return true;
                if (ChargeTime != null) return true;
                if (BaseEnchantment != null) return true;
                if (WornRestrictions != null) return true;
                if (Effects != null) return true;
                if (ENITDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(EnchantmentCost, "EnchantmentCost");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(CastType, "CastType");
                fg.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                fg.AppendItem(TargetType, "TargetType");
                fg.AppendItem(EnchantType, "EnchantType");
                fg.AppendItem(ChargeTime, "ChargeTime");
                fg.AppendItem(BaseEnchantment, "BaseEnchantment");
                fg.AppendItem(WornRestrictions, "WornRestrictions");
                if (Effects.TryGet(out var EffectsItem))
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(ENITDataTypeState, "ENITDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.EnchantmentCost = this.EnchantmentCost.Combine(rhs.EnchantmentCost);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.CastType = this.CastType.Combine(rhs.CastType);
                ret.EnchantmentAmount = this.EnchantmentAmount.Combine(rhs.EnchantmentAmount);
                ret.TargetType = this.TargetType.Combine(rhs.TargetType);
                ret.EnchantType = this.EnchantType.Combine(rhs.EnchantType);
                ret.ChargeTime = this.ChargeTime.Combine(rhs.ChargeTime);
                ret.BaseEnchantment = this.BaseEnchantment.Combine(rhs.BaseEnchantment);
                ret.WornRestrictions = this.WornRestrictions.Combine(rhs.WornRestrictions);
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                ret.ENITDataTypeState = this.ENITDataTypeState.Combine(rhs.ENITDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public bool EnchantmentCost;
            public bool Flags;
            public bool CastType;
            public bool EnchantmentAmount;
            public bool TargetType;
            public bool EnchantType;
            public bool ChargeTime;
            public bool BaseEnchantment;
            public bool WornRestrictions;
            public Effect.TranslationMask? Effects;
            public bool ENITDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.EnchantmentCost = defaultOn;
                this.Flags = defaultOn;
                this.CastType = defaultOn;
                this.EnchantmentAmount = defaultOn;
                this.TargetType = defaultOn;
                this.EnchantType = defaultOn;
                this.ChargeTime = defaultOn;
                this.BaseEnchantment = defaultOn;
                this.WornRestrictions = defaultOn;
                this.ENITDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((EnchantmentCost, null));
                ret.Add((Flags, null));
                ret.Add((CastType, null));
                ret.Add((EnchantmentAmount, null));
                ret.Add((TargetType, null));
                ret.Add((EnchantType, null));
                ret.Add((ChargeTime, null));
                ret.Add((BaseEnchantment, null));
                ret.Add((WornRestrictions, null));
                ret.Add((Effects == null ? DefaultOn : !Effects.GetCrystal().CopyNothing, Effects?.GetCrystal()));
                ret.Add((ENITDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ObjectEffect_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ObjectEffectCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectEffectSetterCommon.Instance.RemapLinks(this, mapping);
        public ObjectEffect(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private ObjectEffect(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal ObjectEffect(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ObjectEffect(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public ObjectEffect(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum ENITDataType
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ObjectEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static ObjectEffect CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ObjectEffect();
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ObjectEffect item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ObjectEffect GetNew()
        {
            return new ObjectEffect();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectEffect :
        IObjectEffectGetter,
        IFallout4MajorRecord,
        IEffectRecord,
        ITranslatedNamed,
        IObjectBounded,
        ILoquiObjectSetter<IObjectEffectInternal>,
        IFormLinkContainer
    {
        new ObjectBounds ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new UInt32 EnchantmentCost { get; set; }
        new ObjectEffect.Flag Flags { get; set; }
        new CastType CastType { get; set; }
        new Int32 EnchantmentAmount { get; set; }
        new TargetType TargetType { get; set; }
        new ObjectEffect.EnchantTypeEnum EnchantType { get; set; }
        new Single ChargeTime { get; set; }
        new FormLink<IObjectEffectGetter> BaseEnchantment { get; set; }
        new FormLink<IFormListGetter> WornRestrictions { get; set; }
        new ExtendedList<Effect> Effects { get; }
        new ObjectEffect.ENITDataType ENITDataTypeState { get; set; }
    }

    public partial interface IObjectEffectInternal :
        IFallout4MajorRecordInternal,
        IObjectEffect,
        IObjectEffectGetter
    {
    }

    public partial interface IObjectEffectGetter :
        IFallout4MajorRecordGetter,
        IEffectRecordGetter,
        ITranslatedNamedGetter,
        IObjectBoundedGetter,
        ILoquiObject<IObjectEffectGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => ObjectEffect_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        ITranslatedStringGetter? Name { get; }
        UInt32 EnchantmentCost { get; }
        ObjectEffect.Flag Flags { get; }
        CastType CastType { get; }
        Int32 EnchantmentAmount { get; }
        TargetType TargetType { get; }
        ObjectEffect.EnchantTypeEnum EnchantType { get; }
        Single ChargeTime { get; }
        FormLink<IObjectEffectGetter> BaseEnchantment { get; }
        FormLink<IFormListGetter> WornRestrictions { get; }
        IReadOnlyList<IEffectGetter> Effects { get; }
        ObjectEffect.ENITDataType ENITDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectEffectMixIn
    {
        public static void Clear(this IObjectEffectInternal item)
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ObjectEffect.Mask<bool> GetEqualsMask(
            this IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IObjectEffectGetter item,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IObjectEffectGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IObjectEffectGetter item,
            IObjectEffectGetter rhs)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IObjectEffectInternal lhs,
            IObjectEffectGetter rhs,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ObjectEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObjectEffectInternal lhs,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ObjectEffect Duplicate(
            this IObjectEffectGetter item,
            FormKey formKey,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IObjectEffectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ObjectEffect_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Name = 7,
        EnchantmentCost = 8,
        Flags = 9,
        CastType = 10,
        EnchantmentAmount = 11,
        TargetType = 12,
        EnchantType = 13,
        ChargeTime = 14,
        BaseEnchantment = 15,
        WornRestrictions = 16,
        Effects = 17,
        ENITDataTypeState = 18,
    }
    #endregion

    #region Registration
    public partial class ObjectEffect_Registration : ILoquiRegistration
    {
        public static readonly ObjectEffect_Registration Instance = new ObjectEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 128,
            version: 0);

        public const string GUID = "0f27c016-189e-43f2-8328-927b0ace82d4";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(ObjectEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectEffect.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectEffect);

        public static readonly Type GetterType = typeof(IObjectEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectEffect);

        public static readonly Type? InternalSetterType = typeof(IObjectEffectInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.ObjectEffect";

        public const string Name = "ObjectEffect";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ENCH;
        public static readonly Type BinaryWriteTranslation = typeof(ObjectEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ObjectEffectSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ObjectEffectSetterCommon Instance = new ObjectEffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObjectEffectInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Name = default;
            item.EnchantmentCost = default;
            item.Flags = default;
            item.CastType = default;
            item.EnchantmentAmount = default;
            item.TargetType = default;
            item.EnchantType = default;
            item.ChargeTime = default;
            item.BaseEnchantment = FormLink<IObjectEffectGetter>.Null;
            item.WornRestrictions = FormLink<IFormListGetter>.Null;
            item.Effects.Clear();
            item.ENITDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IObjectEffectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IObjectEffectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IObjectEffect obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.BaseEnchantment = obj.BaseEnchantment.Relink(mapping);
            obj.WornRestrictions = obj.WornRestrictions.Relink(mapping);
            obj.Effects.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IObjectEffectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IObjectEffectInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ObjectEffectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ObjectEffectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ObjectEffect)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ObjectEffect)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ObjectEffectCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ObjectEffectCommon Instance = new ObjectEffectCommon();

        public ObjectEffect.Mask<bool> GetEqualsMask(
            IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectEffect.Mask<bool>(false);
            ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            ObjectEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.EnchantmentCost = item.EnchantmentCost == rhs.EnchantmentCost;
            ret.Flags = item.Flags == rhs.Flags;
            ret.CastType = item.CastType == rhs.CastType;
            ret.EnchantmentAmount = item.EnchantmentAmount == rhs.EnchantmentAmount;
            ret.TargetType = item.TargetType == rhs.TargetType;
            ret.EnchantType = item.EnchantType == rhs.EnchantType;
            ret.ChargeTime = item.ChargeTime.EqualsWithin(rhs.ChargeTime);
            ret.BaseEnchantment = item.BaseEnchantment.Equals(rhs.BaseEnchantment);
            ret.WornRestrictions = item.WornRestrictions.Equals(rhs.WornRestrictions);
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ENITDataTypeState = item.ENITDataTypeState == rhs.ENITDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IObjectEffectGetter item,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IObjectEffectGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ObjectEffect =>");
            }
            else
            {
                fg.AppendLine($"{name} (ObjectEffect) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IObjectEffectGetter item,
            FileGeneration fg,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.EnchantmentCost ?? true)
            {
                fg.AppendItem(item.EnchantmentCost, "EnchantmentCost");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.CastType ?? true)
            {
                fg.AppendItem(item.CastType, "CastType");
            }
            if (printMask?.EnchantmentAmount ?? true)
            {
                fg.AppendItem(item.EnchantmentAmount, "EnchantmentAmount");
            }
            if (printMask?.TargetType ?? true)
            {
                fg.AppendItem(item.TargetType, "TargetType");
            }
            if (printMask?.EnchantType ?? true)
            {
                fg.AppendItem(item.EnchantType, "EnchantType");
            }
            if (printMask?.ChargeTime ?? true)
            {
                fg.AppendItem(item.ChargeTime, "ChargeTime");
            }
            if (printMask?.BaseEnchantment ?? true)
            {
                fg.AppendItem(item.BaseEnchantment.FormKey, "BaseEnchantment");
            }
            if (printMask?.WornRestrictions ?? true)
            {
                fg.AppendItem(item.WornRestrictions.FormKey, "WornRestrictions");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                fg.AppendLine("Effects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Effects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.ENITDataTypeState ?? true)
            {
                fg.AppendItem(item.ENITDataTypeState, "ENITDataTypeState");
            }
        }
        
        public static ObjectEffect_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ObjectEffect_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (ObjectEffect_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (ObjectEffect_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (ObjectEffect_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (ObjectEffect_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (ObjectEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new ObjectEffect_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ObjectEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectEffectGetter? lhs,
            IObjectEffectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (lhs.EnchantmentCost != rhs.EnchantmentCost) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.CastType != rhs.CastType) return false;
            if (lhs.EnchantmentAmount != rhs.EnchantmentAmount) return false;
            if (lhs.TargetType != rhs.TargetType) return false;
            if (lhs.EnchantType != rhs.EnchantType) return false;
            if (!lhs.ChargeTime.EqualsWithin(rhs.ChargeTime)) return false;
            if (!lhs.BaseEnchantment.Equals(rhs.BaseEnchantment)) return false;
            if (!lhs.WornRestrictions.Equals(rhs.WornRestrictions)) return false;
            if (!lhs.Effects.SequenceEqualNullable(rhs.Effects)) return false;
            if (lhs.ENITDataTypeState != rhs.ENITDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IObjectEffectGetter?)lhs,
                rhs: rhs as IObjectEffectGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IObjectEffectGetter?)lhs,
                rhs: rhs as IObjectEffectGetter);
        }
        
        public virtual int GetHashCode(IObjectEffectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.EnchantmentCost);
            hash.Add(item.Flags);
            hash.Add(item.CastType);
            hash.Add(item.EnchantmentAmount);
            hash.Add(item.TargetType);
            hash.Add(item.EnchantType);
            hash.Add(item.ChargeTime);
            hash.Add(item.BaseEnchantment);
            hash.Add(item.WornRestrictions);
            hash.Add(item.Effects);
            hash.Add(item.ENITDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IObjectEffectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IObjectEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ObjectEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IObjectEffectGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.BaseEnchantment);
            yield return FormLinkInformation.Factory(obj.WornRestrictions);
            foreach (var item in obj.Effects.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public ObjectEffect Duplicate(
            IObjectEffectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ObjectEffect(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IObjectEffect)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IObjectEffect)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ObjectEffectSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ObjectEffectSetterTranslationCommon Instance = new ObjectEffectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IObjectEffectInternal item,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IObjectEffect item,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)ObjectEffect_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.EnchantmentCost) ?? true))
            {
                item.EnchantmentCost = rhs.EnchantmentCost;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.CastType) ?? true))
            {
                item.CastType = rhs.CastType;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.EnchantmentAmount) ?? true))
            {
                item.EnchantmentAmount = rhs.EnchantmentAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.TargetType) ?? true))
            {
                item.TargetType = rhs.TargetType;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.EnchantType) ?? true))
            {
                item.EnchantType = rhs.EnchantType;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ChargeTime) ?? true))
            {
                item.ChargeTime = rhs.ChargeTime;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.BaseEnchantment) ?? true))
            {
                item.BaseEnchantment = new FormLink<IObjectEffectGetter>(rhs.BaseEnchantment.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.WornRestrictions) ?? true))
            {
                item.WornRestrictions = new FormLink<IFormListGetter>(rhs.WornRestrictions.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)ObjectEffect_FieldIndex.Effects);
                try
                {
                    item.Effects.SetTo(
                        rhs.Effects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ENITDataTypeState) ?? true))
            {
                item.ENITDataTypeState = rhs.ENITDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffectInternal)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffect)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffectInternal)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffect)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ObjectEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ObjectEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectEffect_Registration.Instance;
        public new static ObjectEffect_Registration Registration => ObjectEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ObjectEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ObjectEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ObjectEffectBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ObjectEffectBinaryWriteTranslation Instance = new ObjectEffectBinaryWriteTranslation();

        public static void WriteEmbedded(
            IObjectEffectGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IObjectEffectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.ENIT)))
            {
                writer.Write(item.EnchantmentCost);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<ObjectEffect.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<CastType>.Instance.Write(
                    writer,
                    item.CastType,
                    length: 4);
                writer.Write(item.EnchantmentAmount);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<TargetType>.Instance.Write(
                    writer,
                    item.TargetType,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<ObjectEffect.EnchantTypeEnum>.Instance.Write(
                    writer,
                    item.EnchantType,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ChargeTime);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BaseEnchantment);
                if (!item.ENITDataTypeState.HasFlag(ObjectEffect.ENITDataType.Break0))
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.WornRestrictions);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IObjectEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.ENCH),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ObjectEffectBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static ObjectEffectBinaryCreateTranslation Instance = new ObjectEffectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ENCH;
        public static void FillBinaryStructs(
            IObjectEffectInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IObjectEffectInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)ObjectEffect_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)ObjectEffect_FieldIndex.Name;
                }
                case RecordTypeInts.ENIT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.EnchantmentCost = dataFrame.ReadUInt32();
                    item.Flags = EnumBinaryTranslation<ObjectEffect.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.CastType = EnumBinaryTranslation<CastType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.EnchantmentAmount = dataFrame.ReadInt32();
                    item.TargetType = EnumBinaryTranslation<TargetType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.EnchantType = EnumBinaryTranslation<ObjectEffect.EnchantTypeEnum>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ChargeTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.BaseEnchantment = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    if (dataFrame.Complete)
                    {
                        item.ENITDataTypeState |= ObjectEffect.ENITDataType.Break0;
                        return (int)ObjectEffect_FieldIndex.BaseEnchantment;
                    }
                    item.WornRestrictions = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    return (int)ObjectEffect_FieldIndex.WornRestrictions;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                {
                    item.Effects.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Effect_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: Effect.TryCreateFromBinary));
                    return (int)ObjectEffect_FieldIndex.Effects;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ObjectEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ObjectEffectBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IObjectEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectEffect_Registration.Instance;
        public new static ObjectEffect_Registration Registration => ObjectEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ObjectEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ObjectEffectCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ObjectEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        private int? _ENITLocation;
        public ObjectEffect.ENITDataType ENITDataTypeState { get; private set; }
        #region EnchantmentCost
        private int _EnchantmentCostLocation => _ENITLocation!.Value;
        private bool _EnchantmentCost_IsSet => _ENITLocation.HasValue;
        public UInt32 EnchantmentCost => _EnchantmentCost_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_EnchantmentCostLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _ENITLocation!.Value + 0x4;
        private bool _Flags_IsSet => _ENITLocation.HasValue;
        public ObjectEffect.Flag Flags => _Flags_IsSet ? (ObjectEffect.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region CastType
        private int _CastTypeLocation => _ENITLocation!.Value + 0x8;
        private bool _CastType_IsSet => _ENITLocation.HasValue;
        public CastType CastType => _CastType_IsSet ? (CastType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_CastTypeLocation, 0x4)) : default;
        #endregion
        #region EnchantmentAmount
        private int _EnchantmentAmountLocation => _ENITLocation!.Value + 0xC;
        private bool _EnchantmentAmount_IsSet => _ENITLocation.HasValue;
        public Int32 EnchantmentAmount => _EnchantmentAmount_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(_EnchantmentAmountLocation, 4)) : default;
        #endregion
        #region TargetType
        private int _TargetTypeLocation => _ENITLocation!.Value + 0x10;
        private bool _TargetType_IsSet => _ENITLocation.HasValue;
        public TargetType TargetType => _TargetType_IsSet ? (TargetType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TargetTypeLocation, 0x4)) : default;
        #endregion
        #region EnchantType
        private int _EnchantTypeLocation => _ENITLocation!.Value + 0x14;
        private bool _EnchantType_IsSet => _ENITLocation.HasValue;
        public ObjectEffect.EnchantTypeEnum EnchantType => _EnchantType_IsSet ? (ObjectEffect.EnchantTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_EnchantTypeLocation, 0x4)) : default;
        #endregion
        #region ChargeTime
        private int _ChargeTimeLocation => _ENITLocation!.Value + 0x18;
        private bool _ChargeTime_IsSet => _ENITLocation.HasValue;
        public Single ChargeTime => _ChargeTime_IsSet ? _data.Slice(_ChargeTimeLocation, 4).Float() : default;
        #endregion
        #region BaseEnchantment
        private int _BaseEnchantmentLocation => _ENITLocation!.Value + 0x1C;
        private bool _BaseEnchantment_IsSet => _ENITLocation.HasValue;
        public FormLink<IObjectEffectGetter> BaseEnchantment => _BaseEnchantment_IsSet ? new FormLink<IObjectEffectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_BaseEnchantmentLocation, 0x4)))) : FormLink<IObjectEffectGetter>.Null;
        #endregion
        #region WornRestrictions
        private int _WornRestrictionsLocation => _ENITLocation!.Value + 0x20;
        private bool _WornRestrictions_IsSet => _ENITLocation.HasValue && !ENITDataTypeState.HasFlag(ObjectEffect.ENITDataType.Break0);
        public FormLink<IFormListGetter> WornRestrictions => _WornRestrictions_IsSet ? new FormLink<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_WornRestrictionsLocation, 0x4)))) : FormLink<IFormListGetter>.Null;
        #endregion
        public IReadOnlyList<IEffectGetter> Effects { get; private set; } = ListExt.Empty<EffectBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ObjectEffectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ObjectEffectBinaryOverlay ObjectEffectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new ObjectEffectBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ObjectEffectBinaryOverlay ObjectEffectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ObjectEffectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)ObjectEffect_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)ObjectEffect_FieldIndex.Name;
                }
                case RecordTypeInts.ENIT:
                {
                    _ENITLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x20)
                    {
                        this.ENITDataTypeState |= ObjectEffect.ENITDataType.Break0;
                    }
                    return (int)ObjectEffect_FieldIndex.WornRestrictions;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<EffectBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: Effect_Registration.TriggeringRecordTypes,
                        factory:  EffectBinaryOverlay.EffectFactory);
                    return (int)ObjectEffect_FieldIndex.Effects;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IObjectEffectGetter rhs)) return false;
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IObjectEffectGetter? obj)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

