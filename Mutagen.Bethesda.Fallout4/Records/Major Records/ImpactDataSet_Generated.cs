/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ImpactDataSet :
        Fallout4MajorRecord,
        IImpactDataSetInternal,
        ILoquiObjectSetter<ImpactDataSet>,
        IEquatable<IImpactDataSetGetter>
    {
        #region Ctor
        protected ImpactDataSet()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Impacts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ImpactData> _Impacts = new ExtendedList<ImpactData>();
        public ExtendedList<ImpactData> Impacts
        {
            get => this._Impacts;
            protected set => this._Impacts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IImpactDataGetter> IImpactDataSetGetter.Impacts => _Impacts;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ImpactDataSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IImpactDataSetGetter rhs)) return false;
            return ((ImpactDataSetCommon)((IImpactDataSetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IImpactDataSetGetter? obj)
        {
            return ((ImpactDataSetCommon)((IImpactDataSetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ImpactDataSetCommon)((IImpactDataSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Impacts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ImpactData.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ImpactData.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Impacts)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Impacts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ImpactData.Mask<TItem>?>>?>(Impacts, Enumerable.Empty<MaskItemIndexed<TItem, ImpactData.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ImpactData.Mask<TItem>?>>?>? Impacts;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Impacts, rhs.Impacts)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Impacts);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Impacts != null)
                {
                    if (!eval(this.Impacts.Overall)) return false;
                    if (this.Impacts.Specific != null)
                    {
                        foreach (var item in this.Impacts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Impacts != null)
                {
                    if (eval(this.Impacts.Overall)) return true;
                    if (this.Impacts.Specific != null)
                    {
                        foreach (var item in this.Impacts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ImpactDataSet.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Impacts != null)
                {
                    obj.Impacts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ImpactData.Mask<R>?>>?>(eval(this.Impacts.Overall), Enumerable.Empty<MaskItemIndexed<R, ImpactData.Mask<R>?>>());
                    if (Impacts.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ImpactData.Mask<R>?>>();
                        obj.Impacts.Specific = l;
                        foreach (var item in Impacts.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ImpactData.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ImpactData.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ImpactDataSet.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ImpactDataSet.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ImpactDataSet.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.Impacts?.Overall ?? true)
                        && Impacts.TryGet(out var ImpactsItem))
                    {
                        fg.AppendLine("Impacts =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ImpactsItem.Overall);
                            if (ImpactsItem.Specific != null)
                            {
                                foreach (var subItem in ImpactsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ImpactData.ErrorMask?>>?>? Impacts;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ImpactDataSet_FieldIndex enu = (ImpactDataSet_FieldIndex)index;
                switch (enu)
                {
                    case ImpactDataSet_FieldIndex.Impacts:
                        return Impacts;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ImpactDataSet_FieldIndex enu = (ImpactDataSet_FieldIndex)index;
                switch (enu)
                {
                    case ImpactDataSet_FieldIndex.Impacts:
                        this.Impacts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ImpactData.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ImpactDataSet_FieldIndex enu = (ImpactDataSet_FieldIndex)index;
                switch (enu)
                {
                    case ImpactDataSet_FieldIndex.Impacts:
                        this.Impacts = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ImpactData.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Impacts != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (Impacts.TryGet(out var ImpactsItem))
                {
                    fg.AppendLine("Impacts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ImpactsItem.Overall);
                        if (ImpactsItem.Specific != null)
                        {
                            foreach (var subItem in ImpactsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Impacts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ImpactData.ErrorMask?>>?>(ExceptionExt.Combine(this.Impacts?.Overall, rhs.Impacts?.Overall), ExceptionExt.Combine(this.Impacts?.Specific, rhs.Impacts?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ImpactData.TranslationMask? Impacts;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Impacts == null ? DefaultOn : !Impacts.GetCrystal().CopyNothing, Impacts?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ImpactDataSet_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ImpactDataSetCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ImpactDataSetSetterCommon.Instance.RemapLinks(this, mapping);
        public ImpactDataSet(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private ImpactDataSet(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal ImpactDataSet(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ImpactDataSet(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public ImpactDataSet(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImpactDataSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImpactDataSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static ImpactDataSet CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ImpactDataSet();
            ((ImpactDataSetSetterCommon)((IImpactDataSetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ImpactDataSet item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ImpactDataSetSetterCommon)((IImpactDataSetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ImpactDataSet GetNew()
        {
            return new ImpactDataSet();
        }

    }
    #endregion

    #region Interface
    public partial interface IImpactDataSet :
        IImpactDataSetGetter,
        IFallout4MajorRecord,
        ILoquiObjectSetter<IImpactDataSetInternal>,
        IFormLinkContainer
    {
        new ExtendedList<ImpactData> Impacts { get; }
    }

    public partial interface IImpactDataSetInternal :
        IFallout4MajorRecordInternal,
        IImpactDataSet,
        IImpactDataSetGetter
    {
    }

    public partial interface IImpactDataSetGetter :
        IFallout4MajorRecordGetter,
        ILoquiObject<IImpactDataSetGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => ImpactDataSet_Registration.Instance;
        IReadOnlyList<IImpactDataGetter> Impacts { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ImpactDataSetMixIn
    {
        public static void Clear(this IImpactDataSetInternal item)
        {
            ((ImpactDataSetSetterCommon)((IImpactDataSetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ImpactDataSet.Mask<bool> GetEqualsMask(
            this IImpactDataSetGetter item,
            IImpactDataSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ImpactDataSetCommon)((IImpactDataSetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IImpactDataSetGetter item,
            string? name = null,
            ImpactDataSet.Mask<bool>? printMask = null)
        {
            return ((ImpactDataSetCommon)((IImpactDataSetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IImpactDataSetGetter item,
            FileGeneration fg,
            string? name = null,
            ImpactDataSet.Mask<bool>? printMask = null)
        {
            ((ImpactDataSetCommon)((IImpactDataSetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IImpactDataSetGetter item,
            IImpactDataSetGetter rhs)
        {
            return ((ImpactDataSetCommon)((IImpactDataSetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IImpactDataSetInternal lhs,
            IImpactDataSetGetter rhs,
            out ImpactDataSet.ErrorMask errorMask,
            ImpactDataSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ImpactDataSetSetterTranslationCommon)((IImpactDataSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ImpactDataSet.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IImpactDataSetInternal lhs,
            IImpactDataSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ImpactDataSetSetterTranslationCommon)((IImpactDataSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ImpactDataSet DeepCopy(
            this IImpactDataSetGetter item,
            ImpactDataSet.TranslationMask? copyMask = null)
        {
            return ((ImpactDataSetSetterTranslationCommon)((IImpactDataSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ImpactDataSet DeepCopy(
            this IImpactDataSetGetter item,
            out ImpactDataSet.ErrorMask errorMask,
            ImpactDataSet.TranslationMask? copyMask = null)
        {
            return ((ImpactDataSetSetterTranslationCommon)((IImpactDataSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ImpactDataSet DeepCopy(
            this IImpactDataSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ImpactDataSetSetterTranslationCommon)((IImpactDataSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ImpactDataSet Duplicate(
            this IImpactDataSetGetter item,
            FormKey formKey,
            ImpactDataSet.TranslationMask? copyMask = null)
        {
            return ((ImpactDataSetCommon)((IImpactDataSetGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IImpactDataSetInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImpactDataSetSetterCommon)((IImpactDataSetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ImpactDataSet_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Impacts = 6,
    }
    #endregion

    #region Registration
    public partial class ImpactDataSet_Registration : ILoquiRegistration
    {
        public static readonly ImpactDataSet_Registration Instance = new ImpactDataSet_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 79,
            version: 0);

        public const string GUID = "c121a55e-e93f-481f-a6b0-cea75cfbdb64";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(ImpactDataSet.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ImpactDataSet.ErrorMask);

        public static readonly Type ClassType = typeof(ImpactDataSet);

        public static readonly Type GetterType = typeof(IImpactDataSetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IImpactDataSet);

        public static readonly Type? InternalSetterType = typeof(IImpactDataSetInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.ImpactDataSet";

        public const string Name = "ImpactDataSet";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.IPDS;
        public static readonly Type BinaryWriteTranslation = typeof(ImpactDataSetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ImpactDataSetSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ImpactDataSetSetterCommon Instance = new ImpactDataSetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IImpactDataSetInternal item)
        {
            ClearPartial();
            item.Impacts.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IImpactDataSetInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IImpactDataSetInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IImpactDataSet obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Impacts.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IImpactDataSetInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IImpactDataSetInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ImpactDataSetBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ImpactDataSetBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ImpactDataSet)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ImpactDataSet)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ImpactDataSetCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ImpactDataSetCommon Instance = new ImpactDataSetCommon();

        public ImpactDataSet.Mask<bool> GetEqualsMask(
            IImpactDataSetGetter item,
            IImpactDataSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ImpactDataSet.Mask<bool>(false);
            ((ImpactDataSetCommon)((IImpactDataSetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IImpactDataSetGetter item,
            IImpactDataSetGetter rhs,
            ImpactDataSet.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Impacts = item.Impacts.CollectionEqualsHelper(
                rhs.Impacts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IImpactDataSetGetter item,
            string? name = null,
            ImpactDataSet.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IImpactDataSetGetter item,
            FileGeneration fg,
            string? name = null,
            ImpactDataSet.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ImpactDataSet =>");
            }
            else
            {
                fg.AppendLine($"{name} (ImpactDataSet) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IImpactDataSetGetter item,
            FileGeneration fg,
            ImpactDataSet.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Impacts?.Overall ?? true)
            {
                fg.AppendLine("Impacts =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Impacts)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static ImpactDataSet_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ImpactDataSet_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (ImpactDataSet_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (ImpactDataSet_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (ImpactDataSet_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (ImpactDataSet_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (ImpactDataSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new ImpactDataSet_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ImpactDataSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ImpactDataSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ImpactDataSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ImpactDataSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IImpactDataSetGetter? lhs,
            IImpactDataSetGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!lhs.Impacts.SequenceEqualNullable(rhs.Impacts)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IImpactDataSetGetter?)lhs,
                rhs: rhs as IImpactDataSetGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IImpactDataSetGetter?)lhs,
                rhs: rhs as IImpactDataSetGetter);
        }
        
        public virtual int GetHashCode(IImpactDataSetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Impacts);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IImpactDataSetGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IImpactDataSetGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ImpactDataSet.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IImpactDataSetGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Impacts.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public ImpactDataSet Duplicate(
            IImpactDataSetGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ImpactDataSet(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IImpactDataSet)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IImpactDataSet)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ImpactDataSetSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ImpactDataSetSetterTranslationCommon Instance = new ImpactDataSetSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IImpactDataSetInternal item,
            IImpactDataSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IImpactDataSet item,
            IImpactDataSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ImpactDataSet_FieldIndex.Impacts) ?? true))
            {
                errorMask?.PushIndex((int)ImpactDataSet_FieldIndex.Impacts);
                try
                {
                    item.Impacts.SetTo(
                        rhs.Impacts
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImpactDataSetInternal)item,
                rhs: (IImpactDataSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImpactDataSet)item,
                rhs: (IImpactDataSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImpactDataSetInternal)item,
                rhs: (IImpactDataSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImpactDataSet)item,
                rhs: (IImpactDataSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ImpactDataSet DeepCopy(
            IImpactDataSetGetter item,
            ImpactDataSet.TranslationMask? copyMask = null)
        {
            ImpactDataSet ret = (ImpactDataSet)((ImpactDataSetCommon)((IImpactDataSetGetter)item).CommonInstance()!).GetNew();
            ((ImpactDataSetSetterTranslationCommon)((IImpactDataSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ImpactDataSet DeepCopy(
            IImpactDataSetGetter item,
            out ImpactDataSet.ErrorMask errorMask,
            ImpactDataSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ImpactDataSet ret = (ImpactDataSet)((ImpactDataSetCommon)((IImpactDataSetGetter)item).CommonInstance()!).GetNew();
            ((ImpactDataSetSetterTranslationCommon)((IImpactDataSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ImpactDataSet.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ImpactDataSet DeepCopy(
            IImpactDataSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ImpactDataSet ret = (ImpactDataSet)((ImpactDataSetCommon)((IImpactDataSetGetter)item).CommonInstance()!).GetNew();
            ((ImpactDataSetSetterTranslationCommon)((IImpactDataSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ImpactDataSet
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImpactDataSet_Registration.Instance;
        public new static ImpactDataSet_Registration Registration => ImpactDataSet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImpactDataSetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ImpactDataSetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImpactDataSetSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ImpactDataSetBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ImpactDataSetBinaryWriteTranslation Instance = new ImpactDataSetBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IImpactDataSetGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IImpactDataGetter>.Instance.Write(
                writer: writer,
                items: item.Impacts,
                transl: (MutagenWriter subWriter, IImpactDataGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((ImpactDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IImpactDataSetGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.IPDS),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IImpactDataSetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IImpactDataSetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IImpactDataSetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ImpactDataSetBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static ImpactDataSetBinaryCreateTranslation Instance = new ImpactDataSetBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.IPDS;
        public static void FillBinaryStructs(
            IImpactDataSetInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IImpactDataSetInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.PNAM:
                {
                    item.Impacts.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ImpactData>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.PNAM,
                            recordTypeConverter: recordTypeConverter,
                            transl: ImpactData.TryCreateFromBinary));
                    return (int)ImpactDataSet_FieldIndex.Impacts;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ImpactDataSetBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ImpactDataSetBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IImpactDataSetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImpactDataSet_Registration.Instance;
        public new static ImpactDataSet_Registration Registration => ImpactDataSet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImpactDataSetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImpactDataSetSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ImpactDataSetCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImpactDataSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ImpactDataSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public IReadOnlyList<IImpactDataGetter> Impacts { get; private set; } = ListExt.Empty<ImpactDataBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ImpactDataSetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ImpactDataSetBinaryOverlay ImpactDataSetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new ImpactDataSetBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ImpactDataSetBinaryOverlay ImpactDataSetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ImpactDataSetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.PNAM:
                {
                    this.Impacts = BinaryOverlayList.FactoryByArray<ImpactDataBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => ImpactDataBinaryOverlay.ImpactDataFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)ImpactDataSet_FieldIndex.Impacts;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ImpactDataSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IImpactDataSetGetter rhs)) return false;
            return ((ImpactDataSetCommon)((IImpactDataSetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IImpactDataSetGetter? obj)
        {
            return ((ImpactDataSetCommon)((IImpactDataSetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ImpactDataSetCommon)((IImpactDataSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

