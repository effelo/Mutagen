/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class VendorValues :
        IVendorValues,
        ILoquiObjectSetter<VendorValues>,
        IEquatable<IVendorValuesGetter>
    {
        #region Ctor
        public VendorValues()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region StartHour
        public UInt16 StartHour { get; set; } = default;
        #endregion
        #region EndHour
        public UInt16 EndHour { get; set; } = default;
        #endregion
        #region Radius
        public UInt16 Radius { get; set; } = default;
        #endregion
        #region Unknown
        public UInt16 Unknown { get; set; } = default;
        #endregion
        #region OnlyBuysStolenItems
        public Boolean OnlyBuysStolenItems { get; set; } = default;
        #endregion
        #region NotSellBuy
        public Boolean NotSellBuy { get; set; } = default;
        #endregion
        #region Unknown2
        public UInt16 Unknown2 { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            VendorValuesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IVendorValuesGetter rhs)) return false;
            return ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IVendorValuesGetter? obj)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.StartHour = initialValue;
                this.EndHour = initialValue;
                this.Radius = initialValue;
                this.Unknown = initialValue;
                this.OnlyBuysStolenItems = initialValue;
                this.NotSellBuy = initialValue;
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem StartHour,
                TItem EndHour,
                TItem Radius,
                TItem Unknown,
                TItem OnlyBuysStolenItems,
                TItem NotSellBuy,
                TItem Unknown2)
            {
                this.StartHour = StartHour;
                this.EndHour = EndHour;
                this.Radius = Radius;
                this.Unknown = Unknown;
                this.OnlyBuysStolenItems = OnlyBuysStolenItems;
                this.NotSellBuy = NotSellBuy;
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem StartHour;
            public TItem EndHour;
            public TItem Radius;
            public TItem Unknown;
            public TItem OnlyBuysStolenItems;
            public TItem NotSellBuy;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.StartHour, rhs.StartHour)) return false;
                if (!object.Equals(this.EndHour, rhs.EndHour)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.OnlyBuysStolenItems, rhs.OnlyBuysStolenItems)) return false;
                if (!object.Equals(this.NotSellBuy, rhs.NotSellBuy)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.StartHour);
                hash.Add(this.EndHour);
                hash.Add(this.Radius);
                hash.Add(this.Unknown);
                hash.Add(this.OnlyBuysStolenItems);
                hash.Add(this.NotSellBuy);
                hash.Add(this.Unknown2);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.StartHour)) return false;
                if (!eval(this.EndHour)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.OnlyBuysStolenItems)) return false;
                if (!eval(this.NotSellBuy)) return false;
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.StartHour)) return true;
                if (eval(this.EndHour)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.OnlyBuysStolenItems)) return true;
                if (eval(this.NotSellBuy)) return true;
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new VendorValues.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.StartHour = eval(this.StartHour);
                obj.EndHour = eval(this.EndHour);
                obj.Radius = eval(this.Radius);
                obj.Unknown = eval(this.Unknown);
                obj.OnlyBuysStolenItems = eval(this.OnlyBuysStolenItems);
                obj.NotSellBuy = eval(this.NotSellBuy);
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(VendorValues.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, VendorValues.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(VendorValues.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.StartHour ?? true)
                    {
                        fg.AppendItem(StartHour, "StartHour");
                    }
                    if (printMask?.EndHour ?? true)
                    {
                        fg.AppendItem(EndHour, "EndHour");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        fg.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.OnlyBuysStolenItems ?? true)
                    {
                        fg.AppendItem(OnlyBuysStolenItems, "OnlyBuysStolenItems");
                    }
                    if (printMask?.NotSellBuy ?? true)
                    {
                        fg.AppendItem(NotSellBuy, "NotSellBuy");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? StartHour;
            public Exception? EndHour;
            public Exception? Radius;
            public Exception? Unknown;
            public Exception? OnlyBuysStolenItems;
            public Exception? NotSellBuy;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
                switch (enu)
                {
                    case VendorValues_FieldIndex.StartHour:
                        return StartHour;
                    case VendorValues_FieldIndex.EndHour:
                        return EndHour;
                    case VendorValues_FieldIndex.Radius:
                        return Radius;
                    case VendorValues_FieldIndex.Unknown:
                        return Unknown;
                    case VendorValues_FieldIndex.OnlyBuysStolenItems:
                        return OnlyBuysStolenItems;
                    case VendorValues_FieldIndex.NotSellBuy:
                        return NotSellBuy;
                    case VendorValues_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
                switch (enu)
                {
                    case VendorValues_FieldIndex.StartHour:
                        this.StartHour = ex;
                        break;
                    case VendorValues_FieldIndex.EndHour:
                        this.EndHour = ex;
                        break;
                    case VendorValues_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case VendorValues_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case VendorValues_FieldIndex.OnlyBuysStolenItems:
                        this.OnlyBuysStolenItems = ex;
                        break;
                    case VendorValues_FieldIndex.NotSellBuy:
                        this.NotSellBuy = ex;
                        break;
                    case VendorValues_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
                switch (enu)
                {
                    case VendorValues_FieldIndex.StartHour:
                        this.StartHour = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.EndHour:
                        this.EndHour = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.OnlyBuysStolenItems:
                        this.OnlyBuysStolenItems = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.NotSellBuy:
                        this.NotSellBuy = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (StartHour != null) return true;
                if (EndHour != null) return true;
                if (Radius != null) return true;
                if (Unknown != null) return true;
                if (OnlyBuysStolenItems != null) return true;
                if (NotSellBuy != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(StartHour, "StartHour");
                fg.AppendItem(EndHour, "EndHour");
                fg.AppendItem(Radius, "Radius");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(OnlyBuysStolenItems, "OnlyBuysStolenItems");
                fg.AppendItem(NotSellBuy, "NotSellBuy");
                fg.AppendItem(Unknown2, "Unknown2");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.StartHour = this.StartHour.Combine(rhs.StartHour);
                ret.EndHour = this.EndHour.Combine(rhs.EndHour);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.OnlyBuysStolenItems = this.OnlyBuysStolenItems.Combine(rhs.OnlyBuysStolenItems);
                ret.NotSellBuy = this.NotSellBuy.Combine(rhs.NotSellBuy);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool StartHour;
            public bool EndHour;
            public bool Radius;
            public bool Unknown;
            public bool OnlyBuysStolenItems;
            public bool NotSellBuy;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.StartHour = defaultOn;
                this.EndHour = defaultOn;
                this.Radius = defaultOn;
                this.Unknown = defaultOn;
                this.OnlyBuysStolenItems = defaultOn;
                this.NotSellBuy = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((StartHour, null));
                ret.Add((EndHour, null));
                ret.Add((Radius, null));
                ret.Add((Unknown, null));
                ret.Add((OnlyBuysStolenItems, null));
                ret.Add((NotSellBuy, null));
                ret.Add((Unknown2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = VendorValues_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => VendorValuesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((VendorValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static VendorValues CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new VendorValues();
            ((VendorValuesSetterCommon)((IVendorValuesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out VendorValues item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((VendorValuesSetterCommon)((IVendorValuesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static VendorValues GetNew()
        {
            return new VendorValues();
        }

    }
    #endregion

    #region Interface
    public partial interface IVendorValues :
        IVendorValuesGetter,
        ILoquiObjectSetter<IVendorValues>
    {
        new UInt16 StartHour { get; set; }
        new UInt16 EndHour { get; set; }
        new UInt16 Radius { get; set; }
        new UInt16 Unknown { get; set; }
        new Boolean OnlyBuysStolenItems { get; set; }
        new Boolean NotSellBuy { get; set; }
        new UInt16 Unknown2 { get; set; }
    }

    public partial interface IVendorValuesGetter :
        ILoquiObject,
        ILoquiObject<IVendorValuesGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => VendorValues_Registration.Instance;
        UInt16 StartHour { get; }
        UInt16 EndHour { get; }
        UInt16 Radius { get; }
        UInt16 Unknown { get; }
        Boolean OnlyBuysStolenItems { get; }
        Boolean NotSellBuy { get; }
        UInt16 Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class VendorValuesMixIn
    {
        public static void Clear(this IVendorValues item)
        {
            ((VendorValuesSetterCommon)((IVendorValuesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static VendorValues.Mask<bool> GetEqualsMask(
            this IVendorValuesGetter item,
            IVendorValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IVendorValuesGetter item,
            string? name = null,
            VendorValues.Mask<bool>? printMask = null)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IVendorValuesGetter item,
            FileGeneration fg,
            string? name = null,
            VendorValues.Mask<bool>? printMask = null)
        {
            ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IVendorValuesGetter item,
            IVendorValuesGetter rhs)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IVendorValues lhs,
            IVendorValuesGetter rhs)
        {
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IVendorValues lhs,
            IVendorValuesGetter rhs,
            VendorValues.TranslationMask? copyMask = null)
        {
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IVendorValues lhs,
            IVendorValuesGetter rhs,
            out VendorValues.ErrorMask errorMask,
            VendorValues.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = VendorValues.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IVendorValues lhs,
            IVendorValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static VendorValues DeepCopy(
            this IVendorValuesGetter item,
            VendorValues.TranslationMask? copyMask = null)
        {
            return ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static VendorValues DeepCopy(
            this IVendorValuesGetter item,
            out VendorValues.ErrorMask errorMask,
            VendorValues.TranslationMask? copyMask = null)
        {
            return ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static VendorValues DeepCopy(
            this IVendorValuesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IVendorValues item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((VendorValuesSetterCommon)((IVendorValuesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum VendorValues_FieldIndex
    {
        StartHour = 0,
        EndHour = 1,
        Radius = 2,
        Unknown = 3,
        OnlyBuysStolenItems = 4,
        NotSellBuy = 5,
        Unknown2 = 6,
    }
    #endregion

    #region Registration
    public partial class VendorValues_Registration : ILoquiRegistration
    {
        public static readonly VendorValues_Registration Instance = new VendorValues_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 34,
            version: 0);

        public const string GUID = "31dd7308-ffd1-4311-a69c-f6c0bed71382";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(VendorValues.Mask<>);

        public static readonly Type ErrorMaskType = typeof(VendorValues.ErrorMask);

        public static readonly Type ClassType = typeof(VendorValues);

        public static readonly Type GetterType = typeof(IVendorValuesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IVendorValues);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.VendorValues";

        public const string Name = "VendorValues";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.VENV;
        public static readonly Type BinaryWriteTranslation = typeof(VendorValuesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class VendorValuesSetterCommon
    {
        public static readonly VendorValuesSetterCommon Instance = new VendorValuesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IVendorValues item)
        {
            ClearPartial();
            item.StartHour = default;
            item.EndHour = default;
            item.Radius = default;
            item.Unknown = default;
            item.OnlyBuysStolenItems = default;
            item.NotSellBuy = default;
            item.Unknown2 = default;
        }
        
        #region Mutagen
        public void RemapLinks(IVendorValues obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IVendorValues item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.VENV)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: VendorValuesBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class VendorValuesCommon
    {
        public static readonly VendorValuesCommon Instance = new VendorValuesCommon();

        public VendorValues.Mask<bool> GetEqualsMask(
            IVendorValuesGetter item,
            IVendorValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new VendorValues.Mask<bool>(false);
            ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IVendorValuesGetter item,
            IVendorValuesGetter rhs,
            VendorValues.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.StartHour = item.StartHour == rhs.StartHour;
            ret.EndHour = item.EndHour == rhs.EndHour;
            ret.Radius = item.Radius == rhs.Radius;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.OnlyBuysStolenItems = item.OnlyBuysStolenItems == rhs.OnlyBuysStolenItems;
            ret.NotSellBuy = item.NotSellBuy == rhs.NotSellBuy;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
        }
        
        public string ToString(
            IVendorValuesGetter item,
            string? name = null,
            VendorValues.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IVendorValuesGetter item,
            FileGeneration fg,
            string? name = null,
            VendorValues.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"VendorValues =>");
            }
            else
            {
                fg.AppendLine($"{name} (VendorValues) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IVendorValuesGetter item,
            FileGeneration fg,
            VendorValues.Mask<bool>? printMask = null)
        {
            if (printMask?.StartHour ?? true)
            {
                fg.AppendItem(item.StartHour, "StartHour");
            }
            if (printMask?.EndHour ?? true)
            {
                fg.AppendItem(item.EndHour, "EndHour");
            }
            if (printMask?.Radius ?? true)
            {
                fg.AppendItem(item.Radius, "Radius");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.OnlyBuysStolenItems ?? true)
            {
                fg.AppendItem(item.OnlyBuysStolenItems, "OnlyBuysStolenItems");
            }
            if (printMask?.NotSellBuy ?? true)
            {
                fg.AppendItem(item.NotSellBuy, "NotSellBuy");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IVendorValuesGetter? lhs,
            IVendorValuesGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.StartHour != rhs.StartHour) return false;
            if (lhs.EndHour != rhs.EndHour) return false;
            if (lhs.Radius != rhs.Radius) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.OnlyBuysStolenItems != rhs.OnlyBuysStolenItems) return false;
            if (lhs.NotSellBuy != rhs.NotSellBuy) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            return true;
        }
        
        public virtual int GetHashCode(IVendorValuesGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.StartHour);
            hash.Add(item.EndHour);
            hash.Add(item.Radius);
            hash.Add(item.Unknown);
            hash.Add(item.OnlyBuysStolenItems);
            hash.Add(item.NotSellBuy);
            hash.Add(item.Unknown2);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return VendorValues.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IVendorValuesGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class VendorValuesSetterTranslationCommon
    {
        public static readonly VendorValuesSetterTranslationCommon Instance = new VendorValuesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IVendorValues item,
            IVendorValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.StartHour) ?? true))
            {
                item.StartHour = rhs.StartHour;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.EndHour) ?? true))
            {
                item.EndHour = rhs.EndHour;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.OnlyBuysStolenItems) ?? true))
            {
                item.OnlyBuysStolenItems = rhs.OnlyBuysStolenItems;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.NotSellBuy) ?? true))
            {
                item.NotSellBuy = rhs.NotSellBuy;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
        }
        
        #endregion
        
        public VendorValues DeepCopy(
            IVendorValuesGetter item,
            VendorValues.TranslationMask? copyMask = null)
        {
            VendorValues ret = (VendorValues)((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).GetNew();
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public VendorValues DeepCopy(
            IVendorValuesGetter item,
            out VendorValues.ErrorMask errorMask,
            VendorValues.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            VendorValues ret = (VendorValues)((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).GetNew();
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = VendorValues.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public VendorValues DeepCopy(
            IVendorValuesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            VendorValues ret = (VendorValues)((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).GetNew();
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class VendorValues
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VendorValues_Registration.Instance;
        public static VendorValues_Registration Registration => VendorValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VendorValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return VendorValuesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VendorValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class VendorValuesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static VendorValuesBinaryWriteTranslation Instance = new VendorValuesBinaryWriteTranslation();

        public static void WriteEmbedded(
            IVendorValuesGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.StartHour);
            writer.Write(item.EndHour);
            writer.Write(item.Radius);
            writer.Write(item.Unknown);
            writer.Write(item.OnlyBuysStolenItems);
            writer.Write(item.NotSellBuy);
            writer.Write(item.Unknown2);
        }

        public void Write(
            MutagenWriter writer,
            IVendorValuesGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.VENV),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IVendorValuesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class VendorValuesBinaryCreateTranslation
    {
        public readonly static VendorValuesBinaryCreateTranslation Instance = new VendorValuesBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IVendorValues item,
            MutagenFrame frame)
        {
            item.StartHour = frame.ReadUInt16();
            item.EndHour = frame.ReadUInt16();
            item.Radius = frame.ReadUInt16();
            item.Unknown = frame.ReadUInt16();
            item.OnlyBuysStolenItems = frame.ReadBoolean();
            item.NotSellBuy = frame.ReadBoolean();
            item.Unknown2 = frame.ReadUInt16();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class VendorValuesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IVendorValuesGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((VendorValuesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class VendorValuesBinaryOverlay :
        BinaryOverlay,
        IVendorValuesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VendorValues_Registration.Instance;
        public static VendorValues_Registration Registration => VendorValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VendorValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VendorValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IVendorValuesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => VendorValuesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((VendorValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public UInt16 StartHour => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x0, 0x2));
        public UInt16 EndHour => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x2, 0x2));
        public UInt16 Radius => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x4, 0x2));
        public UInt16 Unknown => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x6, 0x2));
        public Boolean OnlyBuysStolenItems => _data.Slice(0x8, 0x1)[0] == 1;
        public Boolean NotSellBuy => _data.Slice(0x9, 0x1)[0] == 1;
        public UInt16 Unknown2 => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0xA, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected VendorValuesBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static VendorValuesBinaryOverlay VendorValuesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new VendorValuesBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static VendorValuesBinaryOverlay VendorValuesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return VendorValuesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            VendorValuesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IVendorValuesGetter rhs)) return false;
            return ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IVendorValuesGetter? obj)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

