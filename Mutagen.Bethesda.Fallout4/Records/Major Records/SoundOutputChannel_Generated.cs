/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class SoundOutputChannel :
        ISoundOutputChannel,
        ILoquiObjectSetter<SoundOutputChannel>,
        IEquatable<ISoundOutputChannelGetter>
    {
        #region Ctor
        public SoundOutputChannel()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region L
        public Byte L { get; set; } = default;
        #endregion
        #region R
        public Byte R { get; set; } = default;
        #endregion
        #region C
        public Byte C { get; set; } = default;
        #endregion
        #region LFE
        public Byte LFE { get; set; } = default;
        #endregion
        #region RL
        public Byte RL { get; set; } = default;
        #endregion
        #region RR
        public Byte RR { get; set; } = default;
        #endregion
        #region BL
        public Byte BL { get; set; } = default;
        #endregion
        #region BR
        public Byte BR { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoundOutputChannelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISoundOutputChannelGetter rhs)) return false;
            return ((SoundOutputChannelCommon)((ISoundOutputChannelGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISoundOutputChannelGetter? obj)
        {
            return ((SoundOutputChannelCommon)((ISoundOutputChannelGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundOutputChannelCommon)((ISoundOutputChannelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.L = initialValue;
                this.R = initialValue;
                this.C = initialValue;
                this.LFE = initialValue;
                this.RL = initialValue;
                this.RR = initialValue;
                this.BL = initialValue;
                this.BR = initialValue;
            }

            public Mask(
                TItem L,
                TItem R,
                TItem C,
                TItem LFE,
                TItem RL,
                TItem RR,
                TItem BL,
                TItem BR)
            {
                this.L = L;
                this.R = R;
                this.C = C;
                this.LFE = LFE;
                this.RL = RL;
                this.RR = RR;
                this.BL = BL;
                this.BR = BR;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem L;
            public TItem R;
            public TItem C;
            public TItem LFE;
            public TItem RL;
            public TItem RR;
            public TItem BL;
            public TItem BR;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.L, rhs.L)) return false;
                if (!object.Equals(this.R, rhs.R)) return false;
                if (!object.Equals(this.C, rhs.C)) return false;
                if (!object.Equals(this.LFE, rhs.LFE)) return false;
                if (!object.Equals(this.RL, rhs.RL)) return false;
                if (!object.Equals(this.RR, rhs.RR)) return false;
                if (!object.Equals(this.BL, rhs.BL)) return false;
                if (!object.Equals(this.BR, rhs.BR)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.L);
                hash.Add(this.R);
                hash.Add(this.C);
                hash.Add(this.LFE);
                hash.Add(this.RL);
                hash.Add(this.RR);
                hash.Add(this.BL);
                hash.Add(this.BR);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.L)) return false;
                if (!eval(this.R)) return false;
                if (!eval(this.C)) return false;
                if (!eval(this.LFE)) return false;
                if (!eval(this.RL)) return false;
                if (!eval(this.RR)) return false;
                if (!eval(this.BL)) return false;
                if (!eval(this.BR)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.L)) return true;
                if (eval(this.R)) return true;
                if (eval(this.C)) return true;
                if (eval(this.LFE)) return true;
                if (eval(this.RL)) return true;
                if (eval(this.RR)) return true;
                if (eval(this.BL)) return true;
                if (eval(this.BR)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundOutputChannel.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.L = eval(this.L);
                obj.R = eval(this.R);
                obj.C = eval(this.C);
                obj.LFE = eval(this.LFE);
                obj.RL = eval(this.RL);
                obj.RR = eval(this.RR);
                obj.BL = eval(this.BL);
                obj.BR = eval(this.BR);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SoundOutputChannel.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SoundOutputChannel.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SoundOutputChannel.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.L ?? true)
                    {
                        fg.AppendItem(L, "L");
                    }
                    if (printMask?.R ?? true)
                    {
                        fg.AppendItem(R, "R");
                    }
                    if (printMask?.C ?? true)
                    {
                        fg.AppendItem(C, "C");
                    }
                    if (printMask?.LFE ?? true)
                    {
                        fg.AppendItem(LFE, "LFE");
                    }
                    if (printMask?.RL ?? true)
                    {
                        fg.AppendItem(RL, "RL");
                    }
                    if (printMask?.RR ?? true)
                    {
                        fg.AppendItem(RR, "RR");
                    }
                    if (printMask?.BL ?? true)
                    {
                        fg.AppendItem(BL, "BL");
                    }
                    if (printMask?.BR ?? true)
                    {
                        fg.AppendItem(BR, "BR");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? L;
            public Exception? R;
            public Exception? C;
            public Exception? LFE;
            public Exception? RL;
            public Exception? RR;
            public Exception? BL;
            public Exception? BR;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SoundOutputChannel_FieldIndex enu = (SoundOutputChannel_FieldIndex)index;
                switch (enu)
                {
                    case SoundOutputChannel_FieldIndex.L:
                        return L;
                    case SoundOutputChannel_FieldIndex.R:
                        return R;
                    case SoundOutputChannel_FieldIndex.C:
                        return C;
                    case SoundOutputChannel_FieldIndex.LFE:
                        return LFE;
                    case SoundOutputChannel_FieldIndex.RL:
                        return RL;
                    case SoundOutputChannel_FieldIndex.RR:
                        return RR;
                    case SoundOutputChannel_FieldIndex.BL:
                        return BL;
                    case SoundOutputChannel_FieldIndex.BR:
                        return BR;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SoundOutputChannel_FieldIndex enu = (SoundOutputChannel_FieldIndex)index;
                switch (enu)
                {
                    case SoundOutputChannel_FieldIndex.L:
                        this.L = ex;
                        break;
                    case SoundOutputChannel_FieldIndex.R:
                        this.R = ex;
                        break;
                    case SoundOutputChannel_FieldIndex.C:
                        this.C = ex;
                        break;
                    case SoundOutputChannel_FieldIndex.LFE:
                        this.LFE = ex;
                        break;
                    case SoundOutputChannel_FieldIndex.RL:
                        this.RL = ex;
                        break;
                    case SoundOutputChannel_FieldIndex.RR:
                        this.RR = ex;
                        break;
                    case SoundOutputChannel_FieldIndex.BL:
                        this.BL = ex;
                        break;
                    case SoundOutputChannel_FieldIndex.BR:
                        this.BR = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SoundOutputChannel_FieldIndex enu = (SoundOutputChannel_FieldIndex)index;
                switch (enu)
                {
                    case SoundOutputChannel_FieldIndex.L:
                        this.L = (Exception?)obj;
                        break;
                    case SoundOutputChannel_FieldIndex.R:
                        this.R = (Exception?)obj;
                        break;
                    case SoundOutputChannel_FieldIndex.C:
                        this.C = (Exception?)obj;
                        break;
                    case SoundOutputChannel_FieldIndex.LFE:
                        this.LFE = (Exception?)obj;
                        break;
                    case SoundOutputChannel_FieldIndex.RL:
                        this.RL = (Exception?)obj;
                        break;
                    case SoundOutputChannel_FieldIndex.RR:
                        this.RR = (Exception?)obj;
                        break;
                    case SoundOutputChannel_FieldIndex.BL:
                        this.BL = (Exception?)obj;
                        break;
                    case SoundOutputChannel_FieldIndex.BR:
                        this.BR = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (L != null) return true;
                if (R != null) return true;
                if (C != null) return true;
                if (LFE != null) return true;
                if (RL != null) return true;
                if (RR != null) return true;
                if (BL != null) return true;
                if (BR != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(L, "L");
                fg.AppendItem(R, "R");
                fg.AppendItem(C, "C");
                fg.AppendItem(LFE, "LFE");
                fg.AppendItem(RL, "RL");
                fg.AppendItem(RR, "RR");
                fg.AppendItem(BL, "BL");
                fg.AppendItem(BR, "BR");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.L = this.L.Combine(rhs.L);
                ret.R = this.R.Combine(rhs.R);
                ret.C = this.C.Combine(rhs.C);
                ret.LFE = this.LFE.Combine(rhs.LFE);
                ret.RL = this.RL.Combine(rhs.RL);
                ret.RR = this.RR.Combine(rhs.RR);
                ret.BL = this.BL.Combine(rhs.BL);
                ret.BR = this.BR.Combine(rhs.BR);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool L;
            public bool R;
            public bool C;
            public bool LFE;
            public bool RL;
            public bool RR;
            public bool BL;
            public bool BR;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.L = defaultOn;
                this.R = defaultOn;
                this.C = defaultOn;
                this.LFE = defaultOn;
                this.RL = defaultOn;
                this.RR = defaultOn;
                this.BL = defaultOn;
                this.BR = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((L, null));
                ret.Add((R, null));
                ret.Add((C, null));
                ret.Add((LFE, null));
                ret.Add((RL, null));
                ret.Add((RR, null));
                ret.Add((BL, null));
                ret.Add((BR, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundOutputChannelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundOutputChannelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static SoundOutputChannel CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SoundOutputChannel();
            ((SoundOutputChannelSetterCommon)((ISoundOutputChannelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundOutputChannel item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((SoundOutputChannelSetterCommon)((ISoundOutputChannelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SoundOutputChannel GetNew()
        {
            return new SoundOutputChannel();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundOutputChannel :
        ISoundOutputChannelGetter,
        ILoquiObjectSetter<ISoundOutputChannel>
    {
        new Byte L { get; set; }
        new Byte R { get; set; }
        new Byte C { get; set; }
        new Byte LFE { get; set; }
        new Byte RL { get; set; }
        new Byte RR { get; set; }
        new Byte BL { get; set; }
        new Byte BR { get; set; }
    }

    public partial interface ISoundOutputChannelGetter :
        ILoquiObject,
        ILoquiObject<ISoundOutputChannelGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => SoundOutputChannel_Registration.Instance;
        Byte L { get; }
        Byte R { get; }
        Byte C { get; }
        Byte LFE { get; }
        Byte RL { get; }
        Byte RR { get; }
        Byte BL { get; }
        Byte BR { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundOutputChannelMixIn
    {
        public static void Clear(this ISoundOutputChannel item)
        {
            ((SoundOutputChannelSetterCommon)((ISoundOutputChannelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundOutputChannel.Mask<bool> GetEqualsMask(
            this ISoundOutputChannelGetter item,
            ISoundOutputChannelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundOutputChannelCommon)((ISoundOutputChannelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISoundOutputChannelGetter item,
            string? name = null,
            SoundOutputChannel.Mask<bool>? printMask = null)
        {
            return ((SoundOutputChannelCommon)((ISoundOutputChannelGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISoundOutputChannelGetter item,
            FileGeneration fg,
            string? name = null,
            SoundOutputChannel.Mask<bool>? printMask = null)
        {
            ((SoundOutputChannelCommon)((ISoundOutputChannelGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundOutputChannelGetter item,
            ISoundOutputChannelGetter rhs)
        {
            return ((SoundOutputChannelCommon)((ISoundOutputChannelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISoundOutputChannel lhs,
            ISoundOutputChannelGetter rhs)
        {
            ((SoundOutputChannelSetterTranslationCommon)((ISoundOutputChannelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundOutputChannel lhs,
            ISoundOutputChannelGetter rhs,
            SoundOutputChannel.TranslationMask? copyMask = null)
        {
            ((SoundOutputChannelSetterTranslationCommon)((ISoundOutputChannelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundOutputChannel lhs,
            ISoundOutputChannelGetter rhs,
            out SoundOutputChannel.ErrorMask errorMask,
            SoundOutputChannel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundOutputChannelSetterTranslationCommon)((ISoundOutputChannelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundOutputChannel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundOutputChannel lhs,
            ISoundOutputChannelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundOutputChannelSetterTranslationCommon)((ISoundOutputChannelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundOutputChannel DeepCopy(
            this ISoundOutputChannelGetter item,
            SoundOutputChannel.TranslationMask? copyMask = null)
        {
            return ((SoundOutputChannelSetterTranslationCommon)((ISoundOutputChannelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundOutputChannel DeepCopy(
            this ISoundOutputChannelGetter item,
            out SoundOutputChannel.ErrorMask errorMask,
            SoundOutputChannel.TranslationMask? copyMask = null)
        {
            return ((SoundOutputChannelSetterTranslationCommon)((ISoundOutputChannelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundOutputChannel DeepCopy(
            this ISoundOutputChannelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundOutputChannelSetterTranslationCommon)((ISoundOutputChannelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundOutputChannel item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundOutputChannelSetterCommon)((ISoundOutputChannelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum SoundOutputChannel_FieldIndex
    {
        L = 0,
        R = 1,
        C = 2,
        LFE = 3,
        RL = 4,
        RR = 5,
        BL = 6,
        BR = 7,
    }
    #endregion

    #region Registration
    public partial class SoundOutputChannel_Registration : ILoquiRegistration
    {
        public static readonly SoundOutputChannel_Registration Instance = new SoundOutputChannel_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 476,
            version: 0);

        public const string GUID = "3ab2f42e-9b99-4513-b8ed-86d9255d4c29";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(SoundOutputChannel.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundOutputChannel.ErrorMask);

        public static readonly Type ClassType = typeof(SoundOutputChannel);

        public static readonly Type GetterType = typeof(ISoundOutputChannelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundOutputChannel);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.SoundOutputChannel";

        public const string Name = "SoundOutputChannel";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(SoundOutputChannelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class SoundOutputChannelSetterCommon
    {
        public static readonly SoundOutputChannelSetterCommon Instance = new SoundOutputChannelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundOutputChannel item)
        {
            ClearPartial();
            item.L = default;
            item.R = default;
            item.C = default;
            item.LFE = default;
            item.RL = default;
            item.RR = default;
            item.BL = default;
            item.BR = default;
        }
        
        #region Mutagen
        public void RemapLinks(ISoundOutputChannel obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundOutputChannel item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: SoundOutputChannelBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class SoundOutputChannelCommon
    {
        public static readonly SoundOutputChannelCommon Instance = new SoundOutputChannelCommon();

        public SoundOutputChannel.Mask<bool> GetEqualsMask(
            ISoundOutputChannelGetter item,
            ISoundOutputChannelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundOutputChannel.Mask<bool>(false);
            ((SoundOutputChannelCommon)((ISoundOutputChannelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundOutputChannelGetter item,
            ISoundOutputChannelGetter rhs,
            SoundOutputChannel.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.L = item.L == rhs.L;
            ret.R = item.R == rhs.R;
            ret.C = item.C == rhs.C;
            ret.LFE = item.LFE == rhs.LFE;
            ret.RL = item.RL == rhs.RL;
            ret.RR = item.RR == rhs.RR;
            ret.BL = item.BL == rhs.BL;
            ret.BR = item.BR == rhs.BR;
        }
        
        public string ToString(
            ISoundOutputChannelGetter item,
            string? name = null,
            SoundOutputChannel.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISoundOutputChannelGetter item,
            FileGeneration fg,
            string? name = null,
            SoundOutputChannel.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SoundOutputChannel =>");
            }
            else
            {
                fg.AppendLine($"{name} (SoundOutputChannel) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISoundOutputChannelGetter item,
            FileGeneration fg,
            SoundOutputChannel.Mask<bool>? printMask = null)
        {
            if (printMask?.L ?? true)
            {
                fg.AppendItem(item.L, "L");
            }
            if (printMask?.R ?? true)
            {
                fg.AppendItem(item.R, "R");
            }
            if (printMask?.C ?? true)
            {
                fg.AppendItem(item.C, "C");
            }
            if (printMask?.LFE ?? true)
            {
                fg.AppendItem(item.LFE, "LFE");
            }
            if (printMask?.RL ?? true)
            {
                fg.AppendItem(item.RL, "RL");
            }
            if (printMask?.RR ?? true)
            {
                fg.AppendItem(item.RR, "RR");
            }
            if (printMask?.BL ?? true)
            {
                fg.AppendItem(item.BL, "BL");
            }
            if (printMask?.BR ?? true)
            {
                fg.AppendItem(item.BR, "BR");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundOutputChannelGetter? lhs,
            ISoundOutputChannelGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.L != rhs.L) return false;
            if (lhs.R != rhs.R) return false;
            if (lhs.C != rhs.C) return false;
            if (lhs.LFE != rhs.LFE) return false;
            if (lhs.RL != rhs.RL) return false;
            if (lhs.RR != rhs.RR) return false;
            if (lhs.BL != rhs.BL) return false;
            if (lhs.BR != rhs.BR) return false;
            return true;
        }
        
        public virtual int GetHashCode(ISoundOutputChannelGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.L);
            hash.Add(item.R);
            hash.Add(item.C);
            hash.Add(item.LFE);
            hash.Add(item.RL);
            hash.Add(item.RR);
            hash.Add(item.BL);
            hash.Add(item.BR);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SoundOutputChannel.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ISoundOutputChannelGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class SoundOutputChannelSetterTranslationCommon
    {
        public static readonly SoundOutputChannelSetterTranslationCommon Instance = new SoundOutputChannelSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundOutputChannel item,
            ISoundOutputChannelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)SoundOutputChannel_FieldIndex.L) ?? true))
            {
                item.L = rhs.L;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputChannel_FieldIndex.R) ?? true))
            {
                item.R = rhs.R;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputChannel_FieldIndex.C) ?? true))
            {
                item.C = rhs.C;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputChannel_FieldIndex.LFE) ?? true))
            {
                item.LFE = rhs.LFE;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputChannel_FieldIndex.RL) ?? true))
            {
                item.RL = rhs.RL;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputChannel_FieldIndex.RR) ?? true))
            {
                item.RR = rhs.RR;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputChannel_FieldIndex.BL) ?? true))
            {
                item.BL = rhs.BL;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputChannel_FieldIndex.BR) ?? true))
            {
                item.BR = rhs.BR;
            }
        }
        
        #endregion
        
        public SoundOutputChannel DeepCopy(
            ISoundOutputChannelGetter item,
            SoundOutputChannel.TranslationMask? copyMask = null)
        {
            SoundOutputChannel ret = (SoundOutputChannel)((SoundOutputChannelCommon)((ISoundOutputChannelGetter)item).CommonInstance()!).GetNew();
            ((SoundOutputChannelSetterTranslationCommon)((ISoundOutputChannelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundOutputChannel DeepCopy(
            ISoundOutputChannelGetter item,
            out SoundOutputChannel.ErrorMask errorMask,
            SoundOutputChannel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundOutputChannel ret = (SoundOutputChannel)((SoundOutputChannelCommon)((ISoundOutputChannelGetter)item).CommonInstance()!).GetNew();
            ((SoundOutputChannelSetterTranslationCommon)((ISoundOutputChannelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundOutputChannel.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundOutputChannel DeepCopy(
            ISoundOutputChannelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundOutputChannel ret = (SoundOutputChannel)((SoundOutputChannelCommon)((ISoundOutputChannelGetter)item).CommonInstance()!).GetNew();
            ((SoundOutputChannelSetterTranslationCommon)((ISoundOutputChannelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundOutputChannel
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundOutputChannel_Registration.Instance;
        public static SoundOutputChannel_Registration Registration => SoundOutputChannel_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundOutputChannelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SoundOutputChannelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundOutputChannelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundOutputChannelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISoundOutputChannelGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISoundOutputChannelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SoundOutputChannelBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static SoundOutputChannelBinaryWriteTranslation Instance = new SoundOutputChannelBinaryWriteTranslation();

        public static void WriteEmbedded(
            ISoundOutputChannelGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.L);
            writer.Write(item.R);
            writer.Write(item.C);
            writer.Write(item.LFE);
            writer.Write(item.RL);
            writer.Write(item.RR);
            writer.Write(item.BL);
            writer.Write(item.BR);
        }

        public void Write(
            MutagenWriter writer,
            ISoundOutputChannelGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoundOutputChannelGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SoundOutputChannelBinaryCreateTranslation
    {
        public readonly static SoundOutputChannelBinaryCreateTranslation Instance = new SoundOutputChannelBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISoundOutputChannel item,
            MutagenFrame frame)
        {
            item.L = frame.ReadUInt8();
            item.R = frame.ReadUInt8();
            item.C = frame.ReadUInt8();
            item.LFE = frame.ReadUInt8();
            item.RL = frame.ReadUInt8();
            item.RR = frame.ReadUInt8();
            item.BL = frame.ReadUInt8();
            item.BR = frame.ReadUInt8();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SoundOutputChannelBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISoundOutputChannelGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundOutputChannelBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SoundOutputChannelBinaryOverlay :
        BinaryOverlay,
        ISoundOutputChannelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundOutputChannel_Registration.Instance;
        public static SoundOutputChannel_Registration Registration => SoundOutputChannel_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SoundOutputChannelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SoundOutputChannelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundOutputChannelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISoundOutputChannelGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISoundOutputChannelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SoundOutputChannelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundOutputChannelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Byte L => _data.Span[0x0];
        public Byte R => _data.Span[0x1];
        public Byte C => _data.Span[0x2];
        public Byte LFE => _data.Span[0x3];
        public Byte RL => _data.Span[0x4];
        public Byte RR => _data.Span[0x5];
        public Byte BL => _data.Span[0x6];
        public Byte BR => _data.Span[0x7];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundOutputChannelBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static SoundOutputChannelBinaryOverlay SoundOutputChannelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SoundOutputChannelBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0x8),
                package: package);
            int offset = stream.Position;
            stream.Position += 0x8;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static SoundOutputChannelBinaryOverlay SoundOutputChannelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return SoundOutputChannelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoundOutputChannelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISoundOutputChannelGetter rhs)) return false;
            return ((SoundOutputChannelCommon)((ISoundOutputChannelGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISoundOutputChannelGetter? obj)
        {
            return ((SoundOutputChannelCommon)((ISoundOutputChannelGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundOutputChannelCommon)((ISoundOutputChannelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

