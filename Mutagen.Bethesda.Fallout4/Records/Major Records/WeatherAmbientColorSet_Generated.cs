/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class WeatherAmbientColorSet :
        IWeatherAmbientColorSet,
        ILoquiObjectSetter<WeatherAmbientColorSet>,
        IEquatable<IWeatherAmbientColorSetGetter>
    {
        #region Ctor
        public WeatherAmbientColorSet()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Sunrise
        public AmbientColors Sunrise { get; set; } = new AmbientColors();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAmbientColorsGetter IWeatherAmbientColorSetGetter.Sunrise => Sunrise;
        #endregion
        #region Day
        public AmbientColors Day { get; set; } = new AmbientColors();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAmbientColorsGetter IWeatherAmbientColorSetGetter.Day => Day;
        #endregion
        #region Sunset
        public AmbientColors Sunset { get; set; } = new AmbientColors();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAmbientColorsGetter IWeatherAmbientColorSetGetter.Sunset => Sunset;
        #endregion
        #region Night
        public AmbientColors Night { get; set; } = new AmbientColors();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAmbientColorsGetter IWeatherAmbientColorSetGetter.Night => Night;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeatherAmbientColorSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWeatherAmbientColorSetGetter rhs)) return false;
            return ((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IWeatherAmbientColorSetGetter? obj)
        {
            return ((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Sunrise = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(initialValue, new AmbientColors.Mask<TItem>(initialValue));
                this.Day = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(initialValue, new AmbientColors.Mask<TItem>(initialValue));
                this.Sunset = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(initialValue, new AmbientColors.Mask<TItem>(initialValue));
                this.Night = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(initialValue, new AmbientColors.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Sunrise,
                TItem Day,
                TItem Sunset,
                TItem Night)
            {
                this.Sunrise = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(Sunrise, new AmbientColors.Mask<TItem>(Sunrise));
                this.Day = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(Day, new AmbientColors.Mask<TItem>(Day));
                this.Sunset = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(Sunset, new AmbientColors.Mask<TItem>(Sunset));
                this.Night = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(Night, new AmbientColors.Mask<TItem>(Night));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, AmbientColors.Mask<TItem>?>? Sunrise { get; set; }
            public MaskItem<TItem, AmbientColors.Mask<TItem>?>? Day { get; set; }
            public MaskItem<TItem, AmbientColors.Mask<TItem>?>? Sunset { get; set; }
            public MaskItem<TItem, AmbientColors.Mask<TItem>?>? Night { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Sunrise, rhs.Sunrise)) return false;
                if (!object.Equals(this.Day, rhs.Day)) return false;
                if (!object.Equals(this.Sunset, rhs.Sunset)) return false;
                if (!object.Equals(this.Night, rhs.Night)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Sunrise);
                hash.Add(this.Day);
                hash.Add(this.Sunset);
                hash.Add(this.Night);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Sunrise != null)
                {
                    if (!eval(this.Sunrise.Overall)) return false;
                    if (this.Sunrise.Specific != null && !this.Sunrise.Specific.All(eval)) return false;
                }
                if (Day != null)
                {
                    if (!eval(this.Day.Overall)) return false;
                    if (this.Day.Specific != null && !this.Day.Specific.All(eval)) return false;
                }
                if (Sunset != null)
                {
                    if (!eval(this.Sunset.Overall)) return false;
                    if (this.Sunset.Specific != null && !this.Sunset.Specific.All(eval)) return false;
                }
                if (Night != null)
                {
                    if (!eval(this.Night.Overall)) return false;
                    if (this.Night.Specific != null && !this.Night.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Sunrise != null)
                {
                    if (eval(this.Sunrise.Overall)) return true;
                    if (this.Sunrise.Specific != null && this.Sunrise.Specific.Any(eval)) return true;
                }
                if (Day != null)
                {
                    if (eval(this.Day.Overall)) return true;
                    if (this.Day.Specific != null && this.Day.Specific.Any(eval)) return true;
                }
                if (Sunset != null)
                {
                    if (eval(this.Sunset.Overall)) return true;
                    if (this.Sunset.Specific != null && this.Sunset.Specific.Any(eval)) return true;
                }
                if (Night != null)
                {
                    if (eval(this.Night.Overall)) return true;
                    if (this.Night.Specific != null && this.Night.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WeatherAmbientColorSet.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Sunrise = this.Sunrise == null ? null : new MaskItem<R, AmbientColors.Mask<R>?>(eval(this.Sunrise.Overall), this.Sunrise.Specific?.Translate(eval));
                obj.Day = this.Day == null ? null : new MaskItem<R, AmbientColors.Mask<R>?>(eval(this.Day.Overall), this.Day.Specific?.Translate(eval));
                obj.Sunset = this.Sunset == null ? null : new MaskItem<R, AmbientColors.Mask<R>?>(eval(this.Sunset.Overall), this.Sunset.Specific?.Translate(eval));
                obj.Night = this.Night == null ? null : new MaskItem<R, AmbientColors.Mask<R>?>(eval(this.Night.Overall), this.Night.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(WeatherAmbientColorSet.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, WeatherAmbientColorSet.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(WeatherAmbientColorSet.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Sunrise?.Overall ?? true)
                    {
                        Sunrise?.ToString(fg);
                    }
                    if (printMask?.Day?.Overall ?? true)
                    {
                        Day?.ToString(fg);
                    }
                    if (printMask?.Sunset?.Overall ?? true)
                    {
                        Sunset?.ToString(fg);
                    }
                    if (printMask?.Night?.Overall ?? true)
                    {
                        Night?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, AmbientColors.ErrorMask?>? Sunrise;
            public MaskItem<Exception?, AmbientColors.ErrorMask?>? Day;
            public MaskItem<Exception?, AmbientColors.ErrorMask?>? Sunset;
            public MaskItem<Exception?, AmbientColors.ErrorMask?>? Night;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                WeatherAmbientColorSet_FieldIndex enu = (WeatherAmbientColorSet_FieldIndex)index;
                switch (enu)
                {
                    case WeatherAmbientColorSet_FieldIndex.Sunrise:
                        return Sunrise;
                    case WeatherAmbientColorSet_FieldIndex.Day:
                        return Day;
                    case WeatherAmbientColorSet_FieldIndex.Sunset:
                        return Sunset;
                    case WeatherAmbientColorSet_FieldIndex.Night:
                        return Night;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                WeatherAmbientColorSet_FieldIndex enu = (WeatherAmbientColorSet_FieldIndex)index;
                switch (enu)
                {
                    case WeatherAmbientColorSet_FieldIndex.Sunrise:
                        this.Sunrise = new MaskItem<Exception?, AmbientColors.ErrorMask?>(ex, null);
                        break;
                    case WeatherAmbientColorSet_FieldIndex.Day:
                        this.Day = new MaskItem<Exception?, AmbientColors.ErrorMask?>(ex, null);
                        break;
                    case WeatherAmbientColorSet_FieldIndex.Sunset:
                        this.Sunset = new MaskItem<Exception?, AmbientColors.ErrorMask?>(ex, null);
                        break;
                    case WeatherAmbientColorSet_FieldIndex.Night:
                        this.Night = new MaskItem<Exception?, AmbientColors.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                WeatherAmbientColorSet_FieldIndex enu = (WeatherAmbientColorSet_FieldIndex)index;
                switch (enu)
                {
                    case WeatherAmbientColorSet_FieldIndex.Sunrise:
                        this.Sunrise = (MaskItem<Exception?, AmbientColors.ErrorMask?>?)obj;
                        break;
                    case WeatherAmbientColorSet_FieldIndex.Day:
                        this.Day = (MaskItem<Exception?, AmbientColors.ErrorMask?>?)obj;
                        break;
                    case WeatherAmbientColorSet_FieldIndex.Sunset:
                        this.Sunset = (MaskItem<Exception?, AmbientColors.ErrorMask?>?)obj;
                        break;
                    case WeatherAmbientColorSet_FieldIndex.Night:
                        this.Night = (MaskItem<Exception?, AmbientColors.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Sunrise != null) return true;
                if (Day != null) return true;
                if (Sunset != null) return true;
                if (Night != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                Sunrise?.ToString(fg);
                Day?.ToString(fg);
                Sunset?.ToString(fg);
                Night?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Sunrise = this.Sunrise.Combine(rhs.Sunrise, (l, r) => l.Combine(r));
                ret.Day = this.Day.Combine(rhs.Day, (l, r) => l.Combine(r));
                ret.Sunset = this.Sunset.Combine(rhs.Sunset, (l, r) => l.Combine(r));
                ret.Night = this.Night.Combine(rhs.Night, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public AmbientColors.TranslationMask? Sunrise;
            public AmbientColors.TranslationMask? Day;
            public AmbientColors.TranslationMask? Sunset;
            public AmbientColors.TranslationMask? Night;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Sunrise != null ? Sunrise.OnOverall : DefaultOn, Sunrise?.GetCrystal()));
                ret.Add((Day != null ? Day.OnOverall : DefaultOn, Day?.GetCrystal()));
                ret.Add((Sunset != null ? Sunset.OnOverall : DefaultOn, Sunset?.GetCrystal()));
                ret.Add((Night != null ? Night.OnOverall : DefaultOn, Night?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = WeatherAmbientColorSet_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeatherAmbientColorSetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherAmbientColorSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static WeatherAmbientColorSet CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WeatherAmbientColorSet();
            ((WeatherAmbientColorSetSetterCommon)((IWeatherAmbientColorSetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WeatherAmbientColorSet item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((WeatherAmbientColorSetSetterCommon)((IWeatherAmbientColorSetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static WeatherAmbientColorSet GetNew()
        {
            return new WeatherAmbientColorSet();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeatherAmbientColorSet :
        IWeatherAmbientColorSetGetter,
        ILoquiObjectSetter<IWeatherAmbientColorSet>
    {
        new AmbientColors Sunrise { get; set; }
        new AmbientColors Day { get; set; }
        new AmbientColors Sunset { get; set; }
        new AmbientColors Night { get; set; }
    }

    public partial interface IWeatherAmbientColorSetGetter :
        ILoquiObject,
        ILoquiObject<IWeatherAmbientColorSetGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => WeatherAmbientColorSet_Registration.Instance;
        IAmbientColorsGetter Sunrise { get; }
        IAmbientColorsGetter Day { get; }
        IAmbientColorsGetter Sunset { get; }
        IAmbientColorsGetter Night { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WeatherAmbientColorSetMixIn
    {
        public static void Clear(this IWeatherAmbientColorSet item)
        {
            ((WeatherAmbientColorSetSetterCommon)((IWeatherAmbientColorSetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WeatherAmbientColorSet.Mask<bool> GetEqualsMask(
            this IWeatherAmbientColorSetGetter item,
            IWeatherAmbientColorSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWeatherAmbientColorSetGetter item,
            string? name = null,
            WeatherAmbientColorSet.Mask<bool>? printMask = null)
        {
            return ((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWeatherAmbientColorSetGetter item,
            FileGeneration fg,
            string? name = null,
            WeatherAmbientColorSet.Mask<bool>? printMask = null)
        {
            ((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWeatherAmbientColorSetGetter item,
            IWeatherAmbientColorSetGetter rhs)
        {
            return ((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWeatherAmbientColorSet lhs,
            IWeatherAmbientColorSetGetter rhs)
        {
            ((WeatherAmbientColorSetSetterTranslationCommon)((IWeatherAmbientColorSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWeatherAmbientColorSet lhs,
            IWeatherAmbientColorSetGetter rhs,
            WeatherAmbientColorSet.TranslationMask? copyMask = null)
        {
            ((WeatherAmbientColorSetSetterTranslationCommon)((IWeatherAmbientColorSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IWeatherAmbientColorSet lhs,
            IWeatherAmbientColorSetGetter rhs,
            out WeatherAmbientColorSet.ErrorMask errorMask,
            WeatherAmbientColorSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherAmbientColorSetSetterTranslationCommon)((IWeatherAmbientColorSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = WeatherAmbientColorSet.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeatherAmbientColorSet lhs,
            IWeatherAmbientColorSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeatherAmbientColorSetSetterTranslationCommon)((IWeatherAmbientColorSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static WeatherAmbientColorSet DeepCopy(
            this IWeatherAmbientColorSetGetter item,
            WeatherAmbientColorSet.TranslationMask? copyMask = null)
        {
            return ((WeatherAmbientColorSetSetterTranslationCommon)((IWeatherAmbientColorSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WeatherAmbientColorSet DeepCopy(
            this IWeatherAmbientColorSetGetter item,
            out WeatherAmbientColorSet.ErrorMask errorMask,
            WeatherAmbientColorSet.TranslationMask? copyMask = null)
        {
            return ((WeatherAmbientColorSetSetterTranslationCommon)((IWeatherAmbientColorSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WeatherAmbientColorSet DeepCopy(
            this IWeatherAmbientColorSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeatherAmbientColorSetSetterTranslationCommon)((IWeatherAmbientColorSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWeatherAmbientColorSet item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherAmbientColorSetSetterCommon)((IWeatherAmbientColorSetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum WeatherAmbientColorSet_FieldIndex
    {
        Sunrise = 0,
        Day = 1,
        Sunset = 2,
        Night = 3,
    }
    #endregion

    #region Registration
    public partial class WeatherAmbientColorSet_Registration : ILoquiRegistration
    {
        public static readonly WeatherAmbientColorSet_Registration Instance = new WeatherAmbientColorSet_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 255,
            version: 0);

        public const string GUID = "b0ef3c9c-7f5e-4b05-bb7c-c8054c9d255e";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(WeatherAmbientColorSet.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WeatherAmbientColorSet.ErrorMask);

        public static readonly Type ClassType = typeof(WeatherAmbientColorSet);

        public static readonly Type GetterType = typeof(IWeatherAmbientColorSetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeatherAmbientColorSet);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.WeatherAmbientColorSet";

        public const string Name = "WeatherAmbientColorSet";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DALC;
        public static readonly Type BinaryWriteTranslation = typeof(WeatherAmbientColorSetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class WeatherAmbientColorSetSetterCommon
    {
        public static readonly WeatherAmbientColorSetSetterCommon Instance = new WeatherAmbientColorSetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeatherAmbientColorSet item)
        {
            ClearPartial();
            item.Sunrise.Clear();
            item.Day.Clear();
            item.Sunset.Clear();
            item.Night.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IWeatherAmbientColorSet obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWeatherAmbientColorSet item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.DALC)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: WeatherAmbientColorSetBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class WeatherAmbientColorSetCommon
    {
        public static readonly WeatherAmbientColorSetCommon Instance = new WeatherAmbientColorSetCommon();

        public WeatherAmbientColorSet.Mask<bool> GetEqualsMask(
            IWeatherAmbientColorSetGetter item,
            IWeatherAmbientColorSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WeatherAmbientColorSet.Mask<bool>(false);
            ((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeatherAmbientColorSetGetter item,
            IWeatherAmbientColorSetGetter rhs,
            WeatherAmbientColorSet.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Sunrise = MaskItemExt.Factory(item.Sunrise.GetEqualsMask(rhs.Sunrise, include), include);
            ret.Day = MaskItemExt.Factory(item.Day.GetEqualsMask(rhs.Day, include), include);
            ret.Sunset = MaskItemExt.Factory(item.Sunset.GetEqualsMask(rhs.Sunset, include), include);
            ret.Night = MaskItemExt.Factory(item.Night.GetEqualsMask(rhs.Night, include), include);
        }
        
        public string ToString(
            IWeatherAmbientColorSetGetter item,
            string? name = null,
            WeatherAmbientColorSet.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWeatherAmbientColorSetGetter item,
            FileGeneration fg,
            string? name = null,
            WeatherAmbientColorSet.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"WeatherAmbientColorSet =>");
            }
            else
            {
                fg.AppendLine($"{name} (WeatherAmbientColorSet) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWeatherAmbientColorSetGetter item,
            FileGeneration fg,
            WeatherAmbientColorSet.Mask<bool>? printMask = null)
        {
            if (printMask?.Sunrise?.Overall ?? true)
            {
                item.Sunrise?.ToString(fg, "Sunrise");
            }
            if (printMask?.Day?.Overall ?? true)
            {
                item.Day?.ToString(fg, "Day");
            }
            if (printMask?.Sunset?.Overall ?? true)
            {
                item.Sunset?.ToString(fg, "Sunset");
            }
            if (printMask?.Night?.Overall ?? true)
            {
                item.Night?.ToString(fg, "Night");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeatherAmbientColorSetGetter? lhs,
            IWeatherAmbientColorSetGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.Sunrise, rhs.Sunrise)) return false;
            if (!object.Equals(lhs.Day, rhs.Day)) return false;
            if (!object.Equals(lhs.Sunset, rhs.Sunset)) return false;
            if (!object.Equals(lhs.Night, rhs.Night)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IWeatherAmbientColorSetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Sunrise);
            hash.Add(item.Day);
            hash.Add(item.Sunset);
            hash.Add(item.Night);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return WeatherAmbientColorSet.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IWeatherAmbientColorSetGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class WeatherAmbientColorSetSetterTranslationCommon
    {
        public static readonly WeatherAmbientColorSetSetterTranslationCommon Instance = new WeatherAmbientColorSetSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWeatherAmbientColorSet item,
            IWeatherAmbientColorSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)WeatherAmbientColorSet_FieldIndex.Sunrise) ?? true))
            {
                errorMask?.PushIndex((int)WeatherAmbientColorSet_FieldIndex.Sunrise);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)WeatherAmbientColorSet_FieldIndex.Sunrise) ?? true))
                    {
                        item.Sunrise = rhs.Sunrise.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)WeatherAmbientColorSet_FieldIndex.Sunrise),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherAmbientColorSet_FieldIndex.Day) ?? true))
            {
                errorMask?.PushIndex((int)WeatherAmbientColorSet_FieldIndex.Day);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)WeatherAmbientColorSet_FieldIndex.Day) ?? true))
                    {
                        item.Day = rhs.Day.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)WeatherAmbientColorSet_FieldIndex.Day),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherAmbientColorSet_FieldIndex.Sunset) ?? true))
            {
                errorMask?.PushIndex((int)WeatherAmbientColorSet_FieldIndex.Sunset);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)WeatherAmbientColorSet_FieldIndex.Sunset) ?? true))
                    {
                        item.Sunset = rhs.Sunset.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)WeatherAmbientColorSet_FieldIndex.Sunset),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherAmbientColorSet_FieldIndex.Night) ?? true))
            {
                errorMask?.PushIndex((int)WeatherAmbientColorSet_FieldIndex.Night);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)WeatherAmbientColorSet_FieldIndex.Night) ?? true))
                    {
                        item.Night = rhs.Night.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)WeatherAmbientColorSet_FieldIndex.Night),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public WeatherAmbientColorSet DeepCopy(
            IWeatherAmbientColorSetGetter item,
            WeatherAmbientColorSet.TranslationMask? copyMask = null)
        {
            WeatherAmbientColorSet ret = (WeatherAmbientColorSet)((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)item).CommonInstance()!).GetNew();
            ((WeatherAmbientColorSetSetterTranslationCommon)((IWeatherAmbientColorSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public WeatherAmbientColorSet DeepCopy(
            IWeatherAmbientColorSetGetter item,
            out WeatherAmbientColorSet.ErrorMask errorMask,
            WeatherAmbientColorSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WeatherAmbientColorSet ret = (WeatherAmbientColorSet)((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)item).CommonInstance()!).GetNew();
            ((WeatherAmbientColorSetSetterTranslationCommon)((IWeatherAmbientColorSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = WeatherAmbientColorSet.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public WeatherAmbientColorSet DeepCopy(
            IWeatherAmbientColorSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WeatherAmbientColorSet ret = (WeatherAmbientColorSet)((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)item).CommonInstance()!).GetNew();
            ((WeatherAmbientColorSetSetterTranslationCommon)((IWeatherAmbientColorSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class WeatherAmbientColorSet
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherAmbientColorSet_Registration.Instance;
        public static WeatherAmbientColorSet_Registration Registration => WeatherAmbientColorSet_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeatherAmbientColorSetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return WeatherAmbientColorSetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeatherAmbientColorSetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeatherAmbientColorSetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IWeatherAmbientColorSetGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IWeatherAmbientColorSetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class WeatherAmbientColorSetBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static WeatherAmbientColorSetBinaryWriteTranslation Instance = new WeatherAmbientColorSetBinaryWriteTranslation();

        public static void WriteEmbedded(
            IWeatherAmbientColorSetGetter item,
            MutagenWriter writer)
        {
        }

        public void Write(
            MutagenWriter writer,
            IWeatherAmbientColorSetGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.DALC),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeatherAmbientColorSetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WeatherAmbientColorSetBinaryCreateTranslation
    {
        public readonly static WeatherAmbientColorSetBinaryCreateTranslation Instance = new WeatherAmbientColorSetBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IWeatherAmbientColorSet item,
            MutagenFrame frame)
        {
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class WeatherAmbientColorSetBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWeatherAmbientColorSetGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherAmbientColorSetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class WeatherAmbientColorSetBinaryOverlay :
        BinaryOverlay,
        IWeatherAmbientColorSetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherAmbientColorSet_Registration.Instance;
        public static WeatherAmbientColorSet_Registration Registration => WeatherAmbientColorSet_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeatherAmbientColorSetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeatherAmbientColorSetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeatherAmbientColorSetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IWeatherAmbientColorSetGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IWeatherAmbientColorSetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeatherAmbientColorSetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherAmbientColorSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WeatherAmbientColorSetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static WeatherAmbientColorSetBinaryOverlay WeatherAmbientColorSetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WeatherAmbientColorSetBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x0 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static WeatherAmbientColorSetBinaryOverlay WeatherAmbientColorSetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return WeatherAmbientColorSetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeatherAmbientColorSetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWeatherAmbientColorSetGetter rhs)) return false;
            return ((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IWeatherAmbientColorSetGetter? obj)
        {
            return ((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

