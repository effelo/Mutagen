/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class AIData :
        IAIData,
        ILoquiObjectSetter<AIData>,
        IEquatable<IAIDataGetter>
    {
        #region Ctor
        public AIData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Aggression
        public Aggression Aggression { get; set; } = default;
        #endregion
        #region Confidence
        public Confidence Confidence { get; set; } = default;
        #endregion
        #region EnergyLevel
        public Byte EnergyLevel { get; set; } = default;
        #endregion
        #region Responsibility
        public Responsibility Responsibility { get; set; } = default;
        #endregion
        #region Mood
        public Mood Mood { get; set; } = default;
        #endregion
        #region Assistance
        public Assistance Assistance { get; set; } = default;
        #endregion
        #region AggroRadiusBehavior
        public Boolean AggroRadiusBehavior { get; set; } = default;
        #endregion
        #region Unused
        public Byte Unused { get; set; } = default;
        #endregion
        #region Warn
        public UInt32 Warn { get; set; } = default;
        #endregion
        #region WarnOrAttack
        public UInt32 WarnOrAttack { get; set; } = default;
        #endregion
        #region Attack
        public UInt32 Attack { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AIDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAIDataGetter rhs)) return false;
            return ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAIDataGetter? obj)
        {
            return ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Aggression = initialValue;
                this.Confidence = initialValue;
                this.EnergyLevel = initialValue;
                this.Responsibility = initialValue;
                this.Mood = initialValue;
                this.Assistance = initialValue;
                this.AggroRadiusBehavior = initialValue;
                this.Unused = initialValue;
                this.Warn = initialValue;
                this.WarnOrAttack = initialValue;
                this.Attack = initialValue;
            }

            public Mask(
                TItem Aggression,
                TItem Confidence,
                TItem EnergyLevel,
                TItem Responsibility,
                TItem Mood,
                TItem Assistance,
                TItem AggroRadiusBehavior,
                TItem Unused,
                TItem Warn,
                TItem WarnOrAttack,
                TItem Attack)
            {
                this.Aggression = Aggression;
                this.Confidence = Confidence;
                this.EnergyLevel = EnergyLevel;
                this.Responsibility = Responsibility;
                this.Mood = Mood;
                this.Assistance = Assistance;
                this.AggroRadiusBehavior = AggroRadiusBehavior;
                this.Unused = Unused;
                this.Warn = Warn;
                this.WarnOrAttack = WarnOrAttack;
                this.Attack = Attack;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Aggression;
            public TItem Confidence;
            public TItem EnergyLevel;
            public TItem Responsibility;
            public TItem Mood;
            public TItem Assistance;
            public TItem AggroRadiusBehavior;
            public TItem Unused;
            public TItem Warn;
            public TItem WarnOrAttack;
            public TItem Attack;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Aggression, rhs.Aggression)) return false;
                if (!object.Equals(this.Confidence, rhs.Confidence)) return false;
                if (!object.Equals(this.EnergyLevel, rhs.EnergyLevel)) return false;
                if (!object.Equals(this.Responsibility, rhs.Responsibility)) return false;
                if (!object.Equals(this.Mood, rhs.Mood)) return false;
                if (!object.Equals(this.Assistance, rhs.Assistance)) return false;
                if (!object.Equals(this.AggroRadiusBehavior, rhs.AggroRadiusBehavior)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.Warn, rhs.Warn)) return false;
                if (!object.Equals(this.WarnOrAttack, rhs.WarnOrAttack)) return false;
                if (!object.Equals(this.Attack, rhs.Attack)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Aggression);
                hash.Add(this.Confidence);
                hash.Add(this.EnergyLevel);
                hash.Add(this.Responsibility);
                hash.Add(this.Mood);
                hash.Add(this.Assistance);
                hash.Add(this.AggroRadiusBehavior);
                hash.Add(this.Unused);
                hash.Add(this.Warn);
                hash.Add(this.WarnOrAttack);
                hash.Add(this.Attack);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Aggression)) return false;
                if (!eval(this.Confidence)) return false;
                if (!eval(this.EnergyLevel)) return false;
                if (!eval(this.Responsibility)) return false;
                if (!eval(this.Mood)) return false;
                if (!eval(this.Assistance)) return false;
                if (!eval(this.AggroRadiusBehavior)) return false;
                if (!eval(this.Unused)) return false;
                if (!eval(this.Warn)) return false;
                if (!eval(this.WarnOrAttack)) return false;
                if (!eval(this.Attack)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Aggression)) return true;
                if (eval(this.Confidence)) return true;
                if (eval(this.EnergyLevel)) return true;
                if (eval(this.Responsibility)) return true;
                if (eval(this.Mood)) return true;
                if (eval(this.Assistance)) return true;
                if (eval(this.AggroRadiusBehavior)) return true;
                if (eval(this.Unused)) return true;
                if (eval(this.Warn)) return true;
                if (eval(this.WarnOrAttack)) return true;
                if (eval(this.Attack)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AIData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Aggression = eval(this.Aggression);
                obj.Confidence = eval(this.Confidence);
                obj.EnergyLevel = eval(this.EnergyLevel);
                obj.Responsibility = eval(this.Responsibility);
                obj.Mood = eval(this.Mood);
                obj.Assistance = eval(this.Assistance);
                obj.AggroRadiusBehavior = eval(this.AggroRadiusBehavior);
                obj.Unused = eval(this.Unused);
                obj.Warn = eval(this.Warn);
                obj.WarnOrAttack = eval(this.WarnOrAttack);
                obj.Attack = eval(this.Attack);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AIData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AIData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AIData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Aggression ?? true)
                    {
                        fg.AppendItem(Aggression, "Aggression");
                    }
                    if (printMask?.Confidence ?? true)
                    {
                        fg.AppendItem(Confidence, "Confidence");
                    }
                    if (printMask?.EnergyLevel ?? true)
                    {
                        fg.AppendItem(EnergyLevel, "EnergyLevel");
                    }
                    if (printMask?.Responsibility ?? true)
                    {
                        fg.AppendItem(Responsibility, "Responsibility");
                    }
                    if (printMask?.Mood ?? true)
                    {
                        fg.AppendItem(Mood, "Mood");
                    }
                    if (printMask?.Assistance ?? true)
                    {
                        fg.AppendItem(Assistance, "Assistance");
                    }
                    if (printMask?.AggroRadiusBehavior ?? true)
                    {
                        fg.AppendItem(AggroRadiusBehavior, "AggroRadiusBehavior");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        fg.AppendItem(Unused, "Unused");
                    }
                    if (printMask?.Warn ?? true)
                    {
                        fg.AppendItem(Warn, "Warn");
                    }
                    if (printMask?.WarnOrAttack ?? true)
                    {
                        fg.AppendItem(WarnOrAttack, "WarnOrAttack");
                    }
                    if (printMask?.Attack ?? true)
                    {
                        fg.AppendItem(Attack, "Attack");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Aggression;
            public Exception? Confidence;
            public Exception? EnergyLevel;
            public Exception? Responsibility;
            public Exception? Mood;
            public Exception? Assistance;
            public Exception? AggroRadiusBehavior;
            public Exception? Unused;
            public Exception? Warn;
            public Exception? WarnOrAttack;
            public Exception? Attack;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                AIData_FieldIndex enu = (AIData_FieldIndex)index;
                switch (enu)
                {
                    case AIData_FieldIndex.Aggression:
                        return Aggression;
                    case AIData_FieldIndex.Confidence:
                        return Confidence;
                    case AIData_FieldIndex.EnergyLevel:
                        return EnergyLevel;
                    case AIData_FieldIndex.Responsibility:
                        return Responsibility;
                    case AIData_FieldIndex.Mood:
                        return Mood;
                    case AIData_FieldIndex.Assistance:
                        return Assistance;
                    case AIData_FieldIndex.AggroRadiusBehavior:
                        return AggroRadiusBehavior;
                    case AIData_FieldIndex.Unused:
                        return Unused;
                    case AIData_FieldIndex.Warn:
                        return Warn;
                    case AIData_FieldIndex.WarnOrAttack:
                        return WarnOrAttack;
                    case AIData_FieldIndex.Attack:
                        return Attack;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                AIData_FieldIndex enu = (AIData_FieldIndex)index;
                switch (enu)
                {
                    case AIData_FieldIndex.Aggression:
                        this.Aggression = ex;
                        break;
                    case AIData_FieldIndex.Confidence:
                        this.Confidence = ex;
                        break;
                    case AIData_FieldIndex.EnergyLevel:
                        this.EnergyLevel = ex;
                        break;
                    case AIData_FieldIndex.Responsibility:
                        this.Responsibility = ex;
                        break;
                    case AIData_FieldIndex.Mood:
                        this.Mood = ex;
                        break;
                    case AIData_FieldIndex.Assistance:
                        this.Assistance = ex;
                        break;
                    case AIData_FieldIndex.AggroRadiusBehavior:
                        this.AggroRadiusBehavior = ex;
                        break;
                    case AIData_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    case AIData_FieldIndex.Warn:
                        this.Warn = ex;
                        break;
                    case AIData_FieldIndex.WarnOrAttack:
                        this.WarnOrAttack = ex;
                        break;
                    case AIData_FieldIndex.Attack:
                        this.Attack = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                AIData_FieldIndex enu = (AIData_FieldIndex)index;
                switch (enu)
                {
                    case AIData_FieldIndex.Aggression:
                        this.Aggression = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Confidence:
                        this.Confidence = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.EnergyLevel:
                        this.EnergyLevel = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Responsibility:
                        this.Responsibility = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Mood:
                        this.Mood = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Assistance:
                        this.Assistance = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.AggroRadiusBehavior:
                        this.AggroRadiusBehavior = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Warn:
                        this.Warn = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.WarnOrAttack:
                        this.WarnOrAttack = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Attack:
                        this.Attack = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Aggression != null) return true;
                if (Confidence != null) return true;
                if (EnergyLevel != null) return true;
                if (Responsibility != null) return true;
                if (Mood != null) return true;
                if (Assistance != null) return true;
                if (AggroRadiusBehavior != null) return true;
                if (Unused != null) return true;
                if (Warn != null) return true;
                if (WarnOrAttack != null) return true;
                if (Attack != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Aggression, "Aggression");
                fg.AppendItem(Confidence, "Confidence");
                fg.AppendItem(EnergyLevel, "EnergyLevel");
                fg.AppendItem(Responsibility, "Responsibility");
                fg.AppendItem(Mood, "Mood");
                fg.AppendItem(Assistance, "Assistance");
                fg.AppendItem(AggroRadiusBehavior, "AggroRadiusBehavior");
                fg.AppendItem(Unused, "Unused");
                fg.AppendItem(Warn, "Warn");
                fg.AppendItem(WarnOrAttack, "WarnOrAttack");
                fg.AppendItem(Attack, "Attack");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Aggression = this.Aggression.Combine(rhs.Aggression);
                ret.Confidence = this.Confidence.Combine(rhs.Confidence);
                ret.EnergyLevel = this.EnergyLevel.Combine(rhs.EnergyLevel);
                ret.Responsibility = this.Responsibility.Combine(rhs.Responsibility);
                ret.Mood = this.Mood.Combine(rhs.Mood);
                ret.Assistance = this.Assistance.Combine(rhs.Assistance);
                ret.AggroRadiusBehavior = this.AggroRadiusBehavior.Combine(rhs.AggroRadiusBehavior);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                ret.Warn = this.Warn.Combine(rhs.Warn);
                ret.WarnOrAttack = this.WarnOrAttack.Combine(rhs.WarnOrAttack);
                ret.Attack = this.Attack.Combine(rhs.Attack);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Aggression;
            public bool Confidence;
            public bool EnergyLevel;
            public bool Responsibility;
            public bool Mood;
            public bool Assistance;
            public bool AggroRadiusBehavior;
            public bool Unused;
            public bool Warn;
            public bool WarnOrAttack;
            public bool Attack;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Aggression = defaultOn;
                this.Confidence = defaultOn;
                this.EnergyLevel = defaultOn;
                this.Responsibility = defaultOn;
                this.Mood = defaultOn;
                this.Assistance = defaultOn;
                this.AggroRadiusBehavior = defaultOn;
                this.Unused = defaultOn;
                this.Warn = defaultOn;
                this.WarnOrAttack = defaultOn;
                this.Attack = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Aggression, null));
                ret.Add((Confidence, null));
                ret.Add((EnergyLevel, null));
                ret.Add((Responsibility, null));
                ret.Add((Mood, null));
                ret.Add((Assistance, null));
                ret.Add((AggroRadiusBehavior, null));
                ret.Add((Unused, null));
                ret.Add((Warn, null));
                ret.Add((WarnOrAttack, null));
                ret.Add((Attack, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AIData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AIDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static AIData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AIData();
            ((AIDataSetterCommon)((IAIDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AIData item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((AIDataSetterCommon)((IAIDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static AIData GetNew()
        {
            return new AIData();
        }

    }
    #endregion

    #region Interface
    public partial interface IAIData :
        IAIDataGetter,
        ILoquiObjectSetter<IAIData>
    {
        new Aggression Aggression { get; set; }
        new Confidence Confidence { get; set; }
        new Byte EnergyLevel { get; set; }
        new Responsibility Responsibility { get; set; }
        new Mood Mood { get; set; }
        new Assistance Assistance { get; set; }
        new Boolean AggroRadiusBehavior { get; set; }
        new Byte Unused { get; set; }
        new UInt32 Warn { get; set; }
        new UInt32 WarnOrAttack { get; set; }
        new UInt32 Attack { get; set; }
    }

    public partial interface IAIDataGetter :
        ILoquiObject,
        ILoquiObject<IAIDataGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => AIData_Registration.Instance;
        Aggression Aggression { get; }
        Confidence Confidence { get; }
        Byte EnergyLevel { get; }
        Responsibility Responsibility { get; }
        Mood Mood { get; }
        Assistance Assistance { get; }
        Boolean AggroRadiusBehavior { get; }
        Byte Unused { get; }
        UInt32 Warn { get; }
        UInt32 WarnOrAttack { get; }
        UInt32 Attack { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AIDataMixIn
    {
        public static void Clear(this IAIData item)
        {
            ((AIDataSetterCommon)((IAIDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AIData.Mask<bool> GetEqualsMask(
            this IAIDataGetter item,
            IAIDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAIDataGetter item,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            return ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAIDataGetter item,
            FileGeneration fg,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAIDataGetter item,
            IAIDataGetter rhs)
        {
            return ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs)
        {
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs,
            AIData.TranslationMask? copyMask = null)
        {
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AIData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AIData DeepCopy(
            this IAIDataGetter item,
            AIData.TranslationMask? copyMask = null)
        {
            return ((AIDataSetterTranslationCommon)((IAIDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AIData DeepCopy(
            this IAIDataGetter item,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? copyMask = null)
        {
            return ((AIDataSetterTranslationCommon)((IAIDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AIData DeepCopy(
            this IAIDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AIDataSetterTranslationCommon)((IAIDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAIData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AIDataSetterCommon)((IAIDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum AIData_FieldIndex
    {
        Aggression = 0,
        Confidence = 1,
        EnergyLevel = 2,
        Responsibility = 3,
        Mood = 4,
        Assistance = 5,
        AggroRadiusBehavior = 6,
        Unused = 7,
        Warn = 8,
        WarnOrAttack = 9,
        Attack = 10,
    }
    #endregion

    #region Registration
    public partial class AIData_Registration : ILoquiRegistration
    {
        public static readonly AIData_Registration Instance = new AIData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 207,
            version: 0);

        public const string GUID = "10ac7ce5-4e83-4006-92a0-9976062da7be";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(AIData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIData.ErrorMask);

        public static readonly Type ClassType = typeof(AIData);

        public static readonly Type GetterType = typeof(IAIDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAIData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.AIData";

        public const string Name = "AIData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AIDT;
        public static readonly Type BinaryWriteTranslation = typeof(AIDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class AIDataSetterCommon
    {
        public static readonly AIDataSetterCommon Instance = new AIDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAIData item)
        {
            ClearPartial();
            item.Aggression = default;
            item.Confidence = default;
            item.EnergyLevel = default;
            item.Responsibility = default;
            item.Mood = default;
            item.Assistance = default;
            item.AggroRadiusBehavior = default;
            item.Unused = default;
            item.Warn = default;
            item.WarnOrAttack = default;
            item.Attack = default;
        }
        
        #region Mutagen
        public void RemapLinks(IAIData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAIData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.AIDT)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: AIDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class AIDataCommon
    {
        public static readonly AIDataCommon Instance = new AIDataCommon();

        public AIData.Mask<bool> GetEqualsMask(
            IAIDataGetter item,
            IAIDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AIData.Mask<bool>(false);
            ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAIDataGetter item,
            IAIDataGetter rhs,
            AIData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Aggression = item.Aggression == rhs.Aggression;
            ret.Confidence = item.Confidence == rhs.Confidence;
            ret.EnergyLevel = item.EnergyLevel == rhs.EnergyLevel;
            ret.Responsibility = item.Responsibility == rhs.Responsibility;
            ret.Mood = item.Mood == rhs.Mood;
            ret.Assistance = item.Assistance == rhs.Assistance;
            ret.AggroRadiusBehavior = item.AggroRadiusBehavior == rhs.AggroRadiusBehavior;
            ret.Unused = item.Unused == rhs.Unused;
            ret.Warn = item.Warn == rhs.Warn;
            ret.WarnOrAttack = item.WarnOrAttack == rhs.WarnOrAttack;
            ret.Attack = item.Attack == rhs.Attack;
        }
        
        public string ToString(
            IAIDataGetter item,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAIDataGetter item,
            FileGeneration fg,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AIData =>");
            }
            else
            {
                fg.AppendLine($"{name} (AIData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAIDataGetter item,
            FileGeneration fg,
            AIData.Mask<bool>? printMask = null)
        {
            if (printMask?.Aggression ?? true)
            {
                fg.AppendItem(item.Aggression, "Aggression");
            }
            if (printMask?.Confidence ?? true)
            {
                fg.AppendItem(item.Confidence, "Confidence");
            }
            if (printMask?.EnergyLevel ?? true)
            {
                fg.AppendItem(item.EnergyLevel, "EnergyLevel");
            }
            if (printMask?.Responsibility ?? true)
            {
                fg.AppendItem(item.Responsibility, "Responsibility");
            }
            if (printMask?.Mood ?? true)
            {
                fg.AppendItem(item.Mood, "Mood");
            }
            if (printMask?.Assistance ?? true)
            {
                fg.AppendItem(item.Assistance, "Assistance");
            }
            if (printMask?.AggroRadiusBehavior ?? true)
            {
                fg.AppendItem(item.AggroRadiusBehavior, "AggroRadiusBehavior");
            }
            if (printMask?.Unused ?? true)
            {
                fg.AppendItem(item.Unused, "Unused");
            }
            if (printMask?.Warn ?? true)
            {
                fg.AppendItem(item.Warn, "Warn");
            }
            if (printMask?.WarnOrAttack ?? true)
            {
                fg.AppendItem(item.WarnOrAttack, "WarnOrAttack");
            }
            if (printMask?.Attack ?? true)
            {
                fg.AppendItem(item.Attack, "Attack");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAIDataGetter? lhs,
            IAIDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Aggression != rhs.Aggression) return false;
            if (lhs.Confidence != rhs.Confidence) return false;
            if (lhs.EnergyLevel != rhs.EnergyLevel) return false;
            if (lhs.Responsibility != rhs.Responsibility) return false;
            if (lhs.Mood != rhs.Mood) return false;
            if (lhs.Assistance != rhs.Assistance) return false;
            if (lhs.AggroRadiusBehavior != rhs.AggroRadiusBehavior) return false;
            if (lhs.Unused != rhs.Unused) return false;
            if (lhs.Warn != rhs.Warn) return false;
            if (lhs.WarnOrAttack != rhs.WarnOrAttack) return false;
            if (lhs.Attack != rhs.Attack) return false;
            return true;
        }
        
        public virtual int GetHashCode(IAIDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Aggression);
            hash.Add(item.Confidence);
            hash.Add(item.EnergyLevel);
            hash.Add(item.Responsibility);
            hash.Add(item.Mood);
            hash.Add(item.Assistance);
            hash.Add(item.AggroRadiusBehavior);
            hash.Add(item.Unused);
            hash.Add(item.Warn);
            hash.Add(item.WarnOrAttack);
            hash.Add(item.Attack);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return AIData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IAIDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class AIDataSetterTranslationCommon
    {
        public static readonly AIDataSetterTranslationCommon Instance = new AIDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAIData item,
            IAIDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Aggression) ?? true))
            {
                item.Aggression = rhs.Aggression;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Confidence) ?? true))
            {
                item.Confidence = rhs.Confidence;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.EnergyLevel) ?? true))
            {
                item.EnergyLevel = rhs.EnergyLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Responsibility) ?? true))
            {
                item.Responsibility = rhs.Responsibility;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Mood) ?? true))
            {
                item.Mood = rhs.Mood;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Assistance) ?? true))
            {
                item.Assistance = rhs.Assistance;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.AggroRadiusBehavior) ?? true))
            {
                item.AggroRadiusBehavior = rhs.AggroRadiusBehavior;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Warn) ?? true))
            {
                item.Warn = rhs.Warn;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.WarnOrAttack) ?? true))
            {
                item.WarnOrAttack = rhs.WarnOrAttack;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Attack) ?? true))
            {
                item.Attack = rhs.Attack;
            }
        }
        
        #endregion
        
        public AIData DeepCopy(
            IAIDataGetter item,
            AIData.TranslationMask? copyMask = null)
        {
            AIData ret = (AIData)((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetNew();
            ((AIDataSetterTranslationCommon)((IAIDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AIData DeepCopy(
            IAIDataGetter item,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AIData ret = (AIData)((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetNew();
            ((AIDataSetterTranslationCommon)((IAIDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AIData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AIData DeepCopy(
            IAIDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AIData ret = (AIData)((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetNew();
            ((AIDataSetterTranslationCommon)((IAIDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class AIData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIData_Registration.Instance;
        public static AIData_Registration Registration => AIData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AIDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAIDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAIDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class AIDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static AIDataBinaryWriteTranslation Instance = new AIDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IAIDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Aggression>.Instance.Write(
                writer,
                item.Aggression,
                length: 1);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Confidence>.Instance.Write(
                writer,
                item.Confidence,
                length: 1);
            writer.Write(item.EnergyLevel);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Responsibility>.Instance.Write(
                writer,
                item.Responsibility,
                length: 1);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Mood>.Instance.Write(
                writer,
                item.Mood,
                length: 1);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Assistance>.Instance.Write(
                writer,
                item.Assistance,
                length: 1);
            writer.Write(item.AggroRadiusBehavior);
            writer.Write(item.Unused);
            writer.Write(item.Warn);
            writer.Write(item.WarnOrAttack);
            writer.Write(item.Attack);
        }

        public void Write(
            MutagenWriter writer,
            IAIDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.AIDT),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAIDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AIDataBinaryCreateTranslation
    {
        public readonly static AIDataBinaryCreateTranslation Instance = new AIDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAIData item,
            MutagenFrame frame)
        {
            item.Aggression = EnumBinaryTranslation<Aggression>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.Confidence = EnumBinaryTranslation<Confidence>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.EnergyLevel = frame.ReadUInt8();
            item.Responsibility = EnumBinaryTranslation<Responsibility>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.Mood = EnumBinaryTranslation<Mood>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.Assistance = EnumBinaryTranslation<Assistance>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.AggroRadiusBehavior = frame.ReadBoolean();
            item.Unused = frame.ReadUInt8();
            item.Warn = frame.ReadUInt32();
            item.WarnOrAttack = frame.ReadUInt32();
            item.Attack = frame.ReadUInt32();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class AIDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAIDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AIDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class AIDataBinaryOverlay :
        BinaryOverlay,
        IAIDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIData_Registration.Instance;
        public static AIData_Registration Registration => AIData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAIDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAIDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AIDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Aggression Aggression => (Aggression)_data.Span.Slice(0x0, 0x1)[0];
        public Confidence Confidence => (Confidence)_data.Span.Slice(0x1, 0x1)[0];
        public Byte EnergyLevel => _data.Span[0x2];
        public Responsibility Responsibility => (Responsibility)_data.Span.Slice(0x3, 0x1)[0];
        public Mood Mood => (Mood)_data.Span.Slice(0x4, 0x1)[0];
        public Assistance Assistance => (Assistance)_data.Span.Slice(0x5, 0x1)[0];
        public Boolean AggroRadiusBehavior => _data.Slice(0x6, 0x1)[0] == 1;
        public Byte Unused => _data.Span[0x7];
        public UInt32 Warn => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x8, 0x4));
        public UInt32 WarnOrAttack => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0xC, 0x4));
        public UInt32 Attack => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x10, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AIDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static AIDataBinaryOverlay AIDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AIDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x14 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static AIDataBinaryOverlay AIDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return AIDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AIDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAIDataGetter rhs)) return false;
            return ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAIDataGetter? obj)
        {
            return ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

