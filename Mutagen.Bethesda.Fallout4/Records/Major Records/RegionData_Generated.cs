/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    /// <summary>
    /// Implemented by: [RegionSounds, RegionMap, RegionObjects, RegionWeather, RegionGrasses, RegionLand]
    /// </summary>
    public abstract partial class RegionData :
        IRegionData,
        ILoquiObjectSetter<RegionData>,
        IEquatable<IRegionDataGetter>
    {
        #region Ctor
        public RegionData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Header
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionDataHeader? _Header;
        public RegionDataHeader? Header
        {
            get => _Header;
            set => _Header = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataHeaderGetter? IRegionDataGetter.Header => this.Header;
        #endregion
        #region Icons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Icons? _Icons;
        public Icons? Icons
        {
            get => _Icons;
            set => _Icons = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIconsGetter? IRegionDataGetter.Icons => this.Icons;
        #endregion

        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RegionDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRegionDataGetter rhs)) return false;
            return ((RegionDataCommon)((IRegionDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IRegionDataGetter? obj)
        {
            return ((RegionDataCommon)((IRegionDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionDataCommon)((IRegionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Header = new MaskItem<TItem, RegionDataHeader.Mask<TItem>?>(initialValue, new RegionDataHeader.Mask<TItem>(initialValue));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(initialValue, new Icons.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Header,
                TItem Icons)
            {
                this.Header = new MaskItem<TItem, RegionDataHeader.Mask<TItem>?>(Header, new RegionDataHeader.Mask<TItem>(Header));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(Icons, new Icons.Mask<TItem>(Icons));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, RegionDataHeader.Mask<TItem>?>? Header { get; set; }
            public MaskItem<TItem, Icons.Mask<TItem>?>? Icons { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Header, rhs.Header)) return false;
                if (!object.Equals(this.Icons, rhs.Icons)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Header);
                hash.Add(this.Icons);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (Header != null)
                {
                    if (!eval(this.Header.Overall)) return false;
                    if (this.Header.Specific != null && !this.Header.Specific.All(eval)) return false;
                }
                if (Icons != null)
                {
                    if (!eval(this.Icons.Overall)) return false;
                    if (this.Icons.Specific != null && !this.Icons.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (Header != null)
                {
                    if (eval(this.Header.Overall)) return true;
                    if (this.Header.Specific != null && this.Header.Specific.Any(eval)) return true;
                }
                if (Icons != null)
                {
                    if (eval(this.Icons.Overall)) return true;
                    if (this.Icons.Specific != null && this.Icons.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RegionData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Header = this.Header == null ? null : new MaskItem<R, RegionDataHeader.Mask<R>?>(eval(this.Header.Overall), this.Header.Specific?.Translate(eval));
                obj.Icons = this.Icons == null ? null : new MaskItem<R, Icons.Mask<R>?>(eval(this.Icons.Overall), this.Icons.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RegionData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RegionData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RegionData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Header?.Overall ?? true)
                    {
                        Header?.ToString(fg);
                    }
                    if (printMask?.Icons?.Overall ?? true)
                    {
                        Icons?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, RegionDataHeader.ErrorMask?>? Header;
            public MaskItem<Exception?, Icons.ErrorMask?>? Icons;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
                switch (enu)
                {
                    case RegionData_FieldIndex.Header:
                        return Header;
                    case RegionData_FieldIndex.Icons:
                        return Icons;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
                switch (enu)
                {
                    case RegionData_FieldIndex.Header:
                        this.Header = new MaskItem<Exception?, RegionDataHeader.ErrorMask?>(ex, null);
                        break;
                    case RegionData_FieldIndex.Icons:
                        this.Icons = new MaskItem<Exception?, Icons.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
                switch (enu)
                {
                    case RegionData_FieldIndex.Header:
                        this.Header = (MaskItem<Exception?, RegionDataHeader.ErrorMask?>?)obj;
                        break;
                    case RegionData_FieldIndex.Icons:
                        this.Icons = (MaskItem<Exception?, Icons.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (Header != null) return true;
                if (Icons != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public virtual void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected virtual void ToString_FillInternal(FileGeneration fg)
            {
                Header?.ToString(fg);
                Icons?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Header = this.Header.Combine(rhs.Header, (l, r) => l.Combine(r));
                ret.Icons = this.Icons.Combine(rhs.Icons, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public RegionDataHeader.TranslationMask? Header;
            public Icons.TranslationMask? Icons;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Header != null ? Header.OnOverall : DefaultOn, Header?.GetCrystal()));
                ret.Add((Icons != null ? Icons.OnOverall : DefaultOn, Icons?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public virtual IEnumerable<FormLinkInformation> ContainedFormLinks => RegionDataCommon.Instance.GetContainedFormLinks(this);
        public virtual void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RegionDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => RegionDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((RegionDataSetterCommon)((IRegionDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RegionData GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [RegionSounds, RegionMap, RegionObjects, RegionWeather, RegionGrasses, RegionLand]
    /// </summary>
    public partial interface IRegionData :
        IRegionDataGetter,
        IHasIcons,
        ILoquiObjectSetter<IRegionData>,
        IFormLinkContainer
    {
        new RegionDataHeader? Header { get; set; }
        new Icons? Icons { get; set; }
    }

    /// <summary>
    /// Implemented by: [RegionSounds, RegionMap, RegionObjects, RegionWeather, RegionGrasses, RegionLand]
    /// </summary>
    public partial interface IRegionDataGetter :
        ILoquiObject,
        IHasIconsGetter,
        ILoquiObject<IRegionDataGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => RegionData_Registration.Instance;
        IRegionDataHeaderGetter? Header { get; }
        IIconsGetter? Icons { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RegionDataMixIn
    {
        public static void Clear(this IRegionData item)
        {
            ((RegionDataSetterCommon)((IRegionDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RegionData.Mask<bool> GetEqualsMask(
            this IRegionDataGetter item,
            IRegionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionDataGetter item,
            string? name = null,
            RegionData.Mask<bool>? printMask = null)
        {
            return ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionDataGetter item,
            FileGeneration fg,
            string? name = null,
            RegionData.Mask<bool>? printMask = null)
        {
            ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRegionDataGetter item,
            IRegionDataGetter rhs)
        {
            return ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRegionData lhs,
            IRegionDataGetter rhs)
        {
            ((RegionDataSetterTranslationCommon)((IRegionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRegionData lhs,
            IRegionDataGetter rhs,
            RegionData.TranslationMask? copyMask = null)
        {
            ((RegionDataSetterTranslationCommon)((IRegionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IRegionData lhs,
            IRegionDataGetter rhs,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RegionDataSetterTranslationCommon)((IRegionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = RegionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRegionData lhs,
            IRegionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RegionDataSetterTranslationCommon)((IRegionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static RegionData DeepCopy(
            this IRegionDataGetter item,
            RegionData.TranslationMask? copyMask = null)
        {
            return ((RegionDataSetterTranslationCommon)((IRegionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RegionData DeepCopy(
            this IRegionDataGetter item,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? copyMask = null)
        {
            return ((RegionDataSetterTranslationCommon)((IRegionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RegionData DeepCopy(
            this IRegionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RegionDataSetterTranslationCommon)((IRegionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRegionData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionDataSetterCommon)((IRegionDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum RegionData_FieldIndex
    {
        Header = 0,
        Icons = 1,
    }
    #endregion

    #region Registration
    public partial class RegionData_Registration : ILoquiRegistration
    {
        public static readonly RegionData_Registration Instance = new RegionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 260,
            version: 0);

        public const string GUID = "a6986ee8-e0cb-4fd9-bd88-b883bbc763d2";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RegionData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionData.ErrorMask);

        public static readonly Type ClassType = typeof(RegionData);

        public static readonly Type GetterType = typeof(IRegionDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegionData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.RegionData";

        public const string Name = "RegionData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.RDAT,
                        RecordTypes.ICON
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(RegionDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionDataSetterCommon
    {
        public static readonly RegionDataSetterCommon Instance = new RegionDataSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IRegionData item)
        {
            ClearPartial();
            item.Header = null;
            item.Icons = null;
        }
        
        #region Mutagen
        public void RemapLinks(IRegionData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRegionData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
        }
        
        #endregion
        
    }
    public partial class RegionDataCommon
    {
        public static readonly RegionDataCommon Instance = new RegionDataCommon();

        public RegionData.Mask<bool> GetEqualsMask(
            IRegionDataGetter item,
            IRegionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionData.Mask<bool>(false);
            ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRegionDataGetter item,
            IRegionDataGetter rhs,
            RegionData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Header = EqualsMaskHelper.EqualsHelper(
                item.Header,
                rhs.Header,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Icons = EqualsMaskHelper.EqualsHelper(
                item.Icons,
                rhs.Icons,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IRegionDataGetter item,
            string? name = null,
            RegionData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRegionDataGetter item,
            FileGeneration fg,
            string? name = null,
            RegionData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RegionData =>");
            }
            else
            {
                fg.AppendLine($"{name} (RegionData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRegionDataGetter item,
            FileGeneration fg,
            RegionData.Mask<bool>? printMask = null)
        {
            if ((printMask?.Header?.Overall ?? true)
                && item.Header.TryGet(out var HeaderItem))
            {
                HeaderItem?.ToString(fg, "Header");
            }
            if ((printMask?.Icons?.Overall ?? true)
                && item.Icons.TryGet(out var IconsItem))
            {
                IconsItem?.ToString(fg, "Icons");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRegionDataGetter? lhs,
            IRegionDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.Header, rhs.Header)) return false;
            if (!object.Equals(lhs.Icons, rhs.Icons)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IRegionDataGetter item)
        {
            var hash = new HashCode();
            if (item.Header.TryGet(out var Headeritem))
            {
                hash.Add(Headeritem);
            }
            if (item.Icons.TryGet(out var Iconsitem))
            {
                hash.Add(Iconsitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return RegionData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IRegionDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class RegionDataSetterTranslationCommon
    {
        public static readonly RegionDataSetterTranslationCommon Instance = new RegionDataSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IRegionData item,
            IRegionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)RegionData_FieldIndex.Header) ?? true))
            {
                errorMask?.PushIndex((int)RegionData_FieldIndex.Header);
                try
                {
                    if(rhs.Header.TryGet(out var rhsHeader))
                    {
                        item.Header = rhsHeader.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)RegionData_FieldIndex.Header));
                    }
                    else
                    {
                        item.Header = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RegionData_FieldIndex.Icons) ?? true))
            {
                errorMask?.PushIndex((int)RegionData_FieldIndex.Icons);
                try
                {
                    if(rhs.Icons.TryGet(out var rhsIcons))
                    {
                        item.Icons = rhsIcons.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)RegionData_FieldIndex.Icons));
                    }
                    else
                    {
                        item.Icons = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public RegionData DeepCopy(
            IRegionDataGetter item,
            RegionData.TranslationMask? copyMask = null)
        {
            RegionData ret = (RegionData)((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).GetNew();
            ((RegionDataSetterTranslationCommon)((IRegionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public RegionData DeepCopy(
            IRegionDataGetter item,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RegionData ret = (RegionData)((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).GetNew();
            ((RegionDataSetterTranslationCommon)((IRegionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = RegionData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public RegionData DeepCopy(
            IRegionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RegionData ret = (RegionData)((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).GetNew();
            ((RegionDataSetterTranslationCommon)((IRegionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class RegionData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionData_Registration.Instance;
        public static RegionData_Registration Registration => RegionData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => RegionDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return RegionDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => RegionDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRegionDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRegionDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRegionDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RegionDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RegionDataBinaryWriteTranslation Instance = new RegionDataBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IRegionDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            if (item.Header.TryGet(out var HeaderItem))
            {
                ((RegionDataHeaderBinaryWriteTranslation)((IBinaryItem)HeaderItem).BinaryWriteTranslator).Write(
                    item: HeaderItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Icons.TryGet(out var IconsItem))
            {
                ((IconsBinaryWriteTranslation)((IBinaryItem)IconsItem).BinaryWriteTranslator).Write(
                    item: IconsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            IRegionDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRegionDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RegionDataBinaryCreateTranslation
    {
        public readonly static RegionDataBinaryCreateTranslation Instance = new RegionDataBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IRegionData item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.RDAT:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RegionData_FieldIndex.Header) return ParseResult.Stop;
                    item.Header = Mutagen.Bethesda.Fallout4.RegionDataHeader.CreateFromBinary(frame: frame);
                    return (int)RegionData_FieldIndex.Header;
                }
                case RecordTypeInts.ICON:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RegionData_FieldIndex.Icons) return ParseResult.Stop;
                    item.Icons = Mutagen.Bethesda.Fallout4.Icons.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)RegionData_FieldIndex.Icons;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class RegionDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRegionDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class RegionDataBinaryOverlay :
        BinaryOverlay,
        IRegionDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionData_Registration.Instance;
        public static RegionData_Registration Registration => RegionData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => RegionDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => RegionDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRegionDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRegionDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRegionDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public virtual IEnumerable<FormLinkInformation> ContainedFormLinks => RegionDataCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => RegionDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Header
        private RangeInt32? _HeaderLocation;
        public IRegionDataHeaderGetter? Header => _HeaderLocation.HasValue ? RegionDataHeaderBinaryOverlay.RegionDataHeaderFactory(new OverlayStream(_data.Slice(_HeaderLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IIconsGetter? Icons { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RegionDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }


        public virtual ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.RDAT:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RegionData_FieldIndex.Header) return ParseResult.Stop;
                    _HeaderLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)RegionData_FieldIndex.Header;
                }
                case RecordTypeInts.ICON:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)RegionData_FieldIndex.Icons) return ParseResult.Stop;
                    this.Icons = IconsBinaryOverlay.IconsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)RegionData_FieldIndex.Icons;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RegionDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRegionDataGetter rhs)) return false;
            return ((RegionDataCommon)((IRegionDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IRegionDataGetter? obj)
        {
            return ((RegionDataCommon)((IRegionDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionDataCommon)((IRegionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

