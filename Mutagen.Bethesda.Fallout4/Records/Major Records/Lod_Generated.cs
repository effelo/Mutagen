/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Lod :
        ILod,
        ILoquiObjectSetter<Lod>,
        IEquatable<ILodGetter>
    {
        #region Ctor
        public Lod()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Level0
        public String Level0 { get; set; } = string.Empty;
        #endregion
        #region Level0Extra
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _Level0Extra;
        public MemorySlice<Byte>? Level0Extra
        {
            get => this._Level0Extra;
            set => this._Level0Extra = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILodGetter.Level0Extra => this.Level0Extra;
        #endregion
        #region Level1
        public String Level1 { get; set; } = string.Empty;
        #endregion
        #region Level1Extra
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _Level1Extra;
        public MemorySlice<Byte>? Level1Extra
        {
            get => this._Level1Extra;
            set => this._Level1Extra = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILodGetter.Level1Extra => this.Level1Extra;
        #endregion
        #region Level2
        public String Level2 { get; set; } = string.Empty;
        #endregion
        #region Level2Extra
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _Level2Extra;
        public MemorySlice<Byte>? Level2Extra
        {
            get => this._Level2Extra;
            set => this._Level2Extra = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILodGetter.Level2Extra => this.Level2Extra;
        #endregion
        #region Level3
        public String Level3 { get; set; } = string.Empty;
        #endregion
        #region Level3Extra
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _Level3Extra;
        public MemorySlice<Byte>? Level3Extra
        {
            get => this._Level3Extra;
            set => this._Level3Extra = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILodGetter.Level3Extra => this.Level3Extra;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LodMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILodGetter rhs)) return false;
            return ((LodCommon)((ILodGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILodGetter? obj)
        {
            return ((LodCommon)((ILodGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LodCommon)((ILodGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Level0 = initialValue;
                this.Level0Extra = initialValue;
                this.Level1 = initialValue;
                this.Level1Extra = initialValue;
                this.Level2 = initialValue;
                this.Level2Extra = initialValue;
                this.Level3 = initialValue;
                this.Level3Extra = initialValue;
            }

            public Mask(
                TItem Level0,
                TItem Level0Extra,
                TItem Level1,
                TItem Level1Extra,
                TItem Level2,
                TItem Level2Extra,
                TItem Level3,
                TItem Level3Extra)
            {
                this.Level0 = Level0;
                this.Level0Extra = Level0Extra;
                this.Level1 = Level1;
                this.Level1Extra = Level1Extra;
                this.Level2 = Level2;
                this.Level2Extra = Level2Extra;
                this.Level3 = Level3;
                this.Level3Extra = Level3Extra;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Level0;
            public TItem Level0Extra;
            public TItem Level1;
            public TItem Level1Extra;
            public TItem Level2;
            public TItem Level2Extra;
            public TItem Level3;
            public TItem Level3Extra;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Level0, rhs.Level0)) return false;
                if (!object.Equals(this.Level0Extra, rhs.Level0Extra)) return false;
                if (!object.Equals(this.Level1, rhs.Level1)) return false;
                if (!object.Equals(this.Level1Extra, rhs.Level1Extra)) return false;
                if (!object.Equals(this.Level2, rhs.Level2)) return false;
                if (!object.Equals(this.Level2Extra, rhs.Level2Extra)) return false;
                if (!object.Equals(this.Level3, rhs.Level3)) return false;
                if (!object.Equals(this.Level3Extra, rhs.Level3Extra)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Level0);
                hash.Add(this.Level0Extra);
                hash.Add(this.Level1);
                hash.Add(this.Level1Extra);
                hash.Add(this.Level2);
                hash.Add(this.Level2Extra);
                hash.Add(this.Level3);
                hash.Add(this.Level3Extra);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Level0)) return false;
                if (!eval(this.Level0Extra)) return false;
                if (!eval(this.Level1)) return false;
                if (!eval(this.Level1Extra)) return false;
                if (!eval(this.Level2)) return false;
                if (!eval(this.Level2Extra)) return false;
                if (!eval(this.Level3)) return false;
                if (!eval(this.Level3Extra)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Level0)) return true;
                if (eval(this.Level0Extra)) return true;
                if (eval(this.Level1)) return true;
                if (eval(this.Level1Extra)) return true;
                if (eval(this.Level2)) return true;
                if (eval(this.Level2Extra)) return true;
                if (eval(this.Level3)) return true;
                if (eval(this.Level3Extra)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Lod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Level0 = eval(this.Level0);
                obj.Level0Extra = eval(this.Level0Extra);
                obj.Level1 = eval(this.Level1);
                obj.Level1Extra = eval(this.Level1Extra);
                obj.Level2 = eval(this.Level2);
                obj.Level2Extra = eval(this.Level2Extra);
                obj.Level3 = eval(this.Level3);
                obj.Level3Extra = eval(this.Level3Extra);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Lod.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Lod.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Lod.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Level0 ?? true)
                    {
                        fg.AppendItem(Level0, "Level0");
                    }
                    if (printMask?.Level0Extra ?? true)
                    {
                        fg.AppendItem(Level0Extra, "Level0Extra");
                    }
                    if (printMask?.Level1 ?? true)
                    {
                        fg.AppendItem(Level1, "Level1");
                    }
                    if (printMask?.Level1Extra ?? true)
                    {
                        fg.AppendItem(Level1Extra, "Level1Extra");
                    }
                    if (printMask?.Level2 ?? true)
                    {
                        fg.AppendItem(Level2, "Level2");
                    }
                    if (printMask?.Level2Extra ?? true)
                    {
                        fg.AppendItem(Level2Extra, "Level2Extra");
                    }
                    if (printMask?.Level3 ?? true)
                    {
                        fg.AppendItem(Level3, "Level3");
                    }
                    if (printMask?.Level3Extra ?? true)
                    {
                        fg.AppendItem(Level3Extra, "Level3Extra");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Level0;
            public Exception? Level0Extra;
            public Exception? Level1;
            public Exception? Level1Extra;
            public Exception? Level2;
            public Exception? Level2Extra;
            public Exception? Level3;
            public Exception? Level3Extra;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Lod_FieldIndex enu = (Lod_FieldIndex)index;
                switch (enu)
                {
                    case Lod_FieldIndex.Level0:
                        return Level0;
                    case Lod_FieldIndex.Level0Extra:
                        return Level0Extra;
                    case Lod_FieldIndex.Level1:
                        return Level1;
                    case Lod_FieldIndex.Level1Extra:
                        return Level1Extra;
                    case Lod_FieldIndex.Level2:
                        return Level2;
                    case Lod_FieldIndex.Level2Extra:
                        return Level2Extra;
                    case Lod_FieldIndex.Level3:
                        return Level3;
                    case Lod_FieldIndex.Level3Extra:
                        return Level3Extra;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Lod_FieldIndex enu = (Lod_FieldIndex)index;
                switch (enu)
                {
                    case Lod_FieldIndex.Level0:
                        this.Level0 = ex;
                        break;
                    case Lod_FieldIndex.Level0Extra:
                        this.Level0Extra = ex;
                        break;
                    case Lod_FieldIndex.Level1:
                        this.Level1 = ex;
                        break;
                    case Lod_FieldIndex.Level1Extra:
                        this.Level1Extra = ex;
                        break;
                    case Lod_FieldIndex.Level2:
                        this.Level2 = ex;
                        break;
                    case Lod_FieldIndex.Level2Extra:
                        this.Level2Extra = ex;
                        break;
                    case Lod_FieldIndex.Level3:
                        this.Level3 = ex;
                        break;
                    case Lod_FieldIndex.Level3Extra:
                        this.Level3Extra = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Lod_FieldIndex enu = (Lod_FieldIndex)index;
                switch (enu)
                {
                    case Lod_FieldIndex.Level0:
                        this.Level0 = (Exception?)obj;
                        break;
                    case Lod_FieldIndex.Level0Extra:
                        this.Level0Extra = (Exception?)obj;
                        break;
                    case Lod_FieldIndex.Level1:
                        this.Level1 = (Exception?)obj;
                        break;
                    case Lod_FieldIndex.Level1Extra:
                        this.Level1Extra = (Exception?)obj;
                        break;
                    case Lod_FieldIndex.Level2:
                        this.Level2 = (Exception?)obj;
                        break;
                    case Lod_FieldIndex.Level2Extra:
                        this.Level2Extra = (Exception?)obj;
                        break;
                    case Lod_FieldIndex.Level3:
                        this.Level3 = (Exception?)obj;
                        break;
                    case Lod_FieldIndex.Level3Extra:
                        this.Level3Extra = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Level0 != null) return true;
                if (Level0Extra != null) return true;
                if (Level1 != null) return true;
                if (Level1Extra != null) return true;
                if (Level2 != null) return true;
                if (Level2Extra != null) return true;
                if (Level3 != null) return true;
                if (Level3Extra != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Level0, "Level0");
                fg.AppendItem(Level0Extra, "Level0Extra");
                fg.AppendItem(Level1, "Level1");
                fg.AppendItem(Level1Extra, "Level1Extra");
                fg.AppendItem(Level2, "Level2");
                fg.AppendItem(Level2Extra, "Level2Extra");
                fg.AppendItem(Level3, "Level3");
                fg.AppendItem(Level3Extra, "Level3Extra");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Level0 = this.Level0.Combine(rhs.Level0);
                ret.Level0Extra = this.Level0Extra.Combine(rhs.Level0Extra);
                ret.Level1 = this.Level1.Combine(rhs.Level1);
                ret.Level1Extra = this.Level1Extra.Combine(rhs.Level1Extra);
                ret.Level2 = this.Level2.Combine(rhs.Level2);
                ret.Level2Extra = this.Level2Extra.Combine(rhs.Level2Extra);
                ret.Level3 = this.Level3.Combine(rhs.Level3);
                ret.Level3Extra = this.Level3Extra.Combine(rhs.Level3Extra);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Level0;
            public bool Level0Extra;
            public bool Level1;
            public bool Level1Extra;
            public bool Level2;
            public bool Level2Extra;
            public bool Level3;
            public bool Level3Extra;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Level0 = defaultOn;
                this.Level0Extra = defaultOn;
                this.Level1 = defaultOn;
                this.Level1Extra = defaultOn;
                this.Level2 = defaultOn;
                this.Level2Extra = defaultOn;
                this.Level3 = defaultOn;
                this.Level3Extra = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Level0, null));
                ret.Add((Level0Extra, null));
                ret.Add((Level1, null));
                ret.Add((Level1Extra, null));
                ret.Add((Level2, null));
                ret.Add((Level2Extra, null));
                ret.Add((Level3, null));
                ret.Add((Level3Extra, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Lod_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LodBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LodBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static Lod CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Lod();
            ((LodSetterCommon)((ILodGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Lod item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LodSetterCommon)((ILodGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Lod GetNew()
        {
            return new Lod();
        }

    }
    #endregion

    #region Interface
    public partial interface ILod :
        ILodGetter,
        ILoquiObjectSetter<ILod>
    {
        new String Level0 { get; set; }
        new MemorySlice<Byte>? Level0Extra { get; set; }
        new String Level1 { get; set; }
        new MemorySlice<Byte>? Level1Extra { get; set; }
        new String Level2 { get; set; }
        new MemorySlice<Byte>? Level2Extra { get; set; }
        new String Level3 { get; set; }
        new MemorySlice<Byte>? Level3Extra { get; set; }
    }

    public partial interface ILodGetter :
        ILoquiObject,
        ILoquiObject<ILodGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => Lod_Registration.Instance;
        String Level0 { get; }
        ReadOnlyMemorySlice<Byte>? Level0Extra { get; }
        String Level1 { get; }
        ReadOnlyMemorySlice<Byte>? Level1Extra { get; }
        String Level2 { get; }
        ReadOnlyMemorySlice<Byte>? Level2Extra { get; }
        String Level3 { get; }
        ReadOnlyMemorySlice<Byte>? Level3Extra { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LodMixIn
    {
        public static void Clear(this ILod item)
        {
            ((LodSetterCommon)((ILodGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Lod.Mask<bool> GetEqualsMask(
            this ILodGetter item,
            ILodGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LodCommon)((ILodGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILodGetter item,
            string? name = null,
            Lod.Mask<bool>? printMask = null)
        {
            return ((LodCommon)((ILodGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILodGetter item,
            FileGeneration fg,
            string? name = null,
            Lod.Mask<bool>? printMask = null)
        {
            ((LodCommon)((ILodGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILodGetter item,
            ILodGetter rhs)
        {
            return ((LodCommon)((ILodGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILod lhs,
            ILodGetter rhs)
        {
            ((LodSetterTranslationCommon)((ILodGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILod lhs,
            ILodGetter rhs,
            Lod.TranslationMask? copyMask = null)
        {
            ((LodSetterTranslationCommon)((ILodGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILod lhs,
            ILodGetter rhs,
            out Lod.ErrorMask errorMask,
            Lod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LodSetterTranslationCommon)((ILodGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Lod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILod lhs,
            ILodGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LodSetterTranslationCommon)((ILodGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Lod DeepCopy(
            this ILodGetter item,
            Lod.TranslationMask? copyMask = null)
        {
            return ((LodSetterTranslationCommon)((ILodGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Lod DeepCopy(
            this ILodGetter item,
            out Lod.ErrorMask errorMask,
            Lod.TranslationMask? copyMask = null)
        {
            return ((LodSetterTranslationCommon)((ILodGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Lod DeepCopy(
            this ILodGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LodSetterTranslationCommon)((ILodGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILod item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LodSetterCommon)((ILodGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Lod_FieldIndex
    {
        Level0 = 0,
        Level0Extra = 1,
        Level1 = 2,
        Level1Extra = 3,
        Level2 = 4,
        Level2Extra = 5,
        Level3 = 6,
        Level3Extra = 7,
    }
    #endregion

    #region Registration
    public partial class Lod_Registration : ILoquiRegistration
    {
        public static readonly Lod_Registration Instance = new Lod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 185,
            version: 0);

        public const string GUID = "a708745a-1c62-4a97-afcc-345a6c66ad64";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(Lod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Lod.ErrorMask);

        public static readonly Type ClassType = typeof(Lod);

        public static readonly Type GetterType = typeof(ILodGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.Lod";

        public const string Name = "Lod";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MNAM;
        public static readonly Type BinaryWriteTranslation = typeof(LodBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class LodSetterCommon
    {
        public static readonly LodSetterCommon Instance = new LodSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILod item)
        {
            ClearPartial();
            item.Level0 = string.Empty;
            item.Level0Extra = default;
            item.Level1 = string.Empty;
            item.Level1Extra = default;
            item.Level2 = string.Empty;
            item.Level2Extra = default;
            item.Level3 = string.Empty;
            item.Level3Extra = default;
        }
        
        #region Mutagen
        public void RemapLinks(ILod obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILod item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.MNAM)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LodBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class LodCommon
    {
        public static readonly LodCommon Instance = new LodCommon();

        public Lod.Mask<bool> GetEqualsMask(
            ILodGetter item,
            ILodGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Lod.Mask<bool>(false);
            ((LodCommon)((ILodGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILodGetter item,
            ILodGetter rhs,
            Lod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Level0 = string.Equals(item.Level0, rhs.Level0);
            ret.Level0Extra = MemorySliceExt.Equal(item.Level0Extra, rhs.Level0Extra);
            ret.Level1 = string.Equals(item.Level1, rhs.Level1);
            ret.Level1Extra = MemorySliceExt.Equal(item.Level1Extra, rhs.Level1Extra);
            ret.Level2 = string.Equals(item.Level2, rhs.Level2);
            ret.Level2Extra = MemorySliceExt.Equal(item.Level2Extra, rhs.Level2Extra);
            ret.Level3 = string.Equals(item.Level3, rhs.Level3);
            ret.Level3Extra = MemorySliceExt.Equal(item.Level3Extra, rhs.Level3Extra);
        }
        
        public string ToString(
            ILodGetter item,
            string? name = null,
            Lod.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILodGetter item,
            FileGeneration fg,
            string? name = null,
            Lod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Lod =>");
            }
            else
            {
                fg.AppendLine($"{name} (Lod) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILodGetter item,
            FileGeneration fg,
            Lod.Mask<bool>? printMask = null)
        {
            if (printMask?.Level0 ?? true)
            {
                fg.AppendItem(item.Level0, "Level0");
            }
            if ((printMask?.Level0Extra ?? true)
                && item.Level0Extra.TryGet(out var Level0ExtraItem))
            {
                fg.AppendLine($"Level0Extra => {SpanExt.ToHexString(Level0ExtraItem)}");
            }
            if (printMask?.Level1 ?? true)
            {
                fg.AppendItem(item.Level1, "Level1");
            }
            if ((printMask?.Level1Extra ?? true)
                && item.Level1Extra.TryGet(out var Level1ExtraItem))
            {
                fg.AppendLine($"Level1Extra => {SpanExt.ToHexString(Level1ExtraItem)}");
            }
            if (printMask?.Level2 ?? true)
            {
                fg.AppendItem(item.Level2, "Level2");
            }
            if ((printMask?.Level2Extra ?? true)
                && item.Level2Extra.TryGet(out var Level2ExtraItem))
            {
                fg.AppendLine($"Level2Extra => {SpanExt.ToHexString(Level2ExtraItem)}");
            }
            if (printMask?.Level3 ?? true)
            {
                fg.AppendItem(item.Level3, "Level3");
            }
            if ((printMask?.Level3Extra ?? true)
                && item.Level3Extra.TryGet(out var Level3ExtraItem))
            {
                fg.AppendLine($"Level3Extra => {SpanExt.ToHexString(Level3ExtraItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILodGetter? lhs,
            ILodGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.Level0, rhs.Level0)) return false;
            if (!MemorySliceExt.Equal(lhs.Level0Extra, rhs.Level0Extra)) return false;
            if (!string.Equals(lhs.Level1, rhs.Level1)) return false;
            if (!MemorySliceExt.Equal(lhs.Level1Extra, rhs.Level1Extra)) return false;
            if (!string.Equals(lhs.Level2, rhs.Level2)) return false;
            if (!MemorySliceExt.Equal(lhs.Level2Extra, rhs.Level2Extra)) return false;
            if (!string.Equals(lhs.Level3, rhs.Level3)) return false;
            if (!MemorySliceExt.Equal(lhs.Level3Extra, rhs.Level3Extra)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ILodGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Level0);
            if (item.Level0Extra.TryGet(out var Level0ExtraItem))
            {
                hash.Add(Level0ExtraItem);
            }
            hash.Add(item.Level1);
            if (item.Level1Extra.TryGet(out var Level1ExtraItem))
            {
                hash.Add(Level1ExtraItem);
            }
            hash.Add(item.Level2);
            if (item.Level2Extra.TryGet(out var Level2ExtraItem))
            {
                hash.Add(Level2ExtraItem);
            }
            hash.Add(item.Level3);
            if (item.Level3Extra.TryGet(out var Level3ExtraItem))
            {
                hash.Add(Level3ExtraItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Lod.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ILodGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class LodSetterTranslationCommon
    {
        public static readonly LodSetterTranslationCommon Instance = new LodSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILod item,
            ILodGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Lod_FieldIndex.Level0) ?? true))
            {
                item.Level0 = rhs.Level0;
            }
            if ((copyMask?.GetShouldTranslate((int)Lod_FieldIndex.Level0Extra) ?? true))
            {
                if(rhs.Level0Extra.TryGet(out var Level0Extrarhs))
                {
                    item.Level0Extra = Level0Extrarhs.ToArray();
                }
                else
                {
                    item.Level0Extra = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Lod_FieldIndex.Level1) ?? true))
            {
                item.Level1 = rhs.Level1;
            }
            if ((copyMask?.GetShouldTranslate((int)Lod_FieldIndex.Level1Extra) ?? true))
            {
                if(rhs.Level1Extra.TryGet(out var Level1Extrarhs))
                {
                    item.Level1Extra = Level1Extrarhs.ToArray();
                }
                else
                {
                    item.Level1Extra = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Lod_FieldIndex.Level2) ?? true))
            {
                item.Level2 = rhs.Level2;
            }
            if ((copyMask?.GetShouldTranslate((int)Lod_FieldIndex.Level2Extra) ?? true))
            {
                if(rhs.Level2Extra.TryGet(out var Level2Extrarhs))
                {
                    item.Level2Extra = Level2Extrarhs.ToArray();
                }
                else
                {
                    item.Level2Extra = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Lod_FieldIndex.Level3) ?? true))
            {
                item.Level3 = rhs.Level3;
            }
            if ((copyMask?.GetShouldTranslate((int)Lod_FieldIndex.Level3Extra) ?? true))
            {
                if(rhs.Level3Extra.TryGet(out var Level3Extrarhs))
                {
                    item.Level3Extra = Level3Extrarhs.ToArray();
                }
                else
                {
                    item.Level3Extra = default;
                }
            }
        }
        
        #endregion
        
        public Lod DeepCopy(
            ILodGetter item,
            Lod.TranslationMask? copyMask = null)
        {
            Lod ret = (Lod)((LodCommon)((ILodGetter)item).CommonInstance()!).GetNew();
            ((LodSetterTranslationCommon)((ILodGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Lod DeepCopy(
            ILodGetter item,
            out Lod.ErrorMask errorMask,
            Lod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Lod ret = (Lod)((LodCommon)((ILodGetter)item).CommonInstance()!).GetNew();
            ((LodSetterTranslationCommon)((ILodGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Lod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Lod DeepCopy(
            ILodGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Lod ret = (Lod)((LodCommon)((ILodGetter)item).CommonInstance()!).GetNew();
            ((LodSetterTranslationCommon)((ILodGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Lod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Lod_Registration.Instance;
        public static Lod_Registration Registration => Lod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LodCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LodSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LodSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILodGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILodGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILodGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LodBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LodBinaryWriteTranslation Instance = new LodBinaryWriteTranslation();

        static partial void WriteBinaryLevel0Custom(
            MutagenWriter writer,
            ILodGetter item);

        public static void WriteBinaryLevel0(
            MutagenWriter writer,
            ILodGetter item)
        {
            WriteBinaryLevel0Custom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            ILodGetter item,
            MutagenWriter writer)
        {
            LodBinaryWriteTranslation.WriteBinaryLevel0(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            ILodGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.MNAM),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILodGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LodBinaryCreateTranslation
    {
        public readonly static LodBinaryCreateTranslation Instance = new LodBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILod item,
            MutagenFrame frame)
        {
            LodBinaryCreateTranslation.FillBinaryLevel0Custom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryLevel0Custom(
            MutagenFrame frame,
            ILod item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class LodBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILodGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LodBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LodBinaryOverlay :
        BinaryOverlay,
        ILodGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Lod_Registration.Instance;
        public static Lod_Registration Registration => Lod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LodCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LodSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILodGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILodGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILodGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LodBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LodBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LodBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LodBinaryOverlay LodFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LodBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x0 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static LodBinaryOverlay LodFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LodFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LodMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILodGetter rhs)) return false;
            return ((LodCommon)((ILodGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILodGetter? obj)
        {
            return ((LodCommon)((ILodGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LodCommon)((ILodGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

