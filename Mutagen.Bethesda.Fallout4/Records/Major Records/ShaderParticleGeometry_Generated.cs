/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ShaderParticleGeometry :
        Fallout4MajorRecord,
        IShaderParticleGeometryInternal,
        ILoquiObjectSetter<ShaderParticleGeometry>,
        IEquatable<IShaderParticleGeometryGetter>
    {
        #region Ctor
        protected ShaderParticleGeometry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region GravityVelocity
        public Single GravityVelocity { get; set; } = default;
        #endregion
        #region RotationVelocity
        public Single RotationVelocity { get; set; } = default;
        #endregion
        #region ParticleSizeX
        public Single ParticleSizeX { get; set; } = default;
        #endregion
        #region ParticleSizeY
        public Single ParticleSizeY { get; set; } = default;
        #endregion
        #region CenterOffsetMin
        public Single CenterOffsetMin { get; set; } = default;
        #endregion
        #region CenterOffsetMax
        public Single CenterOffsetMax { get; set; } = default;
        #endregion
        #region InitialRotationRange
        public Single InitialRotationRange { get; set; } = default;
        #endregion
        #region NumSubtexturesX
        public UInt32 NumSubtexturesX { get; set; } = default;
        #endregion
        #region NumSubtexturesY
        public UInt32 NumSubtexturesY { get; set; } = default;
        #endregion
        #region Type
        public ShaderParticleGeometry.TypeEnum Type { get; set; } = default;
        #endregion
        #region BoxSize
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _BoxSize;
        public UInt32 BoxSize
        {
            get => this._BoxSize;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._BoxSize = value;
            }
        }
        #endregion
        #region ParticleDensity
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleDensity;
        public Single ParticleDensity
        {
            get => this._ParticleDensity;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleDensity = value;
            }
        }
        #endregion
        #region ParticleTexture
        public String? ParticleTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IShaderParticleGeometryGetter.ParticleTexture => this.ParticleTexture;
        #endregion
        #region DATADataTypeState
        public ShaderParticleGeometry.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ShaderParticleGeometryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IShaderParticleGeometryGetter rhs)) return false;
            return ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IShaderParticleGeometryGetter? obj)
        {
            return ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.GravityVelocity = initialValue;
                this.RotationVelocity = initialValue;
                this.ParticleSizeX = initialValue;
                this.ParticleSizeY = initialValue;
                this.CenterOffsetMin = initialValue;
                this.CenterOffsetMax = initialValue;
                this.InitialRotationRange = initialValue;
                this.NumSubtexturesX = initialValue;
                this.NumSubtexturesY = initialValue;
                this.Type = initialValue;
                this.BoxSize = initialValue;
                this.ParticleDensity = initialValue;
                this.ParticleTexture = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem GravityVelocity,
                TItem RotationVelocity,
                TItem ParticleSizeX,
                TItem ParticleSizeY,
                TItem CenterOffsetMin,
                TItem CenterOffsetMax,
                TItem InitialRotationRange,
                TItem NumSubtexturesX,
                TItem NumSubtexturesY,
                TItem Type,
                TItem BoxSize,
                TItem ParticleDensity,
                TItem ParticleTexture,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.GravityVelocity = GravityVelocity;
                this.RotationVelocity = RotationVelocity;
                this.ParticleSizeX = ParticleSizeX;
                this.ParticleSizeY = ParticleSizeY;
                this.CenterOffsetMin = CenterOffsetMin;
                this.CenterOffsetMax = CenterOffsetMax;
                this.InitialRotationRange = InitialRotationRange;
                this.NumSubtexturesX = NumSubtexturesX;
                this.NumSubtexturesY = NumSubtexturesY;
                this.Type = Type;
                this.BoxSize = BoxSize;
                this.ParticleDensity = ParticleDensity;
                this.ParticleTexture = ParticleTexture;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem GravityVelocity;
            public TItem RotationVelocity;
            public TItem ParticleSizeX;
            public TItem ParticleSizeY;
            public TItem CenterOffsetMin;
            public TItem CenterOffsetMax;
            public TItem InitialRotationRange;
            public TItem NumSubtexturesX;
            public TItem NumSubtexturesY;
            public TItem Type;
            public TItem BoxSize;
            public TItem ParticleDensity;
            public TItem ParticleTexture;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.GravityVelocity, rhs.GravityVelocity)) return false;
                if (!object.Equals(this.RotationVelocity, rhs.RotationVelocity)) return false;
                if (!object.Equals(this.ParticleSizeX, rhs.ParticleSizeX)) return false;
                if (!object.Equals(this.ParticleSizeY, rhs.ParticleSizeY)) return false;
                if (!object.Equals(this.CenterOffsetMin, rhs.CenterOffsetMin)) return false;
                if (!object.Equals(this.CenterOffsetMax, rhs.CenterOffsetMax)) return false;
                if (!object.Equals(this.InitialRotationRange, rhs.InitialRotationRange)) return false;
                if (!object.Equals(this.NumSubtexturesX, rhs.NumSubtexturesX)) return false;
                if (!object.Equals(this.NumSubtexturesY, rhs.NumSubtexturesY)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.BoxSize, rhs.BoxSize)) return false;
                if (!object.Equals(this.ParticleDensity, rhs.ParticleDensity)) return false;
                if (!object.Equals(this.ParticleTexture, rhs.ParticleTexture)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.GravityVelocity);
                hash.Add(this.RotationVelocity);
                hash.Add(this.ParticleSizeX);
                hash.Add(this.ParticleSizeY);
                hash.Add(this.CenterOffsetMin);
                hash.Add(this.CenterOffsetMax);
                hash.Add(this.InitialRotationRange);
                hash.Add(this.NumSubtexturesX);
                hash.Add(this.NumSubtexturesY);
                hash.Add(this.Type);
                hash.Add(this.BoxSize);
                hash.Add(this.ParticleDensity);
                hash.Add(this.ParticleTexture);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.GravityVelocity)) return false;
                if (!eval(this.RotationVelocity)) return false;
                if (!eval(this.ParticleSizeX)) return false;
                if (!eval(this.ParticleSizeY)) return false;
                if (!eval(this.CenterOffsetMin)) return false;
                if (!eval(this.CenterOffsetMax)) return false;
                if (!eval(this.InitialRotationRange)) return false;
                if (!eval(this.NumSubtexturesX)) return false;
                if (!eval(this.NumSubtexturesY)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.BoxSize)) return false;
                if (!eval(this.ParticleDensity)) return false;
                if (!eval(this.ParticleTexture)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.GravityVelocity)) return true;
                if (eval(this.RotationVelocity)) return true;
                if (eval(this.ParticleSizeX)) return true;
                if (eval(this.ParticleSizeY)) return true;
                if (eval(this.CenterOffsetMin)) return true;
                if (eval(this.CenterOffsetMax)) return true;
                if (eval(this.InitialRotationRange)) return true;
                if (eval(this.NumSubtexturesX)) return true;
                if (eval(this.NumSubtexturesY)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.BoxSize)) return true;
                if (eval(this.ParticleDensity)) return true;
                if (eval(this.ParticleTexture)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ShaderParticleGeometry.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.GravityVelocity = eval(this.GravityVelocity);
                obj.RotationVelocity = eval(this.RotationVelocity);
                obj.ParticleSizeX = eval(this.ParticleSizeX);
                obj.ParticleSizeY = eval(this.ParticleSizeY);
                obj.CenterOffsetMin = eval(this.CenterOffsetMin);
                obj.CenterOffsetMax = eval(this.CenterOffsetMax);
                obj.InitialRotationRange = eval(this.InitialRotationRange);
                obj.NumSubtexturesX = eval(this.NumSubtexturesX);
                obj.NumSubtexturesY = eval(this.NumSubtexturesY);
                obj.Type = eval(this.Type);
                obj.BoxSize = eval(this.BoxSize);
                obj.ParticleDensity = eval(this.ParticleDensity);
                obj.ParticleTexture = eval(this.ParticleTexture);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ShaderParticleGeometry.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ShaderParticleGeometry.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ShaderParticleGeometry.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.GravityVelocity ?? true)
                    {
                        fg.AppendItem(GravityVelocity, "GravityVelocity");
                    }
                    if (printMask?.RotationVelocity ?? true)
                    {
                        fg.AppendItem(RotationVelocity, "RotationVelocity");
                    }
                    if (printMask?.ParticleSizeX ?? true)
                    {
                        fg.AppendItem(ParticleSizeX, "ParticleSizeX");
                    }
                    if (printMask?.ParticleSizeY ?? true)
                    {
                        fg.AppendItem(ParticleSizeY, "ParticleSizeY");
                    }
                    if (printMask?.CenterOffsetMin ?? true)
                    {
                        fg.AppendItem(CenterOffsetMin, "CenterOffsetMin");
                    }
                    if (printMask?.CenterOffsetMax ?? true)
                    {
                        fg.AppendItem(CenterOffsetMax, "CenterOffsetMax");
                    }
                    if (printMask?.InitialRotationRange ?? true)
                    {
                        fg.AppendItem(InitialRotationRange, "InitialRotationRange");
                    }
                    if (printMask?.NumSubtexturesX ?? true)
                    {
                        fg.AppendItem(NumSubtexturesX, "NumSubtexturesX");
                    }
                    if (printMask?.NumSubtexturesY ?? true)
                    {
                        fg.AppendItem(NumSubtexturesY, "NumSubtexturesY");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.BoxSize ?? true)
                    {
                        fg.AppendItem(BoxSize, "BoxSize");
                    }
                    if (printMask?.ParticleDensity ?? true)
                    {
                        fg.AppendItem(ParticleDensity, "ParticleDensity");
                    }
                    if (printMask?.ParticleTexture ?? true)
                    {
                        fg.AppendItem(ParticleTexture, "ParticleTexture");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? GravityVelocity;
            public Exception? RotationVelocity;
            public Exception? ParticleSizeX;
            public Exception? ParticleSizeY;
            public Exception? CenterOffsetMin;
            public Exception? CenterOffsetMax;
            public Exception? InitialRotationRange;
            public Exception? NumSubtexturesX;
            public Exception? NumSubtexturesY;
            public Exception? Type;
            public Exception? BoxSize;
            public Exception? ParticleDensity;
            public Exception? ParticleTexture;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ShaderParticleGeometry_FieldIndex enu = (ShaderParticleGeometry_FieldIndex)index;
                switch (enu)
                {
                    case ShaderParticleGeometry_FieldIndex.GravityVelocity:
                        return GravityVelocity;
                    case ShaderParticleGeometry_FieldIndex.RotationVelocity:
                        return RotationVelocity;
                    case ShaderParticleGeometry_FieldIndex.ParticleSizeX:
                        return ParticleSizeX;
                    case ShaderParticleGeometry_FieldIndex.ParticleSizeY:
                        return ParticleSizeY;
                    case ShaderParticleGeometry_FieldIndex.CenterOffsetMin:
                        return CenterOffsetMin;
                    case ShaderParticleGeometry_FieldIndex.CenterOffsetMax:
                        return CenterOffsetMax;
                    case ShaderParticleGeometry_FieldIndex.InitialRotationRange:
                        return InitialRotationRange;
                    case ShaderParticleGeometry_FieldIndex.NumSubtexturesX:
                        return NumSubtexturesX;
                    case ShaderParticleGeometry_FieldIndex.NumSubtexturesY:
                        return NumSubtexturesY;
                    case ShaderParticleGeometry_FieldIndex.Type:
                        return Type;
                    case ShaderParticleGeometry_FieldIndex.BoxSize:
                        return BoxSize;
                    case ShaderParticleGeometry_FieldIndex.ParticleDensity:
                        return ParticleDensity;
                    case ShaderParticleGeometry_FieldIndex.ParticleTexture:
                        return ParticleTexture;
                    case ShaderParticleGeometry_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ShaderParticleGeometry_FieldIndex enu = (ShaderParticleGeometry_FieldIndex)index;
                switch (enu)
                {
                    case ShaderParticleGeometry_FieldIndex.GravityVelocity:
                        this.GravityVelocity = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.RotationVelocity:
                        this.RotationVelocity = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.ParticleSizeX:
                        this.ParticleSizeX = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.ParticleSizeY:
                        this.ParticleSizeY = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.CenterOffsetMin:
                        this.CenterOffsetMin = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.CenterOffsetMax:
                        this.CenterOffsetMax = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.InitialRotationRange:
                        this.InitialRotationRange = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.NumSubtexturesX:
                        this.NumSubtexturesX = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.NumSubtexturesY:
                        this.NumSubtexturesY = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.BoxSize:
                        this.BoxSize = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.ParticleDensity:
                        this.ParticleDensity = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.ParticleTexture:
                        this.ParticleTexture = ex;
                        break;
                    case ShaderParticleGeometry_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ShaderParticleGeometry_FieldIndex enu = (ShaderParticleGeometry_FieldIndex)index;
                switch (enu)
                {
                    case ShaderParticleGeometry_FieldIndex.GravityVelocity:
                        this.GravityVelocity = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.RotationVelocity:
                        this.RotationVelocity = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.ParticleSizeX:
                        this.ParticleSizeX = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.ParticleSizeY:
                        this.ParticleSizeY = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.CenterOffsetMin:
                        this.CenterOffsetMin = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.CenterOffsetMax:
                        this.CenterOffsetMax = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.InitialRotationRange:
                        this.InitialRotationRange = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.NumSubtexturesX:
                        this.NumSubtexturesX = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.NumSubtexturesY:
                        this.NumSubtexturesY = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.BoxSize:
                        this.BoxSize = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.ParticleDensity:
                        this.ParticleDensity = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.ParticleTexture:
                        this.ParticleTexture = (Exception?)obj;
                        break;
                    case ShaderParticleGeometry_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (GravityVelocity != null) return true;
                if (RotationVelocity != null) return true;
                if (ParticleSizeX != null) return true;
                if (ParticleSizeY != null) return true;
                if (CenterOffsetMin != null) return true;
                if (CenterOffsetMax != null) return true;
                if (InitialRotationRange != null) return true;
                if (NumSubtexturesX != null) return true;
                if (NumSubtexturesY != null) return true;
                if (Type != null) return true;
                if (BoxSize != null) return true;
                if (ParticleDensity != null) return true;
                if (ParticleTexture != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(GravityVelocity, "GravityVelocity");
                fg.AppendItem(RotationVelocity, "RotationVelocity");
                fg.AppendItem(ParticleSizeX, "ParticleSizeX");
                fg.AppendItem(ParticleSizeY, "ParticleSizeY");
                fg.AppendItem(CenterOffsetMin, "CenterOffsetMin");
                fg.AppendItem(CenterOffsetMax, "CenterOffsetMax");
                fg.AppendItem(InitialRotationRange, "InitialRotationRange");
                fg.AppendItem(NumSubtexturesX, "NumSubtexturesX");
                fg.AppendItem(NumSubtexturesY, "NumSubtexturesY");
                fg.AppendItem(Type, "Type");
                fg.AppendItem(BoxSize, "BoxSize");
                fg.AppendItem(ParticleDensity, "ParticleDensity");
                fg.AppendItem(ParticleTexture, "ParticleTexture");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.GravityVelocity = this.GravityVelocity.Combine(rhs.GravityVelocity);
                ret.RotationVelocity = this.RotationVelocity.Combine(rhs.RotationVelocity);
                ret.ParticleSizeX = this.ParticleSizeX.Combine(rhs.ParticleSizeX);
                ret.ParticleSizeY = this.ParticleSizeY.Combine(rhs.ParticleSizeY);
                ret.CenterOffsetMin = this.CenterOffsetMin.Combine(rhs.CenterOffsetMin);
                ret.CenterOffsetMax = this.CenterOffsetMax.Combine(rhs.CenterOffsetMax);
                ret.InitialRotationRange = this.InitialRotationRange.Combine(rhs.InitialRotationRange);
                ret.NumSubtexturesX = this.NumSubtexturesX.Combine(rhs.NumSubtexturesX);
                ret.NumSubtexturesY = this.NumSubtexturesY.Combine(rhs.NumSubtexturesY);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.BoxSize = this.BoxSize.Combine(rhs.BoxSize);
                ret.ParticleDensity = this.ParticleDensity.Combine(rhs.ParticleDensity);
                ret.ParticleTexture = this.ParticleTexture.Combine(rhs.ParticleTexture);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool GravityVelocity;
            public bool RotationVelocity;
            public bool ParticleSizeX;
            public bool ParticleSizeY;
            public bool CenterOffsetMin;
            public bool CenterOffsetMax;
            public bool InitialRotationRange;
            public bool NumSubtexturesX;
            public bool NumSubtexturesY;
            public bool Type;
            public bool BoxSize;
            public bool ParticleDensity;
            public bool ParticleTexture;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.GravityVelocity = defaultOn;
                this.RotationVelocity = defaultOn;
                this.ParticleSizeX = defaultOn;
                this.ParticleSizeY = defaultOn;
                this.CenterOffsetMin = defaultOn;
                this.CenterOffsetMax = defaultOn;
                this.InitialRotationRange = defaultOn;
                this.NumSubtexturesX = defaultOn;
                this.NumSubtexturesY = defaultOn;
                this.Type = defaultOn;
                this.BoxSize = defaultOn;
                this.ParticleDensity = defaultOn;
                this.ParticleTexture = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((GravityVelocity, null));
                ret.Add((RotationVelocity, null));
                ret.Add((ParticleSizeX, null));
                ret.Add((ParticleSizeY, null));
                ret.Add((CenterOffsetMin, null));
                ret.Add((CenterOffsetMax, null));
                ret.Add((InitialRotationRange, null));
                ret.Add((NumSubtexturesX, null));
                ret.Add((NumSubtexturesY, null));
                ret.Add((Type, null));
                ret.Add((BoxSize, null));
                ret.Add((ParticleDensity, null));
                ret.Add((ParticleTexture, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ShaderParticleGeometry_Registration.TriggeringRecordType;
        public ShaderParticleGeometry(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private ShaderParticleGeometry(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal ShaderParticleGeometry(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ShaderParticleGeometry(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public ShaderParticleGeometry(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ShaderParticleGeometryBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ShaderParticleGeometryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static ShaderParticleGeometry CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ShaderParticleGeometry();
            ((ShaderParticleGeometrySetterCommon)((IShaderParticleGeometryGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ShaderParticleGeometry item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ShaderParticleGeometrySetterCommon)((IShaderParticleGeometryGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ShaderParticleGeometry GetNew()
        {
            return new ShaderParticleGeometry();
        }

    }
    #endregion

    #region Interface
    public partial interface IShaderParticleGeometry :
        IShaderParticleGeometryGetter,
        IFallout4MajorRecord,
        ILoquiObjectSetter<IShaderParticleGeometryInternal>
    {
        new Single GravityVelocity { get; set; }
        new Single RotationVelocity { get; set; }
        new Single ParticleSizeX { get; set; }
        new Single ParticleSizeY { get; set; }
        new Single CenterOffsetMin { get; set; }
        new Single CenterOffsetMax { get; set; }
        new Single InitialRotationRange { get; set; }
        new UInt32 NumSubtexturesX { get; set; }
        new UInt32 NumSubtexturesY { get; set; }
        new ShaderParticleGeometry.TypeEnum Type { get; set; }
        new UInt32 BoxSize { get; set; }
        new Single ParticleDensity { get; set; }
        new String? ParticleTexture { get; set; }
        new ShaderParticleGeometry.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IShaderParticleGeometryInternal :
        IFallout4MajorRecordInternal,
        IShaderParticleGeometry,
        IShaderParticleGeometryGetter
    {
    }

    public partial interface IShaderParticleGeometryGetter :
        IFallout4MajorRecordGetter,
        ILoquiObject<IShaderParticleGeometryGetter>,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => ShaderParticleGeometry_Registration.Instance;
        Single GravityVelocity { get; }
        Single RotationVelocity { get; }
        Single ParticleSizeX { get; }
        Single ParticleSizeY { get; }
        Single CenterOffsetMin { get; }
        Single CenterOffsetMax { get; }
        Single InitialRotationRange { get; }
        UInt32 NumSubtexturesX { get; }
        UInt32 NumSubtexturesY { get; }
        ShaderParticleGeometry.TypeEnum Type { get; }
        UInt32 BoxSize { get; }
        Single ParticleDensity { get; }
        String? ParticleTexture { get; }
        ShaderParticleGeometry.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ShaderParticleGeometryMixIn
    {
        public static void Clear(this IShaderParticleGeometryInternal item)
        {
            ((ShaderParticleGeometrySetterCommon)((IShaderParticleGeometryGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ShaderParticleGeometry.Mask<bool> GetEqualsMask(
            this IShaderParticleGeometryGetter item,
            IShaderParticleGeometryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IShaderParticleGeometryGetter item,
            string? name = null,
            ShaderParticleGeometry.Mask<bool>? printMask = null)
        {
            return ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IShaderParticleGeometryGetter item,
            FileGeneration fg,
            string? name = null,
            ShaderParticleGeometry.Mask<bool>? printMask = null)
        {
            ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IShaderParticleGeometryGetter item,
            IShaderParticleGeometryGetter rhs)
        {
            return ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IShaderParticleGeometryInternal lhs,
            IShaderParticleGeometryGetter rhs,
            out ShaderParticleGeometry.ErrorMask errorMask,
            ShaderParticleGeometry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ShaderParticleGeometrySetterTranslationCommon)((IShaderParticleGeometryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ShaderParticleGeometry.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IShaderParticleGeometryInternal lhs,
            IShaderParticleGeometryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ShaderParticleGeometrySetterTranslationCommon)((IShaderParticleGeometryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ShaderParticleGeometry DeepCopy(
            this IShaderParticleGeometryGetter item,
            ShaderParticleGeometry.TranslationMask? copyMask = null)
        {
            return ((ShaderParticleGeometrySetterTranslationCommon)((IShaderParticleGeometryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ShaderParticleGeometry DeepCopy(
            this IShaderParticleGeometryGetter item,
            out ShaderParticleGeometry.ErrorMask errorMask,
            ShaderParticleGeometry.TranslationMask? copyMask = null)
        {
            return ((ShaderParticleGeometrySetterTranslationCommon)((IShaderParticleGeometryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ShaderParticleGeometry DeepCopy(
            this IShaderParticleGeometryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ShaderParticleGeometrySetterTranslationCommon)((IShaderParticleGeometryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ShaderParticleGeometry Duplicate(
            this IShaderParticleGeometryGetter item,
            FormKey formKey,
            ShaderParticleGeometry.TranslationMask? copyMask = null)
        {
            return ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IShaderParticleGeometryInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ShaderParticleGeometrySetterCommon)((IShaderParticleGeometryGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ShaderParticleGeometry_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        GravityVelocity = 6,
        RotationVelocity = 7,
        ParticleSizeX = 8,
        ParticleSizeY = 9,
        CenterOffsetMin = 10,
        CenterOffsetMax = 11,
        InitialRotationRange = 12,
        NumSubtexturesX = 13,
        NumSubtexturesY = 14,
        Type = 15,
        BoxSize = 16,
        ParticleDensity = 17,
        ParticleTexture = 18,
        DATADataTypeState = 19,
    }
    #endregion

    #region Registration
    public partial class ShaderParticleGeometry_Registration : ILoquiRegistration
    {
        public static readonly ShaderParticleGeometry_Registration Instance = new ShaderParticleGeometry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 245,
            version: 0);

        public const string GUID = "3221c39f-42d8-4126-82c3-c4e33a1d65be";

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(ShaderParticleGeometry.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ShaderParticleGeometry.ErrorMask);

        public static readonly Type ClassType = typeof(ShaderParticleGeometry);

        public static readonly Type GetterType = typeof(IShaderParticleGeometryGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IShaderParticleGeometry);

        public static readonly Type? InternalSetterType = typeof(IShaderParticleGeometryInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.ShaderParticleGeometry";

        public const string Name = "ShaderParticleGeometry";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SPGD;
        public static readonly Type BinaryWriteTranslation = typeof(ShaderParticleGeometryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ShaderParticleGeometrySetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ShaderParticleGeometrySetterCommon Instance = new ShaderParticleGeometrySetterCommon();

        partial void ClearPartial();
        
        public void Clear(IShaderParticleGeometryInternal item)
        {
            ClearPartial();
            item.GravityVelocity = default;
            item.RotationVelocity = default;
            item.ParticleSizeX = default;
            item.ParticleSizeY = default;
            item.CenterOffsetMin = default;
            item.CenterOffsetMax = default;
            item.InitialRotationRange = default;
            item.NumSubtexturesX = default;
            item.NumSubtexturesY = default;
            item.Type = default;
            item.BoxSize = default;
            item.ParticleDensity = default;
            item.ParticleTexture = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IShaderParticleGeometryInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IShaderParticleGeometryInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IShaderParticleGeometry obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IShaderParticleGeometryInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IShaderParticleGeometryInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ShaderParticleGeometryBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ShaderParticleGeometryBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ShaderParticleGeometry)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ShaderParticleGeometry)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ShaderParticleGeometryCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ShaderParticleGeometryCommon Instance = new ShaderParticleGeometryCommon();

        public ShaderParticleGeometry.Mask<bool> GetEqualsMask(
            IShaderParticleGeometryGetter item,
            IShaderParticleGeometryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ShaderParticleGeometry.Mask<bool>(false);
            ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IShaderParticleGeometryGetter item,
            IShaderParticleGeometryGetter rhs,
            ShaderParticleGeometry.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.GravityVelocity = item.GravityVelocity.EqualsWithin(rhs.GravityVelocity);
            ret.RotationVelocity = item.RotationVelocity.EqualsWithin(rhs.RotationVelocity);
            ret.ParticleSizeX = item.ParticleSizeX.EqualsWithin(rhs.ParticleSizeX);
            ret.ParticleSizeY = item.ParticleSizeY.EqualsWithin(rhs.ParticleSizeY);
            ret.CenterOffsetMin = item.CenterOffsetMin.EqualsWithin(rhs.CenterOffsetMin);
            ret.CenterOffsetMax = item.CenterOffsetMax.EqualsWithin(rhs.CenterOffsetMax);
            ret.InitialRotationRange = item.InitialRotationRange.EqualsWithin(rhs.InitialRotationRange);
            ret.NumSubtexturesX = item.NumSubtexturesX == rhs.NumSubtexturesX;
            ret.NumSubtexturesY = item.NumSubtexturesY == rhs.NumSubtexturesY;
            ret.Type = item.Type == rhs.Type;
            ret.BoxSize = item.BoxSize == rhs.BoxSize;
            ret.ParticleDensity = item.ParticleDensity.EqualsWithin(rhs.ParticleDensity);
            ret.ParticleTexture = string.Equals(item.ParticleTexture, rhs.ParticleTexture);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IShaderParticleGeometryGetter item,
            string? name = null,
            ShaderParticleGeometry.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IShaderParticleGeometryGetter item,
            FileGeneration fg,
            string? name = null,
            ShaderParticleGeometry.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ShaderParticleGeometry =>");
            }
            else
            {
                fg.AppendLine($"{name} (ShaderParticleGeometry) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IShaderParticleGeometryGetter item,
            FileGeneration fg,
            ShaderParticleGeometry.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.GravityVelocity ?? true)
            {
                fg.AppendItem(item.GravityVelocity, "GravityVelocity");
            }
            if (printMask?.RotationVelocity ?? true)
            {
                fg.AppendItem(item.RotationVelocity, "RotationVelocity");
            }
            if (printMask?.ParticleSizeX ?? true)
            {
                fg.AppendItem(item.ParticleSizeX, "ParticleSizeX");
            }
            if (printMask?.ParticleSizeY ?? true)
            {
                fg.AppendItem(item.ParticleSizeY, "ParticleSizeY");
            }
            if (printMask?.CenterOffsetMin ?? true)
            {
                fg.AppendItem(item.CenterOffsetMin, "CenterOffsetMin");
            }
            if (printMask?.CenterOffsetMax ?? true)
            {
                fg.AppendItem(item.CenterOffsetMax, "CenterOffsetMax");
            }
            if (printMask?.InitialRotationRange ?? true)
            {
                fg.AppendItem(item.InitialRotationRange, "InitialRotationRange");
            }
            if (printMask?.NumSubtexturesX ?? true)
            {
                fg.AppendItem(item.NumSubtexturesX, "NumSubtexturesX");
            }
            if (printMask?.NumSubtexturesY ?? true)
            {
                fg.AppendItem(item.NumSubtexturesY, "NumSubtexturesY");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if (printMask?.BoxSize ?? true)
            {
                fg.AppendItem(item.BoxSize, "BoxSize");
            }
            if (printMask?.ParticleDensity ?? true)
            {
                fg.AppendItem(item.ParticleDensity, "ParticleDensity");
            }
            if ((printMask?.ParticleTexture ?? true)
                && item.ParticleTexture.TryGet(out var ParticleTextureItem))
            {
                fg.AppendItem(ParticleTextureItem, "ParticleTexture");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static ShaderParticleGeometry_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ShaderParticleGeometry_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (ShaderParticleGeometry_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (ShaderParticleGeometry_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (ShaderParticleGeometry_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (ShaderParticleGeometry_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (ShaderParticleGeometry_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new ShaderParticleGeometry_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ShaderParticleGeometry_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ShaderParticleGeometry_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ShaderParticleGeometry_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ShaderParticleGeometry_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IShaderParticleGeometryGetter? lhs,
            IShaderParticleGeometryGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!lhs.GravityVelocity.EqualsWithin(rhs.GravityVelocity)) return false;
            if (!lhs.RotationVelocity.EqualsWithin(rhs.RotationVelocity)) return false;
            if (!lhs.ParticleSizeX.EqualsWithin(rhs.ParticleSizeX)) return false;
            if (!lhs.ParticleSizeY.EqualsWithin(rhs.ParticleSizeY)) return false;
            if (!lhs.CenterOffsetMin.EqualsWithin(rhs.CenterOffsetMin)) return false;
            if (!lhs.CenterOffsetMax.EqualsWithin(rhs.CenterOffsetMax)) return false;
            if (!lhs.InitialRotationRange.EqualsWithin(rhs.InitialRotationRange)) return false;
            if (lhs.NumSubtexturesX != rhs.NumSubtexturesX) return false;
            if (lhs.NumSubtexturesY != rhs.NumSubtexturesY) return false;
            if (lhs.Type != rhs.Type) return false;
            if (lhs.BoxSize != rhs.BoxSize) return false;
            if (!lhs.ParticleDensity.EqualsWithin(rhs.ParticleDensity)) return false;
            if (!string.Equals(lhs.ParticleTexture, rhs.ParticleTexture)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IShaderParticleGeometryGetter?)lhs,
                rhs: rhs as IShaderParticleGeometryGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IShaderParticleGeometryGetter?)lhs,
                rhs: rhs as IShaderParticleGeometryGetter);
        }
        
        public virtual int GetHashCode(IShaderParticleGeometryGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.GravityVelocity);
            hash.Add(item.RotationVelocity);
            hash.Add(item.ParticleSizeX);
            hash.Add(item.ParticleSizeY);
            hash.Add(item.CenterOffsetMin);
            hash.Add(item.CenterOffsetMax);
            hash.Add(item.InitialRotationRange);
            hash.Add(item.NumSubtexturesX);
            hash.Add(item.NumSubtexturesY);
            hash.Add(item.Type);
            hash.Add(item.BoxSize);
            hash.Add(item.ParticleDensity);
            if (item.ParticleTexture.TryGet(out var ParticleTextureitem))
            {
                hash.Add(ParticleTextureitem);
            }
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IShaderParticleGeometryGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IShaderParticleGeometryGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ShaderParticleGeometry.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IShaderParticleGeometryGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public ShaderParticleGeometry Duplicate(
            IShaderParticleGeometryGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ShaderParticleGeometry(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IShaderParticleGeometry)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IShaderParticleGeometry)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class ShaderParticleGeometrySetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ShaderParticleGeometrySetterTranslationCommon Instance = new ShaderParticleGeometrySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IShaderParticleGeometryInternal item,
            IShaderParticleGeometryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IShaderParticleGeometry item,
            IShaderParticleGeometryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.GravityVelocity) ?? true))
            {
                item.GravityVelocity = rhs.GravityVelocity;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.RotationVelocity) ?? true))
            {
                item.RotationVelocity = rhs.RotationVelocity;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.ParticleSizeX) ?? true))
            {
                item.ParticleSizeX = rhs.ParticleSizeX;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.ParticleSizeY) ?? true))
            {
                item.ParticleSizeY = rhs.ParticleSizeY;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.CenterOffsetMin) ?? true))
            {
                item.CenterOffsetMin = rhs.CenterOffsetMin;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.CenterOffsetMax) ?? true))
            {
                item.CenterOffsetMax = rhs.CenterOffsetMax;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.InitialRotationRange) ?? true))
            {
                item.InitialRotationRange = rhs.InitialRotationRange;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.NumSubtexturesX) ?? true))
            {
                item.NumSubtexturesX = rhs.NumSubtexturesX;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.NumSubtexturesY) ?? true))
            {
                item.NumSubtexturesY = rhs.NumSubtexturesY;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.BoxSize) ?? true))
            {
                item.BoxSize = rhs.BoxSize;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.ParticleDensity) ?? true))
            {
                item.ParticleDensity = rhs.ParticleDensity;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.ParticleTexture) ?? true))
            {
                item.ParticleTexture = rhs.ParticleTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)ShaderParticleGeometry_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IShaderParticleGeometryInternal)item,
                rhs: (IShaderParticleGeometryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IShaderParticleGeometry)item,
                rhs: (IShaderParticleGeometryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IShaderParticleGeometryInternal)item,
                rhs: (IShaderParticleGeometryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IShaderParticleGeometry)item,
                rhs: (IShaderParticleGeometryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ShaderParticleGeometry DeepCopy(
            IShaderParticleGeometryGetter item,
            ShaderParticleGeometry.TranslationMask? copyMask = null)
        {
            ShaderParticleGeometry ret = (ShaderParticleGeometry)((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)item).CommonInstance()!).GetNew();
            ((ShaderParticleGeometrySetterTranslationCommon)((IShaderParticleGeometryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ShaderParticleGeometry DeepCopy(
            IShaderParticleGeometryGetter item,
            out ShaderParticleGeometry.ErrorMask errorMask,
            ShaderParticleGeometry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ShaderParticleGeometry ret = (ShaderParticleGeometry)((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)item).CommonInstance()!).GetNew();
            ((ShaderParticleGeometrySetterTranslationCommon)((IShaderParticleGeometryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ShaderParticleGeometry.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ShaderParticleGeometry DeepCopy(
            IShaderParticleGeometryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ShaderParticleGeometry ret = (ShaderParticleGeometry)((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)item).CommonInstance()!).GetNew();
            ((ShaderParticleGeometrySetterTranslationCommon)((IShaderParticleGeometryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ShaderParticleGeometry
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ShaderParticleGeometry_Registration.Instance;
        public new static ShaderParticleGeometry_Registration Registration => ShaderParticleGeometry_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ShaderParticleGeometryCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ShaderParticleGeometrySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ShaderParticleGeometrySetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ShaderParticleGeometryBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ShaderParticleGeometryBinaryWriteTranslation Instance = new ShaderParticleGeometryBinaryWriteTranslation();

        public static void WriteEmbedded(
            IShaderParticleGeometryGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IShaderParticleGeometryGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.GravityVelocity);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RotationVelocity);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleSizeX);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ParticleSizeY);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CenterOffsetMin);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CenterOffsetMax);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.InitialRotationRange);
                writer.Write(item.NumSubtexturesX);
                writer.Write(item.NumSubtexturesY);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<ShaderParticleGeometry.TypeEnum>.Instance.Write(
                    writer,
                    item.Type,
                    length: 4);
                if (!item.DATADataTypeState.HasFlag(ShaderParticleGeometry.DATADataType.Break0))
                {
                    writer.Write(item.BoxSize);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.ParticleDensity);
                }
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ParticleTexture,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IShaderParticleGeometryGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.SPGD),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IShaderParticleGeometryGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IShaderParticleGeometryGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IShaderParticleGeometryGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ShaderParticleGeometryBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static ShaderParticleGeometryBinaryCreateTranslation Instance = new ShaderParticleGeometryBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SPGD;
        public static void FillBinaryStructs(
            IShaderParticleGeometryInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IShaderParticleGeometryInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.GravityVelocity = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.RotationVelocity = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleSizeX = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleSizeY = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.CenterOffsetMin = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.CenterOffsetMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.InitialRotationRange = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.NumSubtexturesX = dataFrame.ReadUInt32();
                    item.NumSubtexturesY = dataFrame.ReadUInt32();
                    item.Type = EnumBinaryTranslation<ShaderParticleGeometry.TypeEnum>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= ShaderParticleGeometry.DATADataType.Break0;
                        return (int)ShaderParticleGeometry_FieldIndex.Type;
                    }
                    item.BoxSize = dataFrame.ReadUInt32();
                    item.ParticleDensity = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)ShaderParticleGeometry_FieldIndex.ParticleDensity;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ParticleTexture = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)ShaderParticleGeometry_FieldIndex.ParticleTexture;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ShaderParticleGeometryBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ShaderParticleGeometryBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IShaderParticleGeometryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ShaderParticleGeometry_Registration.Instance;
        public new static ShaderParticleGeometry_Registration Registration => ShaderParticleGeometry_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ShaderParticleGeometryCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ShaderParticleGeometrySetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ShaderParticleGeometryBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ShaderParticleGeometryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        private int? _DATALocation;
        public ShaderParticleGeometry.DATADataType DATADataTypeState { get; private set; }
        #region GravityVelocity
        private int _GravityVelocityLocation => _DATALocation!.Value;
        private bool _GravityVelocity_IsSet => _DATALocation.HasValue;
        public Single GravityVelocity => _GravityVelocity_IsSet ? _data.Slice(_GravityVelocityLocation, 4).Float() : default;
        #endregion
        #region RotationVelocity
        private int _RotationVelocityLocation => _DATALocation!.Value + 0x4;
        private bool _RotationVelocity_IsSet => _DATALocation.HasValue;
        public Single RotationVelocity => _RotationVelocity_IsSet ? _data.Slice(_RotationVelocityLocation, 4).Float() : default;
        #endregion
        #region ParticleSizeX
        private int _ParticleSizeXLocation => _DATALocation!.Value + 0x8;
        private bool _ParticleSizeX_IsSet => _DATALocation.HasValue;
        public Single ParticleSizeX => _ParticleSizeX_IsSet ? _data.Slice(_ParticleSizeXLocation, 4).Float() : default;
        #endregion
        #region ParticleSizeY
        private int _ParticleSizeYLocation => _DATALocation!.Value + 0xC;
        private bool _ParticleSizeY_IsSet => _DATALocation.HasValue;
        public Single ParticleSizeY => _ParticleSizeY_IsSet ? _data.Slice(_ParticleSizeYLocation, 4).Float() : default;
        #endregion
        #region CenterOffsetMin
        private int _CenterOffsetMinLocation => _DATALocation!.Value + 0x10;
        private bool _CenterOffsetMin_IsSet => _DATALocation.HasValue;
        public Single CenterOffsetMin => _CenterOffsetMin_IsSet ? _data.Slice(_CenterOffsetMinLocation, 4).Float() : default;
        #endregion
        #region CenterOffsetMax
        private int _CenterOffsetMaxLocation => _DATALocation!.Value + 0x14;
        private bool _CenterOffsetMax_IsSet => _DATALocation.HasValue;
        public Single CenterOffsetMax => _CenterOffsetMax_IsSet ? _data.Slice(_CenterOffsetMaxLocation, 4).Float() : default;
        #endregion
        #region InitialRotationRange
        private int _InitialRotationRangeLocation => _DATALocation!.Value + 0x18;
        private bool _InitialRotationRange_IsSet => _DATALocation.HasValue;
        public Single InitialRotationRange => _InitialRotationRange_IsSet ? _data.Slice(_InitialRotationRangeLocation, 4).Float() : default;
        #endregion
        #region NumSubtexturesX
        private int _NumSubtexturesXLocation => _DATALocation!.Value + 0x1C;
        private bool _NumSubtexturesX_IsSet => _DATALocation.HasValue;
        public UInt32 NumSubtexturesX => _NumSubtexturesX_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_NumSubtexturesXLocation, 4)) : default;
        #endregion
        #region NumSubtexturesY
        private int _NumSubtexturesYLocation => _DATALocation!.Value + 0x20;
        private bool _NumSubtexturesY_IsSet => _DATALocation.HasValue;
        public UInt32 NumSubtexturesY => _NumSubtexturesY_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_NumSubtexturesYLocation, 4)) : default;
        #endregion
        #region Type
        private int _TypeLocation => _DATALocation!.Value + 0x24;
        private bool _Type_IsSet => _DATALocation.HasValue;
        public ShaderParticleGeometry.TypeEnum Type => _Type_IsSet ? (ShaderParticleGeometry.TypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TypeLocation, 0x4)) : default;
        #endregion
        #region BoxSize
        private int _BoxSizeLocation => _DATALocation!.Value + 0x28;
        private bool _BoxSize_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(ShaderParticleGeometry.DATADataType.Break0);
        public UInt32 BoxSize => _BoxSize_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_BoxSizeLocation, 4)) : default;
        #endregion
        #region ParticleDensity
        private int _ParticleDensityLocation => _DATALocation!.Value + 0x2C;
        private bool _ParticleDensity_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(ShaderParticleGeometry.DATADataType.Break0);
        public Single ParticleDensity => _ParticleDensity_IsSet ? _data.Slice(_ParticleDensityLocation, 4).Float() : default;
        #endregion
        #region ParticleTexture
        private int? _ParticleTextureLocation;
        public String? ParticleTexture => _ParticleTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _ParticleTextureLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ShaderParticleGeometryBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ShaderParticleGeometryBinaryOverlay ShaderParticleGeometryFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new ShaderParticleGeometryBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ShaderParticleGeometryBinaryOverlay ShaderParticleGeometryFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ShaderParticleGeometryFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x28)
                    {
                        this.DATADataTypeState |= ShaderParticleGeometry.DATADataType.Break0;
                    }
                    return (int)ShaderParticleGeometry_FieldIndex.ParticleDensity;
                }
                case RecordTypeInts.ICON:
                {
                    _ParticleTextureLocation = (stream.Position - offset);
                    return (int)ShaderParticleGeometry_FieldIndex.ParticleTexture;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ShaderParticleGeometryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IShaderParticleGeometryGetter rhs)) return false;
            return ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IShaderParticleGeometryGetter? obj)
        {
            return ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ShaderParticleGeometryCommon)((IShaderParticleGeometryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

