/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ScenePhaseUnusedData :
        IScenePhaseUnusedData,
        ILoquiObjectSetter<ScenePhaseUnusedData>,
        IEquatable<IScenePhaseUnusedDataGetter>
    {
        #region Ctor
        public ScenePhaseUnusedData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SCHR
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SCHR;
        public MemorySlice<Byte>? SCHR
        {
            get => this._SCHR;
            set => this._SCHR = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IScenePhaseUnusedDataGetter.SCHR => this.SCHR;
        #endregion
        #region SCDA
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SCDA;
        public MemorySlice<Byte>? SCDA
        {
            get => this._SCDA;
            set => this._SCDA = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IScenePhaseUnusedDataGetter.SCDA => this.SCDA;
        #endregion
        #region SCTX
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SCTX;
        public MemorySlice<Byte>? SCTX
        {
            get => this._SCTX;
            set => this._SCTX = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IScenePhaseUnusedDataGetter.SCTX => this.SCTX;
        #endregion
        #region QNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _QNAM;
        public MemorySlice<Byte>? QNAM
        {
            get => this._QNAM;
            set => this._QNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IScenePhaseUnusedDataGetter.QNAM => this.QNAM;
        #endregion
        #region SCRO
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SCRO;
        public MemorySlice<Byte>? SCRO
        {
            get => this._SCRO;
            set => this._SCRO = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IScenePhaseUnusedDataGetter.SCRO => this.SCRO;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScenePhaseUnusedDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScenePhaseUnusedDataGetter rhs)) return false;
            return ((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IScenePhaseUnusedDataGetter? obj)
        {
            return ((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.SCHR = initialValue;
                this.SCDA = initialValue;
                this.SCTX = initialValue;
                this.QNAM = initialValue;
                this.SCRO = initialValue;
            }

            public Mask(
                TItem SCHR,
                TItem SCDA,
                TItem SCTX,
                TItem QNAM,
                TItem SCRO)
            {
                this.SCHR = SCHR;
                this.SCDA = SCDA;
                this.SCTX = SCTX;
                this.QNAM = QNAM;
                this.SCRO = SCRO;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem SCHR;
            public TItem SCDA;
            public TItem SCTX;
            public TItem QNAM;
            public TItem SCRO;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.SCHR, rhs.SCHR)) return false;
                if (!object.Equals(this.SCDA, rhs.SCDA)) return false;
                if (!object.Equals(this.SCTX, rhs.SCTX)) return false;
                if (!object.Equals(this.QNAM, rhs.QNAM)) return false;
                if (!object.Equals(this.SCRO, rhs.SCRO)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SCHR);
                hash.Add(this.SCDA);
                hash.Add(this.SCTX);
                hash.Add(this.QNAM);
                hash.Add(this.SCRO);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.SCHR)) return false;
                if (!eval(this.SCDA)) return false;
                if (!eval(this.SCTX)) return false;
                if (!eval(this.QNAM)) return false;
                if (!eval(this.SCRO)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.SCHR)) return true;
                if (eval(this.SCDA)) return true;
                if (eval(this.SCTX)) return true;
                if (eval(this.QNAM)) return true;
                if (eval(this.SCRO)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ScenePhaseUnusedData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.SCHR = eval(this.SCHR);
                obj.SCDA = eval(this.SCDA);
                obj.SCTX = eval(this.SCTX);
                obj.QNAM = eval(this.QNAM);
                obj.SCRO = eval(this.SCRO);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ScenePhaseUnusedData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ScenePhaseUnusedData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ScenePhaseUnusedData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.SCHR ?? true)
                    {
                        fg.AppendItem(SCHR, "SCHR");
                    }
                    if (printMask?.SCDA ?? true)
                    {
                        fg.AppendItem(SCDA, "SCDA");
                    }
                    if (printMask?.SCTX ?? true)
                    {
                        fg.AppendItem(SCTX, "SCTX");
                    }
                    if (printMask?.QNAM ?? true)
                    {
                        fg.AppendItem(QNAM, "QNAM");
                    }
                    if (printMask?.SCRO ?? true)
                    {
                        fg.AppendItem(SCRO, "SCRO");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? SCHR;
            public Exception? SCDA;
            public Exception? SCTX;
            public Exception? QNAM;
            public Exception? SCRO;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ScenePhaseUnusedData_FieldIndex enu = (ScenePhaseUnusedData_FieldIndex)index;
                switch (enu)
                {
                    case ScenePhaseUnusedData_FieldIndex.SCHR:
                        return SCHR;
                    case ScenePhaseUnusedData_FieldIndex.SCDA:
                        return SCDA;
                    case ScenePhaseUnusedData_FieldIndex.SCTX:
                        return SCTX;
                    case ScenePhaseUnusedData_FieldIndex.QNAM:
                        return QNAM;
                    case ScenePhaseUnusedData_FieldIndex.SCRO:
                        return SCRO;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ScenePhaseUnusedData_FieldIndex enu = (ScenePhaseUnusedData_FieldIndex)index;
                switch (enu)
                {
                    case ScenePhaseUnusedData_FieldIndex.SCHR:
                        this.SCHR = ex;
                        break;
                    case ScenePhaseUnusedData_FieldIndex.SCDA:
                        this.SCDA = ex;
                        break;
                    case ScenePhaseUnusedData_FieldIndex.SCTX:
                        this.SCTX = ex;
                        break;
                    case ScenePhaseUnusedData_FieldIndex.QNAM:
                        this.QNAM = ex;
                        break;
                    case ScenePhaseUnusedData_FieldIndex.SCRO:
                        this.SCRO = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ScenePhaseUnusedData_FieldIndex enu = (ScenePhaseUnusedData_FieldIndex)index;
                switch (enu)
                {
                    case ScenePhaseUnusedData_FieldIndex.SCHR:
                        this.SCHR = (Exception?)obj;
                        break;
                    case ScenePhaseUnusedData_FieldIndex.SCDA:
                        this.SCDA = (Exception?)obj;
                        break;
                    case ScenePhaseUnusedData_FieldIndex.SCTX:
                        this.SCTX = (Exception?)obj;
                        break;
                    case ScenePhaseUnusedData_FieldIndex.QNAM:
                        this.QNAM = (Exception?)obj;
                        break;
                    case ScenePhaseUnusedData_FieldIndex.SCRO:
                        this.SCRO = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (SCHR != null) return true;
                if (SCDA != null) return true;
                if (SCTX != null) return true;
                if (QNAM != null) return true;
                if (SCRO != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(SCHR, "SCHR");
                fg.AppendItem(SCDA, "SCDA");
                fg.AppendItem(SCTX, "SCTX");
                fg.AppendItem(QNAM, "QNAM");
                fg.AppendItem(SCRO, "SCRO");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SCHR = this.SCHR.Combine(rhs.SCHR);
                ret.SCDA = this.SCDA.Combine(rhs.SCDA);
                ret.SCTX = this.SCTX.Combine(rhs.SCTX);
                ret.QNAM = this.QNAM.Combine(rhs.QNAM);
                ret.SCRO = this.SCRO.Combine(rhs.SCRO);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool SCHR;
            public bool SCDA;
            public bool SCTX;
            public bool QNAM;
            public bool SCRO;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.SCHR = defaultOn;
                this.SCDA = defaultOn;
                this.SCTX = defaultOn;
                this.QNAM = defaultOn;
                this.SCRO = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((SCHR, null));
                ret.Add((SCDA, null));
                ret.Add((SCTX, null));
                ret.Add((QNAM, null));
                ret.Add((SCRO, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScenePhaseUnusedDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScenePhaseUnusedDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static ScenePhaseUnusedData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ScenePhaseUnusedData();
            ((ScenePhaseUnusedDataSetterCommon)((IScenePhaseUnusedDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ScenePhaseUnusedData item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ScenePhaseUnusedDataSetterCommon)((IScenePhaseUnusedDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ScenePhaseUnusedData GetNew()
        {
            return new ScenePhaseUnusedData();
        }

    }
    #endregion

    #region Interface
    public partial interface IScenePhaseUnusedData :
        IScenePhaseUnusedDataGetter,
        ILoquiObjectSetter<IScenePhaseUnusedData>
    {
        new MemorySlice<Byte>? SCHR { get; set; }
        new MemorySlice<Byte>? SCDA { get; set; }
        new MemorySlice<Byte>? SCTX { get; set; }
        new MemorySlice<Byte>? QNAM { get; set; }
        new MemorySlice<Byte>? SCRO { get; set; }
    }

    public partial interface IScenePhaseUnusedDataGetter :
        ILoquiObject,
        ILoquiObject<IScenePhaseUnusedDataGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ScenePhaseUnusedData_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? SCHR { get; }
        ReadOnlyMemorySlice<Byte>? SCDA { get; }
        ReadOnlyMemorySlice<Byte>? SCTX { get; }
        ReadOnlyMemorySlice<Byte>? QNAM { get; }
        ReadOnlyMemorySlice<Byte>? SCRO { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScenePhaseUnusedDataMixIn
    {
        public static void Clear(this IScenePhaseUnusedData item)
        {
            ((ScenePhaseUnusedDataSetterCommon)((IScenePhaseUnusedDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScenePhaseUnusedData.Mask<bool> GetEqualsMask(
            this IScenePhaseUnusedDataGetter item,
            IScenePhaseUnusedDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScenePhaseUnusedDataGetter item,
            string? name = null,
            ScenePhaseUnusedData.Mask<bool>? printMask = null)
        {
            return ((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScenePhaseUnusedDataGetter item,
            FileGeneration fg,
            string? name = null,
            ScenePhaseUnusedData.Mask<bool>? printMask = null)
        {
            ((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IScenePhaseUnusedDataGetter item,
            IScenePhaseUnusedDataGetter rhs)
        {
            return ((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IScenePhaseUnusedData lhs,
            IScenePhaseUnusedDataGetter rhs)
        {
            ((ScenePhaseUnusedDataSetterTranslationCommon)((IScenePhaseUnusedDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScenePhaseUnusedData lhs,
            IScenePhaseUnusedDataGetter rhs,
            ScenePhaseUnusedData.TranslationMask? copyMask = null)
        {
            ((ScenePhaseUnusedDataSetterTranslationCommon)((IScenePhaseUnusedDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScenePhaseUnusedData lhs,
            IScenePhaseUnusedDataGetter rhs,
            out ScenePhaseUnusedData.ErrorMask errorMask,
            ScenePhaseUnusedData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScenePhaseUnusedDataSetterTranslationCommon)((IScenePhaseUnusedDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ScenePhaseUnusedData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScenePhaseUnusedData lhs,
            IScenePhaseUnusedDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScenePhaseUnusedDataSetterTranslationCommon)((IScenePhaseUnusedDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ScenePhaseUnusedData DeepCopy(
            this IScenePhaseUnusedDataGetter item,
            ScenePhaseUnusedData.TranslationMask? copyMask = null)
        {
            return ((ScenePhaseUnusedDataSetterTranslationCommon)((IScenePhaseUnusedDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScenePhaseUnusedData DeepCopy(
            this IScenePhaseUnusedDataGetter item,
            out ScenePhaseUnusedData.ErrorMask errorMask,
            ScenePhaseUnusedData.TranslationMask? copyMask = null)
        {
            return ((ScenePhaseUnusedDataSetterTranslationCommon)((IScenePhaseUnusedDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScenePhaseUnusedData DeepCopy(
            this IScenePhaseUnusedDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScenePhaseUnusedDataSetterTranslationCommon)((IScenePhaseUnusedDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IScenePhaseUnusedData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScenePhaseUnusedDataSetterCommon)((IScenePhaseUnusedDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ScenePhaseUnusedData_FieldIndex
    {
        SCHR = 0,
        SCDA = 1,
        SCTX = 2,
        QNAM = 3,
        SCRO = 4,
    }
    #endregion

    #region Registration
    public partial class ScenePhaseUnusedData_Registration : ILoquiRegistration
    {
        public static readonly ScenePhaseUnusedData_Registration Instance = new ScenePhaseUnusedData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 469,
            version: 0);

        public const string GUID = "51d4b3f1-35b7-4c35-9ec4-e5ffcf4c6bb5";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ScenePhaseUnusedData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScenePhaseUnusedData.ErrorMask);

        public static readonly Type ClassType = typeof(ScenePhaseUnusedData);

        public static readonly Type GetterType = typeof(IScenePhaseUnusedDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScenePhaseUnusedData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ScenePhaseUnusedData";

        public const string Name = "ScenePhaseUnusedData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.SCHR,
                        RecordTypes.SCDA,
                        RecordTypes.SCTX,
                        RecordTypes.QNAM,
                        RecordTypes.SCRO
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(ScenePhaseUnusedDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ScenePhaseUnusedDataSetterCommon
    {
        public static readonly ScenePhaseUnusedDataSetterCommon Instance = new ScenePhaseUnusedDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScenePhaseUnusedData item)
        {
            ClearPartial();
            item.SCHR = default;
            item.SCDA = default;
            item.SCTX = default;
            item.QNAM = default;
            item.SCRO = default;
        }
        
        #region Mutagen
        public void RemapLinks(IScenePhaseUnusedData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScenePhaseUnusedData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ScenePhaseUnusedDataBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ScenePhaseUnusedDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ScenePhaseUnusedDataCommon
    {
        public static readonly ScenePhaseUnusedDataCommon Instance = new ScenePhaseUnusedDataCommon();

        public ScenePhaseUnusedData.Mask<bool> GetEqualsMask(
            IScenePhaseUnusedDataGetter item,
            IScenePhaseUnusedDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScenePhaseUnusedData.Mask<bool>(false);
            ((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScenePhaseUnusedDataGetter item,
            IScenePhaseUnusedDataGetter rhs,
            ScenePhaseUnusedData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.SCHR = MemorySliceExt.Equal(item.SCHR, rhs.SCHR);
            ret.SCDA = MemorySliceExt.Equal(item.SCDA, rhs.SCDA);
            ret.SCTX = MemorySliceExt.Equal(item.SCTX, rhs.SCTX);
            ret.QNAM = MemorySliceExt.Equal(item.QNAM, rhs.QNAM);
            ret.SCRO = MemorySliceExt.Equal(item.SCRO, rhs.SCRO);
        }
        
        public string ToString(
            IScenePhaseUnusedDataGetter item,
            string? name = null,
            ScenePhaseUnusedData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScenePhaseUnusedDataGetter item,
            FileGeneration fg,
            string? name = null,
            ScenePhaseUnusedData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScenePhaseUnusedData =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScenePhaseUnusedData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScenePhaseUnusedDataGetter item,
            FileGeneration fg,
            ScenePhaseUnusedData.Mask<bool>? printMask = null)
        {
            if ((printMask?.SCHR ?? true)
                && item.SCHR.TryGet(out var SCHRItem))
            {
                fg.AppendLine($"SCHR => {SpanExt.ToHexString(SCHRItem)}");
            }
            if ((printMask?.SCDA ?? true)
                && item.SCDA.TryGet(out var SCDAItem))
            {
                fg.AppendLine($"SCDA => {SpanExt.ToHexString(SCDAItem)}");
            }
            if ((printMask?.SCTX ?? true)
                && item.SCTX.TryGet(out var SCTXItem))
            {
                fg.AppendLine($"SCTX => {SpanExt.ToHexString(SCTXItem)}");
            }
            if ((printMask?.QNAM ?? true)
                && item.QNAM.TryGet(out var QNAMItem))
            {
                fg.AppendLine($"QNAM => {SpanExt.ToHexString(QNAMItem)}");
            }
            if ((printMask?.SCRO ?? true)
                && item.SCRO.TryGet(out var SCROItem))
            {
                fg.AppendLine($"SCRO => {SpanExt.ToHexString(SCROItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScenePhaseUnusedDataGetter? lhs,
            IScenePhaseUnusedDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!MemorySliceExt.Equal(lhs.SCHR, rhs.SCHR)) return false;
            if (!MemorySliceExt.Equal(lhs.SCDA, rhs.SCDA)) return false;
            if (!MemorySliceExt.Equal(lhs.SCTX, rhs.SCTX)) return false;
            if (!MemorySliceExt.Equal(lhs.QNAM, rhs.QNAM)) return false;
            if (!MemorySliceExt.Equal(lhs.SCRO, rhs.SCRO)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IScenePhaseUnusedDataGetter item)
        {
            var hash = new HashCode();
            if (item.SCHR.TryGet(out var SCHRItem))
            {
                hash.Add(SCHRItem);
            }
            if (item.SCDA.TryGet(out var SCDAItem))
            {
                hash.Add(SCDAItem);
            }
            if (item.SCTX.TryGet(out var SCTXItem))
            {
                hash.Add(SCTXItem);
            }
            if (item.QNAM.TryGet(out var QNAMItem))
            {
                hash.Add(QNAMItem);
            }
            if (item.SCRO.TryGet(out var SCROItem))
            {
                hash.Add(SCROItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ScenePhaseUnusedData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IScenePhaseUnusedDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class ScenePhaseUnusedDataSetterTranslationCommon
    {
        public static readonly ScenePhaseUnusedDataSetterTranslationCommon Instance = new ScenePhaseUnusedDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IScenePhaseUnusedData item,
            IScenePhaseUnusedDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ScenePhaseUnusedData_FieldIndex.SCHR) ?? true))
            {
                if(rhs.SCHR.TryGet(out var SCHRrhs))
                {
                    item.SCHR = SCHRrhs.ToArray();
                }
                else
                {
                    item.SCHR = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhaseUnusedData_FieldIndex.SCDA) ?? true))
            {
                if(rhs.SCDA.TryGet(out var SCDArhs))
                {
                    item.SCDA = SCDArhs.ToArray();
                }
                else
                {
                    item.SCDA = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhaseUnusedData_FieldIndex.SCTX) ?? true))
            {
                if(rhs.SCTX.TryGet(out var SCTXrhs))
                {
                    item.SCTX = SCTXrhs.ToArray();
                }
                else
                {
                    item.SCTX = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhaseUnusedData_FieldIndex.QNAM) ?? true))
            {
                if(rhs.QNAM.TryGet(out var QNAMrhs))
                {
                    item.QNAM = QNAMrhs.ToArray();
                }
                else
                {
                    item.QNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhaseUnusedData_FieldIndex.SCRO) ?? true))
            {
                if(rhs.SCRO.TryGet(out var SCROrhs))
                {
                    item.SCRO = SCROrhs.ToArray();
                }
                else
                {
                    item.SCRO = default;
                }
            }
        }
        
        #endregion
        
        public ScenePhaseUnusedData DeepCopy(
            IScenePhaseUnusedDataGetter item,
            ScenePhaseUnusedData.TranslationMask? copyMask = null)
        {
            ScenePhaseUnusedData ret = (ScenePhaseUnusedData)((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)item).CommonInstance()!).GetNew();
            ((ScenePhaseUnusedDataSetterTranslationCommon)((IScenePhaseUnusedDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ScenePhaseUnusedData DeepCopy(
            IScenePhaseUnusedDataGetter item,
            out ScenePhaseUnusedData.ErrorMask errorMask,
            ScenePhaseUnusedData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScenePhaseUnusedData ret = (ScenePhaseUnusedData)((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)item).CommonInstance()!).GetNew();
            ((ScenePhaseUnusedDataSetterTranslationCommon)((IScenePhaseUnusedDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ScenePhaseUnusedData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ScenePhaseUnusedData DeepCopy(
            IScenePhaseUnusedDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScenePhaseUnusedData ret = (ScenePhaseUnusedData)((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)item).CommonInstance()!).GetNew();
            ((ScenePhaseUnusedDataSetterTranslationCommon)((IScenePhaseUnusedDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ScenePhaseUnusedData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScenePhaseUnusedData_Registration.Instance;
        public static ScenePhaseUnusedData_Registration Registration => ScenePhaseUnusedData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScenePhaseUnusedDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ScenePhaseUnusedDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScenePhaseUnusedDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScenePhaseUnusedDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IScenePhaseUnusedDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IScenePhaseUnusedDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScenePhaseUnusedDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ScenePhaseUnusedDataBinaryWriteTranslation Instance = new ScenePhaseUnusedDataBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IScenePhaseUnusedDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SCHR,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SCHR));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SCDA,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SCDA));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SCTX,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SCTX));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.QNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.QNAM));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SCRO,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SCRO));
        }

        public void Write(
            MutagenWriter writer,
            IScenePhaseUnusedDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScenePhaseUnusedDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ScenePhaseUnusedDataBinaryCreateTranslation
    {
        public readonly static ScenePhaseUnusedDataBinaryCreateTranslation Instance = new ScenePhaseUnusedDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IScenePhaseUnusedData item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IScenePhaseUnusedData item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.SCHR:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScenePhaseUnusedData_FieldIndex.SCHR) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SCHR = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)ScenePhaseUnusedData_FieldIndex.SCHR;
                }
                case RecordTypeInts.SCDA:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScenePhaseUnusedData_FieldIndex.SCDA) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SCDA = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)ScenePhaseUnusedData_FieldIndex.SCDA;
                }
                case RecordTypeInts.SCTX:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScenePhaseUnusedData_FieldIndex.SCTX) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SCTX = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)ScenePhaseUnusedData_FieldIndex.SCTX;
                }
                case RecordTypeInts.QNAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScenePhaseUnusedData_FieldIndex.QNAM) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.QNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)ScenePhaseUnusedData_FieldIndex.QNAM;
                }
                case RecordTypeInts.SCRO:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScenePhaseUnusedData_FieldIndex.SCRO) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SCRO = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)ScenePhaseUnusedData_FieldIndex.SCRO;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ScenePhaseUnusedDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScenePhaseUnusedDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScenePhaseUnusedDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScenePhaseUnusedDataBinaryOverlay :
        BinaryOverlay,
        IScenePhaseUnusedDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScenePhaseUnusedData_Registration.Instance;
        public static ScenePhaseUnusedData_Registration Registration => ScenePhaseUnusedData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScenePhaseUnusedDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScenePhaseUnusedDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScenePhaseUnusedDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IScenePhaseUnusedDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IScenePhaseUnusedDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScenePhaseUnusedDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScenePhaseUnusedDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region SCHR
        private int? _SCHRLocation;
        public ReadOnlyMemorySlice<Byte>? SCHR => _SCHRLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _SCHRLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SCDA
        private int? _SCDALocation;
        public ReadOnlyMemorySlice<Byte>? SCDA => _SCDALocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _SCDALocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SCTX
        private int? _SCTXLocation;
        public ReadOnlyMemorySlice<Byte>? SCTX => _SCTXLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _SCTXLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region QNAM
        private int? _QNAMLocation;
        public ReadOnlyMemorySlice<Byte>? QNAM => _QNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _QNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SCRO
        private int? _SCROLocation;
        public ReadOnlyMemorySlice<Byte>? SCRO => _SCROLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _SCROLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScenePhaseUnusedDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ScenePhaseUnusedDataBinaryOverlay ScenePhaseUnusedDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ScenePhaseUnusedDataBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ScenePhaseUnusedDataBinaryOverlay ScenePhaseUnusedDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ScenePhaseUnusedDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.SCHR:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScenePhaseUnusedData_FieldIndex.SCHR) return ParseResult.Stop;
                    _SCHRLocation = (stream.Position - offset);
                    return (int)ScenePhaseUnusedData_FieldIndex.SCHR;
                }
                case RecordTypeInts.SCDA:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScenePhaseUnusedData_FieldIndex.SCDA) return ParseResult.Stop;
                    _SCDALocation = (stream.Position - offset);
                    return (int)ScenePhaseUnusedData_FieldIndex.SCDA;
                }
                case RecordTypeInts.SCTX:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScenePhaseUnusedData_FieldIndex.SCTX) return ParseResult.Stop;
                    _SCTXLocation = (stream.Position - offset);
                    return (int)ScenePhaseUnusedData_FieldIndex.SCTX;
                }
                case RecordTypeInts.QNAM:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScenePhaseUnusedData_FieldIndex.QNAM) return ParseResult.Stop;
                    _QNAMLocation = (stream.Position - offset);
                    return (int)ScenePhaseUnusedData_FieldIndex.QNAM;
                }
                case RecordTypeInts.SCRO:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ScenePhaseUnusedData_FieldIndex.SCRO) return ParseResult.Stop;
                    _SCROLocation = (stream.Position - offset);
                    return (int)ScenePhaseUnusedData_FieldIndex.SCRO;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScenePhaseUnusedDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScenePhaseUnusedDataGetter rhs)) return false;
            return ((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IScenePhaseUnusedDataGetter? obj)
        {
            return ((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScenePhaseUnusedDataCommon)((IScenePhaseUnusedDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

