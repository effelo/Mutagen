/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class CameraShot :
        Fallout4MajorRecord,
        ICameraShotInternal,
        ILoquiObjectSetter<CameraShot>,
        IEquatable<ICameraShotGetter>
    {
        #region Ctor
        protected CameraShot()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ICameraShotGetter.Model => this.Model;
        #endregion
        #region Action
        public CameraShot.ActionType Action { get; set; } = default;
        #endregion
        #region Location
        public CameraShot.LocationType Location { get; set; } = default;
        #endregion
        #region Target
        public CameraShot.TargetType Target { get; set; } = default;
        #endregion
        #region Flags
        public CameraShot.Flag Flags { get; set; } = default;
        #endregion
        #region TimeMultiplierPlayer
        public Single TimeMultiplierPlayer { get; set; } = default;
        #endregion
        #region TimeMultiplierTarget
        public Single TimeMultiplierTarget { get; set; } = default;
        #endregion
        #region TimeMultiplierGlobal
        public Single TimeMultiplierGlobal { get; set; } = default;
        #endregion
        #region MaxTime
        public Single MaxTime { get; set; } = default;
        #endregion
        #region MinTime
        public Single MinTime { get; set; } = default;
        #endregion
        #region TargetPercentBetweenActors
        public Single TargetPercentBetweenActors { get; set; } = default;
        #endregion
        #region NearTargetDistance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _NearTargetDistance;
        public Single NearTargetDistance
        {
            get => this._NearTargetDistance;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._NearTargetDistance = value;
            }
        }
        #endregion
        #region ImageSpaceModifier
        public FormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier { get; set; } = new FormLinkNullable<IImageSpaceAdapterGetter>();
        #endregion
        #region DATADataTypeState
        public CameraShot.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CameraShotMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICameraShotGetter rhs)) return false;
            return ((CameraShotCommon)((ICameraShotGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICameraShotGetter? obj)
        {
            return ((CameraShotCommon)((ICameraShotGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CameraShotCommon)((ICameraShotGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Action = initialValue;
                this.Location = initialValue;
                this.Target = initialValue;
                this.Flags = initialValue;
                this.TimeMultiplierPlayer = initialValue;
                this.TimeMultiplierTarget = initialValue;
                this.TimeMultiplierGlobal = initialValue;
                this.MaxTime = initialValue;
                this.MinTime = initialValue;
                this.TargetPercentBetweenActors = initialValue;
                this.NearTargetDistance = initialValue;
                this.ImageSpaceModifier = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Model,
                TItem Action,
                TItem Location,
                TItem Target,
                TItem Flags,
                TItem TimeMultiplierPlayer,
                TItem TimeMultiplierTarget,
                TItem TimeMultiplierGlobal,
                TItem MaxTime,
                TItem MinTime,
                TItem TargetPercentBetweenActors,
                TItem NearTargetDistance,
                TItem ImageSpaceModifier,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Action = Action;
                this.Location = Location;
                this.Target = Target;
                this.Flags = Flags;
                this.TimeMultiplierPlayer = TimeMultiplierPlayer;
                this.TimeMultiplierTarget = TimeMultiplierTarget;
                this.TimeMultiplierGlobal = TimeMultiplierGlobal;
                this.MaxTime = MaxTime;
                this.MinTime = MinTime;
                this.TargetPercentBetweenActors = TargetPercentBetweenActors;
                this.NearTargetDistance = NearTargetDistance;
                this.ImageSpaceModifier = ImageSpaceModifier;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Action;
            public TItem Location;
            public TItem Target;
            public TItem Flags;
            public TItem TimeMultiplierPlayer;
            public TItem TimeMultiplierTarget;
            public TItem TimeMultiplierGlobal;
            public TItem MaxTime;
            public TItem MinTime;
            public TItem TargetPercentBetweenActors;
            public TItem NearTargetDistance;
            public TItem ImageSpaceModifier;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Action, rhs.Action)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.Target, rhs.Target)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.TimeMultiplierPlayer, rhs.TimeMultiplierPlayer)) return false;
                if (!object.Equals(this.TimeMultiplierTarget, rhs.TimeMultiplierTarget)) return false;
                if (!object.Equals(this.TimeMultiplierGlobal, rhs.TimeMultiplierGlobal)) return false;
                if (!object.Equals(this.MaxTime, rhs.MaxTime)) return false;
                if (!object.Equals(this.MinTime, rhs.MinTime)) return false;
                if (!object.Equals(this.TargetPercentBetweenActors, rhs.TargetPercentBetweenActors)) return false;
                if (!object.Equals(this.NearTargetDistance, rhs.NearTargetDistance)) return false;
                if (!object.Equals(this.ImageSpaceModifier, rhs.ImageSpaceModifier)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Model);
                hash.Add(this.Action);
                hash.Add(this.Location);
                hash.Add(this.Target);
                hash.Add(this.Flags);
                hash.Add(this.TimeMultiplierPlayer);
                hash.Add(this.TimeMultiplierTarget);
                hash.Add(this.TimeMultiplierGlobal);
                hash.Add(this.MaxTime);
                hash.Add(this.MinTime);
                hash.Add(this.TargetPercentBetweenActors);
                hash.Add(this.NearTargetDistance);
                hash.Add(this.ImageSpaceModifier);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Action)) return false;
                if (!eval(this.Location)) return false;
                if (!eval(this.Target)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.TimeMultiplierPlayer)) return false;
                if (!eval(this.TimeMultiplierTarget)) return false;
                if (!eval(this.TimeMultiplierGlobal)) return false;
                if (!eval(this.MaxTime)) return false;
                if (!eval(this.MinTime)) return false;
                if (!eval(this.TargetPercentBetweenActors)) return false;
                if (!eval(this.NearTargetDistance)) return false;
                if (!eval(this.ImageSpaceModifier)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Action)) return true;
                if (eval(this.Location)) return true;
                if (eval(this.Target)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.TimeMultiplierPlayer)) return true;
                if (eval(this.TimeMultiplierTarget)) return true;
                if (eval(this.TimeMultiplierGlobal)) return true;
                if (eval(this.MaxTime)) return true;
                if (eval(this.MinTime)) return true;
                if (eval(this.TargetPercentBetweenActors)) return true;
                if (eval(this.NearTargetDistance)) return true;
                if (eval(this.ImageSpaceModifier)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CameraShot.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Action = eval(this.Action);
                obj.Location = eval(this.Location);
                obj.Target = eval(this.Target);
                obj.Flags = eval(this.Flags);
                obj.TimeMultiplierPlayer = eval(this.TimeMultiplierPlayer);
                obj.TimeMultiplierTarget = eval(this.TimeMultiplierTarget);
                obj.TimeMultiplierGlobal = eval(this.TimeMultiplierGlobal);
                obj.MaxTime = eval(this.MaxTime);
                obj.MinTime = eval(this.MinTime);
                obj.TargetPercentBetweenActors = eval(this.TargetPercentBetweenActors);
                obj.NearTargetDistance = eval(this.NearTargetDistance);
                obj.ImageSpaceModifier = eval(this.ImageSpaceModifier);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CameraShot.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CameraShot.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CameraShot.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Action ?? true)
                    {
                        fg.AppendItem(Action, "Action");
                    }
                    if (printMask?.Location ?? true)
                    {
                        fg.AppendItem(Location, "Location");
                    }
                    if (printMask?.Target ?? true)
                    {
                        fg.AppendItem(Target, "Target");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.TimeMultiplierPlayer ?? true)
                    {
                        fg.AppendItem(TimeMultiplierPlayer, "TimeMultiplierPlayer");
                    }
                    if (printMask?.TimeMultiplierTarget ?? true)
                    {
                        fg.AppendItem(TimeMultiplierTarget, "TimeMultiplierTarget");
                    }
                    if (printMask?.TimeMultiplierGlobal ?? true)
                    {
                        fg.AppendItem(TimeMultiplierGlobal, "TimeMultiplierGlobal");
                    }
                    if (printMask?.MaxTime ?? true)
                    {
                        fg.AppendItem(MaxTime, "MaxTime");
                    }
                    if (printMask?.MinTime ?? true)
                    {
                        fg.AppendItem(MinTime, "MinTime");
                    }
                    if (printMask?.TargetPercentBetweenActors ?? true)
                    {
                        fg.AppendItem(TargetPercentBetweenActors, "TargetPercentBetweenActors");
                    }
                    if (printMask?.NearTargetDistance ?? true)
                    {
                        fg.AppendItem(NearTargetDistance, "NearTargetDistance");
                    }
                    if (printMask?.ImageSpaceModifier ?? true)
                    {
                        fg.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Action;
            public Exception? Location;
            public Exception? Target;
            public Exception? Flags;
            public Exception? TimeMultiplierPlayer;
            public Exception? TimeMultiplierTarget;
            public Exception? TimeMultiplierGlobal;
            public Exception? MaxTime;
            public Exception? MinTime;
            public Exception? TargetPercentBetweenActors;
            public Exception? NearTargetDistance;
            public Exception? ImageSpaceModifier;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                CameraShot_FieldIndex enu = (CameraShot_FieldIndex)index;
                switch (enu)
                {
                    case CameraShot_FieldIndex.Model:
                        return Model;
                    case CameraShot_FieldIndex.Action:
                        return Action;
                    case CameraShot_FieldIndex.Location:
                        return Location;
                    case CameraShot_FieldIndex.Target:
                        return Target;
                    case CameraShot_FieldIndex.Flags:
                        return Flags;
                    case CameraShot_FieldIndex.TimeMultiplierPlayer:
                        return TimeMultiplierPlayer;
                    case CameraShot_FieldIndex.TimeMultiplierTarget:
                        return TimeMultiplierTarget;
                    case CameraShot_FieldIndex.TimeMultiplierGlobal:
                        return TimeMultiplierGlobal;
                    case CameraShot_FieldIndex.MaxTime:
                        return MaxTime;
                    case CameraShot_FieldIndex.MinTime:
                        return MinTime;
                    case CameraShot_FieldIndex.TargetPercentBetweenActors:
                        return TargetPercentBetweenActors;
                    case CameraShot_FieldIndex.NearTargetDistance:
                        return NearTargetDistance;
                    case CameraShot_FieldIndex.ImageSpaceModifier:
                        return ImageSpaceModifier;
                    case CameraShot_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                CameraShot_FieldIndex enu = (CameraShot_FieldIndex)index;
                switch (enu)
                {
                    case CameraShot_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case CameraShot_FieldIndex.Action:
                        this.Action = ex;
                        break;
                    case CameraShot_FieldIndex.Location:
                        this.Location = ex;
                        break;
                    case CameraShot_FieldIndex.Target:
                        this.Target = ex;
                        break;
                    case CameraShot_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case CameraShot_FieldIndex.TimeMultiplierPlayer:
                        this.TimeMultiplierPlayer = ex;
                        break;
                    case CameraShot_FieldIndex.TimeMultiplierTarget:
                        this.TimeMultiplierTarget = ex;
                        break;
                    case CameraShot_FieldIndex.TimeMultiplierGlobal:
                        this.TimeMultiplierGlobal = ex;
                        break;
                    case CameraShot_FieldIndex.MaxTime:
                        this.MaxTime = ex;
                        break;
                    case CameraShot_FieldIndex.MinTime:
                        this.MinTime = ex;
                        break;
                    case CameraShot_FieldIndex.TargetPercentBetweenActors:
                        this.TargetPercentBetweenActors = ex;
                        break;
                    case CameraShot_FieldIndex.NearTargetDistance:
                        this.NearTargetDistance = ex;
                        break;
                    case CameraShot_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = ex;
                        break;
                    case CameraShot_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                CameraShot_FieldIndex enu = (CameraShot_FieldIndex)index;
                switch (enu)
                {
                    case CameraShot_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case CameraShot_FieldIndex.Action:
                        this.Action = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.Location:
                        this.Location = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.Target:
                        this.Target = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.TimeMultiplierPlayer:
                        this.TimeMultiplierPlayer = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.TimeMultiplierTarget:
                        this.TimeMultiplierTarget = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.TimeMultiplierGlobal:
                        this.TimeMultiplierGlobal = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.MaxTime:
                        this.MaxTime = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.MinTime:
                        this.MinTime = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.TargetPercentBetweenActors:
                        this.TargetPercentBetweenActors = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.NearTargetDistance:
                        this.NearTargetDistance = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = (Exception?)obj;
                        break;
                    case CameraShot_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Model != null) return true;
                if (Action != null) return true;
                if (Location != null) return true;
                if (Target != null) return true;
                if (Flags != null) return true;
                if (TimeMultiplierPlayer != null) return true;
                if (TimeMultiplierTarget != null) return true;
                if (TimeMultiplierGlobal != null) return true;
                if (MaxTime != null) return true;
                if (MinTime != null) return true;
                if (TargetPercentBetweenActors != null) return true;
                if (NearTargetDistance != null) return true;
                if (ImageSpaceModifier != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Model?.ToString(fg);
                fg.AppendItem(Action, "Action");
                fg.AppendItem(Location, "Location");
                fg.AppendItem(Target, "Target");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(TimeMultiplierPlayer, "TimeMultiplierPlayer");
                fg.AppendItem(TimeMultiplierTarget, "TimeMultiplierTarget");
                fg.AppendItem(TimeMultiplierGlobal, "TimeMultiplierGlobal");
                fg.AppendItem(MaxTime, "MaxTime");
                fg.AppendItem(MinTime, "MinTime");
                fg.AppendItem(TargetPercentBetweenActors, "TargetPercentBetweenActors");
                fg.AppendItem(NearTargetDistance, "NearTargetDistance");
                fg.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Action = this.Action.Combine(rhs.Action);
                ret.Location = this.Location.Combine(rhs.Location);
                ret.Target = this.Target.Combine(rhs.Target);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.TimeMultiplierPlayer = this.TimeMultiplierPlayer.Combine(rhs.TimeMultiplierPlayer);
                ret.TimeMultiplierTarget = this.TimeMultiplierTarget.Combine(rhs.TimeMultiplierTarget);
                ret.TimeMultiplierGlobal = this.TimeMultiplierGlobal.Combine(rhs.TimeMultiplierGlobal);
                ret.MaxTime = this.MaxTime.Combine(rhs.MaxTime);
                ret.MinTime = this.MinTime.Combine(rhs.MinTime);
                ret.TargetPercentBetweenActors = this.TargetPercentBetweenActors.Combine(rhs.TargetPercentBetweenActors);
                ret.NearTargetDistance = this.NearTargetDistance.Combine(rhs.NearTargetDistance);
                ret.ImageSpaceModifier = this.ImageSpaceModifier.Combine(rhs.ImageSpaceModifier);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public Model.TranslationMask? Model;
            public bool Action;
            public bool Location;
            public bool Target;
            public bool Flags;
            public bool TimeMultiplierPlayer;
            public bool TimeMultiplierTarget;
            public bool TimeMultiplierGlobal;
            public bool MaxTime;
            public bool MinTime;
            public bool TargetPercentBetweenActors;
            public bool NearTargetDistance;
            public bool ImageSpaceModifier;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Action = defaultOn;
                this.Location = defaultOn;
                this.Target = defaultOn;
                this.Flags = defaultOn;
                this.TimeMultiplierPlayer = defaultOn;
                this.TimeMultiplierTarget = defaultOn;
                this.TimeMultiplierGlobal = defaultOn;
                this.MaxTime = defaultOn;
                this.MinTime = defaultOn;
                this.TargetPercentBetweenActors = defaultOn;
                this.NearTargetDistance = defaultOn;
                this.ImageSpaceModifier = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Action, null));
                ret.Add((Location, null));
                ret.Add((Target, null));
                ret.Add((Flags, null));
                ret.Add((TimeMultiplierPlayer, null));
                ret.Add((TimeMultiplierTarget, null));
                ret.Add((TimeMultiplierGlobal, null));
                ret.Add((MaxTime, null));
                ret.Add((MinTime, null));
                ret.Add((TargetPercentBetweenActors, null));
                ret.Add((NearTargetDistance, null));
                ret.Add((ImageSpaceModifier, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CameraShot_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => CameraShotCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CameraShotSetterCommon.Instance.RemapLinks(this, mapping);
        public CameraShot(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private CameraShot(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal CameraShot(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public CameraShot(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public CameraShot(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CameraShotBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CameraShotBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static CameraShot CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CameraShot();
            ((CameraShotSetterCommon)((ICameraShotGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CameraShot item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((CameraShotSetterCommon)((ICameraShotGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new CameraShot GetNew()
        {
            return new CameraShot();
        }

    }
    #endregion

    #region Interface
    public partial interface ICameraShot :
        ICameraShotGetter,
        IFallout4MajorRecord,
        IModeled,
        ILoquiObjectSetter<ICameraShotInternal>,
        IFormLinkContainer
    {
        new Model? Model { get; set; }
        new CameraShot.ActionType Action { get; set; }
        new CameraShot.LocationType Location { get; set; }
        new CameraShot.TargetType Target { get; set; }
        new CameraShot.Flag Flags { get; set; }
        new Single TimeMultiplierPlayer { get; set; }
        new Single TimeMultiplierTarget { get; set; }
        new Single TimeMultiplierGlobal { get; set; }
        new Single MaxTime { get; set; }
        new Single MinTime { get; set; }
        new Single TargetPercentBetweenActors { get; set; }
        new Single NearTargetDistance { get; set; }
        new FormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier { get; set; }
        new CameraShot.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface ICameraShotInternal :
        IFallout4MajorRecordInternal,
        ICameraShot,
        ICameraShotGetter
    {
    }

    public partial interface ICameraShotGetter :
        IFallout4MajorRecordGetter,
        IModeledGetter,
        ILoquiObject<ICameraShotGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => CameraShot_Registration.Instance;
        IModelGetter? Model { get; }
        CameraShot.ActionType Action { get; }
        CameraShot.LocationType Location { get; }
        CameraShot.TargetType Target { get; }
        CameraShot.Flag Flags { get; }
        Single TimeMultiplierPlayer { get; }
        Single TimeMultiplierTarget { get; }
        Single TimeMultiplierGlobal { get; }
        Single MaxTime { get; }
        Single MinTime { get; }
        Single TargetPercentBetweenActors { get; }
        Single NearTargetDistance { get; }
        FormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier { get; }
        CameraShot.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CameraShotMixIn
    {
        public static void Clear(this ICameraShotInternal item)
        {
            ((CameraShotSetterCommon)((ICameraShotGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CameraShot.Mask<bool> GetEqualsMask(
            this ICameraShotGetter item,
            ICameraShotGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CameraShotCommon)((ICameraShotGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICameraShotGetter item,
            string? name = null,
            CameraShot.Mask<bool>? printMask = null)
        {
            return ((CameraShotCommon)((ICameraShotGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICameraShotGetter item,
            FileGeneration fg,
            string? name = null,
            CameraShot.Mask<bool>? printMask = null)
        {
            ((CameraShotCommon)((ICameraShotGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICameraShotGetter item,
            ICameraShotGetter rhs)
        {
            return ((CameraShotCommon)((ICameraShotGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICameraShotInternal lhs,
            ICameraShotGetter rhs,
            out CameraShot.ErrorMask errorMask,
            CameraShot.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CameraShotSetterTranslationCommon)((ICameraShotGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CameraShot.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICameraShotInternal lhs,
            ICameraShotGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CameraShotSetterTranslationCommon)((ICameraShotGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CameraShot DeepCopy(
            this ICameraShotGetter item,
            CameraShot.TranslationMask? copyMask = null)
        {
            return ((CameraShotSetterTranslationCommon)((ICameraShotGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CameraShot DeepCopy(
            this ICameraShotGetter item,
            out CameraShot.ErrorMask errorMask,
            CameraShot.TranslationMask? copyMask = null)
        {
            return ((CameraShotSetterTranslationCommon)((ICameraShotGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CameraShot DeepCopy(
            this ICameraShotGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CameraShotSetterTranslationCommon)((ICameraShotGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static CameraShot Duplicate(
            this ICameraShotGetter item,
            FormKey formKey,
            CameraShot.TranslationMask? copyMask = null)
        {
            return ((CameraShotCommon)((ICameraShotGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICameraShotInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CameraShotSetterCommon)((ICameraShotGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum CameraShot_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Model = 6,
        Action = 7,
        Location = 8,
        Target = 9,
        Flags = 10,
        TimeMultiplierPlayer = 11,
        TimeMultiplierTarget = 12,
        TimeMultiplierGlobal = 13,
        MaxTime = 14,
        MinTime = 15,
        TargetPercentBetweenActors = 16,
        NearTargetDistance = 17,
        ImageSpaceModifier = 18,
        DATADataTypeState = 19,
    }
    #endregion

    #region Registration
    public partial class CameraShot_Registration : ILoquiRegistration
    {
        public static readonly CameraShot_Registration Instance = new CameraShot_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 437,
            version: 0);

        public const string GUID = "85db459c-255a-409e-82a0-04a5e602a956";

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(CameraShot.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CameraShot.ErrorMask);

        public static readonly Type ClassType = typeof(CameraShot);

        public static readonly Type GetterType = typeof(ICameraShotGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICameraShot);

        public static readonly Type? InternalSetterType = typeof(ICameraShotInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.CameraShot";

        public const string Name = "CameraShot";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CAMS;
        public static readonly Type BinaryWriteTranslation = typeof(CameraShotBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class CameraShotSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly CameraShotSetterCommon Instance = new CameraShotSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICameraShotInternal item)
        {
            ClearPartial();
            item.Model = null;
            item.Action = default;
            item.Location = default;
            item.Target = default;
            item.Flags = default;
            item.TimeMultiplierPlayer = default;
            item.TimeMultiplierTarget = default;
            item.TimeMultiplierGlobal = default;
            item.MaxTime = default;
            item.MinTime = default;
            item.TargetPercentBetweenActors = default;
            item.NearTargetDistance = default;
            item.ImageSpaceModifier = FormLinkNullable<IImageSpaceAdapterGetter>.Null;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ICameraShotInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICameraShotInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ICameraShot obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Model?.RemapLinks(mapping);
            obj.ImageSpaceModifier = obj.ImageSpaceModifier.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICameraShotInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ICameraShotInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: CameraShotBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CameraShotBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (CameraShot)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (CameraShot)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class CameraShotCommon : Fallout4MajorRecordCommon
    {
        public new static readonly CameraShotCommon Instance = new CameraShotCommon();

        public CameraShot.Mask<bool> GetEqualsMask(
            ICameraShotGetter item,
            ICameraShotGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CameraShot.Mask<bool>(false);
            ((CameraShotCommon)((ICameraShotGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICameraShotGetter item,
            ICameraShotGetter rhs,
            CameraShot.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Action = item.Action == rhs.Action;
            ret.Location = item.Location == rhs.Location;
            ret.Target = item.Target == rhs.Target;
            ret.Flags = item.Flags == rhs.Flags;
            ret.TimeMultiplierPlayer = item.TimeMultiplierPlayer.EqualsWithin(rhs.TimeMultiplierPlayer);
            ret.TimeMultiplierTarget = item.TimeMultiplierTarget.EqualsWithin(rhs.TimeMultiplierTarget);
            ret.TimeMultiplierGlobal = item.TimeMultiplierGlobal.EqualsWithin(rhs.TimeMultiplierGlobal);
            ret.MaxTime = item.MaxTime.EqualsWithin(rhs.MaxTime);
            ret.MinTime = item.MinTime.EqualsWithin(rhs.MinTime);
            ret.TargetPercentBetweenActors = item.TargetPercentBetweenActors.EqualsWithin(rhs.TargetPercentBetweenActors);
            ret.NearTargetDistance = item.NearTargetDistance.EqualsWithin(rhs.NearTargetDistance);
            ret.ImageSpaceModifier = item.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICameraShotGetter item,
            string? name = null,
            CameraShot.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICameraShotGetter item,
            FileGeneration fg,
            string? name = null,
            CameraShot.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CameraShot =>");
            }
            else
            {
                fg.AppendLine($"{name} (CameraShot) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICameraShotGetter item,
            FileGeneration fg,
            CameraShot.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.Action ?? true)
            {
                fg.AppendItem(item.Action, "Action");
            }
            if (printMask?.Location ?? true)
            {
                fg.AppendItem(item.Location, "Location");
            }
            if (printMask?.Target ?? true)
            {
                fg.AppendItem(item.Target, "Target");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.TimeMultiplierPlayer ?? true)
            {
                fg.AppendItem(item.TimeMultiplierPlayer, "TimeMultiplierPlayer");
            }
            if (printMask?.TimeMultiplierTarget ?? true)
            {
                fg.AppendItem(item.TimeMultiplierTarget, "TimeMultiplierTarget");
            }
            if (printMask?.TimeMultiplierGlobal ?? true)
            {
                fg.AppendItem(item.TimeMultiplierGlobal, "TimeMultiplierGlobal");
            }
            if (printMask?.MaxTime ?? true)
            {
                fg.AppendItem(item.MaxTime, "MaxTime");
            }
            if (printMask?.MinTime ?? true)
            {
                fg.AppendItem(item.MinTime, "MinTime");
            }
            if (printMask?.TargetPercentBetweenActors ?? true)
            {
                fg.AppendItem(item.TargetPercentBetweenActors, "TargetPercentBetweenActors");
            }
            if (printMask?.NearTargetDistance ?? true)
            {
                fg.AppendItem(item.NearTargetDistance, "NearTargetDistance");
            }
            if (printMask?.ImageSpaceModifier ?? true)
            {
                fg.AppendItem(item.ImageSpaceModifier.FormKeyNullable, "ImageSpaceModifier");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static CameraShot_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CameraShot_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (CameraShot_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (CameraShot_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (CameraShot_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (CameraShot_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (CameraShot_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new CameraShot_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CameraShot_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (CameraShot_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (CameraShot_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (CameraShot_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICameraShotGetter? lhs,
            ICameraShotGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (lhs.Action != rhs.Action) return false;
            if (lhs.Location != rhs.Location) return false;
            if (lhs.Target != rhs.Target) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.TimeMultiplierPlayer.EqualsWithin(rhs.TimeMultiplierPlayer)) return false;
            if (!lhs.TimeMultiplierTarget.EqualsWithin(rhs.TimeMultiplierTarget)) return false;
            if (!lhs.TimeMultiplierGlobal.EqualsWithin(rhs.TimeMultiplierGlobal)) return false;
            if (!lhs.MaxTime.EqualsWithin(rhs.MaxTime)) return false;
            if (!lhs.MinTime.EqualsWithin(rhs.MinTime)) return false;
            if (!lhs.TargetPercentBetweenActors.EqualsWithin(rhs.TargetPercentBetweenActors)) return false;
            if (!lhs.NearTargetDistance.EqualsWithin(rhs.NearTargetDistance)) return false;
            if (!lhs.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICameraShotGetter?)lhs,
                rhs: rhs as ICameraShotGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICameraShotGetter?)lhs,
                rhs: rhs as ICameraShotGetter);
        }
        
        public virtual int GetHashCode(ICameraShotGetter item)
        {
            var hash = new HashCode();
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Action);
            hash.Add(item.Location);
            hash.Add(item.Target);
            hash.Add(item.Flags);
            hash.Add(item.TimeMultiplierPlayer);
            hash.Add(item.TimeMultiplierTarget);
            hash.Add(item.TimeMultiplierGlobal);
            hash.Add(item.MaxTime);
            hash.Add(item.MinTime);
            hash.Add(item.TargetPercentBetweenActors);
            hash.Add(item.NearTargetDistance);
            hash.Add(item.ImageSpaceModifier);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ICameraShotGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICameraShotGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return CameraShot.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ICameraShotGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ImageSpaceModifier.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ImageSpaceModifier);
            }
            yield break;
        }
        
        #region Duplicate
        public CameraShot Duplicate(
            ICameraShotGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new CameraShot(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICameraShot)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICameraShot)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class CameraShotSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly CameraShotSetterTranslationCommon Instance = new CameraShotSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICameraShotInternal item,
            ICameraShotGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ICameraShot item,
            ICameraShotGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)CameraShot_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)CameraShot_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.Action) ?? true))
            {
                item.Action = rhs.Action;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.Location) ?? true))
            {
                item.Location = rhs.Location;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.Target) ?? true))
            {
                item.Target = rhs.Target;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.TimeMultiplierPlayer) ?? true))
            {
                item.TimeMultiplierPlayer = rhs.TimeMultiplierPlayer;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.TimeMultiplierTarget) ?? true))
            {
                item.TimeMultiplierTarget = rhs.TimeMultiplierTarget;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.TimeMultiplierGlobal) ?? true))
            {
                item.TimeMultiplierGlobal = rhs.TimeMultiplierGlobal;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.MaxTime) ?? true))
            {
                item.MaxTime = rhs.MaxTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.MinTime) ?? true))
            {
                item.MinTime = rhs.MinTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.TargetPercentBetweenActors) ?? true))
            {
                item.TargetPercentBetweenActors = rhs.TargetPercentBetweenActors;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.NearTargetDistance) ?? true))
            {
                item.NearTargetDistance = rhs.NearTargetDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.ImageSpaceModifier) ?? true))
            {
                item.ImageSpaceModifier = new FormLinkNullable<IImageSpaceAdapterGetter>(rhs.ImageSpaceModifier.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)CameraShot_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICameraShotInternal)item,
                rhs: (ICameraShotGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICameraShot)item,
                rhs: (ICameraShotGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICameraShotInternal)item,
                rhs: (ICameraShotGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICameraShot)item,
                rhs: (ICameraShotGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public CameraShot DeepCopy(
            ICameraShotGetter item,
            CameraShot.TranslationMask? copyMask = null)
        {
            CameraShot ret = (CameraShot)((CameraShotCommon)((ICameraShotGetter)item).CommonInstance()!).GetNew();
            ((CameraShotSetterTranslationCommon)((ICameraShotGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CameraShot DeepCopy(
            ICameraShotGetter item,
            out CameraShot.ErrorMask errorMask,
            CameraShot.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CameraShot ret = (CameraShot)((CameraShotCommon)((ICameraShotGetter)item).CommonInstance()!).GetNew();
            ((CameraShotSetterTranslationCommon)((ICameraShotGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CameraShot.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CameraShot DeepCopy(
            ICameraShotGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CameraShot ret = (CameraShot)((CameraShotCommon)((ICameraShotGetter)item).CommonInstance()!).GetNew();
            ((CameraShotSetterTranslationCommon)((ICameraShotGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class CameraShot
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CameraShot_Registration.Instance;
        public new static CameraShot_Registration Registration => CameraShot_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CameraShotCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CameraShotSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CameraShotSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CameraShotBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CameraShotBinaryWriteTranslation Instance = new CameraShotBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICameraShotGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ICameraShotGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<CameraShot.ActionType>.Instance.Write(
                    writer,
                    item.Action,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<CameraShot.LocationType>.Instance.Write(
                    writer,
                    item.Location,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<CameraShot.TargetType>.Instance.Write(
                    writer,
                    item.Target,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<CameraShot.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TimeMultiplierPlayer);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TimeMultiplierTarget);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TimeMultiplierGlobal);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MaxTime);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MinTime);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TargetPercentBetweenActors);
                if (!item.DATADataTypeState.HasFlag(CameraShot.DATADataType.Break0))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.NearTargetDistance);
                }
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImageSpaceModifier,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MNAM));
        }

        public void Write(
            MutagenWriter writer,
            ICameraShotGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.CAMS),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICameraShotGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICameraShotGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICameraShotGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CameraShotBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static CameraShotBinaryCreateTranslation Instance = new CameraShotBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CAMS;
        public static void FillBinaryStructs(
            ICameraShotInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ICameraShotInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)CameraShot_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Action = EnumBinaryTranslation<CameraShot.ActionType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Location = EnumBinaryTranslation<CameraShot.LocationType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Target = EnumBinaryTranslation<CameraShot.TargetType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Flags = EnumBinaryTranslation<CameraShot.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.TimeMultiplierPlayer = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.TimeMultiplierTarget = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.TimeMultiplierGlobal = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.MaxTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.MinTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.TargetPercentBetweenActors = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= CameraShot.DATADataType.Break0;
                        return (int)CameraShot_FieldIndex.TargetPercentBetweenActors;
                    }
                    item.NearTargetDistance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)CameraShot_FieldIndex.NearTargetDistance;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImageSpaceModifier = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)CameraShot_FieldIndex.ImageSpaceModifier;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class CameraShotBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class CameraShotBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ICameraShotGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CameraShot_Registration.Instance;
        public new static CameraShot_Registration Registration => CameraShot_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CameraShotCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CameraShotSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => CameraShotCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CameraShotBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CameraShotBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public IModelGetter? Model { get; private set; }
        private int? _DATALocation;
        public CameraShot.DATADataType DATADataTypeState { get; private set; }
        #region Action
        private int _ActionLocation => _DATALocation!.Value;
        private bool _Action_IsSet => _DATALocation.HasValue;
        public CameraShot.ActionType Action => _Action_IsSet ? (CameraShot.ActionType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ActionLocation, 0x4)) : default;
        #endregion
        #region Location
        private int _LocationLocation => _DATALocation!.Value + 0x4;
        private bool _Location_IsSet => _DATALocation.HasValue;
        public CameraShot.LocationType Location => _Location_IsSet ? (CameraShot.LocationType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_LocationLocation, 0x4)) : default;
        #endregion
        #region Target
        private int _TargetLocation => _DATALocation!.Value + 0x8;
        private bool _Target_IsSet => _DATALocation.HasValue;
        public CameraShot.TargetType Target => _Target_IsSet ? (CameraShot.TargetType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TargetLocation, 0x4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0xC;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public CameraShot.Flag Flags => _Flags_IsSet ? (CameraShot.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region TimeMultiplierPlayer
        private int _TimeMultiplierPlayerLocation => _DATALocation!.Value + 0x10;
        private bool _TimeMultiplierPlayer_IsSet => _DATALocation.HasValue;
        public Single TimeMultiplierPlayer => _TimeMultiplierPlayer_IsSet ? _data.Slice(_TimeMultiplierPlayerLocation, 4).Float() : default;
        #endregion
        #region TimeMultiplierTarget
        private int _TimeMultiplierTargetLocation => _DATALocation!.Value + 0x14;
        private bool _TimeMultiplierTarget_IsSet => _DATALocation.HasValue;
        public Single TimeMultiplierTarget => _TimeMultiplierTarget_IsSet ? _data.Slice(_TimeMultiplierTargetLocation, 4).Float() : default;
        #endregion
        #region TimeMultiplierGlobal
        private int _TimeMultiplierGlobalLocation => _DATALocation!.Value + 0x18;
        private bool _TimeMultiplierGlobal_IsSet => _DATALocation.HasValue;
        public Single TimeMultiplierGlobal => _TimeMultiplierGlobal_IsSet ? _data.Slice(_TimeMultiplierGlobalLocation, 4).Float() : default;
        #endregion
        #region MaxTime
        private int _MaxTimeLocation => _DATALocation!.Value + 0x1C;
        private bool _MaxTime_IsSet => _DATALocation.HasValue;
        public Single MaxTime => _MaxTime_IsSet ? _data.Slice(_MaxTimeLocation, 4).Float() : default;
        #endregion
        #region MinTime
        private int _MinTimeLocation => _DATALocation!.Value + 0x20;
        private bool _MinTime_IsSet => _DATALocation.HasValue;
        public Single MinTime => _MinTime_IsSet ? _data.Slice(_MinTimeLocation, 4).Float() : default;
        #endregion
        #region TargetPercentBetweenActors
        private int _TargetPercentBetweenActorsLocation => _DATALocation!.Value + 0x24;
        private bool _TargetPercentBetweenActors_IsSet => _DATALocation.HasValue;
        public Single TargetPercentBetweenActors => _TargetPercentBetweenActors_IsSet ? _data.Slice(_TargetPercentBetweenActorsLocation, 4).Float() : default;
        #endregion
        #region NearTargetDistance
        private int _NearTargetDistanceLocation => _DATALocation!.Value + 0x28;
        private bool _NearTargetDistance_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(CameraShot.DATADataType.Break0);
        public Single NearTargetDistance => _NearTargetDistance_IsSet ? _data.Slice(_NearTargetDistanceLocation, 4).Float() : default;
        #endregion
        #region ImageSpaceModifier
        private int? _ImageSpaceModifierLocation;
        public FormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier => _ImageSpaceModifierLocation.HasValue ? new FormLinkNullable<IImageSpaceAdapterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ImageSpaceModifierLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IImageSpaceAdapterGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CameraShotBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static CameraShotBinaryOverlay CameraShotFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new CameraShotBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static CameraShotBinaryOverlay CameraShotFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CameraShotFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)CameraShot_FieldIndex.Model;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x28)
                    {
                        this.DATADataTypeState |= CameraShot.DATADataType.Break0;
                    }
                    return (int)CameraShot_FieldIndex.NearTargetDistance;
                }
                case RecordTypeInts.MNAM:
                {
                    _ImageSpaceModifierLocation = (stream.Position - offset);
                    return (int)CameraShot_FieldIndex.ImageSpaceModifier;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CameraShotMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICameraShotGetter rhs)) return false;
            return ((CameraShotCommon)((ICameraShotGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ICameraShotGetter? obj)
        {
            return ((CameraShotCommon)((ICameraShotGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CameraShotCommon)((ICameraShotGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

