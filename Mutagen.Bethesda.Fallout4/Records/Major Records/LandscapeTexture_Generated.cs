/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class LandscapeTexture :
        Fallout4MajorRecord,
        ILandscapeTextureInternal,
        ILoquiObjectSetter<LandscapeTexture>,
        IEquatable<ILandscapeTextureGetter>
    {
        #region Ctor
        protected LandscapeTexture()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TextureSet
        public FormLinkNullable<ITextureSetGetter> TextureSet { get; set; } = new FormLinkNullable<ITextureSetGetter>();
        #endregion
        #region MaterialType
        public FormLink<IMaterialTypeGetter> MaterialType { get; set; } = new FormLink<IMaterialTypeGetter>();
        #endregion
        #region HavokFriction
        public Byte HavokFriction { get; set; } = default;
        #endregion
        #region HavokRestitution
        public Byte HavokRestitution { get; set; } = default;
        #endregion
        #region TextureSpecularExponent
        public Byte TextureSpecularExponent { get; set; } = default;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IGrassGetter>> _Grasses = new ExtendedList<IFormLink<IGrassGetter>>();
        public ExtendedList<IFormLink<IGrassGetter>> Grasses
        {
            get => this._Grasses;
            protected set => this._Grasses = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IGrassGetter>> ILandscapeTextureGetter.Grasses => _Grasses;
        #endregion

        #endregion
        #region Flags
        public LandscapeTexture.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        LandscapeTexture.Flag? ILandscapeTextureGetter.Flags => this.Flags;
        #endregion
        #region HNAMDataTypeState
        public LandscapeTexture.HNAMDataType HNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LandscapeTextureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILandscapeTextureGetter rhs)) return false;
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILandscapeTextureGetter? obj)
        {
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LandscapeTextureCommon)((ILandscapeTextureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.TextureSet = initialValue;
                this.MaterialType = initialValue;
                this.HavokFriction = initialValue;
                this.HavokRestitution = initialValue;
                this.TextureSpecularExponent = initialValue;
                this.Grasses = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = initialValue;
                this.HNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem TextureSet,
                TItem MaterialType,
                TItem HavokFriction,
                TItem HavokRestitution,
                TItem TextureSpecularExponent,
                TItem Grasses,
                TItem Flags,
                TItem HNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.TextureSet = TextureSet;
                this.MaterialType = MaterialType;
                this.HavokFriction = HavokFriction;
                this.HavokRestitution = HavokRestitution;
                this.TextureSpecularExponent = TextureSpecularExponent;
                this.Grasses = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Grasses, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = Flags;
                this.HNAMDataTypeState = HNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem TextureSet;
            public TItem MaterialType;
            public TItem HavokFriction;
            public TItem HavokRestitution;
            public TItem TextureSpecularExponent;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Grasses;
            public TItem Flags;
            public TItem HNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.TextureSet, rhs.TextureSet)) return false;
                if (!object.Equals(this.MaterialType, rhs.MaterialType)) return false;
                if (!object.Equals(this.HavokFriction, rhs.HavokFriction)) return false;
                if (!object.Equals(this.HavokRestitution, rhs.HavokRestitution)) return false;
                if (!object.Equals(this.TextureSpecularExponent, rhs.TextureSpecularExponent)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.HNAMDataTypeState, rhs.HNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.TextureSet);
                hash.Add(this.MaterialType);
                hash.Add(this.HavokFriction);
                hash.Add(this.HavokRestitution);
                hash.Add(this.TextureSpecularExponent);
                hash.Add(this.Grasses);
                hash.Add(this.Flags);
                hash.Add(this.HNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.TextureSet)) return false;
                if (!eval(this.MaterialType)) return false;
                if (!eval(this.HavokFriction)) return false;
                if (!eval(this.HavokRestitution)) return false;
                if (!eval(this.TextureSpecularExponent)) return false;
                if (this.Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null)
                    {
                        foreach (var item in this.Grasses.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.HNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.TextureSet)) return true;
                if (eval(this.MaterialType)) return true;
                if (eval(this.HavokFriction)) return true;
                if (eval(this.HavokRestitution)) return true;
                if (eval(this.TextureSpecularExponent)) return true;
                if (this.Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null)
                    {
                        foreach (var item in this.Grasses.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.HNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LandscapeTexture.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.TextureSet = eval(this.TextureSet);
                obj.MaterialType = eval(this.MaterialType);
                obj.HavokFriction = eval(this.HavokFriction);
                obj.HavokRestitution = eval(this.HavokRestitution);
                obj.TextureSpecularExponent = eval(this.TextureSpecularExponent);
                if (Grasses != null)
                {
                    obj.Grasses = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Grasses.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Grasses.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Grasses.Specific = l;
                        foreach (var item in Grasses.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.HNAMDataTypeState = eval(this.HNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LandscapeTexture.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LandscapeTexture.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LandscapeTexture.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.TextureSet ?? true)
                    {
                        fg.AppendItem(TextureSet, "TextureSet");
                    }
                    if (printMask?.MaterialType ?? true)
                    {
                        fg.AppendItem(MaterialType, "MaterialType");
                    }
                    if (printMask?.HavokFriction ?? true)
                    {
                        fg.AppendItem(HavokFriction, "HavokFriction");
                    }
                    if (printMask?.HavokRestitution ?? true)
                    {
                        fg.AppendItem(HavokRestitution, "HavokRestitution");
                    }
                    if (printMask?.TextureSpecularExponent ?? true)
                    {
                        fg.AppendItem(TextureSpecularExponent, "TextureSpecularExponent");
                    }
                    if ((printMask?.Grasses?.Overall ?? true)
                        && Grasses.TryGet(out var GrassesItem))
                    {
                        fg.AppendLine("Grasses =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(GrassesItem.Overall);
                            if (GrassesItem.Specific != null)
                            {
                                foreach (var subItem in GrassesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.HNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(HNAMDataTypeState, "HNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? TextureSet;
            public Exception? MaterialType;
            public Exception? HavokFriction;
            public Exception? HavokRestitution;
            public Exception? TextureSpecularExponent;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Grasses;
            public Exception? Flags;
            public Exception? HNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandscapeTexture_FieldIndex.TextureSet:
                        return TextureSet;
                    case LandscapeTexture_FieldIndex.MaterialType:
                        return MaterialType;
                    case LandscapeTexture_FieldIndex.HavokFriction:
                        return HavokFriction;
                    case LandscapeTexture_FieldIndex.HavokRestitution:
                        return HavokRestitution;
                    case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                        return TextureSpecularExponent;
                    case LandscapeTexture_FieldIndex.Grasses:
                        return Grasses;
                    case LandscapeTexture_FieldIndex.Flags:
                        return Flags;
                    case LandscapeTexture_FieldIndex.HNAMDataTypeState:
                        return HNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandscapeTexture_FieldIndex.TextureSet:
                        this.TextureSet = ex;
                        break;
                    case LandscapeTexture_FieldIndex.MaterialType:
                        this.MaterialType = ex;
                        break;
                    case LandscapeTexture_FieldIndex.HavokFriction:
                        this.HavokFriction = ex;
                        break;
                    case LandscapeTexture_FieldIndex.HavokRestitution:
                        this.HavokRestitution = ex;
                        break;
                    case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                        this.TextureSpecularExponent = ex;
                        break;
                    case LandscapeTexture_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case LandscapeTexture_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case LandscapeTexture_FieldIndex.HNAMDataTypeState:
                        this.HNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandscapeTexture_FieldIndex.TextureSet:
                        this.TextureSet = (Exception?)obj;
                        break;
                    case LandscapeTexture_FieldIndex.MaterialType:
                        this.MaterialType = (Exception?)obj;
                        break;
                    case LandscapeTexture_FieldIndex.HavokFriction:
                        this.HavokFriction = (Exception?)obj;
                        break;
                    case LandscapeTexture_FieldIndex.HavokRestitution:
                        this.HavokRestitution = (Exception?)obj;
                        break;
                    case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                        this.TextureSpecularExponent = (Exception?)obj;
                        break;
                    case LandscapeTexture_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case LandscapeTexture_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case LandscapeTexture_FieldIndex.HNAMDataTypeState:
                        this.HNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (TextureSet != null) return true;
                if (MaterialType != null) return true;
                if (HavokFriction != null) return true;
                if (HavokRestitution != null) return true;
                if (TextureSpecularExponent != null) return true;
                if (Grasses != null) return true;
                if (Flags != null) return true;
                if (HNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(TextureSet, "TextureSet");
                fg.AppendItem(MaterialType, "MaterialType");
                fg.AppendItem(HavokFriction, "HavokFriction");
                fg.AppendItem(HavokRestitution, "HavokRestitution");
                fg.AppendItem(TextureSpecularExponent, "TextureSpecularExponent");
                if (Grasses.TryGet(out var GrassesItem))
                {
                    fg.AppendLine("Grasses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(GrassesItem.Overall);
                        if (GrassesItem.Specific != null)
                        {
                            foreach (var subItem in GrassesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(HNAMDataTypeState, "HNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.TextureSet = this.TextureSet.Combine(rhs.TextureSet);
                ret.MaterialType = this.MaterialType.Combine(rhs.MaterialType);
                ret.HavokFriction = this.HavokFriction.Combine(rhs.HavokFriction);
                ret.HavokRestitution = this.HavokRestitution.Combine(rhs.HavokRestitution);
                ret.TextureSpecularExponent = this.TextureSpecularExponent.Combine(rhs.TextureSpecularExponent);
                ret.Grasses = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Grasses?.Overall, rhs.Grasses?.Overall), ExceptionExt.Combine(this.Grasses?.Specific, rhs.Grasses?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.HNAMDataTypeState = this.HNAMDataTypeState.Combine(rhs.HNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool TextureSet;
            public bool MaterialType;
            public bool HavokFriction;
            public bool HavokRestitution;
            public bool TextureSpecularExponent;
            public bool Grasses;
            public bool Flags;
            public bool HNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.TextureSet = defaultOn;
                this.MaterialType = defaultOn;
                this.HavokFriction = defaultOn;
                this.HavokRestitution = defaultOn;
                this.TextureSpecularExponent = defaultOn;
                this.Grasses = defaultOn;
                this.Flags = defaultOn;
                this.HNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((TextureSet, null));
                ret.Add((MaterialType, null));
                ret.Add((HavokFriction, null));
                ret.Add((HavokRestitution, null));
                ret.Add((TextureSpecularExponent, null));
                ret.Add((Grasses, null));
                ret.Add((Flags, null));
                ret.Add((HNAMDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = LandscapeTexture_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => LandscapeTextureCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LandscapeTextureSetterCommon.Instance.RemapLinks(this, mapping);
        public LandscapeTexture(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private LandscapeTexture(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal LandscapeTexture(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public LandscapeTexture(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public LandscapeTexture(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum HNAMDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandscapeTextureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandscapeTextureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static LandscapeTexture CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LandscapeTexture();
            ((LandscapeTextureSetterCommon)((ILandscapeTextureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LandscapeTexture item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LandscapeTextureSetterCommon)((ILandscapeTextureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LandscapeTexture GetNew()
        {
            return new LandscapeTexture();
        }

    }
    #endregion

    #region Interface
    public partial interface ILandscapeTexture :
        ILandscapeTextureGetter,
        IFallout4MajorRecord,
        IRegionTarget,
        ILoquiObjectSetter<ILandscapeTextureInternal>,
        IFormLinkContainer
    {
        new FormLinkNullable<ITextureSetGetter> TextureSet { get; set; }
        new FormLink<IMaterialTypeGetter> MaterialType { get; set; }
        new Byte HavokFriction { get; set; }
        new Byte HavokRestitution { get; set; }
        new Byte TextureSpecularExponent { get; set; }
        new ExtendedList<IFormLink<IGrassGetter>> Grasses { get; }
        new LandscapeTexture.Flag? Flags { get; set; }
        new LandscapeTexture.HNAMDataType HNAMDataTypeState { get; set; }
    }

    public partial interface ILandscapeTextureInternal :
        IFallout4MajorRecordInternal,
        ILandscapeTexture,
        ILandscapeTextureGetter
    {
    }

    public partial interface ILandscapeTextureGetter :
        IFallout4MajorRecordGetter,
        IRegionTargetGetter,
        ILoquiObject<ILandscapeTextureGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => LandscapeTexture_Registration.Instance;
        FormLinkNullable<ITextureSetGetter> TextureSet { get; }
        FormLink<IMaterialTypeGetter> MaterialType { get; }
        Byte HavokFriction { get; }
        Byte HavokRestitution { get; }
        Byte TextureSpecularExponent { get; }
        IReadOnlyList<IFormLink<IGrassGetter>> Grasses { get; }
        LandscapeTexture.Flag? Flags { get; }
        LandscapeTexture.HNAMDataType HNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LandscapeTextureMixIn
    {
        public static void Clear(this ILandscapeTextureInternal item)
        {
            ((LandscapeTextureSetterCommon)((ILandscapeTextureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LandscapeTexture.Mask<bool> GetEqualsMask(
            this ILandscapeTextureGetter item,
            ILandscapeTextureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILandscapeTextureGetter item,
            string? name = null,
            LandscapeTexture.Mask<bool>? printMask = null)
        {
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILandscapeTextureGetter item,
            FileGeneration fg,
            string? name = null,
            LandscapeTexture.Mask<bool>? printMask = null)
        {
            ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILandscapeTextureGetter item,
            ILandscapeTextureGetter rhs)
        {
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILandscapeTextureInternal lhs,
            ILandscapeTextureGetter rhs,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LandscapeTexture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILandscapeTextureInternal lhs,
            ILandscapeTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LandscapeTexture DeepCopy(
            this ILandscapeTextureGetter item,
            LandscapeTexture.TranslationMask? copyMask = null)
        {
            return ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LandscapeTexture DeepCopy(
            this ILandscapeTextureGetter item,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? copyMask = null)
        {
            return ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LandscapeTexture DeepCopy(
            this ILandscapeTextureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static LandscapeTexture Duplicate(
            this ILandscapeTextureGetter item,
            FormKey formKey,
            LandscapeTexture.TranslationMask? copyMask = null)
        {
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILandscapeTextureInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandscapeTextureSetterCommon)((ILandscapeTextureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum LandscapeTexture_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        TextureSet = 6,
        MaterialType = 7,
        HavokFriction = 8,
        HavokRestitution = 9,
        TextureSpecularExponent = 10,
        Grasses = 11,
        Flags = 12,
        HNAMDataTypeState = 13,
    }
    #endregion

    #region Registration
    public partial class LandscapeTexture_Registration : ILoquiRegistration
    {
        public static readonly LandscapeTexture_Registration Instance = new LandscapeTexture_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 130,
            version: 0);

        public const string GUID = "f6e8d6f6-773c-4c3b-b09b-d892c0114ed7";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(LandscapeTexture.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LandscapeTexture.ErrorMask);

        public static readonly Type ClassType = typeof(LandscapeTexture);

        public static readonly Type GetterType = typeof(ILandscapeTextureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILandscapeTexture);

        public static readonly Type? InternalSetterType = typeof(ILandscapeTextureInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.LandscapeTexture";

        public const string Name = "LandscapeTexture";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LTEX;
        public static readonly Type BinaryWriteTranslation = typeof(LandscapeTextureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class LandscapeTextureSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly LandscapeTextureSetterCommon Instance = new LandscapeTextureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILandscapeTextureInternal item)
        {
            ClearPartial();
            item.TextureSet = FormLinkNullable<ITextureSetGetter>.Null;
            item.MaterialType = FormLink<IMaterialTypeGetter>.Null;
            item.HavokFriction = default;
            item.HavokRestitution = default;
            item.TextureSpecularExponent = default;
            item.Grasses.Clear();
            item.Flags = default;
            item.HNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ILandscapeTextureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILandscapeTextureInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILandscapeTexture obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.TextureSet = obj.TextureSet.Relink(mapping);
            obj.MaterialType = obj.MaterialType.Relink(mapping);
            obj.Grasses.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILandscapeTextureInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ILandscapeTextureInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LandscapeTextureBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LandscapeTextureBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (LandscapeTexture)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (LandscapeTexture)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class LandscapeTextureCommon : Fallout4MajorRecordCommon
    {
        public new static readonly LandscapeTextureCommon Instance = new LandscapeTextureCommon();

        public LandscapeTexture.Mask<bool> GetEqualsMask(
            ILandscapeTextureGetter item,
            ILandscapeTextureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LandscapeTexture.Mask<bool>(false);
            ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILandscapeTextureGetter item,
            ILandscapeTextureGetter rhs,
            LandscapeTexture.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.TextureSet = item.TextureSet.Equals(rhs.TextureSet);
            ret.MaterialType = item.MaterialType.Equals(rhs.MaterialType);
            ret.HavokFriction = item.HavokFriction == rhs.HavokFriction;
            ret.HavokRestitution = item.HavokRestitution == rhs.HavokRestitution;
            ret.TextureSpecularExponent = item.TextureSpecularExponent == rhs.TextureSpecularExponent;
            ret.Grasses = item.Grasses.CollectionEqualsHelper(
                rhs.Grasses,
                (l, r) => object.Equals(l, r),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.HNAMDataTypeState = item.HNAMDataTypeState == rhs.HNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILandscapeTextureGetter item,
            string? name = null,
            LandscapeTexture.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILandscapeTextureGetter item,
            FileGeneration fg,
            string? name = null,
            LandscapeTexture.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LandscapeTexture =>");
            }
            else
            {
                fg.AppendLine($"{name} (LandscapeTexture) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILandscapeTextureGetter item,
            FileGeneration fg,
            LandscapeTexture.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.TextureSet ?? true)
            {
                fg.AppendItem(item.TextureSet.FormKeyNullable, "TextureSet");
            }
            if (printMask?.MaterialType ?? true)
            {
                fg.AppendItem(item.MaterialType.FormKey, "MaterialType");
            }
            if (printMask?.HavokFriction ?? true)
            {
                fg.AppendItem(item.HavokFriction, "HavokFriction");
            }
            if (printMask?.HavokRestitution ?? true)
            {
                fg.AppendItem(item.HavokRestitution, "HavokRestitution");
            }
            if (printMask?.TextureSpecularExponent ?? true)
            {
                fg.AppendItem(item.TextureSpecularExponent, "TextureSpecularExponent");
            }
            if (printMask?.Grasses?.Overall ?? true)
            {
                fg.AppendLine("Grasses =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Grasses)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.HNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.HNAMDataTypeState, "HNAMDataTypeState");
            }
        }
        
        public static LandscapeTexture_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (LandscapeTexture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LandscapeTexture_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LandscapeTexture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILandscapeTextureGetter? lhs,
            ILandscapeTextureGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!lhs.TextureSet.Equals(rhs.TextureSet)) return false;
            if (!lhs.MaterialType.Equals(rhs.MaterialType)) return false;
            if (lhs.HavokFriction != rhs.HavokFriction) return false;
            if (lhs.HavokRestitution != rhs.HavokRestitution) return false;
            if (lhs.TextureSpecularExponent != rhs.TextureSpecularExponent) return false;
            if (!lhs.Grasses.SequenceEqualNullable(rhs.Grasses)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.HNAMDataTypeState != rhs.HNAMDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILandscapeTextureGetter?)lhs,
                rhs: rhs as ILandscapeTextureGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILandscapeTextureGetter?)lhs,
                rhs: rhs as ILandscapeTextureGetter);
        }
        
        public virtual int GetHashCode(ILandscapeTextureGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.TextureSet);
            hash.Add(item.MaterialType);
            hash.Add(item.HavokFriction);
            hash.Add(item.HavokRestitution);
            hash.Add(item.TextureSpecularExponent);
            hash.Add(item.Grasses);
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.HNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ILandscapeTextureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandscapeTextureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LandscapeTexture.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ILandscapeTextureGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.TextureSet.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.TextureSet);
            }
            yield return FormLinkInformation.Factory(obj.MaterialType);
            foreach (var item in obj.Grasses)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public LandscapeTexture Duplicate(
            ILandscapeTextureGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new LandscapeTexture(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILandscapeTexture)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILandscapeTexture)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class LandscapeTextureSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly LandscapeTextureSetterTranslationCommon Instance = new LandscapeTextureSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILandscapeTextureInternal item,
            ILandscapeTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILandscapeTexture item,
            ILandscapeTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.TextureSet) ?? true))
            {
                item.TextureSet = new FormLinkNullable<ITextureSetGetter>(rhs.TextureSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.MaterialType) ?? true))
            {
                item.MaterialType = new FormLink<IMaterialTypeGetter>(rhs.MaterialType.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.HavokFriction) ?? true))
            {
                item.HavokFriction = rhs.HavokFriction;
            }
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.HavokRestitution) ?? true))
            {
                item.HavokRestitution = rhs.HavokRestitution;
            }
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.TextureSpecularExponent) ?? true))
            {
                item.TextureSpecularExponent = rhs.TextureSpecularExponent;
            }
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)LandscapeTexture_FieldIndex.Grasses);
                try
                {
                    item.Grasses.SetTo(
                        rhs.Grasses
                        .Select(r => (IFormLink<IGrassGetter>)new FormLink<IGrassGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.HNAMDataTypeState) ?? true))
            {
                item.HNAMDataTypeState = rhs.HNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandscapeTextureInternal)item,
                rhs: (ILandscapeTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandscapeTexture)item,
                rhs: (ILandscapeTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandscapeTextureInternal)item,
                rhs: (ILandscapeTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandscapeTexture)item,
                rhs: (ILandscapeTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public LandscapeTexture DeepCopy(
            ILandscapeTextureGetter item,
            LandscapeTexture.TranslationMask? copyMask = null)
        {
            LandscapeTexture ret = (LandscapeTexture)((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).GetNew();
            ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LandscapeTexture DeepCopy(
            ILandscapeTextureGetter item,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LandscapeTexture ret = (LandscapeTexture)((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).GetNew();
            ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LandscapeTexture.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LandscapeTexture DeepCopy(
            ILandscapeTextureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LandscapeTexture ret = (LandscapeTexture)((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).GetNew();
            ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class LandscapeTexture
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LandscapeTexture_Registration.Instance;
        public new static LandscapeTexture_Registration Registration => LandscapeTexture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandscapeTextureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LandscapeTextureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandscapeTextureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LandscapeTextureBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LandscapeTextureBinaryWriteTranslation Instance = new LandscapeTextureBinaryWriteTranslation();

        public static void WriteEmbedded(
            ILandscapeTextureGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ILandscapeTextureGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureSet,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaterialType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MNAM));
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.HNAM)))
            {
                writer.Write(item.HavokFriction);
                writer.Write(item.HavokRestitution);
            }
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TextureSpecularExponent,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IGrassGetter>>.Instance.Write(
                writer: writer,
                items: item.Grasses,
                transl: (MutagenWriter subWriter, IFormLink<IGrassGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.GNAM));
                });
            if (writer.MetaData.FormVersion!.Value >= 43)
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<LandscapeTexture.Flag>.Instance.WriteNullable(
                    writer,
                    item.Flags,
                    length: 4,
                    header: recordTypeConverter.ConvertToCustom(RecordTypes.INAM));
            }
        }

        public void Write(
            MutagenWriter writer,
            ILandscapeTextureGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.LTEX),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandscapeTextureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandscapeTextureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandscapeTextureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LandscapeTextureBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static LandscapeTextureBinaryCreateTranslation Instance = new LandscapeTextureBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LTEX;
        public static void FillBinaryStructs(
            ILandscapeTextureInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ILandscapeTextureInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureSet = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)LandscapeTexture_FieldIndex.TextureSet;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaterialType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)LandscapeTexture_FieldIndex.MaterialType;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.HavokFriction = dataFrame.ReadUInt8();
                    item.HavokRestitution = dataFrame.ReadUInt8();
                    return (int)LandscapeTexture_FieldIndex.HavokRestitution;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureSpecularExponent = frame.ReadUInt8();
                    return (int)LandscapeTexture_FieldIndex.TextureSpecularExponent;
                }
                case RecordTypeInts.GNAM:
                {
                    item.Grasses.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IGrassGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.GNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)LandscapeTexture_FieldIndex.Grasses;
                }
                case RecordTypeInts.INAM:
                {
                    if (frame.MetaData.FormVersion!.Value >= 43)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.Flags = EnumBinaryTranslation<LandscapeTexture.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    }
                    return (int)LandscapeTexture_FieldIndex.Flags;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class LandscapeTextureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LandscapeTextureBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ILandscapeTextureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LandscapeTexture_Registration.Instance;
        public new static LandscapeTexture_Registration Registration => LandscapeTexture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandscapeTextureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandscapeTextureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => LandscapeTextureCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandscapeTextureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandscapeTextureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region TextureSet
        private int? _TextureSetLocation;
        public FormLinkNullable<ITextureSetGetter> TextureSet => _TextureSetLocation.HasValue ? new FormLinkNullable<ITextureSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _TextureSetLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ITextureSetGetter>.Null;
        #endregion
        #region MaterialType
        private int? _MaterialTypeLocation;
        public FormLink<IMaterialTypeGetter> MaterialType => _MaterialTypeLocation.HasValue ? new FormLink<IMaterialTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MaterialTypeLocation.Value, _package.MetaData.Constants)))) : FormLink<IMaterialTypeGetter>.Null;
        #endregion
        private int? _HNAMLocation;
        public LandscapeTexture.HNAMDataType HNAMDataTypeState { get; private set; }
        #region HavokFriction
        private int _HavokFrictionLocation => _HNAMLocation!.Value;
        private bool _HavokFriction_IsSet => _HNAMLocation.HasValue;
        public Byte HavokFriction => _HavokFriction_IsSet ? _data.Span[_HavokFrictionLocation] : default;
        #endregion
        #region HavokRestitution
        private int _HavokRestitutionLocation => _HNAMLocation!.Value + 0x1;
        private bool _HavokRestitution_IsSet => _HNAMLocation.HasValue;
        public Byte HavokRestitution => _HavokRestitution_IsSet ? _data.Span[_HavokRestitutionLocation] : default;
        #endregion
        #region TextureSpecularExponent
        private int? _TextureSpecularExponentLocation;
        public Byte TextureSpecularExponent => _TextureSpecularExponentLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _TextureSpecularExponentLocation.Value, _package.MetaData.Constants)[0] : default(Byte);
        #endregion
        public IReadOnlyList<IFormLink<IGrassGetter>> Grasses { get; private set; } = ListExt.Empty<IFormLink<IGrassGetter>>();
        #region Flags
        private int? _FlagsLocation;
        public LandscapeTexture.Flag? Flags => _FlagsLocation.HasValue ? (LandscapeTexture.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(LandscapeTexture.Flag?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LandscapeTextureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LandscapeTextureBinaryOverlay LandscapeTextureFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new LandscapeTextureBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static LandscapeTextureBinaryOverlay LandscapeTextureFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LandscapeTextureFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TNAM:
                {
                    _TextureSetLocation = (stream.Position - offset);
                    return (int)LandscapeTexture_FieldIndex.TextureSet;
                }
                case RecordTypeInts.MNAM:
                {
                    _MaterialTypeLocation = (stream.Position - offset);
                    return (int)LandscapeTexture_FieldIndex.MaterialType;
                }
                case RecordTypeInts.HNAM:
                {
                    _HNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)LandscapeTexture_FieldIndex.HavokRestitution;
                }
                case RecordTypeInts.SNAM:
                {
                    _TextureSpecularExponentLocation = (stream.Position - offset);
                    return (int)LandscapeTexture_FieldIndex.TextureSpecularExponent;
                }
                case RecordTypeInts.GNAM:
                {
                    this.Grasses = BinaryOverlayList.FactoryByArray<IFormLink<IGrassGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IGrassGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)LandscapeTexture_FieldIndex.Grasses;
                }
                case RecordTypeInts.INAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)LandscapeTexture_FieldIndex.Flags;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LandscapeTextureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILandscapeTextureGetter rhs)) return false;
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILandscapeTextureGetter? obj)
        {
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LandscapeTextureCommon)((ILandscapeTextureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

