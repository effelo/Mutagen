/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class IdleAnimation :
        Fallout4MajorRecord,
        IIdleAnimationInternal,
        ILoquiObjectSetter<IdleAnimation>,
        IEquatable<IIdleAnimationGetter>
    {
        #region Ctor
        protected IdleAnimation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IIdleAnimationGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Filename
        public String? Filename { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IIdleAnimationGetter.Filename => this.Filename;
        #endregion
        #region AnimationEvent
        public String? AnimationEvent { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IIdleAnimationGetter.AnimationEvent => this.AnimationEvent;
        #endregion
        #region RelatedIdles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IIdleRelationGetter>> _RelatedIdles = new ExtendedList<IFormLink<IIdleRelationGetter>>();
        public ExtendedList<IFormLink<IIdleRelationGetter>> RelatedIdles
        {
            get => this._RelatedIdles;
            protected set => this._RelatedIdles = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IIdleRelationGetter>> IIdleAnimationGetter.RelatedIdles => _RelatedIdles;
        #endregion

        #endregion
        #region LoopingSecondsMin
        public Byte LoopingSecondsMin { get; set; } = default;
        #endregion
        #region LoopingSecondsMax
        public Byte LoopingSecondsMax { get; set; } = default;
        #endregion
        #region Flags
        public IdleAnimation.Flag Flags { get; set; } = default;
        #endregion
        #region AnimationGroupSection
        public Byte AnimationGroupSection { get; set; } = default;
        #endregion
        #region ReplayDelay
        public UInt16 ReplayDelay { get; set; } = default;
        #endregion
        #region DATADataTypeState
        public IdleAnimation.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IdleAnimationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IIdleAnimationGetter rhs)) return false;
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IIdleAnimationGetter? obj)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Filename = initialValue;
                this.AnimationEvent = initialValue;
                this.RelatedIdles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.LoopingSecondsMin = initialValue;
                this.LoopingSecondsMax = initialValue;
                this.Flags = initialValue;
                this.AnimationGroupSection = initialValue;
                this.ReplayDelay = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Conditions,
                TItem Filename,
                TItem AnimationEvent,
                TItem RelatedIdles,
                TItem LoopingSecondsMin,
                TItem LoopingSecondsMax,
                TItem Flags,
                TItem AnimationGroupSection,
                TItem ReplayDelay,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Filename = Filename;
                this.AnimationEvent = AnimationEvent;
                this.RelatedIdles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RelatedIdles, Enumerable.Empty<(int Index, TItem Value)>());
                this.LoopingSecondsMin = LoopingSecondsMin;
                this.LoopingSecondsMax = LoopingSecondsMax;
                this.Flags = Flags;
                this.AnimationGroupSection = AnimationGroupSection;
                this.ReplayDelay = ReplayDelay;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem Filename;
            public TItem AnimationEvent;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RelatedIdles;
            public TItem LoopingSecondsMin;
            public TItem LoopingSecondsMax;
            public TItem Flags;
            public TItem AnimationGroupSection;
            public TItem ReplayDelay;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Filename, rhs.Filename)) return false;
                if (!object.Equals(this.AnimationEvent, rhs.AnimationEvent)) return false;
                if (!object.Equals(this.RelatedIdles, rhs.RelatedIdles)) return false;
                if (!object.Equals(this.LoopingSecondsMin, rhs.LoopingSecondsMin)) return false;
                if (!object.Equals(this.LoopingSecondsMax, rhs.LoopingSecondsMax)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.AnimationGroupSection, rhs.AnimationGroupSection)) return false;
                if (!object.Equals(this.ReplayDelay, rhs.ReplayDelay)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Conditions);
                hash.Add(this.Filename);
                hash.Add(this.AnimationEvent);
                hash.Add(this.RelatedIdles);
                hash.Add(this.LoopingSecondsMin);
                hash.Add(this.LoopingSecondsMax);
                hash.Add(this.Flags);
                hash.Add(this.AnimationGroupSection);
                hash.Add(this.ReplayDelay);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Filename)) return false;
                if (!eval(this.AnimationEvent)) return false;
                if (this.RelatedIdles != null)
                {
                    if (!eval(this.RelatedIdles.Overall)) return false;
                    if (this.RelatedIdles.Specific != null)
                    {
                        foreach (var item in this.RelatedIdles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.LoopingSecondsMin)) return false;
                if (!eval(this.LoopingSecondsMax)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.AnimationGroupSection)) return false;
                if (!eval(this.ReplayDelay)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Filename)) return true;
                if (eval(this.AnimationEvent)) return true;
                if (this.RelatedIdles != null)
                {
                    if (eval(this.RelatedIdles.Overall)) return true;
                    if (this.RelatedIdles.Specific != null)
                    {
                        foreach (var item in this.RelatedIdles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.LoopingSecondsMin)) return true;
                if (eval(this.LoopingSecondsMax)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.AnimationGroupSection)) return true;
                if (eval(this.ReplayDelay)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new IdleAnimation.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Filename = eval(this.Filename);
                obj.AnimationEvent = eval(this.AnimationEvent);
                if (RelatedIdles != null)
                {
                    obj.RelatedIdles = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RelatedIdles.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RelatedIdles.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RelatedIdles.Specific = l;
                        foreach (var item in RelatedIdles.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.LoopingSecondsMin = eval(this.LoopingSecondsMin);
                obj.LoopingSecondsMax = eval(this.LoopingSecondsMax);
                obj.Flags = eval(this.Flags);
                obj.AnimationGroupSection = eval(this.AnimationGroupSection);
                obj.ReplayDelay = eval(this.ReplayDelay);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(IdleAnimation.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, IdleAnimation.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(IdleAnimation.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Filename ?? true)
                    {
                        fg.AppendItem(Filename, "Filename");
                    }
                    if (printMask?.AnimationEvent ?? true)
                    {
                        fg.AppendItem(AnimationEvent, "AnimationEvent");
                    }
                    if ((printMask?.RelatedIdles?.Overall ?? true)
                        && RelatedIdles.TryGet(out var RelatedIdlesItem))
                    {
                        fg.AppendLine("RelatedIdles =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RelatedIdlesItem.Overall);
                            if (RelatedIdlesItem.Specific != null)
                            {
                                foreach (var subItem in RelatedIdlesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.LoopingSecondsMin ?? true)
                    {
                        fg.AppendItem(LoopingSecondsMin, "LoopingSecondsMin");
                    }
                    if (printMask?.LoopingSecondsMax ?? true)
                    {
                        fg.AppendItem(LoopingSecondsMax, "LoopingSecondsMax");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.AnimationGroupSection ?? true)
                    {
                        fg.AppendItem(AnimationGroupSection, "AnimationGroupSection");
                    }
                    if (printMask?.ReplayDelay ?? true)
                    {
                        fg.AppendItem(ReplayDelay, "ReplayDelay");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? Filename;
            public Exception? AnimationEvent;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RelatedIdles;
            public Exception? LoopingSecondsMin;
            public Exception? LoopingSecondsMax;
            public Exception? Flags;
            public Exception? AnimationGroupSection;
            public Exception? ReplayDelay;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Conditions:
                        return Conditions;
                    case IdleAnimation_FieldIndex.Filename:
                        return Filename;
                    case IdleAnimation_FieldIndex.AnimationEvent:
                        return AnimationEvent;
                    case IdleAnimation_FieldIndex.RelatedIdles:
                        return RelatedIdles;
                    case IdleAnimation_FieldIndex.LoopingSecondsMin:
                        return LoopingSecondsMin;
                    case IdleAnimation_FieldIndex.LoopingSecondsMax:
                        return LoopingSecondsMax;
                    case IdleAnimation_FieldIndex.Flags:
                        return Flags;
                    case IdleAnimation_FieldIndex.AnimationGroupSection:
                        return AnimationGroupSection;
                    case IdleAnimation_FieldIndex.ReplayDelay:
                        return ReplayDelay;
                    case IdleAnimation_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case IdleAnimation_FieldIndex.Filename:
                        this.Filename = ex;
                        break;
                    case IdleAnimation_FieldIndex.AnimationEvent:
                        this.AnimationEvent = ex;
                        break;
                    case IdleAnimation_FieldIndex.RelatedIdles:
                        this.RelatedIdles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case IdleAnimation_FieldIndex.LoopingSecondsMin:
                        this.LoopingSecondsMin = ex;
                        break;
                    case IdleAnimation_FieldIndex.LoopingSecondsMax:
                        this.LoopingSecondsMax = ex;
                        break;
                    case IdleAnimation_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case IdleAnimation_FieldIndex.AnimationGroupSection:
                        this.AnimationGroupSection = ex;
                        break;
                    case IdleAnimation_FieldIndex.ReplayDelay:
                        this.ReplayDelay = ex;
                        break;
                    case IdleAnimation_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case IdleAnimation_FieldIndex.Filename:
                        this.Filename = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.AnimationEvent:
                        this.AnimationEvent = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.RelatedIdles:
                        this.RelatedIdles = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case IdleAnimation_FieldIndex.LoopingSecondsMin:
                        this.LoopingSecondsMin = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.LoopingSecondsMax:
                        this.LoopingSecondsMax = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.AnimationGroupSection:
                        this.AnimationGroupSection = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.ReplayDelay:
                        this.ReplayDelay = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Conditions != null) return true;
                if (Filename != null) return true;
                if (AnimationEvent != null) return true;
                if (RelatedIdles != null) return true;
                if (LoopingSecondsMin != null) return true;
                if (LoopingSecondsMax != null) return true;
                if (Flags != null) return true;
                if (AnimationGroupSection != null) return true;
                if (ReplayDelay != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Filename, "Filename");
                fg.AppendItem(AnimationEvent, "AnimationEvent");
                if (RelatedIdles.TryGet(out var RelatedIdlesItem))
                {
                    fg.AppendLine("RelatedIdles =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RelatedIdlesItem.Overall);
                        if (RelatedIdlesItem.Specific != null)
                        {
                            foreach (var subItem in RelatedIdlesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(LoopingSecondsMin, "LoopingSecondsMin");
                fg.AppendItem(LoopingSecondsMax, "LoopingSecondsMax");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(AnimationGroupSection, "AnimationGroupSection");
                fg.AppendItem(ReplayDelay, "ReplayDelay");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Filename = this.Filename.Combine(rhs.Filename);
                ret.AnimationEvent = this.AnimationEvent.Combine(rhs.AnimationEvent);
                ret.RelatedIdles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.RelatedIdles?.Overall, rhs.RelatedIdles?.Overall), ExceptionExt.Combine(this.RelatedIdles?.Specific, rhs.RelatedIdles?.Specific));
                ret.LoopingSecondsMin = this.LoopingSecondsMin.Combine(rhs.LoopingSecondsMin);
                ret.LoopingSecondsMax = this.LoopingSecondsMax.Combine(rhs.LoopingSecondsMax);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.AnimationGroupSection = this.AnimationGroupSection.Combine(rhs.AnimationGroupSection);
                ret.ReplayDelay = this.ReplayDelay.Combine(rhs.ReplayDelay);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public Condition.TranslationMask? Conditions;
            public bool Filename;
            public bool AnimationEvent;
            public bool RelatedIdles;
            public bool LoopingSecondsMin;
            public bool LoopingSecondsMax;
            public bool Flags;
            public bool AnimationGroupSection;
            public bool ReplayDelay;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Filename = defaultOn;
                this.AnimationEvent = defaultOn;
                this.RelatedIdles = defaultOn;
                this.LoopingSecondsMin = defaultOn;
                this.LoopingSecondsMax = defaultOn;
                this.Flags = defaultOn;
                this.AnimationGroupSection = defaultOn;
                this.ReplayDelay = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Filename, null));
                ret.Add((AnimationEvent, null));
                ret.Add((RelatedIdles, null));
                ret.Add((LoopingSecondsMin, null));
                ret.Add((LoopingSecondsMax, null));
                ret.Add((Flags, null));
                ret.Add((AnimationGroupSection, null));
                ret.Add((ReplayDelay, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = IdleAnimation_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => IdleAnimationCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IdleAnimationSetterCommon.Instance.RemapLinks(this, mapping);
        public IdleAnimation(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private IdleAnimation(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal IdleAnimation(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public IdleAnimation(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public IdleAnimation(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IdleAnimationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IdleAnimationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static IdleAnimation CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new IdleAnimation();
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out IdleAnimation item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new IdleAnimation GetNew()
        {
            return new IdleAnimation();
        }

    }
    #endregion

    #region Interface
    public partial interface IIdleAnimation :
        IIdleAnimationGetter,
        IFallout4MajorRecord,
        IIdleRelation,
        ILoquiObjectSetter<IIdleAnimationInternal>,
        IFormLinkContainer
    {
        new ExtendedList<Condition> Conditions { get; }
        new String? Filename { get; set; }
        new String? AnimationEvent { get; set; }
        new ExtendedList<IFormLink<IIdleRelationGetter>> RelatedIdles { get; }
        new Byte LoopingSecondsMin { get; set; }
        new Byte LoopingSecondsMax { get; set; }
        new IdleAnimation.Flag Flags { get; set; }
        new Byte AnimationGroupSection { get; set; }
        new UInt16 ReplayDelay { get; set; }
        new IdleAnimation.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IIdleAnimationInternal :
        IFallout4MajorRecordInternal,
        IIdleAnimation,
        IIdleAnimationGetter
    {
    }

    public partial interface IIdleAnimationGetter :
        IFallout4MajorRecordGetter,
        IIdleRelationGetter,
        ILoquiObject<IIdleAnimationGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => IdleAnimation_Registration.Instance;
        IReadOnlyList<IConditionGetter> Conditions { get; }
        String? Filename { get; }
        String? AnimationEvent { get; }
        IReadOnlyList<IFormLink<IIdleRelationGetter>> RelatedIdles { get; }
        Byte LoopingSecondsMin { get; }
        Byte LoopingSecondsMax { get; }
        IdleAnimation.Flag Flags { get; }
        Byte AnimationGroupSection { get; }
        UInt16 ReplayDelay { get; }
        IdleAnimation.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class IdleAnimationMixIn
    {
        public static void Clear(this IIdleAnimationInternal item)
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static IdleAnimation.Mask<bool> GetEqualsMask(
            this IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IIdleAnimationGetter item,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IIdleAnimationGetter item,
            FileGeneration fg,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IIdleAnimationGetter item,
            IIdleAnimationGetter rhs)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IIdleAnimationInternal lhs,
            IIdleAnimationGetter rhs,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = IdleAnimation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IIdleAnimationInternal lhs,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IdleAnimation Duplicate(
            this IIdleAnimationGetter item,
            FormKey formKey,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IIdleAnimationInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum IdleAnimation_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Conditions = 6,
        Filename = 7,
        AnimationEvent = 8,
        RelatedIdles = 9,
        LoopingSecondsMin = 10,
        LoopingSecondsMax = 11,
        Flags = 12,
        AnimationGroupSection = 13,
        ReplayDelay = 14,
        DATADataTypeState = 15,
    }
    #endregion

    #region Registration
    public partial class IdleAnimation_Registration : ILoquiRegistration
    {
        public static readonly IdleAnimation_Registration Instance = new IdleAnimation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 236,
            version: 0);

        public const string GUID = "bf69327e-265b-487b-8e17-3a2a13dd3f74";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(IdleAnimation.Mask<>);

        public static readonly Type ErrorMaskType = typeof(IdleAnimation.ErrorMask);

        public static readonly Type ClassType = typeof(IdleAnimation);

        public static readonly Type GetterType = typeof(IIdleAnimationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IIdleAnimation);

        public static readonly Type? InternalSetterType = typeof(IIdleAnimationInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.IdleAnimation";

        public const string Name = "IdleAnimation";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.IDLE;
        public static readonly Type BinaryWriteTranslation = typeof(IdleAnimationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class IdleAnimationSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly IdleAnimationSetterCommon Instance = new IdleAnimationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IIdleAnimationInternal item)
        {
            ClearPartial();
            item.Conditions.Clear();
            item.Filename = default;
            item.AnimationEvent = default;
            item.RelatedIdles.Clear();
            item.LoopingSecondsMin = default;
            item.LoopingSecondsMax = default;
            item.Flags = default;
            item.AnimationGroupSection = default;
            item.ReplayDelay = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IIdleAnimationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IIdleAnimationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IIdleAnimation obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.RelatedIdles.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IIdleAnimationInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IIdleAnimationInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: IdleAnimationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: IdleAnimationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (IdleAnimation)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (IdleAnimation)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class IdleAnimationCommon : Fallout4MajorRecordCommon
    {
        public new static readonly IdleAnimationCommon Instance = new IdleAnimationCommon();

        public IdleAnimation.Mask<bool> GetEqualsMask(
            IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new IdleAnimation.Mask<bool>(false);
            ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            IdleAnimation.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Filename = string.Equals(item.Filename, rhs.Filename);
            ret.AnimationEvent = string.Equals(item.AnimationEvent, rhs.AnimationEvent);
            ret.RelatedIdles = item.RelatedIdles.CollectionEqualsHelper(
                rhs.RelatedIdles,
                (l, r) => object.Equals(l, r),
                include);
            ret.LoopingSecondsMin = item.LoopingSecondsMin == rhs.LoopingSecondsMin;
            ret.LoopingSecondsMax = item.LoopingSecondsMax == rhs.LoopingSecondsMax;
            ret.Flags = item.Flags == rhs.Flags;
            ret.AnimationGroupSection = item.AnimationGroupSection == rhs.AnimationGroupSection;
            ret.ReplayDelay = item.ReplayDelay == rhs.ReplayDelay;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IIdleAnimationGetter item,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IIdleAnimationGetter item,
            FileGeneration fg,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"IdleAnimation =>");
            }
            else
            {
                fg.AppendLine($"{name} (IdleAnimation) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IIdleAnimationGetter item,
            FileGeneration fg,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Filename ?? true)
                && item.Filename.TryGet(out var FilenameItem))
            {
                fg.AppendItem(FilenameItem, "Filename");
            }
            if ((printMask?.AnimationEvent ?? true)
                && item.AnimationEvent.TryGet(out var AnimationEventItem))
            {
                fg.AppendItem(AnimationEventItem, "AnimationEvent");
            }
            if (printMask?.RelatedIdles?.Overall ?? true)
            {
                fg.AppendLine("RelatedIdles =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.RelatedIdles)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LoopingSecondsMin ?? true)
            {
                fg.AppendItem(item.LoopingSecondsMin, "LoopingSecondsMin");
            }
            if (printMask?.LoopingSecondsMax ?? true)
            {
                fg.AppendItem(item.LoopingSecondsMax, "LoopingSecondsMax");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.AnimationGroupSection ?? true)
            {
                fg.AppendItem(item.AnimationGroupSection, "AnimationGroupSection");
            }
            if (printMask?.ReplayDelay ?? true)
            {
                fg.AppendItem(item.ReplayDelay, "ReplayDelay");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static IdleAnimation_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleAnimation_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (IdleAnimation_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (IdleAnimation_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (IdleAnimation_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (IdleAnimation_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (IdleAnimation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new IdleAnimation_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (IdleAnimation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IIdleAnimationGetter? lhs,
            IIdleAnimationGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            if (!string.Equals(lhs.Filename, rhs.Filename)) return false;
            if (!string.Equals(lhs.AnimationEvent, rhs.AnimationEvent)) return false;
            if (!lhs.RelatedIdles.SequenceEqualNullable(rhs.RelatedIdles)) return false;
            if (lhs.LoopingSecondsMin != rhs.LoopingSecondsMin) return false;
            if (lhs.LoopingSecondsMax != rhs.LoopingSecondsMax) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.AnimationGroupSection != rhs.AnimationGroupSection) return false;
            if (lhs.ReplayDelay != rhs.ReplayDelay) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IIdleAnimationGetter?)lhs,
                rhs: rhs as IIdleAnimationGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IIdleAnimationGetter?)lhs,
                rhs: rhs as IIdleAnimationGetter);
        }
        
        public virtual int GetHashCode(IIdleAnimationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Conditions);
            if (item.Filename.TryGet(out var Filenameitem))
            {
                hash.Add(Filenameitem);
            }
            if (item.AnimationEvent.TryGet(out var AnimationEventitem))
            {
                hash.Add(AnimationEventitem);
            }
            hash.Add(item.RelatedIdles);
            hash.Add(item.LoopingSecondsMin);
            hash.Add(item.LoopingSecondsMax);
            hash.Add(item.Flags);
            hash.Add(item.AnimationGroupSection);
            hash.Add(item.ReplayDelay);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IIdleAnimationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IIdleAnimationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return IdleAnimation.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IIdleAnimationGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.RelatedIdles)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public IdleAnimation Duplicate(
            IIdleAnimationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new IdleAnimation(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IIdleAnimation)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IIdleAnimation)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class IdleAnimationSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly IdleAnimationSetterTranslationCommon Instance = new IdleAnimationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IIdleAnimationInternal item,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IIdleAnimation item,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Filename) ?? true))
            {
                item.Filename = rhs.Filename;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationEvent) ?? true))
            {
                item.AnimationEvent = rhs.AnimationEvent;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.RelatedIdles) ?? true))
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.RelatedIdles);
                try
                {
                    item.RelatedIdles.SetTo(
                        rhs.RelatedIdles
                        .Select(r => (IFormLink<IIdleRelationGetter>)new FormLink<IIdleRelationGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.LoopingSecondsMin) ?? true))
            {
                item.LoopingSecondsMin = rhs.LoopingSecondsMin;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.LoopingSecondsMax) ?? true))
            {
                item.LoopingSecondsMax = rhs.LoopingSecondsMax;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationGroupSection) ?? true))
            {
                item.AnimationGroupSection = rhs.AnimationGroupSection;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.ReplayDelay) ?? true))
            {
                item.ReplayDelay = rhs.ReplayDelay;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimationInternal)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimation)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimationInternal)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimation)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = IdleAnimation.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class IdleAnimation
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleAnimation_Registration.Instance;
        public new static IdleAnimation_Registration Registration => IdleAnimation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IdleAnimationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return IdleAnimationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IdleAnimationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class IdleAnimationBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static IdleAnimationBinaryWriteTranslation Instance = new IdleAnimationBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IIdleAnimationGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IIdleAnimationGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IIdleAnimationGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IIdleAnimationGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            IdleAnimationBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Filename,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationEvent,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ENAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IIdleRelationGetter>>.Instance.Write(
                writer: writer,
                items: item.RelatedIdles,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM),
                transl: (MutagenWriter subWriter, IFormLink<IIdleRelationGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.LoopingSecondsMin);
                writer.Write(item.LoopingSecondsMax);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<IdleAnimation.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                writer.Write(item.AnimationGroupSection);
                writer.Write(item.ReplayDelay);
            }
        }

        public void Write(
            MutagenWriter writer,
            IIdleAnimationGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.IDLE),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class IdleAnimationBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static IdleAnimationBinaryCreateTranslation Instance = new IdleAnimationBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.IDLE;
        public static void FillBinaryStructs(
            IIdleAnimationInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IIdleAnimationInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CTDA:
                {
                    IdleAnimationBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)IdleAnimation_FieldIndex.Conditions;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Filename = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)IdleAnimation_FieldIndex.Filename;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationEvent = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)IdleAnimation_FieldIndex.AnimationEvent;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RelatedIdles.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IIdleRelationGetter>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)IdleAnimation_FieldIndex.RelatedIdles;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.LoopingSecondsMin = dataFrame.ReadUInt8();
                    item.LoopingSecondsMax = dataFrame.ReadUInt8();
                    item.Flags = EnumBinaryTranslation<IdleAnimation.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.AnimationGroupSection = dataFrame.ReadUInt8();
                    item.ReplayDelay = dataFrame.ReadUInt16();
                    return (int)IdleAnimation_FieldIndex.ReplayDelay;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IIdleAnimationInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class IdleAnimationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class IdleAnimationBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IIdleAnimationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleAnimation_Registration.Instance;
        public new static IdleAnimation_Registration Registration => IdleAnimation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IdleAnimationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IdleAnimationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => IdleAnimationCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IdleAnimationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IdleAnimationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        #region Filename
        private int? _FilenameLocation;
        public String? Filename => _FilenameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FilenameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region AnimationEvent
        private int? _AnimationEventLocation;
        public String? AnimationEvent => _AnimationEventLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _AnimationEventLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IReadOnlyList<IFormLink<IIdleRelationGetter>> RelatedIdles { get; private set; } = ListExt.Empty<IFormLink<IIdleRelationGetter>>();
        private int? _DATALocation;
        public IdleAnimation.DATADataType DATADataTypeState { get; private set; }
        #region LoopingSecondsMin
        private int _LoopingSecondsMinLocation => _DATALocation!.Value;
        private bool _LoopingSecondsMin_IsSet => _DATALocation.HasValue;
        public Byte LoopingSecondsMin => _LoopingSecondsMin_IsSet ? _data.Span[_LoopingSecondsMinLocation] : default;
        #endregion
        #region LoopingSecondsMax
        private int _LoopingSecondsMaxLocation => _DATALocation!.Value + 0x1;
        private bool _LoopingSecondsMax_IsSet => _DATALocation.HasValue;
        public Byte LoopingSecondsMax => _LoopingSecondsMax_IsSet ? _data.Span[_LoopingSecondsMaxLocation] : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x2;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public IdleAnimation.Flag Flags => _Flags_IsSet ? (IdleAnimation.Flag)_data.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region AnimationGroupSection
        private int _AnimationGroupSectionLocation => _DATALocation!.Value + 0x3;
        private bool _AnimationGroupSection_IsSet => _DATALocation.HasValue;
        public Byte AnimationGroupSection => _AnimationGroupSection_IsSet ? _data.Span[_AnimationGroupSectionLocation] : default;
        #endregion
        #region ReplayDelay
        private int _ReplayDelayLocation => _DATALocation!.Value + 0x4;
        private bool _ReplayDelay_IsSet => _DATALocation.HasValue;
        public UInt16 ReplayDelay => _ReplayDelay_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(_ReplayDelayLocation, 2)) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected IdleAnimationBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static IdleAnimationBinaryOverlay IdleAnimationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new IdleAnimationBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IdleAnimationBinaryOverlay IdleAnimationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return IdleAnimationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CTDA:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)IdleAnimation_FieldIndex.Conditions;
                }
                case RecordTypeInts.DNAM:
                {
                    _FilenameLocation = (stream.Position - offset);
                    return (int)IdleAnimation_FieldIndex.Filename;
                }
                case RecordTypeInts.ENAM:
                {
                    _AnimationEventLocation = (stream.Position - offset);
                    return (int)IdleAnimation_FieldIndex.AnimationEvent;
                }
                case RecordTypeInts.ANAM:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.RelatedIdles = BinaryOverlayList.FactoryByStartIndex<IFormLink<IIdleRelationGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IIdleRelationGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return (int)IdleAnimation_FieldIndex.RelatedIdles;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)IdleAnimation_FieldIndex.ReplayDelay;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IdleAnimationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IIdleAnimationGetter rhs)) return false;
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IIdleAnimationGetter? obj)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

