/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Weapon :
        Fallout4MajorRecord,
        IWeaponInternal,
        ILoquiObjectSetter<Weapon>,
        IEquatable<IWeaponGetter>
    {
        #region Ctor
        protected Weapon()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IWeaponGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IWeaponGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IWeaponGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IWeaponGetter.Model => this.Model;
        #endregion
        #region Icons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Icons? _Icons;
        public Icons? Icons
        {
            get => _Icons;
            set => _Icons = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIconsGetter? IWeaponGetter.Icons => this.Icons;
        #endregion
        #region ObjectEffect
        public FormLinkNullable<IEffectRecordGetter> ObjectEffect { get; set; } = new FormLinkNullable<IEffectRecordGetter>();
        #endregion
        #region EnchantmentAmount
        public UInt16? EnchantmentAmount { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IWeaponGetter.EnchantmentAmount => this.EnchantmentAmount;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IWeaponGetter.Destructible => this.Destructible;
        #endregion
        #region EquipmentType
        public FormLinkNullable<IEquipTypeGetter> EquipmentType { get; set; } = new FormLinkNullable<IEquipTypeGetter>();
        #endregion
        #region BlockBashImpact
        public FormLinkNullable<IImpactDataSetGetter> BlockBashImpact { get; set; } = new FormLinkNullable<IImpactDataSetGetter>();
        #endregion
        #region AlternateBlockMaterial
        public FormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial { get; set; } = new FormLinkNullable<IMaterialTypeGetter>();
        #endregion
        #region PickUpSound
        public FormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region PutDownSound
        public FormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IKeywordGetter>>? _Keywords;
        public ExtendedList<IFormLink<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IKeywordGetter>>? IWeaponGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLink<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IWeaponGetter.Description => this.Description;
        #endregion
        #region ScopeModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _ScopeModel;
        public Model? ScopeModel
        {
            get => _ScopeModel;
            set => _ScopeModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IWeaponGetter.ScopeModel => this.ScopeModel;
        #endregion
        #region Unused
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _Unused;
        public MemorySlice<Byte>? Unused
        {
            get => this._Unused;
            set => this._Unused = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeaponGetter.Unused => this.Unused;
        #endregion
        #region ImpactDataSet
        public FormLinkNullable<IImpactDataSetGetter> ImpactDataSet { get; set; } = new FormLinkNullable<IImpactDataSetGetter>();
        #endregion
        #region FirstPersonModel
        public FormLinkNullable<IStaticGetter> FirstPersonModel { get; set; } = new FormLinkNullable<IStaticGetter>();
        #endregion
        #region AttackSound
        public FormLinkNullable<ISoundDescriptorGetter> AttackSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region AttackSound2D
        public FormLinkNullable<ISoundDescriptorGetter> AttackSound2D { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region AttackLoopSound
        public FormLinkNullable<ISoundDescriptorGetter> AttackLoopSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region AttackFailSound
        public FormLinkNullable<ISoundDescriptorGetter> AttackFailSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region IdleSound
        public FormLinkNullable<ISoundDescriptorGetter> IdleSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region EquipSound
        public FormLinkNullable<ISoundDescriptorGetter> EquipSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region UnequipSound
        public FormLinkNullable<ISoundDescriptorGetter> UnequipSound { get; set; } = new FormLinkNullable<ISoundDescriptorGetter>();
        #endregion
        #region BasicStats
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeaponBasicStats? _BasicStats;
        public WeaponBasicStats? BasicStats
        {
            get => _BasicStats;
            set => _BasicStats = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeaponBasicStatsGetter? IWeaponGetter.BasicStats => this.BasicStats;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeaponData? _Data;
        public WeaponData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeaponDataGetter? IWeaponGetter.Data => this.Data;
        #endregion
        #region Critical
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CriticalData? _Critical;
        public CriticalData? Critical
        {
            get => _Critical;
            set => _Critical = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICriticalDataGetter? IWeaponGetter.Critical => this.Critical;
        #endregion
        #region DetectionSoundLevel
        public SoundLevel? DetectionSoundLevel { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SoundLevel? IWeaponGetter.DetectionSoundLevel => this.DetectionSoundLevel;
        #endregion
        #region Template
        public FormLinkNullable<IWeaponGetter> Template { get; set; } = new FormLinkNullable<IWeaponGetter>();
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeaponMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWeaponGetter rhs)) return false;
            return ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IWeaponGetter? obj)
        {
            return ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(initialValue, new Icons.Mask<TItem>(initialValue));
                this.ObjectEffect = initialValue;
                this.EnchantmentAmount = initialValue;
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.EquipmentType = initialValue;
                this.BlockBashImpact = initialValue;
                this.AlternateBlockMaterial = initialValue;
                this.PickUpSound = initialValue;
                this.PutDownSound = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Description = initialValue;
                this.ScopeModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Unused = initialValue;
                this.ImpactDataSet = initialValue;
                this.FirstPersonModel = initialValue;
                this.AttackSound = initialValue;
                this.AttackSound2D = initialValue;
                this.AttackLoopSound = initialValue;
                this.AttackFailSound = initialValue;
                this.IdleSound = initialValue;
                this.EquipSound = initialValue;
                this.UnequipSound = initialValue;
                this.BasicStats = new MaskItem<TItem, WeaponBasicStats.Mask<TItem>?>(initialValue, new WeaponBasicStats.Mask<TItem>(initialValue));
                this.Data = new MaskItem<TItem, WeaponData.Mask<TItem>?>(initialValue, new WeaponData.Mask<TItem>(initialValue));
                this.Critical = new MaskItem<TItem, CriticalData.Mask<TItem>?>(initialValue, new CriticalData.Mask<TItem>(initialValue));
                this.DetectionSoundLevel = initialValue;
                this.Template = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem Icons,
                TItem ObjectEffect,
                TItem EnchantmentAmount,
                TItem Destructible,
                TItem EquipmentType,
                TItem BlockBashImpact,
                TItem AlternateBlockMaterial,
                TItem PickUpSound,
                TItem PutDownSound,
                TItem Keywords,
                TItem Description,
                TItem ScopeModel,
                TItem Unused,
                TItem ImpactDataSet,
                TItem FirstPersonModel,
                TItem AttackSound,
                TItem AttackSound2D,
                TItem AttackLoopSound,
                TItem AttackFailSound,
                TItem IdleSound,
                TItem EquipSound,
                TItem UnequipSound,
                TItem BasicStats,
                TItem Data,
                TItem Critical,
                TItem DetectionSoundLevel,
                TItem Template)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(Icons, new Icons.Mask<TItem>(Icons));
                this.ObjectEffect = ObjectEffect;
                this.EnchantmentAmount = EnchantmentAmount;
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.EquipmentType = EquipmentType;
                this.BlockBashImpact = BlockBashImpact;
                this.AlternateBlockMaterial = AlternateBlockMaterial;
                this.PickUpSound = PickUpSound;
                this.PutDownSound = PutDownSound;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Description = Description;
                this.ScopeModel = new MaskItem<TItem, Model.Mask<TItem>?>(ScopeModel, new Model.Mask<TItem>(ScopeModel));
                this.Unused = Unused;
                this.ImpactDataSet = ImpactDataSet;
                this.FirstPersonModel = FirstPersonModel;
                this.AttackSound = AttackSound;
                this.AttackSound2D = AttackSound2D;
                this.AttackLoopSound = AttackLoopSound;
                this.AttackFailSound = AttackFailSound;
                this.IdleSound = IdleSound;
                this.EquipSound = EquipSound;
                this.UnequipSound = UnequipSound;
                this.BasicStats = new MaskItem<TItem, WeaponBasicStats.Mask<TItem>?>(BasicStats, new WeaponBasicStats.Mask<TItem>(BasicStats));
                this.Data = new MaskItem<TItem, WeaponData.Mask<TItem>?>(Data, new WeaponData.Mask<TItem>(Data));
                this.Critical = new MaskItem<TItem, CriticalData.Mask<TItem>?>(Critical, new CriticalData.Mask<TItem>(Critical));
                this.DetectionSoundLevel = DetectionSoundLevel;
                this.Template = Template;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Icons.Mask<TItem>?>? Icons { get; set; }
            public TItem ObjectEffect;
            public TItem EnchantmentAmount;
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem EquipmentType;
            public TItem BlockBashImpact;
            public TItem AlternateBlockMaterial;
            public TItem PickUpSound;
            public TItem PutDownSound;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem Description;
            public MaskItem<TItem, Model.Mask<TItem>?>? ScopeModel { get; set; }
            public TItem Unused;
            public TItem ImpactDataSet;
            public TItem FirstPersonModel;
            public TItem AttackSound;
            public TItem AttackSound2D;
            public TItem AttackLoopSound;
            public TItem AttackFailSound;
            public TItem IdleSound;
            public TItem EquipSound;
            public TItem UnequipSound;
            public MaskItem<TItem, WeaponBasicStats.Mask<TItem>?>? BasicStats { get; set; }
            public MaskItem<TItem, WeaponData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, CriticalData.Mask<TItem>?>? Critical { get; set; }
            public TItem DetectionSoundLevel;
            public TItem Template;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Icons, rhs.Icons)) return false;
                if (!object.Equals(this.ObjectEffect, rhs.ObjectEffect)) return false;
                if (!object.Equals(this.EnchantmentAmount, rhs.EnchantmentAmount)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.EquipmentType, rhs.EquipmentType)) return false;
                if (!object.Equals(this.BlockBashImpact, rhs.BlockBashImpact)) return false;
                if (!object.Equals(this.AlternateBlockMaterial, rhs.AlternateBlockMaterial)) return false;
                if (!object.Equals(this.PickUpSound, rhs.PickUpSound)) return false;
                if (!object.Equals(this.PutDownSound, rhs.PutDownSound)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.ScopeModel, rhs.ScopeModel)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.FirstPersonModel, rhs.FirstPersonModel)) return false;
                if (!object.Equals(this.AttackSound, rhs.AttackSound)) return false;
                if (!object.Equals(this.AttackSound2D, rhs.AttackSound2D)) return false;
                if (!object.Equals(this.AttackLoopSound, rhs.AttackLoopSound)) return false;
                if (!object.Equals(this.AttackFailSound, rhs.AttackFailSound)) return false;
                if (!object.Equals(this.IdleSound, rhs.IdleSound)) return false;
                if (!object.Equals(this.EquipSound, rhs.EquipSound)) return false;
                if (!object.Equals(this.UnequipSound, rhs.UnequipSound)) return false;
                if (!object.Equals(this.BasicStats, rhs.BasicStats)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.Critical, rhs.Critical)) return false;
                if (!object.Equals(this.DetectionSoundLevel, rhs.DetectionSoundLevel)) return false;
                if (!object.Equals(this.Template, rhs.Template)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Icons);
                hash.Add(this.ObjectEffect);
                hash.Add(this.EnchantmentAmount);
                hash.Add(this.Destructible);
                hash.Add(this.EquipmentType);
                hash.Add(this.BlockBashImpact);
                hash.Add(this.AlternateBlockMaterial);
                hash.Add(this.PickUpSound);
                hash.Add(this.PutDownSound);
                hash.Add(this.Keywords);
                hash.Add(this.Description);
                hash.Add(this.ScopeModel);
                hash.Add(this.Unused);
                hash.Add(this.ImpactDataSet);
                hash.Add(this.FirstPersonModel);
                hash.Add(this.AttackSound);
                hash.Add(this.AttackSound2D);
                hash.Add(this.AttackLoopSound);
                hash.Add(this.AttackFailSound);
                hash.Add(this.IdleSound);
                hash.Add(this.EquipSound);
                hash.Add(this.UnequipSound);
                hash.Add(this.BasicStats);
                hash.Add(this.Data);
                hash.Add(this.Critical);
                hash.Add(this.DetectionSoundLevel);
                hash.Add(this.Template);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Icons != null)
                {
                    if (!eval(this.Icons.Overall)) return false;
                    if (this.Icons.Specific != null && !this.Icons.Specific.All(eval)) return false;
                }
                if (!eval(this.ObjectEffect)) return false;
                if (!eval(this.EnchantmentAmount)) return false;
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.EquipmentType)) return false;
                if (!eval(this.BlockBashImpact)) return false;
                if (!eval(this.AlternateBlockMaterial)) return false;
                if (!eval(this.PickUpSound)) return false;
                if (!eval(this.PutDownSound)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Description)) return false;
                if (ScopeModel != null)
                {
                    if (!eval(this.ScopeModel.Overall)) return false;
                    if (this.ScopeModel.Specific != null && !this.ScopeModel.Specific.All(eval)) return false;
                }
                if (!eval(this.Unused)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.FirstPersonModel)) return false;
                if (!eval(this.AttackSound)) return false;
                if (!eval(this.AttackSound2D)) return false;
                if (!eval(this.AttackLoopSound)) return false;
                if (!eval(this.AttackFailSound)) return false;
                if (!eval(this.IdleSound)) return false;
                if (!eval(this.EquipSound)) return false;
                if (!eval(this.UnequipSound)) return false;
                if (BasicStats != null)
                {
                    if (!eval(this.BasicStats.Overall)) return false;
                    if (this.BasicStats.Specific != null && !this.BasicStats.Specific.All(eval)) return false;
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (Critical != null)
                {
                    if (!eval(this.Critical.Overall)) return false;
                    if (this.Critical.Specific != null && !this.Critical.Specific.All(eval)) return false;
                }
                if (!eval(this.DetectionSoundLevel)) return false;
                if (!eval(this.Template)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Icons != null)
                {
                    if (eval(this.Icons.Overall)) return true;
                    if (this.Icons.Specific != null && this.Icons.Specific.Any(eval)) return true;
                }
                if (eval(this.ObjectEffect)) return true;
                if (eval(this.EnchantmentAmount)) return true;
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.EquipmentType)) return true;
                if (eval(this.BlockBashImpact)) return true;
                if (eval(this.AlternateBlockMaterial)) return true;
                if (eval(this.PickUpSound)) return true;
                if (eval(this.PutDownSound)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Description)) return true;
                if (ScopeModel != null)
                {
                    if (eval(this.ScopeModel.Overall)) return true;
                    if (this.ScopeModel.Specific != null && this.ScopeModel.Specific.Any(eval)) return true;
                }
                if (eval(this.Unused)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.FirstPersonModel)) return true;
                if (eval(this.AttackSound)) return true;
                if (eval(this.AttackSound2D)) return true;
                if (eval(this.AttackLoopSound)) return true;
                if (eval(this.AttackFailSound)) return true;
                if (eval(this.IdleSound)) return true;
                if (eval(this.EquipSound)) return true;
                if (eval(this.UnequipSound)) return true;
                if (BasicStats != null)
                {
                    if (eval(this.BasicStats.Overall)) return true;
                    if (this.BasicStats.Specific != null && this.BasicStats.Specific.Any(eval)) return true;
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (Critical != null)
                {
                    if (eval(this.Critical.Overall)) return true;
                    if (this.Critical.Specific != null && this.Critical.Specific.Any(eval)) return true;
                }
                if (eval(this.DetectionSoundLevel)) return true;
                if (eval(this.Template)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Weapon.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Icons = this.Icons == null ? null : new MaskItem<R, Icons.Mask<R>?>(eval(this.Icons.Overall), this.Icons.Specific?.Translate(eval));
                obj.ObjectEffect = eval(this.ObjectEffect);
                obj.EnchantmentAmount = eval(this.EnchantmentAmount);
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.EquipmentType = eval(this.EquipmentType);
                obj.BlockBashImpact = eval(this.BlockBashImpact);
                obj.AlternateBlockMaterial = eval(this.AlternateBlockMaterial);
                obj.PickUpSound = eval(this.PickUpSound);
                obj.PutDownSound = eval(this.PutDownSound);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Description = eval(this.Description);
                obj.ScopeModel = this.ScopeModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.ScopeModel.Overall), this.ScopeModel.Specific?.Translate(eval));
                obj.Unused = eval(this.Unused);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.FirstPersonModel = eval(this.FirstPersonModel);
                obj.AttackSound = eval(this.AttackSound);
                obj.AttackSound2D = eval(this.AttackSound2D);
                obj.AttackLoopSound = eval(this.AttackLoopSound);
                obj.AttackFailSound = eval(this.AttackFailSound);
                obj.IdleSound = eval(this.IdleSound);
                obj.EquipSound = eval(this.EquipSound);
                obj.UnequipSound = eval(this.UnequipSound);
                obj.BasicStats = this.BasicStats == null ? null : new MaskItem<R, WeaponBasicStats.Mask<R>?>(eval(this.BasicStats.Overall), this.BasicStats.Specific?.Translate(eval));
                obj.Data = this.Data == null ? null : new MaskItem<R, WeaponData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.Critical = this.Critical == null ? null : new MaskItem<R, CriticalData.Mask<R>?>(eval(this.Critical.Overall), this.Critical.Specific?.Translate(eval));
                obj.DetectionSoundLevel = eval(this.DetectionSoundLevel);
                obj.Template = eval(this.Template);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Weapon.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Weapon.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Weapon.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Icons?.Overall ?? true)
                    {
                        Icons?.ToString(fg);
                    }
                    if (printMask?.ObjectEffect ?? true)
                    {
                        fg.AppendItem(ObjectEffect, "ObjectEffect");
                    }
                    if (printMask?.EnchantmentAmount ?? true)
                    {
                        fg.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.EquipmentType ?? true)
                    {
                        fg.AppendItem(EquipmentType, "EquipmentType");
                    }
                    if (printMask?.BlockBashImpact ?? true)
                    {
                        fg.AppendItem(BlockBashImpact, "BlockBashImpact");
                    }
                    if (printMask?.AlternateBlockMaterial ?? true)
                    {
                        fg.AppendItem(AlternateBlockMaterial, "AlternateBlockMaterial");
                    }
                    if (printMask?.PickUpSound ?? true)
                    {
                        fg.AppendItem(PickUpSound, "PickUpSound");
                    }
                    if (printMask?.PutDownSound ?? true)
                    {
                        fg.AppendItem(PutDownSound, "PutDownSound");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.ScopeModel?.Overall ?? true)
                    {
                        ScopeModel?.ToString(fg);
                    }
                    if (printMask?.Unused ?? true)
                    {
                        fg.AppendItem(Unused, "Unused");
                    }
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.FirstPersonModel ?? true)
                    {
                        fg.AppendItem(FirstPersonModel, "FirstPersonModel");
                    }
                    if (printMask?.AttackSound ?? true)
                    {
                        fg.AppendItem(AttackSound, "AttackSound");
                    }
                    if (printMask?.AttackSound2D ?? true)
                    {
                        fg.AppendItem(AttackSound2D, "AttackSound2D");
                    }
                    if (printMask?.AttackLoopSound ?? true)
                    {
                        fg.AppendItem(AttackLoopSound, "AttackLoopSound");
                    }
                    if (printMask?.AttackFailSound ?? true)
                    {
                        fg.AppendItem(AttackFailSound, "AttackFailSound");
                    }
                    if (printMask?.IdleSound ?? true)
                    {
                        fg.AppendItem(IdleSound, "IdleSound");
                    }
                    if (printMask?.EquipSound ?? true)
                    {
                        fg.AppendItem(EquipSound, "EquipSound");
                    }
                    if (printMask?.UnequipSound ?? true)
                    {
                        fg.AppendItem(UnequipSound, "UnequipSound");
                    }
                    if (printMask?.BasicStats?.Overall ?? true)
                    {
                        BasicStats?.ToString(fg);
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if (printMask?.Critical?.Overall ?? true)
                    {
                        Critical?.ToString(fg);
                    }
                    if (printMask?.DetectionSoundLevel ?? true)
                    {
                        fg.AppendItem(DetectionSoundLevel, "DetectionSoundLevel");
                    }
                    if (printMask?.Template ?? true)
                    {
                        fg.AppendItem(Template, "Template");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Icons.ErrorMask?>? Icons;
            public Exception? ObjectEffect;
            public Exception? EnchantmentAmount;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? EquipmentType;
            public Exception? BlockBashImpact;
            public Exception? AlternateBlockMaterial;
            public Exception? PickUpSound;
            public Exception? PutDownSound;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? Description;
            public MaskItem<Exception?, Model.ErrorMask?>? ScopeModel;
            public Exception? Unused;
            public Exception? ImpactDataSet;
            public Exception? FirstPersonModel;
            public Exception? AttackSound;
            public Exception? AttackSound2D;
            public Exception? AttackLoopSound;
            public Exception? AttackFailSound;
            public Exception? IdleSound;
            public Exception? EquipSound;
            public Exception? UnequipSound;
            public MaskItem<Exception?, WeaponBasicStats.ErrorMask?>? BasicStats;
            public MaskItem<Exception?, WeaponData.ErrorMask?>? Data;
            public MaskItem<Exception?, CriticalData.ErrorMask?>? Critical;
            public Exception? DetectionSoundLevel;
            public Exception? Template;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
                switch (enu)
                {
                    case Weapon_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Weapon_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Weapon_FieldIndex.Name:
                        return Name;
                    case Weapon_FieldIndex.Model:
                        return Model;
                    case Weapon_FieldIndex.Icons:
                        return Icons;
                    case Weapon_FieldIndex.ObjectEffect:
                        return ObjectEffect;
                    case Weapon_FieldIndex.EnchantmentAmount:
                        return EnchantmentAmount;
                    case Weapon_FieldIndex.Destructible:
                        return Destructible;
                    case Weapon_FieldIndex.EquipmentType:
                        return EquipmentType;
                    case Weapon_FieldIndex.BlockBashImpact:
                        return BlockBashImpact;
                    case Weapon_FieldIndex.AlternateBlockMaterial:
                        return AlternateBlockMaterial;
                    case Weapon_FieldIndex.PickUpSound:
                        return PickUpSound;
                    case Weapon_FieldIndex.PutDownSound:
                        return PutDownSound;
                    case Weapon_FieldIndex.Keywords:
                        return Keywords;
                    case Weapon_FieldIndex.Description:
                        return Description;
                    case Weapon_FieldIndex.ScopeModel:
                        return ScopeModel;
                    case Weapon_FieldIndex.Unused:
                        return Unused;
                    case Weapon_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case Weapon_FieldIndex.FirstPersonModel:
                        return FirstPersonModel;
                    case Weapon_FieldIndex.AttackSound:
                        return AttackSound;
                    case Weapon_FieldIndex.AttackSound2D:
                        return AttackSound2D;
                    case Weapon_FieldIndex.AttackLoopSound:
                        return AttackLoopSound;
                    case Weapon_FieldIndex.AttackFailSound:
                        return AttackFailSound;
                    case Weapon_FieldIndex.IdleSound:
                        return IdleSound;
                    case Weapon_FieldIndex.EquipSound:
                        return EquipSound;
                    case Weapon_FieldIndex.UnequipSound:
                        return UnequipSound;
                    case Weapon_FieldIndex.BasicStats:
                        return BasicStats;
                    case Weapon_FieldIndex.Data:
                        return Data;
                    case Weapon_FieldIndex.Critical:
                        return Critical;
                    case Weapon_FieldIndex.DetectionSoundLevel:
                        return DetectionSoundLevel;
                    case Weapon_FieldIndex.Template:
                        return Template;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
                switch (enu)
                {
                    case Weapon_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Weapon_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Icons:
                        this.Icons = new MaskItem<Exception?, Icons.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.ObjectEffect:
                        this.ObjectEffect = ex;
                        break;
                    case Weapon_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = ex;
                        break;
                    case Weapon_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.EquipmentType:
                        this.EquipmentType = ex;
                        break;
                    case Weapon_FieldIndex.BlockBashImpact:
                        this.BlockBashImpact = ex;
                        break;
                    case Weapon_FieldIndex.AlternateBlockMaterial:
                        this.AlternateBlockMaterial = ex;
                        break;
                    case Weapon_FieldIndex.PickUpSound:
                        this.PickUpSound = ex;
                        break;
                    case Weapon_FieldIndex.PutDownSound:
                        this.PutDownSound = ex;
                        break;
                    case Weapon_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Weapon_FieldIndex.ScopeModel:
                        this.ScopeModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    case Weapon_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case Weapon_FieldIndex.FirstPersonModel:
                        this.FirstPersonModel = ex;
                        break;
                    case Weapon_FieldIndex.AttackSound:
                        this.AttackSound = ex;
                        break;
                    case Weapon_FieldIndex.AttackSound2D:
                        this.AttackSound2D = ex;
                        break;
                    case Weapon_FieldIndex.AttackLoopSound:
                        this.AttackLoopSound = ex;
                        break;
                    case Weapon_FieldIndex.AttackFailSound:
                        this.AttackFailSound = ex;
                        break;
                    case Weapon_FieldIndex.IdleSound:
                        this.IdleSound = ex;
                        break;
                    case Weapon_FieldIndex.EquipSound:
                        this.EquipSound = ex;
                        break;
                    case Weapon_FieldIndex.UnequipSound:
                        this.UnequipSound = ex;
                        break;
                    case Weapon_FieldIndex.BasicStats:
                        this.BasicStats = new MaskItem<Exception?, WeaponBasicStats.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, WeaponData.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.Critical:
                        this.Critical = new MaskItem<Exception?, CriticalData.ErrorMask?>(ex, null);
                        break;
                    case Weapon_FieldIndex.DetectionSoundLevel:
                        this.DetectionSoundLevel = ex;
                        break;
                    case Weapon_FieldIndex.Template:
                        this.Template = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Weapon_FieldIndex enu = (Weapon_FieldIndex)index;
                switch (enu)
                {
                    case Weapon_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.Icons:
                        this.Icons = (MaskItem<Exception?, Icons.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.ObjectEffect:
                        this.ObjectEffect = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.EquipmentType:
                        this.EquipmentType = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.BlockBashImpact:
                        this.BlockBashImpact = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AlternateBlockMaterial:
                        this.AlternateBlockMaterial = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.PickUpSound:
                        this.PickUpSound = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.PutDownSound:
                        this.PutDownSound = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Weapon_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ScopeModel:
                        this.ScopeModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.FirstPersonModel:
                        this.FirstPersonModel = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AttackSound:
                        this.AttackSound = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AttackSound2D:
                        this.AttackSound2D = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AttackLoopSound:
                        this.AttackLoopSound = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.AttackFailSound:
                        this.AttackFailSound = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.IdleSound:
                        this.IdleSound = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.EquipSound:
                        this.EquipSound = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.UnequipSound:
                        this.UnequipSound = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.BasicStats:
                        this.BasicStats = (MaskItem<Exception?, WeaponBasicStats.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, WeaponData.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.Critical:
                        this.Critical = (MaskItem<Exception?, CriticalData.ErrorMask?>?)obj;
                        break;
                    case Weapon_FieldIndex.DetectionSoundLevel:
                        this.DetectionSoundLevel = (Exception?)obj;
                        break;
                    case Weapon_FieldIndex.Template:
                        this.Template = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Icons != null) return true;
                if (ObjectEffect != null) return true;
                if (EnchantmentAmount != null) return true;
                if (Destructible != null) return true;
                if (EquipmentType != null) return true;
                if (BlockBashImpact != null) return true;
                if (AlternateBlockMaterial != null) return true;
                if (PickUpSound != null) return true;
                if (PutDownSound != null) return true;
                if (Keywords != null) return true;
                if (Description != null) return true;
                if (ScopeModel != null) return true;
                if (Unused != null) return true;
                if (ImpactDataSet != null) return true;
                if (FirstPersonModel != null) return true;
                if (AttackSound != null) return true;
                if (AttackSound2D != null) return true;
                if (AttackLoopSound != null) return true;
                if (AttackFailSound != null) return true;
                if (IdleSound != null) return true;
                if (EquipSound != null) return true;
                if (UnequipSound != null) return true;
                if (BasicStats != null) return true;
                if (Data != null) return true;
                if (Critical != null) return true;
                if (DetectionSoundLevel != null) return true;
                if (Template != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                Icons?.ToString(fg);
                fg.AppendItem(ObjectEffect, "ObjectEffect");
                fg.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                Destructible?.ToString(fg);
                fg.AppendItem(EquipmentType, "EquipmentType");
                fg.AppendItem(BlockBashImpact, "BlockBashImpact");
                fg.AppendItem(AlternateBlockMaterial, "AlternateBlockMaterial");
                fg.AppendItem(PickUpSound, "PickUpSound");
                fg.AppendItem(PutDownSound, "PutDownSound");
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Description, "Description");
                ScopeModel?.ToString(fg);
                fg.AppendItem(Unused, "Unused");
                fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                fg.AppendItem(FirstPersonModel, "FirstPersonModel");
                fg.AppendItem(AttackSound, "AttackSound");
                fg.AppendItem(AttackSound2D, "AttackSound2D");
                fg.AppendItem(AttackLoopSound, "AttackLoopSound");
                fg.AppendItem(AttackFailSound, "AttackFailSound");
                fg.AppendItem(IdleSound, "IdleSound");
                fg.AppendItem(EquipSound, "EquipSound");
                fg.AppendItem(UnequipSound, "UnequipSound");
                BasicStats?.ToString(fg);
                Data?.ToString(fg);
                Critical?.ToString(fg);
                fg.AppendItem(DetectionSoundLevel, "DetectionSoundLevel");
                fg.AppendItem(Template, "Template");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Icons = this.Icons.Combine(rhs.Icons, (l, r) => l.Combine(r));
                ret.ObjectEffect = this.ObjectEffect.Combine(rhs.ObjectEffect);
                ret.EnchantmentAmount = this.EnchantmentAmount.Combine(rhs.EnchantmentAmount);
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.EquipmentType = this.EquipmentType.Combine(rhs.EquipmentType);
                ret.BlockBashImpact = this.BlockBashImpact.Combine(rhs.BlockBashImpact);
                ret.AlternateBlockMaterial = this.AlternateBlockMaterial.Combine(rhs.AlternateBlockMaterial);
                ret.PickUpSound = this.PickUpSound.Combine(rhs.PickUpSound);
                ret.PutDownSound = this.PutDownSound.Combine(rhs.PutDownSound);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.ScopeModel = this.ScopeModel.Combine(rhs.ScopeModel, (l, r) => l.Combine(r));
                ret.Unused = this.Unused.Combine(rhs.Unused);
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.FirstPersonModel = this.FirstPersonModel.Combine(rhs.FirstPersonModel);
                ret.AttackSound = this.AttackSound.Combine(rhs.AttackSound);
                ret.AttackSound2D = this.AttackSound2D.Combine(rhs.AttackSound2D);
                ret.AttackLoopSound = this.AttackLoopSound.Combine(rhs.AttackLoopSound);
                ret.AttackFailSound = this.AttackFailSound.Combine(rhs.AttackFailSound);
                ret.IdleSound = this.IdleSound.Combine(rhs.IdleSound);
                ret.EquipSound = this.EquipSound.Combine(rhs.EquipSound);
                ret.UnequipSound = this.UnequipSound.Combine(rhs.UnequipSound);
                ret.BasicStats = this.BasicStats.Combine(rhs.BasicStats, (l, r) => l.Combine(r));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.Critical = this.Critical.Combine(rhs.Critical, (l, r) => l.Combine(r));
                ret.DetectionSoundLevel = this.DetectionSoundLevel.Combine(rhs.DetectionSoundLevel);
                ret.Template = this.Template.Combine(rhs.Template);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public Model.TranslationMask? Model;
            public Icons.TranslationMask? Icons;
            public bool ObjectEffect;
            public bool EnchantmentAmount;
            public Destructible.TranslationMask? Destructible;
            public bool EquipmentType;
            public bool BlockBashImpact;
            public bool AlternateBlockMaterial;
            public bool PickUpSound;
            public bool PutDownSound;
            public bool Keywords;
            public bool Description;
            public Model.TranslationMask? ScopeModel;
            public bool Unused;
            public bool ImpactDataSet;
            public bool FirstPersonModel;
            public bool AttackSound;
            public bool AttackSound2D;
            public bool AttackLoopSound;
            public bool AttackFailSound;
            public bool IdleSound;
            public bool EquipSound;
            public bool UnequipSound;
            public WeaponBasicStats.TranslationMask? BasicStats;
            public WeaponData.TranslationMask? Data;
            public CriticalData.TranslationMask? Critical;
            public bool DetectionSoundLevel;
            public bool Template;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.ObjectEffect = defaultOn;
                this.EnchantmentAmount = defaultOn;
                this.EquipmentType = defaultOn;
                this.BlockBashImpact = defaultOn;
                this.AlternateBlockMaterial = defaultOn;
                this.PickUpSound = defaultOn;
                this.PutDownSound = defaultOn;
                this.Keywords = defaultOn;
                this.Description = defaultOn;
                this.Unused = defaultOn;
                this.ImpactDataSet = defaultOn;
                this.FirstPersonModel = defaultOn;
                this.AttackSound = defaultOn;
                this.AttackSound2D = defaultOn;
                this.AttackLoopSound = defaultOn;
                this.AttackFailSound = defaultOn;
                this.IdleSound = defaultOn;
                this.EquipSound = defaultOn;
                this.UnequipSound = defaultOn;
                this.DetectionSoundLevel = defaultOn;
                this.Template = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Icons != null ? Icons.OnOverall : DefaultOn, Icons?.GetCrystal()));
                ret.Add((ObjectEffect, null));
                ret.Add((EnchantmentAmount, null));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((EquipmentType, null));
                ret.Add((BlockBashImpact, null));
                ret.Add((AlternateBlockMaterial, null));
                ret.Add((PickUpSound, null));
                ret.Add((PutDownSound, null));
                ret.Add((Keywords, null));
                ret.Add((Description, null));
                ret.Add((ScopeModel != null ? ScopeModel.OnOverall : DefaultOn, ScopeModel?.GetCrystal()));
                ret.Add((Unused, null));
                ret.Add((ImpactDataSet, null));
                ret.Add((FirstPersonModel, null));
                ret.Add((AttackSound, null));
                ret.Add((AttackSound2D, null));
                ret.Add((AttackLoopSound, null));
                ret.Add((AttackFailSound, null));
                ret.Add((IdleSound, null));
                ret.Add((EquipSound, null));
                ret.Add((UnequipSound, null));
                ret.Add((BasicStats != null ? BasicStats.OnOverall : DefaultOn, BasicStats?.GetCrystal()));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((Critical != null ? Critical.OnOverall : DefaultOn, Critical?.GetCrystal()));
                ret.Add((DetectionSoundLevel, null));
                ret.Add((Template, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Weapon_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => WeaponCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeaponSetterCommon.Instance.RemapLinks(this, mapping);
        public Weapon(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Weapon(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Weapon(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Weapon(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Weapon(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeaponBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeaponBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Weapon CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Weapon();
            ((WeaponSetterCommon)((IWeaponGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Weapon item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((WeaponSetterCommon)((IWeaponGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Weapon GetNew()
        {
            return new Weapon();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeapon :
        IWeaponGetter,
        IFallout4MajorRecord,
        IItem,
        IObjectId,
        ITranslatedNamed,
        IHasIcons,
        IModeled,
        IObjectBounded,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IWeaponInternal>,
        IFormLinkContainer
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ObjectBounds ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new Model? Model { get; set; }
        new Icons? Icons { get; set; }
        new FormLinkNullable<IEffectRecordGetter> ObjectEffect { get; set; }
        new UInt16? EnchantmentAmount { get; set; }
        new Destructible? Destructible { get; set; }
        new FormLinkNullable<IEquipTypeGetter> EquipmentType { get; set; }
        new FormLinkNullable<IImpactDataSetGetter> BlockBashImpact { get; set; }
        new FormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; set; }
        new ExtendedList<IFormLink<IKeywordGetter>>? Keywords { get; set; }
        new TranslatedString? Description { get; set; }
        new Model? ScopeModel { get; set; }
        new MemorySlice<Byte>? Unused { get; set; }
        new FormLinkNullable<IImpactDataSetGetter> ImpactDataSet { get; set; }
        new FormLinkNullable<IStaticGetter> FirstPersonModel { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> AttackSound { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> AttackSound2D { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> AttackLoopSound { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> AttackFailSound { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> IdleSound { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> EquipSound { get; set; }
        new FormLinkNullable<ISoundDescriptorGetter> UnequipSound { get; set; }
        new WeaponBasicStats? BasicStats { get; set; }
        new WeaponData? Data { get; set; }
        new CriticalData? Critical { get; set; }
        new SoundLevel? DetectionSoundLevel { get; set; }
        new FormLinkNullable<IWeaponGetter> Template { get; set; }
        #region Mutagen
        new Weapon.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IWeaponInternal :
        IFallout4MajorRecordInternal,
        IWeapon,
        IWeaponGetter
    {
    }

    public partial interface IWeaponGetter :
        IFallout4MajorRecordGetter,
        IItemGetter,
        IObjectIdGetter,
        ITranslatedNamedGetter,
        IHasIconsGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IWeaponGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Weapon_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IObjectBoundsGetter ObjectBounds { get; }
        ITranslatedStringGetter? Name { get; }
        IModelGetter? Model { get; }
        IIconsGetter? Icons { get; }
        FormLinkNullable<IEffectRecordGetter> ObjectEffect { get; }
        UInt16? EnchantmentAmount { get; }
        IDestructibleGetter? Destructible { get; }
        FormLinkNullable<IEquipTypeGetter> EquipmentType { get; }
        FormLinkNullable<IImpactDataSetGetter> BlockBashImpact { get; }
        FormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial { get; }
        FormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; }
        FormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; }
        IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; }
        ITranslatedStringGetter? Description { get; }
        IModelGetter? ScopeModel { get; }
        ReadOnlyMemorySlice<Byte>? Unused { get; }
        FormLinkNullable<IImpactDataSetGetter> ImpactDataSet { get; }
        FormLinkNullable<IStaticGetter> FirstPersonModel { get; }
        FormLinkNullable<ISoundDescriptorGetter> AttackSound { get; }
        FormLinkNullable<ISoundDescriptorGetter> AttackSound2D { get; }
        FormLinkNullable<ISoundDescriptorGetter> AttackLoopSound { get; }
        FormLinkNullable<ISoundDescriptorGetter> AttackFailSound { get; }
        FormLinkNullable<ISoundDescriptorGetter> IdleSound { get; }
        FormLinkNullable<ISoundDescriptorGetter> EquipSound { get; }
        FormLinkNullable<ISoundDescriptorGetter> UnequipSound { get; }
        IWeaponBasicStatsGetter? BasicStats { get; }
        IWeaponDataGetter? Data { get; }
        ICriticalDataGetter? Critical { get; }
        SoundLevel? DetectionSoundLevel { get; }
        FormLinkNullable<IWeaponGetter> Template { get; }

        #region Mutagen
        Weapon.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class WeaponMixIn
    {
        public static void Clear(this IWeaponInternal item)
        {
            ((WeaponSetterCommon)((IWeaponGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Weapon.Mask<bool> GetEqualsMask(
            this IWeaponGetter item,
            IWeaponGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWeaponGetter item,
            string? name = null,
            Weapon.Mask<bool>? printMask = null)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWeaponGetter item,
            FileGeneration fg,
            string? name = null,
            Weapon.Mask<bool>? printMask = null)
        {
            ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWeaponGetter item,
            IWeaponGetter rhs)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWeaponInternal lhs,
            IWeaponGetter rhs,
            out Weapon.ErrorMask errorMask,
            Weapon.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeaponSetterTranslationCommon)((IWeaponGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Weapon.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeaponInternal lhs,
            IWeaponGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeaponSetterTranslationCommon)((IWeaponGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Weapon DeepCopy(
            this IWeaponGetter item,
            Weapon.TranslationMask? copyMask = null)
        {
            return ((WeaponSetterTranslationCommon)((IWeaponGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Weapon DeepCopy(
            this IWeaponGetter item,
            out Weapon.ErrorMask errorMask,
            Weapon.TranslationMask? copyMask = null)
        {
            return ((WeaponSetterTranslationCommon)((IWeaponGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Weapon DeepCopy(
            this IWeaponGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeaponSetterTranslationCommon)((IWeaponGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Weapon Duplicate(
            this IWeaponGetter item,
            FormKey formKey,
            Weapon.TranslationMask? copyMask = null)
        {
            return ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWeaponInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeaponSetterCommon)((IWeaponGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Weapon_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        Name = 8,
        Model = 9,
        Icons = 10,
        ObjectEffect = 11,
        EnchantmentAmount = 12,
        Destructible = 13,
        EquipmentType = 14,
        BlockBashImpact = 15,
        AlternateBlockMaterial = 16,
        PickUpSound = 17,
        PutDownSound = 18,
        Keywords = 19,
        Description = 20,
        ScopeModel = 21,
        Unused = 22,
        ImpactDataSet = 23,
        FirstPersonModel = 24,
        AttackSound = 25,
        AttackSound2D = 26,
        AttackLoopSound = 27,
        AttackFailSound = 28,
        IdleSound = 29,
        EquipSound = 30,
        UnequipSound = 31,
        BasicStats = 32,
        Data = 33,
        Critical = 34,
        DetectionSoundLevel = 35,
        Template = 36,
    }
    #endregion

    #region Registration
    public partial class Weapon_Registration : ILoquiRegistration
    {
        public static readonly Weapon_Registration Instance = new Weapon_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 169,
            version: 0);

        public const string GUID = "93888344-5257-4e1e-a99c-450b6e0d06bf";

        public const ushort AdditionalFieldCount = 31;

        public const ushort FieldCount = 37;

        public static readonly Type MaskType = typeof(Weapon.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Weapon.ErrorMask);

        public static readonly Type ClassType = typeof(Weapon);

        public static readonly Type GetterType = typeof(IWeaponGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeapon);

        public static readonly Type? InternalSetterType = typeof(IWeaponInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Weapon";

        public const string Name = "Weapon";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.WEAP;
        public static RecordTypeConverter ScopeModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD3")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO3T")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODS"),
                new RecordType("MO3S")));
        public static readonly Type BinaryWriteTranslation = typeof(WeaponBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class WeaponSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly WeaponSetterCommon Instance = new WeaponSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeaponInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Model = null;
            item.Icons = null;
            item.ObjectEffect = FormLinkNullable<IEffectRecordGetter>.Null;
            item.EnchantmentAmount = default;
            item.Destructible = null;
            item.EquipmentType = FormLinkNullable<IEquipTypeGetter>.Null;
            item.BlockBashImpact = FormLinkNullable<IImpactDataSetGetter>.Null;
            item.AlternateBlockMaterial = FormLinkNullable<IMaterialTypeGetter>.Null;
            item.PickUpSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.PutDownSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.Keywords = null;
            item.Description = default;
            item.ScopeModel = null;
            item.Unused = default;
            item.ImpactDataSet = FormLinkNullable<IImpactDataSetGetter>.Null;
            item.FirstPersonModel = FormLinkNullable<IStaticGetter>.Null;
            item.AttackSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.AttackSound2D = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.AttackLoopSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.AttackFailSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.IdleSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.EquipSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.UnequipSound = FormLinkNullable<ISoundDescriptorGetter>.Null;
            item.BasicStats = null;
            item.Data = null;
            item.Critical = null;
            item.DetectionSoundLevel = default;
            item.Template = FormLinkNullable<IWeaponGetter>.Null;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IWeaponInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWeaponInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IWeapon obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.ObjectEffect = obj.ObjectEffect.Relink(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.EquipmentType = obj.EquipmentType.Relink(mapping);
            obj.BlockBashImpact = obj.BlockBashImpact.Relink(mapping);
            obj.AlternateBlockMaterial = obj.AlternateBlockMaterial.Relink(mapping);
            obj.PickUpSound = obj.PickUpSound.Relink(mapping);
            obj.PutDownSound = obj.PutDownSound.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.ScopeModel?.RemapLinks(mapping);
            obj.ImpactDataSet = obj.ImpactDataSet.Relink(mapping);
            obj.FirstPersonModel = obj.FirstPersonModel.Relink(mapping);
            obj.AttackSound = obj.AttackSound.Relink(mapping);
            obj.AttackSound2D = obj.AttackSound2D.Relink(mapping);
            obj.AttackLoopSound = obj.AttackLoopSound.Relink(mapping);
            obj.AttackFailSound = obj.AttackFailSound.Relink(mapping);
            obj.IdleSound = obj.IdleSound.Relink(mapping);
            obj.EquipSound = obj.EquipSound.Relink(mapping);
            obj.UnequipSound = obj.UnequipSound.Relink(mapping);
            obj.Critical?.RemapLinks(mapping);
            obj.Template = obj.Template.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWeaponInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IWeaponInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: WeaponBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WeaponBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Weapon)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Weapon)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class WeaponCommon : Fallout4MajorRecordCommon
    {
        public new static readonly WeaponCommon Instance = new WeaponCommon();

        public Weapon.Mask<bool> GetEqualsMask(
            IWeaponGetter item,
            IWeaponGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Weapon.Mask<bool>(false);
            ((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeaponGetter item,
            IWeaponGetter rhs,
            Weapon.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Icons = EqualsMaskHelper.EqualsHelper(
                item.Icons,
                rhs.Icons,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectEffect = item.ObjectEffect.Equals(rhs.ObjectEffect);
            ret.EnchantmentAmount = item.EnchantmentAmount == rhs.EnchantmentAmount;
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EquipmentType = item.EquipmentType.Equals(rhs.EquipmentType);
            ret.BlockBashImpact = item.BlockBashImpact.Equals(rhs.BlockBashImpact);
            ret.AlternateBlockMaterial = item.AlternateBlockMaterial.Equals(rhs.AlternateBlockMaterial);
            ret.PickUpSound = item.PickUpSound.Equals(rhs.PickUpSound);
            ret.PutDownSound = item.PutDownSound.Equals(rhs.PutDownSound);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.ScopeModel = EqualsMaskHelper.EqualsHelper(
                item.ScopeModel,
                rhs.ScopeModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unused = MemorySliceExt.Equal(item.Unused, rhs.Unused);
            ret.ImpactDataSet = item.ImpactDataSet.Equals(rhs.ImpactDataSet);
            ret.FirstPersonModel = item.FirstPersonModel.Equals(rhs.FirstPersonModel);
            ret.AttackSound = item.AttackSound.Equals(rhs.AttackSound);
            ret.AttackSound2D = item.AttackSound2D.Equals(rhs.AttackSound2D);
            ret.AttackLoopSound = item.AttackLoopSound.Equals(rhs.AttackLoopSound);
            ret.AttackFailSound = item.AttackFailSound.Equals(rhs.AttackFailSound);
            ret.IdleSound = item.IdleSound.Equals(rhs.IdleSound);
            ret.EquipSound = item.EquipSound.Equals(rhs.EquipSound);
            ret.UnequipSound = item.UnequipSound.Equals(rhs.UnequipSound);
            ret.BasicStats = EqualsMaskHelper.EqualsHelper(
                item.BasicStats,
                rhs.BasicStats,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Critical = EqualsMaskHelper.EqualsHelper(
                item.Critical,
                rhs.Critical,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DetectionSoundLevel = item.DetectionSoundLevel == rhs.DetectionSoundLevel;
            ret.Template = item.Template.Equals(rhs.Template);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IWeaponGetter item,
            string? name = null,
            Weapon.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWeaponGetter item,
            FileGeneration fg,
            string? name = null,
            Weapon.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Weapon =>");
            }
            else
            {
                fg.AppendLine($"{name} (Weapon) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWeaponGetter item,
            FileGeneration fg,
            Weapon.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Icons?.Overall ?? true)
                && item.Icons.TryGet(out var IconsItem))
            {
                IconsItem?.ToString(fg, "Icons");
            }
            if (printMask?.ObjectEffect ?? true)
            {
                fg.AppendItem(item.ObjectEffect.FormKeyNullable, "ObjectEffect");
            }
            if ((printMask?.EnchantmentAmount ?? true)
                && item.EnchantmentAmount.TryGet(out var EnchantmentAmountItem))
            {
                fg.AppendItem(EnchantmentAmountItem, "EnchantmentAmount");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if (printMask?.EquipmentType ?? true)
            {
                fg.AppendItem(item.EquipmentType.FormKeyNullable, "EquipmentType");
            }
            if (printMask?.BlockBashImpact ?? true)
            {
                fg.AppendItem(item.BlockBashImpact.FormKeyNullable, "BlockBashImpact");
            }
            if (printMask?.AlternateBlockMaterial ?? true)
            {
                fg.AppendItem(item.AlternateBlockMaterial.FormKeyNullable, "AlternateBlockMaterial");
            }
            if (printMask?.PickUpSound ?? true)
            {
                fg.AppendItem(item.PickUpSound.FormKeyNullable, "PickUpSound");
            }
            if (printMask?.PutDownSound ?? true)
            {
                fg.AppendItem(item.PutDownSound.FormKeyNullable, "PutDownSound");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.ScopeModel?.Overall ?? true)
                && item.ScopeModel.TryGet(out var ScopeModelItem))
            {
                ScopeModelItem?.ToString(fg, "ScopeModel");
            }
            if ((printMask?.Unused ?? true)
                && item.Unused.TryGet(out var UnusedItem))
            {
                fg.AppendLine($"Unused => {SpanExt.ToHexString(UnusedItem)}");
            }
            if (printMask?.ImpactDataSet ?? true)
            {
                fg.AppendItem(item.ImpactDataSet.FormKeyNullable, "ImpactDataSet");
            }
            if (printMask?.FirstPersonModel ?? true)
            {
                fg.AppendItem(item.FirstPersonModel.FormKeyNullable, "FirstPersonModel");
            }
            if (printMask?.AttackSound ?? true)
            {
                fg.AppendItem(item.AttackSound.FormKeyNullable, "AttackSound");
            }
            if (printMask?.AttackSound2D ?? true)
            {
                fg.AppendItem(item.AttackSound2D.FormKeyNullable, "AttackSound2D");
            }
            if (printMask?.AttackLoopSound ?? true)
            {
                fg.AppendItem(item.AttackLoopSound.FormKeyNullable, "AttackLoopSound");
            }
            if (printMask?.AttackFailSound ?? true)
            {
                fg.AppendItem(item.AttackFailSound.FormKeyNullable, "AttackFailSound");
            }
            if (printMask?.IdleSound ?? true)
            {
                fg.AppendItem(item.IdleSound.FormKeyNullable, "IdleSound");
            }
            if (printMask?.EquipSound ?? true)
            {
                fg.AppendItem(item.EquipSound.FormKeyNullable, "EquipSound");
            }
            if (printMask?.UnequipSound ?? true)
            {
                fg.AppendItem(item.UnequipSound.FormKeyNullable, "UnequipSound");
            }
            if ((printMask?.BasicStats?.Overall ?? true)
                && item.BasicStats.TryGet(out var BasicStatsItem))
            {
                BasicStatsItem?.ToString(fg, "BasicStats");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
            if ((printMask?.Critical?.Overall ?? true)
                && item.Critical.TryGet(out var CriticalItem))
            {
                CriticalItem?.ToString(fg, "Critical");
            }
            if ((printMask?.DetectionSoundLevel ?? true)
                && item.DetectionSoundLevel.TryGet(out var DetectionSoundLevelItem))
            {
                fg.AppendItem(DetectionSoundLevelItem, "DetectionSoundLevel");
            }
            if (printMask?.Template ?? true)
            {
                fg.AppendItem(item.Template.FormKeyNullable, "Template");
            }
        }
        
        public static Weapon_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weapon_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Weapon_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Weapon_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Weapon_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Weapon_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Weapon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Weapon_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Weapon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Weapon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeaponGetter? lhs,
            IWeaponGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.Icons, rhs.Icons)) return false;
            if (!lhs.ObjectEffect.Equals(rhs.ObjectEffect)) return false;
            if (lhs.EnchantmentAmount != rhs.EnchantmentAmount) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (!lhs.EquipmentType.Equals(rhs.EquipmentType)) return false;
            if (!lhs.BlockBashImpact.Equals(rhs.BlockBashImpact)) return false;
            if (!lhs.AlternateBlockMaterial.Equals(rhs.AlternateBlockMaterial)) return false;
            if (!lhs.PickUpSound.Equals(rhs.PickUpSound)) return false;
            if (!lhs.PutDownSound.Equals(rhs.PutDownSound)) return false;
            if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            if (!object.Equals(lhs.Description, rhs.Description)) return false;
            if (!object.Equals(lhs.ScopeModel, rhs.ScopeModel)) return false;
            if (!MemorySliceExt.Equal(lhs.Unused, rhs.Unused)) return false;
            if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            if (!lhs.FirstPersonModel.Equals(rhs.FirstPersonModel)) return false;
            if (!lhs.AttackSound.Equals(rhs.AttackSound)) return false;
            if (!lhs.AttackSound2D.Equals(rhs.AttackSound2D)) return false;
            if (!lhs.AttackLoopSound.Equals(rhs.AttackLoopSound)) return false;
            if (!lhs.AttackFailSound.Equals(rhs.AttackFailSound)) return false;
            if (!lhs.IdleSound.Equals(rhs.IdleSound)) return false;
            if (!lhs.EquipSound.Equals(rhs.EquipSound)) return false;
            if (!lhs.UnequipSound.Equals(rhs.UnequipSound)) return false;
            if (!object.Equals(lhs.BasicStats, rhs.BasicStats)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (!object.Equals(lhs.Critical, rhs.Critical)) return false;
            if (lhs.DetectionSoundLevel != rhs.DetectionSoundLevel) return false;
            if (!lhs.Template.Equals(rhs.Template)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWeaponGetter?)lhs,
                rhs: rhs as IWeaponGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWeaponGetter?)lhs,
                rhs: rhs as IWeaponGetter);
        }
        
        public virtual int GetHashCode(IWeaponGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Icons.TryGet(out var Iconsitem))
            {
                hash.Add(Iconsitem);
            }
            hash.Add(item.ObjectEffect);
            if (item.EnchantmentAmount.TryGet(out var EnchantmentAmountitem))
            {
                hash.Add(EnchantmentAmountitem);
            }
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.EquipmentType);
            hash.Add(item.BlockBashImpact);
            hash.Add(item.AlternateBlockMaterial);
            hash.Add(item.PickUpSound);
            hash.Add(item.PutDownSound);
            hash.Add(item.Keywords);
            if (item.Description.TryGet(out var Descriptionitem))
            {
                hash.Add(Descriptionitem);
            }
            if (item.ScopeModel.TryGet(out var ScopeModelitem))
            {
                hash.Add(ScopeModelitem);
            }
            if (item.Unused.TryGet(out var UnusedItem))
            {
                hash.Add(UnusedItem);
            }
            hash.Add(item.ImpactDataSet);
            hash.Add(item.FirstPersonModel);
            hash.Add(item.AttackSound);
            hash.Add(item.AttackSound2D);
            hash.Add(item.AttackLoopSound);
            hash.Add(item.AttackFailSound);
            hash.Add(item.IdleSound);
            hash.Add(item.EquipSound);
            hash.Add(item.UnequipSound);
            if (item.BasicStats.TryGet(out var BasicStatsitem))
            {
                hash.Add(BasicStatsitem);
            }
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            if (item.Critical.TryGet(out var Criticalitem))
            {
                hash.Add(Criticalitem);
            }
            if (item.DetectionSoundLevel.TryGet(out var DetectionSoundLevelitem))
            {
                hash.Add(DetectionSoundLevelitem);
            }
            hash.Add(item.Template);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IWeaponGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeaponGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Weapon.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IWeaponGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ObjectEffect.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ObjectEffect);
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.EquipmentType.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.EquipmentType);
            }
            if (obj.BlockBashImpact.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.BlockBashImpact);
            }
            if (obj.AlternateBlockMaterial.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AlternateBlockMaterial);
            }
            if (obj.PickUpSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PickUpSound);
            }
            if (obj.PutDownSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PutDownSound);
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ScopeModel.TryGet(out var ScopeModelItems))
            {
                foreach (var item in ScopeModelItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ImpactDataSet.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ImpactDataSet);
            }
            if (obj.FirstPersonModel.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.FirstPersonModel);
            }
            if (obj.AttackSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AttackSound);
            }
            if (obj.AttackSound2D.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AttackSound2D);
            }
            if (obj.AttackLoopSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AttackLoopSound);
            }
            if (obj.AttackFailSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AttackFailSound);
            }
            if (obj.IdleSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.IdleSound);
            }
            if (obj.EquipSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.EquipSound);
            }
            if (obj.UnequipSound.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.UnequipSound);
            }
            if (obj.Critical.TryGet(out var CriticalItems))
            {
                foreach (var item in CriticalItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Template.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Template);
            }
            yield break;
        }
        
        #region Duplicate
        public Weapon Duplicate(
            IWeaponGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Weapon(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWeapon)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWeapon)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class WeaponSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly WeaponSetterTranslationCommon Instance = new WeaponSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWeaponInternal item,
            IWeaponGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IWeapon item,
            IWeaponGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weapon_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Icons) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Icons);
                try
                {
                    if(rhs.Icons.TryGet(out var rhsIcons))
                    {
                        item.Icons = rhsIcons.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.Icons));
                    }
                    else
                    {
                        item.Icons = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ObjectEffect) ?? true))
            {
                item.ObjectEffect = new FormLinkNullable<IEffectRecordGetter>(rhs.ObjectEffect.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.EnchantmentAmount) ?? true))
            {
                item.EnchantmentAmount = rhs.EnchantmentAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.EquipmentType) ?? true))
            {
                item.EquipmentType = new FormLinkNullable<IEquipTypeGetter>(rhs.EquipmentType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.BlockBashImpact) ?? true))
            {
                item.BlockBashImpact = new FormLinkNullable<IImpactDataSetGetter>(rhs.BlockBashImpact.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AlternateBlockMaterial) ?? true))
            {
                item.AlternateBlockMaterial = new FormLinkNullable<IMaterialTypeGetter>(rhs.AlternateBlockMaterial.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.PickUpSound) ?? true))
            {
                item.PickUpSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.PickUpSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.PutDownSound) ?? true))
            {
                item.PutDownSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.PutDownSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ScopeModel) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.ScopeModel);
                try
                {
                    if(rhs.ScopeModel.TryGet(out var rhsScopeModel))
                    {
                        item.ScopeModel = rhsScopeModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.ScopeModel));
                    }
                    else
                    {
                        item.ScopeModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Unused) ?? true))
            {
                if(rhs.Unused.TryGet(out var Unusedrhs))
                {
                    item.Unused = Unusedrhs.ToArray();
                }
                else
                {
                    item.Unused = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet = new FormLinkNullable<IImpactDataSetGetter>(rhs.ImpactDataSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.FirstPersonModel) ?? true))
            {
                item.FirstPersonModel = new FormLinkNullable<IStaticGetter>(rhs.FirstPersonModel.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackSound) ?? true))
            {
                item.AttackSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.AttackSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackSound2D) ?? true))
            {
                item.AttackSound2D = new FormLinkNullable<ISoundDescriptorGetter>(rhs.AttackSound2D.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackLoopSound) ?? true))
            {
                item.AttackLoopSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.AttackLoopSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.AttackFailSound) ?? true))
            {
                item.AttackFailSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.AttackFailSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.IdleSound) ?? true))
            {
                item.IdleSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.IdleSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.EquipSound) ?? true))
            {
                item.EquipSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.EquipSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.UnequipSound) ?? true))
            {
                item.UnequipSound = new FormLinkNullable<ISoundDescriptorGetter>(rhs.UnequipSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.BasicStats) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.BasicStats);
                try
                {
                    if(rhs.BasicStats.TryGet(out var rhsBasicStats))
                    {
                        item.BasicStats = rhsBasicStats.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.BasicStats));
                    }
                    else
                    {
                        item.BasicStats = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Critical) ?? true))
            {
                errorMask?.PushIndex((int)Weapon_FieldIndex.Critical);
                try
                {
                    if(rhs.Critical.TryGet(out var rhsCritical))
                    {
                        item.Critical = rhsCritical.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weapon_FieldIndex.Critical));
                    }
                    else
                    {
                        item.Critical = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.DetectionSoundLevel) ?? true))
            {
                item.DetectionSoundLevel = rhs.DetectionSoundLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Weapon_FieldIndex.Template) ?? true))
            {
                item.Template = new FormLinkNullable<IWeaponGetter>(rhs.Template.FormKeyNullable);
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeaponInternal)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeapon)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeaponInternal)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeapon)item,
                rhs: (IWeaponGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Weapon DeepCopy(
            IWeaponGetter item,
            Weapon.TranslationMask? copyMask = null)
        {
            Weapon ret = (Weapon)((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetNew();
            ((WeaponSetterTranslationCommon)((IWeaponGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Weapon DeepCopy(
            IWeaponGetter item,
            out Weapon.ErrorMask errorMask,
            Weapon.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Weapon ret = (Weapon)((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetNew();
            ((WeaponSetterTranslationCommon)((IWeaponGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Weapon.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Weapon DeepCopy(
            IWeaponGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Weapon ret = (Weapon)((WeaponCommon)((IWeaponGetter)item).CommonInstance()!).GetNew();
            ((WeaponSetterTranslationCommon)((IWeaponGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Weapon
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weapon_Registration.Instance;
        public new static Weapon_Registration Registration => Weapon_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeaponCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WeaponSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeaponSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class WeaponBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static WeaponBinaryWriteTranslation Instance = new WeaponBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IWeaponGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Icons.TryGet(out var IconsItem))
            {
                ((IconsBinaryWriteTranslation)((IBinaryItem)IconsItem).BinaryWriteTranslator).Write(
                    item: IconsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObjectEffect,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.EITM));
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EnchantmentAmount,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.EAMT));
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EquipmentType,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ETYP));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BlockBashImpact,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.BIDS));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AlternateBlockMaterial,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.BAMT));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PickUpSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.YNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PutDownSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ZNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLink<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            if (item.ScopeModel.TryGet(out var ScopeModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ScopeModelItem).BinaryWriteTranslator).Write(
                    item: ScopeModelItem,
                    writer: writer,
                    recordTypeConverter: Weapon_Registration.ScopeModelConverter);
            }
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unused,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImpactDataSet,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.INAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FirstPersonModel,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.WNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackSound2D,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.XNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackLoopSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM7));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackFailSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.IdleSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.UNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EquipSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM9));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UnequipSound,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM8));
            if (item.BasicStats.TryGet(out var BasicStatsItem))
            {
                ((WeaponBasicStatsBinaryWriteTranslation)((IBinaryItem)BasicStatsItem).BinaryWriteTranslator).Write(
                    item: BasicStatsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Data.TryGet(out var DataItem))
            {
                ((WeaponDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Critical.TryGet(out var CriticalItem))
            {
                ((CriticalDataBinaryWriteTranslation)((IBinaryItem)CriticalItem).BinaryWriteTranslator).Write(
                    item: CriticalItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoundLevel>.Instance.WriteNullable(
                writer,
                item.DetectionSoundLevel,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.VNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Template,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM));
        }

        public void Write(
            MutagenWriter writer,
            IWeaponGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.WEAP),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeaponGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeaponGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeaponGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WeaponBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static WeaponBinaryCreateTranslation Instance = new WeaponBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.WEAP;
        public static void FillBinaryStructs(
            IWeaponInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IWeaponInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)Weapon_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Weapon_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Weapon_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Weapon_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    item.Icons = Mutagen.Bethesda.Fallout4.Icons.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Weapon_FieldIndex.Icons;
                }
                case RecordTypeInts.EITM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObjectEffect = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.ObjectEffect;
                }
                case RecordTypeInts.EAMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EnchantmentAmount = frame.ReadUInt16();
                    return (int)Weapon_FieldIndex.EnchantmentAmount;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Fallout4.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Weapon_FieldIndex.Destructible;
                }
                case RecordTypeInts.ETYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipmentType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.BIDS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BlockBashImpact = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.BlockBashImpact;
                }
                case RecordTypeInts.BAMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AlternateBlockMaterial = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.AlternateBlockMaterial;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PickUpSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PutDownSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.Parse(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<IKeywordGetter>>();
                    return (int)Weapon_FieldIndex.Keywords;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Weapon_FieldIndex.Description;
                }
                case RecordTypeInts.MOD3:
                {
                    item.ScopeModel = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: Weapon_Registration.ScopeModelConverter);
                    return (int)Weapon_FieldIndex.ScopeModel;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Unused = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Weapon_FieldIndex.Unused;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImpactDataSet = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.ImpactDataSet;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FirstPersonModel = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.FirstPersonModel;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.AttackSound;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackSound2D = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.AttackSound2D;
                }
                case RecordTypeInts.NAM7:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackLoopSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.AttackLoopSound;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackFailSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.AttackFailSound;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IdleSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.IdleSound;
                }
                case RecordTypeInts.NAM9:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.EquipSound;
                }
                case RecordTypeInts.NAM8:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UnequipSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.UnequipSound;
                }
                case RecordTypeInts.DATA:
                {
                    item.BasicStats = Mutagen.Bethesda.Fallout4.WeaponBasicStats.CreateFromBinary(frame: frame);
                    return (int)Weapon_FieldIndex.BasicStats;
                }
                case RecordTypeInts.DNAM:
                {
                    item.Data = Mutagen.Bethesda.Fallout4.WeaponData.CreateFromBinary(frame: frame);
                    return (int)Weapon_FieldIndex.Data;
                }
                case RecordTypeInts.CRDT:
                {
                    item.Critical = Mutagen.Bethesda.Fallout4.CriticalData.CreateFromBinary(frame: frame);
                    return (int)Weapon_FieldIndex.Critical;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DetectionSoundLevel = EnumBinaryTranslation<SoundLevel>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Weapon_FieldIndex.DetectionSoundLevel;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Template = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weapon_FieldIndex.Template;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class WeaponBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class WeaponBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IWeaponGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weapon_Registration.Instance;
        public new static Weapon_Registration Registration => Weapon_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeaponCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeaponSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => WeaponCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeaponBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeaponBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Weapon.MajorFlag MajorFlags => (Weapon.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IModelGetter? Model { get; private set; }
        public IIconsGetter? Icons { get; private set; }
        #region ObjectEffect
        private int? _ObjectEffectLocation;
        public FormLinkNullable<IEffectRecordGetter> ObjectEffect => _ObjectEffectLocation.HasValue ? new FormLinkNullable<IEffectRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ObjectEffectLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEffectRecordGetter>.Null;
        #endregion
        #region EnchantmentAmount
        private int? _EnchantmentAmountLocation;
        public UInt16? EnchantmentAmount => _EnchantmentAmountLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EnchantmentAmountLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        public IDestructibleGetter? Destructible { get; private set; }
        #region EquipmentType
        private int? _EquipmentTypeLocation;
        public FormLinkNullable<IEquipTypeGetter> EquipmentType => _EquipmentTypeLocation.HasValue ? new FormLinkNullable<IEquipTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EquipmentTypeLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IEquipTypeGetter>.Null;
        #endregion
        #region BlockBashImpact
        private int? _BlockBashImpactLocation;
        public FormLinkNullable<IImpactDataSetGetter> BlockBashImpact => _BlockBashImpactLocation.HasValue ? new FormLinkNullable<IImpactDataSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _BlockBashImpactLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IImpactDataSetGetter>.Null;
        #endregion
        #region AlternateBlockMaterial
        private int? _AlternateBlockMaterialLocation;
        public FormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial => _AlternateBlockMaterialLocation.HasValue ? new FormLinkNullable<IMaterialTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AlternateBlockMaterialLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IMaterialTypeGetter>.Null;
        #endregion
        #region PickUpSound
        private int? _PickUpSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> PickUpSound => _PickUpSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PickUpSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region PutDownSound
        private int? _PutDownSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> PutDownSound => _PutDownSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PutDownSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IModelGetter? ScopeModel { get; private set; }
        #region Unused
        private int? _UnusedLocation;
        public ReadOnlyMemorySlice<Byte>? Unused => _UnusedLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _UnusedLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ImpactDataSet
        private int? _ImpactDataSetLocation;
        public FormLinkNullable<IImpactDataSetGetter> ImpactDataSet => _ImpactDataSetLocation.HasValue ? new FormLinkNullable<IImpactDataSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ImpactDataSetLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IImpactDataSetGetter>.Null;
        #endregion
        #region FirstPersonModel
        private int? _FirstPersonModelLocation;
        public FormLinkNullable<IStaticGetter> FirstPersonModel => _FirstPersonModelLocation.HasValue ? new FormLinkNullable<IStaticGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FirstPersonModelLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IStaticGetter>.Null;
        #endregion
        #region AttackSound
        private int? _AttackSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> AttackSound => _AttackSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AttackSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region AttackSound2D
        private int? _AttackSound2DLocation;
        public FormLinkNullable<ISoundDescriptorGetter> AttackSound2D => _AttackSound2DLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AttackSound2DLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region AttackLoopSound
        private int? _AttackLoopSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> AttackLoopSound => _AttackLoopSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AttackLoopSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region AttackFailSound
        private int? _AttackFailSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> AttackFailSound => _AttackFailSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AttackFailSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region IdleSound
        private int? _IdleSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> IdleSound => _IdleSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _IdleSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region EquipSound
        private int? _EquipSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> EquipSound => _EquipSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EquipSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region UnequipSound
        private int? _UnequipSoundLocation;
        public FormLinkNullable<ISoundDescriptorGetter> UnequipSound => _UnequipSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _UnequipSoundLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region BasicStats
        private RangeInt32? _BasicStatsLocation;
        public IWeaponBasicStatsGetter? BasicStats => _BasicStatsLocation.HasValue ? WeaponBasicStatsBinaryOverlay.WeaponBasicStatsFactory(new OverlayStream(_data.Slice(_BasicStatsLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Data
        private RangeInt32? _DataLocation;
        public IWeaponDataGetter? Data => _DataLocation.HasValue ? WeaponDataBinaryOverlay.WeaponDataFactory(new OverlayStream(_data.Slice(_DataLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Critical
        private RangeInt32? _CriticalLocation;
        public ICriticalDataGetter? Critical => _CriticalLocation.HasValue ? CriticalDataBinaryOverlay.CriticalDataFactory(new OverlayStream(_data.Slice(_CriticalLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region DetectionSoundLevel
        private int? _DetectionSoundLevelLocation;
        public SoundLevel? DetectionSoundLevel => _DetectionSoundLevelLocation.HasValue ? (SoundLevel)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _DetectionSoundLevelLocation!.Value, _package.MetaData.Constants)) : default(SoundLevel?);
        #endregion
        #region Template
        private int? _TemplateLocation;
        public FormLinkNullable<IWeaponGetter> Template => _TemplateLocation.HasValue ? new FormLinkNullable<IWeaponGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _TemplateLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IWeaponGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WeaponBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static WeaponBinaryOverlay WeaponFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new WeaponBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static WeaponBinaryOverlay WeaponFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return WeaponFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Weapon_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Weapon_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Weapon_FieldIndex.Model;
                }
                case RecordTypeInts.ICON:
                {
                    this.Icons = IconsBinaryOverlay.IconsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Weapon_FieldIndex.Icons;
                }
                case RecordTypeInts.EITM:
                {
                    _ObjectEffectLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.ObjectEffect;
                }
                case RecordTypeInts.EAMT:
                {
                    _EnchantmentAmountLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.EnchantmentAmount;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Weapon_FieldIndex.Destructible;
                }
                case RecordTypeInts.ETYP:
                {
                    _EquipmentTypeLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.BIDS:
                {
                    _BlockBashImpactLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.BlockBashImpact;
                }
                case RecordTypeInts.BAMT:
                {
                    _AlternateBlockMaterialLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.AlternateBlockMaterial;
                }
                case RecordTypeInts.YNAM:
                {
                    _PickUpSoundLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    _PutDownSoundLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLink<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Weapon_FieldIndex.Keywords;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.Description;
                }
                case RecordTypeInts.MOD3:
                {
                    this.ScopeModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: Weapon_Registration.ScopeModelConverter);
                    return (int)Weapon_FieldIndex.ScopeModel;
                }
                case RecordTypeInts.NNAM:
                {
                    _UnusedLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.Unused;
                }
                case RecordTypeInts.INAM:
                {
                    _ImpactDataSetLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.ImpactDataSet;
                }
                case RecordTypeInts.WNAM:
                {
                    _FirstPersonModelLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.FirstPersonModel;
                }
                case RecordTypeInts.SNAM:
                {
                    _AttackSoundLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.AttackSound;
                }
                case RecordTypeInts.XNAM:
                {
                    _AttackSound2DLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.AttackSound2D;
                }
                case RecordTypeInts.NAM7:
                {
                    _AttackLoopSoundLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.AttackLoopSound;
                }
                case RecordTypeInts.TNAM:
                {
                    _AttackFailSoundLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.AttackFailSound;
                }
                case RecordTypeInts.UNAM:
                {
                    _IdleSoundLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.IdleSound;
                }
                case RecordTypeInts.NAM9:
                {
                    _EquipSoundLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.EquipSound;
                }
                case RecordTypeInts.NAM8:
                {
                    _UnequipSoundLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.UnequipSound;
                }
                case RecordTypeInts.DATA:
                {
                    _BasicStatsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Weapon_FieldIndex.BasicStats;
                }
                case RecordTypeInts.DNAM:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Weapon_FieldIndex.Data;
                }
                case RecordTypeInts.CRDT:
                {
                    _CriticalLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Weapon_FieldIndex.Critical;
                }
                case RecordTypeInts.VNAM:
                {
                    _DetectionSoundLevelLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.DetectionSoundLevel;
                }
                case RecordTypeInts.CNAM:
                {
                    _TemplateLocation = (stream.Position - offset);
                    return (int)Weapon_FieldIndex.Template;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeaponMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWeaponGetter rhs)) return false;
            return ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IWeaponGetter? obj)
        {
            return ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WeaponCommon)((IWeaponGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

