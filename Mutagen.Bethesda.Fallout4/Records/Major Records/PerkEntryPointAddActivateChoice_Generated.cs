/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PerkEntryPointAddActivateChoice :
        APerkEntryPointEffect,
        IPerkEntryPointAddActivateChoice,
        ILoquiObjectSetter<PerkEntryPointAddActivateChoice>,
        IEquatable<IPerkEntryPointAddActivateChoiceGetter>
    {
        #region Ctor
        public PerkEntryPointAddActivateChoice()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Spell
        public FormLinkNullable<ISpellGetter> Spell { get; set; } = new FormLinkNullable<ISpellGetter>();
        #endregion
        #region ButtonLabel
        public TranslatedString? ButtonLabel { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IPerkEntryPointAddActivateChoiceGetter.ButtonLabel => this.ButtonLabel;
        #endregion
        #region Flags
        public PerkScriptFlag Flags { get; set; } = new PerkScriptFlag();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPerkScriptFlagGetter IPerkEntryPointAddActivateChoiceGetter.Flags => Flags;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkEntryPointAddActivateChoiceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPerkEntryPointAddActivateChoiceGetter rhs)) return false;
            return ((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPerkEntryPointAddActivateChoiceGetter? obj)
        {
            return ((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APerkEntryPointEffect.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Spell = initialValue;
                this.ButtonLabel = initialValue;
                this.Flags = new MaskItem<TItem, PerkScriptFlag.Mask<TItem>?>(initialValue, new PerkScriptFlag.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Rank,
                TItem Priority,
                TItem Conditions,
                TItem PRKEDataTypeState,
                TItem EntryPoint,
                TItem PerkConditionTabCount,
                TItem Spell,
                TItem ButtonLabel,
                TItem Flags)
            : base(
                Rank: Rank,
                Priority: Priority,
                Conditions: Conditions,
                PRKEDataTypeState: PRKEDataTypeState,
                EntryPoint: EntryPoint,
                PerkConditionTabCount: PerkConditionTabCount)
            {
                this.Spell = Spell;
                this.ButtonLabel = ButtonLabel;
                this.Flags = new MaskItem<TItem, PerkScriptFlag.Mask<TItem>?>(Flags, new PerkScriptFlag.Mask<TItem>(Flags));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Spell;
            public TItem ButtonLabel;
            public MaskItem<TItem, PerkScriptFlag.Mask<TItem>?>? Flags { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Spell, rhs.Spell)) return false;
                if (!object.Equals(this.ButtonLabel, rhs.ButtonLabel)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Spell);
                hash.Add(this.ButtonLabel);
                hash.Add(this.Flags);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Spell)) return false;
                if (!eval(this.ButtonLabel)) return false;
                if (Flags != null)
                {
                    if (!eval(this.Flags.Overall)) return false;
                    if (this.Flags.Specific != null && !this.Flags.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Spell)) return true;
                if (eval(this.ButtonLabel)) return true;
                if (Flags != null)
                {
                    if (eval(this.Flags.Overall)) return true;
                    if (this.Flags.Specific != null && this.Flags.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PerkEntryPointAddActivateChoice.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Spell = eval(this.Spell);
                obj.ButtonLabel = eval(this.ButtonLabel);
                obj.Flags = this.Flags == null ? null : new MaskItem<R, PerkScriptFlag.Mask<R>?>(eval(this.Flags.Overall), this.Flags.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PerkEntryPointAddActivateChoice.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PerkEntryPointAddActivateChoice.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PerkEntryPointAddActivateChoice.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Spell ?? true)
                    {
                        fg.AppendItem(Spell, "Spell");
                    }
                    if (printMask?.ButtonLabel ?? true)
                    {
                        fg.AppendItem(ButtonLabel, "ButtonLabel");
                    }
                    if (printMask?.Flags?.Overall ?? true)
                    {
                        Flags?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APerkEntryPointEffect.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Spell;
            public Exception? ButtonLabel;
            public MaskItem<Exception?, PerkScriptFlag.ErrorMask?>? Flags;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PerkEntryPointAddActivateChoice_FieldIndex enu = (PerkEntryPointAddActivateChoice_FieldIndex)index;
                switch (enu)
                {
                    case PerkEntryPointAddActivateChoice_FieldIndex.Spell:
                        return Spell;
                    case PerkEntryPointAddActivateChoice_FieldIndex.ButtonLabel:
                        return ButtonLabel;
                    case PerkEntryPointAddActivateChoice_FieldIndex.Flags:
                        return Flags;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PerkEntryPointAddActivateChoice_FieldIndex enu = (PerkEntryPointAddActivateChoice_FieldIndex)index;
                switch (enu)
                {
                    case PerkEntryPointAddActivateChoice_FieldIndex.Spell:
                        this.Spell = ex;
                        break;
                    case PerkEntryPointAddActivateChoice_FieldIndex.ButtonLabel:
                        this.ButtonLabel = ex;
                        break;
                    case PerkEntryPointAddActivateChoice_FieldIndex.Flags:
                        this.Flags = new MaskItem<Exception?, PerkScriptFlag.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PerkEntryPointAddActivateChoice_FieldIndex enu = (PerkEntryPointAddActivateChoice_FieldIndex)index;
                switch (enu)
                {
                    case PerkEntryPointAddActivateChoice_FieldIndex.Spell:
                        this.Spell = (Exception?)obj;
                        break;
                    case PerkEntryPointAddActivateChoice_FieldIndex.ButtonLabel:
                        this.ButtonLabel = (Exception?)obj;
                        break;
                    case PerkEntryPointAddActivateChoice_FieldIndex.Flags:
                        this.Flags = (MaskItem<Exception?, PerkScriptFlag.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Spell != null) return true;
                if (ButtonLabel != null) return true;
                if (Flags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Spell, "Spell");
                fg.AppendItem(ButtonLabel, "ButtonLabel");
                Flags?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Spell = this.Spell.Combine(rhs.Spell);
                ret.ButtonLabel = this.ButtonLabel.Combine(rhs.ButtonLabel);
                ret.Flags = this.Flags.Combine(rhs.Flags, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APerkEntryPointEffect.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Spell;
            public bool ButtonLabel;
            public PerkScriptFlag.TranslationMask? Flags;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Spell = defaultOn;
                this.ButtonLabel = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Spell, null));
                ret.Add((ButtonLabel, null));
                ret.Add((Flags != null ? Flags.OnOverall : DefaultOn, Flags?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PerkEntryPointAddActivateChoice_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PerkEntryPointAddActivateChoiceCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PerkEntryPointAddActivateChoiceSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PerkEntryPointAddActivateChoiceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkEntryPointAddActivateChoiceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static PerkEntryPointAddActivateChoice CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkEntryPointAddActivateChoice();
            ((PerkEntryPointAddActivateChoiceSetterCommon)((IPerkEntryPointAddActivateChoiceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PerkEntryPointAddActivateChoice item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PerkEntryPointAddActivateChoiceSetterCommon)((IPerkEntryPointAddActivateChoiceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PerkEntryPointAddActivateChoice GetNew()
        {
            return new PerkEntryPointAddActivateChoice();
        }

    }
    #endregion

    #region Interface
    public partial interface IPerkEntryPointAddActivateChoice :
        IPerkEntryPointAddActivateChoiceGetter,
        IAPerkEntryPointEffect,
        ILoquiObjectSetter<IPerkEntryPointAddActivateChoice>,
        IFormLinkContainer
    {
        new FormLinkNullable<ISpellGetter> Spell { get; set; }
        new TranslatedString? ButtonLabel { get; set; }
        new PerkScriptFlag Flags { get; set; }
    }

    public partial interface IPerkEntryPointAddActivateChoiceGetter :
        IAPerkEntryPointEffectGetter,
        ILoquiObject<IPerkEntryPointAddActivateChoiceGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => PerkEntryPointAddActivateChoice_Registration.Instance;
        FormLinkNullable<ISpellGetter> Spell { get; }
        ITranslatedStringGetter? ButtonLabel { get; }
        IPerkScriptFlagGetter Flags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PerkEntryPointAddActivateChoiceMixIn
    {
        public static void Clear(this IPerkEntryPointAddActivateChoice item)
        {
            ((PerkEntryPointAddActivateChoiceSetterCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PerkEntryPointAddActivateChoice.Mask<bool> GetEqualsMask(
            this IPerkEntryPointAddActivateChoiceGetter item,
            IPerkEntryPointAddActivateChoiceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPerkEntryPointAddActivateChoiceGetter item,
            string? name = null,
            PerkEntryPointAddActivateChoice.Mask<bool>? printMask = null)
        {
            return ((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPerkEntryPointAddActivateChoiceGetter item,
            FileGeneration fg,
            string? name = null,
            PerkEntryPointAddActivateChoice.Mask<bool>? printMask = null)
        {
            ((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPerkEntryPointAddActivateChoiceGetter item,
            IPerkEntryPointAddActivateChoiceGetter rhs)
        {
            return ((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPerkEntryPointAddActivateChoice lhs,
            IPerkEntryPointAddActivateChoiceGetter rhs,
            out PerkEntryPointAddActivateChoice.ErrorMask errorMask,
            PerkEntryPointAddActivateChoice.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PerkEntryPointAddActivateChoiceSetterTranslationCommon)((IPerkEntryPointAddActivateChoiceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PerkEntryPointAddActivateChoice.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPerkEntryPointAddActivateChoice lhs,
            IPerkEntryPointAddActivateChoiceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PerkEntryPointAddActivateChoiceSetterTranslationCommon)((IPerkEntryPointAddActivateChoiceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PerkEntryPointAddActivateChoice DeepCopy(
            this IPerkEntryPointAddActivateChoiceGetter item,
            PerkEntryPointAddActivateChoice.TranslationMask? copyMask = null)
        {
            return ((PerkEntryPointAddActivateChoiceSetterTranslationCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PerkEntryPointAddActivateChoice DeepCopy(
            this IPerkEntryPointAddActivateChoiceGetter item,
            out PerkEntryPointAddActivateChoice.ErrorMask errorMask,
            PerkEntryPointAddActivateChoice.TranslationMask? copyMask = null)
        {
            return ((PerkEntryPointAddActivateChoiceSetterTranslationCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PerkEntryPointAddActivateChoice DeepCopy(
            this IPerkEntryPointAddActivateChoiceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PerkEntryPointAddActivateChoiceSetterTranslationCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPerkEntryPointAddActivateChoice item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkEntryPointAddActivateChoiceSetterCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PerkEntryPointAddActivateChoice_FieldIndex
    {
        Rank = 0,
        Priority = 1,
        Conditions = 2,
        PRKEDataTypeState = 3,
        EntryPoint = 4,
        PerkConditionTabCount = 5,
        Spell = 6,
        ButtonLabel = 7,
        Flags = 8,
    }
    #endregion

    #region Registration
    public partial class PerkEntryPointAddActivateChoice_Registration : ILoquiRegistration
    {
        public static readonly PerkEntryPointAddActivateChoice_Registration Instance = new PerkEntryPointAddActivateChoice_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 422,
            version: 0);

        public const string GUID = "628923c0-a9a0-489d-a73e-934ee88f5351";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(PerkEntryPointAddActivateChoice.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PerkEntryPointAddActivateChoice.ErrorMask);

        public static readonly Type ClassType = typeof(PerkEntryPointAddActivateChoice);

        public static readonly Type GetterType = typeof(IPerkEntryPointAddActivateChoiceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPerkEntryPointAddActivateChoice);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PerkEntryPointAddActivateChoice";

        public const string Name = "PerkEntryPointAddActivateChoice";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PRKE;
        public static readonly Type BinaryWriteTranslation = typeof(PerkEntryPointAddActivateChoiceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PerkEntryPointAddActivateChoiceSetterCommon : APerkEntryPointEffectSetterCommon
    {
        public new static readonly PerkEntryPointAddActivateChoiceSetterCommon Instance = new PerkEntryPointAddActivateChoiceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPerkEntryPointAddActivateChoice item)
        {
            ClearPartial();
            item.Spell = FormLinkNullable<ISpellGetter>.Null;
            item.ButtonLabel = default;
            item.Flags.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAPerkEntryPointEffect item)
        {
            Clear(item: (IPerkEntryPointAddActivateChoice)item);
        }
        
        public override void Clear(IAPerkEffect item)
        {
            Clear(item: (IPerkEntryPointAddActivateChoice)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPerkEntryPointAddActivateChoice obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Spell = obj.Spell.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPerkEntryPointAddActivateChoice item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PerkEntryPointAddActivateChoiceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PerkEntryPointAddActivateChoiceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPerkEntryPointEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PerkEntryPointAddActivateChoice)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IAPerkEffect item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PerkEntryPointAddActivateChoice)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PerkEntryPointAddActivateChoiceCommon : APerkEntryPointEffectCommon
    {
        public new static readonly PerkEntryPointAddActivateChoiceCommon Instance = new PerkEntryPointAddActivateChoiceCommon();

        public PerkEntryPointAddActivateChoice.Mask<bool> GetEqualsMask(
            IPerkEntryPointAddActivateChoiceGetter item,
            IPerkEntryPointAddActivateChoiceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PerkEntryPointAddActivateChoice.Mask<bool>(false);
            ((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPerkEntryPointAddActivateChoiceGetter item,
            IPerkEntryPointAddActivateChoiceGetter rhs,
            PerkEntryPointAddActivateChoice.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Spell = item.Spell.Equals(rhs.Spell);
            ret.ButtonLabel = object.Equals(item.ButtonLabel, rhs.ButtonLabel);
            ret.Flags = MaskItemExt.Factory(item.Flags.GetEqualsMask(rhs.Flags, include), include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPerkEntryPointAddActivateChoiceGetter item,
            string? name = null,
            PerkEntryPointAddActivateChoice.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPerkEntryPointAddActivateChoiceGetter item,
            FileGeneration fg,
            string? name = null,
            PerkEntryPointAddActivateChoice.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PerkEntryPointAddActivateChoice =>");
            }
            else
            {
                fg.AppendLine($"{name} (PerkEntryPointAddActivateChoice) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPerkEntryPointAddActivateChoiceGetter item,
            FileGeneration fg,
            PerkEntryPointAddActivateChoice.Mask<bool>? printMask = null)
        {
            APerkEntryPointEffectCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Spell ?? true)
            {
                fg.AppendItem(item.Spell.FormKeyNullable, "Spell");
            }
            if ((printMask?.ButtonLabel ?? true)
                && item.ButtonLabel.TryGet(out var ButtonLabelItem))
            {
                fg.AppendItem(ButtonLabelItem, "ButtonLabel");
            }
            if (printMask?.Flags?.Overall ?? true)
            {
                item.Flags?.ToString(fg, "Flags");
            }
        }
        
        public static PerkEntryPointAddActivateChoice_FieldIndex ConvertFieldIndex(APerkEntryPointEffect_FieldIndex index)
        {
            switch (index)
            {
                case APerkEntryPointEffect_FieldIndex.Rank:
                    return (PerkEntryPointAddActivateChoice_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.Priority:
                    return (PerkEntryPointAddActivateChoice_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.Conditions:
                    return (PerkEntryPointAddActivateChoice_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.PRKEDataTypeState:
                    return (PerkEntryPointAddActivateChoice_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.EntryPoint:
                    return (PerkEntryPointAddActivateChoice_FieldIndex)((int)index);
                case APerkEntryPointEffect_FieldIndex.PerkConditionTabCount:
                    return (PerkEntryPointAddActivateChoice_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PerkEntryPointAddActivateChoice_FieldIndex ConvertFieldIndex(APerkEffect_FieldIndex index)
        {
            switch (index)
            {
                case APerkEffect_FieldIndex.Rank:
                    return (PerkEntryPointAddActivateChoice_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Priority:
                    return (PerkEntryPointAddActivateChoice_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.Conditions:
                    return (PerkEntryPointAddActivateChoice_FieldIndex)((int)index);
                case APerkEffect_FieldIndex.PRKEDataTypeState:
                    return (PerkEntryPointAddActivateChoice_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPerkEntryPointAddActivateChoiceGetter? lhs,
            IPerkEntryPointAddActivateChoiceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAPerkEntryPointEffectGetter)lhs, (IAPerkEntryPointEffectGetter)rhs)) return false;
            if (!lhs.Spell.Equals(rhs.Spell)) return false;
            if (!object.Equals(lhs.ButtonLabel, rhs.ButtonLabel)) return false;
            if (!object.Equals(lhs.Flags, rhs.Flags)) return false;
            return true;
        }
        
        public override bool Equals(
            IAPerkEntryPointEffectGetter? lhs,
            IAPerkEntryPointEffectGetter? rhs)
        {
            return Equals(
                lhs: (IPerkEntryPointAddActivateChoiceGetter?)lhs,
                rhs: rhs as IPerkEntryPointAddActivateChoiceGetter);
        }
        
        public override bool Equals(
            IAPerkEffectGetter? lhs,
            IAPerkEffectGetter? rhs)
        {
            return Equals(
                lhs: (IPerkEntryPointAddActivateChoiceGetter?)lhs,
                rhs: rhs as IPerkEntryPointAddActivateChoiceGetter);
        }
        
        public virtual int GetHashCode(IPerkEntryPointAddActivateChoiceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Spell);
            if (item.ButtonLabel.TryGet(out var ButtonLabelitem))
            {
                hash.Add(ButtonLabelitem);
            }
            hash.Add(item.Flags);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPerkEntryPointEffectGetter item)
        {
            return GetHashCode(item: (IPerkEntryPointAddActivateChoiceGetter)item);
        }
        
        public override int GetHashCode(IAPerkEffectGetter item)
        {
            return GetHashCode(item: (IPerkEntryPointAddActivateChoiceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PerkEntryPointAddActivateChoice.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPerkEntryPointAddActivateChoiceGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Spell.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Spell);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class PerkEntryPointAddActivateChoiceSetterTranslationCommon : APerkEntryPointEffectSetterTranslationCommon
    {
        public new static readonly PerkEntryPointAddActivateChoiceSetterTranslationCommon Instance = new PerkEntryPointAddActivateChoiceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPerkEntryPointAddActivateChoice item,
            IPerkEntryPointAddActivateChoiceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPerkEntryPointEffect)item,
                (IAPerkEntryPointEffectGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PerkEntryPointAddActivateChoice_FieldIndex.Spell) ?? true))
            {
                item.Spell = new FormLinkNullable<ISpellGetter>(rhs.Spell.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PerkEntryPointAddActivateChoice_FieldIndex.ButtonLabel) ?? true))
            {
                item.ButtonLabel = rhs.ButtonLabel?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)PerkEntryPointAddActivateChoice_FieldIndex.Flags) ?? true))
            {
                errorMask?.PushIndex((int)PerkEntryPointAddActivateChoice_FieldIndex.Flags);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)PerkEntryPointAddActivateChoice_FieldIndex.Flags) ?? true))
                    {
                        item.Flags = rhs.Flags.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)PerkEntryPointAddActivateChoice_FieldIndex.Flags),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IAPerkEntryPointEffect item,
            IAPerkEntryPointEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPerkEntryPointAddActivateChoice)item,
                rhs: (IPerkEntryPointAddActivateChoiceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        
        public override void DeepCopyIn(
            IAPerkEffect item,
            IAPerkEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPerkEntryPointAddActivateChoice)item,
                rhs: (IPerkEntryPointAddActivateChoiceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PerkEntryPointAddActivateChoice DeepCopy(
            IPerkEntryPointAddActivateChoiceGetter item,
            PerkEntryPointAddActivateChoice.TranslationMask? copyMask = null)
        {
            PerkEntryPointAddActivateChoice ret = (PerkEntryPointAddActivateChoice)((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonInstance()!).GetNew();
            ((PerkEntryPointAddActivateChoiceSetterTranslationCommon)((IPerkEntryPointAddActivateChoiceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PerkEntryPointAddActivateChoice DeepCopy(
            IPerkEntryPointAddActivateChoiceGetter item,
            out PerkEntryPointAddActivateChoice.ErrorMask errorMask,
            PerkEntryPointAddActivateChoice.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PerkEntryPointAddActivateChoice ret = (PerkEntryPointAddActivateChoice)((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonInstance()!).GetNew();
            ((PerkEntryPointAddActivateChoiceSetterTranslationCommon)((IPerkEntryPointAddActivateChoiceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PerkEntryPointAddActivateChoice.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PerkEntryPointAddActivateChoice DeepCopy(
            IPerkEntryPointAddActivateChoiceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PerkEntryPointAddActivateChoice ret = (PerkEntryPointAddActivateChoice)((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)item).CommonInstance()!).GetNew();
            ((PerkEntryPointAddActivateChoiceSetterTranslationCommon)((IPerkEntryPointAddActivateChoiceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PerkEntryPointAddActivateChoice
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkEntryPointAddActivateChoice_Registration.Instance;
        public new static PerkEntryPointAddActivateChoice_Registration Registration => PerkEntryPointAddActivateChoice_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PerkEntryPointAddActivateChoiceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PerkEntryPointAddActivateChoiceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PerkEntryPointAddActivateChoiceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PerkEntryPointAddActivateChoiceBinaryWriteTranslation :
        APerkEntryPointEffectBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PerkEntryPointAddActivateChoiceBinaryWriteTranslation Instance = new PerkEntryPointAddActivateChoiceBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPerkEntryPointAddActivateChoiceGetter item,
            MutagenWriter writer)
        {
            APerkEntryPointEffectBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Spell);
        }

        public static void WriteRecordTypes(
            IPerkEntryPointAddActivateChoiceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            APerkEntryPointEffectBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ButtonLabel,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.EPF2),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            var FlagsItem = item.Flags;
            ((PerkScriptFlagBinaryWriteTranslation)((IBinaryItem)FlagsItem).BinaryWriteTranslator).Write(
                item: FlagsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            IPerkEntryPointAddActivateChoiceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkEntryPointAddActivateChoiceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPerkEntryPointEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkEntryPointAddActivateChoiceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPerkEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPerkEntryPointAddActivateChoiceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PerkEntryPointAddActivateChoiceBinaryCreateTranslation : APerkEntryPointEffectBinaryCreateTranslation
    {
        public new readonly static PerkEntryPointAddActivateChoiceBinaryCreateTranslation Instance = new PerkEntryPointAddActivateChoiceBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPerkEntryPointAddActivateChoice item,
            MutagenFrame frame)
        {
            APerkEntryPointEffectBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            if (frame.Complete) return;
            item.Spell = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
        }

        public static ParseResult FillBinaryRecordTypes(
            IPerkEntryPointAddActivateChoice item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.EPF2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ButtonLabel = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)PerkEntryPointAddActivateChoice_FieldIndex.ButtonLabel;
                }
                case RecordTypeInts.EPF3:
                {
                    item.Flags = Mutagen.Bethesda.Fallout4.PerkScriptFlag.CreateFromBinary(frame: frame);
                    return (int)PerkEntryPointAddActivateChoice_FieldIndex.Flags;
                }
                default:
                    return APerkEntryPointEffectBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PerkEntryPointAddActivateChoiceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PerkEntryPointAddActivateChoiceBinaryOverlay :
        APerkEntryPointEffectBinaryOverlay,
        IPerkEntryPointAddActivateChoiceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PerkEntryPointAddActivateChoice_Registration.Instance;
        public new static PerkEntryPointAddActivateChoice_Registration Registration => PerkEntryPointAddActivateChoice_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PerkEntryPointAddActivateChoiceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PerkEntryPointAddActivateChoiceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PerkEntryPointAddActivateChoiceCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PerkEntryPointAddActivateChoiceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PerkEntryPointAddActivateChoiceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public FormLinkNullable<ISpellGetter> Spell => new FormLinkNullable<ISpellGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x2, 0x4))));
        #region ButtonLabel
        private int? _ButtonLabelLocation;
        public ITranslatedStringGetter? ButtonLabel => _ButtonLabelLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _ButtonLabelLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Flags
        private RangeInt32? _FlagsLocation;
        private IPerkScriptFlagGetter? _Flags => _FlagsLocation.HasValue ? PerkScriptFlagBinaryOverlay.PerkScriptFlagFactory(new OverlayStream(_data.Slice(_FlagsLocation!.Value.Min), _package), _package) : default;
        public IPerkScriptFlagGetter Flags => _Flags ?? new PerkScriptFlag();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PerkEntryPointAddActivateChoiceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PerkEntryPointAddActivateChoiceBinaryOverlay PerkEntryPointAddActivateChoiceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PerkEntryPointAddActivateChoiceBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PerkEntryPointAddActivateChoiceBinaryOverlay PerkEntryPointAddActivateChoiceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PerkEntryPointAddActivateChoiceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.EPF2:
                {
                    _ButtonLabelLocation = (stream.Position - offset);
                    return (int)PerkEntryPointAddActivateChoice_FieldIndex.ButtonLabel;
                }
                case RecordTypeInts.EPF3:
                {
                    _FlagsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)PerkEntryPointAddActivateChoice_FieldIndex.Flags;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PerkEntryPointAddActivateChoiceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPerkEntryPointAddActivateChoiceGetter rhs)) return false;
            return ((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPerkEntryPointAddActivateChoiceGetter? obj)
        {
            return ((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PerkEntryPointAddActivateChoiceCommon)((IPerkEntryPointAddActivateChoiceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

