/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class MovementType :
        Fallout4MajorRecord,
        IMovementTypeInternal,
        ILoquiObjectSetter<MovementType>,
        IEquatable<IMovementTypeGetter>
    {
        #region Ctor
        protected MovementType()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMovementTypeGetter.Name => this.Name;
        #endregion
        #region LeftWalk
        public Single LeftWalk { get; set; } = default;
        #endregion
        #region LeftRun
        public Single LeftRun { get; set; } = default;
        #endregion
        #region RightWalk
        public Single RightWalk { get; set; } = default;
        #endregion
        #region RightRun
        public Single RightRun { get; set; } = default;
        #endregion
        #region ForwardWalk
        public Single ForwardWalk { get; set; } = default;
        #endregion
        #region ForwardRun
        public Single ForwardRun { get; set; } = default;
        #endregion
        #region BackWalk
        public Single BackWalk { get; set; } = default;
        #endregion
        #region BackRun
        public Single BackRun { get; set; } = default;
        #endregion
        #region RotateInPlaceWalk
        public Single RotateInPlaceWalk { get; set; } = default;
        #endregion
        #region RotateInPlaceRun
        public Single RotateInPlaceRun { get; set; } = default;
        #endregion
        #region RotateWhileMovingRun
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _RotateWhileMovingRun;
        public Single RotateWhileMovingRun
        {
            get => this._RotateWhileMovingRun;
            set
            {
                this.SPEDDataTypeState &= ~SPEDDataType.Break0;
                this._RotateWhileMovingRun = value;
            }
        }
        #endregion
        #region AnimationChangeThresholds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AnimationChangeThresholds? _AnimationChangeThresholds;
        public AnimationChangeThresholds? AnimationChangeThresholds
        {
            get => _AnimationChangeThresholds;
            set => _AnimationChangeThresholds = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAnimationChangeThresholdsGetter? IMovementTypeGetter.AnimationChangeThresholds => this.AnimationChangeThresholds;
        #endregion
        #region SPEDDataTypeState
        public MovementType.SPEDDataType SPEDDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MovementTypeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMovementTypeGetter rhs)) return false;
            return ((MovementTypeCommon)((IMovementTypeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IMovementTypeGetter? obj)
        {
            return ((MovementTypeCommon)((IMovementTypeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MovementTypeCommon)((IMovementTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.LeftWalk = initialValue;
                this.LeftRun = initialValue;
                this.RightWalk = initialValue;
                this.RightRun = initialValue;
                this.ForwardWalk = initialValue;
                this.ForwardRun = initialValue;
                this.BackWalk = initialValue;
                this.BackRun = initialValue;
                this.RotateInPlaceWalk = initialValue;
                this.RotateInPlaceRun = initialValue;
                this.RotateWhileMovingRun = initialValue;
                this.AnimationChangeThresholds = new MaskItem<TItem, AnimationChangeThresholds.Mask<TItem>?>(initialValue, new AnimationChangeThresholds.Mask<TItem>(initialValue));
                this.SPEDDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem LeftWalk,
                TItem LeftRun,
                TItem RightWalk,
                TItem RightRun,
                TItem ForwardWalk,
                TItem ForwardRun,
                TItem BackWalk,
                TItem BackRun,
                TItem RotateInPlaceWalk,
                TItem RotateInPlaceRun,
                TItem RotateWhileMovingRun,
                TItem AnimationChangeThresholds,
                TItem SPEDDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.LeftWalk = LeftWalk;
                this.LeftRun = LeftRun;
                this.RightWalk = RightWalk;
                this.RightRun = RightRun;
                this.ForwardWalk = ForwardWalk;
                this.ForwardRun = ForwardRun;
                this.BackWalk = BackWalk;
                this.BackRun = BackRun;
                this.RotateInPlaceWalk = RotateInPlaceWalk;
                this.RotateInPlaceRun = RotateInPlaceRun;
                this.RotateWhileMovingRun = RotateWhileMovingRun;
                this.AnimationChangeThresholds = new MaskItem<TItem, AnimationChangeThresholds.Mask<TItem>?>(AnimationChangeThresholds, new AnimationChangeThresholds.Mask<TItem>(AnimationChangeThresholds));
                this.SPEDDataTypeState = SPEDDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem LeftWalk;
            public TItem LeftRun;
            public TItem RightWalk;
            public TItem RightRun;
            public TItem ForwardWalk;
            public TItem ForwardRun;
            public TItem BackWalk;
            public TItem BackRun;
            public TItem RotateInPlaceWalk;
            public TItem RotateInPlaceRun;
            public TItem RotateWhileMovingRun;
            public MaskItem<TItem, AnimationChangeThresholds.Mask<TItem>?>? AnimationChangeThresholds { get; set; }
            public TItem SPEDDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.LeftWalk, rhs.LeftWalk)) return false;
                if (!object.Equals(this.LeftRun, rhs.LeftRun)) return false;
                if (!object.Equals(this.RightWalk, rhs.RightWalk)) return false;
                if (!object.Equals(this.RightRun, rhs.RightRun)) return false;
                if (!object.Equals(this.ForwardWalk, rhs.ForwardWalk)) return false;
                if (!object.Equals(this.ForwardRun, rhs.ForwardRun)) return false;
                if (!object.Equals(this.BackWalk, rhs.BackWalk)) return false;
                if (!object.Equals(this.BackRun, rhs.BackRun)) return false;
                if (!object.Equals(this.RotateInPlaceWalk, rhs.RotateInPlaceWalk)) return false;
                if (!object.Equals(this.RotateInPlaceRun, rhs.RotateInPlaceRun)) return false;
                if (!object.Equals(this.RotateWhileMovingRun, rhs.RotateWhileMovingRun)) return false;
                if (!object.Equals(this.AnimationChangeThresholds, rhs.AnimationChangeThresholds)) return false;
                if (!object.Equals(this.SPEDDataTypeState, rhs.SPEDDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.LeftWalk);
                hash.Add(this.LeftRun);
                hash.Add(this.RightWalk);
                hash.Add(this.RightRun);
                hash.Add(this.ForwardWalk);
                hash.Add(this.ForwardRun);
                hash.Add(this.BackWalk);
                hash.Add(this.BackRun);
                hash.Add(this.RotateInPlaceWalk);
                hash.Add(this.RotateInPlaceRun);
                hash.Add(this.RotateWhileMovingRun);
                hash.Add(this.AnimationChangeThresholds);
                hash.Add(this.SPEDDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.LeftWalk)) return false;
                if (!eval(this.LeftRun)) return false;
                if (!eval(this.RightWalk)) return false;
                if (!eval(this.RightRun)) return false;
                if (!eval(this.ForwardWalk)) return false;
                if (!eval(this.ForwardRun)) return false;
                if (!eval(this.BackWalk)) return false;
                if (!eval(this.BackRun)) return false;
                if (!eval(this.RotateInPlaceWalk)) return false;
                if (!eval(this.RotateInPlaceRun)) return false;
                if (!eval(this.RotateWhileMovingRun)) return false;
                if (AnimationChangeThresholds != null)
                {
                    if (!eval(this.AnimationChangeThresholds.Overall)) return false;
                    if (this.AnimationChangeThresholds.Specific != null && !this.AnimationChangeThresholds.Specific.All(eval)) return false;
                }
                if (!eval(this.SPEDDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.LeftWalk)) return true;
                if (eval(this.LeftRun)) return true;
                if (eval(this.RightWalk)) return true;
                if (eval(this.RightRun)) return true;
                if (eval(this.ForwardWalk)) return true;
                if (eval(this.ForwardRun)) return true;
                if (eval(this.BackWalk)) return true;
                if (eval(this.BackRun)) return true;
                if (eval(this.RotateInPlaceWalk)) return true;
                if (eval(this.RotateInPlaceRun)) return true;
                if (eval(this.RotateWhileMovingRun)) return true;
                if (AnimationChangeThresholds != null)
                {
                    if (eval(this.AnimationChangeThresholds.Overall)) return true;
                    if (this.AnimationChangeThresholds.Specific != null && this.AnimationChangeThresholds.Specific.Any(eval)) return true;
                }
                if (eval(this.SPEDDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MovementType.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.LeftWalk = eval(this.LeftWalk);
                obj.LeftRun = eval(this.LeftRun);
                obj.RightWalk = eval(this.RightWalk);
                obj.RightRun = eval(this.RightRun);
                obj.ForwardWalk = eval(this.ForwardWalk);
                obj.ForwardRun = eval(this.ForwardRun);
                obj.BackWalk = eval(this.BackWalk);
                obj.BackRun = eval(this.BackRun);
                obj.RotateInPlaceWalk = eval(this.RotateInPlaceWalk);
                obj.RotateInPlaceRun = eval(this.RotateInPlaceRun);
                obj.RotateWhileMovingRun = eval(this.RotateWhileMovingRun);
                obj.AnimationChangeThresholds = this.AnimationChangeThresholds == null ? null : new MaskItem<R, AnimationChangeThresholds.Mask<R>?>(eval(this.AnimationChangeThresholds.Overall), this.AnimationChangeThresholds.Specific?.Translate(eval));
                obj.SPEDDataTypeState = eval(this.SPEDDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MovementType.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MovementType.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MovementType.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.LeftWalk ?? true)
                    {
                        fg.AppendItem(LeftWalk, "LeftWalk");
                    }
                    if (printMask?.LeftRun ?? true)
                    {
                        fg.AppendItem(LeftRun, "LeftRun");
                    }
                    if (printMask?.RightWalk ?? true)
                    {
                        fg.AppendItem(RightWalk, "RightWalk");
                    }
                    if (printMask?.RightRun ?? true)
                    {
                        fg.AppendItem(RightRun, "RightRun");
                    }
                    if (printMask?.ForwardWalk ?? true)
                    {
                        fg.AppendItem(ForwardWalk, "ForwardWalk");
                    }
                    if (printMask?.ForwardRun ?? true)
                    {
                        fg.AppendItem(ForwardRun, "ForwardRun");
                    }
                    if (printMask?.BackWalk ?? true)
                    {
                        fg.AppendItem(BackWalk, "BackWalk");
                    }
                    if (printMask?.BackRun ?? true)
                    {
                        fg.AppendItem(BackRun, "BackRun");
                    }
                    if (printMask?.RotateInPlaceWalk ?? true)
                    {
                        fg.AppendItem(RotateInPlaceWalk, "RotateInPlaceWalk");
                    }
                    if (printMask?.RotateInPlaceRun ?? true)
                    {
                        fg.AppendItem(RotateInPlaceRun, "RotateInPlaceRun");
                    }
                    if (printMask?.RotateWhileMovingRun ?? true)
                    {
                        fg.AppendItem(RotateWhileMovingRun, "RotateWhileMovingRun");
                    }
                    if (printMask?.AnimationChangeThresholds?.Overall ?? true)
                    {
                        AnimationChangeThresholds?.ToString(fg);
                    }
                    if (printMask?.SPEDDataTypeState ?? true)
                    {
                        fg.AppendItem(SPEDDataTypeState, "SPEDDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? LeftWalk;
            public Exception? LeftRun;
            public Exception? RightWalk;
            public Exception? RightRun;
            public Exception? ForwardWalk;
            public Exception? ForwardRun;
            public Exception? BackWalk;
            public Exception? BackRun;
            public Exception? RotateInPlaceWalk;
            public Exception? RotateInPlaceRun;
            public Exception? RotateWhileMovingRun;
            public MaskItem<Exception?, AnimationChangeThresholds.ErrorMask?>? AnimationChangeThresholds;
            public Exception? SPEDDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MovementType_FieldIndex enu = (MovementType_FieldIndex)index;
                switch (enu)
                {
                    case MovementType_FieldIndex.Name:
                        return Name;
                    case MovementType_FieldIndex.LeftWalk:
                        return LeftWalk;
                    case MovementType_FieldIndex.LeftRun:
                        return LeftRun;
                    case MovementType_FieldIndex.RightWalk:
                        return RightWalk;
                    case MovementType_FieldIndex.RightRun:
                        return RightRun;
                    case MovementType_FieldIndex.ForwardWalk:
                        return ForwardWalk;
                    case MovementType_FieldIndex.ForwardRun:
                        return ForwardRun;
                    case MovementType_FieldIndex.BackWalk:
                        return BackWalk;
                    case MovementType_FieldIndex.BackRun:
                        return BackRun;
                    case MovementType_FieldIndex.RotateInPlaceWalk:
                        return RotateInPlaceWalk;
                    case MovementType_FieldIndex.RotateInPlaceRun:
                        return RotateInPlaceRun;
                    case MovementType_FieldIndex.RotateWhileMovingRun:
                        return RotateWhileMovingRun;
                    case MovementType_FieldIndex.AnimationChangeThresholds:
                        return AnimationChangeThresholds;
                    case MovementType_FieldIndex.SPEDDataTypeState:
                        return SPEDDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MovementType_FieldIndex enu = (MovementType_FieldIndex)index;
                switch (enu)
                {
                    case MovementType_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case MovementType_FieldIndex.LeftWalk:
                        this.LeftWalk = ex;
                        break;
                    case MovementType_FieldIndex.LeftRun:
                        this.LeftRun = ex;
                        break;
                    case MovementType_FieldIndex.RightWalk:
                        this.RightWalk = ex;
                        break;
                    case MovementType_FieldIndex.RightRun:
                        this.RightRun = ex;
                        break;
                    case MovementType_FieldIndex.ForwardWalk:
                        this.ForwardWalk = ex;
                        break;
                    case MovementType_FieldIndex.ForwardRun:
                        this.ForwardRun = ex;
                        break;
                    case MovementType_FieldIndex.BackWalk:
                        this.BackWalk = ex;
                        break;
                    case MovementType_FieldIndex.BackRun:
                        this.BackRun = ex;
                        break;
                    case MovementType_FieldIndex.RotateInPlaceWalk:
                        this.RotateInPlaceWalk = ex;
                        break;
                    case MovementType_FieldIndex.RotateInPlaceRun:
                        this.RotateInPlaceRun = ex;
                        break;
                    case MovementType_FieldIndex.RotateWhileMovingRun:
                        this.RotateWhileMovingRun = ex;
                        break;
                    case MovementType_FieldIndex.AnimationChangeThresholds:
                        this.AnimationChangeThresholds = new MaskItem<Exception?, AnimationChangeThresholds.ErrorMask?>(ex, null);
                        break;
                    case MovementType_FieldIndex.SPEDDataTypeState:
                        this.SPEDDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MovementType_FieldIndex enu = (MovementType_FieldIndex)index;
                switch (enu)
                {
                    case MovementType_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.LeftWalk:
                        this.LeftWalk = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.LeftRun:
                        this.LeftRun = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.RightWalk:
                        this.RightWalk = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.RightRun:
                        this.RightRun = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.ForwardWalk:
                        this.ForwardWalk = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.ForwardRun:
                        this.ForwardRun = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.BackWalk:
                        this.BackWalk = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.BackRun:
                        this.BackRun = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.RotateInPlaceWalk:
                        this.RotateInPlaceWalk = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.RotateInPlaceRun:
                        this.RotateInPlaceRun = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.RotateWhileMovingRun:
                        this.RotateWhileMovingRun = (Exception?)obj;
                        break;
                    case MovementType_FieldIndex.AnimationChangeThresholds:
                        this.AnimationChangeThresholds = (MaskItem<Exception?, AnimationChangeThresholds.ErrorMask?>?)obj;
                        break;
                    case MovementType_FieldIndex.SPEDDataTypeState:
                        this.SPEDDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (LeftWalk != null) return true;
                if (LeftRun != null) return true;
                if (RightWalk != null) return true;
                if (RightRun != null) return true;
                if (ForwardWalk != null) return true;
                if (ForwardRun != null) return true;
                if (BackWalk != null) return true;
                if (BackRun != null) return true;
                if (RotateInPlaceWalk != null) return true;
                if (RotateInPlaceRun != null) return true;
                if (RotateWhileMovingRun != null) return true;
                if (AnimationChangeThresholds != null) return true;
                if (SPEDDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(LeftWalk, "LeftWalk");
                fg.AppendItem(LeftRun, "LeftRun");
                fg.AppendItem(RightWalk, "RightWalk");
                fg.AppendItem(RightRun, "RightRun");
                fg.AppendItem(ForwardWalk, "ForwardWalk");
                fg.AppendItem(ForwardRun, "ForwardRun");
                fg.AppendItem(BackWalk, "BackWalk");
                fg.AppendItem(BackRun, "BackRun");
                fg.AppendItem(RotateInPlaceWalk, "RotateInPlaceWalk");
                fg.AppendItem(RotateInPlaceRun, "RotateInPlaceRun");
                fg.AppendItem(RotateWhileMovingRun, "RotateWhileMovingRun");
                AnimationChangeThresholds?.ToString(fg);
                fg.AppendItem(SPEDDataTypeState, "SPEDDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.LeftWalk = this.LeftWalk.Combine(rhs.LeftWalk);
                ret.LeftRun = this.LeftRun.Combine(rhs.LeftRun);
                ret.RightWalk = this.RightWalk.Combine(rhs.RightWalk);
                ret.RightRun = this.RightRun.Combine(rhs.RightRun);
                ret.ForwardWalk = this.ForwardWalk.Combine(rhs.ForwardWalk);
                ret.ForwardRun = this.ForwardRun.Combine(rhs.ForwardRun);
                ret.BackWalk = this.BackWalk.Combine(rhs.BackWalk);
                ret.BackRun = this.BackRun.Combine(rhs.BackRun);
                ret.RotateInPlaceWalk = this.RotateInPlaceWalk.Combine(rhs.RotateInPlaceWalk);
                ret.RotateInPlaceRun = this.RotateInPlaceRun.Combine(rhs.RotateInPlaceRun);
                ret.RotateWhileMovingRun = this.RotateWhileMovingRun.Combine(rhs.RotateWhileMovingRun);
                ret.AnimationChangeThresholds = this.AnimationChangeThresholds.Combine(rhs.AnimationChangeThresholds, (l, r) => l.Combine(r));
                ret.SPEDDataTypeState = this.SPEDDataTypeState.Combine(rhs.SPEDDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool LeftWalk;
            public bool LeftRun;
            public bool RightWalk;
            public bool RightRun;
            public bool ForwardWalk;
            public bool ForwardRun;
            public bool BackWalk;
            public bool BackRun;
            public bool RotateInPlaceWalk;
            public bool RotateInPlaceRun;
            public bool RotateWhileMovingRun;
            public AnimationChangeThresholds.TranslationMask? AnimationChangeThresholds;
            public bool SPEDDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.LeftWalk = defaultOn;
                this.LeftRun = defaultOn;
                this.RightWalk = defaultOn;
                this.RightRun = defaultOn;
                this.ForwardWalk = defaultOn;
                this.ForwardRun = defaultOn;
                this.BackWalk = defaultOn;
                this.BackRun = defaultOn;
                this.RotateInPlaceWalk = defaultOn;
                this.RotateInPlaceRun = defaultOn;
                this.RotateWhileMovingRun = defaultOn;
                this.SPEDDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((LeftWalk, null));
                ret.Add((LeftRun, null));
                ret.Add((RightWalk, null));
                ret.Add((RightRun, null));
                ret.Add((ForwardWalk, null));
                ret.Add((ForwardRun, null));
                ret.Add((BackWalk, null));
                ret.Add((BackRun, null));
                ret.Add((RotateInPlaceWalk, null));
                ret.Add((RotateInPlaceRun, null));
                ret.Add((RotateWhileMovingRun, null));
                ret.Add((AnimationChangeThresholds != null ? AnimationChangeThresholds.OnOverall : DefaultOn, AnimationChangeThresholds?.GetCrystal()));
                ret.Add((SPEDDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = MovementType_Registration.TriggeringRecordType;
        public MovementType(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private MovementType(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal MovementType(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public MovementType(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public MovementType(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum SPEDDataType
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MovementTypeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MovementTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static MovementType CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MovementType();
            ((MovementTypeSetterCommon)((IMovementTypeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MovementType item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((MovementTypeSetterCommon)((IMovementTypeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MovementType GetNew()
        {
            return new MovementType();
        }

    }
    #endregion

    #region Interface
    public partial interface IMovementType :
        IMovementTypeGetter,
        IFallout4MajorRecord,
        ILoquiObjectSetter<IMovementTypeInternal>
    {
        new String? Name { get; set; }
        new Single LeftWalk { get; set; }
        new Single LeftRun { get; set; }
        new Single RightWalk { get; set; }
        new Single RightRun { get; set; }
        new Single ForwardWalk { get; set; }
        new Single ForwardRun { get; set; }
        new Single BackWalk { get; set; }
        new Single BackRun { get; set; }
        new Single RotateInPlaceWalk { get; set; }
        new Single RotateInPlaceRun { get; set; }
        new Single RotateWhileMovingRun { get; set; }
        new AnimationChangeThresholds? AnimationChangeThresholds { get; set; }
        new MovementType.SPEDDataType SPEDDataTypeState { get; set; }
    }

    public partial interface IMovementTypeInternal :
        IFallout4MajorRecordInternal,
        IMovementType,
        IMovementTypeGetter
    {
    }

    public partial interface IMovementTypeGetter :
        IFallout4MajorRecordGetter,
        ILoquiObject<IMovementTypeGetter>,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => MovementType_Registration.Instance;
        String? Name { get; }
        Single LeftWalk { get; }
        Single LeftRun { get; }
        Single RightWalk { get; }
        Single RightRun { get; }
        Single ForwardWalk { get; }
        Single ForwardRun { get; }
        Single BackWalk { get; }
        Single BackRun { get; }
        Single RotateInPlaceWalk { get; }
        Single RotateInPlaceRun { get; }
        Single RotateWhileMovingRun { get; }
        IAnimationChangeThresholdsGetter? AnimationChangeThresholds { get; }
        MovementType.SPEDDataType SPEDDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MovementTypeMixIn
    {
        public static void Clear(this IMovementTypeInternal item)
        {
            ((MovementTypeSetterCommon)((IMovementTypeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MovementType.Mask<bool> GetEqualsMask(
            this IMovementTypeGetter item,
            IMovementTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MovementTypeCommon)((IMovementTypeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMovementTypeGetter item,
            string? name = null,
            MovementType.Mask<bool>? printMask = null)
        {
            return ((MovementTypeCommon)((IMovementTypeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMovementTypeGetter item,
            FileGeneration fg,
            string? name = null,
            MovementType.Mask<bool>? printMask = null)
        {
            ((MovementTypeCommon)((IMovementTypeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMovementTypeGetter item,
            IMovementTypeGetter rhs)
        {
            return ((MovementTypeCommon)((IMovementTypeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IMovementTypeInternal lhs,
            IMovementTypeGetter rhs,
            out MovementType.ErrorMask errorMask,
            MovementType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MovementTypeSetterTranslationCommon)((IMovementTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MovementType.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMovementTypeInternal lhs,
            IMovementTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MovementTypeSetterTranslationCommon)((IMovementTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MovementType DeepCopy(
            this IMovementTypeGetter item,
            MovementType.TranslationMask? copyMask = null)
        {
            return ((MovementTypeSetterTranslationCommon)((IMovementTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MovementType DeepCopy(
            this IMovementTypeGetter item,
            out MovementType.ErrorMask errorMask,
            MovementType.TranslationMask? copyMask = null)
        {
            return ((MovementTypeSetterTranslationCommon)((IMovementTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MovementType DeepCopy(
            this IMovementTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MovementTypeSetterTranslationCommon)((IMovementTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static MovementType Duplicate(
            this IMovementTypeGetter item,
            FormKey formKey,
            MovementType.TranslationMask? copyMask = null)
        {
            return ((MovementTypeCommon)((IMovementTypeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMovementTypeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MovementTypeSetterCommon)((IMovementTypeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum MovementType_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        LeftWalk = 7,
        LeftRun = 8,
        RightWalk = 9,
        RightRun = 10,
        ForwardWalk = 11,
        ForwardRun = 12,
        BackWalk = 13,
        BackRun = 14,
        RotateInPlaceWalk = 15,
        RotateInPlaceRun = 16,
        RotateWhileMovingRun = 17,
        AnimationChangeThresholds = 18,
        SPEDDataTypeState = 19,
    }
    #endregion

    #region Registration
    public partial class MovementType_Registration : ILoquiRegistration
    {
        public static readonly MovementType_Registration Instance = new MovementType_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 81,
            version: 0);

        public const string GUID = "d6455262-af10-48b1-acd1-01fbee5f3687";

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(MovementType.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MovementType.ErrorMask);

        public static readonly Type ClassType = typeof(MovementType);

        public static readonly Type GetterType = typeof(IMovementTypeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMovementType);

        public static readonly Type? InternalSetterType = typeof(IMovementTypeInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.MovementType";

        public const string Name = "MovementType";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MOVT;
        public static readonly Type BinaryWriteTranslation = typeof(MovementTypeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class MovementTypeSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly MovementTypeSetterCommon Instance = new MovementTypeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMovementTypeInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.LeftWalk = default;
            item.LeftRun = default;
            item.RightWalk = default;
            item.RightRun = default;
            item.ForwardWalk = default;
            item.ForwardRun = default;
            item.BackWalk = default;
            item.BackRun = default;
            item.RotateInPlaceWalk = default;
            item.RotateInPlaceRun = default;
            item.RotateWhileMovingRun = default;
            item.AnimationChangeThresholds = null;
            item.SPEDDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IMovementTypeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMovementTypeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMovementType obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMovementTypeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IMovementTypeInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: MovementTypeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MovementTypeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (MovementType)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (MovementType)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class MovementTypeCommon : Fallout4MajorRecordCommon
    {
        public new static readonly MovementTypeCommon Instance = new MovementTypeCommon();

        public MovementType.Mask<bool> GetEqualsMask(
            IMovementTypeGetter item,
            IMovementTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MovementType.Mask<bool>(false);
            ((MovementTypeCommon)((IMovementTypeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMovementTypeGetter item,
            IMovementTypeGetter rhs,
            MovementType.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.LeftWalk = item.LeftWalk.EqualsWithin(rhs.LeftWalk);
            ret.LeftRun = item.LeftRun.EqualsWithin(rhs.LeftRun);
            ret.RightWalk = item.RightWalk.EqualsWithin(rhs.RightWalk);
            ret.RightRun = item.RightRun.EqualsWithin(rhs.RightRun);
            ret.ForwardWalk = item.ForwardWalk.EqualsWithin(rhs.ForwardWalk);
            ret.ForwardRun = item.ForwardRun.EqualsWithin(rhs.ForwardRun);
            ret.BackWalk = item.BackWalk.EqualsWithin(rhs.BackWalk);
            ret.BackRun = item.BackRun.EqualsWithin(rhs.BackRun);
            ret.RotateInPlaceWalk = item.RotateInPlaceWalk.EqualsWithin(rhs.RotateInPlaceWalk);
            ret.RotateInPlaceRun = item.RotateInPlaceRun.EqualsWithin(rhs.RotateInPlaceRun);
            ret.RotateWhileMovingRun = item.RotateWhileMovingRun.EqualsWithin(rhs.RotateWhileMovingRun);
            ret.AnimationChangeThresholds = EqualsMaskHelper.EqualsHelper(
                item.AnimationChangeThresholds,
                rhs.AnimationChangeThresholds,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SPEDDataTypeState = item.SPEDDataTypeState == rhs.SPEDDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IMovementTypeGetter item,
            string? name = null,
            MovementType.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMovementTypeGetter item,
            FileGeneration fg,
            string? name = null,
            MovementType.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MovementType =>");
            }
            else
            {
                fg.AppendLine($"{name} (MovementType) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMovementTypeGetter item,
            FileGeneration fg,
            MovementType.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.LeftWalk ?? true)
            {
                fg.AppendItem(item.LeftWalk, "LeftWalk");
            }
            if (printMask?.LeftRun ?? true)
            {
                fg.AppendItem(item.LeftRun, "LeftRun");
            }
            if (printMask?.RightWalk ?? true)
            {
                fg.AppendItem(item.RightWalk, "RightWalk");
            }
            if (printMask?.RightRun ?? true)
            {
                fg.AppendItem(item.RightRun, "RightRun");
            }
            if (printMask?.ForwardWalk ?? true)
            {
                fg.AppendItem(item.ForwardWalk, "ForwardWalk");
            }
            if (printMask?.ForwardRun ?? true)
            {
                fg.AppendItem(item.ForwardRun, "ForwardRun");
            }
            if (printMask?.BackWalk ?? true)
            {
                fg.AppendItem(item.BackWalk, "BackWalk");
            }
            if (printMask?.BackRun ?? true)
            {
                fg.AppendItem(item.BackRun, "BackRun");
            }
            if (printMask?.RotateInPlaceWalk ?? true)
            {
                fg.AppendItem(item.RotateInPlaceWalk, "RotateInPlaceWalk");
            }
            if (printMask?.RotateInPlaceRun ?? true)
            {
                fg.AppendItem(item.RotateInPlaceRun, "RotateInPlaceRun");
            }
            if (printMask?.RotateWhileMovingRun ?? true)
            {
                fg.AppendItem(item.RotateWhileMovingRun, "RotateWhileMovingRun");
            }
            if ((printMask?.AnimationChangeThresholds?.Overall ?? true)
                && item.AnimationChangeThresholds.TryGet(out var AnimationChangeThresholdsItem))
            {
                AnimationChangeThresholdsItem?.ToString(fg, "AnimationChangeThresholds");
            }
            if (printMask?.SPEDDataTypeState ?? true)
            {
                fg.AppendItem(item.SPEDDataTypeState, "SPEDDataTypeState");
            }
        }
        
        public static MovementType_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MovementType_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (MovementType_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (MovementType_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (MovementType_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (MovementType_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (MovementType_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new MovementType_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MovementType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MovementType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (MovementType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MovementType_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMovementTypeGetter? lhs,
            IMovementTypeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.LeftWalk.EqualsWithin(rhs.LeftWalk)) return false;
            if (!lhs.LeftRun.EqualsWithin(rhs.LeftRun)) return false;
            if (!lhs.RightWalk.EqualsWithin(rhs.RightWalk)) return false;
            if (!lhs.RightRun.EqualsWithin(rhs.RightRun)) return false;
            if (!lhs.ForwardWalk.EqualsWithin(rhs.ForwardWalk)) return false;
            if (!lhs.ForwardRun.EqualsWithin(rhs.ForwardRun)) return false;
            if (!lhs.BackWalk.EqualsWithin(rhs.BackWalk)) return false;
            if (!lhs.BackRun.EqualsWithin(rhs.BackRun)) return false;
            if (!lhs.RotateInPlaceWalk.EqualsWithin(rhs.RotateInPlaceWalk)) return false;
            if (!lhs.RotateInPlaceRun.EqualsWithin(rhs.RotateInPlaceRun)) return false;
            if (!lhs.RotateWhileMovingRun.EqualsWithin(rhs.RotateWhileMovingRun)) return false;
            if (!object.Equals(lhs.AnimationChangeThresholds, rhs.AnimationChangeThresholds)) return false;
            if (lhs.SPEDDataTypeState != rhs.SPEDDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IMovementTypeGetter?)lhs,
                rhs: rhs as IMovementTypeGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IMovementTypeGetter?)lhs,
                rhs: rhs as IMovementTypeGetter);
        }
        
        public virtual int GetHashCode(IMovementTypeGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.LeftWalk);
            hash.Add(item.LeftRun);
            hash.Add(item.RightWalk);
            hash.Add(item.RightRun);
            hash.Add(item.ForwardWalk);
            hash.Add(item.ForwardRun);
            hash.Add(item.BackWalk);
            hash.Add(item.BackRun);
            hash.Add(item.RotateInPlaceWalk);
            hash.Add(item.RotateInPlaceRun);
            hash.Add(item.RotateWhileMovingRun);
            if (item.AnimationChangeThresholds.TryGet(out var AnimationChangeThresholdsitem))
            {
                hash.Add(AnimationChangeThresholdsitem);
            }
            hash.Add(item.SPEDDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IMovementTypeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMovementTypeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MovementType.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IMovementTypeGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public MovementType Duplicate(
            IMovementTypeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new MovementType(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMovementType)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMovementType)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class MovementTypeSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly MovementTypeSetterTranslationCommon Instance = new MovementTypeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMovementTypeInternal item,
            IMovementTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IMovementType item,
            IMovementTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.LeftWalk) ?? true))
            {
                item.LeftWalk = rhs.LeftWalk;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.LeftRun) ?? true))
            {
                item.LeftRun = rhs.LeftRun;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.RightWalk) ?? true))
            {
                item.RightWalk = rhs.RightWalk;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.RightRun) ?? true))
            {
                item.RightRun = rhs.RightRun;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.ForwardWalk) ?? true))
            {
                item.ForwardWalk = rhs.ForwardWalk;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.ForwardRun) ?? true))
            {
                item.ForwardRun = rhs.ForwardRun;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.BackWalk) ?? true))
            {
                item.BackWalk = rhs.BackWalk;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.BackRun) ?? true))
            {
                item.BackRun = rhs.BackRun;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.RotateInPlaceWalk) ?? true))
            {
                item.RotateInPlaceWalk = rhs.RotateInPlaceWalk;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.RotateInPlaceRun) ?? true))
            {
                item.RotateInPlaceRun = rhs.RotateInPlaceRun;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.RotateWhileMovingRun) ?? true))
            {
                item.RotateWhileMovingRun = rhs.RotateWhileMovingRun;
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.AnimationChangeThresholds) ?? true))
            {
                errorMask?.PushIndex((int)MovementType_FieldIndex.AnimationChangeThresholds);
                try
                {
                    if(rhs.AnimationChangeThresholds.TryGet(out var rhsAnimationChangeThresholds))
                    {
                        item.AnimationChangeThresholds = rhsAnimationChangeThresholds.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MovementType_FieldIndex.AnimationChangeThresholds));
                    }
                    else
                    {
                        item.AnimationChangeThresholds = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MovementType_FieldIndex.SPEDDataTypeState) ?? true))
            {
                item.SPEDDataTypeState = rhs.SPEDDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMovementTypeInternal)item,
                rhs: (IMovementTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMovementType)item,
                rhs: (IMovementTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMovementTypeInternal)item,
                rhs: (IMovementTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMovementType)item,
                rhs: (IMovementTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public MovementType DeepCopy(
            IMovementTypeGetter item,
            MovementType.TranslationMask? copyMask = null)
        {
            MovementType ret = (MovementType)((MovementTypeCommon)((IMovementTypeGetter)item).CommonInstance()!).GetNew();
            ((MovementTypeSetterTranslationCommon)((IMovementTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MovementType DeepCopy(
            IMovementTypeGetter item,
            out MovementType.ErrorMask errorMask,
            MovementType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MovementType ret = (MovementType)((MovementTypeCommon)((IMovementTypeGetter)item).CommonInstance()!).GetNew();
            ((MovementTypeSetterTranslationCommon)((IMovementTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MovementType.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MovementType DeepCopy(
            IMovementTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MovementType ret = (MovementType)((MovementTypeCommon)((IMovementTypeGetter)item).CommonInstance()!).GetNew();
            ((MovementTypeSetterTranslationCommon)((IMovementTypeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class MovementType
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MovementType_Registration.Instance;
        public new static MovementType_Registration Registration => MovementType_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MovementTypeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MovementTypeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MovementTypeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MovementTypeBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static MovementTypeBinaryWriteTranslation Instance = new MovementTypeBinaryWriteTranslation();

        public static void WriteEmbedded(
            IMovementTypeGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IMovementTypeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MNAM),
                binaryType: StringBinaryType.NullTerminate);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.SPED)))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LeftWalk);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LeftRun);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RightWalk);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RightRun);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ForwardWalk);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ForwardRun);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BackWalk);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BackRun);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RotateInPlaceWalk);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RotateInPlaceRun);
                if (!item.SPEDDataTypeState.HasFlag(MovementType.SPEDDataType.Break0))
                {
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.RotateWhileMovingRun);
                }
            }
            if (item.AnimationChangeThresholds.TryGet(out var AnimationChangeThresholdsItem))
            {
                ((AnimationChangeThresholdsBinaryWriteTranslation)((IBinaryItem)AnimationChangeThresholdsItem).BinaryWriteTranslator).Write(
                    item: AnimationChangeThresholdsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IMovementTypeGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.MOVT),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMovementTypeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMovementTypeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMovementTypeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class MovementTypeBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static MovementTypeBinaryCreateTranslation Instance = new MovementTypeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.MOVT;
        public static void FillBinaryStructs(
            IMovementTypeInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IMovementTypeInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)MovementType_FieldIndex.Name;
                }
                case RecordTypeInts.SPED:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.LeftWalk = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.LeftRun = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.RightWalk = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.RightRun = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ForwardWalk = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ForwardRun = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.BackWalk = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.BackRun = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.RotateInPlaceWalk = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.RotateInPlaceRun = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.SPEDDataTypeState |= MovementType.SPEDDataType.Break0;
                        return (int)MovementType_FieldIndex.RotateInPlaceRun;
                    }
                    item.RotateWhileMovingRun = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)MovementType_FieldIndex.RotateWhileMovingRun;
                }
                case RecordTypeInts.INAM:
                {
                    item.AnimationChangeThresholds = Mutagen.Bethesda.Fallout4.AnimationChangeThresholds.CreateFromBinary(frame: frame);
                    return (int)MovementType_FieldIndex.AnimationChangeThresholds;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class MovementTypeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MovementTypeBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IMovementTypeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MovementType_Registration.Instance;
        public new static MovementType_Registration Registration => MovementType_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MovementTypeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MovementTypeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MovementTypeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MovementTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        private int? _SPEDLocation;
        public MovementType.SPEDDataType SPEDDataTypeState { get; private set; }
        #region LeftWalk
        private int _LeftWalkLocation => _SPEDLocation!.Value;
        private bool _LeftWalk_IsSet => _SPEDLocation.HasValue;
        public Single LeftWalk => _LeftWalk_IsSet ? _data.Slice(_LeftWalkLocation, 4).Float() : default;
        #endregion
        #region LeftRun
        private int _LeftRunLocation => _SPEDLocation!.Value + 0x4;
        private bool _LeftRun_IsSet => _SPEDLocation.HasValue;
        public Single LeftRun => _LeftRun_IsSet ? _data.Slice(_LeftRunLocation, 4).Float() : default;
        #endregion
        #region RightWalk
        private int _RightWalkLocation => _SPEDLocation!.Value + 0x8;
        private bool _RightWalk_IsSet => _SPEDLocation.HasValue;
        public Single RightWalk => _RightWalk_IsSet ? _data.Slice(_RightWalkLocation, 4).Float() : default;
        #endregion
        #region RightRun
        private int _RightRunLocation => _SPEDLocation!.Value + 0xC;
        private bool _RightRun_IsSet => _SPEDLocation.HasValue;
        public Single RightRun => _RightRun_IsSet ? _data.Slice(_RightRunLocation, 4).Float() : default;
        #endregion
        #region ForwardWalk
        private int _ForwardWalkLocation => _SPEDLocation!.Value + 0x10;
        private bool _ForwardWalk_IsSet => _SPEDLocation.HasValue;
        public Single ForwardWalk => _ForwardWalk_IsSet ? _data.Slice(_ForwardWalkLocation, 4).Float() : default;
        #endregion
        #region ForwardRun
        private int _ForwardRunLocation => _SPEDLocation!.Value + 0x14;
        private bool _ForwardRun_IsSet => _SPEDLocation.HasValue;
        public Single ForwardRun => _ForwardRun_IsSet ? _data.Slice(_ForwardRunLocation, 4).Float() : default;
        #endregion
        #region BackWalk
        private int _BackWalkLocation => _SPEDLocation!.Value + 0x18;
        private bool _BackWalk_IsSet => _SPEDLocation.HasValue;
        public Single BackWalk => _BackWalk_IsSet ? _data.Slice(_BackWalkLocation, 4).Float() : default;
        #endregion
        #region BackRun
        private int _BackRunLocation => _SPEDLocation!.Value + 0x1C;
        private bool _BackRun_IsSet => _SPEDLocation.HasValue;
        public Single BackRun => _BackRun_IsSet ? _data.Slice(_BackRunLocation, 4).Float() : default;
        #endregion
        #region RotateInPlaceWalk
        private int _RotateInPlaceWalkLocation => _SPEDLocation!.Value + 0x20;
        private bool _RotateInPlaceWalk_IsSet => _SPEDLocation.HasValue;
        public Single RotateInPlaceWalk => _RotateInPlaceWalk_IsSet ? _data.Slice(_RotateInPlaceWalkLocation, 4).Float() : default;
        #endregion
        #region RotateInPlaceRun
        private int _RotateInPlaceRunLocation => _SPEDLocation!.Value + 0x24;
        private bool _RotateInPlaceRun_IsSet => _SPEDLocation.HasValue;
        public Single RotateInPlaceRun => _RotateInPlaceRun_IsSet ? _data.Slice(_RotateInPlaceRunLocation, 4).Float() : default;
        #endregion
        #region RotateWhileMovingRun
        private int _RotateWhileMovingRunLocation => _SPEDLocation!.Value + 0x28;
        private bool _RotateWhileMovingRun_IsSet => _SPEDLocation.HasValue && !SPEDDataTypeState.HasFlag(MovementType.SPEDDataType.Break0);
        public Single RotateWhileMovingRun => _RotateWhileMovingRun_IsSet ? _data.Slice(_RotateWhileMovingRunLocation, 4).Float() : default;
        #endregion
        #region AnimationChangeThresholds
        private RangeInt32? _AnimationChangeThresholdsLocation;
        public IAnimationChangeThresholdsGetter? AnimationChangeThresholds => _AnimationChangeThresholdsLocation.HasValue ? AnimationChangeThresholdsBinaryOverlay.AnimationChangeThresholdsFactory(new OverlayStream(_data.Slice(_AnimationChangeThresholdsLocation!.Value.Min), _package), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MovementTypeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static MovementTypeBinaryOverlay MovementTypeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new MovementTypeBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static MovementTypeBinaryOverlay MovementTypeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return MovementTypeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MNAM:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)MovementType_FieldIndex.Name;
                }
                case RecordTypeInts.SPED:
                {
                    _SPEDLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x28)
                    {
                        this.SPEDDataTypeState |= MovementType.SPEDDataType.Break0;
                    }
                    return (int)MovementType_FieldIndex.RotateWhileMovingRun;
                }
                case RecordTypeInts.INAM:
                {
                    _AnimationChangeThresholdsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)MovementType_FieldIndex.AnimationChangeThresholds;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MovementTypeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMovementTypeGetter rhs)) return false;
            return ((MovementTypeCommon)((IMovementTypeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IMovementTypeGetter? obj)
        {
            return ((MovementTypeCommon)((IMovementTypeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MovementTypeCommon)((IMovementTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

