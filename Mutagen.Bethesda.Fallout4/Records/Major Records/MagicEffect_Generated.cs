/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class MagicEffect :
        Fallout4MajorRecord,
        IMagicEffectInternal,
        ILoquiObjectSetter<MagicEffect>,
        IEquatable<IMagicEffectGetter>
    {
        #region Ctor
        protected MagicEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IMagicEffectGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IMagicEffectGetter.Name => this.Name;
        #endregion
        #region MenuDisplayObject
        public FormLinkNullable<IStaticGetter> MenuDisplayObject { get; set; } = new FormLinkNullable<IStaticGetter>();
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IKeywordGetter>>? _Keywords;
        public ExtendedList<IFormLink<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IKeywordGetter>>? IMagicEffectGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLink<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Flags
        public MagicEffect.Flag Flags { get; set; } = default;
        #endregion
        #region BaseCost
        public Single BaseCost { get; set; } = default;
        #endregion
        #region MagicSkill
        public readonly static ActorValue _MagicSkill_Default = ActorValue.None;
        public ActorValue MagicSkill { get; set; } = _MagicSkill_Default;
        #endregion
        #region ResistValue
        public readonly static ActorValue _ResistValue_Default = ActorValue.None;
        public ActorValue ResistValue { get; set; } = _ResistValue_Default;
        #endregion
        #region CounterEffectCount
        public UInt16 CounterEffectCount { get; set; } = default;
        #endregion
        #region Unknown1
        public UInt16 Unknown1 { get; set; } = default;
        #endregion
        #region CastingLight
        public FormLink<ILightGetter> CastingLight { get; set; } = new FormLink<ILightGetter>();
        #endregion
        #region TaperWeight
        public Single TaperWeight { get; set; } = default;
        #endregion
        #region HitShader
        public FormLink<IEffectShaderGetter> HitShader { get; set; } = new FormLink<IEffectShaderGetter>();
        #endregion
        #region EnchantShader
        public FormLink<IEffectShaderGetter> EnchantShader { get; set; } = new FormLink<IEffectShaderGetter>();
        #endregion
        #region MinimumSkillLevel
        public UInt32 MinimumSkillLevel { get; set; } = default;
        #endregion
        #region SpellmakingArea
        public UInt32 SpellmakingArea { get; set; } = default;
        #endregion
        #region SpellmakingCastingTime
        public Single SpellmakingCastingTime { get; set; } = default;
        #endregion
        #region TaperCurve
        public Single TaperCurve { get; set; } = default;
        #endregion
        #region TaperDuration
        public Single TaperDuration { get; set; } = default;
        #endregion
        #region SecondActorValueWeight
        public Single SecondActorValueWeight { get; set; } = default;
        #endregion
        #region Archetype
        public MagicEffectArchetype Archetype { get; set; } = new MagicEffectArchetype();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMagicEffectArchetypeGetter IMagicEffectGetter.Archetype => Archetype;
        #endregion
        #region Projectile
        public FormLink<IProjectileGetter> Projectile { get; set; } = new FormLink<IProjectileGetter>();
        #endregion
        #region Explosion
        public FormLink<IExplosionGetter> Explosion { get; set; } = new FormLink<IExplosionGetter>();
        #endregion
        #region CastType
        public CastType CastType { get; set; } = default;
        #endregion
        #region TargetType
        public TargetType TargetType { get; set; } = default;
        #endregion
        #region SecondActorValue
        public readonly static ActorValue _SecondActorValue_Default = ActorValue.None;
        public ActorValue SecondActorValue { get; set; } = _SecondActorValue_Default;
        #endregion
        #region CastingArt
        public FormLink<IArtObjectGetter> CastingArt { get; set; } = new FormLink<IArtObjectGetter>();
        #endregion
        #region HitEffectArt
        public FormLink<IArtObjectGetter> HitEffectArt { get; set; } = new FormLink<IArtObjectGetter>();
        #endregion
        #region ImpactData
        public FormLink<IImpactDataSetGetter> ImpactData { get; set; } = new FormLink<IImpactDataSetGetter>();
        #endregion
        #region SkillUsageMultiplier
        public Single SkillUsageMultiplier { get; set; } = default;
        #endregion
        #region DualCastArt
        public FormLink<IDualCastDataGetter> DualCastArt { get; set; } = new FormLink<IDualCastDataGetter>();
        #endregion
        #region DualCastScale
        public Single DualCastScale { get; set; } = default;
        #endregion
        #region EnchantArt
        public FormLink<IArtObjectGetter> EnchantArt { get; set; } = new FormLink<IArtObjectGetter>();
        #endregion
        #region Unknown2
        public FormLink<IFallout4MajorRecordGetter> Unknown2 { get; set; } = new FormLink<IFallout4MajorRecordGetter>();
        #endregion
        #region Unknown3
        public FormLink<IFallout4MajorRecordGetter> Unknown3 { get; set; } = new FormLink<IFallout4MajorRecordGetter>();
        #endregion
        #region EquipAbility
        public FormLink<ISpellGetter> EquipAbility { get; set; } = new FormLink<ISpellGetter>();
        #endregion
        #region ImageSpaceModifier
        public FormLink<IImageSpaceAdapterGetter> ImageSpaceModifier { get; set; } = new FormLink<IImageSpaceAdapterGetter>();
        #endregion
        #region PerkToApply
        public FormLink<IPerkGetter> PerkToApply { get; set; } = new FormLink<IPerkGetter>();
        #endregion
        #region CastingSoundLevel
        public SoundLevel CastingSoundLevel { get; set; } = default;
        #endregion
        #region ScriptEffectAIScore
        public Single ScriptEffectAIScore { get; set; } = default;
        #endregion
        #region ScriptEffectAIDelayTime
        public Single ScriptEffectAIDelayTime { get; set; } = default;
        #endregion
        #region CounterEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IMagicEffectGetter>> _CounterEffects = new ExtendedList<IFormLink<IMagicEffectGetter>>();
        public ExtendedList<IFormLink<IMagicEffectGetter>> CounterEffects
        {
            get => this._CounterEffects;
            protected set => this._CounterEffects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IMagicEffectGetter>> IMagicEffectGetter.CounterEffects => _CounterEffects;
        #endregion

        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MagicEffectSound>? _Sounds;
        public ExtendedList<MagicEffectSound>? Sounds
        {
            get => this._Sounds;
            set => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMagicEffectSoundGetter>? IMagicEffectGetter.Sounds => _Sounds;
        #endregion

        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IMagicEffectGetter.Description => this.Description;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IMagicEffectGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region DATADataTypeState
        public MagicEffect.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MagicEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMagicEffectGetter rhs)) return false;
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IMagicEffectGetter? obj)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.MenuDisplayObject = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = initialValue;
                this.BaseCost = initialValue;
                this.MagicSkill = initialValue;
                this.ResistValue = initialValue;
                this.CounterEffectCount = initialValue;
                this.Unknown1 = initialValue;
                this.CastingLight = initialValue;
                this.TaperWeight = initialValue;
                this.HitShader = initialValue;
                this.EnchantShader = initialValue;
                this.MinimumSkillLevel = initialValue;
                this.SpellmakingArea = initialValue;
                this.SpellmakingCastingTime = initialValue;
                this.TaperCurve = initialValue;
                this.TaperDuration = initialValue;
                this.SecondActorValueWeight = initialValue;
                this.Archetype = new MaskItem<TItem, MagicEffectArchetype.Mask<TItem>?>(initialValue, new MagicEffectArchetype.Mask<TItem>(initialValue));
                this.Projectile = initialValue;
                this.Explosion = initialValue;
                this.CastType = initialValue;
                this.TargetType = initialValue;
                this.SecondActorValue = initialValue;
                this.CastingArt = initialValue;
                this.HitEffectArt = initialValue;
                this.ImpactData = initialValue;
                this.SkillUsageMultiplier = initialValue;
                this.DualCastArt = initialValue;
                this.DualCastScale = initialValue;
                this.EnchantArt = initialValue;
                this.Unknown2 = initialValue;
                this.Unknown3 = initialValue;
                this.EquipAbility = initialValue;
                this.ImageSpaceModifier = initialValue;
                this.PerkToApply = initialValue;
                this.CastingSoundLevel = initialValue;
                this.ScriptEffectAIScore = initialValue;
                this.ScriptEffectAIDelayTime = initialValue;
                this.CounterEffects = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>());
                this.Description = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem Name,
                TItem MenuDisplayObject,
                TItem Keywords,
                TItem Flags,
                TItem BaseCost,
                TItem MagicSkill,
                TItem ResistValue,
                TItem CounterEffectCount,
                TItem Unknown1,
                TItem CastingLight,
                TItem TaperWeight,
                TItem HitShader,
                TItem EnchantShader,
                TItem MinimumSkillLevel,
                TItem SpellmakingArea,
                TItem SpellmakingCastingTime,
                TItem TaperCurve,
                TItem TaperDuration,
                TItem SecondActorValueWeight,
                TItem Archetype,
                TItem Projectile,
                TItem Explosion,
                TItem CastType,
                TItem TargetType,
                TItem SecondActorValue,
                TItem CastingArt,
                TItem HitEffectArt,
                TItem ImpactData,
                TItem SkillUsageMultiplier,
                TItem DualCastArt,
                TItem DualCastScale,
                TItem EnchantArt,
                TItem Unknown2,
                TItem Unknown3,
                TItem EquipAbility,
                TItem ImageSpaceModifier,
                TItem PerkToApply,
                TItem CastingSoundLevel,
                TItem ScriptEffectAIScore,
                TItem ScriptEffectAIDelayTime,
                TItem CounterEffects,
                TItem Sounds,
                TItem Description,
                TItem Conditions,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Name = Name;
                this.MenuDisplayObject = MenuDisplayObject;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = Flags;
                this.BaseCost = BaseCost;
                this.MagicSkill = MagicSkill;
                this.ResistValue = ResistValue;
                this.CounterEffectCount = CounterEffectCount;
                this.Unknown1 = Unknown1;
                this.CastingLight = CastingLight;
                this.TaperWeight = TaperWeight;
                this.HitShader = HitShader;
                this.EnchantShader = EnchantShader;
                this.MinimumSkillLevel = MinimumSkillLevel;
                this.SpellmakingArea = SpellmakingArea;
                this.SpellmakingCastingTime = SpellmakingCastingTime;
                this.TaperCurve = TaperCurve;
                this.TaperDuration = TaperDuration;
                this.SecondActorValueWeight = SecondActorValueWeight;
                this.Archetype = new MaskItem<TItem, MagicEffectArchetype.Mask<TItem>?>(Archetype, new MagicEffectArchetype.Mask<TItem>(Archetype));
                this.Projectile = Projectile;
                this.Explosion = Explosion;
                this.CastType = CastType;
                this.TargetType = TargetType;
                this.SecondActorValue = SecondActorValue;
                this.CastingArt = CastingArt;
                this.HitEffectArt = HitEffectArt;
                this.ImpactData = ImpactData;
                this.SkillUsageMultiplier = SkillUsageMultiplier;
                this.DualCastArt = DualCastArt;
                this.DualCastScale = DualCastScale;
                this.EnchantArt = EnchantArt;
                this.Unknown2 = Unknown2;
                this.Unknown3 = Unknown3;
                this.EquipAbility = EquipAbility;
                this.ImageSpaceModifier = ImageSpaceModifier;
                this.PerkToApply = PerkToApply;
                this.CastingSoundLevel = CastingSoundLevel;
                this.ScriptEffectAIScore = ScriptEffectAIScore;
                this.ScriptEffectAIDelayTime = ScriptEffectAIDelayTime;
                this.CounterEffects = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(CounterEffects, Enumerable.Empty<(int Index, TItem Value)>());
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>());
                this.Description = Description;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Name;
            public TItem MenuDisplayObject;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem Flags;
            public TItem BaseCost;
            public TItem MagicSkill;
            public TItem ResistValue;
            public TItem CounterEffectCount;
            public TItem Unknown1;
            public TItem CastingLight;
            public TItem TaperWeight;
            public TItem HitShader;
            public TItem EnchantShader;
            public TItem MinimumSkillLevel;
            public TItem SpellmakingArea;
            public TItem SpellmakingCastingTime;
            public TItem TaperCurve;
            public TItem TaperDuration;
            public TItem SecondActorValueWeight;
            public MaskItem<TItem, MagicEffectArchetype.Mask<TItem>?>? Archetype { get; set; }
            public TItem Projectile;
            public TItem Explosion;
            public TItem CastType;
            public TItem TargetType;
            public TItem SecondActorValue;
            public TItem CastingArt;
            public TItem HitEffectArt;
            public TItem ImpactData;
            public TItem SkillUsageMultiplier;
            public TItem DualCastArt;
            public TItem DualCastScale;
            public TItem EnchantArt;
            public TItem Unknown2;
            public TItem Unknown3;
            public TItem EquipAbility;
            public TItem ImageSpaceModifier;
            public TItem PerkToApply;
            public TItem CastingSoundLevel;
            public TItem ScriptEffectAIScore;
            public TItem ScriptEffectAIDelayTime;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? CounterEffects;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>?>? Sounds;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.MenuDisplayObject, rhs.MenuDisplayObject)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
                if (!object.Equals(this.MagicSkill, rhs.MagicSkill)) return false;
                if (!object.Equals(this.ResistValue, rhs.ResistValue)) return false;
                if (!object.Equals(this.CounterEffectCount, rhs.CounterEffectCount)) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.CastingLight, rhs.CastingLight)) return false;
                if (!object.Equals(this.TaperWeight, rhs.TaperWeight)) return false;
                if (!object.Equals(this.HitShader, rhs.HitShader)) return false;
                if (!object.Equals(this.EnchantShader, rhs.EnchantShader)) return false;
                if (!object.Equals(this.MinimumSkillLevel, rhs.MinimumSkillLevel)) return false;
                if (!object.Equals(this.SpellmakingArea, rhs.SpellmakingArea)) return false;
                if (!object.Equals(this.SpellmakingCastingTime, rhs.SpellmakingCastingTime)) return false;
                if (!object.Equals(this.TaperCurve, rhs.TaperCurve)) return false;
                if (!object.Equals(this.TaperDuration, rhs.TaperDuration)) return false;
                if (!object.Equals(this.SecondActorValueWeight, rhs.SecondActorValueWeight)) return false;
                if (!object.Equals(this.Archetype, rhs.Archetype)) return false;
                if (!object.Equals(this.Projectile, rhs.Projectile)) return false;
                if (!object.Equals(this.Explosion, rhs.Explosion)) return false;
                if (!object.Equals(this.CastType, rhs.CastType)) return false;
                if (!object.Equals(this.TargetType, rhs.TargetType)) return false;
                if (!object.Equals(this.SecondActorValue, rhs.SecondActorValue)) return false;
                if (!object.Equals(this.CastingArt, rhs.CastingArt)) return false;
                if (!object.Equals(this.HitEffectArt, rhs.HitEffectArt)) return false;
                if (!object.Equals(this.ImpactData, rhs.ImpactData)) return false;
                if (!object.Equals(this.SkillUsageMultiplier, rhs.SkillUsageMultiplier)) return false;
                if (!object.Equals(this.DualCastArt, rhs.DualCastArt)) return false;
                if (!object.Equals(this.DualCastScale, rhs.DualCastScale)) return false;
                if (!object.Equals(this.EnchantArt, rhs.EnchantArt)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.EquipAbility, rhs.EquipAbility)) return false;
                if (!object.Equals(this.ImageSpaceModifier, rhs.ImageSpaceModifier)) return false;
                if (!object.Equals(this.PerkToApply, rhs.PerkToApply)) return false;
                if (!object.Equals(this.CastingSoundLevel, rhs.CastingSoundLevel)) return false;
                if (!object.Equals(this.ScriptEffectAIScore, rhs.ScriptEffectAIScore)) return false;
                if (!object.Equals(this.ScriptEffectAIDelayTime, rhs.ScriptEffectAIDelayTime)) return false;
                if (!object.Equals(this.CounterEffects, rhs.CounterEffects)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Name);
                hash.Add(this.MenuDisplayObject);
                hash.Add(this.Keywords);
                hash.Add(this.Flags);
                hash.Add(this.BaseCost);
                hash.Add(this.MagicSkill);
                hash.Add(this.ResistValue);
                hash.Add(this.CounterEffectCount);
                hash.Add(this.Unknown1);
                hash.Add(this.CastingLight);
                hash.Add(this.TaperWeight);
                hash.Add(this.HitShader);
                hash.Add(this.EnchantShader);
                hash.Add(this.MinimumSkillLevel);
                hash.Add(this.SpellmakingArea);
                hash.Add(this.SpellmakingCastingTime);
                hash.Add(this.TaperCurve);
                hash.Add(this.TaperDuration);
                hash.Add(this.SecondActorValueWeight);
                hash.Add(this.Archetype);
                hash.Add(this.Projectile);
                hash.Add(this.Explosion);
                hash.Add(this.CastType);
                hash.Add(this.TargetType);
                hash.Add(this.SecondActorValue);
                hash.Add(this.CastingArt);
                hash.Add(this.HitEffectArt);
                hash.Add(this.ImpactData);
                hash.Add(this.SkillUsageMultiplier);
                hash.Add(this.DualCastArt);
                hash.Add(this.DualCastScale);
                hash.Add(this.EnchantArt);
                hash.Add(this.Unknown2);
                hash.Add(this.Unknown3);
                hash.Add(this.EquipAbility);
                hash.Add(this.ImageSpaceModifier);
                hash.Add(this.PerkToApply);
                hash.Add(this.CastingSoundLevel);
                hash.Add(this.ScriptEffectAIScore);
                hash.Add(this.ScriptEffectAIDelayTime);
                hash.Add(this.CounterEffects);
                hash.Add(this.Sounds);
                hash.Add(this.Description);
                hash.Add(this.Conditions);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.MenuDisplayObject)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.BaseCost)) return false;
                if (!eval(this.MagicSkill)) return false;
                if (!eval(this.ResistValue)) return false;
                if (!eval(this.CounterEffectCount)) return false;
                if (!eval(this.Unknown1)) return false;
                if (!eval(this.CastingLight)) return false;
                if (!eval(this.TaperWeight)) return false;
                if (!eval(this.HitShader)) return false;
                if (!eval(this.EnchantShader)) return false;
                if (!eval(this.MinimumSkillLevel)) return false;
                if (!eval(this.SpellmakingArea)) return false;
                if (!eval(this.SpellmakingCastingTime)) return false;
                if (!eval(this.TaperCurve)) return false;
                if (!eval(this.TaperDuration)) return false;
                if (!eval(this.SecondActorValueWeight)) return false;
                if (Archetype != null)
                {
                    if (!eval(this.Archetype.Overall)) return false;
                    if (this.Archetype.Specific != null && !this.Archetype.Specific.All(eval)) return false;
                }
                if (!eval(this.Projectile)) return false;
                if (!eval(this.Explosion)) return false;
                if (!eval(this.CastType)) return false;
                if (!eval(this.TargetType)) return false;
                if (!eval(this.SecondActorValue)) return false;
                if (!eval(this.CastingArt)) return false;
                if (!eval(this.HitEffectArt)) return false;
                if (!eval(this.ImpactData)) return false;
                if (!eval(this.SkillUsageMultiplier)) return false;
                if (!eval(this.DualCastArt)) return false;
                if (!eval(this.DualCastScale)) return false;
                if (!eval(this.EnchantArt)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.EquipAbility)) return false;
                if (!eval(this.ImageSpaceModifier)) return false;
                if (!eval(this.PerkToApply)) return false;
                if (!eval(this.CastingSoundLevel)) return false;
                if (!eval(this.ScriptEffectAIScore)) return false;
                if (!eval(this.ScriptEffectAIDelayTime)) return false;
                if (this.CounterEffects != null)
                {
                    if (!eval(this.CounterEffects.Overall)) return false;
                    if (this.CounterEffects.Specific != null)
                    {
                        foreach (var item in this.CounterEffects.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Description)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.MenuDisplayObject)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.BaseCost)) return true;
                if (eval(this.MagicSkill)) return true;
                if (eval(this.ResistValue)) return true;
                if (eval(this.CounterEffectCount)) return true;
                if (eval(this.Unknown1)) return true;
                if (eval(this.CastingLight)) return true;
                if (eval(this.TaperWeight)) return true;
                if (eval(this.HitShader)) return true;
                if (eval(this.EnchantShader)) return true;
                if (eval(this.MinimumSkillLevel)) return true;
                if (eval(this.SpellmakingArea)) return true;
                if (eval(this.SpellmakingCastingTime)) return true;
                if (eval(this.TaperCurve)) return true;
                if (eval(this.TaperDuration)) return true;
                if (eval(this.SecondActorValueWeight)) return true;
                if (Archetype != null)
                {
                    if (eval(this.Archetype.Overall)) return true;
                    if (this.Archetype.Specific != null && this.Archetype.Specific.Any(eval)) return true;
                }
                if (eval(this.Projectile)) return true;
                if (eval(this.Explosion)) return true;
                if (eval(this.CastType)) return true;
                if (eval(this.TargetType)) return true;
                if (eval(this.SecondActorValue)) return true;
                if (eval(this.CastingArt)) return true;
                if (eval(this.HitEffectArt)) return true;
                if (eval(this.ImpactData)) return true;
                if (eval(this.SkillUsageMultiplier)) return true;
                if (eval(this.DualCastArt)) return true;
                if (eval(this.DualCastScale)) return true;
                if (eval(this.EnchantArt)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.EquipAbility)) return true;
                if (eval(this.ImageSpaceModifier)) return true;
                if (eval(this.PerkToApply)) return true;
                if (eval(this.CastingSoundLevel)) return true;
                if (eval(this.ScriptEffectAIScore)) return true;
                if (eval(this.ScriptEffectAIDelayTime)) return true;
                if (this.CounterEffects != null)
                {
                    if (eval(this.CounterEffects.Overall)) return true;
                    if (this.CounterEffects.Specific != null)
                    {
                        foreach (var item in this.CounterEffects.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Description)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MagicEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.MenuDisplayObject = eval(this.MenuDisplayObject);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.BaseCost = eval(this.BaseCost);
                obj.MagicSkill = eval(this.MagicSkill);
                obj.ResistValue = eval(this.ResistValue);
                obj.CounterEffectCount = eval(this.CounterEffectCount);
                obj.Unknown1 = eval(this.Unknown1);
                obj.CastingLight = eval(this.CastingLight);
                obj.TaperWeight = eval(this.TaperWeight);
                obj.HitShader = eval(this.HitShader);
                obj.EnchantShader = eval(this.EnchantShader);
                obj.MinimumSkillLevel = eval(this.MinimumSkillLevel);
                obj.SpellmakingArea = eval(this.SpellmakingArea);
                obj.SpellmakingCastingTime = eval(this.SpellmakingCastingTime);
                obj.TaperCurve = eval(this.TaperCurve);
                obj.TaperDuration = eval(this.TaperDuration);
                obj.SecondActorValueWeight = eval(this.SecondActorValueWeight);
                obj.Archetype = this.Archetype == null ? null : new MaskItem<R, MagicEffectArchetype.Mask<R>?>(eval(this.Archetype.Overall), this.Archetype.Specific?.Translate(eval));
                obj.Projectile = eval(this.Projectile);
                obj.Explosion = eval(this.Explosion);
                obj.CastType = eval(this.CastType);
                obj.TargetType = eval(this.TargetType);
                obj.SecondActorValue = eval(this.SecondActorValue);
                obj.CastingArt = eval(this.CastingArt);
                obj.HitEffectArt = eval(this.HitEffectArt);
                obj.ImpactData = eval(this.ImpactData);
                obj.SkillUsageMultiplier = eval(this.SkillUsageMultiplier);
                obj.DualCastArt = eval(this.DualCastArt);
                obj.DualCastScale = eval(this.DualCastScale);
                obj.EnchantArt = eval(this.EnchantArt);
                obj.Unknown2 = eval(this.Unknown2);
                obj.Unknown3 = eval(this.Unknown3);
                obj.EquipAbility = eval(this.EquipAbility);
                obj.ImageSpaceModifier = eval(this.ImageSpaceModifier);
                obj.PerkToApply = eval(this.PerkToApply);
                obj.CastingSoundLevel = eval(this.CastingSoundLevel);
                obj.ScriptEffectAIScore = eval(this.ScriptEffectAIScore);
                obj.ScriptEffectAIDelayTime = eval(this.ScriptEffectAIDelayTime);
                if (CounterEffects != null)
                {
                    obj.CounterEffects = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.CounterEffects.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (CounterEffects.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.CounterEffects.Specific = l;
                        foreach (var item in CounterEffects.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MagicEffectSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, MagicEffectSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MagicEffectSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, MagicEffectSound.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, MagicEffectSound.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Description = eval(this.Description);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MagicEffect.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MagicEffect.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MagicEffect.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.MenuDisplayObject ?? true)
                    {
                        fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.BaseCost ?? true)
                    {
                        fg.AppendItem(BaseCost, "BaseCost");
                    }
                    if (printMask?.MagicSkill ?? true)
                    {
                        fg.AppendItem(MagicSkill, "MagicSkill");
                    }
                    if (printMask?.ResistValue ?? true)
                    {
                        fg.AppendItem(ResistValue, "ResistValue");
                    }
                    if (printMask?.CounterEffectCount ?? true)
                    {
                        fg.AppendItem(CounterEffectCount, "CounterEffectCount");
                    }
                    if (printMask?.Unknown1 ?? true)
                    {
                        fg.AppendItem(Unknown1, "Unknown1");
                    }
                    if (printMask?.CastingLight ?? true)
                    {
                        fg.AppendItem(CastingLight, "CastingLight");
                    }
                    if (printMask?.TaperWeight ?? true)
                    {
                        fg.AppendItem(TaperWeight, "TaperWeight");
                    }
                    if (printMask?.HitShader ?? true)
                    {
                        fg.AppendItem(HitShader, "HitShader");
                    }
                    if (printMask?.EnchantShader ?? true)
                    {
                        fg.AppendItem(EnchantShader, "EnchantShader");
                    }
                    if (printMask?.MinimumSkillLevel ?? true)
                    {
                        fg.AppendItem(MinimumSkillLevel, "MinimumSkillLevel");
                    }
                    if (printMask?.SpellmakingArea ?? true)
                    {
                        fg.AppendItem(SpellmakingArea, "SpellmakingArea");
                    }
                    if (printMask?.SpellmakingCastingTime ?? true)
                    {
                        fg.AppendItem(SpellmakingCastingTime, "SpellmakingCastingTime");
                    }
                    if (printMask?.TaperCurve ?? true)
                    {
                        fg.AppendItem(TaperCurve, "TaperCurve");
                    }
                    if (printMask?.TaperDuration ?? true)
                    {
                        fg.AppendItem(TaperDuration, "TaperDuration");
                    }
                    if (printMask?.SecondActorValueWeight ?? true)
                    {
                        fg.AppendItem(SecondActorValueWeight, "SecondActorValueWeight");
                    }
                    if (printMask?.Archetype?.Overall ?? true)
                    {
                        Archetype?.ToString(fg);
                    }
                    if (printMask?.Projectile ?? true)
                    {
                        fg.AppendItem(Projectile, "Projectile");
                    }
                    if (printMask?.Explosion ?? true)
                    {
                        fg.AppendItem(Explosion, "Explosion");
                    }
                    if (printMask?.CastType ?? true)
                    {
                        fg.AppendItem(CastType, "CastType");
                    }
                    if (printMask?.TargetType ?? true)
                    {
                        fg.AppendItem(TargetType, "TargetType");
                    }
                    if (printMask?.SecondActorValue ?? true)
                    {
                        fg.AppendItem(SecondActorValue, "SecondActorValue");
                    }
                    if (printMask?.CastingArt ?? true)
                    {
                        fg.AppendItem(CastingArt, "CastingArt");
                    }
                    if (printMask?.HitEffectArt ?? true)
                    {
                        fg.AppendItem(HitEffectArt, "HitEffectArt");
                    }
                    if (printMask?.ImpactData ?? true)
                    {
                        fg.AppendItem(ImpactData, "ImpactData");
                    }
                    if (printMask?.SkillUsageMultiplier ?? true)
                    {
                        fg.AppendItem(SkillUsageMultiplier, "SkillUsageMultiplier");
                    }
                    if (printMask?.DualCastArt ?? true)
                    {
                        fg.AppendItem(DualCastArt, "DualCastArt");
                    }
                    if (printMask?.DualCastScale ?? true)
                    {
                        fg.AppendItem(DualCastScale, "DualCastScale");
                    }
                    if (printMask?.EnchantArt ?? true)
                    {
                        fg.AppendItem(EnchantArt, "EnchantArt");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        fg.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.EquipAbility ?? true)
                    {
                        fg.AppendItem(EquipAbility, "EquipAbility");
                    }
                    if (printMask?.ImageSpaceModifier ?? true)
                    {
                        fg.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                    }
                    if (printMask?.PerkToApply ?? true)
                    {
                        fg.AppendItem(PerkToApply, "PerkToApply");
                    }
                    if (printMask?.CastingSoundLevel ?? true)
                    {
                        fg.AppendItem(CastingSoundLevel, "CastingSoundLevel");
                    }
                    if (printMask?.ScriptEffectAIScore ?? true)
                    {
                        fg.AppendItem(ScriptEffectAIScore, "ScriptEffectAIScore");
                    }
                    if (printMask?.ScriptEffectAIDelayTime ?? true)
                    {
                        fg.AppendItem(ScriptEffectAIDelayTime, "ScriptEffectAIDelayTime");
                    }
                    if ((printMask?.CounterEffects?.Overall ?? true)
                        && CounterEffects.TryGet(out var CounterEffectsItem))
                    {
                        fg.AppendLine("CounterEffects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(CounterEffectsItem.Overall);
                            if (CounterEffectsItem.Specific != null)
                            {
                                foreach (var subItem in CounterEffectsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds.TryGet(out var SoundsItem))
                    {
                        fg.AppendLine("Sounds =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Name;
            public Exception? MenuDisplayObject;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? Flags;
            public Exception? BaseCost;
            public Exception? MagicSkill;
            public Exception? ResistValue;
            public Exception? CounterEffectCount;
            public Exception? Unknown1;
            public Exception? CastingLight;
            public Exception? TaperWeight;
            public Exception? HitShader;
            public Exception? EnchantShader;
            public Exception? MinimumSkillLevel;
            public Exception? SpellmakingArea;
            public Exception? SpellmakingCastingTime;
            public Exception? TaperCurve;
            public Exception? TaperDuration;
            public Exception? SecondActorValueWeight;
            public MaskItem<Exception?, MagicEffectArchetype.ErrorMask?>? Archetype;
            public Exception? Projectile;
            public Exception? Explosion;
            public Exception? CastType;
            public Exception? TargetType;
            public Exception? SecondActorValue;
            public Exception? CastingArt;
            public Exception? HitEffectArt;
            public Exception? ImpactData;
            public Exception? SkillUsageMultiplier;
            public Exception? DualCastArt;
            public Exception? DualCastScale;
            public Exception? EnchantArt;
            public Exception? Unknown2;
            public Exception? Unknown3;
            public Exception? EquipAbility;
            public Exception? ImageSpaceModifier;
            public Exception? PerkToApply;
            public Exception? CastingSoundLevel;
            public Exception? ScriptEffectAIScore;
            public Exception? ScriptEffectAIDelayTime;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? CounterEffects;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>? Sounds;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case MagicEffect_FieldIndex.Name:
                        return Name;
                    case MagicEffect_FieldIndex.MenuDisplayObject:
                        return MenuDisplayObject;
                    case MagicEffect_FieldIndex.Keywords:
                        return Keywords;
                    case MagicEffect_FieldIndex.Flags:
                        return Flags;
                    case MagicEffect_FieldIndex.BaseCost:
                        return BaseCost;
                    case MagicEffect_FieldIndex.MagicSkill:
                        return MagicSkill;
                    case MagicEffect_FieldIndex.ResistValue:
                        return ResistValue;
                    case MagicEffect_FieldIndex.CounterEffectCount:
                        return CounterEffectCount;
                    case MagicEffect_FieldIndex.Unknown1:
                        return Unknown1;
                    case MagicEffect_FieldIndex.CastingLight:
                        return CastingLight;
                    case MagicEffect_FieldIndex.TaperWeight:
                        return TaperWeight;
                    case MagicEffect_FieldIndex.HitShader:
                        return HitShader;
                    case MagicEffect_FieldIndex.EnchantShader:
                        return EnchantShader;
                    case MagicEffect_FieldIndex.MinimumSkillLevel:
                        return MinimumSkillLevel;
                    case MagicEffect_FieldIndex.SpellmakingArea:
                        return SpellmakingArea;
                    case MagicEffect_FieldIndex.SpellmakingCastingTime:
                        return SpellmakingCastingTime;
                    case MagicEffect_FieldIndex.TaperCurve:
                        return TaperCurve;
                    case MagicEffect_FieldIndex.TaperDuration:
                        return TaperDuration;
                    case MagicEffect_FieldIndex.SecondActorValueWeight:
                        return SecondActorValueWeight;
                    case MagicEffect_FieldIndex.Archetype:
                        return Archetype;
                    case MagicEffect_FieldIndex.Projectile:
                        return Projectile;
                    case MagicEffect_FieldIndex.Explosion:
                        return Explosion;
                    case MagicEffect_FieldIndex.CastType:
                        return CastType;
                    case MagicEffect_FieldIndex.TargetType:
                        return TargetType;
                    case MagicEffect_FieldIndex.SecondActorValue:
                        return SecondActorValue;
                    case MagicEffect_FieldIndex.CastingArt:
                        return CastingArt;
                    case MagicEffect_FieldIndex.HitEffectArt:
                        return HitEffectArt;
                    case MagicEffect_FieldIndex.ImpactData:
                        return ImpactData;
                    case MagicEffect_FieldIndex.SkillUsageMultiplier:
                        return SkillUsageMultiplier;
                    case MagicEffect_FieldIndex.DualCastArt:
                        return DualCastArt;
                    case MagicEffect_FieldIndex.DualCastScale:
                        return DualCastScale;
                    case MagicEffect_FieldIndex.EnchantArt:
                        return EnchantArt;
                    case MagicEffect_FieldIndex.Unknown2:
                        return Unknown2;
                    case MagicEffect_FieldIndex.Unknown3:
                        return Unknown3;
                    case MagicEffect_FieldIndex.EquipAbility:
                        return EquipAbility;
                    case MagicEffect_FieldIndex.ImageSpaceModifier:
                        return ImageSpaceModifier;
                    case MagicEffect_FieldIndex.PerkToApply:
                        return PerkToApply;
                    case MagicEffect_FieldIndex.CastingSoundLevel:
                        return CastingSoundLevel;
                    case MagicEffect_FieldIndex.ScriptEffectAIScore:
                        return ScriptEffectAIScore;
                    case MagicEffect_FieldIndex.ScriptEffectAIDelayTime:
                        return ScriptEffectAIDelayTime;
                    case MagicEffect_FieldIndex.CounterEffects:
                        return CounterEffects;
                    case MagicEffect_FieldIndex.Sounds:
                        return Sounds;
                    case MagicEffect_FieldIndex.Description:
                        return Description;
                    case MagicEffect_FieldIndex.Conditions:
                        return Conditions;
                    case MagicEffect_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case MagicEffect_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = ex;
                        break;
                    case MagicEffect_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case MagicEffect_FieldIndex.BaseCost:
                        this.BaseCost = ex;
                        break;
                    case MagicEffect_FieldIndex.MagicSkill:
                        this.MagicSkill = ex;
                        break;
                    case MagicEffect_FieldIndex.ResistValue:
                        this.ResistValue = ex;
                        break;
                    case MagicEffect_FieldIndex.CounterEffectCount:
                        this.CounterEffectCount = ex;
                        break;
                    case MagicEffect_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    case MagicEffect_FieldIndex.CastingLight:
                        this.CastingLight = ex;
                        break;
                    case MagicEffect_FieldIndex.TaperWeight:
                        this.TaperWeight = ex;
                        break;
                    case MagicEffect_FieldIndex.HitShader:
                        this.HitShader = ex;
                        break;
                    case MagicEffect_FieldIndex.EnchantShader:
                        this.EnchantShader = ex;
                        break;
                    case MagicEffect_FieldIndex.MinimumSkillLevel:
                        this.MinimumSkillLevel = ex;
                        break;
                    case MagicEffect_FieldIndex.SpellmakingArea:
                        this.SpellmakingArea = ex;
                        break;
                    case MagicEffect_FieldIndex.SpellmakingCastingTime:
                        this.SpellmakingCastingTime = ex;
                        break;
                    case MagicEffect_FieldIndex.TaperCurve:
                        this.TaperCurve = ex;
                        break;
                    case MagicEffect_FieldIndex.TaperDuration:
                        this.TaperDuration = ex;
                        break;
                    case MagicEffect_FieldIndex.SecondActorValueWeight:
                        this.SecondActorValueWeight = ex;
                        break;
                    case MagicEffect_FieldIndex.Archetype:
                        this.Archetype = new MaskItem<Exception?, MagicEffectArchetype.ErrorMask?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Projectile:
                        this.Projectile = ex;
                        break;
                    case MagicEffect_FieldIndex.Explosion:
                        this.Explosion = ex;
                        break;
                    case MagicEffect_FieldIndex.CastType:
                        this.CastType = ex;
                        break;
                    case MagicEffect_FieldIndex.TargetType:
                        this.TargetType = ex;
                        break;
                    case MagicEffect_FieldIndex.SecondActorValue:
                        this.SecondActorValue = ex;
                        break;
                    case MagicEffect_FieldIndex.CastingArt:
                        this.CastingArt = ex;
                        break;
                    case MagicEffect_FieldIndex.HitEffectArt:
                        this.HitEffectArt = ex;
                        break;
                    case MagicEffect_FieldIndex.ImpactData:
                        this.ImpactData = ex;
                        break;
                    case MagicEffect_FieldIndex.SkillUsageMultiplier:
                        this.SkillUsageMultiplier = ex;
                        break;
                    case MagicEffect_FieldIndex.DualCastArt:
                        this.DualCastArt = ex;
                        break;
                    case MagicEffect_FieldIndex.DualCastScale:
                        this.DualCastScale = ex;
                        break;
                    case MagicEffect_FieldIndex.EnchantArt:
                        this.EnchantArt = ex;
                        break;
                    case MagicEffect_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case MagicEffect_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case MagicEffect_FieldIndex.EquipAbility:
                        this.EquipAbility = ex;
                        break;
                    case MagicEffect_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = ex;
                        break;
                    case MagicEffect_FieldIndex.PerkToApply:
                        this.PerkToApply = ex;
                        break;
                    case MagicEffect_FieldIndex.CastingSoundLevel:
                        this.CastingSoundLevel = ex;
                        break;
                    case MagicEffect_FieldIndex.ScriptEffectAIScore:
                        this.ScriptEffectAIScore = ex;
                        break;
                    case MagicEffect_FieldIndex.ScriptEffectAIDelayTime:
                        this.ScriptEffectAIDelayTime = ex;
                        break;
                    case MagicEffect_FieldIndex.CounterEffects:
                        this.CounterEffects = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case MagicEffect_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case MagicEffect_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.BaseCost:
                        this.BaseCost = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.MagicSkill:
                        this.MagicSkill = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.ResistValue:
                        this.ResistValue = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.CounterEffectCount:
                        this.CounterEffectCount = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.CastingLight:
                        this.CastingLight = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.TaperWeight:
                        this.TaperWeight = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.HitShader:
                        this.HitShader = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.EnchantShader:
                        this.EnchantShader = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.MinimumSkillLevel:
                        this.MinimumSkillLevel = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.SpellmakingArea:
                        this.SpellmakingArea = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.SpellmakingCastingTime:
                        this.SpellmakingCastingTime = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.TaperCurve:
                        this.TaperCurve = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.TaperDuration:
                        this.TaperDuration = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.SecondActorValueWeight:
                        this.SecondActorValueWeight = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Archetype:
                        this.Archetype = (MaskItem<Exception?, MagicEffectArchetype.ErrorMask?>?)obj;
                        break;
                    case MagicEffect_FieldIndex.Projectile:
                        this.Projectile = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Explosion:
                        this.Explosion = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.CastType:
                        this.CastType = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.TargetType:
                        this.TargetType = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.SecondActorValue:
                        this.SecondActorValue = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.CastingArt:
                        this.CastingArt = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.HitEffectArt:
                        this.HitEffectArt = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.ImpactData:
                        this.ImpactData = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.SkillUsageMultiplier:
                        this.SkillUsageMultiplier = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.DualCastArt:
                        this.DualCastArt = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.DualCastScale:
                        this.DualCastScale = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.EnchantArt:
                        this.EnchantArt = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.EquipAbility:
                        this.EquipAbility = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.PerkToApply:
                        this.PerkToApply = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.CastingSoundLevel:
                        this.CastingSoundLevel = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.ScriptEffectAIScore:
                        this.ScriptEffectAIScore = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.ScriptEffectAIDelayTime:
                        this.ScriptEffectAIDelayTime = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.CounterEffects:
                        this.CounterEffects = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Name != null) return true;
                if (MenuDisplayObject != null) return true;
                if (Keywords != null) return true;
                if (Flags != null) return true;
                if (BaseCost != null) return true;
                if (MagicSkill != null) return true;
                if (ResistValue != null) return true;
                if (CounterEffectCount != null) return true;
                if (Unknown1 != null) return true;
                if (CastingLight != null) return true;
                if (TaperWeight != null) return true;
                if (HitShader != null) return true;
                if (EnchantShader != null) return true;
                if (MinimumSkillLevel != null) return true;
                if (SpellmakingArea != null) return true;
                if (SpellmakingCastingTime != null) return true;
                if (TaperCurve != null) return true;
                if (TaperDuration != null) return true;
                if (SecondActorValueWeight != null) return true;
                if (Archetype != null) return true;
                if (Projectile != null) return true;
                if (Explosion != null) return true;
                if (CastType != null) return true;
                if (TargetType != null) return true;
                if (SecondActorValue != null) return true;
                if (CastingArt != null) return true;
                if (HitEffectArt != null) return true;
                if (ImpactData != null) return true;
                if (SkillUsageMultiplier != null) return true;
                if (DualCastArt != null) return true;
                if (DualCastScale != null) return true;
                if (EnchantArt != null) return true;
                if (Unknown2 != null) return true;
                if (Unknown3 != null) return true;
                if (EquipAbility != null) return true;
                if (ImageSpaceModifier != null) return true;
                if (PerkToApply != null) return true;
                if (CastingSoundLevel != null) return true;
                if (ScriptEffectAIScore != null) return true;
                if (ScriptEffectAIDelayTime != null) return true;
                if (CounterEffects != null) return true;
                if (Sounds != null) return true;
                if (Description != null) return true;
                if (Conditions != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(BaseCost, "BaseCost");
                fg.AppendItem(MagicSkill, "MagicSkill");
                fg.AppendItem(ResistValue, "ResistValue");
                fg.AppendItem(CounterEffectCount, "CounterEffectCount");
                fg.AppendItem(Unknown1, "Unknown1");
                fg.AppendItem(CastingLight, "CastingLight");
                fg.AppendItem(TaperWeight, "TaperWeight");
                fg.AppendItem(HitShader, "HitShader");
                fg.AppendItem(EnchantShader, "EnchantShader");
                fg.AppendItem(MinimumSkillLevel, "MinimumSkillLevel");
                fg.AppendItem(SpellmakingArea, "SpellmakingArea");
                fg.AppendItem(SpellmakingCastingTime, "SpellmakingCastingTime");
                fg.AppendItem(TaperCurve, "TaperCurve");
                fg.AppendItem(TaperDuration, "TaperDuration");
                fg.AppendItem(SecondActorValueWeight, "SecondActorValueWeight");
                Archetype?.ToString(fg);
                fg.AppendItem(Projectile, "Projectile");
                fg.AppendItem(Explosion, "Explosion");
                fg.AppendItem(CastType, "CastType");
                fg.AppendItem(TargetType, "TargetType");
                fg.AppendItem(SecondActorValue, "SecondActorValue");
                fg.AppendItem(CastingArt, "CastingArt");
                fg.AppendItem(HitEffectArt, "HitEffectArt");
                fg.AppendItem(ImpactData, "ImpactData");
                fg.AppendItem(SkillUsageMultiplier, "SkillUsageMultiplier");
                fg.AppendItem(DualCastArt, "DualCastArt");
                fg.AppendItem(DualCastScale, "DualCastScale");
                fg.AppendItem(EnchantArt, "EnchantArt");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(Unknown3, "Unknown3");
                fg.AppendItem(EquipAbility, "EquipAbility");
                fg.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                fg.AppendItem(PerkToApply, "PerkToApply");
                fg.AppendItem(CastingSoundLevel, "CastingSoundLevel");
                fg.AppendItem(ScriptEffectAIScore, "ScriptEffectAIScore");
                fg.AppendItem(ScriptEffectAIDelayTime, "ScriptEffectAIDelayTime");
                if (CounterEffects.TryGet(out var CounterEffectsItem))
                {
                    fg.AppendLine("CounterEffects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(CounterEffectsItem.Overall);
                        if (CounterEffectsItem.Specific != null)
                        {
                            foreach (var subItem in CounterEffectsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Sounds.TryGet(out var SoundsItem))
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Description, "Description");
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.MenuDisplayObject = this.MenuDisplayObject.Combine(rhs.MenuDisplayObject);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
                ret.MagicSkill = this.MagicSkill.Combine(rhs.MagicSkill);
                ret.ResistValue = this.ResistValue.Combine(rhs.ResistValue);
                ret.CounterEffectCount = this.CounterEffectCount.Combine(rhs.CounterEffectCount);
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                ret.CastingLight = this.CastingLight.Combine(rhs.CastingLight);
                ret.TaperWeight = this.TaperWeight.Combine(rhs.TaperWeight);
                ret.HitShader = this.HitShader.Combine(rhs.HitShader);
                ret.EnchantShader = this.EnchantShader.Combine(rhs.EnchantShader);
                ret.MinimumSkillLevel = this.MinimumSkillLevel.Combine(rhs.MinimumSkillLevel);
                ret.SpellmakingArea = this.SpellmakingArea.Combine(rhs.SpellmakingArea);
                ret.SpellmakingCastingTime = this.SpellmakingCastingTime.Combine(rhs.SpellmakingCastingTime);
                ret.TaperCurve = this.TaperCurve.Combine(rhs.TaperCurve);
                ret.TaperDuration = this.TaperDuration.Combine(rhs.TaperDuration);
                ret.SecondActorValueWeight = this.SecondActorValueWeight.Combine(rhs.SecondActorValueWeight);
                ret.Archetype = this.Archetype.Combine(rhs.Archetype, (l, r) => l.Combine(r));
                ret.Projectile = this.Projectile.Combine(rhs.Projectile);
                ret.Explosion = this.Explosion.Combine(rhs.Explosion);
                ret.CastType = this.CastType.Combine(rhs.CastType);
                ret.TargetType = this.TargetType.Combine(rhs.TargetType);
                ret.SecondActorValue = this.SecondActorValue.Combine(rhs.SecondActorValue);
                ret.CastingArt = this.CastingArt.Combine(rhs.CastingArt);
                ret.HitEffectArt = this.HitEffectArt.Combine(rhs.HitEffectArt);
                ret.ImpactData = this.ImpactData.Combine(rhs.ImpactData);
                ret.SkillUsageMultiplier = this.SkillUsageMultiplier.Combine(rhs.SkillUsageMultiplier);
                ret.DualCastArt = this.DualCastArt.Combine(rhs.DualCastArt);
                ret.DualCastScale = this.DualCastScale.Combine(rhs.DualCastScale);
                ret.EnchantArt = this.EnchantArt.Combine(rhs.EnchantArt);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.EquipAbility = this.EquipAbility.Combine(rhs.EquipAbility);
                ret.ImageSpaceModifier = this.ImageSpaceModifier.Combine(rhs.ImageSpaceModifier);
                ret.PerkToApply = this.PerkToApply.Combine(rhs.PerkToApply);
                ret.CastingSoundLevel = this.CastingSoundLevel.Combine(rhs.CastingSoundLevel);
                ret.ScriptEffectAIScore = this.ScriptEffectAIScore.Combine(rhs.ScriptEffectAIScore);
                ret.ScriptEffectAIDelayTime = this.ScriptEffectAIDelayTime.Combine(rhs.ScriptEffectAIDelayTime);
                ret.CounterEffects = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.CounterEffects?.Overall, rhs.CounterEffects?.Overall), ExceptionExt.Combine(this.CounterEffects?.Specific, rhs.CounterEffects?.Specific));
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>(ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public bool Name;
            public bool MenuDisplayObject;
            public bool Keywords;
            public bool Flags;
            public bool BaseCost;
            public bool MagicSkill;
            public bool ResistValue;
            public bool CounterEffectCount;
            public bool Unknown1;
            public bool CastingLight;
            public bool TaperWeight;
            public bool HitShader;
            public bool EnchantShader;
            public bool MinimumSkillLevel;
            public bool SpellmakingArea;
            public bool SpellmakingCastingTime;
            public bool TaperCurve;
            public bool TaperDuration;
            public bool SecondActorValueWeight;
            public MagicEffectArchetype.TranslationMask? Archetype;
            public bool Projectile;
            public bool Explosion;
            public bool CastType;
            public bool TargetType;
            public bool SecondActorValue;
            public bool CastingArt;
            public bool HitEffectArt;
            public bool ImpactData;
            public bool SkillUsageMultiplier;
            public bool DualCastArt;
            public bool DualCastScale;
            public bool EnchantArt;
            public bool Unknown2;
            public bool Unknown3;
            public bool EquipAbility;
            public bool ImageSpaceModifier;
            public bool PerkToApply;
            public bool CastingSoundLevel;
            public bool ScriptEffectAIScore;
            public bool ScriptEffectAIDelayTime;
            public bool CounterEffects;
            public MagicEffectSound.TranslationMask? Sounds;
            public bool Description;
            public Condition.TranslationMask? Conditions;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.MenuDisplayObject = defaultOn;
                this.Keywords = defaultOn;
                this.Flags = defaultOn;
                this.BaseCost = defaultOn;
                this.MagicSkill = defaultOn;
                this.ResistValue = defaultOn;
                this.CounterEffectCount = defaultOn;
                this.Unknown1 = defaultOn;
                this.CastingLight = defaultOn;
                this.TaperWeight = defaultOn;
                this.HitShader = defaultOn;
                this.EnchantShader = defaultOn;
                this.MinimumSkillLevel = defaultOn;
                this.SpellmakingArea = defaultOn;
                this.SpellmakingCastingTime = defaultOn;
                this.TaperCurve = defaultOn;
                this.TaperDuration = defaultOn;
                this.SecondActorValueWeight = defaultOn;
                this.Projectile = defaultOn;
                this.Explosion = defaultOn;
                this.CastType = defaultOn;
                this.TargetType = defaultOn;
                this.SecondActorValue = defaultOn;
                this.CastingArt = defaultOn;
                this.HitEffectArt = defaultOn;
                this.ImpactData = defaultOn;
                this.SkillUsageMultiplier = defaultOn;
                this.DualCastArt = defaultOn;
                this.DualCastScale = defaultOn;
                this.EnchantArt = defaultOn;
                this.Unknown2 = defaultOn;
                this.Unknown3 = defaultOn;
                this.EquipAbility = defaultOn;
                this.ImageSpaceModifier = defaultOn;
                this.PerkToApply = defaultOn;
                this.CastingSoundLevel = defaultOn;
                this.ScriptEffectAIScore = defaultOn;
                this.ScriptEffectAIDelayTime = defaultOn;
                this.CounterEffects = defaultOn;
                this.Description = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((MenuDisplayObject, null));
                ret.Add((Keywords, null));
                ret.Add((Flags, null));
                ret.Add((BaseCost, null));
                ret.Add((MagicSkill, null));
                ret.Add((ResistValue, null));
                ret.Add((CounterEffectCount, null));
                ret.Add((Unknown1, null));
                ret.Add((CastingLight, null));
                ret.Add((TaperWeight, null));
                ret.Add((HitShader, null));
                ret.Add((EnchantShader, null));
                ret.Add((MinimumSkillLevel, null));
                ret.Add((SpellmakingArea, null));
                ret.Add((SpellmakingCastingTime, null));
                ret.Add((TaperCurve, null));
                ret.Add((TaperDuration, null));
                ret.Add((SecondActorValueWeight, null));
                ret.Add((Archetype != null ? Archetype.OnOverall : DefaultOn, Archetype?.GetCrystal()));
                ret.Add((Projectile, null));
                ret.Add((Explosion, null));
                ret.Add((CastType, null));
                ret.Add((TargetType, null));
                ret.Add((SecondActorValue, null));
                ret.Add((CastingArt, null));
                ret.Add((HitEffectArt, null));
                ret.Add((ImpactData, null));
                ret.Add((SkillUsageMultiplier, null));
                ret.Add((DualCastArt, null));
                ret.Add((DualCastScale, null));
                ret.Add((EnchantArt, null));
                ret.Add((Unknown2, null));
                ret.Add((Unknown3, null));
                ret.Add((EquipAbility, null));
                ret.Add((ImageSpaceModifier, null));
                ret.Add((PerkToApply, null));
                ret.Add((CastingSoundLevel, null));
                ret.Add((ScriptEffectAIScore, null));
                ret.Add((ScriptEffectAIDelayTime, null));
                ret.Add((CounterEffects, null));
                ret.Add((Sounds == null ? DefaultOn : !Sounds.GetCrystal().CopyNothing, Sounds?.GetCrystal()));
                ret.Add((Description, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = MagicEffect_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => MagicEffectCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MagicEffectSetterCommon.Instance.RemapLinks(this, mapping);
        public MagicEffect(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private MagicEffect(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal MagicEffect(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public MagicEffect(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public MagicEffect(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MagicEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static MagicEffect CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MagicEffect();
            ((MagicEffectSetterCommon)((IMagicEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MagicEffect item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MagicEffect GetNew()
        {
            return new MagicEffect();
        }

    }
    #endregion

    #region Interface
    public partial interface IMagicEffect :
        IMagicEffectGetter,
        IFallout4MajorRecord,
        ITranslatedNamed,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IMagicEffectInternal>,
        IFormLinkContainer
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new TranslatedString? Name { get; set; }
        new FormLinkNullable<IStaticGetter> MenuDisplayObject { get; set; }
        new ExtendedList<IFormLink<IKeywordGetter>>? Keywords { get; set; }
        new MagicEffect.Flag Flags { get; set; }
        new Single BaseCost { get; set; }
        new ActorValue MagicSkill { get; set; }
        new ActorValue ResistValue { get; set; }
        new UInt16 CounterEffectCount { get; set; }
        new UInt16 Unknown1 { get; set; }
        new FormLink<ILightGetter> CastingLight { get; set; }
        new Single TaperWeight { get; set; }
        new FormLink<IEffectShaderGetter> HitShader { get; set; }
        new FormLink<IEffectShaderGetter> EnchantShader { get; set; }
        new UInt32 MinimumSkillLevel { get; set; }
        new UInt32 SpellmakingArea { get; set; }
        new Single SpellmakingCastingTime { get; set; }
        new Single TaperCurve { get; set; }
        new Single TaperDuration { get; set; }
        new Single SecondActorValueWeight { get; set; }
        new MagicEffectArchetype Archetype { get; set; }
        new FormLink<IProjectileGetter> Projectile { get; set; }
        new FormLink<IExplosionGetter> Explosion { get; set; }
        new CastType CastType { get; set; }
        new TargetType TargetType { get; set; }
        new ActorValue SecondActorValue { get; set; }
        new FormLink<IArtObjectGetter> CastingArt { get; set; }
        new FormLink<IArtObjectGetter> HitEffectArt { get; set; }
        new FormLink<IImpactDataSetGetter> ImpactData { get; set; }
        new Single SkillUsageMultiplier { get; set; }
        new FormLink<IDualCastDataGetter> DualCastArt { get; set; }
        new Single DualCastScale { get; set; }
        new FormLink<IArtObjectGetter> EnchantArt { get; set; }
        new FormLink<IFallout4MajorRecordGetter> Unknown2 { get; set; }
        new FormLink<IFallout4MajorRecordGetter> Unknown3 { get; set; }
        new FormLink<ISpellGetter> EquipAbility { get; set; }
        new FormLink<IImageSpaceAdapterGetter> ImageSpaceModifier { get; set; }
        new FormLink<IPerkGetter> PerkToApply { get; set; }
        new SoundLevel CastingSoundLevel { get; set; }
        new Single ScriptEffectAIScore { get; set; }
        new Single ScriptEffectAIDelayTime { get; set; }
        new ExtendedList<IFormLink<IMagicEffectGetter>> CounterEffects { get; }
        new ExtendedList<MagicEffectSound>? Sounds { get; set; }
        new TranslatedString? Description { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new MagicEffect.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IMagicEffectInternal :
        IFallout4MajorRecordInternal,
        IMagicEffect,
        IMagicEffectGetter
    {
    }

    public partial interface IMagicEffectGetter :
        IFallout4MajorRecordGetter,
        ITranslatedNamedGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IMagicEffectGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => MagicEffect_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        ITranslatedStringGetter? Name { get; }
        FormLinkNullable<IStaticGetter> MenuDisplayObject { get; }
        IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; }
        MagicEffect.Flag Flags { get; }
        Single BaseCost { get; }
        ActorValue MagicSkill { get; }
        ActorValue ResistValue { get; }
        UInt16 CounterEffectCount { get; }
        UInt16 Unknown1 { get; }
        FormLink<ILightGetter> CastingLight { get; }
        Single TaperWeight { get; }
        FormLink<IEffectShaderGetter> HitShader { get; }
        FormLink<IEffectShaderGetter> EnchantShader { get; }
        UInt32 MinimumSkillLevel { get; }
        UInt32 SpellmakingArea { get; }
        Single SpellmakingCastingTime { get; }
        Single TaperCurve { get; }
        Single TaperDuration { get; }
        Single SecondActorValueWeight { get; }
        IMagicEffectArchetypeGetter Archetype { get; }
        FormLink<IProjectileGetter> Projectile { get; }
        FormLink<IExplosionGetter> Explosion { get; }
        CastType CastType { get; }
        TargetType TargetType { get; }
        ActorValue SecondActorValue { get; }
        FormLink<IArtObjectGetter> CastingArt { get; }
        FormLink<IArtObjectGetter> HitEffectArt { get; }
        FormLink<IImpactDataSetGetter> ImpactData { get; }
        Single SkillUsageMultiplier { get; }
        FormLink<IDualCastDataGetter> DualCastArt { get; }
        Single DualCastScale { get; }
        FormLink<IArtObjectGetter> EnchantArt { get; }
        FormLink<IFallout4MajorRecordGetter> Unknown2 { get; }
        FormLink<IFallout4MajorRecordGetter> Unknown3 { get; }
        FormLink<ISpellGetter> EquipAbility { get; }
        FormLink<IImageSpaceAdapterGetter> ImageSpaceModifier { get; }
        FormLink<IPerkGetter> PerkToApply { get; }
        SoundLevel CastingSoundLevel { get; }
        Single ScriptEffectAIScore { get; }
        Single ScriptEffectAIDelayTime { get; }
        IReadOnlyList<IFormLink<IMagicEffectGetter>> CounterEffects { get; }
        IReadOnlyList<IMagicEffectSoundGetter>? Sounds { get; }
        ITranslatedStringGetter? Description { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        MagicEffect.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MagicEffectMixIn
    {
        public static void Clear(this IMagicEffectInternal item)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MagicEffect.Mask<bool> GetEqualsMask(
            this IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMagicEffectGetter item,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMagicEffectGetter item,
            FileGeneration fg,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMagicEffectGetter item,
            IMagicEffectGetter rhs)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IMagicEffectInternal lhs,
            IMagicEffectGetter rhs,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMagicEffectInternal lhs,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            MagicEffect.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static MagicEffect Duplicate(
            this IMagicEffectGetter item,
            FormKey formKey,
            MagicEffect.TranslationMask? copyMask = null)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMagicEffectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum MagicEffect_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        Name = 7,
        MenuDisplayObject = 8,
        Keywords = 9,
        Flags = 10,
        BaseCost = 11,
        MagicSkill = 12,
        ResistValue = 13,
        CounterEffectCount = 14,
        Unknown1 = 15,
        CastingLight = 16,
        TaperWeight = 17,
        HitShader = 18,
        EnchantShader = 19,
        MinimumSkillLevel = 20,
        SpellmakingArea = 21,
        SpellmakingCastingTime = 22,
        TaperCurve = 23,
        TaperDuration = 24,
        SecondActorValueWeight = 25,
        Archetype = 26,
        Projectile = 27,
        Explosion = 28,
        CastType = 29,
        TargetType = 30,
        SecondActorValue = 31,
        CastingArt = 32,
        HitEffectArt = 33,
        ImpactData = 34,
        SkillUsageMultiplier = 35,
        DualCastArt = 36,
        DualCastScale = 37,
        EnchantArt = 38,
        Unknown2 = 39,
        Unknown3 = 40,
        EquipAbility = 41,
        ImageSpaceModifier = 42,
        PerkToApply = 43,
        CastingSoundLevel = 44,
        ScriptEffectAIScore = 45,
        ScriptEffectAIDelayTime = 46,
        CounterEffects = 47,
        Sounds = 48,
        Description = 49,
        Conditions = 50,
        DATADataTypeState = 51,
    }
    #endregion

    #region Registration
    public partial class MagicEffect_Registration : ILoquiRegistration
    {
        public static readonly MagicEffect_Registration Instance = new MagicEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 90,
            version: 0);

        public const string GUID = "6f4b3983-51e3-47e9-894e-9c442948e6d1";

        public const ushort AdditionalFieldCount = 46;

        public const ushort FieldCount = 52;

        public static readonly Type MaskType = typeof(MagicEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffect.ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffect);

        public static readonly Type GetterType = typeof(IMagicEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMagicEffect);

        public static readonly Type? InternalSetterType = typeof(IMagicEffectInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.MagicEffect";

        public const string Name = "MagicEffect";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MGEF;
        public static readonly Type BinaryWriteTranslation = typeof(MagicEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class MagicEffectSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly MagicEffectSetterCommon Instance = new MagicEffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMagicEffectInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Name = default;
            item.MenuDisplayObject = FormLinkNullable<IStaticGetter>.Null;
            item.Keywords = null;
            item.Flags = default;
            item.BaseCost = default;
            item.MagicSkill = MagicEffect._MagicSkill_Default;
            item.ResistValue = MagicEffect._ResistValue_Default;
            item.CounterEffectCount = default;
            item.Unknown1 = default;
            item.CastingLight = FormLink<ILightGetter>.Null;
            item.TaperWeight = default;
            item.HitShader = FormLink<IEffectShaderGetter>.Null;
            item.EnchantShader = FormLink<IEffectShaderGetter>.Null;
            item.MinimumSkillLevel = default;
            item.SpellmakingArea = default;
            item.SpellmakingCastingTime = default;
            item.TaperCurve = default;
            item.TaperDuration = default;
            item.SecondActorValueWeight = default;
            item.Archetype.Clear();
            item.Projectile = FormLink<IProjectileGetter>.Null;
            item.Explosion = FormLink<IExplosionGetter>.Null;
            item.CastType = default;
            item.TargetType = default;
            item.SecondActorValue = MagicEffect._SecondActorValue_Default;
            item.CastingArt = FormLink<IArtObjectGetter>.Null;
            item.HitEffectArt = FormLink<IArtObjectGetter>.Null;
            item.ImpactData = FormLink<IImpactDataSetGetter>.Null;
            item.SkillUsageMultiplier = default;
            item.DualCastArt = FormLink<IDualCastDataGetter>.Null;
            item.DualCastScale = default;
            item.EnchantArt = FormLink<IArtObjectGetter>.Null;
            item.Unknown2 = FormLink<IFallout4MajorRecordGetter>.Null;
            item.Unknown3 = FormLink<IFallout4MajorRecordGetter>.Null;
            item.EquipAbility = FormLink<ISpellGetter>.Null;
            item.ImageSpaceModifier = FormLink<IImageSpaceAdapterGetter>.Null;
            item.PerkToApply = FormLink<IPerkGetter>.Null;
            item.CastingSoundLevel = default;
            item.ScriptEffectAIScore = default;
            item.ScriptEffectAIDelayTime = default;
            item.CounterEffects.Clear();
            item.Sounds = null;
            item.Description = default;
            item.Conditions.Clear();
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IMagicEffectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMagicEffectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMagicEffect obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.MenuDisplayObject = obj.MenuDisplayObject.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.CastingLight = obj.CastingLight.Relink(mapping);
            obj.HitShader = obj.HitShader.Relink(mapping);
            obj.EnchantShader = obj.EnchantShader.Relink(mapping);
            obj.Projectile = obj.Projectile.Relink(mapping);
            obj.Explosion = obj.Explosion.Relink(mapping);
            obj.CastingArt = obj.CastingArt.Relink(mapping);
            obj.HitEffectArt = obj.HitEffectArt.Relink(mapping);
            obj.ImpactData = obj.ImpactData.Relink(mapping);
            obj.DualCastArt = obj.DualCastArt.Relink(mapping);
            obj.EnchantArt = obj.EnchantArt.Relink(mapping);
            obj.Unknown2 = obj.Unknown2.Relink(mapping);
            obj.Unknown3 = obj.Unknown3.Relink(mapping);
            obj.EquipAbility = obj.EquipAbility.Relink(mapping);
            obj.ImageSpaceModifier = obj.ImageSpaceModifier.Relink(mapping);
            obj.PerkToApply = obj.PerkToApply.Relink(mapping);
            obj.CounterEffects.RemapLinks(mapping);
            obj.Sounds?.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMagicEffectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IMagicEffectInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: MagicEffectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MagicEffectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (MagicEffect)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (MagicEffect)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class MagicEffectCommon : Fallout4MajorRecordCommon
    {
        public new static readonly MagicEffectCommon Instance = new MagicEffectCommon();

        public MagicEffect.Mask<bool> GetEqualsMask(
            IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MagicEffect.Mask<bool>(false);
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            MagicEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.MenuDisplayObject = item.MenuDisplayObject.Equals(rhs.MenuDisplayObject);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseCost = item.BaseCost.EqualsWithin(rhs.BaseCost);
            ret.MagicSkill = item.MagicSkill == rhs.MagicSkill;
            ret.ResistValue = item.ResistValue == rhs.ResistValue;
            ret.CounterEffectCount = item.CounterEffectCount == rhs.CounterEffectCount;
            ret.Unknown1 = item.Unknown1 == rhs.Unknown1;
            ret.CastingLight = item.CastingLight.Equals(rhs.CastingLight);
            ret.TaperWeight = item.TaperWeight.EqualsWithin(rhs.TaperWeight);
            ret.HitShader = item.HitShader.Equals(rhs.HitShader);
            ret.EnchantShader = item.EnchantShader.Equals(rhs.EnchantShader);
            ret.MinimumSkillLevel = item.MinimumSkillLevel == rhs.MinimumSkillLevel;
            ret.SpellmakingArea = item.SpellmakingArea == rhs.SpellmakingArea;
            ret.SpellmakingCastingTime = item.SpellmakingCastingTime.EqualsWithin(rhs.SpellmakingCastingTime);
            ret.TaperCurve = item.TaperCurve.EqualsWithin(rhs.TaperCurve);
            ret.TaperDuration = item.TaperDuration.EqualsWithin(rhs.TaperDuration);
            ret.SecondActorValueWeight = item.SecondActorValueWeight.EqualsWithin(rhs.SecondActorValueWeight);
            ret.Archetype = MaskItemExt.Factory(item.Archetype.GetEqualsMask(rhs.Archetype, include), include);
            ret.Projectile = item.Projectile.Equals(rhs.Projectile);
            ret.Explosion = item.Explosion.Equals(rhs.Explosion);
            ret.CastType = item.CastType == rhs.CastType;
            ret.TargetType = item.TargetType == rhs.TargetType;
            ret.SecondActorValue = item.SecondActorValue == rhs.SecondActorValue;
            ret.CastingArt = item.CastingArt.Equals(rhs.CastingArt);
            ret.HitEffectArt = item.HitEffectArt.Equals(rhs.HitEffectArt);
            ret.ImpactData = item.ImpactData.Equals(rhs.ImpactData);
            ret.SkillUsageMultiplier = item.SkillUsageMultiplier.EqualsWithin(rhs.SkillUsageMultiplier);
            ret.DualCastArt = item.DualCastArt.Equals(rhs.DualCastArt);
            ret.DualCastScale = item.DualCastScale.EqualsWithin(rhs.DualCastScale);
            ret.EnchantArt = item.EnchantArt.Equals(rhs.EnchantArt);
            ret.Unknown2 = item.Unknown2.Equals(rhs.Unknown2);
            ret.Unknown3 = item.Unknown3.Equals(rhs.Unknown3);
            ret.EquipAbility = item.EquipAbility.Equals(rhs.EquipAbility);
            ret.ImageSpaceModifier = item.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier);
            ret.PerkToApply = item.PerkToApply.Equals(rhs.PerkToApply);
            ret.CastingSoundLevel = item.CastingSoundLevel == rhs.CastingSoundLevel;
            ret.ScriptEffectAIScore = item.ScriptEffectAIScore.EqualsWithin(rhs.ScriptEffectAIScore);
            ret.ScriptEffectAIDelayTime = item.ScriptEffectAIDelayTime.EqualsWithin(rhs.ScriptEffectAIDelayTime);
            ret.CounterEffects = item.CounterEffects.CollectionEqualsHelper(
                rhs.CounterEffects,
                (l, r) => object.Equals(l, r),
                include);
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IMagicEffectGetter item,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMagicEffectGetter item,
            FileGeneration fg,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MagicEffect =>");
            }
            else
            {
                fg.AppendLine($"{name} (MagicEffect) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMagicEffectGetter item,
            FileGeneration fg,
            MagicEffect.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.MenuDisplayObject ?? true)
            {
                fg.AppendItem(item.MenuDisplayObject.FormKeyNullable, "MenuDisplayObject");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.BaseCost ?? true)
            {
                fg.AppendItem(item.BaseCost, "BaseCost");
            }
            if (printMask?.MagicSkill ?? true)
            {
                fg.AppendItem(item.MagicSkill, "MagicSkill");
            }
            if (printMask?.ResistValue ?? true)
            {
                fg.AppendItem(item.ResistValue, "ResistValue");
            }
            if (printMask?.CounterEffectCount ?? true)
            {
                fg.AppendItem(item.CounterEffectCount, "CounterEffectCount");
            }
            if (printMask?.Unknown1 ?? true)
            {
                fg.AppendItem(item.Unknown1, "Unknown1");
            }
            if (printMask?.CastingLight ?? true)
            {
                fg.AppendItem(item.CastingLight.FormKey, "CastingLight");
            }
            if (printMask?.TaperWeight ?? true)
            {
                fg.AppendItem(item.TaperWeight, "TaperWeight");
            }
            if (printMask?.HitShader ?? true)
            {
                fg.AppendItem(item.HitShader.FormKey, "HitShader");
            }
            if (printMask?.EnchantShader ?? true)
            {
                fg.AppendItem(item.EnchantShader.FormKey, "EnchantShader");
            }
            if (printMask?.MinimumSkillLevel ?? true)
            {
                fg.AppendItem(item.MinimumSkillLevel, "MinimumSkillLevel");
            }
            if (printMask?.SpellmakingArea ?? true)
            {
                fg.AppendItem(item.SpellmakingArea, "SpellmakingArea");
            }
            if (printMask?.SpellmakingCastingTime ?? true)
            {
                fg.AppendItem(item.SpellmakingCastingTime, "SpellmakingCastingTime");
            }
            if (printMask?.TaperCurve ?? true)
            {
                fg.AppendItem(item.TaperCurve, "TaperCurve");
            }
            if (printMask?.TaperDuration ?? true)
            {
                fg.AppendItem(item.TaperDuration, "TaperDuration");
            }
            if (printMask?.SecondActorValueWeight ?? true)
            {
                fg.AppendItem(item.SecondActorValueWeight, "SecondActorValueWeight");
            }
            if (printMask?.Archetype?.Overall ?? true)
            {
                item.Archetype?.ToString(fg, "Archetype");
            }
            if (printMask?.Projectile ?? true)
            {
                fg.AppendItem(item.Projectile.FormKey, "Projectile");
            }
            if (printMask?.Explosion ?? true)
            {
                fg.AppendItem(item.Explosion.FormKey, "Explosion");
            }
            if (printMask?.CastType ?? true)
            {
                fg.AppendItem(item.CastType, "CastType");
            }
            if (printMask?.TargetType ?? true)
            {
                fg.AppendItem(item.TargetType, "TargetType");
            }
            if (printMask?.SecondActorValue ?? true)
            {
                fg.AppendItem(item.SecondActorValue, "SecondActorValue");
            }
            if (printMask?.CastingArt ?? true)
            {
                fg.AppendItem(item.CastingArt.FormKey, "CastingArt");
            }
            if (printMask?.HitEffectArt ?? true)
            {
                fg.AppendItem(item.HitEffectArt.FormKey, "HitEffectArt");
            }
            if (printMask?.ImpactData ?? true)
            {
                fg.AppendItem(item.ImpactData.FormKey, "ImpactData");
            }
            if (printMask?.SkillUsageMultiplier ?? true)
            {
                fg.AppendItem(item.SkillUsageMultiplier, "SkillUsageMultiplier");
            }
            if (printMask?.DualCastArt ?? true)
            {
                fg.AppendItem(item.DualCastArt.FormKey, "DualCastArt");
            }
            if (printMask?.DualCastScale ?? true)
            {
                fg.AppendItem(item.DualCastScale, "DualCastScale");
            }
            if (printMask?.EnchantArt ?? true)
            {
                fg.AppendItem(item.EnchantArt.FormKey, "EnchantArt");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2.FormKey, "Unknown2");
            }
            if (printMask?.Unknown3 ?? true)
            {
                fg.AppendItem(item.Unknown3.FormKey, "Unknown3");
            }
            if (printMask?.EquipAbility ?? true)
            {
                fg.AppendItem(item.EquipAbility.FormKey, "EquipAbility");
            }
            if (printMask?.ImageSpaceModifier ?? true)
            {
                fg.AppendItem(item.ImageSpaceModifier.FormKey, "ImageSpaceModifier");
            }
            if (printMask?.PerkToApply ?? true)
            {
                fg.AppendItem(item.PerkToApply.FormKey, "PerkToApply");
            }
            if (printMask?.CastingSoundLevel ?? true)
            {
                fg.AppendItem(item.CastingSoundLevel, "CastingSoundLevel");
            }
            if (printMask?.ScriptEffectAIScore ?? true)
            {
                fg.AppendItem(item.ScriptEffectAIScore, "ScriptEffectAIScore");
            }
            if (printMask?.ScriptEffectAIDelayTime ?? true)
            {
                fg.AppendItem(item.ScriptEffectAIDelayTime, "ScriptEffectAIDelayTime");
            }
            if (printMask?.CounterEffects?.Overall ?? true)
            {
                fg.AppendLine("CounterEffects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.CounterEffects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Sounds?.Overall ?? true)
                && item.Sounds.TryGet(out var SoundsItem))
            {
                fg.AppendLine("Sounds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in SoundsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static MagicEffect_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MagicEffect_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (MagicEffect_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (MagicEffect_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (MagicEffect_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new MagicEffect_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMagicEffectGetter? lhs,
            IMagicEffectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.MenuDisplayObject.Equals(rhs.MenuDisplayObject)) return false;
            if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.BaseCost.EqualsWithin(rhs.BaseCost)) return false;
            if (lhs.MagicSkill != rhs.MagicSkill) return false;
            if (lhs.ResistValue != rhs.ResistValue) return false;
            if (lhs.CounterEffectCount != rhs.CounterEffectCount) return false;
            if (lhs.Unknown1 != rhs.Unknown1) return false;
            if (!lhs.CastingLight.Equals(rhs.CastingLight)) return false;
            if (!lhs.TaperWeight.EqualsWithin(rhs.TaperWeight)) return false;
            if (!lhs.HitShader.Equals(rhs.HitShader)) return false;
            if (!lhs.EnchantShader.Equals(rhs.EnchantShader)) return false;
            if (lhs.MinimumSkillLevel != rhs.MinimumSkillLevel) return false;
            if (lhs.SpellmakingArea != rhs.SpellmakingArea) return false;
            if (!lhs.SpellmakingCastingTime.EqualsWithin(rhs.SpellmakingCastingTime)) return false;
            if (!lhs.TaperCurve.EqualsWithin(rhs.TaperCurve)) return false;
            if (!lhs.TaperDuration.EqualsWithin(rhs.TaperDuration)) return false;
            if (!lhs.SecondActorValueWeight.EqualsWithin(rhs.SecondActorValueWeight)) return false;
            if (!object.Equals(lhs.Archetype, rhs.Archetype)) return false;
            if (!lhs.Projectile.Equals(rhs.Projectile)) return false;
            if (!lhs.Explosion.Equals(rhs.Explosion)) return false;
            if (lhs.CastType != rhs.CastType) return false;
            if (lhs.TargetType != rhs.TargetType) return false;
            if (lhs.SecondActorValue != rhs.SecondActorValue) return false;
            if (!lhs.CastingArt.Equals(rhs.CastingArt)) return false;
            if (!lhs.HitEffectArt.Equals(rhs.HitEffectArt)) return false;
            if (!lhs.ImpactData.Equals(rhs.ImpactData)) return false;
            if (!lhs.SkillUsageMultiplier.EqualsWithin(rhs.SkillUsageMultiplier)) return false;
            if (!lhs.DualCastArt.Equals(rhs.DualCastArt)) return false;
            if (!lhs.DualCastScale.EqualsWithin(rhs.DualCastScale)) return false;
            if (!lhs.EnchantArt.Equals(rhs.EnchantArt)) return false;
            if (!lhs.Unknown2.Equals(rhs.Unknown2)) return false;
            if (!lhs.Unknown3.Equals(rhs.Unknown3)) return false;
            if (!lhs.EquipAbility.Equals(rhs.EquipAbility)) return false;
            if (!lhs.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier)) return false;
            if (!lhs.PerkToApply.Equals(rhs.PerkToApply)) return false;
            if (lhs.CastingSoundLevel != rhs.CastingSoundLevel) return false;
            if (!lhs.ScriptEffectAIScore.EqualsWithin(rhs.ScriptEffectAIScore)) return false;
            if (!lhs.ScriptEffectAIDelayTime.EqualsWithin(rhs.ScriptEffectAIDelayTime)) return false;
            if (!lhs.CounterEffects.SequenceEqualNullable(rhs.CounterEffects)) return false;
            if (!lhs.Sounds.SequenceEqualNullable(rhs.Sounds)) return false;
            if (!object.Equals(lhs.Description, rhs.Description)) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IMagicEffectGetter?)lhs,
                rhs: rhs as IMagicEffectGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IMagicEffectGetter?)lhs,
                rhs: rhs as IMagicEffectGetter);
        }
        
        public virtual int GetHashCode(IMagicEffectGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.MenuDisplayObject);
            hash.Add(item.Keywords);
            hash.Add(item.Flags);
            hash.Add(item.BaseCost);
            hash.Add(item.MagicSkill);
            hash.Add(item.ResistValue);
            hash.Add(item.CounterEffectCount);
            hash.Add(item.Unknown1);
            hash.Add(item.CastingLight);
            hash.Add(item.TaperWeight);
            hash.Add(item.HitShader);
            hash.Add(item.EnchantShader);
            hash.Add(item.MinimumSkillLevel);
            hash.Add(item.SpellmakingArea);
            hash.Add(item.SpellmakingCastingTime);
            hash.Add(item.TaperCurve);
            hash.Add(item.TaperDuration);
            hash.Add(item.SecondActorValueWeight);
            hash.Add(item.Archetype);
            hash.Add(item.Projectile);
            hash.Add(item.Explosion);
            hash.Add(item.CastType);
            hash.Add(item.TargetType);
            hash.Add(item.SecondActorValue);
            hash.Add(item.CastingArt);
            hash.Add(item.HitEffectArt);
            hash.Add(item.ImpactData);
            hash.Add(item.SkillUsageMultiplier);
            hash.Add(item.DualCastArt);
            hash.Add(item.DualCastScale);
            hash.Add(item.EnchantArt);
            hash.Add(item.Unknown2);
            hash.Add(item.Unknown3);
            hash.Add(item.EquipAbility);
            hash.Add(item.ImageSpaceModifier);
            hash.Add(item.PerkToApply);
            hash.Add(item.CastingSoundLevel);
            hash.Add(item.ScriptEffectAIScore);
            hash.Add(item.ScriptEffectAIDelayTime);
            hash.Add(item.CounterEffects);
            hash.Add(item.Sounds);
            if (item.Description.TryGet(out var Descriptionitem))
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.Conditions);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IMagicEffectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMagicEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MagicEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IMagicEffectGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.MenuDisplayObject.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.MenuDisplayObject);
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield return FormLinkInformation.Factory(obj.CastingLight);
            yield return FormLinkInformation.Factory(obj.HitShader);
            yield return FormLinkInformation.Factory(obj.EnchantShader);
            yield return FormLinkInformation.Factory(obj.Projectile);
            yield return FormLinkInformation.Factory(obj.Explosion);
            yield return FormLinkInformation.Factory(obj.CastingArt);
            yield return FormLinkInformation.Factory(obj.HitEffectArt);
            yield return FormLinkInformation.Factory(obj.ImpactData);
            yield return FormLinkInformation.Factory(obj.DualCastArt);
            yield return FormLinkInformation.Factory(obj.EnchantArt);
            yield return FormLinkInformation.Factory(obj.Unknown2);
            yield return FormLinkInformation.Factory(obj.Unknown3);
            yield return FormLinkInformation.Factory(obj.EquipAbility);
            yield return FormLinkInformation.Factory(obj.ImageSpaceModifier);
            yield return FormLinkInformation.Factory(obj.PerkToApply);
            foreach (var item in obj.CounterEffects)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Sounds.TryGet(out var SoundsItem))
            {
                foreach (var item in SoundsItem.SelectMany(f => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public MagicEffect Duplicate(
            IMagicEffectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new MagicEffect(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMagicEffect)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMagicEffect)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class MagicEffectSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly MagicEffectSetterTranslationCommon Instance = new MagicEffectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMagicEffectInternal item,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IMagicEffect item,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MagicEffect_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MenuDisplayObject) ?? true))
            {
                item.MenuDisplayObject = new FormLinkNullable<IStaticGetter>(rhs.MenuDisplayObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.BaseCost) ?? true))
            {
                item.BaseCost = rhs.BaseCost;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MagicSkill) ?? true))
            {
                item.MagicSkill = rhs.MagicSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ResistValue) ?? true))
            {
                item.ResistValue = rhs.ResistValue;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffectCount) ?? true))
            {
                item.CounterEffectCount = rhs.CounterEffectCount;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1 = rhs.Unknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CastingLight) ?? true))
            {
                item.CastingLight = new FormLink<ILightGetter>(rhs.CastingLight.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.TaperWeight) ?? true))
            {
                item.TaperWeight = rhs.TaperWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.HitShader) ?? true))
            {
                item.HitShader = new FormLink<IEffectShaderGetter>(rhs.HitShader.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EnchantShader) ?? true))
            {
                item.EnchantShader = new FormLink<IEffectShaderGetter>(rhs.EnchantShader.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MinimumSkillLevel) ?? true))
            {
                item.MinimumSkillLevel = rhs.MinimumSkillLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.SpellmakingArea) ?? true))
            {
                item.SpellmakingArea = rhs.SpellmakingArea;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.SpellmakingCastingTime) ?? true))
            {
                item.SpellmakingCastingTime = rhs.SpellmakingCastingTime;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.TaperCurve) ?? true))
            {
                item.TaperCurve = rhs.TaperCurve;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.TaperDuration) ?? true))
            {
                item.TaperDuration = rhs.TaperDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.SecondActorValueWeight) ?? true))
            {
                item.SecondActorValueWeight = rhs.SecondActorValueWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Archetype) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Archetype);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Archetype) ?? true))
                    {
                        item.Archetype = rhs.Archetype.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Archetype),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Projectile) ?? true))
            {
                item.Projectile = new FormLink<IProjectileGetter>(rhs.Projectile.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Explosion) ?? true))
            {
                item.Explosion = new FormLink<IExplosionGetter>(rhs.Explosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CastType) ?? true))
            {
                item.CastType = rhs.CastType;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.TargetType) ?? true))
            {
                item.TargetType = rhs.TargetType;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.SecondActorValue) ?? true))
            {
                item.SecondActorValue = rhs.SecondActorValue;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CastingArt) ?? true))
            {
                item.CastingArt = new FormLink<IArtObjectGetter>(rhs.CastingArt.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.HitEffectArt) ?? true))
            {
                item.HitEffectArt = new FormLink<IArtObjectGetter>(rhs.HitEffectArt.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ImpactData) ?? true))
            {
                item.ImpactData = new FormLink<IImpactDataSetGetter>(rhs.ImpactData.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.SkillUsageMultiplier) ?? true))
            {
                item.SkillUsageMultiplier = rhs.SkillUsageMultiplier;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.DualCastArt) ?? true))
            {
                item.DualCastArt = new FormLink<IDualCastDataGetter>(rhs.DualCastArt.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.DualCastScale) ?? true))
            {
                item.DualCastScale = rhs.DualCastScale;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EnchantArt) ?? true))
            {
                item.EnchantArt = new FormLink<IArtObjectGetter>(rhs.EnchantArt.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = new FormLink<IFallout4MajorRecordGetter>(rhs.Unknown2.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = new FormLink<IFallout4MajorRecordGetter>(rhs.Unknown3.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EquipAbility) ?? true))
            {
                item.EquipAbility = new FormLink<ISpellGetter>(rhs.EquipAbility.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ImageSpaceModifier) ?? true))
            {
                item.ImageSpaceModifier = new FormLink<IImageSpaceAdapterGetter>(rhs.ImageSpaceModifier.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.PerkToApply) ?? true))
            {
                item.PerkToApply = new FormLink<IPerkGetter>(rhs.PerkToApply.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CastingSoundLevel) ?? true))
            {
                item.CastingSoundLevel = rhs.CastingSoundLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ScriptEffectAIScore) ?? true))
            {
                item.ScriptEffectAIScore = rhs.ScriptEffectAIScore;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ScriptEffectAIDelayTime) ?? true))
            {
                item.ScriptEffectAIDelayTime = rhs.ScriptEffectAIDelayTime;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffects) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.CounterEffects);
                try
                {
                    item.CounterEffects.SetTo(
                        rhs.CounterEffects
                        .Select(r => (IFormLink<IMagicEffectGetter>)new FormLink<IMagicEffectGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Sounds);
                try
                {
                    if ((rhs.Sounds != null))
                    {
                        item.Sounds = 
                            rhs.Sounds
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<MagicEffectSound>();
                    }
                    else
                    {
                        item.Sounds = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMagicEffectInternal)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMagicEffect)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMagicEffectInternal)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMagicEffect)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            MagicEffect.TranslationMask? copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class MagicEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffect_Registration.Instance;
        public new static MagicEffect_Registration Registration => MagicEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MagicEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MagicEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MagicEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MagicEffectBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static MagicEffectBinaryWriteTranslation Instance = new MagicEffectBinaryWriteTranslation();

        static partial void WriteBinaryAssociatedItemCustom(
            MutagenWriter writer,
            IMagicEffectGetter item);

        public static void WriteBinaryAssociatedItem(
            MutagenWriter writer,
            IMagicEffectGetter item)
        {
            WriteBinaryAssociatedItemCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryArchetypeCustom(
            MutagenWriter writer,
            IMagicEffectGetter item);

        public static void WriteBinaryArchetype(
            MutagenWriter writer,
            IMagicEffectGetter item)
        {
            WriteBinaryArchetypeCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IMagicEffectGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IMagicEffectGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IMagicEffectGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IMagicEffectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MenuDisplayObject,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MDOB));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLink<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicEffect.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BaseCost);
                MagicEffectBinaryWriteTranslation.WriteBinaryAssociatedItem(
                    writer: writer,
                    item: item);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                    writer,
                    item.MagicSkill,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                    writer,
                    item.ResistValue,
                    length: 4);
                writer.Write(item.CounterEffectCount);
                writer.Write(item.Unknown1);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CastingLight);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TaperWeight);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HitShader);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EnchantShader);
                writer.Write(item.MinimumSkillLevel);
                writer.Write(item.SpellmakingArea);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SpellmakingCastingTime);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TaperCurve);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TaperDuration);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SecondActorValueWeight);
                MagicEffectBinaryWriteTranslation.WriteBinaryArchetype(
                    writer: writer,
                    item: item);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Projectile);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Explosion);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<CastType>.Instance.Write(
                    writer,
                    item.CastType,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<TargetType>.Instance.Write(
                    writer,
                    item.TargetType,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                    writer,
                    item.SecondActorValue,
                    length: 4);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CastingArt);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HitEffectArt);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImpactData);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SkillUsageMultiplier);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DualCastArt);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DualCastScale);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EnchantArt);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown2);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown3);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EquipAbility);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImageSpaceModifier);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.PerkToApply);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoundLevel>.Instance.Write(
                    writer,
                    item.CastingSoundLevel,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ScriptEffectAIScore);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ScriptEffectAIDelayTime);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IMagicEffectGetter>>.Instance.Write(
                writer: writer,
                items: item.CounterEffects,
                transl: (MutagenWriter subWriter, IFormLink<IMagicEffectGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.ESCE));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IMagicEffectSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.SNDD),
                transl: (MutagenWriter subWriter, IMagicEffectSoundGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((MagicEffectSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            MagicEffectBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IMagicEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.MGEF),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class MagicEffectBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static MagicEffectBinaryCreateTranslation Instance = new MagicEffectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.MGEF;
        public static void FillBinaryStructs(
            IMagicEffectInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IMagicEffectInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)MagicEffect_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)MagicEffect_FieldIndex.Name;
                }
                case RecordTypeInts.MDOB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MenuDisplayObject = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)MagicEffect_FieldIndex.MenuDisplayObject;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.Parse(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<IKeywordGetter>>();
                    return (int)MagicEffect_FieldIndex.Keywords;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Flags = EnumBinaryTranslation<MagicEffect.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.BaseCost = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    MagicEffectBinaryCreateTranslation.FillBinaryAssociatedItemCustom(
                        frame: dataFrame,
                        item: item);
                    item.MagicSkill = EnumBinaryTranslation<ActorValue>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ResistValue = EnumBinaryTranslation<ActorValue>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.CounterEffectCount = dataFrame.ReadUInt16();
                    item.Unknown1 = dataFrame.ReadUInt16();
                    item.CastingLight = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.TaperWeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HitShader = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.EnchantShader = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.MinimumSkillLevel = dataFrame.ReadUInt32();
                    item.SpellmakingArea = dataFrame.ReadUInt32();
                    item.SpellmakingCastingTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.TaperCurve = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.TaperDuration = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.SecondActorValueWeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    MagicEffectBinaryCreateTranslation.FillBinaryArchetypeCustom(
                        frame: dataFrame,
                        item: item);
                    item.Projectile = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Explosion = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.CastType = EnumBinaryTranslation<CastType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.TargetType = EnumBinaryTranslation<TargetType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.SecondActorValue = EnumBinaryTranslation<ActorValue>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.CastingArt = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.HitEffectArt = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.ImpactData = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.SkillUsageMultiplier = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.DualCastArt = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.DualCastScale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EnchantArt = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Unknown2 = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Unknown3 = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.EquipAbility = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.ImageSpaceModifier = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.PerkToApply = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.CastingSoundLevel = EnumBinaryTranslation<SoundLevel>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ScriptEffectAIScore = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ScriptEffectAIDelayTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)MagicEffect_FieldIndex.ScriptEffectAIDelayTime;
                }
                case RecordTypeInts.ESCE:
                {
                    item.CounterEffects.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IMagicEffectGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.ESCE),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)MagicEffect_FieldIndex.CounterEffects;
                }
                case RecordTypeInts.SNDD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Sounds = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<MagicEffectSound>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: MagicEffectSound.TryCreateFromBinary)
                        .CastExtendedList<MagicEffectSound>();
                    return (int)MagicEffect_FieldIndex.Sounds;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)MagicEffect_FieldIndex.Description;
                }
                case RecordTypeInts.CTDA:
                {
                    MagicEffectBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)MagicEffect_FieldIndex.Conditions;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryAssociatedItemCustom(
            MutagenFrame frame,
            IMagicEffectInternal item);

        static partial void FillBinaryArchetypeCustom(
            MutagenFrame frame,
            IMagicEffectInternal item);

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IMagicEffectInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class MagicEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class MagicEffectBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IMagicEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffect_Registration.Instance;
        public new static MagicEffect_Registration Registration => MagicEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MagicEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MagicEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => MagicEffectCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MagicEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region MenuDisplayObject
        private int? _MenuDisplayObjectLocation;
        public FormLinkNullable<IStaticGetter> MenuDisplayObject => _MenuDisplayObjectLocation.HasValue ? new FormLinkNullable<IStaticGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MenuDisplayObjectLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IStaticGetter>.Null;
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        private int? _DATALocation;
        public MagicEffect.DATADataType DATADataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public MagicEffect.Flag Flags => _Flags_IsSet ? (MagicEffect.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region BaseCost
        private int _BaseCostLocation => _DATALocation!.Value + 0x4;
        private bool _BaseCost_IsSet => _DATALocation.HasValue;
        public Single BaseCost => _BaseCost_IsSet ? _data.Slice(_BaseCostLocation, 4).Float() : default;
        #endregion
        #region AssociatedItem
        partial void AssociatedItemCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region MagicSkill
        private int _MagicSkillLocation => _DATALocation!.Value + 0xC;
        private bool _MagicSkill_IsSet => _DATALocation.HasValue;
        public ActorValue MagicSkill => _MagicSkill_IsSet ? (ActorValue)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_MagicSkillLocation, 0x4)) : default;
        #endregion
        #region ResistValue
        private int _ResistValueLocation => _DATALocation!.Value + 0x10;
        private bool _ResistValue_IsSet => _DATALocation.HasValue;
        public ActorValue ResistValue => _ResistValue_IsSet ? (ActorValue)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ResistValueLocation, 0x4)) : default;
        #endregion
        #region CounterEffectCount
        private int _CounterEffectCountLocation => _DATALocation!.Value + 0x14;
        private bool _CounterEffectCount_IsSet => _DATALocation.HasValue;
        public UInt16 CounterEffectCount => _CounterEffectCount_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(_CounterEffectCountLocation, 2)) : default;
        #endregion
        #region Unknown1
        private int _Unknown1Location => _DATALocation!.Value + 0x16;
        private bool _Unknown1_IsSet => _DATALocation.HasValue;
        public UInt16 Unknown1 => _Unknown1_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(_Unknown1Location, 2)) : default;
        #endregion
        #region CastingLight
        private int _CastingLightLocation => _DATALocation!.Value + 0x18;
        private bool _CastingLight_IsSet => _DATALocation.HasValue;
        public FormLink<ILightGetter> CastingLight => _CastingLight_IsSet ? new FormLink<ILightGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_CastingLightLocation, 0x4)))) : FormLink<ILightGetter>.Null;
        #endregion
        #region TaperWeight
        private int _TaperWeightLocation => _DATALocation!.Value + 0x1C;
        private bool _TaperWeight_IsSet => _DATALocation.HasValue;
        public Single TaperWeight => _TaperWeight_IsSet ? _data.Slice(_TaperWeightLocation, 4).Float() : default;
        #endregion
        #region HitShader
        private int _HitShaderLocation => _DATALocation!.Value + 0x20;
        private bool _HitShader_IsSet => _DATALocation.HasValue;
        public FormLink<IEffectShaderGetter> HitShader => _HitShader_IsSet ? new FormLink<IEffectShaderGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_HitShaderLocation, 0x4)))) : FormLink<IEffectShaderGetter>.Null;
        #endregion
        #region EnchantShader
        private int _EnchantShaderLocation => _DATALocation!.Value + 0x24;
        private bool _EnchantShader_IsSet => _DATALocation.HasValue;
        public FormLink<IEffectShaderGetter> EnchantShader => _EnchantShader_IsSet ? new FormLink<IEffectShaderGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_EnchantShaderLocation, 0x4)))) : FormLink<IEffectShaderGetter>.Null;
        #endregion
        #region MinimumSkillLevel
        private int _MinimumSkillLevelLocation => _DATALocation!.Value + 0x28;
        private bool _MinimumSkillLevel_IsSet => _DATALocation.HasValue;
        public UInt32 MinimumSkillLevel => _MinimumSkillLevel_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_MinimumSkillLevelLocation, 4)) : default;
        #endregion
        #region SpellmakingArea
        private int _SpellmakingAreaLocation => _DATALocation!.Value + 0x2C;
        private bool _SpellmakingArea_IsSet => _DATALocation.HasValue;
        public UInt32 SpellmakingArea => _SpellmakingArea_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_SpellmakingAreaLocation, 4)) : default;
        #endregion
        #region SpellmakingCastingTime
        private int _SpellmakingCastingTimeLocation => _DATALocation!.Value + 0x30;
        private bool _SpellmakingCastingTime_IsSet => _DATALocation.HasValue;
        public Single SpellmakingCastingTime => _SpellmakingCastingTime_IsSet ? _data.Slice(_SpellmakingCastingTimeLocation, 4).Float() : default;
        #endregion
        #region TaperCurve
        private int _TaperCurveLocation => _DATALocation!.Value + 0x34;
        private bool _TaperCurve_IsSet => _DATALocation.HasValue;
        public Single TaperCurve => _TaperCurve_IsSet ? _data.Slice(_TaperCurveLocation, 4).Float() : default;
        #endregion
        #region TaperDuration
        private int _TaperDurationLocation => _DATALocation!.Value + 0x38;
        private bool _TaperDuration_IsSet => _DATALocation.HasValue;
        public Single TaperDuration => _TaperDuration_IsSet ? _data.Slice(_TaperDurationLocation, 4).Float() : default;
        #endregion
        #region SecondActorValueWeight
        private int _SecondActorValueWeightLocation => _DATALocation!.Value + 0x3C;
        private bool _SecondActorValueWeight_IsSet => _DATALocation.HasValue;
        public Single SecondActorValueWeight => _SecondActorValueWeight_IsSet ? _data.Slice(_SecondActorValueWeightLocation, 4).Float() : default;
        #endregion
        #region Archetype
        private int _ArchetypeLocation => _DATALocation!.Value + 0x40;
        public IMagicEffectArchetypeGetter Archetype => GetArchetypeCustom();
        #endregion
        #region Projectile
        private int _ProjectileLocation => _DATALocation!.Value + 0x48;
        private bool _Projectile_IsSet => _DATALocation.HasValue;
        public FormLink<IProjectileGetter> Projectile => _Projectile_IsSet ? new FormLink<IProjectileGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ProjectileLocation, 0x4)))) : FormLink<IProjectileGetter>.Null;
        #endregion
        #region Explosion
        private int _ExplosionLocation => _DATALocation!.Value + 0x4C;
        private bool _Explosion_IsSet => _DATALocation.HasValue;
        public FormLink<IExplosionGetter> Explosion => _Explosion_IsSet ? new FormLink<IExplosionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ExplosionLocation, 0x4)))) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region CastType
        private int _CastTypeLocation => _DATALocation!.Value + 0x50;
        private bool _CastType_IsSet => _DATALocation.HasValue;
        public CastType CastType => _CastType_IsSet ? (CastType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_CastTypeLocation, 0x4)) : default;
        #endregion
        #region TargetType
        private int _TargetTypeLocation => _DATALocation!.Value + 0x54;
        private bool _TargetType_IsSet => _DATALocation.HasValue;
        public TargetType TargetType => _TargetType_IsSet ? (TargetType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TargetTypeLocation, 0x4)) : default;
        #endregion
        #region SecondActorValue
        private int _SecondActorValueLocation => _DATALocation!.Value + 0x58;
        private bool _SecondActorValue_IsSet => _DATALocation.HasValue;
        public ActorValue SecondActorValue => _SecondActorValue_IsSet ? (ActorValue)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_SecondActorValueLocation, 0x4)) : default;
        #endregion
        #region CastingArt
        private int _CastingArtLocation => _DATALocation!.Value + 0x5C;
        private bool _CastingArt_IsSet => _DATALocation.HasValue;
        public FormLink<IArtObjectGetter> CastingArt => _CastingArt_IsSet ? new FormLink<IArtObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_CastingArtLocation, 0x4)))) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region HitEffectArt
        private int _HitEffectArtLocation => _DATALocation!.Value + 0x60;
        private bool _HitEffectArt_IsSet => _DATALocation.HasValue;
        public FormLink<IArtObjectGetter> HitEffectArt => _HitEffectArt_IsSet ? new FormLink<IArtObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_HitEffectArtLocation, 0x4)))) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region ImpactData
        private int _ImpactDataLocation => _DATALocation!.Value + 0x64;
        private bool _ImpactData_IsSet => _DATALocation.HasValue;
        public FormLink<IImpactDataSetGetter> ImpactData => _ImpactData_IsSet ? new FormLink<IImpactDataSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ImpactDataLocation, 0x4)))) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region SkillUsageMultiplier
        private int _SkillUsageMultiplierLocation => _DATALocation!.Value + 0x68;
        private bool _SkillUsageMultiplier_IsSet => _DATALocation.HasValue;
        public Single SkillUsageMultiplier => _SkillUsageMultiplier_IsSet ? _data.Slice(_SkillUsageMultiplierLocation, 4).Float() : default;
        #endregion
        #region DualCastArt
        private int _DualCastArtLocation => _DATALocation!.Value + 0x6C;
        private bool _DualCastArt_IsSet => _DATALocation.HasValue;
        public FormLink<IDualCastDataGetter> DualCastArt => _DualCastArt_IsSet ? new FormLink<IDualCastDataGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_DualCastArtLocation, 0x4)))) : FormLink<IDualCastDataGetter>.Null;
        #endregion
        #region DualCastScale
        private int _DualCastScaleLocation => _DATALocation!.Value + 0x70;
        private bool _DualCastScale_IsSet => _DATALocation.HasValue;
        public Single DualCastScale => _DualCastScale_IsSet ? _data.Slice(_DualCastScaleLocation, 4).Float() : default;
        #endregion
        #region EnchantArt
        private int _EnchantArtLocation => _DATALocation!.Value + 0x74;
        private bool _EnchantArt_IsSet => _DATALocation.HasValue;
        public FormLink<IArtObjectGetter> EnchantArt => _EnchantArt_IsSet ? new FormLink<IArtObjectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_EnchantArtLocation, 0x4)))) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region Unknown2
        private int _Unknown2Location => _DATALocation!.Value + 0x78;
        private bool _Unknown2_IsSet => _DATALocation.HasValue;
        public FormLink<IFallout4MajorRecordGetter> Unknown2 => _Unknown2_IsSet ? new FormLink<IFallout4MajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_Unknown2Location, 0x4)))) : FormLink<IFallout4MajorRecordGetter>.Null;
        #endregion
        #region Unknown3
        private int _Unknown3Location => _DATALocation!.Value + 0x7C;
        private bool _Unknown3_IsSet => _DATALocation.HasValue;
        public FormLink<IFallout4MajorRecordGetter> Unknown3 => _Unknown3_IsSet ? new FormLink<IFallout4MajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_Unknown3Location, 0x4)))) : FormLink<IFallout4MajorRecordGetter>.Null;
        #endregion
        #region EquipAbility
        private int _EquipAbilityLocation => _DATALocation!.Value + 0x80;
        private bool _EquipAbility_IsSet => _DATALocation.HasValue;
        public FormLink<ISpellGetter> EquipAbility => _EquipAbility_IsSet ? new FormLink<ISpellGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_EquipAbilityLocation, 0x4)))) : FormLink<ISpellGetter>.Null;
        #endregion
        #region ImageSpaceModifier
        private int _ImageSpaceModifierLocation => _DATALocation!.Value + 0x84;
        private bool _ImageSpaceModifier_IsSet => _DATALocation.HasValue;
        public FormLink<IImageSpaceAdapterGetter> ImageSpaceModifier => _ImageSpaceModifier_IsSet ? new FormLink<IImageSpaceAdapterGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ImageSpaceModifierLocation, 0x4)))) : FormLink<IImageSpaceAdapterGetter>.Null;
        #endregion
        #region PerkToApply
        private int _PerkToApplyLocation => _DATALocation!.Value + 0x88;
        private bool _PerkToApply_IsSet => _DATALocation.HasValue;
        public FormLink<IPerkGetter> PerkToApply => _PerkToApply_IsSet ? new FormLink<IPerkGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_PerkToApplyLocation, 0x4)))) : FormLink<IPerkGetter>.Null;
        #endregion
        #region CastingSoundLevel
        private int _CastingSoundLevelLocation => _DATALocation!.Value + 0x8C;
        private bool _CastingSoundLevel_IsSet => _DATALocation.HasValue;
        public SoundLevel CastingSoundLevel => _CastingSoundLevel_IsSet ? (SoundLevel)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_CastingSoundLevelLocation, 0x4)) : default;
        #endregion
        #region ScriptEffectAIScore
        private int _ScriptEffectAIScoreLocation => _DATALocation!.Value + 0x90;
        private bool _ScriptEffectAIScore_IsSet => _DATALocation.HasValue;
        public Single ScriptEffectAIScore => _ScriptEffectAIScore_IsSet ? _data.Slice(_ScriptEffectAIScoreLocation, 4).Float() : default;
        #endregion
        #region ScriptEffectAIDelayTime
        private int _ScriptEffectAIDelayTimeLocation => _DATALocation!.Value + 0x94;
        private bool _ScriptEffectAIDelayTime_IsSet => _DATALocation.HasValue;
        public Single ScriptEffectAIDelayTime => _ScriptEffectAIDelayTime_IsSet ? _data.Slice(_ScriptEffectAIDelayTimeLocation, 4).Float() : default;
        #endregion
        public IReadOnlyList<IFormLink<IMagicEffectGetter>> CounterEffects { get; private set; } = ListExt.Empty<IFormLink<IMagicEffectGetter>>();
        public IReadOnlyList<IMagicEffectSoundGetter>? Sounds { get; private set; }
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MagicEffectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static MagicEffectBinaryOverlay MagicEffectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new MagicEffectBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static MagicEffectBinaryOverlay MagicEffectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return MagicEffectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)MagicEffect_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)MagicEffect_FieldIndex.Name;
                }
                case RecordTypeInts.MDOB:
                {
                    _MenuDisplayObjectLocation = (stream.Position - offset);
                    return (int)MagicEffect_FieldIndex.MenuDisplayObject;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLink<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)MagicEffect_FieldIndex.Keywords;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)MagicEffect_FieldIndex.ScriptEffectAIDelayTime;
                }
                case RecordTypeInts.ESCE:
                {
                    this.CounterEffects = BinaryOverlayList.FactoryByArray<IFormLink<IMagicEffectGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IMagicEffectGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)MagicEffect_FieldIndex.CounterEffects;
                }
                case RecordTypeInts.SNDD:
                {
                    var subMeta = stream.ReadSubrecord();
                    var subLen = subMeta.ContentLength;
                    this.Sounds = BinaryOverlayList.FactoryByStartIndex<MagicEffectSoundBinaryOverlay>(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 8,
                        getter: (s, p) => MagicEffectSoundBinaryOverlay.MagicEffectSoundFactory(s, p));
                    stream.Position += subLen;
                    return (int)MagicEffect_FieldIndex.Sounds;
                }
                case RecordTypeInts.DNAM:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)MagicEffect_FieldIndex.Description;
                }
                case RecordTypeInts.CTDA:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)MagicEffect_FieldIndex.Conditions;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MagicEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMagicEffectGetter rhs)) return false;
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IMagicEffectGetter? obj)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

