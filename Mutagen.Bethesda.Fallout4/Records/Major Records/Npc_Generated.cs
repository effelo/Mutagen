/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Npc :
        Fallout4MajorRecord,
        INpcInternal,
        ILoquiObjectSetter<Npc>,
        IEquatable<INpcGetter>
    {
        #region Ctor
        protected Npc()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? INpcGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter INpcGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Configuration
        public NpcConfiguration Configuration { get; set; } = new NpcConfiguration();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcConfigurationGetter INpcGetter.Configuration => Configuration;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RankPlacement> _Factions = new ExtendedList<RankPlacement>();
        public ExtendedList<RankPlacement> Factions
        {
            get => this._Factions;
            protected set => this._Factions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRankPlacementGetter> INpcGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        public FormLinkNullable<ILeveledItemGetter> DeathItem { get; set; } = new FormLinkNullable<ILeveledItemGetter>();
        #endregion
        #region Voice
        public FormLinkNullable<IVoiceTypeGetter> Voice { get; set; } = new FormLinkNullable<IVoiceTypeGetter>();
        #endregion
        #region Template
        public FormLinkNullable<INpcSpawnGetter> Template { get; set; } = new FormLinkNullable<INpcSpawnGetter>();
        #endregion
        #region Race
        public FormLink<IRaceGetter> Race { get; set; } = new FormLink<IRaceGetter>();
        #endregion
        #region ActorEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IASpellGetter>>? _ActorEffect;
        public ExtendedList<IFormLink<IASpellGetter>>? ActorEffect
        {
            get => this._ActorEffect;
            set => this._ActorEffect = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IASpellGetter>>? INpcGetter.ActorEffect => _ActorEffect;
        #endregion

        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? INpcGetter.Destructible => this.Destructible;
        #endregion
        #region WornArmor
        public FormLinkNullable<IArmorGetter> WornArmor { get; set; } = new FormLinkNullable<IArmorGetter>();
        #endregion
        #region FarAwayModel
        public FormLinkNullable<IArmorGetter> FarAwayModel { get; set; } = new FormLinkNullable<IArmorGetter>();
        #endregion
        #region AttackRace
        public FormLinkNullable<IRaceGetter> AttackRace { get; set; } = new FormLinkNullable<IRaceGetter>();
        #endregion
        #region Attacks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Attack> _Attacks = new ExtendedList<Attack>();
        public ExtendedList<Attack> Attacks
        {
            get => this._Attacks;
            protected set => this._Attacks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAttackGetter> INpcGetter.Attacks => _Attacks;
        #endregion

        #endregion
        #region SpectatorOverridePackageList
        public FormLinkNullable<IFormListGetter> SpectatorOverridePackageList { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region ObserveDeadBodyOverridePackageList
        public FormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region GuardWarnOverridePackageList
        public FormLinkNullable<IFormListGetter> GuardWarnOverridePackageList { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region CombatOverridePackageList
        public FormLinkNullable<IFormListGetter> CombatOverridePackageList { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region Perks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PerkPlacement>? _Perks;
        public ExtendedList<PerkPlacement>? Perks
        {
            get => this._Perks;
            set => this._Perks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPerkPlacementGetter>? INpcGetter.Perks => _Perks;
        #endregion

        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ContainerEntry>? _Items;
        public ExtendedList<ContainerEntry>? Items
        {
            get => this._Items;
            set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IContainerEntryGetter>? INpcGetter.Items => _Items;
        #endregion

        #endregion
        #region AIData
        public AIData AIData { get; set; } = new AIData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIDataGetter INpcGetter.AIData => AIData;
        #endregion
        #region Packages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IPackageGetter>> _Packages = new ExtendedList<IFormLink<IPackageGetter>>();
        public ExtendedList<IFormLink<IPackageGetter>> Packages
        {
            get => this._Packages;
            protected set => this._Packages = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IPackageGetter>> INpcGetter.Packages => _Packages;
        #endregion

        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IKeywordGetter>>? _Keywords;
        public ExtendedList<IFormLink<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IKeywordGetter>>? INpcGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLink<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Class
        public FormLink<IClassGetter> Class { get; set; } = new FormLink<IClassGetter>();
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? INpcGetter.Name => this.Name;
        #endregion
        #region ShortName
        public TranslatedString? ShortName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? INpcGetter.ShortName => this.ShortName;
        #endregion
        #region PlayerSkills
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PlayerSkills? _PlayerSkills;
        public PlayerSkills? PlayerSkills
        {
            get => _PlayerSkills;
            set => _PlayerSkills = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlayerSkillsGetter? INpcGetter.PlayerSkills => this.PlayerSkills;
        #endregion
        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IHeadPartGetter>> _HeadParts = new ExtendedList<IFormLink<IHeadPartGetter>>();
        public ExtendedList<IFormLink<IHeadPartGetter>> HeadParts
        {
            get => this._HeadParts;
            protected set => this._HeadParts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IHeadPartGetter>> INpcGetter.HeadParts => _HeadParts;
        #endregion

        #endregion
        #region HairColor
        public FormLinkNullable<IColorRecordGetter> HairColor { get; set; } = new FormLinkNullable<IColorRecordGetter>();
        #endregion
        #region CombatStyle
        public FormLinkNullable<ICombatStyleGetter> CombatStyle { get; set; } = new FormLinkNullable<ICombatStyleGetter>();
        #endregion
        #region GiftFilter
        public FormLinkNullable<IFormListGetter> GiftFilter { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region NAM5
        public readonly static UInt16 _NAM5_Default = 0xFF00;
        public UInt16 NAM5 { get; set; } = _NAM5_Default;
        #endregion
        #region Height
        public Single Height { get; set; } = default;
        #endregion
        #region Weight
        public Single Weight { get; set; } = default;
        #endregion
        #region SoundLevel
        public SoundLevel SoundLevel { get; set; } = default;
        #endregion
        #region Sound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ANpcSoundDefinition? _Sound;
        public ANpcSoundDefinition? Sound
        {
            get => _Sound;
            set => _Sound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IANpcSoundDefinitionGetter? INpcGetter.Sound => this.Sound;
        #endregion
        #region DefaultOutfit
        public FormLinkNullable<IOutfitGetter> DefaultOutfit { get; set; } = new FormLinkNullable<IOutfitGetter>();
        #endregion
        #region SleepingOutfit
        public FormLinkNullable<IOutfitGetter> SleepingOutfit { get; set; } = new FormLinkNullable<IOutfitGetter>();
        #endregion
        #region DefaultPackageList
        public FormLinkNullable<IFormListGetter> DefaultPackageList { get; set; } = new FormLinkNullable<IFormListGetter>();
        #endregion
        #region CrimeFaction
        public FormLinkNullable<IFactionGetter> CrimeFaction { get; set; } = new FormLinkNullable<IFactionGetter>();
        #endregion
        #region HeadTexture
        public FormLinkNullable<ITextureSetGetter> HeadTexture { get; set; } = new FormLinkNullable<ITextureSetGetter>();
        #endregion
        #region TextureLighting
        public Color? TextureLighting { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? INpcGetter.TextureLighting => this.TextureLighting;
        #endregion
        #region FaceMorph
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcFaceMorph? _FaceMorph;
        public NpcFaceMorph? FaceMorph
        {
            get => _FaceMorph;
            set => _FaceMorph = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcFaceMorphGetter? INpcGetter.FaceMorph => this.FaceMorph;
        #endregion
        #region FaceParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcFaceParts? _FaceParts;
        public NpcFaceParts? FaceParts
        {
            get => _FaceParts;
            set => _FaceParts = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcFacePartsGetter? INpcGetter.FaceParts => this.FaceParts;
        #endregion
        #region TintLayers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TintLayer> _TintLayers = new ExtendedList<TintLayer>();
        public ExtendedList<TintLayer> TintLayers
        {
            get => this._TintLayers;
            protected set => this._TintLayers = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITintLayerGetter> INpcGetter.TintLayers => _TintLayers;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INpcGetter rhs)) return false;
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INpcGetter? obj)
        {
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NpcCommon)((INpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Configuration = new MaskItem<TItem, NpcConfiguration.Mask<TItem>?>(initialValue, new NpcConfiguration.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = initialValue;
                this.Voice = initialValue;
                this.Template = initialValue;
                this.Race = initialValue;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.WornArmor = initialValue;
                this.FarAwayModel = initialValue;
                this.AttackRace = initialValue;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = initialValue;
                this.ObserveDeadBodyOverridePackageList = initialValue;
                this.GuardWarnOverridePackageList = initialValue;
                this.CombatOverridePackageList = initialValue;
                this.Perks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.AIData = new MaskItem<TItem, AIData.Mask<TItem>?>(initialValue, new AIData.Mask<TItem>(initialValue));
                this.Packages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Class = initialValue;
                this.Name = initialValue;
                this.ShortName = initialValue;
                this.PlayerSkills = new MaskItem<TItem, PlayerSkills.Mask<TItem>?>(initialValue, new PlayerSkills.Mask<TItem>(initialValue));
                this.HeadParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.HairColor = initialValue;
                this.CombatStyle = initialValue;
                this.GiftFilter = initialValue;
                this.NAM5 = initialValue;
                this.Height = initialValue;
                this.Weight = initialValue;
                this.SoundLevel = initialValue;
                this.Sound = new MaskItem<TItem, ANpcSoundDefinition.Mask<TItem>?>(initialValue, new ANpcSoundDefinition.Mask<TItem>(initialValue));
                this.DefaultOutfit = initialValue;
                this.SleepingOutfit = initialValue;
                this.DefaultPackageList = initialValue;
                this.CrimeFaction = initialValue;
                this.HeadTexture = initialValue;
                this.TextureLighting = initialValue;
                this.FaceMorph = new MaskItem<TItem, NpcFaceMorph.Mask<TItem>?>(initialValue, new NpcFaceMorph.Mask<TItem>(initialValue));
                this.FaceParts = new MaskItem<TItem, NpcFaceParts.Mask<TItem>?>(initialValue, new NpcFaceParts.Mask<TItem>(initialValue));
                this.TintLayers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintLayer.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TintLayer.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Configuration,
                TItem Factions,
                TItem DeathItem,
                TItem Voice,
                TItem Template,
                TItem Race,
                TItem ActorEffect,
                TItem Destructible,
                TItem WornArmor,
                TItem FarAwayModel,
                TItem AttackRace,
                TItem Attacks,
                TItem SpectatorOverridePackageList,
                TItem ObserveDeadBodyOverridePackageList,
                TItem GuardWarnOverridePackageList,
                TItem CombatOverridePackageList,
                TItem Perks,
                TItem Items,
                TItem AIData,
                TItem Packages,
                TItem Keywords,
                TItem Class,
                TItem Name,
                TItem ShortName,
                TItem PlayerSkills,
                TItem HeadParts,
                TItem HairColor,
                TItem CombatStyle,
                TItem GiftFilter,
                TItem NAM5,
                TItem Height,
                TItem Weight,
                TItem SoundLevel,
                TItem Sound,
                TItem DefaultOutfit,
                TItem SleepingOutfit,
                TItem DefaultPackageList,
                TItem CrimeFaction,
                TItem HeadTexture,
                TItem TextureLighting,
                TItem FaceMorph,
                TItem FaceParts,
                TItem TintLayers)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Configuration = new MaskItem<TItem, NpcConfiguration.Mask<TItem>?>(Configuration, new NpcConfiguration.Mask<TItem>(Configuration));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(Factions, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = DeathItem;
                this.Voice = Voice;
                this.Template = Template;
                this.Race = Race;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ActorEffect, Enumerable.Empty<(int Index, TItem Value)>());
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.WornArmor = WornArmor;
                this.FarAwayModel = FarAwayModel;
                this.AttackRace = AttackRace;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(Attacks, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = SpectatorOverridePackageList;
                this.ObserveDeadBodyOverridePackageList = ObserveDeadBodyOverridePackageList;
                this.GuardWarnOverridePackageList = GuardWarnOverridePackageList;
                this.CombatOverridePackageList = CombatOverridePackageList;
                this.Perks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>?>(Perks, Enumerable.Empty<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.AIData = new MaskItem<TItem, AIData.Mask<TItem>?>(AIData, new AIData.Mask<TItem>(AIData));
                this.Packages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Packages, Enumerable.Empty<(int Index, TItem Value)>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Class = Class;
                this.Name = Name;
                this.ShortName = ShortName;
                this.PlayerSkills = new MaskItem<TItem, PlayerSkills.Mask<TItem>?>(PlayerSkills, new PlayerSkills.Mask<TItem>(PlayerSkills));
                this.HeadParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(HeadParts, Enumerable.Empty<(int Index, TItem Value)>());
                this.HairColor = HairColor;
                this.CombatStyle = CombatStyle;
                this.GiftFilter = GiftFilter;
                this.NAM5 = NAM5;
                this.Height = Height;
                this.Weight = Weight;
                this.SoundLevel = SoundLevel;
                this.Sound = new MaskItem<TItem, ANpcSoundDefinition.Mask<TItem>?>(Sound, new ANpcSoundDefinition.Mask<TItem>(Sound));
                this.DefaultOutfit = DefaultOutfit;
                this.SleepingOutfit = SleepingOutfit;
                this.DefaultPackageList = DefaultPackageList;
                this.CrimeFaction = CrimeFaction;
                this.HeadTexture = HeadTexture;
                this.TextureLighting = TextureLighting;
                this.FaceMorph = new MaskItem<TItem, NpcFaceMorph.Mask<TItem>?>(FaceMorph, new NpcFaceMorph.Mask<TItem>(FaceMorph));
                this.FaceParts = new MaskItem<TItem, NpcFaceParts.Mask<TItem>?>(FaceParts, new NpcFaceParts.Mask<TItem>(FaceParts));
                this.TintLayers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintLayer.Mask<TItem>?>>?>(TintLayers, Enumerable.Empty<MaskItemIndexed<TItem, TintLayer.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, NpcConfiguration.Mask<TItem>?>? Configuration { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>? Factions;
            public TItem DeathItem;
            public TItem Voice;
            public TItem Template;
            public TItem Race;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ActorEffect;
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem WornArmor;
            public TItem FarAwayModel;
            public TItem AttackRace;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>? Attacks;
            public TItem SpectatorOverridePackageList;
            public TItem ObserveDeadBodyOverridePackageList;
            public TItem GuardWarnOverridePackageList;
            public TItem CombatOverridePackageList;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>?>? Perks;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>? Items;
            public MaskItem<TItem, AIData.Mask<TItem>?>? AIData { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Packages;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem Class;
            public TItem Name;
            public TItem ShortName;
            public MaskItem<TItem, PlayerSkills.Mask<TItem>?>? PlayerSkills { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? HeadParts;
            public TItem HairColor;
            public TItem CombatStyle;
            public TItem GiftFilter;
            public TItem NAM5;
            public TItem Height;
            public TItem Weight;
            public TItem SoundLevel;
            public MaskItem<TItem, ANpcSoundDefinition.Mask<TItem>?>? Sound { get; set; }
            public TItem DefaultOutfit;
            public TItem SleepingOutfit;
            public TItem DefaultPackageList;
            public TItem CrimeFaction;
            public TItem HeadTexture;
            public TItem TextureLighting;
            public MaskItem<TItem, NpcFaceMorph.Mask<TItem>?>? FaceMorph { get; set; }
            public MaskItem<TItem, NpcFaceParts.Mask<TItem>?>? FaceParts { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintLayer.Mask<TItem>?>>?>? TintLayers;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Configuration, rhs.Configuration)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
                if (!object.Equals(this.Voice, rhs.Voice)) return false;
                if (!object.Equals(this.Template, rhs.Template)) return false;
                if (!object.Equals(this.Race, rhs.Race)) return false;
                if (!object.Equals(this.ActorEffect, rhs.ActorEffect)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.WornArmor, rhs.WornArmor)) return false;
                if (!object.Equals(this.FarAwayModel, rhs.FarAwayModel)) return false;
                if (!object.Equals(this.AttackRace, rhs.AttackRace)) return false;
                if (!object.Equals(this.Attacks, rhs.Attacks)) return false;
                if (!object.Equals(this.SpectatorOverridePackageList, rhs.SpectatorOverridePackageList)) return false;
                if (!object.Equals(this.ObserveDeadBodyOverridePackageList, rhs.ObserveDeadBodyOverridePackageList)) return false;
                if (!object.Equals(this.GuardWarnOverridePackageList, rhs.GuardWarnOverridePackageList)) return false;
                if (!object.Equals(this.CombatOverridePackageList, rhs.CombatOverridePackageList)) return false;
                if (!object.Equals(this.Perks, rhs.Perks)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.AIData, rhs.AIData)) return false;
                if (!object.Equals(this.Packages, rhs.Packages)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Class, rhs.Class)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.ShortName, rhs.ShortName)) return false;
                if (!object.Equals(this.PlayerSkills, rhs.PlayerSkills)) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.HairColor, rhs.HairColor)) return false;
                if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
                if (!object.Equals(this.GiftFilter, rhs.GiftFilter)) return false;
                if (!object.Equals(this.NAM5, rhs.NAM5)) return false;
                if (!object.Equals(this.Height, rhs.Height)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.SoundLevel, rhs.SoundLevel)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.DefaultOutfit, rhs.DefaultOutfit)) return false;
                if (!object.Equals(this.SleepingOutfit, rhs.SleepingOutfit)) return false;
                if (!object.Equals(this.DefaultPackageList, rhs.DefaultPackageList)) return false;
                if (!object.Equals(this.CrimeFaction, rhs.CrimeFaction)) return false;
                if (!object.Equals(this.HeadTexture, rhs.HeadTexture)) return false;
                if (!object.Equals(this.TextureLighting, rhs.TextureLighting)) return false;
                if (!object.Equals(this.FaceMorph, rhs.FaceMorph)) return false;
                if (!object.Equals(this.FaceParts, rhs.FaceParts)) return false;
                if (!object.Equals(this.TintLayers, rhs.TintLayers)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Configuration);
                hash.Add(this.Factions);
                hash.Add(this.DeathItem);
                hash.Add(this.Voice);
                hash.Add(this.Template);
                hash.Add(this.Race);
                hash.Add(this.ActorEffect);
                hash.Add(this.Destructible);
                hash.Add(this.WornArmor);
                hash.Add(this.FarAwayModel);
                hash.Add(this.AttackRace);
                hash.Add(this.Attacks);
                hash.Add(this.SpectatorOverridePackageList);
                hash.Add(this.ObserveDeadBodyOverridePackageList);
                hash.Add(this.GuardWarnOverridePackageList);
                hash.Add(this.CombatOverridePackageList);
                hash.Add(this.Perks);
                hash.Add(this.Items);
                hash.Add(this.AIData);
                hash.Add(this.Packages);
                hash.Add(this.Keywords);
                hash.Add(this.Class);
                hash.Add(this.Name);
                hash.Add(this.ShortName);
                hash.Add(this.PlayerSkills);
                hash.Add(this.HeadParts);
                hash.Add(this.HairColor);
                hash.Add(this.CombatStyle);
                hash.Add(this.GiftFilter);
                hash.Add(this.NAM5);
                hash.Add(this.Height);
                hash.Add(this.Weight);
                hash.Add(this.SoundLevel);
                hash.Add(this.Sound);
                hash.Add(this.DefaultOutfit);
                hash.Add(this.SleepingOutfit);
                hash.Add(this.DefaultPackageList);
                hash.Add(this.CrimeFaction);
                hash.Add(this.HeadTexture);
                hash.Add(this.TextureLighting);
                hash.Add(this.FaceMorph);
                hash.Add(this.FaceParts);
                hash.Add(this.TintLayers);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (Configuration != null)
                {
                    if (!eval(this.Configuration.Overall)) return false;
                    if (this.Configuration.Specific != null && !this.Configuration.Specific.All(eval)) return false;
                }
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DeathItem)) return false;
                if (!eval(this.Voice)) return false;
                if (!eval(this.Template)) return false;
                if (!eval(this.Race)) return false;
                if (this.ActorEffect != null)
                {
                    if (!eval(this.ActorEffect.Overall)) return false;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.WornArmor)) return false;
                if (!eval(this.FarAwayModel)) return false;
                if (!eval(this.AttackRace)) return false;
                if (this.Attacks != null)
                {
                    if (!eval(this.Attacks.Overall)) return false;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SpectatorOverridePackageList)) return false;
                if (!eval(this.ObserveDeadBodyOverridePackageList)) return false;
                if (!eval(this.GuardWarnOverridePackageList)) return false;
                if (!eval(this.CombatOverridePackageList)) return false;
                if (this.Perks != null)
                {
                    if (!eval(this.Perks.Overall)) return false;
                    if (this.Perks.Specific != null)
                    {
                        foreach (var item in this.Perks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AIData != null)
                {
                    if (!eval(this.AIData.Overall)) return false;
                    if (this.AIData.Specific != null && !this.AIData.Specific.All(eval)) return false;
                }
                if (this.Packages != null)
                {
                    if (!eval(this.Packages.Overall)) return false;
                    if (this.Packages.Specific != null)
                    {
                        foreach (var item in this.Packages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Class)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.ShortName)) return false;
                if (PlayerSkills != null)
                {
                    if (!eval(this.PlayerSkills.Overall)) return false;
                    if (this.PlayerSkills.Specific != null && !this.PlayerSkills.Specific.All(eval)) return false;
                }
                if (this.HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.HairColor)) return false;
                if (!eval(this.CombatStyle)) return false;
                if (!eval(this.GiftFilter)) return false;
                if (!eval(this.NAM5)) return false;
                if (!eval(this.Height)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.SoundLevel)) return false;
                if (Sound != null)
                {
                    if (!eval(this.Sound.Overall)) return false;
                    if (this.Sound.Specific != null && !this.Sound.Specific.All(eval)) return false;
                }
                if (!eval(this.DefaultOutfit)) return false;
                if (!eval(this.SleepingOutfit)) return false;
                if (!eval(this.DefaultPackageList)) return false;
                if (!eval(this.CrimeFaction)) return false;
                if (!eval(this.HeadTexture)) return false;
                if (!eval(this.TextureLighting)) return false;
                if (FaceMorph != null)
                {
                    if (!eval(this.FaceMorph.Overall)) return false;
                    if (this.FaceMorph.Specific != null && !this.FaceMorph.Specific.All(eval)) return false;
                }
                if (FaceParts != null)
                {
                    if (!eval(this.FaceParts.Overall)) return false;
                    if (this.FaceParts.Specific != null && !this.FaceParts.Specific.All(eval)) return false;
                }
                if (this.TintLayers != null)
                {
                    if (!eval(this.TintLayers.Overall)) return false;
                    if (this.TintLayers.Specific != null)
                    {
                        foreach (var item in this.TintLayers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (Configuration != null)
                {
                    if (eval(this.Configuration.Overall)) return true;
                    if (this.Configuration.Specific != null && this.Configuration.Specific.Any(eval)) return true;
                }
                if (this.Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DeathItem)) return true;
                if (eval(this.Voice)) return true;
                if (eval(this.Template)) return true;
                if (eval(this.Race)) return true;
                if (this.ActorEffect != null)
                {
                    if (eval(this.ActorEffect.Overall)) return true;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.WornArmor)) return true;
                if (eval(this.FarAwayModel)) return true;
                if (eval(this.AttackRace)) return true;
                if (this.Attacks != null)
                {
                    if (eval(this.Attacks.Overall)) return true;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SpectatorOverridePackageList)) return true;
                if (eval(this.ObserveDeadBodyOverridePackageList)) return true;
                if (eval(this.GuardWarnOverridePackageList)) return true;
                if (eval(this.CombatOverridePackageList)) return true;
                if (this.Perks != null)
                {
                    if (eval(this.Perks.Overall)) return true;
                    if (this.Perks.Specific != null)
                    {
                        foreach (var item in this.Perks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AIData != null)
                {
                    if (eval(this.AIData.Overall)) return true;
                    if (this.AIData.Specific != null && this.AIData.Specific.Any(eval)) return true;
                }
                if (this.Packages != null)
                {
                    if (eval(this.Packages.Overall)) return true;
                    if (this.Packages.Specific != null)
                    {
                        foreach (var item in this.Packages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Class)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.ShortName)) return true;
                if (PlayerSkills != null)
                {
                    if (eval(this.PlayerSkills.Overall)) return true;
                    if (this.PlayerSkills.Specific != null && this.PlayerSkills.Specific.Any(eval)) return true;
                }
                if (this.HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.HairColor)) return true;
                if (eval(this.CombatStyle)) return true;
                if (eval(this.GiftFilter)) return true;
                if (eval(this.NAM5)) return true;
                if (eval(this.Height)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.SoundLevel)) return true;
                if (Sound != null)
                {
                    if (eval(this.Sound.Overall)) return true;
                    if (this.Sound.Specific != null && this.Sound.Specific.Any(eval)) return true;
                }
                if (eval(this.DefaultOutfit)) return true;
                if (eval(this.SleepingOutfit)) return true;
                if (eval(this.DefaultPackageList)) return true;
                if (eval(this.CrimeFaction)) return true;
                if (eval(this.HeadTexture)) return true;
                if (eval(this.TextureLighting)) return true;
                if (FaceMorph != null)
                {
                    if (eval(this.FaceMorph.Overall)) return true;
                    if (this.FaceMorph.Specific != null && this.FaceMorph.Specific.Any(eval)) return true;
                }
                if (FaceParts != null)
                {
                    if (eval(this.FaceParts.Overall)) return true;
                    if (this.FaceParts.Specific != null && this.FaceParts.Specific.Any(eval)) return true;
                }
                if (this.TintLayers != null)
                {
                    if (eval(this.TintLayers.Overall)) return true;
                    if (this.TintLayers.Specific != null)
                    {
                        foreach (var item in this.TintLayers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Npc.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Configuration = this.Configuration == null ? null : new MaskItem<R, NpcConfiguration.Mask<R>?>(eval(this.Configuration.Overall), this.Configuration.Specific?.Translate(eval));
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RankPlacement.Mask<R>?>>?>(eval(this.Factions.Overall), Enumerable.Empty<MaskItemIndexed<R, RankPlacement.Mask<R>?>>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RankPlacement.Mask<R>?>>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RankPlacement.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RankPlacement.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DeathItem = eval(this.DeathItem);
                obj.Voice = eval(this.Voice);
                obj.Template = eval(this.Template);
                obj.Race = eval(this.Race);
                if (ActorEffect != null)
                {
                    obj.ActorEffect = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ActorEffect.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ActorEffect.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ActorEffect.Specific = l;
                        foreach (var item in ActorEffect.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.WornArmor = eval(this.WornArmor);
                obj.FarAwayModel = eval(this.FarAwayModel);
                obj.AttackRace = eval(this.AttackRace);
                if (Attacks != null)
                {
                    obj.Attacks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Attack.Mask<R>?>>?>(eval(this.Attacks.Overall), Enumerable.Empty<MaskItemIndexed<R, Attack.Mask<R>?>>());
                    if (Attacks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Attack.Mask<R>?>>();
                        obj.Attacks.Specific = l;
                        foreach (var item in Attacks.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Attack.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Attack.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SpectatorOverridePackageList = eval(this.SpectatorOverridePackageList);
                obj.ObserveDeadBodyOverridePackageList = eval(this.ObserveDeadBodyOverridePackageList);
                obj.GuardWarnOverridePackageList = eval(this.GuardWarnOverridePackageList);
                obj.CombatOverridePackageList = eval(this.CombatOverridePackageList);
                if (Perks != null)
                {
                    obj.Perks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PerkPlacement.Mask<R>?>>?>(eval(this.Perks.Overall), Enumerable.Empty<MaskItemIndexed<R, PerkPlacement.Mask<R>?>>());
                    if (Perks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PerkPlacement.Mask<R>?>>();
                        obj.Perks.Specific = l;
                        foreach (var item in Perks.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, PerkPlacement.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, PerkPlacement.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ContainerEntry.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ContainerEntry.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.AIData = this.AIData == null ? null : new MaskItem<R, AIData.Mask<R>?>(eval(this.AIData.Overall), this.AIData.Specific?.Translate(eval));
                if (Packages != null)
                {
                    obj.Packages = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Packages.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Packages.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Packages.Specific = l;
                        foreach (var item in Packages.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Class = eval(this.Class);
                obj.Name = eval(this.Name);
                obj.ShortName = eval(this.ShortName);
                obj.PlayerSkills = this.PlayerSkills == null ? null : new MaskItem<R, PlayerSkills.Mask<R>?>(eval(this.PlayerSkills.Overall), this.PlayerSkills.Specific?.Translate(eval));
                if (HeadParts != null)
                {
                    obj.HeadParts = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.HeadParts.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (HeadParts.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.HeadParts.Specific = l;
                        foreach (var item in HeadParts.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.HairColor = eval(this.HairColor);
                obj.CombatStyle = eval(this.CombatStyle);
                obj.GiftFilter = eval(this.GiftFilter);
                obj.NAM5 = eval(this.NAM5);
                obj.Height = eval(this.Height);
                obj.Weight = eval(this.Weight);
                obj.SoundLevel = eval(this.SoundLevel);
                obj.Sound = this.Sound == null ? null : new MaskItem<R, ANpcSoundDefinition.Mask<R>?>(eval(this.Sound.Overall), this.Sound.Specific?.Translate(eval));
                obj.DefaultOutfit = eval(this.DefaultOutfit);
                obj.SleepingOutfit = eval(this.SleepingOutfit);
                obj.DefaultPackageList = eval(this.DefaultPackageList);
                obj.CrimeFaction = eval(this.CrimeFaction);
                obj.HeadTexture = eval(this.HeadTexture);
                obj.TextureLighting = eval(this.TextureLighting);
                obj.FaceMorph = this.FaceMorph == null ? null : new MaskItem<R, NpcFaceMorph.Mask<R>?>(eval(this.FaceMorph.Overall), this.FaceMorph.Specific?.Translate(eval));
                obj.FaceParts = this.FaceParts == null ? null : new MaskItem<R, NpcFaceParts.Mask<R>?>(eval(this.FaceParts.Overall), this.FaceParts.Specific?.Translate(eval));
                if (TintLayers != null)
                {
                    obj.TintLayers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TintLayer.Mask<R>?>>?>(eval(this.TintLayers.Overall), Enumerable.Empty<MaskItemIndexed<R, TintLayer.Mask<R>?>>());
                    if (TintLayers.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TintLayer.Mask<R>?>>();
                        obj.TintLayers.Specific = l;
                        foreach (var item in TintLayers.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, TintLayer.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, TintLayer.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Npc.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Npc.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Npc.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Configuration?.Overall ?? true)
                    {
                        Configuration?.ToString(fg);
                    }
                    if ((printMask?.Factions?.Overall ?? true)
                        && Factions.TryGet(out var FactionsItem))
                    {
                        fg.AppendLine("Factions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(FactionsItem.Overall);
                            if (FactionsItem.Specific != null)
                            {
                                foreach (var subItem in FactionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DeathItem ?? true)
                    {
                        fg.AppendItem(DeathItem, "DeathItem");
                    }
                    if (printMask?.Voice ?? true)
                    {
                        fg.AppendItem(Voice, "Voice");
                    }
                    if (printMask?.Template ?? true)
                    {
                        fg.AppendItem(Template, "Template");
                    }
                    if (printMask?.Race ?? true)
                    {
                        fg.AppendItem(Race, "Race");
                    }
                    if ((printMask?.ActorEffect?.Overall ?? true)
                        && ActorEffect.TryGet(out var ActorEffectItem))
                    {
                        fg.AppendLine("ActorEffect =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ActorEffectItem.Overall);
                            if (ActorEffectItem.Specific != null)
                            {
                                foreach (var subItem in ActorEffectItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.WornArmor ?? true)
                    {
                        fg.AppendItem(WornArmor, "WornArmor");
                    }
                    if (printMask?.FarAwayModel ?? true)
                    {
                        fg.AppendItem(FarAwayModel, "FarAwayModel");
                    }
                    if (printMask?.AttackRace ?? true)
                    {
                        fg.AppendItem(AttackRace, "AttackRace");
                    }
                    if ((printMask?.Attacks?.Overall ?? true)
                        && Attacks.TryGet(out var AttacksItem))
                    {
                        fg.AppendLine("Attacks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AttacksItem.Overall);
                            if (AttacksItem.Specific != null)
                            {
                                foreach (var subItem in AttacksItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.SpectatorOverridePackageList ?? true)
                    {
                        fg.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                    }
                    if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
                    {
                        fg.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                    }
                    if (printMask?.GuardWarnOverridePackageList ?? true)
                    {
                        fg.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                    }
                    if (printMask?.CombatOverridePackageList ?? true)
                    {
                        fg.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                    }
                    if ((printMask?.Perks?.Overall ?? true)
                        && Perks.TryGet(out var PerksItem))
                    {
                        fg.AppendLine("Perks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PerksItem.Overall);
                            if (PerksItem.Specific != null)
                            {
                                foreach (var subItem in PerksItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items.TryGet(out var ItemsItem))
                    {
                        fg.AppendLine("Items =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.AIData?.Overall ?? true)
                    {
                        AIData?.ToString(fg);
                    }
                    if ((printMask?.Packages?.Overall ?? true)
                        && Packages.TryGet(out var PackagesItem))
                    {
                        fg.AppendLine("Packages =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PackagesItem.Overall);
                            if (PackagesItem.Specific != null)
                            {
                                foreach (var subItem in PackagesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Class ?? true)
                    {
                        fg.AppendItem(Class, "Class");
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.ShortName ?? true)
                    {
                        fg.AppendItem(ShortName, "ShortName");
                    }
                    if (printMask?.PlayerSkills?.Overall ?? true)
                    {
                        PlayerSkills?.ToString(fg);
                    }
                    if ((printMask?.HeadParts?.Overall ?? true)
                        && HeadParts.TryGet(out var HeadPartsItem))
                    {
                        fg.AppendLine("HeadParts =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(HeadPartsItem.Overall);
                            if (HeadPartsItem.Specific != null)
                            {
                                foreach (var subItem in HeadPartsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.HairColor ?? true)
                    {
                        fg.AppendItem(HairColor, "HairColor");
                    }
                    if (printMask?.CombatStyle ?? true)
                    {
                        fg.AppendItem(CombatStyle, "CombatStyle");
                    }
                    if (printMask?.GiftFilter ?? true)
                    {
                        fg.AppendItem(GiftFilter, "GiftFilter");
                    }
                    if (printMask?.NAM5 ?? true)
                    {
                        fg.AppendItem(NAM5, "NAM5");
                    }
                    if (printMask?.Height ?? true)
                    {
                        fg.AppendItem(Height, "Height");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.SoundLevel ?? true)
                    {
                        fg.AppendItem(SoundLevel, "SoundLevel");
                    }
                    if (printMask?.Sound?.Overall ?? true)
                    {
                        Sound?.ToString(fg);
                    }
                    if (printMask?.DefaultOutfit ?? true)
                    {
                        fg.AppendItem(DefaultOutfit, "DefaultOutfit");
                    }
                    if (printMask?.SleepingOutfit ?? true)
                    {
                        fg.AppendItem(SleepingOutfit, "SleepingOutfit");
                    }
                    if (printMask?.DefaultPackageList ?? true)
                    {
                        fg.AppendItem(DefaultPackageList, "DefaultPackageList");
                    }
                    if (printMask?.CrimeFaction ?? true)
                    {
                        fg.AppendItem(CrimeFaction, "CrimeFaction");
                    }
                    if (printMask?.HeadTexture ?? true)
                    {
                        fg.AppendItem(HeadTexture, "HeadTexture");
                    }
                    if (printMask?.TextureLighting ?? true)
                    {
                        fg.AppendItem(TextureLighting, "TextureLighting");
                    }
                    if (printMask?.FaceMorph?.Overall ?? true)
                    {
                        FaceMorph?.ToString(fg);
                    }
                    if (printMask?.FaceParts?.Overall ?? true)
                    {
                        FaceParts?.ToString(fg);
                    }
                    if ((printMask?.TintLayers?.Overall ?? true)
                        && TintLayers.TryGet(out var TintLayersItem))
                    {
                        fg.AppendLine("TintLayers =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TintLayersItem.Overall);
                            if (TintLayersItem.Specific != null)
                            {
                                foreach (var subItem in TintLayersItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, NpcConfiguration.ErrorMask?>? Configuration;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>? Factions;
            public Exception? DeathItem;
            public Exception? Voice;
            public Exception? Template;
            public Exception? Race;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ActorEffect;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? WornArmor;
            public Exception? FarAwayModel;
            public Exception? AttackRace;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>? Attacks;
            public Exception? SpectatorOverridePackageList;
            public Exception? ObserveDeadBodyOverridePackageList;
            public Exception? GuardWarnOverridePackageList;
            public Exception? CombatOverridePackageList;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>? Perks;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>? Items;
            public MaskItem<Exception?, AIData.ErrorMask?>? AIData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Packages;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? Class;
            public Exception? Name;
            public Exception? ShortName;
            public MaskItem<Exception?, PlayerSkills.ErrorMask?>? PlayerSkills;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? HeadParts;
            public Exception? HairColor;
            public Exception? CombatStyle;
            public Exception? GiftFilter;
            public Exception? NAM5;
            public Exception? Height;
            public Exception? Weight;
            public Exception? SoundLevel;
            public MaskItem<Exception?, ANpcSoundDefinition.ErrorMask?>? Sound;
            public Exception? DefaultOutfit;
            public Exception? SleepingOutfit;
            public Exception? DefaultPackageList;
            public Exception? CrimeFaction;
            public Exception? HeadTexture;
            public Exception? TextureLighting;
            public MaskItem<Exception?, NpcFaceMorph.ErrorMask?>? FaceMorph;
            public MaskItem<Exception?, NpcFaceParts.ErrorMask?>? FaceParts;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintLayer.ErrorMask?>>?>? TintLayers;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Npc_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Npc_FieldIndex.Configuration:
                        return Configuration;
                    case Npc_FieldIndex.Factions:
                        return Factions;
                    case Npc_FieldIndex.DeathItem:
                        return DeathItem;
                    case Npc_FieldIndex.Voice:
                        return Voice;
                    case Npc_FieldIndex.Template:
                        return Template;
                    case Npc_FieldIndex.Race:
                        return Race;
                    case Npc_FieldIndex.ActorEffect:
                        return ActorEffect;
                    case Npc_FieldIndex.Destructible:
                        return Destructible;
                    case Npc_FieldIndex.WornArmor:
                        return WornArmor;
                    case Npc_FieldIndex.FarAwayModel:
                        return FarAwayModel;
                    case Npc_FieldIndex.AttackRace:
                        return AttackRace;
                    case Npc_FieldIndex.Attacks:
                        return Attacks;
                    case Npc_FieldIndex.SpectatorOverridePackageList:
                        return SpectatorOverridePackageList;
                    case Npc_FieldIndex.ObserveDeadBodyOverridePackageList:
                        return ObserveDeadBodyOverridePackageList;
                    case Npc_FieldIndex.GuardWarnOverridePackageList:
                        return GuardWarnOverridePackageList;
                    case Npc_FieldIndex.CombatOverridePackageList:
                        return CombatOverridePackageList;
                    case Npc_FieldIndex.Perks:
                        return Perks;
                    case Npc_FieldIndex.Items:
                        return Items;
                    case Npc_FieldIndex.AIData:
                        return AIData;
                    case Npc_FieldIndex.Packages:
                        return Packages;
                    case Npc_FieldIndex.Keywords:
                        return Keywords;
                    case Npc_FieldIndex.Class:
                        return Class;
                    case Npc_FieldIndex.Name:
                        return Name;
                    case Npc_FieldIndex.ShortName:
                        return ShortName;
                    case Npc_FieldIndex.PlayerSkills:
                        return PlayerSkills;
                    case Npc_FieldIndex.HeadParts:
                        return HeadParts;
                    case Npc_FieldIndex.HairColor:
                        return HairColor;
                    case Npc_FieldIndex.CombatStyle:
                        return CombatStyle;
                    case Npc_FieldIndex.GiftFilter:
                        return GiftFilter;
                    case Npc_FieldIndex.NAM5:
                        return NAM5;
                    case Npc_FieldIndex.Height:
                        return Height;
                    case Npc_FieldIndex.Weight:
                        return Weight;
                    case Npc_FieldIndex.SoundLevel:
                        return SoundLevel;
                    case Npc_FieldIndex.Sound:
                        return Sound;
                    case Npc_FieldIndex.DefaultOutfit:
                        return DefaultOutfit;
                    case Npc_FieldIndex.SleepingOutfit:
                        return SleepingOutfit;
                    case Npc_FieldIndex.DefaultPackageList:
                        return DefaultPackageList;
                    case Npc_FieldIndex.CrimeFaction:
                        return CrimeFaction;
                    case Npc_FieldIndex.HeadTexture:
                        return HeadTexture;
                    case Npc_FieldIndex.TextureLighting:
                        return TextureLighting;
                    case Npc_FieldIndex.FaceMorph:
                        return FaceMorph;
                    case Npc_FieldIndex.FaceParts:
                        return FaceParts;
                    case Npc_FieldIndex.TintLayers:
                        return TintLayers;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Configuration:
                        this.Configuration = new MaskItem<Exception?, NpcConfiguration.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.DeathItem:
                        this.DeathItem = ex;
                        break;
                    case Npc_FieldIndex.Voice:
                        this.Voice = ex;
                        break;
                    case Npc_FieldIndex.Template:
                        this.Template = ex;
                        break;
                    case Npc_FieldIndex.Race:
                        this.Race = ex;
                        break;
                    case Npc_FieldIndex.ActorEffect:
                        this.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.WornArmor:
                        this.WornArmor = ex;
                        break;
                    case Npc_FieldIndex.FarAwayModel:
                        this.FarAwayModel = ex;
                        break;
                    case Npc_FieldIndex.AttackRace:
                        this.AttackRace = ex;
                        break;
                    case Npc_FieldIndex.Attacks:
                        this.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.Perks:
                        this.Perks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.AIData:
                        this.AIData = new MaskItem<Exception?, AIData.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Packages:
                        this.Packages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Class:
                        this.Class = ex;
                        break;
                    case Npc_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Npc_FieldIndex.ShortName:
                        this.ShortName = ex;
                        break;
                    case Npc_FieldIndex.PlayerSkills:
                        this.PlayerSkills = new MaskItem<Exception?, PlayerSkills.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.HairColor:
                        this.HairColor = ex;
                        break;
                    case Npc_FieldIndex.CombatStyle:
                        this.CombatStyle = ex;
                        break;
                    case Npc_FieldIndex.GiftFilter:
                        this.GiftFilter = ex;
                        break;
                    case Npc_FieldIndex.NAM5:
                        this.NAM5 = ex;
                        break;
                    case Npc_FieldIndex.Height:
                        this.Height = ex;
                        break;
                    case Npc_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Npc_FieldIndex.SoundLevel:
                        this.SoundLevel = ex;
                        break;
                    case Npc_FieldIndex.Sound:
                        this.Sound = new MaskItem<Exception?, ANpcSoundDefinition.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.DefaultOutfit:
                        this.DefaultOutfit = ex;
                        break;
                    case Npc_FieldIndex.SleepingOutfit:
                        this.SleepingOutfit = ex;
                        break;
                    case Npc_FieldIndex.DefaultPackageList:
                        this.DefaultPackageList = ex;
                        break;
                    case Npc_FieldIndex.CrimeFaction:
                        this.CrimeFaction = ex;
                        break;
                    case Npc_FieldIndex.HeadTexture:
                        this.HeadTexture = ex;
                        break;
                    case Npc_FieldIndex.TextureLighting:
                        this.TextureLighting = ex;
                        break;
                    case Npc_FieldIndex.FaceMorph:
                        this.FaceMorph = new MaskItem<Exception?, NpcFaceMorph.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.FaceParts:
                        this.FaceParts = new MaskItem<Exception?, NpcFaceParts.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.TintLayers:
                        this.TintLayers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintLayer.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Configuration:
                        this.Configuration = (MaskItem<Exception?, NpcConfiguration.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.DeathItem:
                        this.DeathItem = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Voice:
                        this.Voice = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Template:
                        this.Template = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Race:
                        this.Race = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.ActorEffect:
                        this.ActorEffect = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.WornArmor:
                        this.WornArmor = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FarAwayModel:
                        this.FarAwayModel = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.AttackRace:
                        this.AttackRace = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Attacks:
                        this.Attacks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Perks:
                        this.Perks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.AIData:
                        this.AIData = (MaskItem<Exception?, AIData.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Packages:
                        this.Packages = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Class:
                        this.Class = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.ShortName:
                        this.ShortName = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.PlayerSkills:
                        this.PlayerSkills = (MaskItem<Exception?, PlayerSkills.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.HairColor:
                        this.HairColor = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CombatStyle:
                        this.CombatStyle = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.GiftFilter:
                        this.GiftFilter = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.NAM5:
                        this.NAM5 = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Height:
                        this.Height = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.SoundLevel:
                        this.SoundLevel = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Sound:
                        this.Sound = (MaskItem<Exception?, ANpcSoundDefinition.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.DefaultOutfit:
                        this.DefaultOutfit = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.SleepingOutfit:
                        this.SleepingOutfit = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.DefaultPackageList:
                        this.DefaultPackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CrimeFaction:
                        this.CrimeFaction = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.HeadTexture:
                        this.HeadTexture = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.TextureLighting:
                        this.TextureLighting = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FaceMorph:
                        this.FaceMorph = (MaskItem<Exception?, NpcFaceMorph.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.FaceParts:
                        this.FaceParts = (MaskItem<Exception?, NpcFaceParts.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.TintLayers:
                        this.TintLayers = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintLayer.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Configuration != null) return true;
                if (Factions != null) return true;
                if (DeathItem != null) return true;
                if (Voice != null) return true;
                if (Template != null) return true;
                if (Race != null) return true;
                if (ActorEffect != null) return true;
                if (Destructible != null) return true;
                if (WornArmor != null) return true;
                if (FarAwayModel != null) return true;
                if (AttackRace != null) return true;
                if (Attacks != null) return true;
                if (SpectatorOverridePackageList != null) return true;
                if (ObserveDeadBodyOverridePackageList != null) return true;
                if (GuardWarnOverridePackageList != null) return true;
                if (CombatOverridePackageList != null) return true;
                if (Perks != null) return true;
                if (Items != null) return true;
                if (AIData != null) return true;
                if (Packages != null) return true;
                if (Keywords != null) return true;
                if (Class != null) return true;
                if (Name != null) return true;
                if (ShortName != null) return true;
                if (PlayerSkills != null) return true;
                if (HeadParts != null) return true;
                if (HairColor != null) return true;
                if (CombatStyle != null) return true;
                if (GiftFilter != null) return true;
                if (NAM5 != null) return true;
                if (Height != null) return true;
                if (Weight != null) return true;
                if (SoundLevel != null) return true;
                if (Sound != null) return true;
                if (DefaultOutfit != null) return true;
                if (SleepingOutfit != null) return true;
                if (DefaultPackageList != null) return true;
                if (CrimeFaction != null) return true;
                if (HeadTexture != null) return true;
                if (TextureLighting != null) return true;
                if (FaceMorph != null) return true;
                if (FaceParts != null) return true;
                if (TintLayers != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                Configuration?.ToString(fg);
                if (Factions.TryGet(out var FactionsItem))
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(FactionsItem.Overall);
                        if (FactionsItem.Specific != null)
                        {
                            foreach (var subItem in FactionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DeathItem, "DeathItem");
                fg.AppendItem(Voice, "Voice");
                fg.AppendItem(Template, "Template");
                fg.AppendItem(Race, "Race");
                if (ActorEffect.TryGet(out var ActorEffectItem))
                {
                    fg.AppendLine("ActorEffect =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ActorEffectItem.Overall);
                        if (ActorEffectItem.Specific != null)
                        {
                            foreach (var subItem in ActorEffectItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Destructible?.ToString(fg);
                fg.AppendItem(WornArmor, "WornArmor");
                fg.AppendItem(FarAwayModel, "FarAwayModel");
                fg.AppendItem(AttackRace, "AttackRace");
                if (Attacks.TryGet(out var AttacksItem))
                {
                    fg.AppendLine("Attacks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AttacksItem.Overall);
                        if (AttacksItem.Specific != null)
                        {
                            foreach (var subItem in AttacksItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                fg.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                fg.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                fg.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                if (Perks.TryGet(out var PerksItem))
                {
                    fg.AppendLine("Perks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PerksItem.Overall);
                        if (PerksItem.Specific != null)
                        {
                            foreach (var subItem in PerksItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Items.TryGet(out var ItemsItem))
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                AIData?.ToString(fg);
                if (Packages.TryGet(out var PackagesItem))
                {
                    fg.AppendLine("Packages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PackagesItem.Overall);
                        if (PackagesItem.Specific != null)
                        {
                            foreach (var subItem in PackagesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Class, "Class");
                fg.AppendItem(Name, "Name");
                fg.AppendItem(ShortName, "ShortName");
                PlayerSkills?.ToString(fg);
                if (HeadParts.TryGet(out var HeadPartsItem))
                {
                    fg.AppendLine("HeadParts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(HeadPartsItem.Overall);
                        if (HeadPartsItem.Specific != null)
                        {
                            foreach (var subItem in HeadPartsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(HairColor, "HairColor");
                fg.AppendItem(CombatStyle, "CombatStyle");
                fg.AppendItem(GiftFilter, "GiftFilter");
                fg.AppendItem(NAM5, "NAM5");
                fg.AppendItem(Height, "Height");
                fg.AppendItem(Weight, "Weight");
                fg.AppendItem(SoundLevel, "SoundLevel");
                Sound?.ToString(fg);
                fg.AppendItem(DefaultOutfit, "DefaultOutfit");
                fg.AppendItem(SleepingOutfit, "SleepingOutfit");
                fg.AppendItem(DefaultPackageList, "DefaultPackageList");
                fg.AppendItem(CrimeFaction, "CrimeFaction");
                fg.AppendItem(HeadTexture, "HeadTexture");
                fg.AppendItem(TextureLighting, "TextureLighting");
                FaceMorph?.ToString(fg);
                FaceParts?.ToString(fg);
                if (TintLayers.TryGet(out var TintLayersItem))
                {
                    fg.AppendLine("TintLayers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TintLayersItem.Overall);
                        if (TintLayersItem.Specific != null)
                        {
                            foreach (var subItem in TintLayersItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Configuration = this.Configuration.Combine(rhs.Configuration, (l, r) => l.Combine(r));
                ret.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
                ret.Voice = this.Voice.Combine(rhs.Voice);
                ret.Template = this.Template.Combine(rhs.Template);
                ret.Race = this.Race.Combine(rhs.Race);
                ret.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.ActorEffect?.Overall, rhs.ActorEffect?.Overall), ExceptionExt.Combine(this.ActorEffect?.Specific, rhs.ActorEffect?.Specific));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.WornArmor = this.WornArmor.Combine(rhs.WornArmor);
                ret.FarAwayModel = this.FarAwayModel.Combine(rhs.FarAwayModel);
                ret.AttackRace = this.AttackRace.Combine(rhs.AttackRace);
                ret.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(ExceptionExt.Combine(this.Attacks?.Overall, rhs.Attacks?.Overall), ExceptionExt.Combine(this.Attacks?.Specific, rhs.Attacks?.Specific));
                ret.SpectatorOverridePackageList = this.SpectatorOverridePackageList.Combine(rhs.SpectatorOverridePackageList);
                ret.ObserveDeadBodyOverridePackageList = this.ObserveDeadBodyOverridePackageList.Combine(rhs.ObserveDeadBodyOverridePackageList);
                ret.GuardWarnOverridePackageList = this.GuardWarnOverridePackageList.Combine(rhs.GuardWarnOverridePackageList);
                ret.CombatOverridePackageList = this.CombatOverridePackageList.Combine(rhs.CombatOverridePackageList);
                ret.Perks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>(ExceptionExt.Combine(this.Perks?.Overall, rhs.Perks?.Overall), ExceptionExt.Combine(this.Perks?.Specific, rhs.Perks?.Specific));
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.AIData = this.AIData.Combine(rhs.AIData, (l, r) => l.Combine(r));
                ret.Packages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Packages?.Overall, rhs.Packages?.Overall), ExceptionExt.Combine(this.Packages?.Specific, rhs.Packages?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Class = this.Class.Combine(rhs.Class);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.ShortName = this.ShortName.Combine(rhs.ShortName);
                ret.PlayerSkills = this.PlayerSkills.Combine(rhs.PlayerSkills, (l, r) => l.Combine(r));
                ret.HeadParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.HeadParts?.Overall, rhs.HeadParts?.Overall), ExceptionExt.Combine(this.HeadParts?.Specific, rhs.HeadParts?.Specific));
                ret.HairColor = this.HairColor.Combine(rhs.HairColor);
                ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
                ret.GiftFilter = this.GiftFilter.Combine(rhs.GiftFilter);
                ret.NAM5 = this.NAM5.Combine(rhs.NAM5);
                ret.Height = this.Height.Combine(rhs.Height);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.SoundLevel = this.SoundLevel.Combine(rhs.SoundLevel);
                ret.Sound = this.Sound.Combine(rhs.Sound, (l, r) => l.Combine(r));
                ret.DefaultOutfit = this.DefaultOutfit.Combine(rhs.DefaultOutfit);
                ret.SleepingOutfit = this.SleepingOutfit.Combine(rhs.SleepingOutfit);
                ret.DefaultPackageList = this.DefaultPackageList.Combine(rhs.DefaultPackageList);
                ret.CrimeFaction = this.CrimeFaction.Combine(rhs.CrimeFaction);
                ret.HeadTexture = this.HeadTexture.Combine(rhs.HeadTexture);
                ret.TextureLighting = this.TextureLighting.Combine(rhs.TextureLighting);
                ret.FaceMorph = this.FaceMorph.Combine(rhs.FaceMorph, (l, r) => l.Combine(r));
                ret.FaceParts = this.FaceParts.Combine(rhs.FaceParts, (l, r) => l.Combine(r));
                ret.TintLayers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintLayer.ErrorMask?>>?>(ExceptionExt.Combine(this.TintLayers?.Overall, rhs.TintLayers?.Overall), ExceptionExt.Combine(this.TintLayers?.Specific, rhs.TintLayers?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public NpcConfiguration.TranslationMask? Configuration;
            public RankPlacement.TranslationMask? Factions;
            public bool DeathItem;
            public bool Voice;
            public bool Template;
            public bool Race;
            public bool ActorEffect;
            public Destructible.TranslationMask? Destructible;
            public bool WornArmor;
            public bool FarAwayModel;
            public bool AttackRace;
            public Attack.TranslationMask? Attacks;
            public bool SpectatorOverridePackageList;
            public bool ObserveDeadBodyOverridePackageList;
            public bool GuardWarnOverridePackageList;
            public bool CombatOverridePackageList;
            public PerkPlacement.TranslationMask? Perks;
            public ContainerEntry.TranslationMask? Items;
            public AIData.TranslationMask? AIData;
            public bool Packages;
            public bool Keywords;
            public bool Class;
            public bool Name;
            public bool ShortName;
            public PlayerSkills.TranslationMask? PlayerSkills;
            public bool HeadParts;
            public bool HairColor;
            public bool CombatStyle;
            public bool GiftFilter;
            public bool NAM5;
            public bool Height;
            public bool Weight;
            public bool SoundLevel;
            public ANpcSoundDefinition.TranslationMask? Sound;
            public bool DefaultOutfit;
            public bool SleepingOutfit;
            public bool DefaultPackageList;
            public bool CrimeFaction;
            public bool HeadTexture;
            public bool TextureLighting;
            public NpcFaceMorph.TranslationMask? FaceMorph;
            public NpcFaceParts.TranslationMask? FaceParts;
            public TintLayer.TranslationMask? TintLayers;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DeathItem = defaultOn;
                this.Voice = defaultOn;
                this.Template = defaultOn;
                this.Race = defaultOn;
                this.ActorEffect = defaultOn;
                this.WornArmor = defaultOn;
                this.FarAwayModel = defaultOn;
                this.AttackRace = defaultOn;
                this.SpectatorOverridePackageList = defaultOn;
                this.ObserveDeadBodyOverridePackageList = defaultOn;
                this.GuardWarnOverridePackageList = defaultOn;
                this.CombatOverridePackageList = defaultOn;
                this.Packages = defaultOn;
                this.Keywords = defaultOn;
                this.Class = defaultOn;
                this.Name = defaultOn;
                this.ShortName = defaultOn;
                this.HeadParts = defaultOn;
                this.HairColor = defaultOn;
                this.CombatStyle = defaultOn;
                this.GiftFilter = defaultOn;
                this.NAM5 = defaultOn;
                this.Height = defaultOn;
                this.Weight = defaultOn;
                this.SoundLevel = defaultOn;
                this.DefaultOutfit = defaultOn;
                this.SleepingOutfit = defaultOn;
                this.DefaultPackageList = defaultOn;
                this.CrimeFaction = defaultOn;
                this.HeadTexture = defaultOn;
                this.TextureLighting = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Configuration != null ? Configuration.OnOverall : DefaultOn, Configuration?.GetCrystal()));
                ret.Add((Factions == null ? DefaultOn : !Factions.GetCrystal().CopyNothing, Factions?.GetCrystal()));
                ret.Add((DeathItem, null));
                ret.Add((Voice, null));
                ret.Add((Template, null));
                ret.Add((Race, null));
                ret.Add((ActorEffect, null));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((WornArmor, null));
                ret.Add((FarAwayModel, null));
                ret.Add((AttackRace, null));
                ret.Add((Attacks == null ? DefaultOn : !Attacks.GetCrystal().CopyNothing, Attacks?.GetCrystal()));
                ret.Add((SpectatorOverridePackageList, null));
                ret.Add((ObserveDeadBodyOverridePackageList, null));
                ret.Add((GuardWarnOverridePackageList, null));
                ret.Add((CombatOverridePackageList, null));
                ret.Add((Perks == null ? DefaultOn : !Perks.GetCrystal().CopyNothing, Perks?.GetCrystal()));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
                ret.Add((AIData != null ? AIData.OnOverall : DefaultOn, AIData?.GetCrystal()));
                ret.Add((Packages, null));
                ret.Add((Keywords, null));
                ret.Add((Class, null));
                ret.Add((Name, null));
                ret.Add((ShortName, null));
                ret.Add((PlayerSkills != null ? PlayerSkills.OnOverall : DefaultOn, PlayerSkills?.GetCrystal()));
                ret.Add((HeadParts, null));
                ret.Add((HairColor, null));
                ret.Add((CombatStyle, null));
                ret.Add((GiftFilter, null));
                ret.Add((NAM5, null));
                ret.Add((Height, null));
                ret.Add((Weight, null));
                ret.Add((SoundLevel, null));
                ret.Add((Sound != null ? Sound.OnOverall : DefaultOn, Sound?.GetCrystal()));
                ret.Add((DefaultOutfit, null));
                ret.Add((SleepingOutfit, null));
                ret.Add((DefaultPackageList, null));
                ret.Add((CrimeFaction, null));
                ret.Add((HeadTexture, null));
                ret.Add((TextureLighting, null));
                ret.Add((FaceMorph != null ? FaceMorph.OnOverall : DefaultOn, FaceMorph?.GetCrystal()));
                ret.Add((FaceParts != null ? FaceParts.OnOverall : DefaultOn, FaceParts?.GetCrystal()));
                ret.Add((TintLayers == null ? DefaultOn : !TintLayers.GetCrystal().CopyNothing, TintLayers?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Npc_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => NpcCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcSetterCommon.Instance.RemapLinks(this, mapping);
        public Npc(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Npc(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Npc(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Npc(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Npc(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Npc CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Npc();
            ((NpcSetterCommon)((INpcGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Npc item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((NpcSetterCommon)((INpcGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Npc GetNew()
        {
            return new Npc();
        }

    }
    #endregion

    #region Interface
    public partial interface INpc :
        INpcGetter,
        IFallout4MajorRecord,
        IAliasVoiceType,
        ILockList,
        INpcSpawn,
        IObjectId,
        IObjectBounded,
        ITranslatedNamed,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<INpcInternal>,
        IFormLinkContainer
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ObjectBounds ObjectBounds { get; set; }
        new NpcConfiguration Configuration { get; set; }
        new ExtendedList<RankPlacement> Factions { get; }
        new FormLinkNullable<ILeveledItemGetter> DeathItem { get; set; }
        new FormLinkNullable<IVoiceTypeGetter> Voice { get; set; }
        new FormLinkNullable<INpcSpawnGetter> Template { get; set; }
        new FormLink<IRaceGetter> Race { get; set; }
        new ExtendedList<IFormLink<IASpellGetter>>? ActorEffect { get; set; }
        new Destructible? Destructible { get; set; }
        new FormLinkNullable<IArmorGetter> WornArmor { get; set; }
        new FormLinkNullable<IArmorGetter> FarAwayModel { get; set; }
        new FormLinkNullable<IRaceGetter> AttackRace { get; set; }
        new ExtendedList<Attack> Attacks { get; }
        new FormLinkNullable<IFormListGetter> SpectatorOverridePackageList { get; set; }
        new FormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList { get; set; }
        new FormLinkNullable<IFormListGetter> GuardWarnOverridePackageList { get; set; }
        new FormLinkNullable<IFormListGetter> CombatOverridePackageList { get; set; }
        new ExtendedList<PerkPlacement>? Perks { get; set; }
        new ExtendedList<ContainerEntry>? Items { get; set; }
        new AIData AIData { get; set; }
        new ExtendedList<IFormLink<IPackageGetter>> Packages { get; }
        new ExtendedList<IFormLink<IKeywordGetter>>? Keywords { get; set; }
        new FormLink<IClassGetter> Class { get; set; }
        new TranslatedString? Name { get; set; }
        new TranslatedString? ShortName { get; set; }
        new PlayerSkills? PlayerSkills { get; set; }
        new ExtendedList<IFormLink<IHeadPartGetter>> HeadParts { get; }
        new FormLinkNullable<IColorRecordGetter> HairColor { get; set; }
        new FormLinkNullable<ICombatStyleGetter> CombatStyle { get; set; }
        new FormLinkNullable<IFormListGetter> GiftFilter { get; set; }
        new UInt16 NAM5 { get; set; }
        new Single Height { get; set; }
        new Single Weight { get; set; }
        new SoundLevel SoundLevel { get; set; }
        new ANpcSoundDefinition? Sound { get; set; }
        new FormLinkNullable<IOutfitGetter> DefaultOutfit { get; set; }
        new FormLinkNullable<IOutfitGetter> SleepingOutfit { get; set; }
        new FormLinkNullable<IFormListGetter> DefaultPackageList { get; set; }
        new FormLinkNullable<IFactionGetter> CrimeFaction { get; set; }
        new FormLinkNullable<ITextureSetGetter> HeadTexture { get; set; }
        new Color? TextureLighting { get; set; }
        new NpcFaceMorph? FaceMorph { get; set; }
        new NpcFaceParts? FaceParts { get; set; }
        new ExtendedList<TintLayer> TintLayers { get; }
        #region Mutagen
        new Npc.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface INpcInternal :
        IFallout4MajorRecordInternal,
        INpc,
        INpcGetter
    {
    }

    public partial interface INpcGetter :
        IFallout4MajorRecordGetter,
        IAliasVoiceTypeGetter,
        ILockListGetter,
        INpcSpawnGetter,
        IObjectIdGetter,
        IObjectBoundedGetter,
        ITranslatedNamedGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<INpcGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Npc_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IObjectBoundsGetter ObjectBounds { get; }
        INpcConfigurationGetter Configuration { get; }
        IReadOnlyList<IRankPlacementGetter> Factions { get; }
        FormLinkNullable<ILeveledItemGetter> DeathItem { get; }
        FormLinkNullable<IVoiceTypeGetter> Voice { get; }
        FormLinkNullable<INpcSpawnGetter> Template { get; }
        FormLink<IRaceGetter> Race { get; }
        IReadOnlyList<IFormLink<IASpellGetter>>? ActorEffect { get; }
        IDestructibleGetter? Destructible { get; }
        FormLinkNullable<IArmorGetter> WornArmor { get; }
        FormLinkNullable<IArmorGetter> FarAwayModel { get; }
        FormLinkNullable<IRaceGetter> AttackRace { get; }
        IReadOnlyList<IAttackGetter> Attacks { get; }
        FormLinkNullable<IFormListGetter> SpectatorOverridePackageList { get; }
        FormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList { get; }
        FormLinkNullable<IFormListGetter> GuardWarnOverridePackageList { get; }
        FormLinkNullable<IFormListGetter> CombatOverridePackageList { get; }
        IReadOnlyList<IPerkPlacementGetter>? Perks { get; }
        IReadOnlyList<IContainerEntryGetter>? Items { get; }
        IAIDataGetter AIData { get; }
        IReadOnlyList<IFormLink<IPackageGetter>> Packages { get; }
        IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; }
        FormLink<IClassGetter> Class { get; }
        ITranslatedStringGetter? Name { get; }
        ITranslatedStringGetter? ShortName { get; }
        IPlayerSkillsGetter? PlayerSkills { get; }
        IReadOnlyList<IFormLink<IHeadPartGetter>> HeadParts { get; }
        FormLinkNullable<IColorRecordGetter> HairColor { get; }
        FormLinkNullable<ICombatStyleGetter> CombatStyle { get; }
        FormLinkNullable<IFormListGetter> GiftFilter { get; }
        UInt16 NAM5 { get; }
        Single Height { get; }
        Single Weight { get; }
        SoundLevel SoundLevel { get; }
        IANpcSoundDefinitionGetter? Sound { get; }
        FormLinkNullable<IOutfitGetter> DefaultOutfit { get; }
        FormLinkNullable<IOutfitGetter> SleepingOutfit { get; }
        FormLinkNullable<IFormListGetter> DefaultPackageList { get; }
        FormLinkNullable<IFactionGetter> CrimeFaction { get; }
        FormLinkNullable<ITextureSetGetter> HeadTexture { get; }
        Color? TextureLighting { get; }
        INpcFaceMorphGetter? FaceMorph { get; }
        INpcFacePartsGetter? FaceParts { get; }
        IReadOnlyList<ITintLayerGetter> TintLayers { get; }

        #region Mutagen
        Npc.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class NpcMixIn
    {
        public static void Clear(this INpcInternal item)
        {
            ((NpcSetterCommon)((INpcGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Npc.Mask<bool> GetEqualsMask(
            this INpcGetter item,
            INpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INpcGetter item,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INpcGetter item,
            FileGeneration fg,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            ((NpcCommon)((INpcGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcGetter item,
            INpcGetter rhs)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this INpcInternal lhs,
            INpcGetter rhs,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcSetterTranslationCommon)((INpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcInternal lhs,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcSetterTranslationCommon)((INpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Npc Duplicate(
            this INpcGetter item,
            FormKey formKey,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcSetterCommon)((INpcGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Npc_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        Configuration = 8,
        Factions = 9,
        DeathItem = 10,
        Voice = 11,
        Template = 12,
        Race = 13,
        ActorEffect = 14,
        Destructible = 15,
        WornArmor = 16,
        FarAwayModel = 17,
        AttackRace = 18,
        Attacks = 19,
        SpectatorOverridePackageList = 20,
        ObserveDeadBodyOverridePackageList = 21,
        GuardWarnOverridePackageList = 22,
        CombatOverridePackageList = 23,
        Perks = 24,
        Items = 25,
        AIData = 26,
        Packages = 27,
        Keywords = 28,
        Class = 29,
        Name = 30,
        ShortName = 31,
        PlayerSkills = 32,
        HeadParts = 33,
        HairColor = 34,
        CombatStyle = 35,
        GiftFilter = 36,
        NAM5 = 37,
        Height = 38,
        Weight = 39,
        SoundLevel = 40,
        Sound = 41,
        DefaultOutfit = 42,
        SleepingOutfit = 43,
        DefaultPackageList = 44,
        CrimeFaction = 45,
        HeadTexture = 46,
        TextureLighting = 47,
        FaceMorph = 48,
        FaceParts = 49,
        TintLayers = 50,
    }
    #endregion

    #region Registration
    public partial class Npc_Registration : ILoquiRegistration
    {
        public static readonly Npc_Registration Instance = new Npc_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 75,
            version: 0);

        public const string GUID = "63c41e9b-1707-48b0-906a-573f3c678370";

        public const ushort AdditionalFieldCount = 45;

        public const ushort FieldCount = 51;

        public static readonly Type MaskType = typeof(Npc.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Npc.ErrorMask);

        public static readonly Type ClassType = typeof(Npc);

        public static readonly Type GetterType = typeof(INpcGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpc);

        public static readonly Type? InternalSetterType = typeof(INpcInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Npc";

        public const string Name = "Npc";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NPC_;
        public static readonly Type BinaryWriteTranslation = typeof(NpcBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class NpcSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly NpcSetterCommon Instance = new NpcSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Configuration.Clear();
            item.Factions.Clear();
            item.DeathItem = FormLinkNullable<ILeveledItemGetter>.Null;
            item.Voice = FormLinkNullable<IVoiceTypeGetter>.Null;
            item.Template = FormLinkNullable<INpcSpawnGetter>.Null;
            item.Race = FormLink<IRaceGetter>.Null;
            item.ActorEffect = null;
            item.Destructible = null;
            item.WornArmor = FormLinkNullable<IArmorGetter>.Null;
            item.FarAwayModel = FormLinkNullable<IArmorGetter>.Null;
            item.AttackRace = FormLinkNullable<IRaceGetter>.Null;
            item.Attacks.Clear();
            item.SpectatorOverridePackageList = FormLinkNullable<IFormListGetter>.Null;
            item.ObserveDeadBodyOverridePackageList = FormLinkNullable<IFormListGetter>.Null;
            item.GuardWarnOverridePackageList = FormLinkNullable<IFormListGetter>.Null;
            item.CombatOverridePackageList = FormLinkNullable<IFormListGetter>.Null;
            item.Perks = null;
            item.Items = null;
            item.AIData.Clear();
            item.Packages.Clear();
            item.Keywords = null;
            item.Class = FormLink<IClassGetter>.Null;
            item.Name = default;
            item.ShortName = default;
            item.PlayerSkills = null;
            item.HeadParts.Clear();
            item.HairColor = FormLinkNullable<IColorRecordGetter>.Null;
            item.CombatStyle = FormLinkNullable<ICombatStyleGetter>.Null;
            item.GiftFilter = FormLinkNullable<IFormListGetter>.Null;
            item.NAM5 = Npc._NAM5_Default;
            item.Height = default;
            item.Weight = default;
            item.SoundLevel = default;
            item.Sound = null;
            item.DefaultOutfit = FormLinkNullable<IOutfitGetter>.Null;
            item.SleepingOutfit = FormLinkNullable<IOutfitGetter>.Null;
            item.DefaultPackageList = FormLinkNullable<IFormListGetter>.Null;
            item.CrimeFaction = FormLinkNullable<IFactionGetter>.Null;
            item.HeadTexture = FormLinkNullable<ITextureSetGetter>.Null;
            item.TextureLighting = default;
            item.FaceMorph = null;
            item.FaceParts = null;
            item.TintLayers.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(INpc obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.DeathItem = obj.DeathItem.Relink(mapping);
            obj.Voice = obj.Voice.Relink(mapping);
            obj.Template = obj.Template.Relink(mapping);
            obj.Race = obj.Race.Relink(mapping);
            obj.ActorEffect?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.WornArmor = obj.WornArmor.Relink(mapping);
            obj.FarAwayModel = obj.FarAwayModel.Relink(mapping);
            obj.AttackRace = obj.AttackRace.Relink(mapping);
            obj.Attacks.RemapLinks(mapping);
            obj.SpectatorOverridePackageList = obj.SpectatorOverridePackageList.Relink(mapping);
            obj.ObserveDeadBodyOverridePackageList = obj.ObserveDeadBodyOverridePackageList.Relink(mapping);
            obj.GuardWarnOverridePackageList = obj.GuardWarnOverridePackageList.Relink(mapping);
            obj.CombatOverridePackageList = obj.CombatOverridePackageList.Relink(mapping);
            obj.Perks?.RemapLinks(mapping);
            obj.Items?.RemapLinks(mapping);
            obj.Packages.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Class = obj.Class.Relink(mapping);
            obj.HeadParts.RemapLinks(mapping);
            obj.HairColor = obj.HairColor.Relink(mapping);
            obj.CombatStyle = obj.CombatStyle.Relink(mapping);
            obj.GiftFilter = obj.GiftFilter.Relink(mapping);
            obj.Sound?.RemapLinks(mapping);
            obj.DefaultOutfit = obj.DefaultOutfit.Relink(mapping);
            obj.SleepingOutfit = obj.SleepingOutfit.Relink(mapping);
            obj.DefaultPackageList = obj.DefaultPackageList.Relink(mapping);
            obj.CrimeFaction = obj.CrimeFaction.Relink(mapping);
            obj.HeadTexture = obj.HeadTexture.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<INpcInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: NpcBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: NpcBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class NpcCommon : Fallout4MajorRecordCommon
    {
        public new static readonly NpcCommon Instance = new NpcCommon();

        public Npc.Mask<bool> GetEqualsMask(
            INpcGetter item,
            INpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Npc.Mask<bool>(false);
            ((NpcCommon)((INpcGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcGetter item,
            INpcGetter rhs,
            Npc.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Configuration = MaskItemExt.Factory(item.Configuration.GetEqualsMask(rhs.Configuration, include), include);
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DeathItem = item.DeathItem.Equals(rhs.DeathItem);
            ret.Voice = item.Voice.Equals(rhs.Voice);
            ret.Template = item.Template.Equals(rhs.Template);
            ret.Race = item.Race.Equals(rhs.Race);
            ret.ActorEffect = item.ActorEffect.CollectionEqualsHelper(
                rhs.ActorEffect,
                (l, r) => object.Equals(l, r),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.WornArmor = item.WornArmor.Equals(rhs.WornArmor);
            ret.FarAwayModel = item.FarAwayModel.Equals(rhs.FarAwayModel);
            ret.AttackRace = item.AttackRace.Equals(rhs.AttackRace);
            ret.Attacks = item.Attacks.CollectionEqualsHelper(
                rhs.Attacks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SpectatorOverridePackageList = item.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList);
            ret.ObserveDeadBodyOverridePackageList = item.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList);
            ret.GuardWarnOverridePackageList = item.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList);
            ret.CombatOverridePackageList = item.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList);
            ret.Perks = item.Perks.CollectionEqualsHelper(
                rhs.Perks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AIData = MaskItemExt.Factory(item.AIData.GetEqualsMask(rhs.AIData, include), include);
            ret.Packages = item.Packages.CollectionEqualsHelper(
                rhs.Packages,
                (l, r) => object.Equals(l, r),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Class = item.Class.Equals(rhs.Class);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.ShortName = object.Equals(item.ShortName, rhs.ShortName);
            ret.PlayerSkills = EqualsMaskHelper.EqualsHelper(
                item.PlayerSkills,
                rhs.PlayerSkills,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.HeadParts = item.HeadParts.CollectionEqualsHelper(
                rhs.HeadParts,
                (l, r) => object.Equals(l, r),
                include);
            ret.HairColor = item.HairColor.Equals(rhs.HairColor);
            ret.CombatStyle = item.CombatStyle.Equals(rhs.CombatStyle);
            ret.GiftFilter = item.GiftFilter.Equals(rhs.GiftFilter);
            ret.NAM5 = item.NAM5 == rhs.NAM5;
            ret.Height = item.Height.EqualsWithin(rhs.Height);
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.SoundLevel = item.SoundLevel == rhs.SoundLevel;
            ret.Sound = EqualsMaskHelper.EqualsHelper(
                item.Sound,
                rhs.Sound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DefaultOutfit = item.DefaultOutfit.Equals(rhs.DefaultOutfit);
            ret.SleepingOutfit = item.SleepingOutfit.Equals(rhs.SleepingOutfit);
            ret.DefaultPackageList = item.DefaultPackageList.Equals(rhs.DefaultPackageList);
            ret.CrimeFaction = item.CrimeFaction.Equals(rhs.CrimeFaction);
            ret.HeadTexture = item.HeadTexture.Equals(rhs.HeadTexture);
            ret.TextureLighting = item.TextureLighting.ColorOnlyEquals(rhs.TextureLighting);
            ret.FaceMorph = EqualsMaskHelper.EqualsHelper(
                item.FaceMorph,
                rhs.FaceMorph,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FaceParts = EqualsMaskHelper.EqualsHelper(
                item.FaceParts,
                rhs.FaceParts,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TintLayers = item.TintLayers.CollectionEqualsHelper(
                rhs.TintLayers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            INpcGetter item,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INpcGetter item,
            FileGeneration fg,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Npc =>");
            }
            else
            {
                fg.AppendLine($"{name} (Npc) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INpcGetter item,
            FileGeneration fg,
            Npc.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if (printMask?.Configuration?.Overall ?? true)
            {
                item.Configuration?.ToString(fg, "Configuration");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                fg.AppendLine("Factions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Factions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DeathItem ?? true)
            {
                fg.AppendItem(item.DeathItem.FormKeyNullable, "DeathItem");
            }
            if (printMask?.Voice ?? true)
            {
                fg.AppendItem(item.Voice.FormKeyNullable, "Voice");
            }
            if (printMask?.Template ?? true)
            {
                fg.AppendItem(item.Template.FormKeyNullable, "Template");
            }
            if (printMask?.Race ?? true)
            {
                fg.AppendItem(item.Race.FormKey, "Race");
            }
            if ((printMask?.ActorEffect?.Overall ?? true)
                && item.ActorEffect.TryGet(out var ActorEffectItem))
            {
                fg.AppendLine("ActorEffect =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ActorEffectItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if (printMask?.WornArmor ?? true)
            {
                fg.AppendItem(item.WornArmor.FormKeyNullable, "WornArmor");
            }
            if (printMask?.FarAwayModel ?? true)
            {
                fg.AppendItem(item.FarAwayModel.FormKeyNullable, "FarAwayModel");
            }
            if (printMask?.AttackRace ?? true)
            {
                fg.AppendItem(item.AttackRace.FormKeyNullable, "AttackRace");
            }
            if (printMask?.Attacks?.Overall ?? true)
            {
                fg.AppendLine("Attacks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Attacks)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.SpectatorOverridePackageList ?? true)
            {
                fg.AppendItem(item.SpectatorOverridePackageList.FormKeyNullable, "SpectatorOverridePackageList");
            }
            if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
            {
                fg.AppendItem(item.ObserveDeadBodyOverridePackageList.FormKeyNullable, "ObserveDeadBodyOverridePackageList");
            }
            if (printMask?.GuardWarnOverridePackageList ?? true)
            {
                fg.AppendItem(item.GuardWarnOverridePackageList.FormKeyNullable, "GuardWarnOverridePackageList");
            }
            if (printMask?.CombatOverridePackageList ?? true)
            {
                fg.AppendItem(item.CombatOverridePackageList.FormKeyNullable, "CombatOverridePackageList");
            }
            if ((printMask?.Perks?.Overall ?? true)
                && item.Perks.TryGet(out var PerksItem))
            {
                fg.AppendLine("Perks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in PerksItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Items?.Overall ?? true)
                && item.Items.TryGet(out var ItemsItem))
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ItemsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.AIData?.Overall ?? true)
            {
                item.AIData?.ToString(fg, "AIData");
            }
            if (printMask?.Packages?.Overall ?? true)
            {
                fg.AppendLine("Packages =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Packages)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Class ?? true)
            {
                fg.AppendItem(item.Class.FormKey, "Class");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.ShortName ?? true)
                && item.ShortName.TryGet(out var ShortNameItem))
            {
                fg.AppendItem(ShortNameItem, "ShortName");
            }
            if ((printMask?.PlayerSkills?.Overall ?? true)
                && item.PlayerSkills.TryGet(out var PlayerSkillsItem))
            {
                PlayerSkillsItem?.ToString(fg, "PlayerSkills");
            }
            if (printMask?.HeadParts?.Overall ?? true)
            {
                fg.AppendLine("HeadParts =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.HeadParts)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.HairColor ?? true)
            {
                fg.AppendItem(item.HairColor.FormKeyNullable, "HairColor");
            }
            if (printMask?.CombatStyle ?? true)
            {
                fg.AppendItem(item.CombatStyle.FormKeyNullable, "CombatStyle");
            }
            if (printMask?.GiftFilter ?? true)
            {
                fg.AppendItem(item.GiftFilter.FormKeyNullable, "GiftFilter");
            }
            if (printMask?.NAM5 ?? true)
            {
                fg.AppendItem(item.NAM5, "NAM5");
            }
            if (printMask?.Height ?? true)
            {
                fg.AppendItem(item.Height, "Height");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.SoundLevel ?? true)
            {
                fg.AppendItem(item.SoundLevel, "SoundLevel");
            }
            if ((printMask?.Sound?.Overall ?? true)
                && item.Sound.TryGet(out var SoundItem))
            {
                SoundItem?.ToString(fg, "Sound");
            }
            if (printMask?.DefaultOutfit ?? true)
            {
                fg.AppendItem(item.DefaultOutfit.FormKeyNullable, "DefaultOutfit");
            }
            if (printMask?.SleepingOutfit ?? true)
            {
                fg.AppendItem(item.SleepingOutfit.FormKeyNullable, "SleepingOutfit");
            }
            if (printMask?.DefaultPackageList ?? true)
            {
                fg.AppendItem(item.DefaultPackageList.FormKeyNullable, "DefaultPackageList");
            }
            if (printMask?.CrimeFaction ?? true)
            {
                fg.AppendItem(item.CrimeFaction.FormKeyNullable, "CrimeFaction");
            }
            if (printMask?.HeadTexture ?? true)
            {
                fg.AppendItem(item.HeadTexture.FormKeyNullable, "HeadTexture");
            }
            if ((printMask?.TextureLighting ?? true)
                && item.TextureLighting.TryGet(out var TextureLightingItem))
            {
                fg.AppendItem(TextureLightingItem, "TextureLighting");
            }
            if ((printMask?.FaceMorph?.Overall ?? true)
                && item.FaceMorph.TryGet(out var FaceMorphItem))
            {
                FaceMorphItem?.ToString(fg, "FaceMorph");
            }
            if ((printMask?.FaceParts?.Overall ?? true)
                && item.FaceParts.TryGet(out var FacePartsItem))
            {
                FacePartsItem?.ToString(fg, "FaceParts");
            }
            if (printMask?.TintLayers?.Overall ?? true)
            {
                fg.AppendLine("TintLayers =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.TintLayers)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static Npc_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Npc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Npc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Npc_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcGetter? lhs,
            INpcGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Configuration, rhs.Configuration)) return false;
            if (!lhs.Factions.SequenceEqualNullable(rhs.Factions)) return false;
            if (!lhs.DeathItem.Equals(rhs.DeathItem)) return false;
            if (!lhs.Voice.Equals(rhs.Voice)) return false;
            if (!lhs.Template.Equals(rhs.Template)) return false;
            if (!lhs.Race.Equals(rhs.Race)) return false;
            if (!lhs.ActorEffect.SequenceEqualNullable(rhs.ActorEffect)) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (!lhs.WornArmor.Equals(rhs.WornArmor)) return false;
            if (!lhs.FarAwayModel.Equals(rhs.FarAwayModel)) return false;
            if (!lhs.AttackRace.Equals(rhs.AttackRace)) return false;
            if (!lhs.Attacks.SequenceEqualNullable(rhs.Attacks)) return false;
            if (!lhs.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList)) return false;
            if (!lhs.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList)) return false;
            if (!lhs.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList)) return false;
            if (!lhs.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList)) return false;
            if (!lhs.Perks.SequenceEqualNullable(rhs.Perks)) return false;
            if (!lhs.Items.SequenceEqualNullable(rhs.Items)) return false;
            if (!object.Equals(lhs.AIData, rhs.AIData)) return false;
            if (!lhs.Packages.SequenceEqualNullable(rhs.Packages)) return false;
            if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            if (!lhs.Class.Equals(rhs.Class)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.ShortName, rhs.ShortName)) return false;
            if (!object.Equals(lhs.PlayerSkills, rhs.PlayerSkills)) return false;
            if (!lhs.HeadParts.SequenceEqualNullable(rhs.HeadParts)) return false;
            if (!lhs.HairColor.Equals(rhs.HairColor)) return false;
            if (!lhs.CombatStyle.Equals(rhs.CombatStyle)) return false;
            if (!lhs.GiftFilter.Equals(rhs.GiftFilter)) return false;
            if (lhs.NAM5 != rhs.NAM5) return false;
            if (!lhs.Height.EqualsWithin(rhs.Height)) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (lhs.SoundLevel != rhs.SoundLevel) return false;
            if (!object.Equals(lhs.Sound, rhs.Sound)) return false;
            if (!lhs.DefaultOutfit.Equals(rhs.DefaultOutfit)) return false;
            if (!lhs.SleepingOutfit.Equals(rhs.SleepingOutfit)) return false;
            if (!lhs.DefaultPackageList.Equals(rhs.DefaultPackageList)) return false;
            if (!lhs.CrimeFaction.Equals(rhs.CrimeFaction)) return false;
            if (!lhs.HeadTexture.Equals(rhs.HeadTexture)) return false;
            if (!lhs.TextureLighting.ColorOnlyEquals(rhs.TextureLighting)) return false;
            if (!object.Equals(lhs.FaceMorph, rhs.FaceMorph)) return false;
            if (!object.Equals(lhs.FaceParts, rhs.FaceParts)) return false;
            if (!lhs.TintLayers.SequenceEqualNullable(rhs.TintLayers)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter);
        }
        
        public virtual int GetHashCode(INpcGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            hash.Add(item.Configuration);
            hash.Add(item.Factions);
            hash.Add(item.DeathItem);
            hash.Add(item.Voice);
            hash.Add(item.Template);
            hash.Add(item.Race);
            hash.Add(item.ActorEffect);
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.WornArmor);
            hash.Add(item.FarAwayModel);
            hash.Add(item.AttackRace);
            hash.Add(item.Attacks);
            hash.Add(item.SpectatorOverridePackageList);
            hash.Add(item.ObserveDeadBodyOverridePackageList);
            hash.Add(item.GuardWarnOverridePackageList);
            hash.Add(item.CombatOverridePackageList);
            hash.Add(item.Perks);
            hash.Add(item.Items);
            hash.Add(item.AIData);
            hash.Add(item.Packages);
            hash.Add(item.Keywords);
            hash.Add(item.Class);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.ShortName.TryGet(out var ShortNameitem))
            {
                hash.Add(ShortNameitem);
            }
            if (item.PlayerSkills.TryGet(out var PlayerSkillsitem))
            {
                hash.Add(PlayerSkillsitem);
            }
            hash.Add(item.HeadParts);
            hash.Add(item.HairColor);
            hash.Add(item.CombatStyle);
            hash.Add(item.GiftFilter);
            hash.Add(item.NAM5);
            hash.Add(item.Height);
            hash.Add(item.Weight);
            hash.Add(item.SoundLevel);
            if (item.Sound.TryGet(out var Sounditem))
            {
                hash.Add(Sounditem);
            }
            hash.Add(item.DefaultOutfit);
            hash.Add(item.SleepingOutfit);
            hash.Add(item.DefaultPackageList);
            hash.Add(item.CrimeFaction);
            hash.Add(item.HeadTexture);
            if (item.TextureLighting.TryGet(out var TextureLightingitem))
            {
                hash.Add(TextureLightingitem);
            }
            if (item.FaceMorph.TryGet(out var FaceMorphitem))
            {
                hash.Add(FaceMorphitem);
            }
            if (item.FaceParts.TryGet(out var FacePartsitem))
            {
                hash.Add(FacePartsitem);
            }
            hash.Add(item.TintLayers);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Npc.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(INpcGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Factions.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.DeathItem.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.DeathItem);
            }
            if (obj.Voice.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Voice);
            }
            if (obj.Template.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Template);
            }
            yield return FormLinkInformation.Factory(obj.Race);
            if (obj.ActorEffect.TryGet(out var ActorEffectItem))
            {
                foreach (var item in ActorEffectItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.WornArmor.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.WornArmor);
            }
            if (obj.FarAwayModel.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.FarAwayModel);
            }
            if (obj.AttackRace.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.AttackRace);
            }
            foreach (var item in obj.Attacks.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.SpectatorOverridePackageList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.SpectatorOverridePackageList);
            }
            if (obj.ObserveDeadBodyOverridePackageList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.ObserveDeadBodyOverridePackageList);
            }
            if (obj.GuardWarnOverridePackageList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.GuardWarnOverridePackageList);
            }
            if (obj.CombatOverridePackageList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.CombatOverridePackageList);
            }
            if (obj.Perks.TryGet(out var PerksItem))
            {
                foreach (var item in PerksItem.SelectMany(f => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Items.TryGet(out var ItemsItem))
            {
                foreach (var item in ItemsItem.WhereCastable<IContainerEntryGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.ContainedFormLinks))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Packages)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield return FormLinkInformation.Factory(obj.Class);
            foreach (var item in obj.HeadParts)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.HairColor.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.HairColor);
            }
            if (obj.CombatStyle.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.CombatStyle);
            }
            if (obj.GiftFilter.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.GiftFilter);
            }
            if (obj.Sound is IFormLinkContainerGetter SoundlinkCont)
            {
                foreach (var item in SoundlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.DefaultOutfit.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.DefaultOutfit);
            }
            if (obj.SleepingOutfit.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.SleepingOutfit);
            }
            if (obj.DefaultPackageList.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.DefaultPackageList);
            }
            if (obj.CrimeFaction.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.CrimeFaction);
            }
            if (obj.HeadTexture.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.HeadTexture);
            }
            yield break;
        }
        
        #region Duplicate
        public Npc Duplicate(
            INpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Npc(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INpc)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INpc)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class NpcSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly NpcSetterTranslationCommon Instance = new NpcSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcInternal item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            INpc item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Npc_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Configuration) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Configuration);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Configuration) ?? true))
                    {
                        item.Configuration = rhs.Configuration.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Npc_FieldIndex.Configuration),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Factions);
                try
                {
                    item.Factions.SetTo(
                        rhs.Factions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DeathItem) ?? true))
            {
                item.DeathItem = new FormLinkNullable<ILeveledItemGetter>(rhs.DeathItem.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Voice) ?? true))
            {
                item.Voice = new FormLinkNullable<IVoiceTypeGetter>(rhs.Voice.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Template) ?? true))
            {
                item.Template = new FormLinkNullable<INpcSpawnGetter>(rhs.Template.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Race) ?? true))
            {
                item.Race = new FormLink<IRaceGetter>(rhs.Race.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ActorEffect) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.ActorEffect);
                try
                {
                    if ((rhs.ActorEffect != null))
                    {
                        item.ActorEffect = 
                            rhs.ActorEffect
                            .Select(r => (IFormLink<IASpellGetter>)new FormLink<IASpellGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<IASpellGetter>>();
                    }
                    else
                    {
                        item.ActorEffect = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.WornArmor) ?? true))
            {
                item.WornArmor = new FormLinkNullable<IArmorGetter>(rhs.WornArmor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FarAwayModel) ?? true))
            {
                item.FarAwayModel = new FormLinkNullable<IArmorGetter>(rhs.FarAwayModel.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AttackRace) ?? true))
            {
                item.AttackRace = new FormLinkNullable<IRaceGetter>(rhs.AttackRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Attacks) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Attacks);
                try
                {
                    item.Attacks.SetTo(
                        rhs.Attacks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.SpectatorOverridePackageList) ?? true))
            {
                item.SpectatorOverridePackageList = new FormLinkNullable<IFormListGetter>(rhs.SpectatorOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ObserveDeadBodyOverridePackageList) ?? true))
            {
                item.ObserveDeadBodyOverridePackageList = new FormLinkNullable<IFormListGetter>(rhs.ObserveDeadBodyOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.GuardWarnOverridePackageList) ?? true))
            {
                item.GuardWarnOverridePackageList = new FormLinkNullable<IFormListGetter>(rhs.GuardWarnOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatOverridePackageList) ?? true))
            {
                item.CombatOverridePackageList = new FormLinkNullable<IFormListGetter>(rhs.CombatOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Perks) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Perks);
                try
                {
                    if ((rhs.Perks != null))
                    {
                        item.Perks = 
                            rhs.Perks
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<PerkPlacement>();
                    }
                    else
                    {
                        item.Perks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Items);
                try
                {
                    if ((rhs.Items != null))
                    {
                        item.Items = 
                            rhs.Items
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ContainerEntry>();
                    }
                    else
                    {
                        item.Items = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AIData) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.AIData);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AIData) ?? true))
                    {
                        item.AIData = rhs.AIData.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Npc_FieldIndex.AIData),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Packages) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Packages);
                try
                {
                    item.Packages.SetTo(
                        rhs.Packages
                        .Select(r => (IFormLink<IPackageGetter>)new FormLink<IPackageGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<IKeywordGetter>)new FormLink<IKeywordGetter>(r.FormKey))
                            .ToExtendedList<IFormLink<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Class) ?? true))
            {
                item.Class = new FormLink<IClassGetter>(rhs.Class.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ShortName) ?? true))
            {
                item.ShortName = rhs.ShortName?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.PlayerSkills) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.PlayerSkills);
                try
                {
                    if(rhs.PlayerSkills.TryGet(out var rhsPlayerSkills))
                    {
                        item.PlayerSkills = rhsPlayerSkills.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.PlayerSkills));
                    }
                    else
                    {
                        item.PlayerSkills = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.SetTo(
                        rhs.HeadParts
                        .Select(r => (IFormLink<IHeadPartGetter>)new FormLink<IHeadPartGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HairColor) ?? true))
            {
                item.HairColor = new FormLinkNullable<IColorRecordGetter>(rhs.HairColor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatStyle) ?? true))
            {
                item.CombatStyle = new FormLinkNullable<ICombatStyleGetter>(rhs.CombatStyle.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.GiftFilter) ?? true))
            {
                item.GiftFilter = new FormLinkNullable<IFormListGetter>(rhs.GiftFilter.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.NAM5) ?? true))
            {
                item.NAM5 = rhs.NAM5;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Height) ?? true))
            {
                item.Height = rhs.Height;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.SoundLevel) ?? true))
            {
                item.SoundLevel = rhs.SoundLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Sound) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Sound);
                try
                {
                    if(rhs.Sound.TryGet(out var rhsSound))
                    {
                        item.Sound = rhsSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Sound));
                    }
                    else
                    {
                        item.Sound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultOutfit) ?? true))
            {
                item.DefaultOutfit = new FormLinkNullable<IOutfitGetter>(rhs.DefaultOutfit.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.SleepingOutfit) ?? true))
            {
                item.SleepingOutfit = new FormLinkNullable<IOutfitGetter>(rhs.SleepingOutfit.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultPackageList) ?? true))
            {
                item.DefaultPackageList = new FormLinkNullable<IFormListGetter>(rhs.DefaultPackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CrimeFaction) ?? true))
            {
                item.CrimeFaction = new FormLinkNullable<IFactionGetter>(rhs.CrimeFaction.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HeadTexture) ?? true))
            {
                item.HeadTexture = new FormLinkNullable<ITextureSetGetter>(rhs.HeadTexture.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.TextureLighting) ?? true))
            {
                item.TextureLighting = rhs.TextureLighting;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceMorph) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.FaceMorph);
                try
                {
                    if(rhs.FaceMorph.TryGet(out var rhsFaceMorph))
                    {
                        item.FaceMorph = rhsFaceMorph.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.FaceMorph));
                    }
                    else
                    {
                        item.FaceMorph = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceParts) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.FaceParts);
                try
                {
                    if(rhs.FaceParts.TryGet(out var rhsFaceParts))
                    {
                        item.FaceParts = rhsFaceParts.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.FaceParts));
                    }
                    else
                    {
                        item.FaceParts = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.TintLayers) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.TintLayers);
                try
                {
                    item.TintLayers.SetTo(
                        rhs.TintLayers
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Npc DeepCopy(
            INpcGetter item,
            Npc.TranslationMask? copyMask = null)
        {
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Npc DeepCopy(
            INpcGetter item,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Npc DeepCopy(
            INpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Npc
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Npc_Registration.Instance;
        public new static Npc_Registration Registration => Npc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NpcSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NpcBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static NpcBinaryWriteTranslation Instance = new NpcBinaryWriteTranslation();

        static partial void WriteBinaryDataMarkerCustom(
            MutagenWriter writer,
            INpcGetter item);

        public static void WriteBinaryDataMarker(
            MutagenWriter writer,
            INpcGetter item)
        {
            WriteBinaryDataMarkerCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            INpcGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ConfigurationItem = item.Configuration;
            ((NpcConfigurationBinaryWriteTranslation)((IBinaryItem)ConfigurationItem).BinaryWriteTranslator).Write(
                item: ConfigurationItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRankPlacementGetter>.Instance.Write(
                writer: writer,
                items: item.Factions,
                transl: (MutagenWriter subWriter, IRankPlacementGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((RankPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DeathItem,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.INAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Voice,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.VTCK));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Template,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TPLT));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Race,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.RNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IASpellGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.ActorEffect,
                counterType: RecordTypes.SPCT,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.SPLO),
                subRecordPerItem: true,
                transl: (MutagenWriter subWriter, IFormLink<IASpellGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WornArmor,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.WNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FarAwayModel,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackRace,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ATKR));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IAttackGetter>.Instance.Write(
                writer: writer,
                items: item.Attacks,
                transl: (MutagenWriter subWriter, IAttackGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((AttackBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpectatorOverridePackageList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SPOR));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObserveDeadBodyOverridePackageList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.OCOR));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GuardWarnOverridePackageList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.GWOR));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatOverridePackageList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ECOR));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IPerkPlacementGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Perks,
                counterType: RecordTypes.PRKZ,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IPerkPlacementGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((PerkPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IContainerEntryGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Items,
                counterType: RecordTypes.COCT,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IContainerEntryGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((ContainerEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            var AIDataItem = item.AIData;
            ((AIDataBinaryWriteTranslation)((IBinaryItem)AIDataItem).BinaryWriteTranslator).Write(
                item: AIDataItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.Packages,
                transl: (MutagenWriter subWriter, IFormLink<IPackageGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.PKID));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLink<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Class,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ShortName,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SHRT),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            NpcBinaryWriteTranslation.WriteBinaryDataMarker(
                writer: writer,
                item: item);
            if (item.PlayerSkills.TryGet(out var PlayerSkillsItem))
            {
                ((PlayerSkillsBinaryWriteTranslation)((IBinaryItem)PlayerSkillsItem).BinaryWriteTranslator).Write(
                    item: PlayerSkillsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IHeadPartGetter>>.Instance.Write(
                writer: writer,
                items: item.HeadParts,
                transl: (MutagenWriter subWriter, IFormLink<IHeadPartGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.PNAM));
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HairColor,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.HCLF));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatStyle,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ZNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GiftFilter,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.GNAM));
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NAM5,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM5));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Height,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM6));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Weight,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM7));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoundLevel>.Instance.Write(
                writer,
                item.SoundLevel,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM8));
            if (item.Sound.TryGet(out var SoundItem))
            {
                ((ANpcSoundDefinitionBinaryWriteTranslation)((IBinaryItem)SoundItem).BinaryWriteTranslator).Write(
                    item: SoundItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultOutfit,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DOFT));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SleepingOutfit,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.SOFT));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultPackageList,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DPLT));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CrimeFaction,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CRIF));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HeadTexture,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FTST));
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureLighting,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.QNAM),
                binaryType: ColorBinaryType.NoAlphaFloat);
            if (item.FaceMorph.TryGet(out var FaceMorphItem))
            {
                ((NpcFaceMorphBinaryWriteTranslation)((IBinaryItem)FaceMorphItem).BinaryWriteTranslator).Write(
                    item: FaceMorphItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.FaceParts.TryGet(out var FacePartsItem))
            {
                ((NpcFacePartsBinaryWriteTranslation)((IBinaryItem)FacePartsItem).BinaryWriteTranslator).Write(
                    item: FacePartsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ITintLayerGetter>.Instance.Write(
                writer: writer,
                items: item.TintLayers,
                transl: (MutagenWriter subWriter, ITintLayerGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((TintLayerBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            INpcGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.NPC_),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class NpcBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static NpcBinaryCreateTranslation Instance = new NpcBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.NPC_;
        public static void FillBinaryStructs(
            INpcInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            INpcInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ACBS:
                {
                    item.Configuration = Mutagen.Bethesda.Fallout4.NpcConfiguration.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.Configuration;
                }
                case RecordTypeInts.SNAM:
                {
                    item.Factions.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.SNAM,
                            recordTypeConverter: recordTypeConverter,
                            transl: RankPlacement.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.Factions;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DeathItem = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.DeathItem;
                }
                case RecordTypeInts.VTCK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Voice = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.Voice;
                }
                case RecordTypeInts.TPLT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Template = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.Template;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Race = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.Race;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    item.ActorEffect = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IASpellGetter>>.Instance.ParsePerItem(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: recordTypeConverter.ConvertToCustom(RecordTypes.SPCT),
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.SPLO),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<IASpellGetter>>();
                    return (int)Npc_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Fallout4.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Npc_FieldIndex.Destructible;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WornArmor = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.WornArmor;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FarAwayModel = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.FarAwayModel;
                }
                case RecordTypeInts.ATKR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackRace = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.AttackRace;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                {
                    item.Attacks.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Attack>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Attack_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: Attack.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.Attacks;
                }
                case RecordTypeInts.SPOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpectatorOverridePackageList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObserveDeadBodyOverridePackageList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GuardWarnOverridePackageList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatOverridePackageList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.PRKR:
                case RecordTypeInts.PRKZ:
                {
                    item.Perks = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<PerkPlacement>.Instance.ParsePerItem(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.PRKZ,
                            triggeringRecord: RecordTypes.PRKR,
                            recordTypeConverter: recordTypeConverter,
                            transl: PerkPlacement.TryCreateFromBinary)
                        .CastExtendedList<PerkPlacement>();
                    return (int)Npc_FieldIndex.Perks;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    item.Items = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ContainerEntry>.Instance.ParsePerItem(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.COCT,
                            triggeringRecord: RecordTypes.CNTO,
                            recordTypeConverter: recordTypeConverter,
                            transl: ContainerEntry.TryCreateFromBinary)
                        .CastExtendedList<ContainerEntry>();
                    return (int)Npc_FieldIndex.Items;
                }
                case RecordTypeInts.AIDT:
                {
                    item.AIData = Mutagen.Bethesda.Fallout4.AIData.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.AIData;
                }
                case RecordTypeInts.PKID:
                {
                    item.Packages.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IPackageGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.PKID),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Npc_FieldIndex.Packages;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IKeywordGetter>>.Instance.Parse(
                            frame: frame,
                            countLengthLength: 4,
                            countRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLink<IKeywordGetter>>();
                    return (int)Npc_FieldIndex.Keywords;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Class = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.Class;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Npc_FieldIndex.Name;
                }
                case RecordTypeInts.SHRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ShortName = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Npc_FieldIndex.ShortName;
                }
                case RecordTypeInts.DATA:
                {
                    NpcBinaryCreateTranslation.FillBinaryDataMarkerCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                case RecordTypeInts.DNAM:
                {
                    item.PlayerSkills = Mutagen.Bethesda.Fallout4.PlayerSkills.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.PlayerSkills;
                }
                case RecordTypeInts.PNAM:
                {
                    item.HeadParts.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IHeadPartGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.PNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Npc_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HCLF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HairColor = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.HairColor;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatStyle = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GiftFilter = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.GiftFilter;
                }
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM5 = frame.ReadUInt16();
                    return (int)Npc_FieldIndex.NAM5;
                }
                case RecordTypeInts.NAM6:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Height = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.Height;
                }
                case RecordTypeInts.NAM7:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.Weight;
                }
                case RecordTypeInts.NAM8:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SoundLevel = EnumBinaryTranslation<SoundLevel>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.SoundLevel;
                }
                case RecordTypeInts.CSCR:
                {
                    item.Sound = Mutagen.Bethesda.Fallout4.NpcInheritSound.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Npc_FieldIndex.Sound;
                }
                case RecordTypeInts.CSDT:
                case RecordTypeInts.CSDI:
                case RecordTypeInts.CSDC:
                {
                    item.Sound = Mutagen.Bethesda.Fallout4.NpcSoundTypes.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Npc_FieldIndex.Sound;
                }
                case RecordTypeInts.DOFT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultOutfit = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.DefaultOutfit;
                }
                case RecordTypeInts.SOFT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SleepingOutfit = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.SleepingOutfit;
                }
                case RecordTypeInts.DPLT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultPackageList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.DefaultPackageList;
                }
                case RecordTypeInts.CRIF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CrimeFaction = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.CrimeFaction;
                }
                case RecordTypeInts.FTST:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeadTexture = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Npc_FieldIndex.HeadTexture;
                }
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureLighting = frame.ReadColor(ColorBinaryType.NoAlphaFloat);
                    return (int)Npc_FieldIndex.TextureLighting;
                }
                case RecordTypeInts.NAM9:
                {
                    item.FaceMorph = Mutagen.Bethesda.Fallout4.NpcFaceMorph.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.FaceMorph;
                }
                case RecordTypeInts.NAMA:
                {
                    item.FaceParts = Mutagen.Bethesda.Fallout4.NpcFaceParts.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.FaceParts;
                }
                case RecordTypeInts.TINI:
                case RecordTypeInts.TINC:
                case RecordTypeInts.TINV:
                case RecordTypeInts.TIAS:
                {
                    item.TintLayers.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<TintLayer>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: TintLayer_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: TintLayer.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.TintLayers;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryDataMarkerCustom(
            MutagenFrame frame,
            INpcInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NpcBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class NpcBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        INpcGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Npc_Registration.Instance;
        public new static Npc_Registration Registration => Npc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => NpcCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Npc.MajorFlag MajorFlags => (Npc.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new OverlayStream(_data.Slice(_ObjectBoundsLocation!.Value.Min), _package), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Configuration
        private RangeInt32? _ConfigurationLocation;
        private INpcConfigurationGetter? _Configuration => _ConfigurationLocation.HasValue ? NpcConfigurationBinaryOverlay.NpcConfigurationFactory(new OverlayStream(_data.Slice(_ConfigurationLocation!.Value.Min), _package), _package) : default;
        public INpcConfigurationGetter Configuration => _Configuration ?? new NpcConfiguration();
        #endregion
        public IReadOnlyList<IRankPlacementGetter> Factions { get; private set; } = ListExt.Empty<RankPlacementBinaryOverlay>();
        #region DeathItem
        private int? _DeathItemLocation;
        public FormLinkNullable<ILeveledItemGetter> DeathItem => _DeathItemLocation.HasValue ? new FormLinkNullable<ILeveledItemGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _DeathItemLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ILeveledItemGetter>.Null;
        #endregion
        #region Voice
        private int? _VoiceLocation;
        public FormLinkNullable<IVoiceTypeGetter> Voice => _VoiceLocation.HasValue ? new FormLinkNullable<IVoiceTypeGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _VoiceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IVoiceTypeGetter>.Null;
        #endregion
        #region Template
        private int? _TemplateLocation;
        public FormLinkNullable<INpcSpawnGetter> Template => _TemplateLocation.HasValue ? new FormLinkNullable<INpcSpawnGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _TemplateLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<INpcSpawnGetter>.Null;
        #endregion
        #region Race
        private int? _RaceLocation;
        public FormLink<IRaceGetter> Race => _RaceLocation.HasValue ? new FormLink<IRaceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _RaceLocation.Value, _package.MetaData.Constants)))) : FormLink<IRaceGetter>.Null;
        #endregion
        public IReadOnlyList<IFormLink<IASpellGetter>>? ActorEffect { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region WornArmor
        private int? _WornArmorLocation;
        public FormLinkNullable<IArmorGetter> WornArmor => _WornArmorLocation.HasValue ? new FormLinkNullable<IArmorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _WornArmorLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IArmorGetter>.Null;
        #endregion
        #region FarAwayModel
        private int? _FarAwayModelLocation;
        public FormLinkNullable<IArmorGetter> FarAwayModel => _FarAwayModelLocation.HasValue ? new FormLinkNullable<IArmorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FarAwayModelLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IArmorGetter>.Null;
        #endregion
        #region AttackRace
        private int? _AttackRaceLocation;
        public FormLinkNullable<IRaceGetter> AttackRace => _AttackRaceLocation.HasValue ? new FormLinkNullable<IRaceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _AttackRaceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IRaceGetter>.Null;
        #endregion
        public IReadOnlyList<IAttackGetter> Attacks { get; private set; } = ListExt.Empty<AttackBinaryOverlay>();
        #region SpectatorOverridePackageList
        private int? _SpectatorOverridePackageListLocation;
        public FormLinkNullable<IFormListGetter> SpectatorOverridePackageList => _SpectatorOverridePackageListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SpectatorOverridePackageListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region ObserveDeadBodyOverridePackageList
        private int? _ObserveDeadBodyOverridePackageListLocation;
        public FormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList => _ObserveDeadBodyOverridePackageListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ObserveDeadBodyOverridePackageListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region GuardWarnOverridePackageList
        private int? _GuardWarnOverridePackageListLocation;
        public FormLinkNullable<IFormListGetter> GuardWarnOverridePackageList => _GuardWarnOverridePackageListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _GuardWarnOverridePackageListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region CombatOverridePackageList
        private int? _CombatOverridePackageListLocation;
        public FormLinkNullable<IFormListGetter> CombatOverridePackageList => _CombatOverridePackageListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CombatOverridePackageListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        public IReadOnlyList<IPerkPlacementGetter>? Perks { get; private set; }
        public IReadOnlyList<IContainerEntryGetter>? Items { get; private set; }
        #region AIData
        private RangeInt32? _AIDataLocation;
        private IAIDataGetter? _AIData => _AIDataLocation.HasValue ? AIDataBinaryOverlay.AIDataFactory(new OverlayStream(_data.Slice(_AIDataLocation!.Value.Min), _package), _package) : default;
        public IAIDataGetter AIData => _AIData ?? new AIData();
        #endregion
        public IReadOnlyList<IFormLink<IPackageGetter>> Packages { get; private set; } = ListExt.Empty<IFormLink<IPackageGetter>>();
        #region Keywords
        public IReadOnlyList<IFormLink<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLink<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region Class
        private int? _ClassLocation;
        public FormLink<IClassGetter> Class => _ClassLocation.HasValue ? new FormLink<IClassGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _ClassLocation.Value, _package.MetaData.Constants)))) : FormLink<IClassGetter>.Null;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region ShortName
        private int? _ShortNameLocation;
        public ITranslatedStringGetter? ShortName => _ShortNameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _ShortNameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region DataMarker
        partial void DataMarkerCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region PlayerSkills
        private RangeInt32? _PlayerSkillsLocation;
        public IPlayerSkillsGetter? PlayerSkills => _PlayerSkillsLocation.HasValue ? PlayerSkillsBinaryOverlay.PlayerSkillsFactory(new OverlayStream(_data.Slice(_PlayerSkillsLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IReadOnlyList<IFormLink<IHeadPartGetter>> HeadParts { get; private set; } = ListExt.Empty<IFormLink<IHeadPartGetter>>();
        #region HairColor
        private int? _HairColorLocation;
        public FormLinkNullable<IColorRecordGetter> HairColor => _HairColorLocation.HasValue ? new FormLinkNullable<IColorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _HairColorLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IColorRecordGetter>.Null;
        #endregion
        #region CombatStyle
        private int? _CombatStyleLocation;
        public FormLinkNullable<ICombatStyleGetter> CombatStyle => _CombatStyleLocation.HasValue ? new FormLinkNullable<ICombatStyleGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CombatStyleLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ICombatStyleGetter>.Null;
        #endregion
        #region GiftFilter
        private int? _GiftFilterLocation;
        public FormLinkNullable<IFormListGetter> GiftFilter => _GiftFilterLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _GiftFilterLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region NAM5
        private int? _NAM5Location;
        public UInt16 NAM5 => _NAM5Location.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _NAM5Location.Value, _package.MetaData.Constants)) : default;
        #endregion
        #region Height
        private int? _HeightLocation;
        public Single Height => _HeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _HeightLocation.Value, _package.MetaData.Constants).Float() : default;
        #endregion
        #region Weight
        private int? _WeightLocation;
        public Single Weight => _WeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _WeightLocation.Value, _package.MetaData.Constants).Float() : default;
        #endregion
        #region SoundLevel
        private int? _SoundLevelLocation;
        public SoundLevel SoundLevel => _SoundLevelLocation.HasValue ? (SoundLevel)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SoundLevelLocation!.Value, _package.MetaData.Constants)) : default(SoundLevel);
        #endregion
        public IANpcSoundDefinitionGetter? Sound { get; private set; }
        #region DefaultOutfit
        private int? _DefaultOutfitLocation;
        public FormLinkNullable<IOutfitGetter> DefaultOutfit => _DefaultOutfitLocation.HasValue ? new FormLinkNullable<IOutfitGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _DefaultOutfitLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IOutfitGetter>.Null;
        #endregion
        #region SleepingOutfit
        private int? _SleepingOutfitLocation;
        public FormLinkNullable<IOutfitGetter> SleepingOutfit => _SleepingOutfitLocation.HasValue ? new FormLinkNullable<IOutfitGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SleepingOutfitLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IOutfitGetter>.Null;
        #endregion
        #region DefaultPackageList
        private int? _DefaultPackageListLocation;
        public FormLinkNullable<IFormListGetter> DefaultPackageList => _DefaultPackageListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _DefaultPackageListLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region CrimeFaction
        private int? _CrimeFactionLocation;
        public FormLinkNullable<IFactionGetter> CrimeFaction => _CrimeFactionLocation.HasValue ? new FormLinkNullable<IFactionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CrimeFactionLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IFactionGetter>.Null;
        #endregion
        #region HeadTexture
        private int? _HeadTextureLocation;
        public FormLinkNullable<ITextureSetGetter> HeadTexture => _HeadTextureLocation.HasValue ? new FormLinkNullable<ITextureSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _HeadTextureLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ITextureSetGetter>.Null;
        #endregion
        #region TextureLighting
        private int? _TextureLightingLocation;
        public Color? TextureLighting => _TextureLightingLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _TextureLightingLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.NoAlphaFloat) : default(Color?);
        #endregion
        #region FaceMorph
        private RangeInt32? _FaceMorphLocation;
        public INpcFaceMorphGetter? FaceMorph => _FaceMorphLocation.HasValue ? NpcFaceMorphBinaryOverlay.NpcFaceMorphFactory(new OverlayStream(_data.Slice(_FaceMorphLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region FaceParts
        private RangeInt32? _FacePartsLocation;
        public INpcFacePartsGetter? FaceParts => _FacePartsLocation.HasValue ? NpcFacePartsBinaryOverlay.NpcFacePartsFactory(new OverlayStream(_data.Slice(_FacePartsLocation!.Value.Min), _package), _package) : default;
        #endregion
        public IReadOnlyList<ITintLayerGetter> TintLayers { get; private set; } = ListExt.Empty<TintLayerBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static NpcBinaryOverlay NpcFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new NpcBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static NpcBinaryOverlay NpcFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return NpcFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Npc_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Npc_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ACBS:
                {
                    _ConfigurationLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Npc_FieldIndex.Configuration;
                }
                case RecordTypeInts.SNAM:
                {
                    this.Factions = BinaryOverlayList.FactoryByArray<RankPlacementBinaryOverlay>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => RankPlacementBinaryOverlay.RankPlacementFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Npc_FieldIndex.Factions;
                }
                case RecordTypeInts.INAM:
                {
                    _DeathItemLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.DeathItem;
                }
                case RecordTypeInts.VTCK:
                {
                    _VoiceLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Voice;
                }
                case RecordTypeInts.TPLT:
                {
                    _TemplateLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Template;
                }
                case RecordTypeInts.RNAM:
                {
                    _RaceLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Race;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    this.ActorEffect = BinaryOverlayList.FactoryByCountPerItem<IFormLink<IASpellGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.SPCT,
                        subrecordType: RecordTypes.SPLO,
                        getter: (s, p) => new FormLink<IASpellGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Npc_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Npc_FieldIndex.Destructible;
                }
                case RecordTypeInts.WNAM:
                {
                    _WornArmorLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.WornArmor;
                }
                case RecordTypeInts.ANAM:
                {
                    _FarAwayModelLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.FarAwayModel;
                }
                case RecordTypeInts.ATKR:
                {
                    _AttackRaceLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.AttackRace;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                {
                    this.Attacks = this.ParseRepeatedTypelessSubrecord<AttackBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: Attack_Registration.TriggeringRecordTypes,
                        factory:  AttackBinaryOverlay.AttackFactory);
                    return (int)Npc_FieldIndex.Attacks;
                }
                case RecordTypeInts.SPOR:
                {
                    _SpectatorOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    _ObserveDeadBodyOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    _GuardWarnOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    _CombatOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.PRKR:
                case RecordTypeInts.PRKZ:
                {
                    this.Perks = BinaryOverlayList.FactoryByCountPerItem<PerkPlacementBinaryOverlay>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x8,
                        countLength: 4,
                        countType: RecordTypes.PRKZ,
                        subrecordType: RecordTypes.PRKR,
                        getter: (s, p) => PerkPlacementBinaryOverlay.PerkPlacementFactory(s, p),
                        skipHeader: false);
                    return (int)Npc_FieldIndex.Perks;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    this.Items = BinaryOverlayList.FactoryByCountPerItem<ContainerEntryBinaryOverlay>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        subrecordType: RecordTypes.CNTO,
                        countType: RecordTypes.COCT,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => ContainerEntryBinaryOverlay.ContainerEntryFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)Npc_FieldIndex.Items;
                }
                case RecordTypeInts.AIDT:
                {
                    _AIDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Npc_FieldIndex.AIData;
                }
                case RecordTypeInts.PKID:
                {
                    this.Packages = BinaryOverlayList.FactoryByArray<IFormLink<IPackageGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IPackageGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)Npc_FieldIndex.Packages;
                }
                case RecordTypeInts.KWDA:
                case RecordTypeInts.KSIZ:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLink<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        subrecordType: RecordTypes.KWDA,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    return (int)Npc_FieldIndex.Keywords;
                }
                case RecordTypeInts.CNAM:
                {
                    _ClassLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Class;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Name;
                }
                case RecordTypeInts.SHRT:
                {
                    _ShortNameLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.ShortName;
                }
                case RecordTypeInts.DATA:
                {
                    DataMarkerCustomParse(
                        stream,
                        offset);
                    return null;
                }
                case RecordTypeInts.DNAM:
                {
                    _PlayerSkillsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Npc_FieldIndex.PlayerSkills;
                }
                case RecordTypeInts.PNAM:
                {
                    this.HeadParts = BinaryOverlayList.FactoryByArray<IFormLink<IHeadPartGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IHeadPartGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)Npc_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HCLF:
                {
                    _HairColorLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.HairColor;
                }
                case RecordTypeInts.ZNAM:
                {
                    _CombatStyleLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.GNAM:
                {
                    _GiftFilterLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.GiftFilter;
                }
                case RecordTypeInts.NAM5:
                {
                    _NAM5Location = (stream.Position - offset);
                    return (int)Npc_FieldIndex.NAM5;
                }
                case RecordTypeInts.NAM6:
                {
                    _HeightLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Height;
                }
                case RecordTypeInts.NAM7:
                {
                    _WeightLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Weight;
                }
                case RecordTypeInts.NAM8:
                {
                    _SoundLevelLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.SoundLevel;
                }
                case RecordTypeInts.CSCR:
                {
                    this.Sound = NpcInheritSoundBinaryOverlay.NpcInheritSoundFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Npc_FieldIndex.Sound;
                }
                case RecordTypeInts.CSDT:
                case RecordTypeInts.CSDI:
                case RecordTypeInts.CSDC:
                {
                    this.Sound = NpcSoundTypesBinaryOverlay.NpcSoundTypesFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Npc_FieldIndex.Sound;
                }
                case RecordTypeInts.DOFT:
                {
                    _DefaultOutfitLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.DefaultOutfit;
                }
                case RecordTypeInts.SOFT:
                {
                    _SleepingOutfitLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.SleepingOutfit;
                }
                case RecordTypeInts.DPLT:
                {
                    _DefaultPackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.DefaultPackageList;
                }
                case RecordTypeInts.CRIF:
                {
                    _CrimeFactionLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.CrimeFaction;
                }
                case RecordTypeInts.FTST:
                {
                    _HeadTextureLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.HeadTexture;
                }
                case RecordTypeInts.QNAM:
                {
                    _TextureLightingLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.TextureLighting;
                }
                case RecordTypeInts.NAM9:
                {
                    _FaceMorphLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Npc_FieldIndex.FaceMorph;
                }
                case RecordTypeInts.NAMA:
                {
                    _FacePartsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Npc_FieldIndex.FaceParts;
                }
                case RecordTypeInts.TINI:
                case RecordTypeInts.TINC:
                case RecordTypeInts.TINV:
                case RecordTypeInts.TIAS:
                {
                    this.TintLayers = this.ParseRepeatedTypelessSubrecord<TintLayerBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: TintLayer_Registration.TriggeringRecordTypes,
                        factory:  TintLayerBinaryOverlay.TintLayerFactory);
                    return (int)Npc_FieldIndex.TintLayers;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INpcGetter rhs)) return false;
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(INpcGetter? obj)
        {
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NpcCommon)((INpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

