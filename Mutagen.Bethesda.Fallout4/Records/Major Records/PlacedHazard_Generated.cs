/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PlacedHazard :
        APlacedTrap,
        IPlacedHazardInternal,
        ILoquiObjectSetter<PlacedHazard>,
        IEquatable<IPlacedHazardGetter>
    {
        #region Ctor
        protected PlacedHazard()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Hazard
        public FormLink<IHazardGetter> Hazard { get; set; } = new FormLink<IHazardGetter>();
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedHazardMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlacedHazardGetter rhs)) return false;
            return ((PlacedHazardCommon)((IPlacedHazardGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPlacedHazardGetter? obj)
        {
            return ((PlacedHazardCommon)((IPlacedHazardGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedHazardCommon)((IPlacedHazardGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APlacedTrap.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Hazard = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem EncounterZone,
                TItem Ownership,
                TItem HeadTrackingWeight,
                TItem FavorCost,
                TItem Reflections,
                TItem LinkedReferences,
                TItem ActivateParents,
                TItem EnableParent,
                TItem Emittance,
                TItem MultiBoundReference,
                TItem IgnoredBySandbox,
                TItem LocationRefTypes,
                TItem LocationReference,
                TItem DistantLodData,
                TItem Scale,
                TItem Placement,
                TItem Hazard)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                VirtualMachineAdapter: VirtualMachineAdapter,
                EncounterZone: EncounterZone,
                Ownership: Ownership,
                HeadTrackingWeight: HeadTrackingWeight,
                FavorCost: FavorCost,
                Reflections: Reflections,
                LinkedReferences: LinkedReferences,
                ActivateParents: ActivateParents,
                EnableParent: EnableParent,
                Emittance: Emittance,
                MultiBoundReference: MultiBoundReference,
                IgnoredBySandbox: IgnoredBySandbox,
                LocationRefTypes: LocationRefTypes,
                LocationReference: LocationReference,
                DistantLodData: DistantLodData,
                Scale: Scale,
                Placement: Placement)
            {
                this.Hazard = Hazard;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Hazard;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Hazard, rhs.Hazard)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Hazard);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Hazard)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Hazard)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedHazard.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Hazard = eval(this.Hazard);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PlacedHazard.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PlacedHazard.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PlacedHazard.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Hazard ?? true)
                    {
                        fg.AppendItem(Hazard, "Hazard");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            APlacedTrap.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Hazard;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedHazard_FieldIndex enu = (PlacedHazard_FieldIndex)index;
                switch (enu)
                {
                    case PlacedHazard_FieldIndex.Hazard:
                        return Hazard;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedHazard_FieldIndex enu = (PlacedHazard_FieldIndex)index;
                switch (enu)
                {
                    case PlacedHazard_FieldIndex.Hazard:
                        this.Hazard = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedHazard_FieldIndex enu = (PlacedHazard_FieldIndex)index;
                switch (enu)
                {
                    case PlacedHazard_FieldIndex.Hazard:
                        this.Hazard = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Hazard != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Hazard, "Hazard");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Hazard = this.Hazard.Combine(rhs.Hazard);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APlacedTrap.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Hazard;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Hazard = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Hazard, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = PlacedHazard_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PlacedHazardCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedHazardSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedHazard(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private PlacedHazard(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal PlacedHazard(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public PlacedHazard(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public PlacedHazard(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedHazardBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedHazardBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static PlacedHazard CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PlacedHazard();
            ((PlacedHazardSetterCommon)((IPlacedHazardGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedHazard item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PlacedHazardSetterCommon)((IPlacedHazardGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedHazard GetNew()
        {
            return new PlacedHazard();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedHazard :
        IPlacedHazardGetter,
        IAPlacedTrap,
        ILoquiObjectSetter<IPlacedHazardInternal>,
        IFormLinkContainer
    {
        new FormLink<IHazardGetter> Hazard { get; set; }
    }

    public partial interface IPlacedHazardInternal :
        IAPlacedTrapInternal,
        IPlacedHazard,
        IPlacedHazardGetter
    {
    }

    public partial interface IPlacedHazardGetter :
        IAPlacedTrapGetter,
        ILoquiObject<IPlacedHazardGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => PlacedHazard_Registration.Instance;
        FormLink<IHazardGetter> Hazard { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedHazardMixIn
    {
        public static void Clear(this IPlacedHazardInternal item)
        {
            ((PlacedHazardSetterCommon)((IPlacedHazardGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedHazard.Mask<bool> GetEqualsMask(
            this IPlacedHazardGetter item,
            IPlacedHazardGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedHazardCommon)((IPlacedHazardGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPlacedHazardGetter item,
            string? name = null,
            PlacedHazard.Mask<bool>? printMask = null)
        {
            return ((PlacedHazardCommon)((IPlacedHazardGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPlacedHazardGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedHazard.Mask<bool>? printMask = null)
        {
            ((PlacedHazardCommon)((IPlacedHazardGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedHazardGetter item,
            IPlacedHazardGetter rhs)
        {
            return ((PlacedHazardCommon)((IPlacedHazardGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPlacedHazardInternal lhs,
            IPlacedHazardGetter rhs,
            out PlacedHazard.ErrorMask errorMask,
            PlacedHazard.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedHazardSetterTranslationCommon)((IPlacedHazardGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedHazard.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedHazardInternal lhs,
            IPlacedHazardGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedHazardSetterTranslationCommon)((IPlacedHazardGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedHazard DeepCopy(
            this IPlacedHazardGetter item,
            PlacedHazard.TranslationMask? copyMask = null)
        {
            return ((PlacedHazardSetterTranslationCommon)((IPlacedHazardGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedHazard DeepCopy(
            this IPlacedHazardGetter item,
            out PlacedHazard.ErrorMask errorMask,
            PlacedHazard.TranslationMask? copyMask = null)
        {
            return ((PlacedHazardSetterTranslationCommon)((IPlacedHazardGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedHazard DeepCopy(
            this IPlacedHazardGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedHazardSetterTranslationCommon)((IPlacedHazardGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedHazard Duplicate(
            this IPlacedHazardGetter item,
            FormKey formKey,
            PlacedHazard.TranslationMask? copyMask = null)
        {
            return ((PlacedHazardCommon)((IPlacedHazardGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedHazardInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedHazardSetterCommon)((IPlacedHazardGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PlacedHazard_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        EncounterZone = 7,
        Ownership = 8,
        HeadTrackingWeight = 9,
        FavorCost = 10,
        Reflections = 11,
        LinkedReferences = 12,
        ActivateParents = 13,
        EnableParent = 14,
        Emittance = 15,
        MultiBoundReference = 16,
        IgnoredBySandbox = 17,
        LocationRefTypes = 18,
        LocationReference = 19,
        DistantLodData = 20,
        Scale = 21,
        Placement = 22,
        Hazard = 23,
    }
    #endregion

    #region Registration
    public partial class PlacedHazard_Registration : ILoquiRegistration
    {
        public static readonly PlacedHazard_Registration Instance = new PlacedHazard_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 333,
            version: 0);

        public const string GUID = "9860c96e-43b5-4c99-ab73-ab397da96919";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 24;

        public static readonly Type MaskType = typeof(PlacedHazard.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedHazard.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedHazard);

        public static readonly Type GetterType = typeof(IPlacedHazardGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedHazard);

        public static readonly Type? InternalSetterType = typeof(IPlacedHazardInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.PlacedHazard";

        public const string Name = "PlacedHazard";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PHZD;
        public static readonly Type BinaryWriteTranslation = typeof(PlacedHazardBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PlacedHazardSetterCommon : APlacedTrapSetterCommon
    {
        public new static readonly PlacedHazardSetterCommon Instance = new PlacedHazardSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedHazardInternal item)
        {
            ClearPartial();
            item.Hazard = FormLink<IHazardGetter>.Null;
            base.Clear(item);
        }
        
        public override void Clear(IAPlacedTrapInternal item)
        {
            Clear(item: (IPlacedHazardInternal)item);
        }
        
        public override void Clear(IAPlacedInternal item)
        {
            Clear(item: (IPlacedHazardInternal)item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IPlacedHazardInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedHazardInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedHazard obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Hazard = obj.Hazard.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedHazardInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IPlacedHazardInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PlacedHazardBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedHazardBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPlacedTrapInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedHazard)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IAPlacedInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedHazard)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedHazard)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PlacedHazard)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PlacedHazardCommon : APlacedTrapCommon
    {
        public new static readonly PlacedHazardCommon Instance = new PlacedHazardCommon();

        public PlacedHazard.Mask<bool> GetEqualsMask(
            IPlacedHazardGetter item,
            IPlacedHazardGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedHazard.Mask<bool>(false);
            ((PlacedHazardCommon)((IPlacedHazardGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedHazardGetter item,
            IPlacedHazardGetter rhs,
            PlacedHazard.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Hazard = item.Hazard.Equals(rhs.Hazard);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPlacedHazardGetter item,
            string? name = null,
            PlacedHazard.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPlacedHazardGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedHazard.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PlacedHazard =>");
            }
            else
            {
                fg.AppendLine($"{name} (PlacedHazard) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPlacedHazardGetter item,
            FileGeneration fg,
            PlacedHazard.Mask<bool>? printMask = null)
        {
            APlacedTrapCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Hazard ?? true)
            {
                fg.AppendItem(item.Hazard.FormKey, "Hazard");
            }
        }
        
        public static PlacedHazard_FieldIndex ConvertFieldIndex(APlacedTrap_FieldIndex index)
        {
            switch (index)
            {
                case APlacedTrap_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FormKey:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.VersionControl:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EditorID:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FormVersion:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Version2:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EncounterZone:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Ownership:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FavorCost:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Reflections:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LinkedReferences:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.ActivateParents:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EnableParent:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Emittance:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.MultiBoundReference:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LocationRefTypes:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LocationReference:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.DistantLodData:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Scale:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Placement:
                    return (PlacedHazard_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedHazard_FieldIndex ConvertFieldIndex(APlaced_FieldIndex index)
        {
            switch (index)
            {
                case APlaced_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlaced_FieldIndex.FormKey:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlaced_FieldIndex.VersionControl:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlaced_FieldIndex.EditorID:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlaced_FieldIndex.FormVersion:
                    return (PlacedHazard_FieldIndex)((int)index);
                case APlaced_FieldIndex.Version2:
                    return (PlacedHazard_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedHazard_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedHazard_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (PlacedHazard_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (PlacedHazard_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (PlacedHazard_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (PlacedHazard_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (PlacedHazard_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedHazard_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedHazard_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedHazard_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedHazard_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedHazard_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedHazardGetter? lhs,
            IPlacedHazardGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAPlacedTrapGetter)lhs, (IAPlacedTrapGetter)rhs)) return false;
            if (!lhs.Hazard.Equals(rhs.Hazard)) return false;
            return true;
        }
        
        public override bool Equals(
            IAPlacedTrapGetter? lhs,
            IAPlacedTrapGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedHazardGetter?)lhs,
                rhs: rhs as IPlacedHazardGetter);
        }
        
        public override bool Equals(
            IAPlacedGetter? lhs,
            IAPlacedGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedHazardGetter?)lhs,
                rhs: rhs as IPlacedHazardGetter);
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedHazardGetter?)lhs,
                rhs: rhs as IPlacedHazardGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedHazardGetter?)lhs,
                rhs: rhs as IPlacedHazardGetter);
        }
        
        public virtual int GetHashCode(IPlacedHazardGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Hazard);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPlacedTrapGetter item)
        {
            return GetHashCode(item: (IPlacedHazardGetter)item);
        }
        
        public override int GetHashCode(IAPlacedGetter item)
        {
            return GetHashCode(item: (IPlacedHazardGetter)item);
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedHazardGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedHazardGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedHazard.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPlacedHazardGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Hazard);
            yield break;
        }
        
        #region Duplicate
        public PlacedHazard Duplicate(
            IPlacedHazardGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedHazard(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override APlacedTrap Duplicate(
            IAPlacedTrapGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedHazard)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override APlaced Duplicate(
            IAPlacedGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedHazard)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedHazard)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedHazard)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class PlacedHazardSetterTranslationCommon : APlacedTrapSetterTranslationCommon
    {
        public new static readonly PlacedHazardSetterTranslationCommon Instance = new PlacedHazardSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedHazardInternal item,
            IPlacedHazardGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedHazard item,
            IPlacedHazardGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPlacedTrap)item,
                (IAPlacedTrapGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedHazard_FieldIndex.Hazard) ?? true))
            {
                item.Hazard = new FormLink<IHazardGetter>(rhs.Hazard.FormKey);
            }
        }
        
        public override void DeepCopyIn(
            IAPlacedTrapInternal item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedHazardInternal)item,
                rhs: (IPlacedHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlacedTrap item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedHazard)item,
                rhs: (IPlacedHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlacedInternal item,
            IAPlacedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedHazardInternal)item,
                rhs: (IPlacedHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlaced item,
            IAPlacedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedHazard)item,
                rhs: (IPlacedHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedHazardInternal)item,
                rhs: (IPlacedHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedHazard)item,
                rhs: (IPlacedHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedHazardInternal)item,
                rhs: (IPlacedHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedHazard)item,
                rhs: (IPlacedHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedHazard DeepCopy(
            IPlacedHazardGetter item,
            PlacedHazard.TranslationMask? copyMask = null)
        {
            PlacedHazard ret = (PlacedHazard)((PlacedHazardCommon)((IPlacedHazardGetter)item).CommonInstance()!).GetNew();
            ((PlacedHazardSetterTranslationCommon)((IPlacedHazardGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedHazard DeepCopy(
            IPlacedHazardGetter item,
            out PlacedHazard.ErrorMask errorMask,
            PlacedHazard.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedHazard ret = (PlacedHazard)((PlacedHazardCommon)((IPlacedHazardGetter)item).CommonInstance()!).GetNew();
            ((PlacedHazardSetterTranslationCommon)((IPlacedHazardGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedHazard.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedHazard DeepCopy(
            IPlacedHazardGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedHazard ret = (PlacedHazard)((PlacedHazardCommon)((IPlacedHazardGetter)item).CommonInstance()!).GetNew();
            ((PlacedHazardSetterTranslationCommon)((IPlacedHazardGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PlacedHazard
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedHazard_Registration.Instance;
        public new static PlacedHazard_Registration Registration => PlacedHazard_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedHazardCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedHazardSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedHazardSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PlacedHazardBinaryWriteTranslation :
        APlacedTrapBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PlacedHazardBinaryWriteTranslation Instance = new PlacedHazardBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPlacedHazardGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            IPlacedHazardGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.PHZD),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    APlacedTrapBinaryWriteTranslation.WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedHazardGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPlacedTrapGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedHazardGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAPlacedGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedHazardGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedHazardGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedHazardGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PlacedHazardBinaryCreateTranslation : APlacedTrapBinaryCreateTranslation
    {
        public new readonly static PlacedHazardBinaryCreateTranslation Instance = new PlacedHazardBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PHZD;
        public static void FillBinaryStructs(
            IPlacedHazardInternal item,
            MutagenFrame frame)
        {
            APlacedTrapBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PlacedHazardBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PlacedHazardBinaryOverlay :
        APlacedTrapBinaryOverlay,
        IPlacedHazardGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedHazard_Registration.Instance;
        public new static PlacedHazard_Registration Registration => PlacedHazard_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedHazardCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedHazardSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => PlacedHazardCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedHazardBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedHazardBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedHazardBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PlacedHazardBinaryOverlay PlacedHazardFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new PlacedHazardBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PlacedHazardBinaryOverlay PlacedHazardFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PlacedHazardFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedHazardMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlacedHazardGetter rhs)) return false;
            return ((PlacedHazardCommon)((IPlacedHazardGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPlacedHazardGetter? obj)
        {
            return ((PlacedHazardCommon)((IPlacedHazardGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedHazardCommon)((IPlacedHazardGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

