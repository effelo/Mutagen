/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Scene :
        Fallout4MajorRecord,
        ISceneInternal,
        ILoquiObjectSetter<Scene>,
        IEquatable<ISceneGetter>
    {
        #region Ctor
        protected Scene()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SceneAdapter? _VirtualMachineAdapter;
        public SceneAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISceneAdapterGetter? ISceneGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Flags
        public Scene.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Scene.Flag? ISceneGetter.Flags => this.Flags;
        #endregion
        #region Phases
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ScenePhase> _Phases = new ExtendedList<ScenePhase>();
        public ExtendedList<ScenePhase> Phases
        {
            get => this._Phases;
            protected set => this._Phases = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IScenePhaseGetter> ISceneGetter.Phases => _Phases;
        #endregion

        #endregion
        #region Actors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<SceneActor> _Actors = new ExtendedList<SceneActor>();
        public ExtendedList<SceneActor> Actors
        {
            get => this._Actors;
            protected set => this._Actors = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISceneActorGetter> ISceneGetter.Actors => _Actors;
        #endregion

        #endregion
        #region Actions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<SceneAction> _Actions = new ExtendedList<SceneAction>();
        public ExtendedList<SceneAction> Actions
        {
            get => this._Actions;
            protected set => this._Actions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISceneActionGetter> ISceneGetter.Actions => _Actions;
        #endregion

        #endregion
        #region Unused
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ScenePhaseUnusedData? _Unused;
        public ScenePhaseUnusedData? Unused
        {
            get => _Unused;
            set => _Unused = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScenePhaseUnusedDataGetter? ISceneGetter.Unused => this.Unused;
        #endregion
        #region Unused2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ScenePhaseUnusedData? _Unused2;
        public ScenePhaseUnusedData? Unused2
        {
            get => _Unused2;
            set => _Unused2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScenePhaseUnusedDataGetter? ISceneGetter.Unused2 => this.Unused2;
        #endregion
        #region Quest
        public FormLinkNullable<IQuestGetter> Quest { get; set; } = new FormLinkNullable<IQuestGetter>();
        #endregion
        #region LastActionIndex
        public UInt32? LastActionIndex { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? ISceneGetter.LastActionIndex => this.LastActionIndex;
        #endregion
        #region VNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _VNAM;
        public MemorySlice<Byte>? VNAM
        {
            get => this._VNAM;
            set => this._VNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISceneGetter.VNAM => this.VNAM;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> ISceneGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SceneMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISceneGetter rhs)) return false;
            return ((SceneCommon)((ISceneGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISceneGetter? obj)
        {
            return ((SceneCommon)((ISceneGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SceneCommon)((ISceneGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, SceneAdapter.Mask<TItem>?>(initialValue, new SceneAdapter.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.Phases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScenePhase.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ScenePhase.Mask<TItem>?>>());
                this.Actors = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneActor.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, SceneActor.Mask<TItem>?>>());
                this.Actions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneAction.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, SceneAction.Mask<TItem>?>>());
                this.Unused = new MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>(initialValue, new ScenePhaseUnusedData.Mask<TItem>(initialValue));
                this.Unused2 = new MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>(initialValue, new ScenePhaseUnusedData.Mask<TItem>(initialValue));
                this.Quest = initialValue;
                this.LastActionIndex = initialValue;
                this.VNAM = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem Flags,
                TItem Phases,
                TItem Actors,
                TItem Actions,
                TItem Unused,
                TItem Unused2,
                TItem Quest,
                TItem LastActionIndex,
                TItem VNAM,
                TItem Conditions)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, SceneAdapter.Mask<TItem>?>(VirtualMachineAdapter, new SceneAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Flags = Flags;
                this.Phases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScenePhase.Mask<TItem>?>>?>(Phases, Enumerable.Empty<MaskItemIndexed<TItem, ScenePhase.Mask<TItem>?>>());
                this.Actors = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneActor.Mask<TItem>?>>?>(Actors, Enumerable.Empty<MaskItemIndexed<TItem, SceneActor.Mask<TItem>?>>());
                this.Actions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneAction.Mask<TItem>?>>?>(Actions, Enumerable.Empty<MaskItemIndexed<TItem, SceneAction.Mask<TItem>?>>());
                this.Unused = new MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>(Unused, new ScenePhaseUnusedData.Mask<TItem>(Unused));
                this.Unused2 = new MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>(Unused2, new ScenePhaseUnusedData.Mask<TItem>(Unused2));
                this.Quest = Quest;
                this.LastActionIndex = LastActionIndex;
                this.VNAM = VNAM;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, SceneAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScenePhase.Mask<TItem>?>>?>? Phases;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneActor.Mask<TItem>?>>?>? Actors;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SceneAction.Mask<TItem>?>>?>? Actions;
            public MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>? Unused { get; set; }
            public MaskItem<TItem, ScenePhaseUnusedData.Mask<TItem>?>? Unused2 { get; set; }
            public TItem Quest;
            public TItem LastActionIndex;
            public TItem VNAM;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Phases, rhs.Phases)) return false;
                if (!object.Equals(this.Actors, rhs.Actors)) return false;
                if (!object.Equals(this.Actions, rhs.Actions)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.Unused2, rhs.Unused2)) return false;
                if (!object.Equals(this.Quest, rhs.Quest)) return false;
                if (!object.Equals(this.LastActionIndex, rhs.LastActionIndex)) return false;
                if (!object.Equals(this.VNAM, rhs.VNAM)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Flags);
                hash.Add(this.Phases);
                hash.Add(this.Actors);
                hash.Add(this.Actions);
                hash.Add(this.Unused);
                hash.Add(this.Unused2);
                hash.Add(this.Quest);
                hash.Add(this.LastActionIndex);
                hash.Add(this.VNAM);
                hash.Add(this.Conditions);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (this.Phases != null)
                {
                    if (!eval(this.Phases.Overall)) return false;
                    if (this.Phases.Specific != null)
                    {
                        foreach (var item in this.Phases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Actors != null)
                {
                    if (!eval(this.Actors.Overall)) return false;
                    if (this.Actors.Specific != null)
                    {
                        foreach (var item in this.Actors.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Actions != null)
                {
                    if (!eval(this.Actions.Overall)) return false;
                    if (this.Actions.Specific != null)
                    {
                        foreach (var item in this.Actions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Unused != null)
                {
                    if (!eval(this.Unused.Overall)) return false;
                    if (this.Unused.Specific != null && !this.Unused.Specific.All(eval)) return false;
                }
                if (Unused2 != null)
                {
                    if (!eval(this.Unused2.Overall)) return false;
                    if (this.Unused2.Specific != null && !this.Unused2.Specific.All(eval)) return false;
                }
                if (!eval(this.Quest)) return false;
                if (!eval(this.LastActionIndex)) return false;
                if (!eval(this.VNAM)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (this.Phases != null)
                {
                    if (eval(this.Phases.Overall)) return true;
                    if (this.Phases.Specific != null)
                    {
                        foreach (var item in this.Phases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Actors != null)
                {
                    if (eval(this.Actors.Overall)) return true;
                    if (this.Actors.Specific != null)
                    {
                        foreach (var item in this.Actors.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Actions != null)
                {
                    if (eval(this.Actions.Overall)) return true;
                    if (this.Actions.Specific != null)
                    {
                        foreach (var item in this.Actions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Unused != null)
                {
                    if (eval(this.Unused.Overall)) return true;
                    if (this.Unused.Specific != null && this.Unused.Specific.Any(eval)) return true;
                }
                if (Unused2 != null)
                {
                    if (eval(this.Unused2.Overall)) return true;
                    if (this.Unused2.Specific != null && this.Unused2.Specific.Any(eval)) return true;
                }
                if (eval(this.Quest)) return true;
                if (eval(this.LastActionIndex)) return true;
                if (eval(this.VNAM)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Scene.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, SceneAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                if (Phases != null)
                {
                    obj.Phases = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ScenePhase.Mask<R>?>>?>(eval(this.Phases.Overall), Enumerable.Empty<MaskItemIndexed<R, ScenePhase.Mask<R>?>>());
                    if (Phases.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ScenePhase.Mask<R>?>>();
                        obj.Phases.Specific = l;
                        foreach (var item in Phases.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ScenePhase.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ScenePhase.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Actors != null)
                {
                    obj.Actors = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SceneActor.Mask<R>?>>?>(eval(this.Actors.Overall), Enumerable.Empty<MaskItemIndexed<R, SceneActor.Mask<R>?>>());
                    if (Actors.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, SceneActor.Mask<R>?>>();
                        obj.Actors.Specific = l;
                        foreach (var item in Actors.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, SceneActor.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, SceneActor.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Actions != null)
                {
                    obj.Actions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SceneAction.Mask<R>?>>?>(eval(this.Actions.Overall), Enumerable.Empty<MaskItemIndexed<R, SceneAction.Mask<R>?>>());
                    if (Actions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, SceneAction.Mask<R>?>>();
                        obj.Actions.Specific = l;
                        foreach (var item in Actions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, SceneAction.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, SceneAction.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Unused = this.Unused == null ? null : new MaskItem<R, ScenePhaseUnusedData.Mask<R>?>(eval(this.Unused.Overall), this.Unused.Specific?.Translate(eval));
                obj.Unused2 = this.Unused2 == null ? null : new MaskItem<R, ScenePhaseUnusedData.Mask<R>?>(eval(this.Unused2.Overall), this.Unused2.Specific?.Translate(eval));
                obj.Quest = eval(this.Quest);
                obj.LastActionIndex = eval(this.LastActionIndex);
                obj.VNAM = eval(this.VNAM);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Scene.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Scene.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Scene.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.Phases?.Overall ?? true)
                        && Phases.TryGet(out var PhasesItem))
                    {
                        fg.AppendLine("Phases =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PhasesItem.Overall);
                            if (PhasesItem.Specific != null)
                            {
                                foreach (var subItem in PhasesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Actors?.Overall ?? true)
                        && Actors.TryGet(out var ActorsItem))
                    {
                        fg.AppendLine("Actors =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ActorsItem.Overall);
                            if (ActorsItem.Specific != null)
                            {
                                foreach (var subItem in ActorsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Actions?.Overall ?? true)
                        && Actions.TryGet(out var ActionsItem))
                    {
                        fg.AppendLine("Actions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ActionsItem.Overall);
                            if (ActionsItem.Specific != null)
                            {
                                foreach (var subItem in ActionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Unused?.Overall ?? true)
                    {
                        Unused?.ToString(fg);
                    }
                    if (printMask?.Unused2?.Overall ?? true)
                    {
                        Unused2?.ToString(fg);
                    }
                    if (printMask?.Quest ?? true)
                    {
                        fg.AppendItem(Quest, "Quest");
                    }
                    if (printMask?.LastActionIndex ?? true)
                    {
                        fg.AppendItem(LastActionIndex, "LastActionIndex");
                    }
                    if (printMask?.VNAM ?? true)
                    {
                        fg.AppendItem(VNAM, "VNAM");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, SceneAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhase.ErrorMask?>>?>? Phases;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneActor.ErrorMask?>>?>? Actors;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneAction.ErrorMask?>>?>? Actions;
            public MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>? Unused;
            public MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>? Unused2;
            public Exception? Quest;
            public Exception? LastActionIndex;
            public Exception? VNAM;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Scene_FieldIndex enu = (Scene_FieldIndex)index;
                switch (enu)
                {
                    case Scene_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Scene_FieldIndex.Flags:
                        return Flags;
                    case Scene_FieldIndex.Phases:
                        return Phases;
                    case Scene_FieldIndex.Actors:
                        return Actors;
                    case Scene_FieldIndex.Actions:
                        return Actions;
                    case Scene_FieldIndex.Unused:
                        return Unused;
                    case Scene_FieldIndex.Unused2:
                        return Unused2;
                    case Scene_FieldIndex.Quest:
                        return Quest;
                    case Scene_FieldIndex.LastActionIndex:
                        return LastActionIndex;
                    case Scene_FieldIndex.VNAM:
                        return VNAM;
                    case Scene_FieldIndex.Conditions:
                        return Conditions;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Scene_FieldIndex enu = (Scene_FieldIndex)index;
                switch (enu)
                {
                    case Scene_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, SceneAdapter.ErrorMask?>(ex, null);
                        break;
                    case Scene_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Scene_FieldIndex.Phases:
                        this.Phases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhase.ErrorMask?>>?>(ex, null);
                        break;
                    case Scene_FieldIndex.Actors:
                        this.Actors = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneActor.ErrorMask?>>?>(ex, null);
                        break;
                    case Scene_FieldIndex.Actions:
                        this.Actions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneAction.ErrorMask?>>?>(ex, null);
                        break;
                    case Scene_FieldIndex.Unused:
                        this.Unused = new MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>(ex, null);
                        break;
                    case Scene_FieldIndex.Unused2:
                        this.Unused2 = new MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>(ex, null);
                        break;
                    case Scene_FieldIndex.Quest:
                        this.Quest = ex;
                        break;
                    case Scene_FieldIndex.LastActionIndex:
                        this.LastActionIndex = ex;
                        break;
                    case Scene_FieldIndex.VNAM:
                        this.VNAM = ex;
                        break;
                    case Scene_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Scene_FieldIndex enu = (Scene_FieldIndex)index;
                switch (enu)
                {
                    case Scene_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, SceneAdapter.ErrorMask?>?)obj;
                        break;
                    case Scene_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.Phases:
                        this.Phases = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhase.ErrorMask?>>?>)obj;
                        break;
                    case Scene_FieldIndex.Actors:
                        this.Actors = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneActor.ErrorMask?>>?>)obj;
                        break;
                    case Scene_FieldIndex.Actions:
                        this.Actions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneAction.ErrorMask?>>?>)obj;
                        break;
                    case Scene_FieldIndex.Unused:
                        this.Unused = (MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>?)obj;
                        break;
                    case Scene_FieldIndex.Unused2:
                        this.Unused2 = (MaskItem<Exception?, ScenePhaseUnusedData.ErrorMask?>?)obj;
                        break;
                    case Scene_FieldIndex.Quest:
                        this.Quest = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.LastActionIndex:
                        this.LastActionIndex = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.VNAM:
                        this.VNAM = (Exception?)obj;
                        break;
                    case Scene_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Flags != null) return true;
                if (Phases != null) return true;
                if (Actors != null) return true;
                if (Actions != null) return true;
                if (Unused != null) return true;
                if (Unused2 != null) return true;
                if (Quest != null) return true;
                if (LastActionIndex != null) return true;
                if (VNAM != null) return true;
                if (Conditions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
                if (Phases.TryGet(out var PhasesItem))
                {
                    fg.AppendLine("Phases =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PhasesItem.Overall);
                        if (PhasesItem.Specific != null)
                        {
                            foreach (var subItem in PhasesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Actors.TryGet(out var ActorsItem))
                {
                    fg.AppendLine("Actors =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ActorsItem.Overall);
                        if (ActorsItem.Specific != null)
                        {
                            foreach (var subItem in ActorsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Actions.TryGet(out var ActionsItem))
                {
                    fg.AppendLine("Actions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ActionsItem.Overall);
                        if (ActionsItem.Specific != null)
                        {
                            foreach (var subItem in ActionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Unused?.ToString(fg);
                Unused2?.ToString(fg);
                fg.AppendItem(Quest, "Quest");
                fg.AppendItem(LastActionIndex, "LastActionIndex");
                fg.AppendItem(VNAM, "VNAM");
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Phases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScenePhase.ErrorMask?>>?>(ExceptionExt.Combine(this.Phases?.Overall, rhs.Phases?.Overall), ExceptionExt.Combine(this.Phases?.Specific, rhs.Phases?.Specific));
                ret.Actors = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneActor.ErrorMask?>>?>(ExceptionExt.Combine(this.Actors?.Overall, rhs.Actors?.Overall), ExceptionExt.Combine(this.Actors?.Specific, rhs.Actors?.Specific));
                ret.Actions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SceneAction.ErrorMask?>>?>(ExceptionExt.Combine(this.Actions?.Overall, rhs.Actions?.Overall), ExceptionExt.Combine(this.Actions?.Specific, rhs.Actions?.Specific));
                ret.Unused = this.Unused.Combine(rhs.Unused, (l, r) => l.Combine(r));
                ret.Unused2 = this.Unused2.Combine(rhs.Unused2, (l, r) => l.Combine(r));
                ret.Quest = this.Quest.Combine(rhs.Quest);
                ret.LastActionIndex = this.LastActionIndex.Combine(rhs.LastActionIndex);
                ret.VNAM = this.VNAM.Combine(rhs.VNAM);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public SceneAdapter.TranslationMask? VirtualMachineAdapter;
            public bool Flags;
            public ScenePhase.TranslationMask? Phases;
            public SceneActor.TranslationMask? Actors;
            public SceneAction.TranslationMask? Actions;
            public ScenePhaseUnusedData.TranslationMask? Unused;
            public ScenePhaseUnusedData.TranslationMask? Unused2;
            public bool Quest;
            public bool LastActionIndex;
            public bool VNAM;
            public Condition.TranslationMask? Conditions;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Flags = defaultOn;
                this.Quest = defaultOn;
                this.LastActionIndex = defaultOn;
                this.VNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((Phases == null ? DefaultOn : !Phases.GetCrystal().CopyNothing, Phases?.GetCrystal()));
                ret.Add((Actors == null ? DefaultOn : !Actors.GetCrystal().CopyNothing, Actors?.GetCrystal()));
                ret.Add((Actions == null ? DefaultOn : !Actions.GetCrystal().CopyNothing, Actions?.GetCrystal()));
                ret.Add((Unused != null ? Unused.OnOverall : DefaultOn, Unused?.GetCrystal()));
                ret.Add((Unused2 != null ? Unused2.OnOverall : DefaultOn, Unused2?.GetCrystal()));
                ret.Add((Quest, null));
                ret.Add((LastActionIndex, null));
                ret.Add((VNAM, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Scene_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => SceneCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SceneSetterCommon.Instance.RemapLinks(this, mapping);
        public Scene(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Scene(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Scene(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Scene(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Scene(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SceneBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SceneBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Scene CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Scene();
            ((SceneSetterCommon)((ISceneGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Scene item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((SceneSetterCommon)((ISceneGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Scene GetNew()
        {
            return new Scene();
        }

    }
    #endregion

    #region Interface
    public partial interface IScene :
        ISceneGetter,
        IFallout4MajorRecord,
        ILoquiObjectSetter<ISceneInternal>,
        IFormLinkContainer
    {
        new SceneAdapter? VirtualMachineAdapter { get; set; }
        new Scene.Flag? Flags { get; set; }
        new ExtendedList<ScenePhase> Phases { get; }
        new ExtendedList<SceneActor> Actors { get; }
        new ExtendedList<SceneAction> Actions { get; }
        new ScenePhaseUnusedData? Unused { get; set; }
        new ScenePhaseUnusedData? Unused2 { get; set; }
        new FormLinkNullable<IQuestGetter> Quest { get; set; }
        new UInt32? LastActionIndex { get; set; }
        new MemorySlice<Byte>? VNAM { get; set; }
        new ExtendedList<Condition> Conditions { get; }
    }

    public partial interface ISceneInternal :
        IFallout4MajorRecordInternal,
        IScene,
        ISceneGetter
    {
    }

    public partial interface ISceneGetter :
        IFallout4MajorRecordGetter,
        ILoquiObject<ISceneGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Scene_Registration.Instance;
        ISceneAdapterGetter? VirtualMachineAdapter { get; }
        Scene.Flag? Flags { get; }
        IReadOnlyList<IScenePhaseGetter> Phases { get; }
        IReadOnlyList<ISceneActorGetter> Actors { get; }
        IReadOnlyList<ISceneActionGetter> Actions { get; }
        IScenePhaseUnusedDataGetter? Unused { get; }
        IScenePhaseUnusedDataGetter? Unused2 { get; }
        FormLinkNullable<IQuestGetter> Quest { get; }
        UInt32? LastActionIndex { get; }
        ReadOnlyMemorySlice<Byte>? VNAM { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SceneMixIn
    {
        public static void Clear(this ISceneInternal item)
        {
            ((SceneSetterCommon)((ISceneGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Scene.Mask<bool> GetEqualsMask(
            this ISceneGetter item,
            ISceneGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SceneCommon)((ISceneGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISceneGetter item,
            string? name = null,
            Scene.Mask<bool>? printMask = null)
        {
            return ((SceneCommon)((ISceneGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISceneGetter item,
            FileGeneration fg,
            string? name = null,
            Scene.Mask<bool>? printMask = null)
        {
            ((SceneCommon)((ISceneGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISceneGetter item,
            ISceneGetter rhs)
        {
            return ((SceneCommon)((ISceneGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISceneInternal lhs,
            ISceneGetter rhs,
            out Scene.ErrorMask errorMask,
            Scene.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SceneSetterTranslationCommon)((ISceneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Scene.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISceneInternal lhs,
            ISceneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SceneSetterTranslationCommon)((ISceneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Scene DeepCopy(
            this ISceneGetter item,
            Scene.TranslationMask? copyMask = null)
        {
            return ((SceneSetterTranslationCommon)((ISceneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Scene DeepCopy(
            this ISceneGetter item,
            out Scene.ErrorMask errorMask,
            Scene.TranslationMask? copyMask = null)
        {
            return ((SceneSetterTranslationCommon)((ISceneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Scene DeepCopy(
            this ISceneGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SceneSetterTranslationCommon)((ISceneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Scene Duplicate(
            this ISceneGetter item,
            FormKey formKey,
            Scene.TranslationMask? copyMask = null)
        {
            return ((SceneCommon)((ISceneGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISceneInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SceneSetterCommon)((ISceneGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Scene_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        Flags = 7,
        Phases = 8,
        Actors = 9,
        Actions = 10,
        Unused = 11,
        Unused2 = 12,
        Quest = 13,
        LastActionIndex = 14,
        VNAM = 15,
        Conditions = 16,
    }
    #endregion

    #region Registration
    public partial class Scene_Registration : ILoquiRegistration
    {
        public static readonly Scene_Registration Instance = new Scene_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 464,
            version: 0);

        public const string GUID = "1b4d8bf2-2bfe-484e-9447-4dda9d66a0f1";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(Scene.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Scene.ErrorMask);

        public static readonly Type ClassType = typeof(Scene);

        public static readonly Type GetterType = typeof(ISceneGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScene);

        public static readonly Type? InternalSetterType = typeof(ISceneInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Scene";

        public const string Name = "Scene";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SCEN;
        public static readonly Type BinaryWriteTranslation = typeof(SceneBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class SceneSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly SceneSetterCommon Instance = new SceneSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISceneInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Flags = default;
            item.Phases.Clear();
            item.Actors.Clear();
            item.Actions.Clear();
            item.Unused = null;
            item.Unused2 = null;
            item.Quest = FormLinkNullable<IQuestGetter>.Null;
            item.LastActionIndex = default;
            item.VNAM = default;
            item.Conditions.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ISceneInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISceneInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IScene obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Phases.RemapLinks(mapping);
            obj.Actions.RemapLinks(mapping);
            obj.Quest = obj.Quest.Relink(mapping);
            obj.Conditions.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISceneInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ISceneInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: SceneBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SceneBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Scene)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Scene)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class SceneCommon : Fallout4MajorRecordCommon
    {
        public new static readonly SceneCommon Instance = new SceneCommon();

        public Scene.Mask<bool> GetEqualsMask(
            ISceneGetter item,
            ISceneGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Scene.Mask<bool>(false);
            ((SceneCommon)((ISceneGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISceneGetter item,
            ISceneGetter rhs,
            Scene.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Phases = item.Phases.CollectionEqualsHelper(
                rhs.Phases,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Actors = item.Actors.CollectionEqualsHelper(
                rhs.Actors,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Actions = item.Actions.CollectionEqualsHelper(
                rhs.Actions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Unused = EqualsMaskHelper.EqualsHelper(
                item.Unused,
                rhs.Unused,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unused2 = EqualsMaskHelper.EqualsHelper(
                item.Unused2,
                rhs.Unused2,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Quest = item.Quest.Equals(rhs.Quest);
            ret.LastActionIndex = item.LastActionIndex == rhs.LastActionIndex;
            ret.VNAM = MemorySliceExt.Equal(item.VNAM, rhs.VNAM);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ISceneGetter item,
            string? name = null,
            Scene.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISceneGetter item,
            FileGeneration fg,
            string? name = null,
            Scene.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Scene =>");
            }
            else
            {
                fg.AppendLine($"{name} (Scene) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISceneGetter item,
            FileGeneration fg,
            Scene.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.Phases?.Overall ?? true)
            {
                fg.AppendLine("Phases =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Phases)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Actors?.Overall ?? true)
            {
                fg.AppendLine("Actors =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Actors)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Actions?.Overall ?? true)
            {
                fg.AppendLine("Actions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Actions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Unused?.Overall ?? true)
                && item.Unused.TryGet(out var UnusedItem))
            {
                UnusedItem?.ToString(fg, "Unused");
            }
            if ((printMask?.Unused2?.Overall ?? true)
                && item.Unused2.TryGet(out var Unused2Item))
            {
                Unused2Item?.ToString(fg, "Unused2");
            }
            if (printMask?.Quest ?? true)
            {
                fg.AppendItem(item.Quest.FormKeyNullable, "Quest");
            }
            if ((printMask?.LastActionIndex ?? true)
                && item.LastActionIndex.TryGet(out var LastActionIndexItem))
            {
                fg.AppendItem(LastActionIndexItem, "LastActionIndex");
            }
            if ((printMask?.VNAM ?? true)
                && item.VNAM.TryGet(out var VNAMItem))
            {
                fg.AppendLine($"VNAM => {SpanExt.ToHexString(VNAMItem)}");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static Scene_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Scene_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Scene_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Scene_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Scene_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Scene_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Scene_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Scene_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Scene_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Scene_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Scene_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Scene_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISceneGetter? lhs,
            ISceneGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.Phases.SequenceEqualNullable(rhs.Phases)) return false;
            if (!lhs.Actors.SequenceEqualNullable(rhs.Actors)) return false;
            if (!lhs.Actions.SequenceEqualNullable(rhs.Actions)) return false;
            if (!object.Equals(lhs.Unused, rhs.Unused)) return false;
            if (!object.Equals(lhs.Unused2, rhs.Unused2)) return false;
            if (!lhs.Quest.Equals(rhs.Quest)) return false;
            if (lhs.LastActionIndex != rhs.LastActionIndex) return false;
            if (!MemorySliceExt.Equal(lhs.VNAM, rhs.VNAM)) return false;
            if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions)) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISceneGetter?)lhs,
                rhs: rhs as ISceneGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISceneGetter?)lhs,
                rhs: rhs as ISceneGetter);
        }
        
        public virtual int GetHashCode(ISceneGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.Phases);
            hash.Add(item.Actors);
            hash.Add(item.Actions);
            if (item.Unused.TryGet(out var Unuseditem))
            {
                hash.Add(Unuseditem);
            }
            if (item.Unused2.TryGet(out var Unused2item))
            {
                hash.Add(Unused2item);
            }
            hash.Add(item.Quest);
            if (item.LastActionIndex.TryGet(out var LastActionIndexitem))
            {
                hash.Add(LastActionIndexitem);
            }
            if (item.VNAM.TryGet(out var VNAMItem))
            {
                hash.Add(VNAMItem);
            }
            hash.Add(item.Conditions);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ISceneGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISceneGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Scene.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ISceneGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Phases.WhereCastable<IScenePhaseGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Actions.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Quest.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.Quest);
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public Scene Duplicate(
            ISceneGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Scene(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IScene)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IScene)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class SceneSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly SceneSetterTranslationCommon Instance = new SceneSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISceneInternal item,
            ISceneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IScene item,
            ISceneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Scene_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Phases) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.Phases);
                try
                {
                    item.Phases.SetTo(
                        rhs.Phases
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Actors) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.Actors);
                try
                {
                    item.Actors.SetTo(
                        rhs.Actors
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Actions) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.Actions);
                try
                {
                    item.Actions.SetTo(
                        rhs.Actions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Unused) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.Unused);
                try
                {
                    if(rhs.Unused.TryGet(out var rhsUnused))
                    {
                        item.Unused = rhsUnused.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Scene_FieldIndex.Unused));
                    }
                    else
                    {
                        item.Unused = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Unused2) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.Unused2);
                try
                {
                    if(rhs.Unused2.TryGet(out var rhsUnused2))
                    {
                        item.Unused2 = rhsUnused2.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Scene_FieldIndex.Unused2));
                    }
                    else
                    {
                        item.Unused2 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Quest) ?? true))
            {
                item.Quest = new FormLinkNullable<IQuestGetter>(rhs.Quest.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.LastActionIndex) ?? true))
            {
                item.LastActionIndex = rhs.LastActionIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.VNAM) ?? true))
            {
                if(rhs.VNAM.TryGet(out var VNAMrhs))
                {
                    item.VNAM = VNAMrhs.ToArray();
                }
                else
                {
                    item.VNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scene_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)Scene_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISceneInternal)item,
                rhs: (ISceneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScene)item,
                rhs: (ISceneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISceneInternal)item,
                rhs: (ISceneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScene)item,
                rhs: (ISceneGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Scene DeepCopy(
            ISceneGetter item,
            Scene.TranslationMask? copyMask = null)
        {
            Scene ret = (Scene)((SceneCommon)((ISceneGetter)item).CommonInstance()!).GetNew();
            ((SceneSetterTranslationCommon)((ISceneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Scene DeepCopy(
            ISceneGetter item,
            out Scene.ErrorMask errorMask,
            Scene.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Scene ret = (Scene)((SceneCommon)((ISceneGetter)item).CommonInstance()!).GetNew();
            ((SceneSetterTranslationCommon)((ISceneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Scene.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Scene DeepCopy(
            ISceneGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Scene ret = (Scene)((SceneCommon)((ISceneGetter)item).CommonInstance()!).GetNew();
            ((SceneSetterTranslationCommon)((ISceneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Scene
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Scene_Registration.Instance;
        public new static Scene_Registration Registration => Scene_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SceneCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SceneSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SceneSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SceneBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SceneBinaryWriteTranslation Instance = new SceneBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            ISceneGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            ISceneGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            ISceneGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((SceneAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Scene.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IScenePhaseGetter>.Instance.Write(
                writer: writer,
                items: item.Phases,
                transl: (MutagenWriter subWriter, IScenePhaseGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((ScenePhaseBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ISceneActorGetter>.Instance.Write(
                writer: writer,
                items: item.Actors,
                transl: (MutagenWriter subWriter, ISceneActorGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((SceneActorBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ISceneActionGetter>.Instance.Write(
                writer: writer,
                items: item.Actions,
                transl: (MutagenWriter subWriter, ISceneActionGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((SceneActionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.Unused.TryGet(out var UnusedItem))
            {
                ((ScenePhaseUnusedDataBinaryWriteTranslation)((IBinaryItem)UnusedItem).BinaryWriteTranslator).Write(
                    item: UnusedItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Unused2.TryGet(out var Unused2Item))
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.NEXT)) { }
                ((ScenePhaseUnusedDataBinaryWriteTranslation)((IBinaryItem)Unused2Item).BinaryWriteTranslator).Write(
                    item: Unused2Item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Quest,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.PNAM));
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LastActionIndex,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.INAM));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.VNAM));
            SceneBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            ISceneGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.SCEN),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISceneGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISceneGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISceneGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SceneBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static SceneBinaryCreateTranslation Instance = new SceneBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SCEN;
        public static void FillBinaryStructs(
            ISceneInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ISceneInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.SceneAdapter.CreateFromBinary(frame: frame);
                    return (int)Scene_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Scene.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Scene_FieldIndex.Flags;
                }
                case RecordTypeInts.HNAM:
                {
                    item.Phases.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ScenePhase>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.HNAM,
                            recordTypeConverter: recordTypeConverter,
                            transl: ScenePhase.TryCreateFromBinary));
                    return (int)Scene_FieldIndex.Phases;
                }
                case RecordTypeInts.ALID:
                {
                    item.Actors.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<SceneActor>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.ALID,
                            recordTypeConverter: recordTypeConverter,
                            transl: SceneActor.TryCreateFromBinary));
                    return (int)Scene_FieldIndex.Actors;
                }
                case RecordTypeInts.ANAM:
                {
                    item.Actions.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<SceneAction>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.ANAM,
                            recordTypeConverter: recordTypeConverter,
                            transl: SceneAction.TryCreateFromBinary));
                    return (int)Scene_FieldIndex.Actions;
                }
                case RecordTypeInts.SCHR:
                case RecordTypeInts.SCDA:
                case RecordTypeInts.SCTX:
                case RecordTypeInts.QNAM:
                case RecordTypeInts.SCRO:
                {
                    item.Unused = Mutagen.Bethesda.Fallout4.ScenePhaseUnusedData.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Scene_FieldIndex.Unused;
                }
                case RecordTypeInts.NEXT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.Unused2 = Mutagen.Bethesda.Fallout4.ScenePhaseUnusedData.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Scene_FieldIndex.Unused2;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Quest = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Scene_FieldIndex.Quest;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LastActionIndex = frame.ReadUInt32();
                    return (int)Scene_FieldIndex.LastActionIndex;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Scene_FieldIndex.VNAM;
                }
                case RecordTypeInts.CTDA:
                {
                    SceneBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Scene_FieldIndex.Conditions;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            ISceneInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SceneBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SceneBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ISceneGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Scene_Registration.Instance;
        public new static Scene_Registration Registration => Scene_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SceneCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SceneSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => SceneCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SceneBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SceneBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public ISceneAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? SceneAdapterBinaryOverlay.SceneAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Scene.Flag? Flags => _FlagsLocation.HasValue ? (Scene.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(Scene.Flag?);
        #endregion
        public IReadOnlyList<IScenePhaseGetter> Phases { get; private set; } = ListExt.Empty<ScenePhaseBinaryOverlay>();
        public IReadOnlyList<ISceneActorGetter> Actors { get; private set; } = ListExt.Empty<SceneActorBinaryOverlay>();
        public IReadOnlyList<ISceneActionGetter> Actions { get; private set; } = ListExt.Empty<SceneActionBinaryOverlay>();
        public IScenePhaseUnusedDataGetter? Unused { get; private set; }
        public IScenePhaseUnusedDataGetter? Unused2 { get; private set; }
        #region Quest
        private int? _QuestLocation;
        public FormLinkNullable<IQuestGetter> Quest => _QuestLocation.HasValue ? new FormLinkNullable<IQuestGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _QuestLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IQuestGetter>.Null;
        #endregion
        #region LastActionIndex
        private int? _LastActionIndexLocation;
        public UInt32? LastActionIndex => _LastActionIndexLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LastActionIndexLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region VNAM
        private int? _VNAMLocation;
        public ReadOnlyMemorySlice<Byte>? VNAM => _VNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _VNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SceneBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static SceneBinaryOverlay SceneFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new SceneBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static SceneBinaryOverlay SceneFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return SceneFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Scene_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.Flags;
                }
                case RecordTypeInts.HNAM:
                {
                    this.Phases = this.ParseRepeatedTypelessSubrecord<ScenePhaseBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: RecordTypes.HNAM,
                        factory:  ScenePhaseBinaryOverlay.ScenePhaseFactory);
                    return (int)Scene_FieldIndex.Phases;
                }
                case RecordTypeInts.ALID:
                {
                    this.Actors = this.ParseRepeatedTypelessSubrecord<SceneActorBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: RecordTypes.ALID,
                        factory:  SceneActorBinaryOverlay.SceneActorFactory);
                    return (int)Scene_FieldIndex.Actors;
                }
                case RecordTypeInts.ANAM:
                {
                    this.Actions = this.ParseRepeatedTypelessSubrecord<SceneActionBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: RecordTypes.ANAM,
                        factory:  SceneActionBinaryOverlay.SceneActionFactory);
                    return (int)Scene_FieldIndex.Actions;
                }
                case RecordTypeInts.SCHR:
                case RecordTypeInts.SCDA:
                case RecordTypeInts.SCTX:
                case RecordTypeInts.QNAM:
                case RecordTypeInts.SCRO:
                {
                    this.Unused = ScenePhaseUnusedDataBinaryOverlay.ScenePhaseUnusedDataFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Scene_FieldIndex.Unused;
                }
                case RecordTypeInts.NEXT:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.Unused2 = ScenePhaseUnusedDataBinaryOverlay.ScenePhaseUnusedDataFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Scene_FieldIndex.Unused2;
                }
                case RecordTypeInts.PNAM:
                {
                    _QuestLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.Quest;
                }
                case RecordTypeInts.INAM:
                {
                    _LastActionIndexLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.LastActionIndex;
                }
                case RecordTypeInts.VNAM:
                {
                    _VNAMLocation = (stream.Position - offset);
                    return (int)Scene_FieldIndex.VNAM;
                }
                case RecordTypeInts.CTDA:
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Scene_FieldIndex.Conditions;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SceneMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISceneGetter rhs)) return false;
            return ((SceneCommon)((ISceneGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISceneGetter? obj)
        {
            return ((SceneCommon)((ISceneGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SceneCommon)((ISceneGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

