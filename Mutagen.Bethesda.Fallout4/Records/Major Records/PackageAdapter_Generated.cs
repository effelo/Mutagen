/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PackageAdapter :
        AVirtualMachineAdapter,
        IPackageAdapter,
        ILoquiObjectSetter<PackageAdapter>,
        IEquatable<IPackageAdapterGetter>
    {
        #region Ctor
        public PackageAdapter()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ScriptFragments
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PackageScriptFragments? _ScriptFragments;
        public PackageScriptFragments? ScriptFragments
        {
            get => _ScriptFragments;
            set => _ScriptFragments = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPackageScriptFragmentsGetter? IPackageAdapterGetter.ScriptFragments => this.ScriptFragments;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageAdapterMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPackageAdapterGetter rhs)) return false;
            return ((PackageAdapterCommon)((IPackageAdapterGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPackageAdapterGetter? obj)
        {
            return ((PackageAdapterCommon)((IPackageAdapterGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PackageAdapterCommon)((IPackageAdapterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AVirtualMachineAdapter.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ScriptFragments = new MaskItem<TItem, PackageScriptFragments.Mask<TItem>?>(initialValue, new PackageScriptFragments.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Version,
                TItem ObjectFormat,
                TItem Scripts,
                TItem ScriptFragments)
            : base(
                Version: Version,
                ObjectFormat: ObjectFormat,
                Scripts: Scripts)
            {
                this.ScriptFragments = new MaskItem<TItem, PackageScriptFragments.Mask<TItem>?>(ScriptFragments, new PackageScriptFragments.Mask<TItem>(ScriptFragments));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, PackageScriptFragments.Mask<TItem>?>? ScriptFragments { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ScriptFragments, rhs.ScriptFragments)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ScriptFragments);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ScriptFragments != null)
                {
                    if (!eval(this.ScriptFragments.Overall)) return false;
                    if (this.ScriptFragments.Specific != null && !this.ScriptFragments.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ScriptFragments != null)
                {
                    if (eval(this.ScriptFragments.Overall)) return true;
                    if (this.ScriptFragments.Specific != null && this.ScriptFragments.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PackageAdapter.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ScriptFragments = this.ScriptFragments == null ? null : new MaskItem<R, PackageScriptFragments.Mask<R>?>(eval(this.ScriptFragments.Overall), this.ScriptFragments.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PackageAdapter.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PackageAdapter.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PackageAdapter.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ScriptFragments?.Overall ?? true)
                    {
                        ScriptFragments?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            AVirtualMachineAdapter.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, PackageScriptFragments.ErrorMask?>? ScriptFragments;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PackageAdapter_FieldIndex enu = (PackageAdapter_FieldIndex)index;
                switch (enu)
                {
                    case PackageAdapter_FieldIndex.ScriptFragments:
                        return ScriptFragments;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PackageAdapter_FieldIndex enu = (PackageAdapter_FieldIndex)index;
                switch (enu)
                {
                    case PackageAdapter_FieldIndex.ScriptFragments:
                        this.ScriptFragments = new MaskItem<Exception?, PackageScriptFragments.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PackageAdapter_FieldIndex enu = (PackageAdapter_FieldIndex)index;
                switch (enu)
                {
                    case PackageAdapter_FieldIndex.ScriptFragments:
                        this.ScriptFragments = (MaskItem<Exception?, PackageScriptFragments.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ScriptFragments != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ScriptFragments?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ScriptFragments = this.ScriptFragments.Combine(rhs.ScriptFragments, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AVirtualMachineAdapter.TranslationMask,
            ITranslationMask
        {
            #region Members
            public PackageScriptFragments.TranslationMask? ScriptFragments;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ScriptFragments != null ? ScriptFragments.OnOverall : DefaultOn, ScriptFragments?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PackageAdapter_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PackageAdapterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageAdapterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static PackageAdapter CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PackageAdapter();
            ((PackageAdapterSetterCommon)((IPackageAdapterGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PackageAdapter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((PackageAdapterSetterCommon)((IPackageAdapterGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PackageAdapter GetNew()
        {
            return new PackageAdapter();
        }

    }
    #endregion

    #region Interface
    public partial interface IPackageAdapter :
        IPackageAdapterGetter,
        IAVirtualMachineAdapter,
        ILoquiObjectSetter<IPackageAdapter>
    {
        new PackageScriptFragments? ScriptFragments { get; set; }
    }

    public partial interface IPackageAdapterGetter :
        IAVirtualMachineAdapterGetter,
        ILoquiObject<IPackageAdapterGetter>,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => PackageAdapter_Registration.Instance;
        IPackageScriptFragmentsGetter? ScriptFragments { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PackageAdapterMixIn
    {
        public static void Clear(this IPackageAdapter item)
        {
            ((PackageAdapterSetterCommon)((IPackageAdapterGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PackageAdapter.Mask<bool> GetEqualsMask(
            this IPackageAdapterGetter item,
            IPackageAdapterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PackageAdapterCommon)((IPackageAdapterGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPackageAdapterGetter item,
            string? name = null,
            PackageAdapter.Mask<bool>? printMask = null)
        {
            return ((PackageAdapterCommon)((IPackageAdapterGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPackageAdapterGetter item,
            FileGeneration fg,
            string? name = null,
            PackageAdapter.Mask<bool>? printMask = null)
        {
            ((PackageAdapterCommon)((IPackageAdapterGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPackageAdapterGetter item,
            IPackageAdapterGetter rhs)
        {
            return ((PackageAdapterCommon)((IPackageAdapterGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPackageAdapter lhs,
            IPackageAdapterGetter rhs,
            out PackageAdapter.ErrorMask errorMask,
            PackageAdapter.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PackageAdapterSetterTranslationCommon)((IPackageAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PackageAdapter.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPackageAdapter lhs,
            IPackageAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PackageAdapterSetterTranslationCommon)((IPackageAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PackageAdapter DeepCopy(
            this IPackageAdapterGetter item,
            PackageAdapter.TranslationMask? copyMask = null)
        {
            return ((PackageAdapterSetterTranslationCommon)((IPackageAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PackageAdapter DeepCopy(
            this IPackageAdapterGetter item,
            out PackageAdapter.ErrorMask errorMask,
            PackageAdapter.TranslationMask? copyMask = null)
        {
            return ((PackageAdapterSetterTranslationCommon)((IPackageAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PackageAdapter DeepCopy(
            this IPackageAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PackageAdapterSetterTranslationCommon)((IPackageAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPackageAdapter item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageAdapterSetterCommon)((IPackageAdapterGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum PackageAdapter_FieldIndex
    {
        Version = 0,
        ObjectFormat = 1,
        Scripts = 2,
        ScriptFragments = 3,
    }
    #endregion

    #region Registration
    public partial class PackageAdapter_Registration : ILoquiRegistration
    {
        public static readonly PackageAdapter_Registration Instance = new PackageAdapter_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 352,
            version: 0);

        public const string GUID = "b6994042-d407-490d-8387-54e33396f705";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(PackageAdapter.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PackageAdapter.ErrorMask);

        public static readonly Type ClassType = typeof(PackageAdapter);

        public static readonly Type GetterType = typeof(IPackageAdapterGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPackageAdapter);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.PackageAdapter";

        public const string Name = "PackageAdapter";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.VMAD;
        public static readonly Type BinaryWriteTranslation = typeof(PackageAdapterBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class PackageAdapterSetterCommon : AVirtualMachineAdapterSetterCommon
    {
        public new static readonly PackageAdapterSetterCommon Instance = new PackageAdapterSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPackageAdapter item)
        {
            ClearPartial();
            item.ScriptFragments = null;
            base.Clear(item);
        }
        
        public override void Clear(IAVirtualMachineAdapter item)
        {
            Clear(item: (IPackageAdapter)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPackageAdapter obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPackageAdapter item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.VMAD)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PackageAdapterBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IAVirtualMachineAdapter item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (PackageAdapter)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class PackageAdapterCommon : AVirtualMachineAdapterCommon
    {
        public new static readonly PackageAdapterCommon Instance = new PackageAdapterCommon();

        public PackageAdapter.Mask<bool> GetEqualsMask(
            IPackageAdapterGetter item,
            IPackageAdapterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PackageAdapter.Mask<bool>(false);
            ((PackageAdapterCommon)((IPackageAdapterGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPackageAdapterGetter item,
            IPackageAdapterGetter rhs,
            PackageAdapter.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ScriptFragments = EqualsMaskHelper.EqualsHelper(
                item.ScriptFragments,
                rhs.ScriptFragments,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPackageAdapterGetter item,
            string? name = null,
            PackageAdapter.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPackageAdapterGetter item,
            FileGeneration fg,
            string? name = null,
            PackageAdapter.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PackageAdapter =>");
            }
            else
            {
                fg.AppendLine($"{name} (PackageAdapter) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPackageAdapterGetter item,
            FileGeneration fg,
            PackageAdapter.Mask<bool>? printMask = null)
        {
            AVirtualMachineAdapterCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.ScriptFragments?.Overall ?? true)
                && item.ScriptFragments.TryGet(out var ScriptFragmentsItem))
            {
                ScriptFragmentsItem?.ToString(fg, "ScriptFragments");
            }
        }
        
        public static PackageAdapter_FieldIndex ConvertFieldIndex(AVirtualMachineAdapter_FieldIndex index)
        {
            switch (index)
            {
                case AVirtualMachineAdapter_FieldIndex.Version:
                    return (PackageAdapter_FieldIndex)((int)index);
                case AVirtualMachineAdapter_FieldIndex.ObjectFormat:
                    return (PackageAdapter_FieldIndex)((int)index);
                case AVirtualMachineAdapter_FieldIndex.Scripts:
                    return (PackageAdapter_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPackageAdapterGetter? lhs,
            IPackageAdapterGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IAVirtualMachineAdapterGetter)lhs, (IAVirtualMachineAdapterGetter)rhs)) return false;
            if (!object.Equals(lhs.ScriptFragments, rhs.ScriptFragments)) return false;
            return true;
        }
        
        public override bool Equals(
            IAVirtualMachineAdapterGetter? lhs,
            IAVirtualMachineAdapterGetter? rhs)
        {
            return Equals(
                lhs: (IPackageAdapterGetter?)lhs,
                rhs: rhs as IPackageAdapterGetter);
        }
        
        public virtual int GetHashCode(IPackageAdapterGetter item)
        {
            var hash = new HashCode();
            if (item.ScriptFragments.TryGet(out var ScriptFragmentsitem))
            {
                hash.Add(ScriptFragmentsitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAVirtualMachineAdapterGetter item)
        {
            return GetHashCode(item: (IPackageAdapterGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PackageAdapter.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IPackageAdapterGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class PackageAdapterSetterTranslationCommon : AVirtualMachineAdapterSetterTranslationCommon
    {
        public new static readonly PackageAdapterSetterTranslationCommon Instance = new PackageAdapterSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPackageAdapter item,
            IPackageAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAVirtualMachineAdapter)item,
                (IAVirtualMachineAdapterGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PackageAdapter_FieldIndex.ScriptFragments) ?? true))
            {
                errorMask?.PushIndex((int)PackageAdapter_FieldIndex.ScriptFragments);
                try
                {
                    if(rhs.ScriptFragments.TryGet(out var rhsScriptFragments))
                    {
                        item.ScriptFragments = rhsScriptFragments.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PackageAdapter_FieldIndex.ScriptFragments));
                    }
                    else
                    {
                        item.ScriptFragments = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IAVirtualMachineAdapter item,
            IAVirtualMachineAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPackageAdapter)item,
                rhs: (IPackageAdapterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PackageAdapter DeepCopy(
            IPackageAdapterGetter item,
            PackageAdapter.TranslationMask? copyMask = null)
        {
            PackageAdapter ret = (PackageAdapter)((PackageAdapterCommon)((IPackageAdapterGetter)item).CommonInstance()!).GetNew();
            ((PackageAdapterSetterTranslationCommon)((IPackageAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PackageAdapter DeepCopy(
            IPackageAdapterGetter item,
            out PackageAdapter.ErrorMask errorMask,
            PackageAdapter.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PackageAdapter ret = (PackageAdapter)((PackageAdapterCommon)((IPackageAdapterGetter)item).CommonInstance()!).GetNew();
            ((PackageAdapterSetterTranslationCommon)((IPackageAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PackageAdapter.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PackageAdapter DeepCopy(
            IPackageAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PackageAdapter ret = (PackageAdapter)((PackageAdapterCommon)((IPackageAdapterGetter)item).CommonInstance()!).GetNew();
            ((PackageAdapterSetterTranslationCommon)((IPackageAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PackageAdapter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageAdapter_Registration.Instance;
        public new static PackageAdapter_Registration Registration => PackageAdapter_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PackageAdapterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PackageAdapterSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PackageAdapterSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PackageAdapterBinaryWriteTranslation :
        AVirtualMachineAdapterBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PackageAdapterBinaryWriteTranslation Instance = new PackageAdapterBinaryWriteTranslation();

        static partial void WriteBinaryScriptFragmentsCustom(
            MutagenWriter writer,
            IPackageAdapterGetter item);

        public static void WriteBinaryScriptFragments(
            MutagenWriter writer,
            IPackageAdapterGetter item)
        {
            WriteBinaryScriptFragmentsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IPackageAdapterGetter item,
            MutagenWriter writer)
        {
            AVirtualMachineAdapterBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            PackageAdapterBinaryWriteTranslation.WriteBinaryScriptFragments(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IPackageAdapterGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.VMAD),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageAdapterGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAVirtualMachineAdapterGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPackageAdapterGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PackageAdapterBinaryCreateTranslation : AVirtualMachineAdapterBinaryCreateTranslation
    {
        public new readonly static PackageAdapterBinaryCreateTranslation Instance = new PackageAdapterBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPackageAdapter item,
            MutagenFrame frame)
        {
            AVirtualMachineAdapterBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            if (frame.Complete) return;
            PackageAdapterBinaryCreateTranslation.FillBinaryScriptFragmentsCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryScriptFragmentsCustom(
            MutagenFrame frame,
            IPackageAdapter item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PackageAdapterBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class PackageAdapterBinaryOverlay :
        AVirtualMachineAdapterBinaryOverlay,
        IPackageAdapterGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PackageAdapter_Registration.Instance;
        public new static PackageAdapter_Registration Registration => PackageAdapter_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PackageAdapterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PackageAdapterSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PackageAdapterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PackageAdapterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ScriptFragments
        public IPackageScriptFragmentsGetter? ScriptFragments => GetScriptFragmentsCustom(location: ScriptsEndingPos);
        protected int ScriptFragmentsEndingPos;
        partial void CustomScriptFragmentsEndPos();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PackageAdapterBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static PackageAdapterBinaryOverlay PackageAdapterFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PackageAdapterBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            ret.CustomScriptFragmentsEndPos();
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static PackageAdapterBinaryOverlay PackageAdapterFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PackageAdapterFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PackageAdapterMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPackageAdapterGetter rhs)) return false;
            return ((PackageAdapterCommon)((IPackageAdapterGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IPackageAdapterGetter? obj)
        {
            return ((PackageAdapterCommon)((IPackageAdapterGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PackageAdapterCommon)((IPackageAdapterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

