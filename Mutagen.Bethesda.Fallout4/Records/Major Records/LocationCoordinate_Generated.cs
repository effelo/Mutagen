/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class LocationCoordinate :
        ILocationCoordinate,
        ILoquiObjectSetter<LocationCoordinate>,
        IEquatable<ILocationCoordinateGetter>
    {
        #region Ctor
        public LocationCoordinate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Location
        public FormLink<IComplexLocationGetter> Location { get; set; } = new FormLink<IComplexLocationGetter>();
        #endregion
        #region Coordinates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<P2Int16> _Coordinates = new ExtendedList<P2Int16>();
        public ExtendedList<P2Int16> Coordinates
        {
            get => this._Coordinates;
            protected set => this._Coordinates = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<P2Int16> ILocationCoordinateGetter.Coordinates => _Coordinates;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LocationCoordinateMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILocationCoordinateGetter rhs)) return false;
            return ((LocationCoordinateCommon)((ILocationCoordinateGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILocationCoordinateGetter? obj)
        {
            return ((LocationCoordinateCommon)((ILocationCoordinateGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LocationCoordinateCommon)((ILocationCoordinateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Location = initialValue;
                this.Coordinates = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem Location,
                TItem Coordinates)
            {
                this.Location = Location;
                this.Coordinates = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Coordinates, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Location;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Coordinates;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.Coordinates, rhs.Coordinates)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Location);
                hash.Add(this.Coordinates);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Location)) return false;
                if (this.Coordinates != null)
                {
                    if (!eval(this.Coordinates.Overall)) return false;
                    if (this.Coordinates.Specific != null)
                    {
                        foreach (var item in this.Coordinates.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Location)) return true;
                if (this.Coordinates != null)
                {
                    if (eval(this.Coordinates.Overall)) return true;
                    if (this.Coordinates.Specific != null)
                    {
                        foreach (var item in this.Coordinates.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LocationCoordinate.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Location = eval(this.Location);
                if (Coordinates != null)
                {
                    obj.Coordinates = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Coordinates.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Coordinates.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Coordinates.Specific = l;
                        foreach (var item in Coordinates.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LocationCoordinate.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LocationCoordinate.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LocationCoordinate.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Location ?? true)
                    {
                        fg.AppendItem(Location, "Location");
                    }
                    if ((printMask?.Coordinates?.Overall ?? true)
                        && Coordinates.TryGet(out var CoordinatesItem))
                    {
                        fg.AppendLine("Coordinates =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(CoordinatesItem.Overall);
                            if (CoordinatesItem.Specific != null)
                            {
                                foreach (var subItem in CoordinatesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Location;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Coordinates;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LocationCoordinate_FieldIndex enu = (LocationCoordinate_FieldIndex)index;
                switch (enu)
                {
                    case LocationCoordinate_FieldIndex.Location:
                        return Location;
                    case LocationCoordinate_FieldIndex.Coordinates:
                        return Coordinates;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LocationCoordinate_FieldIndex enu = (LocationCoordinate_FieldIndex)index;
                switch (enu)
                {
                    case LocationCoordinate_FieldIndex.Location:
                        this.Location = ex;
                        break;
                    case LocationCoordinate_FieldIndex.Coordinates:
                        this.Coordinates = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LocationCoordinate_FieldIndex enu = (LocationCoordinate_FieldIndex)index;
                switch (enu)
                {
                    case LocationCoordinate_FieldIndex.Location:
                        this.Location = (Exception?)obj;
                        break;
                    case LocationCoordinate_FieldIndex.Coordinates:
                        this.Coordinates = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Location != null) return true;
                if (Coordinates != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Location, "Location");
                if (Coordinates.TryGet(out var CoordinatesItem))
                {
                    fg.AppendLine("Coordinates =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(CoordinatesItem.Overall);
                        if (CoordinatesItem.Specific != null)
                        {
                            foreach (var subItem in CoordinatesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Location = this.Location.Combine(rhs.Location);
                ret.Coordinates = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Coordinates?.Overall, rhs.Coordinates?.Overall), ExceptionExt.Combine(this.Coordinates?.Specific, rhs.Coordinates?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Location;
            public bool Coordinates;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Location = defaultOn;
                this.Coordinates = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Location, null));
                ret.Add((Coordinates, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<FormLinkInformation> ContainedFormLinks => LocationCoordinateCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LocationCoordinateSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocationCoordinateBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LocationCoordinateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static LocationCoordinate CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LocationCoordinate();
            ((LocationCoordinateSetterCommon)((ILocationCoordinateGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LocationCoordinate item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((LocationCoordinateSetterCommon)((ILocationCoordinateGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LocationCoordinate GetNew()
        {
            return new LocationCoordinate();
        }

    }
    #endregion

    #region Interface
    public partial interface ILocationCoordinate :
        ILocationCoordinateGetter,
        ILoquiObjectSetter<ILocationCoordinate>,
        IFormLinkContainer
    {
        new FormLink<IComplexLocationGetter> Location { get; set; }
        new ExtendedList<P2Int16> Coordinates { get; }
    }

    public partial interface ILocationCoordinateGetter :
        ILoquiObject,
        ILoquiObject<ILocationCoordinateGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => LocationCoordinate_Registration.Instance;
        FormLink<IComplexLocationGetter> Location { get; }
        IReadOnlyList<P2Int16> Coordinates { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LocationCoordinateMixIn
    {
        public static void Clear(this ILocationCoordinate item)
        {
            ((LocationCoordinateSetterCommon)((ILocationCoordinateGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LocationCoordinate.Mask<bool> GetEqualsMask(
            this ILocationCoordinateGetter item,
            ILocationCoordinateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LocationCoordinateCommon)((ILocationCoordinateGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILocationCoordinateGetter item,
            string? name = null,
            LocationCoordinate.Mask<bool>? printMask = null)
        {
            return ((LocationCoordinateCommon)((ILocationCoordinateGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILocationCoordinateGetter item,
            FileGeneration fg,
            string? name = null,
            LocationCoordinate.Mask<bool>? printMask = null)
        {
            ((LocationCoordinateCommon)((ILocationCoordinateGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILocationCoordinateGetter item,
            ILocationCoordinateGetter rhs)
        {
            return ((LocationCoordinateCommon)((ILocationCoordinateGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILocationCoordinate lhs,
            ILocationCoordinateGetter rhs)
        {
            ((LocationCoordinateSetterTranslationCommon)((ILocationCoordinateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILocationCoordinate lhs,
            ILocationCoordinateGetter rhs,
            LocationCoordinate.TranslationMask? copyMask = null)
        {
            ((LocationCoordinateSetterTranslationCommon)((ILocationCoordinateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ILocationCoordinate lhs,
            ILocationCoordinateGetter rhs,
            out LocationCoordinate.ErrorMask errorMask,
            LocationCoordinate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LocationCoordinateSetterTranslationCommon)((ILocationCoordinateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LocationCoordinate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILocationCoordinate lhs,
            ILocationCoordinateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LocationCoordinateSetterTranslationCommon)((ILocationCoordinateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LocationCoordinate DeepCopy(
            this ILocationCoordinateGetter item,
            LocationCoordinate.TranslationMask? copyMask = null)
        {
            return ((LocationCoordinateSetterTranslationCommon)((ILocationCoordinateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LocationCoordinate DeepCopy(
            this ILocationCoordinateGetter item,
            out LocationCoordinate.ErrorMask errorMask,
            LocationCoordinate.TranslationMask? copyMask = null)
        {
            return ((LocationCoordinateSetterTranslationCommon)((ILocationCoordinateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LocationCoordinate DeepCopy(
            this ILocationCoordinateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LocationCoordinateSetterTranslationCommon)((ILocationCoordinateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILocationCoordinate item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LocationCoordinateSetterCommon)((ILocationCoordinateGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum LocationCoordinate_FieldIndex
    {
        Location = 0,
        Coordinates = 1,
    }
    #endregion

    #region Registration
    public partial class LocationCoordinate_Registration : ILoquiRegistration
    {
        public static readonly LocationCoordinate_Registration Instance = new LocationCoordinate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 445,
            version: 0);

        public const string GUID = "e9cf5169-5dec-499f-9aca-1b0813c5c9d8";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(LocationCoordinate.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LocationCoordinate.ErrorMask);

        public static readonly Type ClassType = typeof(LocationCoordinate);

        public static readonly Type GetterType = typeof(ILocationCoordinateGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILocationCoordinate);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.LocationCoordinate";

        public const string Name = "LocationCoordinate";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(LocationCoordinateBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class LocationCoordinateSetterCommon
    {
        public static readonly LocationCoordinateSetterCommon Instance = new LocationCoordinateSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILocationCoordinate item)
        {
            ClearPartial();
            item.Location = FormLink<IComplexLocationGetter>.Null;
            item.Coordinates.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ILocationCoordinate obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Location = obj.Location.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILocationCoordinate item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LocationCoordinateBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class LocationCoordinateCommon
    {
        public static readonly LocationCoordinateCommon Instance = new LocationCoordinateCommon();

        public LocationCoordinate.Mask<bool> GetEqualsMask(
            ILocationCoordinateGetter item,
            ILocationCoordinateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LocationCoordinate.Mask<bool>(false);
            ((LocationCoordinateCommon)((ILocationCoordinateGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILocationCoordinateGetter item,
            ILocationCoordinateGetter rhs,
            LocationCoordinate.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Location = item.Location.Equals(rhs.Location);
            ret.Coordinates = item.Coordinates.CollectionEqualsHelper(
                rhs.Coordinates,
                (l, r) => l.Equals(r),
                include);
        }
        
        public string ToString(
            ILocationCoordinateGetter item,
            string? name = null,
            LocationCoordinate.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILocationCoordinateGetter item,
            FileGeneration fg,
            string? name = null,
            LocationCoordinate.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LocationCoordinate =>");
            }
            else
            {
                fg.AppendLine($"{name} (LocationCoordinate) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILocationCoordinateGetter item,
            FileGeneration fg,
            LocationCoordinate.Mask<bool>? printMask = null)
        {
            if (printMask?.Location ?? true)
            {
                fg.AppendItem(item.Location.FormKey, "Location");
            }
            if (printMask?.Coordinates?.Overall ?? true)
            {
                fg.AppendLine("Coordinates =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Coordinates)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILocationCoordinateGetter? lhs,
            ILocationCoordinateGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Location.Equals(rhs.Location)) return false;
            if (!lhs.Coordinates.SequenceEqualNullable(rhs.Coordinates)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ILocationCoordinateGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Location);
            hash.Add(item.Coordinates);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LocationCoordinate.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ILocationCoordinateGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Location);
            yield break;
        }
        
        #endregion
        
    }
    public partial class LocationCoordinateSetterTranslationCommon
    {
        public static readonly LocationCoordinateSetterTranslationCommon Instance = new LocationCoordinateSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILocationCoordinate item,
            ILocationCoordinateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)LocationCoordinate_FieldIndex.Location) ?? true))
            {
                item.Location = new FormLink<IComplexLocationGetter>(rhs.Location.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)LocationCoordinate_FieldIndex.Coordinates) ?? true))
            {
                errorMask?.PushIndex((int)LocationCoordinate_FieldIndex.Coordinates);
                try
                {
                    item.Coordinates.SetTo(rhs.Coordinates);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public LocationCoordinate DeepCopy(
            ILocationCoordinateGetter item,
            LocationCoordinate.TranslationMask? copyMask = null)
        {
            LocationCoordinate ret = (LocationCoordinate)((LocationCoordinateCommon)((ILocationCoordinateGetter)item).CommonInstance()!).GetNew();
            ((LocationCoordinateSetterTranslationCommon)((ILocationCoordinateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LocationCoordinate DeepCopy(
            ILocationCoordinateGetter item,
            out LocationCoordinate.ErrorMask errorMask,
            LocationCoordinate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LocationCoordinate ret = (LocationCoordinate)((LocationCoordinateCommon)((ILocationCoordinateGetter)item).CommonInstance()!).GetNew();
            ((LocationCoordinateSetterTranslationCommon)((ILocationCoordinateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LocationCoordinate.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LocationCoordinate DeepCopy(
            ILocationCoordinateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LocationCoordinate ret = (LocationCoordinate)((LocationCoordinateCommon)((ILocationCoordinateGetter)item).CommonInstance()!).GetNew();
            ((LocationCoordinateSetterTranslationCommon)((ILocationCoordinateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class LocationCoordinate
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocationCoordinate_Registration.Instance;
        public static LocationCoordinate_Registration Registration => LocationCoordinate_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocationCoordinateCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LocationCoordinateSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocationCoordinateSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocationCoordinateGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILocationCoordinateGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILocationCoordinateGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LocationCoordinateBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LocationCoordinateBinaryWriteTranslation Instance = new LocationCoordinateBinaryWriteTranslation();

        public static void WriteEmbedded(
            ILocationCoordinateGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Location);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<P2Int16>.Instance.Write(
                writer: writer,
                items: item.Coordinates,
                transl: (MutagenWriter subWriter, P2Int16 subItem) =>
                {
                    Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        swapCoords: true);
                });
        }

        public void Write(
            MutagenWriter writer,
            ILocationCoordinateGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILocationCoordinateGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LocationCoordinateBinaryCreateTranslation
    {
        public readonly static LocationCoordinateBinaryCreateTranslation Instance = new LocationCoordinateBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILocationCoordinate item,
            MutagenFrame frame)
        {
            item.Location = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.Coordinates.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<P2Int16>.Instance.Parse(
                    frame: frame,
                    transl: (MutagenFrame r, out P2Int16 listSubItem) =>
                    {
                        listSubItem = Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(
                            r,
                            swapCoords: true);
                        return true;
                    }));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class LocationCoordinateBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILocationCoordinateGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LocationCoordinateBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class LocationCoordinateBinaryOverlay :
        BinaryOverlay,
        ILocationCoordinateGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocationCoordinate_Registration.Instance;
        public static LocationCoordinate_Registration Registration => LocationCoordinate_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LocationCoordinateCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LocationCoordinateSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILocationCoordinateGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILocationCoordinateGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILocationCoordinateGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => LocationCoordinateCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LocationCoordinateBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LocationCoordinateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public FormLink<IComplexLocationGetter> Location => new FormLink<IComplexLocationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x0, 0x4))));
        #region Coordinates
        public IReadOnlyList<P2Int16> Coordinates => BinaryOverlayList.FactoryByStartIndex<P2Int16>(_data.Slice(0x4), _package, 4, (s, p) => P2Int16BinaryTranslation.Read(s, swapCoords: true));
        protected int CoordinatesEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LocationCoordinateBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static LocationCoordinateBinaryOverlay LocationCoordinateFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LocationCoordinateBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CoordinatesEndingPos = ret._data.Length;
            stream.Position += ret.CoordinatesEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static LocationCoordinateBinaryOverlay LocationCoordinateFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LocationCoordinateFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LocationCoordinateMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILocationCoordinateGetter rhs)) return false;
            return ((LocationCoordinateCommon)((ILocationCoordinateGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ILocationCoordinateGetter? obj)
        {
            return ((LocationCoordinateCommon)((ILocationCoordinateGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LocationCoordinateCommon)((ILocationCoordinateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

