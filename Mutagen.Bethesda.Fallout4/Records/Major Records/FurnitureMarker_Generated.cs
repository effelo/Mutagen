/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class FurnitureMarker :
        IFurnitureMarker,
        ILoquiObjectSetter<FurnitureMarker>,
        IEquatable<IFurnitureMarkerGetter>
    {
        #region Ctor
        public FurnitureMarker()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Enabled
        public Boolean Enabled { get; set; } = default;
        #endregion
        #region DisabledEntryPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EntryPoints? _DisabledEntryPoints;
        public EntryPoints? DisabledEntryPoints
        {
            get => _DisabledEntryPoints;
            set => _DisabledEntryPoints = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEntryPointsGetter? IFurnitureMarkerGetter.DisabledEntryPoints => this.DisabledEntryPoints;
        #endregion
        #region MarkerKeyword
        public FormLinkNullable<IKeywordGetter> MarkerKeyword { get; set; } = new FormLinkNullable<IKeywordGetter>();
        #endregion
        #region EntryPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EntryPoints? _EntryPoints;
        public EntryPoints? EntryPoints
        {
            get => _EntryPoints;
            set => _EntryPoints = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEntryPointsGetter? IFurnitureMarkerGetter.EntryPoints => this.EntryPoints;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FurnitureMarkerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFurnitureMarkerGetter rhs)) return false;
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IFurnitureMarkerGetter? obj)
        {
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Enabled = initialValue;
                this.DisabledEntryPoints = new MaskItem<TItem, EntryPoints.Mask<TItem>?>(initialValue, new EntryPoints.Mask<TItem>(initialValue));
                this.MarkerKeyword = initialValue;
                this.EntryPoints = new MaskItem<TItem, EntryPoints.Mask<TItem>?>(initialValue, new EntryPoints.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Enabled,
                TItem DisabledEntryPoints,
                TItem MarkerKeyword,
                TItem EntryPoints)
            {
                this.Enabled = Enabled;
                this.DisabledEntryPoints = new MaskItem<TItem, EntryPoints.Mask<TItem>?>(DisabledEntryPoints, new EntryPoints.Mask<TItem>(DisabledEntryPoints));
                this.MarkerKeyword = MarkerKeyword;
                this.EntryPoints = new MaskItem<TItem, EntryPoints.Mask<TItem>?>(EntryPoints, new EntryPoints.Mask<TItem>(EntryPoints));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Enabled;
            public MaskItem<TItem, EntryPoints.Mask<TItem>?>? DisabledEntryPoints { get; set; }
            public TItem MarkerKeyword;
            public MaskItem<TItem, EntryPoints.Mask<TItem>?>? EntryPoints { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Enabled, rhs.Enabled)) return false;
                if (!object.Equals(this.DisabledEntryPoints, rhs.DisabledEntryPoints)) return false;
                if (!object.Equals(this.MarkerKeyword, rhs.MarkerKeyword)) return false;
                if (!object.Equals(this.EntryPoints, rhs.EntryPoints)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Enabled);
                hash.Add(this.DisabledEntryPoints);
                hash.Add(this.MarkerKeyword);
                hash.Add(this.EntryPoints);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Enabled)) return false;
                if (DisabledEntryPoints != null)
                {
                    if (!eval(this.DisabledEntryPoints.Overall)) return false;
                    if (this.DisabledEntryPoints.Specific != null && !this.DisabledEntryPoints.Specific.All(eval)) return false;
                }
                if (!eval(this.MarkerKeyword)) return false;
                if (EntryPoints != null)
                {
                    if (!eval(this.EntryPoints.Overall)) return false;
                    if (this.EntryPoints.Specific != null && !this.EntryPoints.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Enabled)) return true;
                if (DisabledEntryPoints != null)
                {
                    if (eval(this.DisabledEntryPoints.Overall)) return true;
                    if (this.DisabledEntryPoints.Specific != null && this.DisabledEntryPoints.Specific.Any(eval)) return true;
                }
                if (eval(this.MarkerKeyword)) return true;
                if (EntryPoints != null)
                {
                    if (eval(this.EntryPoints.Overall)) return true;
                    if (this.EntryPoints.Specific != null && this.EntryPoints.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FurnitureMarker.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Enabled = eval(this.Enabled);
                obj.DisabledEntryPoints = this.DisabledEntryPoints == null ? null : new MaskItem<R, EntryPoints.Mask<R>?>(eval(this.DisabledEntryPoints.Overall), this.DisabledEntryPoints.Specific?.Translate(eval));
                obj.MarkerKeyword = eval(this.MarkerKeyword);
                obj.EntryPoints = this.EntryPoints == null ? null : new MaskItem<R, EntryPoints.Mask<R>?>(eval(this.EntryPoints.Overall), this.EntryPoints.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FurnitureMarker.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, FurnitureMarker.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(FurnitureMarker.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Enabled ?? true)
                    {
                        fg.AppendItem(Enabled, "Enabled");
                    }
                    if (printMask?.DisabledEntryPoints?.Overall ?? true)
                    {
                        DisabledEntryPoints?.ToString(fg);
                    }
                    if (printMask?.MarkerKeyword ?? true)
                    {
                        fg.AppendItem(MarkerKeyword, "MarkerKeyword");
                    }
                    if (printMask?.EntryPoints?.Overall ?? true)
                    {
                        EntryPoints?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Enabled;
            public MaskItem<Exception?, EntryPoints.ErrorMask?>? DisabledEntryPoints;
            public Exception? MarkerKeyword;
            public MaskItem<Exception?, EntryPoints.ErrorMask?>? EntryPoints;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureMarker_FieldIndex.Enabled:
                        return Enabled;
                    case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                        return DisabledEntryPoints;
                    case FurnitureMarker_FieldIndex.MarkerKeyword:
                        return MarkerKeyword;
                    case FurnitureMarker_FieldIndex.EntryPoints:
                        return EntryPoints;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureMarker_FieldIndex.Enabled:
                        this.Enabled = ex;
                        break;
                    case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                        this.DisabledEntryPoints = new MaskItem<Exception?, EntryPoints.ErrorMask?>(ex, null);
                        break;
                    case FurnitureMarker_FieldIndex.MarkerKeyword:
                        this.MarkerKeyword = ex;
                        break;
                    case FurnitureMarker_FieldIndex.EntryPoints:
                        this.EntryPoints = new MaskItem<Exception?, EntryPoints.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureMarker_FieldIndex.Enabled:
                        this.Enabled = (Exception?)obj;
                        break;
                    case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                        this.DisabledEntryPoints = (MaskItem<Exception?, EntryPoints.ErrorMask?>?)obj;
                        break;
                    case FurnitureMarker_FieldIndex.MarkerKeyword:
                        this.MarkerKeyword = (Exception?)obj;
                        break;
                    case FurnitureMarker_FieldIndex.EntryPoints:
                        this.EntryPoints = (MaskItem<Exception?, EntryPoints.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Enabled != null) return true;
                if (DisabledEntryPoints != null) return true;
                if (MarkerKeyword != null) return true;
                if (EntryPoints != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Enabled, "Enabled");
                DisabledEntryPoints?.ToString(fg);
                fg.AppendItem(MarkerKeyword, "MarkerKeyword");
                EntryPoints?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Enabled = this.Enabled.Combine(rhs.Enabled);
                ret.DisabledEntryPoints = this.DisabledEntryPoints.Combine(rhs.DisabledEntryPoints, (l, r) => l.Combine(r));
                ret.MarkerKeyword = this.MarkerKeyword.Combine(rhs.MarkerKeyword);
                ret.EntryPoints = this.EntryPoints.Combine(rhs.EntryPoints, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Enabled;
            public EntryPoints.TranslationMask? DisabledEntryPoints;
            public bool MarkerKeyword;
            public EntryPoints.TranslationMask? EntryPoints;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Enabled = defaultOn;
                this.MarkerKeyword = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Enabled, null));
                ret.Add((DisabledEntryPoints != null ? DisabledEntryPoints.OnOverall : DefaultOn, DisabledEntryPoints?.GetCrystal()));
                ret.Add((MarkerKeyword, null));
                ret.Add((EntryPoints != null ? EntryPoints.OnOverall : DefaultOn, EntryPoints?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<FormLinkInformation> ContainedFormLinks => FurnitureMarkerCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureMarkerSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FurnitureMarkerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FurnitureMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static FurnitureMarker CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FurnitureMarker();
            ((FurnitureMarkerSetterCommon)((IFurnitureMarkerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FurnitureMarker item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((FurnitureMarkerSetterCommon)((IFurnitureMarkerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static FurnitureMarker GetNew()
        {
            return new FurnitureMarker();
        }

    }
    #endregion

    #region Interface
    public partial interface IFurnitureMarker :
        IFurnitureMarkerGetter,
        ILoquiObjectSetter<IFurnitureMarker>,
        IFormLinkContainer
    {
        new Boolean Enabled { get; set; }
        new EntryPoints? DisabledEntryPoints { get; set; }
        new FormLinkNullable<IKeywordGetter> MarkerKeyword { get; set; }
        new EntryPoints? EntryPoints { get; set; }
    }

    public partial interface IFurnitureMarkerGetter :
        ILoquiObject,
        ILoquiObject<IFurnitureMarkerGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => FurnitureMarker_Registration.Instance;
        Boolean Enabled { get; }
        IEntryPointsGetter? DisabledEntryPoints { get; }
        FormLinkNullable<IKeywordGetter> MarkerKeyword { get; }
        IEntryPointsGetter? EntryPoints { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FurnitureMarkerMixIn
    {
        public static void Clear(this IFurnitureMarker item)
        {
            ((FurnitureMarkerSetterCommon)((IFurnitureMarkerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FurnitureMarker.Mask<bool> GetEqualsMask(
            this IFurnitureMarkerGetter item,
            IFurnitureMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFurnitureMarkerGetter item,
            string? name = null,
            FurnitureMarker.Mask<bool>? printMask = null)
        {
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFurnitureMarkerGetter item,
            FileGeneration fg,
            string? name = null,
            FurnitureMarker.Mask<bool>? printMask = null)
        {
            ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFurnitureMarkerGetter item,
            IFurnitureMarkerGetter rhs)
        {
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFurnitureMarker lhs,
            IFurnitureMarkerGetter rhs)
        {
            ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFurnitureMarker lhs,
            IFurnitureMarkerGetter rhs,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFurnitureMarker lhs,
            IFurnitureMarkerGetter rhs,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FurnitureMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFurnitureMarker lhs,
            IFurnitureMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FurnitureMarker DeepCopy(
            this IFurnitureMarkerGetter item,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            return ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FurnitureMarker DeepCopy(
            this IFurnitureMarkerGetter item,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            return ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FurnitureMarker DeepCopy(
            this IFurnitureMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFurnitureMarker item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FurnitureMarkerSetterCommon)((IFurnitureMarkerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum FurnitureMarker_FieldIndex
    {
        Enabled = 0,
        DisabledEntryPoints = 1,
        MarkerKeyword = 2,
        EntryPoints = 3,
    }
    #endregion

    #region Registration
    public partial class FurnitureMarker_Registration : ILoquiRegistration
    {
        public static readonly FurnitureMarker_Registration Instance = new FurnitureMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 194,
            version: 0);

        public const string GUID = "947fcdab-6949-4138-a678-cae2ce9086a6";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(FurnitureMarker.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FurnitureMarker.ErrorMask);

        public static readonly Type ClassType = typeof(FurnitureMarker);

        public static readonly Type GetterType = typeof(IFurnitureMarkerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFurnitureMarker);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.FurnitureMarker";

        public const string Name = "FurnitureMarker";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(FurnitureMarkerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class FurnitureMarkerSetterCommon
    {
        public static readonly FurnitureMarkerSetterCommon Instance = new FurnitureMarkerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFurnitureMarker item)
        {
            ClearPartial();
            item.Enabled = default;
            item.DisabledEntryPoints = null;
            item.MarkerKeyword = FormLinkNullable<IKeywordGetter>.Null;
            item.EntryPoints = null;
        }
        
        #region Mutagen
        public void RemapLinks(IFurnitureMarker obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.MarkerKeyword = obj.MarkerKeyword.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFurnitureMarker item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FurnitureMarkerBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class FurnitureMarkerCommon
    {
        public static readonly FurnitureMarkerCommon Instance = new FurnitureMarkerCommon();

        public FurnitureMarker.Mask<bool> GetEqualsMask(
            IFurnitureMarkerGetter item,
            IFurnitureMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FurnitureMarker.Mask<bool>(false);
            ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFurnitureMarkerGetter item,
            IFurnitureMarkerGetter rhs,
            FurnitureMarker.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Enabled = item.Enabled == rhs.Enabled;
            ret.DisabledEntryPoints = EqualsMaskHelper.EqualsHelper(
                item.DisabledEntryPoints,
                rhs.DisabledEntryPoints,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MarkerKeyword = item.MarkerKeyword.Equals(rhs.MarkerKeyword);
            ret.EntryPoints = EqualsMaskHelper.EqualsHelper(
                item.EntryPoints,
                rhs.EntryPoints,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IFurnitureMarkerGetter item,
            string? name = null,
            FurnitureMarker.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFurnitureMarkerGetter item,
            FileGeneration fg,
            string? name = null,
            FurnitureMarker.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FurnitureMarker =>");
            }
            else
            {
                fg.AppendLine($"{name} (FurnitureMarker) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFurnitureMarkerGetter item,
            FileGeneration fg,
            FurnitureMarker.Mask<bool>? printMask = null)
        {
            if (printMask?.Enabled ?? true)
            {
                fg.AppendItem(item.Enabled, "Enabled");
            }
            if ((printMask?.DisabledEntryPoints?.Overall ?? true)
                && item.DisabledEntryPoints.TryGet(out var DisabledEntryPointsItem))
            {
                DisabledEntryPointsItem?.ToString(fg, "DisabledEntryPoints");
            }
            if (printMask?.MarkerKeyword ?? true)
            {
                fg.AppendItem(item.MarkerKeyword.FormKeyNullable, "MarkerKeyword");
            }
            if ((printMask?.EntryPoints?.Overall ?? true)
                && item.EntryPoints.TryGet(out var EntryPointsItem))
            {
                EntryPointsItem?.ToString(fg, "EntryPoints");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFurnitureMarkerGetter? lhs,
            IFurnitureMarkerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Enabled != rhs.Enabled) return false;
            if (!object.Equals(lhs.DisabledEntryPoints, rhs.DisabledEntryPoints)) return false;
            if (!lhs.MarkerKeyword.Equals(rhs.MarkerKeyword)) return false;
            if (!object.Equals(lhs.EntryPoints, rhs.EntryPoints)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IFurnitureMarkerGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Enabled);
            if (item.DisabledEntryPoints.TryGet(out var DisabledEntryPointsitem))
            {
                hash.Add(DisabledEntryPointsitem);
            }
            hash.Add(item.MarkerKeyword);
            if (item.EntryPoints.TryGet(out var EntryPointsitem))
            {
                hash.Add(EntryPointsitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return FurnitureMarker.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IFurnitureMarkerGetter obj)
        {
            if (obj.MarkerKeyword.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.MarkerKeyword);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class FurnitureMarkerSetterTranslationCommon
    {
        public static readonly FurnitureMarkerSetterTranslationCommon Instance = new FurnitureMarkerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFurnitureMarker item,
            IFurnitureMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.Enabled) ?? true))
            {
                item.Enabled = rhs.Enabled;
            }
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.DisabledEntryPoints) ?? true))
            {
                errorMask?.PushIndex((int)FurnitureMarker_FieldIndex.DisabledEntryPoints);
                try
                {
                    if(rhs.DisabledEntryPoints.TryGet(out var rhsDisabledEntryPoints))
                    {
                        item.DisabledEntryPoints = rhsDisabledEntryPoints.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FurnitureMarker_FieldIndex.DisabledEntryPoints));
                    }
                    else
                    {
                        item.DisabledEntryPoints = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.MarkerKeyword) ?? true))
            {
                item.MarkerKeyword = new FormLinkNullable<IKeywordGetter>(rhs.MarkerKeyword.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.EntryPoints) ?? true))
            {
                errorMask?.PushIndex((int)FurnitureMarker_FieldIndex.EntryPoints);
                try
                {
                    if(rhs.EntryPoints.TryGet(out var rhsEntryPoints))
                    {
                        item.EntryPoints = rhsEntryPoints.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FurnitureMarker_FieldIndex.EntryPoints));
                    }
                    else
                    {
                        item.EntryPoints = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public FurnitureMarker DeepCopy(
            IFurnitureMarkerGetter item,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            FurnitureMarker ret = (FurnitureMarker)((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).GetNew();
            ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FurnitureMarker DeepCopy(
            IFurnitureMarkerGetter item,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FurnitureMarker ret = (FurnitureMarker)((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).GetNew();
            ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FurnitureMarker.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FurnitureMarker DeepCopy(
            IFurnitureMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FurnitureMarker ret = (FurnitureMarker)((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).GetNew();
            ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class FurnitureMarker
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FurnitureMarker_Registration.Instance;
        public static FurnitureMarker_Registration Registration => FurnitureMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FurnitureMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return FurnitureMarkerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FurnitureMarkerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFurnitureMarkerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFurnitureMarkerGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFurnitureMarkerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class FurnitureMarkerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static FurnitureMarkerBinaryWriteTranslation Instance = new FurnitureMarkerBinaryWriteTranslation();

        public static void WriteEmbedded(
            IFurnitureMarkerGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Enabled);
            if (item.DisabledEntryPoints.TryGet(out var DisabledEntryPointsItem))
            {
                ((EntryPointsBinaryWriteTranslation)((IBinaryItem)DisabledEntryPointsItem).BinaryWriteTranslator).Write(
                    item: DisabledEntryPointsItem,
                    writer: writer);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MarkerKeyword);
            if (item.EntryPoints.TryGet(out var EntryPointsItem))
            {
                ((EntryPointsBinaryWriteTranslation)((IBinaryItem)EntryPointsItem).BinaryWriteTranslator).Write(
                    item: EntryPointsItem,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            IFurnitureMarkerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFurnitureMarkerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FurnitureMarkerBinaryCreateTranslation
    {
        public readonly static FurnitureMarkerBinaryCreateTranslation Instance = new FurnitureMarkerBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IFurnitureMarker item,
            MutagenFrame frame)
        {
            item.Enabled = frame.ReadBoolean();
            if (frame.Complete) return;
            item.DisabledEntryPoints = Mutagen.Bethesda.Fallout4.EntryPoints.CreateFromBinary(frame: frame);
            if (frame.Complete) return;
            item.MarkerKeyword = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            if (frame.Complete) return;
            item.EntryPoints = Mutagen.Bethesda.Fallout4.EntryPoints.CreateFromBinary(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class FurnitureMarkerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFurnitureMarkerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FurnitureMarkerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class FurnitureMarkerBinaryOverlay :
        BinaryOverlay,
        IFurnitureMarkerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FurnitureMarker_Registration.Instance;
        public static FurnitureMarker_Registration Registration => FurnitureMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FurnitureMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FurnitureMarkerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFurnitureMarkerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFurnitureMarkerGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFurnitureMarkerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => FurnitureMarkerCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FurnitureMarkerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FurnitureMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Boolean Enabled => _data.Slice(0x0, 0x1)[0] == 1;
        public IEntryPointsGetter DisabledEntryPoints => EntryPointsBinaryOverlay.EntryPointsFactory(new OverlayStream(_data.Slice(0x1), _package), _package, default(RecordTypeConverter));
        public FormLinkNullable<IKeywordGetter> MarkerKeyword => new FormLinkNullable<IKeywordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x5, 0x4))));
        public IEntryPointsGetter EntryPoints => EntryPointsBinaryOverlay.EntryPointsFactory(new OverlayStream(_data.Slice(0x9), _package), _package, default(RecordTypeConverter));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FurnitureMarkerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static FurnitureMarkerBinaryOverlay FurnitureMarkerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FurnitureMarkerBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0xD),
                package: package);
            int offset = stream.Position;
            stream.Position += 0xD;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static FurnitureMarkerBinaryOverlay FurnitureMarkerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return FurnitureMarkerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FurnitureMarkerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFurnitureMarkerGetter rhs)) return false;
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IFurnitureMarkerGetter? obj)
        {
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

