/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class TintAssets :
        ITintAssets,
        ILoquiObjectSetter<TintAssets>,
        IEquatable<ITintAssetsGetter>
    {
        #region Ctor
        public TintAssets()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        public UInt16? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? ITintAssetsGetter.Index => this.Index;
        #endregion
        #region FileName
        public String? FileName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITintAssetsGetter.FileName => this.FileName;
        #endregion
        #region MaskType
        public TintAssets.TintMaskType? MaskType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TintAssets.TintMaskType? ITintAssetsGetter.MaskType => this.MaskType;
        #endregion
        #region PresetDefault
        public FormLinkNullable<IColorRecordGetter> PresetDefault { get; set; } = new FormLinkNullable<IColorRecordGetter>();
        #endregion
        #region Presets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TintPreset> _Presets = new ExtendedList<TintPreset>();
        public ExtendedList<TintPreset> Presets
        {
            get => this._Presets;
            protected set => this._Presets = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITintPresetGetter> ITintAssetsGetter.Presets => _Presets;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TintAssetsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITintAssetsGetter rhs)) return false;
            return ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ITintAssetsGetter? obj)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Index = initialValue;
                this.FileName = initialValue;
                this.MaskType = initialValue;
                this.PresetDefault = initialValue;
                this.Presets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>());
            }

            public Mask(
                TItem Index,
                TItem FileName,
                TItem MaskType,
                TItem PresetDefault,
                TItem Presets)
            {
                this.Index = Index;
                this.FileName = FileName;
                this.MaskType = MaskType;
                this.PresetDefault = PresetDefault;
                this.Presets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>?>(Presets, Enumerable.Empty<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Index;
            public TItem FileName;
            public TItem MaskType;
            public TItem PresetDefault;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>?>? Presets;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.FileName, rhs.FileName)) return false;
                if (!object.Equals(this.MaskType, rhs.MaskType)) return false;
                if (!object.Equals(this.PresetDefault, rhs.PresetDefault)) return false;
                if (!object.Equals(this.Presets, rhs.Presets)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Index);
                hash.Add(this.FileName);
                hash.Add(this.MaskType);
                hash.Add(this.PresetDefault);
                hash.Add(this.Presets);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Index)) return false;
                if (!eval(this.FileName)) return false;
                if (!eval(this.MaskType)) return false;
                if (!eval(this.PresetDefault)) return false;
                if (this.Presets != null)
                {
                    if (!eval(this.Presets.Overall)) return false;
                    if (this.Presets.Specific != null)
                    {
                        foreach (var item in this.Presets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Index)) return true;
                if (eval(this.FileName)) return true;
                if (eval(this.MaskType)) return true;
                if (eval(this.PresetDefault)) return true;
                if (this.Presets != null)
                {
                    if (eval(this.Presets.Overall)) return true;
                    if (this.Presets.Specific != null)
                    {
                        foreach (var item in this.Presets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TintAssets.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Index = eval(this.Index);
                obj.FileName = eval(this.FileName);
                obj.MaskType = eval(this.MaskType);
                obj.PresetDefault = eval(this.PresetDefault);
                if (Presets != null)
                {
                    obj.Presets = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TintPreset.Mask<R>?>>?>(eval(this.Presets.Overall), Enumerable.Empty<MaskItemIndexed<R, TintPreset.Mask<R>?>>());
                    if (Presets.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TintPreset.Mask<R>?>>();
                        obj.Presets.Specific = l;
                        foreach (var item in Presets.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, TintPreset.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, TintPreset.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TintAssets.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TintAssets.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TintAssets.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Index ?? true)
                    {
                        fg.AppendItem(Index, "Index");
                    }
                    if (printMask?.FileName ?? true)
                    {
                        fg.AppendItem(FileName, "FileName");
                    }
                    if (printMask?.MaskType ?? true)
                    {
                        fg.AppendItem(MaskType, "MaskType");
                    }
                    if (printMask?.PresetDefault ?? true)
                    {
                        fg.AppendItem(PresetDefault, "PresetDefault");
                    }
                    if ((printMask?.Presets?.Overall ?? true)
                        && Presets.TryGet(out var PresetsItem))
                    {
                        fg.AppendLine("Presets =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PresetsItem.Overall);
                            if (PresetsItem.Specific != null)
                            {
                                foreach (var subItem in PresetsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Index;
            public Exception? FileName;
            public Exception? MaskType;
            public Exception? PresetDefault;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>? Presets;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
                switch (enu)
                {
                    case TintAssets_FieldIndex.Index:
                        return Index;
                    case TintAssets_FieldIndex.FileName:
                        return FileName;
                    case TintAssets_FieldIndex.MaskType:
                        return MaskType;
                    case TintAssets_FieldIndex.PresetDefault:
                        return PresetDefault;
                    case TintAssets_FieldIndex.Presets:
                        return Presets;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
                switch (enu)
                {
                    case TintAssets_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case TintAssets_FieldIndex.FileName:
                        this.FileName = ex;
                        break;
                    case TintAssets_FieldIndex.MaskType:
                        this.MaskType = ex;
                        break;
                    case TintAssets_FieldIndex.PresetDefault:
                        this.PresetDefault = ex;
                        break;
                    case TintAssets_FieldIndex.Presets:
                        this.Presets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
                switch (enu)
                {
                    case TintAssets_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.FileName:
                        this.FileName = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.MaskType:
                        this.MaskType = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.PresetDefault:
                        this.PresetDefault = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.Presets:
                        this.Presets = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Index != null) return true;
                if (FileName != null) return true;
                if (MaskType != null) return true;
                if (PresetDefault != null) return true;
                if (Presets != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Index, "Index");
                fg.AppendItem(FileName, "FileName");
                fg.AppendItem(MaskType, "MaskType");
                fg.AppendItem(PresetDefault, "PresetDefault");
                if (Presets.TryGet(out var PresetsItem))
                {
                    fg.AppendLine("Presets =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PresetsItem.Overall);
                        if (PresetsItem.Specific != null)
                        {
                            foreach (var subItem in PresetsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Index = this.Index.Combine(rhs.Index);
                ret.FileName = this.FileName.Combine(rhs.FileName);
                ret.MaskType = this.MaskType.Combine(rhs.MaskType);
                ret.PresetDefault = this.PresetDefault.Combine(rhs.PresetDefault);
                ret.Presets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>(ExceptionExt.Combine(this.Presets?.Overall, rhs.Presets?.Overall), ExceptionExt.Combine(this.Presets?.Specific, rhs.Presets?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Index;
            public bool FileName;
            public bool MaskType;
            public bool PresetDefault;
            public TintPreset.TranslationMask? Presets;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Index = defaultOn;
                this.FileName = defaultOn;
                this.MaskType = defaultOn;
                this.PresetDefault = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Index, null));
                ret.Add((FileName, null));
                ret.Add((MaskType, null));
                ret.Add((PresetDefault, null));
                ret.Add((Presets == null ? DefaultOn : !Presets.GetCrystal().CopyNothing, Presets?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<FormLinkInformation> ContainedFormLinks => TintAssetsCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TintAssetsSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintAssetsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintAssetsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static TintAssets CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TintAssets();
            ((TintAssetsSetterCommon)((ITintAssetsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TintAssets item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((TintAssetsSetterCommon)((ITintAssetsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TintAssets GetNew()
        {
            return new TintAssets();
        }

    }
    #endregion

    #region Interface
    public partial interface ITintAssets :
        ITintAssetsGetter,
        ILoquiObjectSetter<ITintAssets>,
        IFormLinkContainer
    {
        new UInt16? Index { get; set; }
        new String? FileName { get; set; }
        new TintAssets.TintMaskType? MaskType { get; set; }
        new FormLinkNullable<IColorRecordGetter> PresetDefault { get; set; }
        new ExtendedList<TintPreset> Presets { get; }
    }

    public partial interface ITintAssetsGetter :
        ILoquiObject,
        ILoquiObject<ITintAssetsGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => TintAssets_Registration.Instance;
        UInt16? Index { get; }
        String? FileName { get; }
        TintAssets.TintMaskType? MaskType { get; }
        FormLinkNullable<IColorRecordGetter> PresetDefault { get; }
        IReadOnlyList<ITintPresetGetter> Presets { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TintAssetsMixIn
    {
        public static void Clear(this ITintAssets item)
        {
            ((TintAssetsSetterCommon)((ITintAssetsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TintAssets.Mask<bool> GetEqualsMask(
            this ITintAssetsGetter item,
            ITintAssetsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITintAssetsGetter item,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITintAssetsGetter item,
            FileGeneration fg,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITintAssetsGetter item,
            ITintAssetsGetter rhs)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITintAssets lhs,
            ITintAssetsGetter rhs)
        {
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITintAssets lhs,
            ITintAssetsGetter rhs,
            TintAssets.TranslationMask? copyMask = null)
        {
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITintAssets lhs,
            ITintAssetsGetter rhs,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TintAssets.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITintAssets lhs,
            ITintAssetsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TintAssets DeepCopy(
            this ITintAssetsGetter item,
            TintAssets.TranslationMask? copyMask = null)
        {
            return ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TintAssets DeepCopy(
            this ITintAssetsGetter item,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? copyMask = null)
        {
            return ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TintAssets DeepCopy(
            this ITintAssetsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITintAssets item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintAssetsSetterCommon)((ITintAssetsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum TintAssets_FieldIndex
    {
        Index = 0,
        FileName = 1,
        MaskType = 2,
        PresetDefault = 3,
        Presets = 4,
    }
    #endregion

    #region Registration
    public partial class TintAssets_Registration : ILoquiRegistration
    {
        public static readonly TintAssets_Registration Instance = new TintAssets_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 76,
            version: 0);

        public const string GUID = "2a4a72e5-c74d-4afd-9783-e4947dc83f79";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(TintAssets.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TintAssets.ErrorMask);

        public static readonly Type ClassType = typeof(TintAssets);

        public static readonly Type GetterType = typeof(ITintAssetsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITintAssets);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.TintAssets";

        public const string Name = "TintAssets";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.TINI,
                        RecordTypes.TINT,
                        RecordTypes.TINP,
                        RecordTypes.TIND,
                        RecordTypes.TINC,
                        RecordTypes.TINV,
                        RecordTypes.TIRS
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(TintAssetsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class TintAssetsSetterCommon
    {
        public static readonly TintAssetsSetterCommon Instance = new TintAssetsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITintAssets item)
        {
            ClearPartial();
            item.Index = default;
            item.FileName = default;
            item.MaskType = default;
            item.PresetDefault = FormLinkNullable<IColorRecordGetter>.Null;
            item.Presets.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ITintAssets obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.PresetDefault = obj.PresetDefault.Relink(mapping);
            obj.Presets.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITintAssets item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: TintAssetsBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TintAssetsBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class TintAssetsCommon
    {
        public static readonly TintAssetsCommon Instance = new TintAssetsCommon();

        public TintAssets.Mask<bool> GetEqualsMask(
            ITintAssetsGetter item,
            ITintAssetsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TintAssets.Mask<bool>(false);
            ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITintAssetsGetter item,
            ITintAssetsGetter rhs,
            TintAssets.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Index = item.Index == rhs.Index;
            ret.FileName = string.Equals(item.FileName, rhs.FileName);
            ret.MaskType = item.MaskType == rhs.MaskType;
            ret.PresetDefault = item.PresetDefault.Equals(rhs.PresetDefault);
            ret.Presets = item.Presets.CollectionEqualsHelper(
                rhs.Presets,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            ITintAssetsGetter item,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITintAssetsGetter item,
            FileGeneration fg,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TintAssets =>");
            }
            else
            {
                fg.AppendLine($"{name} (TintAssets) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITintAssetsGetter item,
            FileGeneration fg,
            TintAssets.Mask<bool>? printMask = null)
        {
            if ((printMask?.Index ?? true)
                && item.Index.TryGet(out var IndexItem))
            {
                fg.AppendItem(IndexItem, "Index");
            }
            if ((printMask?.FileName ?? true)
                && item.FileName.TryGet(out var FileNameItem))
            {
                fg.AppendItem(FileNameItem, "FileName");
            }
            if ((printMask?.MaskType ?? true)
                && item.MaskType.TryGet(out var MaskTypeItem))
            {
                fg.AppendItem(MaskTypeItem, "MaskType");
            }
            if (printMask?.PresetDefault ?? true)
            {
                fg.AppendItem(item.PresetDefault.FormKeyNullable, "PresetDefault");
            }
            if (printMask?.Presets?.Overall ?? true)
            {
                fg.AppendLine("Presets =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Presets)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITintAssetsGetter? lhs,
            ITintAssetsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Index != rhs.Index) return false;
            if (!string.Equals(lhs.FileName, rhs.FileName)) return false;
            if (lhs.MaskType != rhs.MaskType) return false;
            if (!lhs.PresetDefault.Equals(rhs.PresetDefault)) return false;
            if (!lhs.Presets.SequenceEqualNullable(rhs.Presets)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITintAssetsGetter item)
        {
            var hash = new HashCode();
            if (item.Index.TryGet(out var Indexitem))
            {
                hash.Add(Indexitem);
            }
            if (item.FileName.TryGet(out var FileNameitem))
            {
                hash.Add(FileNameitem);
            }
            if (item.MaskType.TryGet(out var MaskTypeitem))
            {
                hash.Add(MaskTypeitem);
            }
            hash.Add(item.PresetDefault);
            hash.Add(item.Presets);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TintAssets.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ITintAssetsGetter obj)
        {
            if (obj.PresetDefault.FormKeyNullable.HasValue)
            {
                yield return FormLinkInformation.Factory(obj.PresetDefault);
            }
            foreach (var item in obj.Presets.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class TintAssetsSetterTranslationCommon
    {
        public static readonly TintAssetsSetterTranslationCommon Instance = new TintAssetsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITintAssets item,
            ITintAssetsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.FileName) ?? true))
            {
                item.FileName = rhs.FileName;
            }
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.MaskType) ?? true))
            {
                item.MaskType = rhs.MaskType;
            }
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.PresetDefault) ?? true))
            {
                item.PresetDefault = new FormLinkNullable<IColorRecordGetter>(rhs.PresetDefault.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.Presets) ?? true))
            {
                errorMask?.PushIndex((int)TintAssets_FieldIndex.Presets);
                try
                {
                    item.Presets.SetTo(
                        rhs.Presets
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public TintAssets DeepCopy(
            ITintAssetsGetter item,
            TintAssets.TranslationMask? copyMask = null)
        {
            TintAssets ret = (TintAssets)((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetNew();
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TintAssets DeepCopy(
            ITintAssetsGetter item,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TintAssets ret = (TintAssets)((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetNew();
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TintAssets.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TintAssets DeepCopy(
            ITintAssetsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TintAssets ret = (TintAssets)((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetNew();
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class TintAssets
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintAssets_Registration.Instance;
        public static TintAssets_Registration Registration => TintAssets_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintAssetsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TintAssetsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintAssetsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class TintAssetsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static TintAssetsBinaryWriteTranslation Instance = new TintAssetsBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ITintAssetsGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TINI));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FileName,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TINT),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<TintAssets.TintMaskType>.Instance.WriteNullable(
                writer,
                item.MaskType,
                length: 2,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TINP));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PresetDefault,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.TIND));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ITintPresetGetter>.Instance.Write(
                writer: writer,
                items: item.Presets,
                transl: (MutagenWriter subWriter, ITintPresetGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((TintPresetBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ITintAssetsGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITintAssetsGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TintAssetsBinaryCreateTranslation
    {
        public readonly static TintAssetsBinaryCreateTranslation Instance = new TintAssetsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ITintAssets item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            ITintAssets item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TINI:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.Index) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt16();
                    return (int)TintAssets_FieldIndex.Index;
                }
                case RecordTypeInts.TINT:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.FileName) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FileName = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)TintAssets_FieldIndex.FileName;
                }
                case RecordTypeInts.TINP:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.MaskType) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaskType = EnumBinaryTranslation<TintAssets.TintMaskType>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)TintAssets_FieldIndex.MaskType;
                }
                case RecordTypeInts.TIND:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.PresetDefault) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PresetDefault = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)TintAssets_FieldIndex.PresetDefault;
                }
                case RecordTypeInts.TINC:
                case RecordTypeInts.TINV:
                case RecordTypeInts.TIRS:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.Presets) return ParseResult.Stop;
                    item.Presets.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<TintPreset>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: TintPreset_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: TintPreset.TryCreateFromBinary));
                    return (int)TintAssets_FieldIndex.Presets;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class TintAssetsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITintAssetsGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintAssetsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class TintAssetsBinaryOverlay :
        BinaryOverlay,
        ITintAssetsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintAssets_Registration.Instance;
        public static TintAssets_Registration Registration => TintAssets_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintAssetsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintAssetsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITintAssetsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => TintAssetsCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintAssetsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintAssetsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Index
        private int? _IndexLocation;
        public UInt16? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region FileName
        private int? _FileNameLocation;
        public String? FileName => _FileNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FileNameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region MaskType
        private int? _MaskTypeLocation;
        public TintAssets.TintMaskType? MaskType => _MaskTypeLocation.HasValue ? (TintAssets.TintMaskType)BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _MaskTypeLocation!.Value, _package.MetaData.Constants)) : default(TintAssets.TintMaskType?);
        #endregion
        #region PresetDefault
        private int? _PresetDefaultLocation;
        public FormLinkNullable<IColorRecordGetter> PresetDefault => _PresetDefaultLocation.HasValue ? new FormLinkNullable<IColorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _PresetDefaultLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IColorRecordGetter>.Null;
        #endregion
        public IReadOnlyList<ITintPresetGetter> Presets { get; private set; } = ListExt.Empty<TintPresetBinaryOverlay>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TintAssetsBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static TintAssetsBinaryOverlay TintAssetsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TintAssetsBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static TintAssetsBinaryOverlay TintAssetsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return TintAssetsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TINI:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.Index) return ParseResult.Stop;
                    _IndexLocation = (stream.Position - offset);
                    return (int)TintAssets_FieldIndex.Index;
                }
                case RecordTypeInts.TINT:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.FileName) return ParseResult.Stop;
                    _FileNameLocation = (stream.Position - offset);
                    return (int)TintAssets_FieldIndex.FileName;
                }
                case RecordTypeInts.TINP:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.MaskType) return ParseResult.Stop;
                    _MaskTypeLocation = (stream.Position - offset);
                    return (int)TintAssets_FieldIndex.MaskType;
                }
                case RecordTypeInts.TIND:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.PresetDefault) return ParseResult.Stop;
                    _PresetDefaultLocation = (stream.Position - offset);
                    return (int)TintAssets_FieldIndex.PresetDefault;
                }
                case RecordTypeInts.TINC:
                case RecordTypeInts.TINV:
                case RecordTypeInts.TIRS:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.Presets) return ParseResult.Stop;
                    this.Presets = this.ParseRepeatedTypelessSubrecord<TintPresetBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: TintPreset_Registration.TriggeringRecordTypes,
                        factory:  TintPresetBinaryOverlay.TintPresetFactory);
                    return (int)TintAssets_FieldIndex.Presets;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TintAssetsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITintAssetsGetter rhs)) return false;
            return ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ITintAssetsGetter? obj)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

