/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Quest :
        Fallout4MajorRecord,
        IQuestInternal,
        ILoquiObjectSetter<Quest>,
        IEquatable<IQuestGetter>
    {
        #region Ctor
        protected Quest()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private QuestAdapter? _VirtualMachineAdapter;
        public QuestAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuestAdapterGetter? IQuestGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IQuestGetter.Name => this.Name;
        #endregion
        #region Flags
        public Quest.Flag Flags { get; set; } = default;
        #endregion
        #region Priority
        public Byte Priority { get; set; } = default;
        #endregion
        #region QuestFormVersion
        public readonly static Byte _QuestFormVersion_Default = byte.MaxValue;
        public Byte QuestFormVersion { get; set; } = _QuestFormVersion_Default;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default;
        #endregion
        #region Type
        public Quest.TypeEnum Type { get; set; } = default;
        #endregion
        #region Event
        public RecordType? Event { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RecordType? IQuestGetter.Event => this.Event;
        #endregion
        #region TextDisplayGlobals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IGlobalGetter>> _TextDisplayGlobals = new ExtendedList<IFormLink<IGlobalGetter>>();
        public ExtendedList<IFormLink<IGlobalGetter>> TextDisplayGlobals
        {
            get => this._TextDisplayGlobals;
            protected set => this._TextDisplayGlobals = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IGlobalGetter>> IQuestGetter.TextDisplayGlobals => _TextDisplayGlobals;
        #endregion

        #endregion
        #region ObjectWindowFilter
        public String? ObjectWindowFilter { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestGetter.ObjectWindowFilter => this.ObjectWindowFilter;
        #endregion
        #region DialogConditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _DialogConditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> DialogConditions
        {
            get => this._DialogConditions;
            protected set => this._DialogConditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IQuestGetter.DialogConditions => _DialogConditions;
        #endregion

        #endregion
        #region UnusedConditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _UnusedConditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> UnusedConditions
        {
            get => this._UnusedConditions;
            protected set => this._UnusedConditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IQuestGetter.UnusedConditions => _UnusedConditions;
        #endregion

        #endregion
        #region Stages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestStage> _Stages = new ExtendedList<QuestStage>();
        public ExtendedList<QuestStage> Stages
        {
            get => this._Stages;
            protected set => this._Stages = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestStageGetter> IQuestGetter.Stages => _Stages;
        #endregion

        #endregion
        #region Objectives
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestObjective> _Objectives = new ExtendedList<QuestObjective>();
        public ExtendedList<QuestObjective> Objectives
        {
            get => this._Objectives;
            protected set => this._Objectives = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestObjectiveGetter> IQuestGetter.Objectives => _Objectives;
        #endregion

        #endregion
        #region Aliases
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestAlias> _Aliases = new ExtendedList<QuestAlias>();
        public ExtendedList<QuestAlias> Aliases
        {
            get => this._Aliases;
            protected set => this._Aliases = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestAliasGetter> IQuestGetter.Aliases => _Aliases;
        #endregion

        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IQuestGetter.Description => this.Description;
        #endregion
        #region DNAMDataTypeState
        public Quest.DNAMDataType DNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            QuestMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IQuestGetter rhs)) return false;
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IQuestGetter? obj)
        {
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((QuestCommon)((IQuestGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, QuestAdapter.Mask<TItem>?>(initialValue, new QuestAdapter.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Flags = initialValue;
                this.Priority = initialValue;
                this.QuestFormVersion = initialValue;
                this.Unknown = initialValue;
                this.Type = initialValue;
                this.Event = initialValue;
                this.TextDisplayGlobals = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ObjectWindowFilter = initialValue;
                this.DialogConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.UnusedConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Stages = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>());
                this.Objectives = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>());
                this.Aliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestAlias.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestAlias.Mask<TItem>?>>());
                this.Description = initialValue;
                this.DNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem Name,
                TItem Flags,
                TItem Priority,
                TItem QuestFormVersion,
                TItem Unknown,
                TItem Type,
                TItem Event,
                TItem TextDisplayGlobals,
                TItem ObjectWindowFilter,
                TItem DialogConditions,
                TItem UnusedConditions,
                TItem Stages,
                TItem Objectives,
                TItem Aliases,
                TItem Description,
                TItem DNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, QuestAdapter.Mask<TItem>?>(VirtualMachineAdapter, new QuestAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Name = Name;
                this.Flags = Flags;
                this.Priority = Priority;
                this.QuestFormVersion = QuestFormVersion;
                this.Unknown = Unknown;
                this.Type = Type;
                this.Event = Event;
                this.TextDisplayGlobals = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(TextDisplayGlobals, Enumerable.Empty<(int Index, TItem Value)>());
                this.ObjectWindowFilter = ObjectWindowFilter;
                this.DialogConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(DialogConditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.UnusedConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(UnusedConditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Stages = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>?>(Stages, Enumerable.Empty<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>());
                this.Objectives = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>?>(Objectives, Enumerable.Empty<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>());
                this.Aliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestAlias.Mask<TItem>?>>?>(Aliases, Enumerable.Empty<MaskItemIndexed<TItem, QuestAlias.Mask<TItem>?>>());
                this.Description = Description;
                this.DNAMDataTypeState = DNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, QuestAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Name;
            public TItem Flags;
            public TItem Priority;
            public TItem QuestFormVersion;
            public TItem Unknown;
            public TItem Type;
            public TItem Event;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? TextDisplayGlobals;
            public TItem ObjectWindowFilter;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? DialogConditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? UnusedConditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>?>? Stages;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>?>? Objectives;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestAlias.Mask<TItem>?>>?>? Aliases;
            public TItem Description;
            public TItem DNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Priority, rhs.Priority)) return false;
                if (!object.Equals(this.QuestFormVersion, rhs.QuestFormVersion)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Event, rhs.Event)) return false;
                if (!object.Equals(this.TextDisplayGlobals, rhs.TextDisplayGlobals)) return false;
                if (!object.Equals(this.ObjectWindowFilter, rhs.ObjectWindowFilter)) return false;
                if (!object.Equals(this.DialogConditions, rhs.DialogConditions)) return false;
                if (!object.Equals(this.UnusedConditions, rhs.UnusedConditions)) return false;
                if (!object.Equals(this.Stages, rhs.Stages)) return false;
                if (!object.Equals(this.Objectives, rhs.Objectives)) return false;
                if (!object.Equals(this.Aliases, rhs.Aliases)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.DNAMDataTypeState, rhs.DNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.Priority);
                hash.Add(this.QuestFormVersion);
                hash.Add(this.Unknown);
                hash.Add(this.Type);
                hash.Add(this.Event);
                hash.Add(this.TextDisplayGlobals);
                hash.Add(this.ObjectWindowFilter);
                hash.Add(this.DialogConditions);
                hash.Add(this.UnusedConditions);
                hash.Add(this.Stages);
                hash.Add(this.Objectives);
                hash.Add(this.Aliases);
                hash.Add(this.Description);
                hash.Add(this.DNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Priority)) return false;
                if (!eval(this.QuestFormVersion)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.Event)) return false;
                if (this.TextDisplayGlobals != null)
                {
                    if (!eval(this.TextDisplayGlobals.Overall)) return false;
                    if (this.TextDisplayGlobals.Specific != null)
                    {
                        foreach (var item in this.TextDisplayGlobals.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ObjectWindowFilter)) return false;
                if (this.DialogConditions != null)
                {
                    if (!eval(this.DialogConditions.Overall)) return false;
                    if (this.DialogConditions.Specific != null)
                    {
                        foreach (var item in this.DialogConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnusedConditions != null)
                {
                    if (!eval(this.UnusedConditions.Overall)) return false;
                    if (this.UnusedConditions.Specific != null)
                    {
                        foreach (var item in this.UnusedConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Stages != null)
                {
                    if (!eval(this.Stages.Overall)) return false;
                    if (this.Stages.Specific != null)
                    {
                        foreach (var item in this.Stages.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Objectives != null)
                {
                    if (!eval(this.Objectives.Overall)) return false;
                    if (this.Objectives.Specific != null)
                    {
                        foreach (var item in this.Objectives.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Aliases != null)
                {
                    if (!eval(this.Aliases.Overall)) return false;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Description)) return false;
                if (!eval(this.DNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Priority)) return true;
                if (eval(this.QuestFormVersion)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.Event)) return true;
                if (this.TextDisplayGlobals != null)
                {
                    if (eval(this.TextDisplayGlobals.Overall)) return true;
                    if (this.TextDisplayGlobals.Specific != null)
                    {
                        foreach (var item in this.TextDisplayGlobals.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ObjectWindowFilter)) return true;
                if (this.DialogConditions != null)
                {
                    if (eval(this.DialogConditions.Overall)) return true;
                    if (this.DialogConditions.Specific != null)
                    {
                        foreach (var item in this.DialogConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnusedConditions != null)
                {
                    if (eval(this.UnusedConditions.Overall)) return true;
                    if (this.UnusedConditions.Specific != null)
                    {
                        foreach (var item in this.UnusedConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Stages != null)
                {
                    if (eval(this.Stages.Overall)) return true;
                    if (this.Stages.Specific != null)
                    {
                        foreach (var item in this.Stages.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Objectives != null)
                {
                    if (eval(this.Objectives.Overall)) return true;
                    if (this.Objectives.Specific != null)
                    {
                        foreach (var item in this.Objectives.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Aliases != null)
                {
                    if (eval(this.Aliases.Overall)) return true;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Description)) return true;
                if (eval(this.DNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Quest.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, QuestAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.Priority = eval(this.Priority);
                obj.QuestFormVersion = eval(this.QuestFormVersion);
                obj.Unknown = eval(this.Unknown);
                obj.Type = eval(this.Type);
                obj.Event = eval(this.Event);
                if (TextDisplayGlobals != null)
                {
                    obj.TextDisplayGlobals = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.TextDisplayGlobals.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (TextDisplayGlobals.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.TextDisplayGlobals.Specific = l;
                        foreach (var item in TextDisplayGlobals.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ObjectWindowFilter = eval(this.ObjectWindowFilter);
                if (DialogConditions != null)
                {
                    obj.DialogConditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.DialogConditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (DialogConditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.DialogConditions.Specific = l;
                        foreach (var item in DialogConditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (UnusedConditions != null)
                {
                    obj.UnusedConditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.UnusedConditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (UnusedConditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.UnusedConditions.Specific = l;
                        foreach (var item in UnusedConditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Stages != null)
                {
                    obj.Stages = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestStage.Mask<R>?>>?>(eval(this.Stages.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestStage.Mask<R>?>>());
                    if (Stages.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestStage.Mask<R>?>>();
                        obj.Stages.Specific = l;
                        foreach (var item in Stages.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, QuestStage.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, QuestStage.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Objectives != null)
                {
                    obj.Objectives = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestObjective.Mask<R>?>>?>(eval(this.Objectives.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestObjective.Mask<R>?>>());
                    if (Objectives.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestObjective.Mask<R>?>>();
                        obj.Objectives.Specific = l;
                        foreach (var item in Objectives.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, QuestObjective.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, QuestObjective.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Aliases != null)
                {
                    obj.Aliases = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestAlias.Mask<R>?>>?>(eval(this.Aliases.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestAlias.Mask<R>?>>());
                    if (Aliases.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestAlias.Mask<R>?>>();
                        obj.Aliases.Specific = l;
                        foreach (var item in Aliases.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, QuestAlias.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, QuestAlias.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Description = eval(this.Description);
                obj.DNAMDataTypeState = eval(this.DNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Quest.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Quest.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Quest.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Priority ?? true)
                    {
                        fg.AppendItem(Priority, "Priority");
                    }
                    if (printMask?.QuestFormVersion ?? true)
                    {
                        fg.AppendItem(QuestFormVersion, "QuestFormVersion");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.Event ?? true)
                    {
                        fg.AppendItem(Event, "Event");
                    }
                    if ((printMask?.TextDisplayGlobals?.Overall ?? true)
                        && TextDisplayGlobals.TryGet(out var TextDisplayGlobalsItem))
                    {
                        fg.AppendLine("TextDisplayGlobals =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TextDisplayGlobalsItem.Overall);
                            if (TextDisplayGlobalsItem.Specific != null)
                            {
                                foreach (var subItem in TextDisplayGlobalsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ObjectWindowFilter ?? true)
                    {
                        fg.AppendItem(ObjectWindowFilter, "ObjectWindowFilter");
                    }
                    if ((printMask?.DialogConditions?.Overall ?? true)
                        && DialogConditions.TryGet(out var DialogConditionsItem))
                    {
                        fg.AppendLine("DialogConditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(DialogConditionsItem.Overall);
                            if (DialogConditionsItem.Specific != null)
                            {
                                foreach (var subItem in DialogConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.UnusedConditions?.Overall ?? true)
                        && UnusedConditions.TryGet(out var UnusedConditionsItem))
                    {
                        fg.AppendLine("UnusedConditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(UnusedConditionsItem.Overall);
                            if (UnusedConditionsItem.Specific != null)
                            {
                                foreach (var subItem in UnusedConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Stages?.Overall ?? true)
                        && Stages.TryGet(out var StagesItem))
                    {
                        fg.AppendLine("Stages =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(StagesItem.Overall);
                            if (StagesItem.Specific != null)
                            {
                                foreach (var subItem in StagesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Objectives?.Overall ?? true)
                        && Objectives.TryGet(out var ObjectivesItem))
                    {
                        fg.AppendLine("Objectives =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ObjectivesItem.Overall);
                            if (ObjectivesItem.Specific != null)
                            {
                                foreach (var subItem in ObjectivesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Aliases?.Overall ?? true)
                        && Aliases.TryGet(out var AliasesItem))
                    {
                        fg.AppendLine("Aliases =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AliasesItem.Overall);
                            if (AliasesItem.Specific != null)
                            {
                                foreach (var subItem in AliasesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.DNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, QuestAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Name;
            public Exception? Flags;
            public Exception? Priority;
            public Exception? QuestFormVersion;
            public Exception? Unknown;
            public Exception? Type;
            public Exception? Event;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? TextDisplayGlobals;
            public Exception? ObjectWindowFilter;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? DialogConditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? UnusedConditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>? Stages;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>? Objectives;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestAlias.ErrorMask?>>?>? Aliases;
            public Exception? Description;
            public Exception? DNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Quest_FieldIndex enu = (Quest_FieldIndex)index;
                switch (enu)
                {
                    case Quest_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Quest_FieldIndex.Name:
                        return Name;
                    case Quest_FieldIndex.Flags:
                        return Flags;
                    case Quest_FieldIndex.Priority:
                        return Priority;
                    case Quest_FieldIndex.QuestFormVersion:
                        return QuestFormVersion;
                    case Quest_FieldIndex.Unknown:
                        return Unknown;
                    case Quest_FieldIndex.Type:
                        return Type;
                    case Quest_FieldIndex.Event:
                        return Event;
                    case Quest_FieldIndex.TextDisplayGlobals:
                        return TextDisplayGlobals;
                    case Quest_FieldIndex.ObjectWindowFilter:
                        return ObjectWindowFilter;
                    case Quest_FieldIndex.DialogConditions:
                        return DialogConditions;
                    case Quest_FieldIndex.UnusedConditions:
                        return UnusedConditions;
                    case Quest_FieldIndex.Stages:
                        return Stages;
                    case Quest_FieldIndex.Objectives:
                        return Objectives;
                    case Quest_FieldIndex.Aliases:
                        return Aliases;
                    case Quest_FieldIndex.Description:
                        return Description;
                    case Quest_FieldIndex.DNAMDataTypeState:
                        return DNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Quest_FieldIndex enu = (Quest_FieldIndex)index;
                switch (enu)
                {
                    case Quest_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, QuestAdapter.ErrorMask?>(ex, null);
                        break;
                    case Quest_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Quest_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Quest_FieldIndex.Priority:
                        this.Priority = ex;
                        break;
                    case Quest_FieldIndex.QuestFormVersion:
                        this.QuestFormVersion = ex;
                        break;
                    case Quest_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Quest_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Quest_FieldIndex.Event:
                        this.Event = ex;
                        break;
                    case Quest_FieldIndex.TextDisplayGlobals:
                        this.TextDisplayGlobals = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Quest_FieldIndex.ObjectWindowFilter:
                        this.ObjectWindowFilter = ex;
                        break;
                    case Quest_FieldIndex.DialogConditions:
                        this.DialogConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.UnusedConditions:
                        this.UnusedConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Stages:
                        this.Stages = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Objectives:
                        this.Objectives = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Aliases:
                        this.Aliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestAlias.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Quest_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Quest_FieldIndex enu = (Quest_FieldIndex)index;
                switch (enu)
                {
                    case Quest_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, QuestAdapter.ErrorMask?>?)obj;
                        break;
                    case Quest_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Priority:
                        this.Priority = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.QuestFormVersion:
                        this.QuestFormVersion = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Event:
                        this.Event = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.TextDisplayGlobals:
                        this.TextDisplayGlobals = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Quest_FieldIndex.ObjectWindowFilter:
                        this.ObjectWindowFilter = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.DialogConditions:
                        this.DialogConditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.UnusedConditions:
                        this.UnusedConditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Stages:
                        this.Stages = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Objectives:
                        this.Objectives = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Aliases:
                        this.Aliases = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestAlias.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (Priority != null) return true;
                if (QuestFormVersion != null) return true;
                if (Unknown != null) return true;
                if (Type != null) return true;
                if (Event != null) return true;
                if (TextDisplayGlobals != null) return true;
                if (ObjectWindowFilter != null) return true;
                if (DialogConditions != null) return true;
                if (UnusedConditions != null) return true;
                if (Stages != null) return true;
                if (Objectives != null) return true;
                if (Aliases != null) return true;
                if (Description != null) return true;
                if (DNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Priority, "Priority");
                fg.AppendItem(QuestFormVersion, "QuestFormVersion");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(Type, "Type");
                fg.AppendItem(Event, "Event");
                if (TextDisplayGlobals.TryGet(out var TextDisplayGlobalsItem))
                {
                    fg.AppendLine("TextDisplayGlobals =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TextDisplayGlobalsItem.Overall);
                        if (TextDisplayGlobalsItem.Specific != null)
                        {
                            foreach (var subItem in TextDisplayGlobalsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(ObjectWindowFilter, "ObjectWindowFilter");
                if (DialogConditions.TryGet(out var DialogConditionsItem))
                {
                    fg.AppendLine("DialogConditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(DialogConditionsItem.Overall);
                        if (DialogConditionsItem.Specific != null)
                        {
                            foreach (var subItem in DialogConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (UnusedConditions.TryGet(out var UnusedConditionsItem))
                {
                    fg.AppendLine("UnusedConditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(UnusedConditionsItem.Overall);
                        if (UnusedConditionsItem.Specific != null)
                        {
                            foreach (var subItem in UnusedConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Stages.TryGet(out var StagesItem))
                {
                    fg.AppendLine("Stages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(StagesItem.Overall);
                        if (StagesItem.Specific != null)
                        {
                            foreach (var subItem in StagesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Objectives.TryGet(out var ObjectivesItem))
                {
                    fg.AppendLine("Objectives =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ObjectivesItem.Overall);
                        if (ObjectivesItem.Specific != null)
                        {
                            foreach (var subItem in ObjectivesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Aliases.TryGet(out var AliasesItem))
                {
                    fg.AppendLine("Aliases =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AliasesItem.Overall);
                        if (AliasesItem.Specific != null)
                        {
                            foreach (var subItem in AliasesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Description, "Description");
                fg.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Priority = this.Priority.Combine(rhs.Priority);
                ret.QuestFormVersion = this.QuestFormVersion.Combine(rhs.QuestFormVersion);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Event = this.Event.Combine(rhs.Event);
                ret.TextDisplayGlobals = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.TextDisplayGlobals?.Overall, rhs.TextDisplayGlobals?.Overall), ExceptionExt.Combine(this.TextDisplayGlobals?.Specific, rhs.TextDisplayGlobals?.Specific));
                ret.ObjectWindowFilter = this.ObjectWindowFilter.Combine(rhs.ObjectWindowFilter);
                ret.DialogConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.DialogConditions?.Overall, rhs.DialogConditions?.Overall), ExceptionExt.Combine(this.DialogConditions?.Specific, rhs.DialogConditions?.Specific));
                ret.UnusedConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.UnusedConditions?.Overall, rhs.UnusedConditions?.Overall), ExceptionExt.Combine(this.UnusedConditions?.Specific, rhs.UnusedConditions?.Specific));
                ret.Stages = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>(ExceptionExt.Combine(this.Stages?.Overall, rhs.Stages?.Overall), ExceptionExt.Combine(this.Stages?.Specific, rhs.Stages?.Specific));
                ret.Objectives = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>(ExceptionExt.Combine(this.Objectives?.Overall, rhs.Objectives?.Overall), ExceptionExt.Combine(this.Objectives?.Specific, rhs.Objectives?.Specific));
                ret.Aliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestAlias.ErrorMask?>>?>(ExceptionExt.Combine(this.Aliases?.Overall, rhs.Aliases?.Overall), ExceptionExt.Combine(this.Aliases?.Specific, rhs.Aliases?.Specific));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.DNAMDataTypeState = this.DNAMDataTypeState.Combine(rhs.DNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public QuestAdapter.TranslationMask? VirtualMachineAdapter;
            public bool Name;
            public bool Flags;
            public bool Priority;
            public bool QuestFormVersion;
            public bool Unknown;
            public bool Type;
            public bool Event;
            public bool TextDisplayGlobals;
            public bool ObjectWindowFilter;
            public Condition.TranslationMask? DialogConditions;
            public Condition.TranslationMask? UnusedConditions;
            public QuestStage.TranslationMask? Stages;
            public QuestObjective.TranslationMask? Objectives;
            public QuestAlias.TranslationMask? Aliases;
            public bool Description;
            public bool DNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.Priority = defaultOn;
                this.QuestFormVersion = defaultOn;
                this.Unknown = defaultOn;
                this.Type = defaultOn;
                this.Event = defaultOn;
                this.TextDisplayGlobals = defaultOn;
                this.ObjectWindowFilter = defaultOn;
                this.Description = defaultOn;
                this.DNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((Priority, null));
                ret.Add((QuestFormVersion, null));
                ret.Add((Unknown, null));
                ret.Add((Type, null));
                ret.Add((Event, null));
                ret.Add((TextDisplayGlobals, null));
                ret.Add((ObjectWindowFilter, null));
                ret.Add((DialogConditions == null ? DefaultOn : !DialogConditions.GetCrystal().CopyNothing, DialogConditions?.GetCrystal()));
                ret.Add((UnusedConditions == null ? DefaultOn : !UnusedConditions.GetCrystal().CopyNothing, UnusedConditions?.GetCrystal()));
                ret.Add((Stages == null ? DefaultOn : !Stages.GetCrystal().CopyNothing, Stages?.GetCrystal()));
                ret.Add((Objectives == null ? DefaultOn : !Objectives.GetCrystal().CopyNothing, Objectives?.GetCrystal()));
                ret.Add((Aliases == null ? DefaultOn : !Aliases.GetCrystal().CopyNothing, Aliases?.GetCrystal()));
                ret.Add((Description, null));
                ret.Add((DNAMDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Quest_Registration.TriggeringRecordType;
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => QuestCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestSetterCommon.Instance.RemapLinks(this, mapping);
        public Quest(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.ToGameRelease().GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private Quest(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal Quest(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Quest(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Quest(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DNAMDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((QuestBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static Quest CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Quest();
            ((QuestSetterCommon)((IQuestGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Quest item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((QuestSetterCommon)((IQuestGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Quest GetNew()
        {
            return new Quest();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuest :
        IQuestGetter,
        IFallout4MajorRecord,
        ITranslatedNamed,
        ILoquiObjectSetter<IQuestInternal>,
        IFormLinkContainer
    {
        new QuestAdapter? VirtualMachineAdapter { get; set; }
        new TranslatedString? Name { get; set; }
        new Quest.Flag Flags { get; set; }
        new Byte Priority { get; set; }
        new Byte QuestFormVersion { get; set; }
        new Int32 Unknown { get; set; }
        new Quest.TypeEnum Type { get; set; }
        new RecordType? Event { get; set; }
        new ExtendedList<IFormLink<IGlobalGetter>> TextDisplayGlobals { get; }
        new String? ObjectWindowFilter { get; set; }
        new ExtendedList<Condition> DialogConditions { get; }
        new ExtendedList<Condition> UnusedConditions { get; }
        new ExtendedList<QuestStage> Stages { get; }
        new ExtendedList<QuestObjective> Objectives { get; }
        new ExtendedList<QuestAlias> Aliases { get; }
        new TranslatedString? Description { get; set; }
        new Quest.DNAMDataType DNAMDataTypeState { get; set; }
    }

    public partial interface IQuestInternal :
        IFallout4MajorRecordInternal,
        IQuest,
        IQuestGetter
    {
    }

    public partial interface IQuestGetter :
        IFallout4MajorRecordGetter,
        ITranslatedNamedGetter,
        ILoquiObject<IQuestGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => Quest_Registration.Instance;
        IQuestAdapterGetter? VirtualMachineAdapter { get; }
        ITranslatedStringGetter? Name { get; }
        Quest.Flag Flags { get; }
        Byte Priority { get; }
        Byte QuestFormVersion { get; }
        Int32 Unknown { get; }
        Quest.TypeEnum Type { get; }
        RecordType? Event { get; }
        IReadOnlyList<IFormLink<IGlobalGetter>> TextDisplayGlobals { get; }
        String? ObjectWindowFilter { get; }
        IReadOnlyList<IConditionGetter> DialogConditions { get; }
        IReadOnlyList<IConditionGetter> UnusedConditions { get; }
        IReadOnlyList<IQuestStageGetter> Stages { get; }
        IReadOnlyList<IQuestObjectiveGetter> Objectives { get; }
        IReadOnlyList<IQuestAliasGetter> Aliases { get; }
        ITranslatedStringGetter? Description { get; }
        Quest.DNAMDataType DNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class QuestMixIn
    {
        public static void Clear(this IQuestInternal item)
        {
            ((QuestSetterCommon)((IQuestGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Quest.Mask<bool> GetEqualsMask(
            this IQuestGetter item,
            IQuestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IQuestGetter item,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IQuestGetter item,
            FileGeneration fg,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            ((QuestCommon)((IQuestGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IQuestGetter item,
            IQuestGetter rhs)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IQuestInternal lhs,
            IQuestGetter rhs,
            out Quest.ErrorMask errorMask,
            Quest.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestSetterTranslationCommon)((IQuestGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Quest.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IQuestInternal lhs,
            IQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((QuestSetterTranslationCommon)((IQuestGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            Quest.TranslationMask? copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            out Quest.ErrorMask errorMask,
            Quest.TranslationMask? copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Quest Duplicate(
            this IQuestGetter item,
            FormKey formKey,
            Quest.TranslationMask? copyMask = null)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IQuestInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((QuestSetterCommon)((IQuestGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Quest_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        Name = 7,
        Flags = 8,
        Priority = 9,
        QuestFormVersion = 10,
        Unknown = 11,
        Type = 12,
        Event = 13,
        TextDisplayGlobals = 14,
        ObjectWindowFilter = 15,
        DialogConditions = 16,
        UnusedConditions = 17,
        Stages = 18,
        Objectives = 19,
        Aliases = 20,
        Description = 21,
        DNAMDataTypeState = 22,
    }
    #endregion

    #region Registration
    public partial class Quest_Registration : ILoquiRegistration
    {
        public static readonly Quest_Registration Instance = new Quest_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 351,
            version: 0);

        public const string GUID = "480d7a0d-3841-44f9-9a48-b53a29731f22";

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(Quest.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Quest.ErrorMask);

        public static readonly Type ClassType = typeof(Quest);

        public static readonly Type GetterType = typeof(IQuestGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuest);

        public static readonly Type? InternalSetterType = typeof(IQuestInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Quest";

        public const string Name = "Quest";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.QUST;
        public static readonly Type BinaryWriteTranslation = typeof(QuestBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class QuestSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly QuestSetterCommon Instance = new QuestSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Name = default;
            item.Flags = default;
            item.Priority = default;
            item.QuestFormVersion = Quest._QuestFormVersion_Default;
            item.Unknown = default;
            item.Type = default;
            item.Event = default;
            item.TextDisplayGlobals.Clear();
            item.ObjectWindowFilter = default;
            item.DialogConditions.Clear();
            item.UnusedConditions.Clear();
            item.Stages.Clear();
            item.Objectives.Clear();
            item.Aliases.Clear();
            item.Description = default;
            item.DNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IQuestInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IQuestInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IQuest obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.TextDisplayGlobals.RemapLinks(mapping);
            obj.DialogConditions.RemapLinks(mapping);
            obj.UnusedConditions.RemapLinks(mapping);
            obj.Stages.RemapLinks(mapping);
            obj.Objectives.RemapLinks(mapping);
            obj.Aliases.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IQuestInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IQuestInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: QuestBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: QuestBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Quest)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Quest)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class QuestCommon : Fallout4MajorRecordCommon
    {
        public new static readonly QuestCommon Instance = new QuestCommon();

        public Quest.Mask<bool> GetEqualsMask(
            IQuestGetter item,
            IQuestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Quest.Mask<bool>(false);
            ((QuestCommon)((IQuestGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestGetter item,
            IQuestGetter rhs,
            Quest.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Priority = item.Priority == rhs.Priority;
            ret.QuestFormVersion = item.QuestFormVersion == rhs.QuestFormVersion;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Type = item.Type == rhs.Type;
            ret.Event = item.Event == rhs.Event;
            ret.TextDisplayGlobals = item.TextDisplayGlobals.CollectionEqualsHelper(
                rhs.TextDisplayGlobals,
                (l, r) => object.Equals(l, r),
                include);
            ret.ObjectWindowFilter = string.Equals(item.ObjectWindowFilter, rhs.ObjectWindowFilter);
            ret.DialogConditions = item.DialogConditions.CollectionEqualsHelper(
                rhs.DialogConditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UnusedConditions = item.UnusedConditions.CollectionEqualsHelper(
                rhs.UnusedConditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Stages = item.Stages.CollectionEqualsHelper(
                rhs.Stages,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Objectives = item.Objectives.CollectionEqualsHelper(
                rhs.Objectives,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Aliases = item.Aliases.CollectionEqualsHelper(
                rhs.Aliases,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.DNAMDataTypeState = item.DNAMDataTypeState == rhs.DNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IQuestGetter item,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IQuestGetter item,
            FileGeneration fg,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Quest =>");
            }
            else
            {
                fg.AppendLine($"{name} (Quest) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IQuestGetter item,
            FileGeneration fg,
            Quest.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Priority ?? true)
            {
                fg.AppendItem(item.Priority, "Priority");
            }
            if (printMask?.QuestFormVersion ?? true)
            {
                fg.AppendItem(item.QuestFormVersion, "QuestFormVersion");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if ((printMask?.Event ?? true)
                && item.Event.TryGet(out var EventItem))
            {
                fg.AppendItem(EventItem, "Event");
            }
            if (printMask?.TextDisplayGlobals?.Overall ?? true)
            {
                fg.AppendLine("TextDisplayGlobals =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.TextDisplayGlobals)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.FormKey);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.ObjectWindowFilter ?? true)
                && item.ObjectWindowFilter.TryGet(out var ObjectWindowFilterItem))
            {
                fg.AppendItem(ObjectWindowFilterItem, "ObjectWindowFilter");
            }
            if (printMask?.DialogConditions?.Overall ?? true)
            {
                fg.AppendLine("DialogConditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.DialogConditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.UnusedConditions?.Overall ?? true)
            {
                fg.AppendLine("UnusedConditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.UnusedConditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Stages?.Overall ?? true)
            {
                fg.AppendLine("Stages =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Stages)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Objectives?.Overall ?? true)
            {
                fg.AppendLine("Objectives =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Objectives)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Aliases?.Overall ?? true)
            {
                fg.AppendLine("Aliases =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Aliases)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.DNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.DNAMDataTypeState, "DNAMDataTypeState");
            }
        }
        
        public static Quest_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Quest_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Quest_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Quest_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Quest_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Quest_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Quest_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Quest_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Quest_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestGetter? lhs,
            IQuestGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.Name, rhs.Name)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Priority != rhs.Priority) return false;
            if (lhs.QuestFormVersion != rhs.QuestFormVersion) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.Type != rhs.Type) return false;
            if (lhs.Event != rhs.Event) return false;
            if (!lhs.TextDisplayGlobals.SequenceEqualNullable(rhs.TextDisplayGlobals)) return false;
            if (!string.Equals(lhs.ObjectWindowFilter, rhs.ObjectWindowFilter)) return false;
            if (!lhs.DialogConditions.SequenceEqualNullable(rhs.DialogConditions)) return false;
            if (!lhs.UnusedConditions.SequenceEqualNullable(rhs.UnusedConditions)) return false;
            if (!lhs.Stages.SequenceEqualNullable(rhs.Stages)) return false;
            if (!lhs.Objectives.SequenceEqualNullable(rhs.Objectives)) return false;
            if (!lhs.Aliases.SequenceEqualNullable(rhs.Aliases)) return false;
            if (!object.Equals(lhs.Description, rhs.Description)) return false;
            if (lhs.DNAMDataTypeState != rhs.DNAMDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IQuestGetter?)lhs,
                rhs: rhs as IQuestGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IQuestGetter?)lhs,
                rhs: rhs as IQuestGetter);
        }
        
        public virtual int GetHashCode(IQuestGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Flags);
            hash.Add(item.Priority);
            hash.Add(item.QuestFormVersion);
            hash.Add(item.Unknown);
            hash.Add(item.Type);
            if (item.Event.TryGet(out var Eventitem))
            {
                hash.Add(Eventitem);
            }
            hash.Add(item.TextDisplayGlobals);
            if (item.ObjectWindowFilter.TryGet(out var ObjectWindowFilteritem))
            {
                hash.Add(ObjectWindowFilteritem);
            }
            hash.Add(item.DialogConditions);
            hash.Add(item.UnusedConditions);
            hash.Add(item.Stages);
            hash.Add(item.Objectives);
            hash.Add(item.Aliases);
            if (item.Description.TryGet(out var Descriptionitem))
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.DNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IQuestGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IQuestGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Quest.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IQuestGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.TextDisplayGlobals)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.DialogConditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.UnusedConditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Stages.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Objectives.WhereCastable<IQuestObjectiveGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Aliases.SelectMany(f => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public Quest Duplicate(
            IQuestGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Quest(formKey, default(Fallout4Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IQuest)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IQuest)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    public partial class QuestSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly QuestSetterTranslationCommon Instance = new QuestSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IQuestInternal item,
            IQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IQuest item,
            IQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Quest_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Priority) ?? true))
            {
                item.Priority = rhs.Priority;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.QuestFormVersion) ?? true))
            {
                item.QuestFormVersion = rhs.QuestFormVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Event) ?? true))
            {
                item.Event = rhs.Event;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.TextDisplayGlobals) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.TextDisplayGlobals);
                try
                {
                    item.TextDisplayGlobals.SetTo(
                        rhs.TextDisplayGlobals
                        .Select(r => (IFormLink<IGlobalGetter>)new FormLink<IGlobalGetter>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.ObjectWindowFilter) ?? true))
            {
                item.ObjectWindowFilter = rhs.ObjectWindowFilter;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.DialogConditions) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.DialogConditions);
                try
                {
                    item.DialogConditions.SetTo(
                        rhs.DialogConditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.UnusedConditions) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.UnusedConditions);
                try
                {
                    item.UnusedConditions.SetTo(
                        rhs.UnusedConditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Stages) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Stages);
                try
                {
                    item.Stages.SetTo(
                        rhs.Stages
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Objectives) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Objectives);
                try
                {
                    item.Objectives.SetTo(
                        rhs.Objectives
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Aliases) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Aliases);
                try
                {
                    item.Aliases.SetTo(
                        rhs.Aliases
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.DNAMDataTypeState) ?? true))
            {
                item.DNAMDataTypeState = rhs.DNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuestInternal)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuest)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuestInternal)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuest)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Quest DeepCopy(
            IQuestGetter item,
            Quest.TranslationMask? copyMask = null)
        {
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetNew();
            ((QuestSetterTranslationCommon)((IQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Quest DeepCopy(
            IQuestGetter item,
            out Quest.ErrorMask errorMask,
            Quest.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetNew();
            ((QuestSetterTranslationCommon)((IQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Quest.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Quest DeepCopy(
            IQuestGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetNew();
            ((QuestSetterTranslationCommon)((IQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Quest
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Quest_Registration.Instance;
        public new static Quest_Registration Registration => Quest_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return QuestSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class QuestBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static QuestBinaryWriteTranslation Instance = new QuestBinaryWriteTranslation();

        static partial void WriteBinaryDialogConditionsCustom(
            MutagenWriter writer,
            IQuestGetter item);

        public static void WriteBinaryDialogConditions(
            MutagenWriter writer,
            IQuestGetter item)
        {
            WriteBinaryDialogConditionsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryUnusedConditionsLogicCustom(
            MutagenWriter writer,
            IQuestGetter item);

        public static void WriteBinaryUnusedConditionsLogic(
            MutagenWriter writer,
            IQuestGetter item)
        {
            WriteBinaryUnusedConditionsLogicCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryNextAliasIDCustom(
            MutagenWriter writer,
            IQuestGetter item);

        public static void WriteBinaryNextAliasID(
            MutagenWriter writer,
            IQuestGetter item)
        {
            WriteBinaryNextAliasIDCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IQuestGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IQuestGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((QuestAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DNAM)))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Quest.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 2);
                writer.Write(item.Priority);
                writer.Write(item.QuestFormVersion);
                writer.Write(item.Unknown);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Quest.TypeEnum>.Instance.Write(
                    writer,
                    item.Type,
                    length: 4);
            }
            Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Event,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ENAM));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IGlobalGetter>>.Instance.Write(
                writer: writer,
                items: item.TextDisplayGlobals,
                transl: (MutagenWriter subWriter, IFormLink<IGlobalGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.QTGL));
                });
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObjectWindowFilter,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.FLTR),
                binaryType: StringBinaryType.NullTerminate);
            QuestBinaryWriteTranslation.WriteBinaryDialogConditions(
                writer: writer,
                item: item);
            QuestBinaryWriteTranslation.WriteBinaryUnusedConditionsLogic(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IQuestStageGetter>.Instance.Write(
                writer: writer,
                items: item.Stages,
                transl: (MutagenWriter subWriter, IQuestStageGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((QuestStageBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IQuestObjectiveGetter>.Instance.Write(
                writer: writer,
                items: item.Objectives,
                transl: (MutagenWriter subWriter, IQuestObjectiveGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((QuestObjectiveBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            QuestBinaryWriteTranslation.WriteBinaryNextAliasID(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IQuestAliasGetter>.Instance.Write(
                writer: writer,
                items: item.Aliases,
                transl: (MutagenWriter subWriter, IQuestAliasGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((QuestAliasBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
        }

        public void Write(
            MutagenWriter writer,
            IQuestGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.QUST),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                try
                {
                    WriteEmbedded(
                        item: item,
                        writer: writer);
                    writer.MetaData.FormVersion = item.FormVersion;
                    WriteRecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    writer.MetaData.FormVersion = null;
                }
                catch (Exception ex)
                {
                    throw RecordException.Factory(ex, item.FormKey, item.EditorID);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IQuestGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IQuestGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IQuestGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class QuestBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new readonly static QuestBinaryCreateTranslation Instance = new QuestBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.QUST;
        public static void FillBinaryStructs(
            IQuestInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IQuestInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.QuestAdapter.CreateFromBinary(frame: frame);
                    return (int)Quest_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Quest_FieldIndex.Name;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Flags = EnumBinaryTranslation<Quest.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    item.Priority = dataFrame.ReadUInt8();
                    item.QuestFormVersion = dataFrame.ReadUInt8();
                    item.Unknown = dataFrame.ReadInt32();
                    item.Type = EnumBinaryTranslation<Quest.TypeEnum>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    return (int)Quest_FieldIndex.Type;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Event = Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Quest_FieldIndex.Event;
                }
                case RecordTypeInts.QTGL:
                {
                    item.TextDisplayGlobals.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IGlobalGetter>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.QTGL),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Quest_FieldIndex.TextDisplayGlobals;
                }
                case RecordTypeInts.FLTR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObjectWindowFilter = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Quest_FieldIndex.ObjectWindowFilter;
                }
                case RecordTypeInts.CTDA:
                {
                    QuestBinaryCreateTranslation.FillBinaryDialogConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Quest_FieldIndex.DialogConditions;
                }
                case RecordTypeInts.NEXT:
                {
                    QuestBinaryCreateTranslation.FillBinaryUnusedConditionsLogicCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                case RecordTypeInts.INDX:
                {
                    item.Stages.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<QuestStage>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.INDX,
                            recordTypeConverter: recordTypeConverter,
                            transl: QuestStage.TryCreateFromBinary));
                    return (int)Quest_FieldIndex.Stages;
                }
                case RecordTypeInts.QOBJ:
                {
                    item.Objectives.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<QuestObjective>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.QOBJ,
                            recordTypeConverter: recordTypeConverter,
                            transl: QuestObjective.TryCreateFromBinary));
                    return (int)Quest_FieldIndex.Objectives;
                }
                case RecordTypeInts.ANAM:
                {
                    QuestBinaryCreateTranslation.FillBinaryNextAliasIDCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                case RecordTypeInts.ALST:
                case RecordTypeInts.ALLS:
                {
                    item.Aliases.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<QuestAlias>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: QuestAlias_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: QuestAlias.TryCreateFromBinary));
                    return (int)Quest_FieldIndex.Aliases;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Quest_FieldIndex.Description;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength);
            }
        }

        static partial void FillBinaryDialogConditionsCustom(
            MutagenFrame frame,
            IQuestInternal item);

        static partial void FillBinaryUnusedConditionsLogicCustom(
            MutagenFrame frame,
            IQuestInternal item);

        static partial void FillBinaryNextAliasIDCustom(
            MutagenFrame frame,
            IQuestInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class QuestBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class QuestBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IQuestGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Quest_Registration.Instance;
        public new static Quest_Registration Registration => Quest_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => QuestCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((QuestBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IQuestAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? QuestAdapterBinaryOverlay.QuestAdapterFactory(new OverlayStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package), _package) : default;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        private int? _DNAMLocation;
        public Quest.DNAMDataType DNAMDataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DNAMLocation!.Value;
        private bool _Flags_IsSet => _DNAMLocation.HasValue;
        public Quest.Flag Flags => _Flags_IsSet ? (Quest.Flag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_FlagsLocation, 0x2)) : default;
        #endregion
        #region Priority
        private int _PriorityLocation => _DNAMLocation!.Value + 0x2;
        private bool _Priority_IsSet => _DNAMLocation.HasValue;
        public Byte Priority => _Priority_IsSet ? _data.Span[_PriorityLocation] : default;
        #endregion
        #region QuestFormVersion
        private int _QuestFormVersionLocation => _DNAMLocation!.Value + 0x3;
        private bool _QuestFormVersion_IsSet => _DNAMLocation.HasValue;
        public Byte QuestFormVersion => _QuestFormVersion_IsSet ? _data.Span[_QuestFormVersionLocation] : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _DNAMLocation!.Value + 0x4;
        private bool _Unknown_IsSet => _DNAMLocation.HasValue;
        public Int32 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(_UnknownLocation, 4)) : default;
        #endregion
        #region Type
        private int _TypeLocation => _DNAMLocation!.Value + 0x8;
        private bool _Type_IsSet => _DNAMLocation.HasValue;
        public Quest.TypeEnum Type => _Type_IsSet ? (Quest.TypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TypeLocation, 0x4)) : default;
        #endregion
        #region Event
        private int? _EventLocation;
        public RecordType? Event => _EventLocation.HasValue ? new RecordType(BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EventLocation.Value, _package.MetaData.Constants))) : default(RecordType?);
        #endregion
        public IReadOnlyList<IFormLink<IGlobalGetter>> TextDisplayGlobals { get; private set; } = ListExt.Empty<IFormLink<IGlobalGetter>>();
        #region ObjectWindowFilter
        private int? _ObjectWindowFilterLocation;
        public String? ObjectWindowFilter => _ObjectWindowFilterLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _ObjectWindowFilterLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region DialogConditions
        partial void DialogConditionsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        #region UnusedConditionsLogic
        partial void UnusedConditionsLogicCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        public IReadOnlyList<IQuestStageGetter> Stages { get; private set; } = ListExt.Empty<QuestStageBinaryOverlay>();
        public IReadOnlyList<IQuestObjectiveGetter> Objectives { get; private set; } = ListExt.Empty<QuestObjectiveBinaryOverlay>();
        #region NextAliasID
        partial void NextAliasIDCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        public IReadOnlyList<IQuestAliasGetter> Aliases { get; private set; } = ListExt.Empty<QuestAliasBinaryOverlay>();
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected QuestBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static QuestBinaryOverlay QuestFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new QuestBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetMajorRecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret._package.FormVersion = ret;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static QuestBinaryOverlay QuestFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return QuestFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Quest_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Name;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Quest_FieldIndex.Type;
                }
                case RecordTypeInts.ENAM:
                {
                    _EventLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Event;
                }
                case RecordTypeInts.QTGL:
                {
                    this.TextDisplayGlobals = BinaryOverlayList.FactoryByArray<IFormLink<IGlobalGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IGlobalGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)Quest_FieldIndex.TextDisplayGlobals;
                }
                case RecordTypeInts.FLTR:
                {
                    _ObjectWindowFilterLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.ObjectWindowFilter;
                }
                case RecordTypeInts.CTDA:
                {
                    DialogConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Quest_FieldIndex.DialogConditions;
                }
                case RecordTypeInts.NEXT:
                {
                    UnusedConditionsLogicCustomParse(
                        stream,
                        offset);
                    return null;
                }
                case RecordTypeInts.INDX:
                {
                    this.Stages = this.ParseRepeatedTypelessSubrecord<QuestStageBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: RecordTypes.INDX,
                        factory:  QuestStageBinaryOverlay.QuestStageFactory);
                    return (int)Quest_FieldIndex.Stages;
                }
                case RecordTypeInts.QOBJ:
                {
                    this.Objectives = this.ParseRepeatedTypelessSubrecord<QuestObjectiveBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: RecordTypes.QOBJ,
                        factory:  QuestObjectiveBinaryOverlay.QuestObjectiveFactory);
                    return (int)Quest_FieldIndex.Objectives;
                }
                case RecordTypeInts.ANAM:
                {
                    NextAliasIDCustomParse(
                        stream,
                        offset);
                    return null;
                }
                case RecordTypeInts.ALST:
                case RecordTypeInts.ALLS:
                {
                    this.Aliases = this.ParseRepeatedTypelessSubrecord<QuestAliasBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: QuestAlias_Registration.TriggeringRecordTypes,
                        factory:  QuestAliasBinaryOverlay.QuestAliasFactory);
                    return (int)Quest_FieldIndex.Aliases;
                }
                case RecordTypeInts.NNAM:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Description;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            QuestMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IQuestGetter rhs)) return false;
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IQuestGetter? obj)
        {
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((QuestCommon)((IQuestGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

