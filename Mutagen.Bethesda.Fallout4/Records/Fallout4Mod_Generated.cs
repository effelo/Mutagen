/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
using System.Threading.Tasks;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Fallout4Mod :
        IFallout4Mod,
        ILoquiObjectSetter<Fallout4Mod>,
        IEquatable<IFallout4ModGetter>
    {
        #region Ctor
        protected Fallout4Mod()
        {
            _GameSettings_Object = new Group<GameSetting>(this);
            _Keywords_Object = new Group<Keyword>(this);
            _LocationReferenceTypes_Object = new Group<LocationReferenceType>(this);
            _Actions_Object = new Group<ActionRecord>(this);
            _TextureSets_Object = new Group<TextureSet>(this);
            _Globals_Object = new Group<Global>(this);
            _Classes_Object = new Group<Class>(this);
            _Factions_Object = new Group<Faction>(this);
            _HeadParts_Object = new Group<HeadPart>(this);
            _Hairs_Object = new Group<Hair>(this);
            _Eyes_Object = new Group<Eyes>(this);
            _Races_Object = new Group<Race>(this);
            _SoundMarkers_Object = new Group<SoundMarker>(this);
            _AcousticSpaces_Object = new Group<AcousticSpace>(this);
            _MagicEffects_Object = new Group<MagicEffect>(this);
            _LandscapeTextures_Object = new Group<LandscapeTexture>(this);
            _ObjectEffects_Object = new Group<ObjectEffect>(this);
            _Spells_Object = new Group<Spell>(this);
            _Scrolls_Object = new Group<Scroll>(this);
            _Activators_Object = new Group<Activator>(this);
            _TalkingActivators_Object = new Group<TalkingActivator>(this);
            _Armors_Object = new Group<Armor>(this);
            _Books_Object = new Group<Book>(this);
            _Containers_Object = new Group<Container>(this);
            _Doors_Object = new Group<Door>(this);
            _Ingredients_Object = new Group<Ingredient>(this);
            _Lights_Object = new Group<Light>(this);
            _MiscItems_Object = new Group<MiscItem>(this);
            _AlchemicalApparatuses_Object = new Group<AlchemicalApparatus>(this);
            _Statics_Object = new Group<Static>(this);
            _MoveableStatics_Object = new Group<MoveableStatic>(this);
            _Grasses_Object = new Group<Grass>(this);
            _Trees_Object = new Group<Tree>(this);
            _Florae_Object = new Group<Flora>(this);
            _Furniture_Object = new Group<Furniture>(this);
            _Weapons_Object = new Group<Weapon>(this);
            _Ammunitions_Object = new Group<Ammunition>(this);
            _Npcs_Object = new Group<Npc>(this);
            _LeveledNpcs_Object = new Group<LeveledNpc>(this);
            _Keys_Object = new Group<Key>(this);
            _Ingestibles_Object = new Group<Ingestible>(this);
            _IdleMarkers_Object = new Group<IdleMarker>(this);
            _ConstructibleObjects_Object = new Group<ConstructibleObject>(this);
            _Projectiles_Object = new Group<Projectile>(this);
            _Hazards_Object = new Group<Hazard>(this);
            _SoulGems_Object = new Group<SoulGem>(this);
            _LeveledItems_Object = new Group<LeveledItem>(this);
            _Weathers_Object = new Group<Weather>(this);
            _Climates_Object = new Group<Climate>(this);
            _ShaderParticleGeometries_Object = new Group<ShaderParticleGeometry>(this);
            _VisualEffects_Object = new Group<VisualEffect>(this);
            _Regions_Object = new Group<Region>(this);
            _NavigationMeshInfoMaps_Object = new Group<NavigationMeshInfoMap>(this);
            _Worldspaces_Object = new Group<Worldspace>(this);
            _DialogTopics_Object = new Group<DialogTopic>(this);
            _Quests_Object = new Group<Quest>(this);
            _IdleAnimations_Object = new Group<IdleAnimation>(this);
            _Packages_Object = new Group<Package>(this);
            _CombatStyles_Object = new Group<CombatStyle>(this);
            _LoadScreens_Object = new Group<LoadScreen>(this);
            _LeveledSpells_Object = new Group<LeveledSpell>(this);
            _AnimatedObjects_Object = new Group<AnimatedObject>(this);
            _Waters_Object = new Group<Water>(this);
            _EffectShaders_Object = new Group<EffectShader>(this);
            _Explosions_Object = new Group<Explosion>(this);
            _Debris_Object = new Group<Debris>(this);
            _ImageSpaces_Object = new Group<ImageSpace>(this);
            _ImageSpaceAdapters_Object = new Group<ImageSpaceAdapter>(this);
            _FormLists_Object = new Group<FormList>(this);
            _Perks_Object = new Group<Perk>(this);
            _BodyParts_Object = new Group<BodyPartData>(this);
            _AddonNodes_Object = new Group<AddonNode>(this);
            _ActorValueInformation_Object = new Group<ActorValueInformation>(this);
            _CameraShots_Object = new Group<CameraShot>(this);
            _CameraPaths_Object = new Group<CameraPath>(this);
            _VoiceTypes_Object = new Group<VoiceType>(this);
            _MaterialTypes_Object = new Group<MaterialType>(this);
            _Impacts_Object = new Group<Impact>(this);
            _ImpactDataSets_Object = new Group<ImpactDataSet>(this);
            _ArmorAddons_Object = new Group<ArmorAddon>(this);
            _EncounterZones_Object = new Group<EncounterZone>(this);
            _Locations_Object = new Group<Location>(this);
            _Messages_Object = new Group<Message>(this);
            _DefaultObjectManagers_Object = new Group<DefaultObjectManager>(this);
            _LightingTemplates_Object = new Group<LightingTemplate>(this);
            _MusicTypes_Object = new Group<MusicType>(this);
            _Footsteps_Object = new Group<Footstep>(this);
            _FootstepSets_Object = new Group<FootstepSet>(this);
            _StoryManagerBranchNodes_Object = new Group<StoryManagerBranchNode>(this);
            _StoryManagerQuestNodes_Object = new Group<StoryManagerQuestNode>(this);
            _StoryManagerEventNodes_Object = new Group<StoryManagerEventNode>(this);
            _DialogBranches_Object = new Group<DialogBranch>(this);
            _MusicTracks_Object = new Group<MusicTrack>(this);
            _DialogViews_Object = new Group<DialogView>(this);
            _WordsOfPower_Object = new Group<WordOfPower>(this);
            _Shouts_Object = new Group<Shout>(this);
            _EquipTypes_Object = new Group<EquipType>(this);
            _Relationships_Object = new Group<Relationship>(this);
            _Scenes_Object = new Group<Scene>(this);
            _AssociationTypes_Object = new Group<AssociationType>(this);
            _Outfits_Object = new Group<Outfit>(this);
            _ArtObjects_Object = new Group<ArtObject>(this);
            _MaterialObjects_Object = new Group<MaterialObject>(this);
            _MovementTypes_Object = new Group<MovementType>(this);
            _SoundDescriptors_Object = new Group<SoundDescriptor>(this);
            _DualCastData_Object = new Group<DualCastData>(this);
            _SoundCategories_Object = new Group<SoundCategory>(this);
            _SoundOutputModels_Object = new Group<SoundOutputModel>(this);
            _CollisionLayers_Object = new Group<CollisionLayer>(this);
            _Colors_Object = new Group<ColorRecord>(this);
            _ReverbParameters_Object = new Group<ReverbParameters>(this);
            _VolumetricLightings_Object = new Group<VolumetricLighting>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Fallout4ModHeader _ModHeader_Object = new Fallout4ModHeader();
        public Fallout4ModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4ModHeaderGetter IFallout4ModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<GameSetting> _GameSettings_Object;
        public Group<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGameSettingGetter> IFallout4ModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Keyword> _Keywords_Object;
        public Group<Keyword> Keywords => _Keywords_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IKeywordGetter> IFallout4ModGetter.Keywords => _Keywords_Object;
        #endregion
        #region LocationReferenceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LocationReferenceType> _LocationReferenceTypes_Object;
        public Group<LocationReferenceType> LocationReferenceTypes => _LocationReferenceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILocationReferenceTypeGetter> IFallout4ModGetter.LocationReferenceTypes => _LocationReferenceTypes_Object;
        #endregion
        #region Actions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ActionRecord> _Actions_Object;
        public Group<ActionRecord> Actions => _Actions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IActionRecordGetter> IFallout4ModGetter.Actions => _Actions_Object;
        #endregion
        #region TextureSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<TextureSet> _TextureSets_Object;
        public Group<TextureSet> TextureSets => _TextureSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ITextureSetGetter> IFallout4ModGetter.TextureSets => _TextureSets_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Global> _Globals_Object;
        public Group<Global> Globals => _Globals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGlobalGetter> IFallout4ModGetter.Globals => _Globals_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Class> _Classes_Object;
        public Group<Class> Classes => _Classes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IClassGetter> IFallout4ModGetter.Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Faction> _Factions_Object;
        public Group<Faction> Factions => _Factions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFactionGetter> IFallout4ModGetter.Factions => _Factions_Object;
        #endregion
        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<HeadPart> _HeadParts_Object;
        public Group<HeadPart> HeadParts => _HeadParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IHeadPartGetter> IFallout4ModGetter.HeadParts => _HeadParts_Object;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Hair> _Hairs_Object;
        public Group<Hair> Hairs => _Hairs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IHairGetter> IFallout4ModGetter.Hairs => _Hairs_Object;
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Eyes> _Eyes_Object;
        public Group<Eyes> Eyes => _Eyes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEyesGetter> IFallout4ModGetter.Eyes => _Eyes_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Race> _Races_Object;
        public Group<Race> Races => _Races_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IRaceGetter> IFallout4ModGetter.Races => _Races_Object;
        #endregion
        #region SoundMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoundMarker> _SoundMarkers_Object;
        public Group<SoundMarker> SoundMarkers => _SoundMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoundMarkerGetter> IFallout4ModGetter.SoundMarkers => _SoundMarkers_Object;
        #endregion
        #region AcousticSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AcousticSpace> _AcousticSpaces_Object;
        public Group<AcousticSpace> AcousticSpaces => _AcousticSpaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAcousticSpaceGetter> IFallout4ModGetter.AcousticSpaces => _AcousticSpaces_Object;
        #endregion
        #region MagicEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MagicEffect> _MagicEffects_Object;
        public Group<MagicEffect> MagicEffects => _MagicEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMagicEffectGetter> IFallout4ModGetter.MagicEffects => _MagicEffects_Object;
        #endregion
        #region LandscapeTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LandscapeTexture> _LandscapeTextures_Object;
        public Group<LandscapeTexture> LandscapeTextures => _LandscapeTextures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILandscapeTextureGetter> IFallout4ModGetter.LandscapeTextures => _LandscapeTextures_Object;
        #endregion
        #region ObjectEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ObjectEffect> _ObjectEffects_Object;
        public Group<ObjectEffect> ObjectEffects => _ObjectEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IObjectEffectGetter> IFallout4ModGetter.ObjectEffects => _ObjectEffects_Object;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Spell> _Spells_Object;
        public Group<Spell> Spells => _Spells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISpellGetter> IFallout4ModGetter.Spells => _Spells_Object;
        #endregion
        #region Scrolls
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Scroll> _Scrolls_Object;
        public Group<Scroll> Scrolls => _Scrolls_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IScrollGetter> IFallout4ModGetter.Scrolls => _Scrolls_Object;
        #endregion
        #region Activators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Activator> _Activators_Object;
        public Group<Activator> Activators => _Activators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IActivatorGetter> IFallout4ModGetter.Activators => _Activators_Object;
        #endregion
        #region TalkingActivators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<TalkingActivator> _TalkingActivators_Object;
        public Group<TalkingActivator> TalkingActivators => _TalkingActivators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ITalkingActivatorGetter> IFallout4ModGetter.TalkingActivators => _TalkingActivators_Object;
        #endregion
        #region Armors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Armor> _Armors_Object;
        public Group<Armor> Armors => _Armors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IArmorGetter> IFallout4ModGetter.Armors => _Armors_Object;
        #endregion
        #region Books
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Book> _Books_Object;
        public Group<Book> Books => _Books_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IBookGetter> IFallout4ModGetter.Books => _Books_Object;
        #endregion
        #region Containers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Container> _Containers_Object;
        public Group<Container> Containers => _Containers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IContainerGetter> IFallout4ModGetter.Containers => _Containers_Object;
        #endregion
        #region Doors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Door> _Doors_Object;
        public Group<Door> Doors => _Doors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDoorGetter> IFallout4ModGetter.Doors => _Doors_Object;
        #endregion
        #region Ingredients
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ingredient> _Ingredients_Object;
        public Group<Ingredient> Ingredients => _Ingredients_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIngredientGetter> IFallout4ModGetter.Ingredients => _Ingredients_Object;
        #endregion
        #region Lights
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Light> _Lights_Object;
        public Group<Light> Lights => _Lights_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILightGetter> IFallout4ModGetter.Lights => _Lights_Object;
        #endregion
        #region MiscItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MiscItem> _MiscItems_Object;
        public Group<MiscItem> MiscItems => _MiscItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMiscItemGetter> IFallout4ModGetter.MiscItems => _MiscItems_Object;
        #endregion
        #region AlchemicalApparatuses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AlchemicalApparatus> _AlchemicalApparatuses_Object;
        public Group<AlchemicalApparatus> AlchemicalApparatuses => _AlchemicalApparatuses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAlchemicalApparatusGetter> IFallout4ModGetter.AlchemicalApparatuses => _AlchemicalApparatuses_Object;
        #endregion
        #region Statics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Static> _Statics_Object;
        public Group<Static> Statics => _Statics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IStaticGetter> IFallout4ModGetter.Statics => _Statics_Object;
        #endregion
        #region MoveableStatics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MoveableStatic> _MoveableStatics_Object;
        public Group<MoveableStatic> MoveableStatics => _MoveableStatics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMoveableStaticGetter> IFallout4ModGetter.MoveableStatics => _MoveableStatics_Object;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Grass> _Grasses_Object;
        public Group<Grass> Grasses => _Grasses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGrassGetter> IFallout4ModGetter.Grasses => _Grasses_Object;
        #endregion
        #region Trees
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Tree> _Trees_Object;
        public Group<Tree> Trees => _Trees_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ITreeGetter> IFallout4ModGetter.Trees => _Trees_Object;
        #endregion
        #region Florae
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Flora> _Florae_Object;
        public Group<Flora> Florae => _Florae_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFloraGetter> IFallout4ModGetter.Florae => _Florae_Object;
        #endregion
        #region Furniture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Furniture> _Furniture_Object;
        public Group<Furniture> Furniture => _Furniture_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFurnitureGetter> IFallout4ModGetter.Furniture => _Furniture_Object;
        #endregion
        #region Weapons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Weapon> _Weapons_Object;
        public Group<Weapon> Weapons => _Weapons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWeaponGetter> IFallout4ModGetter.Weapons => _Weapons_Object;
        #endregion
        #region Ammunitions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ammunition> _Ammunitions_Object;
        public Group<Ammunition> Ammunitions => _Ammunitions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAmmunitionGetter> IFallout4ModGetter.Ammunitions => _Ammunitions_Object;
        #endregion
        #region Npcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Npc> _Npcs_Object;
        public Group<Npc> Npcs => _Npcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<INpcGetter> IFallout4ModGetter.Npcs => _Npcs_Object;
        #endregion
        #region LeveledNpcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledNpc> _LeveledNpcs_Object;
        public Group<LeveledNpc> LeveledNpcs => _LeveledNpcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILeveledNpcGetter> IFallout4ModGetter.LeveledNpcs => _LeveledNpcs_Object;
        #endregion
        #region Keys
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Key> _Keys_Object;
        public Group<Key> Keys => _Keys_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IKeyGetter> IFallout4ModGetter.Keys => _Keys_Object;
        #endregion
        #region Ingestibles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ingestible> _Ingestibles_Object;
        public Group<Ingestible> Ingestibles => _Ingestibles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIngestibleGetter> IFallout4ModGetter.Ingestibles => _Ingestibles_Object;
        #endregion
        #region IdleMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<IdleMarker> _IdleMarkers_Object;
        public Group<IdleMarker> IdleMarkers => _IdleMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIdleMarkerGetter> IFallout4ModGetter.IdleMarkers => _IdleMarkers_Object;
        #endregion
        #region ConstructibleObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ConstructibleObject> _ConstructibleObjects_Object;
        public Group<ConstructibleObject> ConstructibleObjects => _ConstructibleObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IConstructibleObjectGetter> IFallout4ModGetter.ConstructibleObjects => _ConstructibleObjects_Object;
        #endregion
        #region Projectiles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Projectile> _Projectiles_Object;
        public Group<Projectile> Projectiles => _Projectiles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IProjectileGetter> IFallout4ModGetter.Projectiles => _Projectiles_Object;
        #endregion
        #region Hazards
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Hazard> _Hazards_Object;
        public Group<Hazard> Hazards => _Hazards_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IHazardGetter> IFallout4ModGetter.Hazards => _Hazards_Object;
        #endregion
        #region SoulGems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoulGem> _SoulGems_Object;
        public Group<SoulGem> SoulGems => _SoulGems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoulGemGetter> IFallout4ModGetter.SoulGems => _SoulGems_Object;
        #endregion
        #region LeveledItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledItem> _LeveledItems_Object;
        public Group<LeveledItem> LeveledItems => _LeveledItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILeveledItemGetter> IFallout4ModGetter.LeveledItems => _LeveledItems_Object;
        #endregion
        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Weather> _Weathers_Object;
        public Group<Weather> Weathers => _Weathers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWeatherGetter> IFallout4ModGetter.Weathers => _Weathers_Object;
        #endregion
        #region Climates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Climate> _Climates_Object;
        public Group<Climate> Climates => _Climates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IClimateGetter> IFallout4ModGetter.Climates => _Climates_Object;
        #endregion
        #region ShaderParticleGeometries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ShaderParticleGeometry> _ShaderParticleGeometries_Object;
        public Group<ShaderParticleGeometry> ShaderParticleGeometries => _ShaderParticleGeometries_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IShaderParticleGeometryGetter> IFallout4ModGetter.ShaderParticleGeometries => _ShaderParticleGeometries_Object;
        #endregion
        #region VisualEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<VisualEffect> _VisualEffects_Object;
        public Group<VisualEffect> VisualEffects => _VisualEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IVisualEffectGetter> IFallout4ModGetter.VisualEffects => _VisualEffects_Object;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Region> _Regions_Object;
        public Group<Region> Regions => _Regions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IRegionGetter> IFallout4ModGetter.Regions => _Regions_Object;
        #endregion
        #region NavigationMeshInfoMaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<NavigationMeshInfoMap> _NavigationMeshInfoMaps_Object;
        public Group<NavigationMeshInfoMap> NavigationMeshInfoMaps => _NavigationMeshInfoMaps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<INavigationMeshInfoMapGetter> IFallout4ModGetter.NavigationMeshInfoMaps => _NavigationMeshInfoMaps_Object;
        #endregion
        #region Cells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ListGroup<CellBlock> _Cells_Object = new ListGroup<CellBlock>();
        public ListGroup<CellBlock> Cells => _Cells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IListGroupGetter<ICellBlockGetter> IFallout4ModGetter.Cells => _Cells_Object;
        #endregion
        #region Worldspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Worldspace> _Worldspaces_Object;
        public Group<Worldspace> Worldspaces => _Worldspaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWorldspaceGetter> IFallout4ModGetter.Worldspaces => _Worldspaces_Object;
        #endregion
        #region DialogTopics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DialogTopic> _DialogTopics_Object;
        public Group<DialogTopic> DialogTopics => _DialogTopics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDialogTopicGetter> IFallout4ModGetter.DialogTopics => _DialogTopics_Object;
        #endregion
        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Quest> _Quests_Object;
        public Group<Quest> Quests => _Quests_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IQuestGetter> IFallout4ModGetter.Quests => _Quests_Object;
        #endregion
        #region IdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<IdleAnimation> _IdleAnimations_Object;
        public Group<IdleAnimation> IdleAnimations => _IdleAnimations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIdleAnimationGetter> IFallout4ModGetter.IdleAnimations => _IdleAnimations_Object;
        #endregion
        #region Packages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Package> _Packages_Object;
        public Group<Package> Packages => _Packages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IPackageGetter> IFallout4ModGetter.Packages => _Packages_Object;
        #endregion
        #region CombatStyles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<CombatStyle> _CombatStyles_Object;
        public Group<CombatStyle> CombatStyles => _CombatStyles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ICombatStyleGetter> IFallout4ModGetter.CombatStyles => _CombatStyles_Object;
        #endregion
        #region LoadScreens
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LoadScreen> _LoadScreens_Object;
        public Group<LoadScreen> LoadScreens => _LoadScreens_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILoadScreenGetter> IFallout4ModGetter.LoadScreens => _LoadScreens_Object;
        #endregion
        #region LeveledSpells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledSpell> _LeveledSpells_Object;
        public Group<LeveledSpell> LeveledSpells => _LeveledSpells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILeveledSpellGetter> IFallout4ModGetter.LeveledSpells => _LeveledSpells_Object;
        #endregion
        #region AnimatedObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AnimatedObject> _AnimatedObjects_Object;
        public Group<AnimatedObject> AnimatedObjects => _AnimatedObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAnimatedObjectGetter> IFallout4ModGetter.AnimatedObjects => _AnimatedObjects_Object;
        #endregion
        #region Waters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Water> _Waters_Object;
        public Group<Water> Waters => _Waters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWaterGetter> IFallout4ModGetter.Waters => _Waters_Object;
        #endregion
        #region EffectShaders
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<EffectShader> _EffectShaders_Object;
        public Group<EffectShader> EffectShaders => _EffectShaders_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEffectShaderGetter> IFallout4ModGetter.EffectShaders => _EffectShaders_Object;
        #endregion
        #region Explosions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Explosion> _Explosions_Object;
        public Group<Explosion> Explosions => _Explosions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IExplosionGetter> IFallout4ModGetter.Explosions => _Explosions_Object;
        #endregion
        #region Debris
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Debris> _Debris_Object;
        public Group<Debris> Debris => _Debris_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDebrisGetter> IFallout4ModGetter.Debris => _Debris_Object;
        #endregion
        #region ImageSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ImageSpace> _ImageSpaces_Object;
        public Group<ImageSpace> ImageSpaces => _ImageSpaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IImageSpaceGetter> IFallout4ModGetter.ImageSpaces => _ImageSpaces_Object;
        #endregion
        #region ImageSpaceAdapters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ImageSpaceAdapter> _ImageSpaceAdapters_Object;
        public Group<ImageSpaceAdapter> ImageSpaceAdapters => _ImageSpaceAdapters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IImageSpaceAdapterGetter> IFallout4ModGetter.ImageSpaceAdapters => _ImageSpaceAdapters_Object;
        #endregion
        #region FormLists
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<FormList> _FormLists_Object;
        public Group<FormList> FormLists => _FormLists_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFormListGetter> IFallout4ModGetter.FormLists => _FormLists_Object;
        #endregion
        #region Perks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Perk> _Perks_Object;
        public Group<Perk> Perks => _Perks_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IPerkGetter> IFallout4ModGetter.Perks => _Perks_Object;
        #endregion
        #region BodyParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<BodyPartData> _BodyParts_Object;
        public Group<BodyPartData> BodyParts => _BodyParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IBodyPartDataGetter> IFallout4ModGetter.BodyParts => _BodyParts_Object;
        #endregion
        #region AddonNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AddonNode> _AddonNodes_Object;
        public Group<AddonNode> AddonNodes => _AddonNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAddonNodeGetter> IFallout4ModGetter.AddonNodes => _AddonNodes_Object;
        #endregion
        #region ActorValueInformation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ActorValueInformation> _ActorValueInformation_Object;
        public Group<ActorValueInformation> ActorValueInformation => _ActorValueInformation_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IActorValueInformationGetter> IFallout4ModGetter.ActorValueInformation => _ActorValueInformation_Object;
        #endregion
        #region CameraShots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<CameraShot> _CameraShots_Object;
        public Group<CameraShot> CameraShots => _CameraShots_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ICameraShotGetter> IFallout4ModGetter.CameraShots => _CameraShots_Object;
        #endregion
        #region CameraPaths
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<CameraPath> _CameraPaths_Object;
        public Group<CameraPath> CameraPaths => _CameraPaths_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ICameraPathGetter> IFallout4ModGetter.CameraPaths => _CameraPaths_Object;
        #endregion
        #region VoiceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<VoiceType> _VoiceTypes_Object;
        public Group<VoiceType> VoiceTypes => _VoiceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IVoiceTypeGetter> IFallout4ModGetter.VoiceTypes => _VoiceTypes_Object;
        #endregion
        #region MaterialTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MaterialType> _MaterialTypes_Object;
        public Group<MaterialType> MaterialTypes => _MaterialTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMaterialTypeGetter> IFallout4ModGetter.MaterialTypes => _MaterialTypes_Object;
        #endregion
        #region Impacts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Impact> _Impacts_Object;
        public Group<Impact> Impacts => _Impacts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IImpactGetter> IFallout4ModGetter.Impacts => _Impacts_Object;
        #endregion
        #region ImpactDataSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ImpactDataSet> _ImpactDataSets_Object;
        public Group<ImpactDataSet> ImpactDataSets => _ImpactDataSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IImpactDataSetGetter> IFallout4ModGetter.ImpactDataSets => _ImpactDataSets_Object;
        #endregion
        #region ArmorAddons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ArmorAddon> _ArmorAddons_Object;
        public Group<ArmorAddon> ArmorAddons => _ArmorAddons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IArmorAddonGetter> IFallout4ModGetter.ArmorAddons => _ArmorAddons_Object;
        #endregion
        #region EncounterZones
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<EncounterZone> _EncounterZones_Object;
        public Group<EncounterZone> EncounterZones => _EncounterZones_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEncounterZoneGetter> IFallout4ModGetter.EncounterZones => _EncounterZones_Object;
        #endregion
        #region Locations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Location> _Locations_Object;
        public Group<Location> Locations => _Locations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILocationGetter> IFallout4ModGetter.Locations => _Locations_Object;
        #endregion
        #region Messages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Message> _Messages_Object;
        public Group<Message> Messages => _Messages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMessageGetter> IFallout4ModGetter.Messages => _Messages_Object;
        #endregion
        #region DefaultObjectManagers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DefaultObjectManager> _DefaultObjectManagers_Object;
        public Group<DefaultObjectManager> DefaultObjectManagers => _DefaultObjectManagers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDefaultObjectManagerGetter> IFallout4ModGetter.DefaultObjectManagers => _DefaultObjectManagers_Object;
        #endregion
        #region LightingTemplates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LightingTemplate> _LightingTemplates_Object;
        public Group<LightingTemplate> LightingTemplates => _LightingTemplates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILightingTemplateGetter> IFallout4ModGetter.LightingTemplates => _LightingTemplates_Object;
        #endregion
        #region MusicTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MusicType> _MusicTypes_Object;
        public Group<MusicType> MusicTypes => _MusicTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMusicTypeGetter> IFallout4ModGetter.MusicTypes => _MusicTypes_Object;
        #endregion
        #region Footsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Footstep> _Footsteps_Object;
        public Group<Footstep> Footsteps => _Footsteps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFootstepGetter> IFallout4ModGetter.Footsteps => _Footsteps_Object;
        #endregion
        #region FootstepSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<FootstepSet> _FootstepSets_Object;
        public Group<FootstepSet> FootstepSets => _FootstepSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFootstepSetGetter> IFallout4ModGetter.FootstepSets => _FootstepSets_Object;
        #endregion
        #region StoryManagerBranchNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<StoryManagerBranchNode> _StoryManagerBranchNodes_Object;
        public Group<StoryManagerBranchNode> StoryManagerBranchNodes => _StoryManagerBranchNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IStoryManagerBranchNodeGetter> IFallout4ModGetter.StoryManagerBranchNodes => _StoryManagerBranchNodes_Object;
        #endregion
        #region StoryManagerQuestNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<StoryManagerQuestNode> _StoryManagerQuestNodes_Object;
        public Group<StoryManagerQuestNode> StoryManagerQuestNodes => _StoryManagerQuestNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IStoryManagerQuestNodeGetter> IFallout4ModGetter.StoryManagerQuestNodes => _StoryManagerQuestNodes_Object;
        #endregion
        #region StoryManagerEventNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<StoryManagerEventNode> _StoryManagerEventNodes_Object;
        public Group<StoryManagerEventNode> StoryManagerEventNodes => _StoryManagerEventNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IStoryManagerEventNodeGetter> IFallout4ModGetter.StoryManagerEventNodes => _StoryManagerEventNodes_Object;
        #endregion
        #region DialogBranches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DialogBranch> _DialogBranches_Object;
        public Group<DialogBranch> DialogBranches => _DialogBranches_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDialogBranchGetter> IFallout4ModGetter.DialogBranches => _DialogBranches_Object;
        #endregion
        #region MusicTracks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MusicTrack> _MusicTracks_Object;
        public Group<MusicTrack> MusicTracks => _MusicTracks_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMusicTrackGetter> IFallout4ModGetter.MusicTracks => _MusicTracks_Object;
        #endregion
        #region DialogViews
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DialogView> _DialogViews_Object;
        public Group<DialogView> DialogViews => _DialogViews_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDialogViewGetter> IFallout4ModGetter.DialogViews => _DialogViews_Object;
        #endregion
        #region WordsOfPower
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<WordOfPower> _WordsOfPower_Object;
        public Group<WordOfPower> WordsOfPower => _WordsOfPower_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWordOfPowerGetter> IFallout4ModGetter.WordsOfPower => _WordsOfPower_Object;
        #endregion
        #region Shouts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Shout> _Shouts_Object;
        public Group<Shout> Shouts => _Shouts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IShoutGetter> IFallout4ModGetter.Shouts => _Shouts_Object;
        #endregion
        #region EquipTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<EquipType> _EquipTypes_Object;
        public Group<EquipType> EquipTypes => _EquipTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEquipTypeGetter> IFallout4ModGetter.EquipTypes => _EquipTypes_Object;
        #endregion
        #region Relationships
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Relationship> _Relationships_Object;
        public Group<Relationship> Relationships => _Relationships_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IRelationshipGetter> IFallout4ModGetter.Relationships => _Relationships_Object;
        #endregion
        #region Scenes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Scene> _Scenes_Object;
        public Group<Scene> Scenes => _Scenes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISceneGetter> IFallout4ModGetter.Scenes => _Scenes_Object;
        #endregion
        #region AssociationTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AssociationType> _AssociationTypes_Object;
        public Group<AssociationType> AssociationTypes => _AssociationTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAssociationTypeGetter> IFallout4ModGetter.AssociationTypes => _AssociationTypes_Object;
        #endregion
        #region Outfits
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Outfit> _Outfits_Object;
        public Group<Outfit> Outfits => _Outfits_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IOutfitGetter> IFallout4ModGetter.Outfits => _Outfits_Object;
        #endregion
        #region ArtObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ArtObject> _ArtObjects_Object;
        public Group<ArtObject> ArtObjects => _ArtObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IArtObjectGetter> IFallout4ModGetter.ArtObjects => _ArtObjects_Object;
        #endregion
        #region MaterialObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MaterialObject> _MaterialObjects_Object;
        public Group<MaterialObject> MaterialObjects => _MaterialObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMaterialObjectGetter> IFallout4ModGetter.MaterialObjects => _MaterialObjects_Object;
        #endregion
        #region MovementTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MovementType> _MovementTypes_Object;
        public Group<MovementType> MovementTypes => _MovementTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMovementTypeGetter> IFallout4ModGetter.MovementTypes => _MovementTypes_Object;
        #endregion
        #region SoundDescriptors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoundDescriptor> _SoundDescriptors_Object;
        public Group<SoundDescriptor> SoundDescriptors => _SoundDescriptors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoundDescriptorGetter> IFallout4ModGetter.SoundDescriptors => _SoundDescriptors_Object;
        #endregion
        #region DualCastData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DualCastData> _DualCastData_Object;
        public Group<DualCastData> DualCastData => _DualCastData_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDualCastDataGetter> IFallout4ModGetter.DualCastData => _DualCastData_Object;
        #endregion
        #region SoundCategories
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoundCategory> _SoundCategories_Object;
        public Group<SoundCategory> SoundCategories => _SoundCategories_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoundCategoryGetter> IFallout4ModGetter.SoundCategories => _SoundCategories_Object;
        #endregion
        #region SoundOutputModels
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoundOutputModel> _SoundOutputModels_Object;
        public Group<SoundOutputModel> SoundOutputModels => _SoundOutputModels_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoundOutputModelGetter> IFallout4ModGetter.SoundOutputModels => _SoundOutputModels_Object;
        #endregion
        #region CollisionLayers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<CollisionLayer> _CollisionLayers_Object;
        public Group<CollisionLayer> CollisionLayers => _CollisionLayers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ICollisionLayerGetter> IFallout4ModGetter.CollisionLayers => _CollisionLayers_Object;
        #endregion
        #region Colors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ColorRecord> _Colors_Object;
        public Group<ColorRecord> Colors => _Colors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IColorRecordGetter> IFallout4ModGetter.Colors => _Colors_Object;
        #endregion
        #region ReverbParameters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ReverbParameters> _ReverbParameters_Object;
        public Group<ReverbParameters> ReverbParameters => _ReverbParameters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IReverbParametersGetter> IFallout4ModGetter.ReverbParameters => _ReverbParameters_Object;
        #endregion
        #region VolumetricLightings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<VolumetricLighting> _VolumetricLightings_Object;
        public Group<VolumetricLighting> VolumetricLightings => _VolumetricLightings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IVolumetricLightingGetter> IFallout4ModGetter.VolumetricLightings => _VolumetricLightings_Object;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            Fallout4ModMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFallout4ModGetter rhs)) return false;
            return ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IFallout4ModGetter? obj)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModHeader = new MaskItem<TItem, Fallout4ModHeader.Mask<TItem>?>(initialValue, new Fallout4ModHeader.Mask<TItem>(initialValue));
                this.GameSettings = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LocationReferenceTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Actions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.TextureSets = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Globals = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Classes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.HeadParts = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Hairs = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Eyes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Races = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoundMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AcousticSpaces = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MagicEffects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LandscapeTextures = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ObjectEffects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Spells = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Scrolls = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Activators = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.TalkingActivators = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Armors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Books = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Containers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Doors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Ingredients = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Lights = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MiscItems = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AlchemicalApparatuses = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Statics = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MoveableStatics = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Grasses = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Trees = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Florae = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Furniture = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Weapons = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Ammunitions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Npcs = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LeveledNpcs = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Keys = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Ingestibles = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.IdleMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ConstructibleObjects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Projectiles = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Hazards = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoulGems = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LeveledItems = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Weathers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Climates = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ShaderParticleGeometries = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.VisualEffects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Regions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.NavigationMeshInfoMaps = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Cells = new MaskItem<TItem, ListGroup.Mask<TItem>?>(initialValue, new ListGroup.Mask<TItem>(initialValue));
                this.Worldspaces = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.DialogTopics = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Quests = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.IdleAnimations = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Packages = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.CombatStyles = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LoadScreens = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LeveledSpells = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AnimatedObjects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Waters = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.EffectShaders = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Explosions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Debris = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ImageSpaces = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ImageSpaceAdapters = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.FormLists = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Perks = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.BodyParts = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AddonNodes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ActorValueInformation = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.CameraShots = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.CameraPaths = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.VoiceTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MaterialTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Impacts = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ImpactDataSets = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ArmorAddons = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.EncounterZones = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Locations = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Messages = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.DefaultObjectManagers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LightingTemplates = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MusicTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Footsteps = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.FootstepSets = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.StoryManagerBranchNodes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.StoryManagerQuestNodes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.StoryManagerEventNodes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.DialogBranches = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MusicTracks = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.DialogViews = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.WordsOfPower = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Shouts = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.EquipTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Relationships = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Scenes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AssociationTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Outfits = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ArtObjects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MaterialObjects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MovementTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoundDescriptors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.DualCastData = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoundCategories = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoundOutputModels = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.CollisionLayers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Colors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ReverbParameters = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.VolumetricLightings = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ModHeader,
                TItem GameSettings,
                TItem Keywords,
                TItem LocationReferenceTypes,
                TItem Actions,
                TItem TextureSets,
                TItem Globals,
                TItem Classes,
                TItem Factions,
                TItem HeadParts,
                TItem Hairs,
                TItem Eyes,
                TItem Races,
                TItem SoundMarkers,
                TItem AcousticSpaces,
                TItem MagicEffects,
                TItem LandscapeTextures,
                TItem ObjectEffects,
                TItem Spells,
                TItem Scrolls,
                TItem Activators,
                TItem TalkingActivators,
                TItem Armors,
                TItem Books,
                TItem Containers,
                TItem Doors,
                TItem Ingredients,
                TItem Lights,
                TItem MiscItems,
                TItem AlchemicalApparatuses,
                TItem Statics,
                TItem MoveableStatics,
                TItem Grasses,
                TItem Trees,
                TItem Florae,
                TItem Furniture,
                TItem Weapons,
                TItem Ammunitions,
                TItem Npcs,
                TItem LeveledNpcs,
                TItem Keys,
                TItem Ingestibles,
                TItem IdleMarkers,
                TItem ConstructibleObjects,
                TItem Projectiles,
                TItem Hazards,
                TItem SoulGems,
                TItem LeveledItems,
                TItem Weathers,
                TItem Climates,
                TItem ShaderParticleGeometries,
                TItem VisualEffects,
                TItem Regions,
                TItem NavigationMeshInfoMaps,
                TItem Cells,
                TItem Worldspaces,
                TItem DialogTopics,
                TItem Quests,
                TItem IdleAnimations,
                TItem Packages,
                TItem CombatStyles,
                TItem LoadScreens,
                TItem LeveledSpells,
                TItem AnimatedObjects,
                TItem Waters,
                TItem EffectShaders,
                TItem Explosions,
                TItem Debris,
                TItem ImageSpaces,
                TItem ImageSpaceAdapters,
                TItem FormLists,
                TItem Perks,
                TItem BodyParts,
                TItem AddonNodes,
                TItem ActorValueInformation,
                TItem CameraShots,
                TItem CameraPaths,
                TItem VoiceTypes,
                TItem MaterialTypes,
                TItem Impacts,
                TItem ImpactDataSets,
                TItem ArmorAddons,
                TItem EncounterZones,
                TItem Locations,
                TItem Messages,
                TItem DefaultObjectManagers,
                TItem LightingTemplates,
                TItem MusicTypes,
                TItem Footsteps,
                TItem FootstepSets,
                TItem StoryManagerBranchNodes,
                TItem StoryManagerQuestNodes,
                TItem StoryManagerEventNodes,
                TItem DialogBranches,
                TItem MusicTracks,
                TItem DialogViews,
                TItem WordsOfPower,
                TItem Shouts,
                TItem EquipTypes,
                TItem Relationships,
                TItem Scenes,
                TItem AssociationTypes,
                TItem Outfits,
                TItem ArtObjects,
                TItem MaterialObjects,
                TItem MovementTypes,
                TItem SoundDescriptors,
                TItem DualCastData,
                TItem SoundCategories,
                TItem SoundOutputModels,
                TItem CollisionLayers,
                TItem Colors,
                TItem ReverbParameters,
                TItem VolumetricLightings)
            {
                this.ModHeader = new MaskItem<TItem, Fallout4ModHeader.Mask<TItem>?>(ModHeader, new Fallout4ModHeader.Mask<TItem>(ModHeader));
                this.GameSettings = new MaskItem<TItem, Group.Mask<TItem>?>(GameSettings, new Group.Mask<TItem>(GameSettings));
                this.Keywords = new MaskItem<TItem, Group.Mask<TItem>?>(Keywords, new Group.Mask<TItem>(Keywords));
                this.LocationReferenceTypes = new MaskItem<TItem, Group.Mask<TItem>?>(LocationReferenceTypes, new Group.Mask<TItem>(LocationReferenceTypes));
                this.Actions = new MaskItem<TItem, Group.Mask<TItem>?>(Actions, new Group.Mask<TItem>(Actions));
                this.TextureSets = new MaskItem<TItem, Group.Mask<TItem>?>(TextureSets, new Group.Mask<TItem>(TextureSets));
                this.Globals = new MaskItem<TItem, Group.Mask<TItem>?>(Globals, new Group.Mask<TItem>(Globals));
                this.Classes = new MaskItem<TItem, Group.Mask<TItem>?>(Classes, new Group.Mask<TItem>(Classes));
                this.Factions = new MaskItem<TItem, Group.Mask<TItem>?>(Factions, new Group.Mask<TItem>(Factions));
                this.HeadParts = new MaskItem<TItem, Group.Mask<TItem>?>(HeadParts, new Group.Mask<TItem>(HeadParts));
                this.Hairs = new MaskItem<TItem, Group.Mask<TItem>?>(Hairs, new Group.Mask<TItem>(Hairs));
                this.Eyes = new MaskItem<TItem, Group.Mask<TItem>?>(Eyes, new Group.Mask<TItem>(Eyes));
                this.Races = new MaskItem<TItem, Group.Mask<TItem>?>(Races, new Group.Mask<TItem>(Races));
                this.SoundMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(SoundMarkers, new Group.Mask<TItem>(SoundMarkers));
                this.AcousticSpaces = new MaskItem<TItem, Group.Mask<TItem>?>(AcousticSpaces, new Group.Mask<TItem>(AcousticSpaces));
                this.MagicEffects = new MaskItem<TItem, Group.Mask<TItem>?>(MagicEffects, new Group.Mask<TItem>(MagicEffects));
                this.LandscapeTextures = new MaskItem<TItem, Group.Mask<TItem>?>(LandscapeTextures, new Group.Mask<TItem>(LandscapeTextures));
                this.ObjectEffects = new MaskItem<TItem, Group.Mask<TItem>?>(ObjectEffects, new Group.Mask<TItem>(ObjectEffects));
                this.Spells = new MaskItem<TItem, Group.Mask<TItem>?>(Spells, new Group.Mask<TItem>(Spells));
                this.Scrolls = new MaskItem<TItem, Group.Mask<TItem>?>(Scrolls, new Group.Mask<TItem>(Scrolls));
                this.Activators = new MaskItem<TItem, Group.Mask<TItem>?>(Activators, new Group.Mask<TItem>(Activators));
                this.TalkingActivators = new MaskItem<TItem, Group.Mask<TItem>?>(TalkingActivators, new Group.Mask<TItem>(TalkingActivators));
                this.Armors = new MaskItem<TItem, Group.Mask<TItem>?>(Armors, new Group.Mask<TItem>(Armors));
                this.Books = new MaskItem<TItem, Group.Mask<TItem>?>(Books, new Group.Mask<TItem>(Books));
                this.Containers = new MaskItem<TItem, Group.Mask<TItem>?>(Containers, new Group.Mask<TItem>(Containers));
                this.Doors = new MaskItem<TItem, Group.Mask<TItem>?>(Doors, new Group.Mask<TItem>(Doors));
                this.Ingredients = new MaskItem<TItem, Group.Mask<TItem>?>(Ingredients, new Group.Mask<TItem>(Ingredients));
                this.Lights = new MaskItem<TItem, Group.Mask<TItem>?>(Lights, new Group.Mask<TItem>(Lights));
                this.MiscItems = new MaskItem<TItem, Group.Mask<TItem>?>(MiscItems, new Group.Mask<TItem>(MiscItems));
                this.AlchemicalApparatuses = new MaskItem<TItem, Group.Mask<TItem>?>(AlchemicalApparatuses, new Group.Mask<TItem>(AlchemicalApparatuses));
                this.Statics = new MaskItem<TItem, Group.Mask<TItem>?>(Statics, new Group.Mask<TItem>(Statics));
                this.MoveableStatics = new MaskItem<TItem, Group.Mask<TItem>?>(MoveableStatics, new Group.Mask<TItem>(MoveableStatics));
                this.Grasses = new MaskItem<TItem, Group.Mask<TItem>?>(Grasses, new Group.Mask<TItem>(Grasses));
                this.Trees = new MaskItem<TItem, Group.Mask<TItem>?>(Trees, new Group.Mask<TItem>(Trees));
                this.Florae = new MaskItem<TItem, Group.Mask<TItem>?>(Florae, new Group.Mask<TItem>(Florae));
                this.Furniture = new MaskItem<TItem, Group.Mask<TItem>?>(Furniture, new Group.Mask<TItem>(Furniture));
                this.Weapons = new MaskItem<TItem, Group.Mask<TItem>?>(Weapons, new Group.Mask<TItem>(Weapons));
                this.Ammunitions = new MaskItem<TItem, Group.Mask<TItem>?>(Ammunitions, new Group.Mask<TItem>(Ammunitions));
                this.Npcs = new MaskItem<TItem, Group.Mask<TItem>?>(Npcs, new Group.Mask<TItem>(Npcs));
                this.LeveledNpcs = new MaskItem<TItem, Group.Mask<TItem>?>(LeveledNpcs, new Group.Mask<TItem>(LeveledNpcs));
                this.Keys = new MaskItem<TItem, Group.Mask<TItem>?>(Keys, new Group.Mask<TItem>(Keys));
                this.Ingestibles = new MaskItem<TItem, Group.Mask<TItem>?>(Ingestibles, new Group.Mask<TItem>(Ingestibles));
                this.IdleMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(IdleMarkers, new Group.Mask<TItem>(IdleMarkers));
                this.ConstructibleObjects = new MaskItem<TItem, Group.Mask<TItem>?>(ConstructibleObjects, new Group.Mask<TItem>(ConstructibleObjects));
                this.Projectiles = new MaskItem<TItem, Group.Mask<TItem>?>(Projectiles, new Group.Mask<TItem>(Projectiles));
                this.Hazards = new MaskItem<TItem, Group.Mask<TItem>?>(Hazards, new Group.Mask<TItem>(Hazards));
                this.SoulGems = new MaskItem<TItem, Group.Mask<TItem>?>(SoulGems, new Group.Mask<TItem>(SoulGems));
                this.LeveledItems = new MaskItem<TItem, Group.Mask<TItem>?>(LeveledItems, new Group.Mask<TItem>(LeveledItems));
                this.Weathers = new MaskItem<TItem, Group.Mask<TItem>?>(Weathers, new Group.Mask<TItem>(Weathers));
                this.Climates = new MaskItem<TItem, Group.Mask<TItem>?>(Climates, new Group.Mask<TItem>(Climates));
                this.ShaderParticleGeometries = new MaskItem<TItem, Group.Mask<TItem>?>(ShaderParticleGeometries, new Group.Mask<TItem>(ShaderParticleGeometries));
                this.VisualEffects = new MaskItem<TItem, Group.Mask<TItem>?>(VisualEffects, new Group.Mask<TItem>(VisualEffects));
                this.Regions = new MaskItem<TItem, Group.Mask<TItem>?>(Regions, new Group.Mask<TItem>(Regions));
                this.NavigationMeshInfoMaps = new MaskItem<TItem, Group.Mask<TItem>?>(NavigationMeshInfoMaps, new Group.Mask<TItem>(NavigationMeshInfoMaps));
                this.Cells = new MaskItem<TItem, ListGroup.Mask<TItem>?>(Cells, new ListGroup.Mask<TItem>(Cells));
                this.Worldspaces = new MaskItem<TItem, Group.Mask<TItem>?>(Worldspaces, new Group.Mask<TItem>(Worldspaces));
                this.DialogTopics = new MaskItem<TItem, Group.Mask<TItem>?>(DialogTopics, new Group.Mask<TItem>(DialogTopics));
                this.Quests = new MaskItem<TItem, Group.Mask<TItem>?>(Quests, new Group.Mask<TItem>(Quests));
                this.IdleAnimations = new MaskItem<TItem, Group.Mask<TItem>?>(IdleAnimations, new Group.Mask<TItem>(IdleAnimations));
                this.Packages = new MaskItem<TItem, Group.Mask<TItem>?>(Packages, new Group.Mask<TItem>(Packages));
                this.CombatStyles = new MaskItem<TItem, Group.Mask<TItem>?>(CombatStyles, new Group.Mask<TItem>(CombatStyles));
                this.LoadScreens = new MaskItem<TItem, Group.Mask<TItem>?>(LoadScreens, new Group.Mask<TItem>(LoadScreens));
                this.LeveledSpells = new MaskItem<TItem, Group.Mask<TItem>?>(LeveledSpells, new Group.Mask<TItem>(LeveledSpells));
                this.AnimatedObjects = new MaskItem<TItem, Group.Mask<TItem>?>(AnimatedObjects, new Group.Mask<TItem>(AnimatedObjects));
                this.Waters = new MaskItem<TItem, Group.Mask<TItem>?>(Waters, new Group.Mask<TItem>(Waters));
                this.EffectShaders = new MaskItem<TItem, Group.Mask<TItem>?>(EffectShaders, new Group.Mask<TItem>(EffectShaders));
                this.Explosions = new MaskItem<TItem, Group.Mask<TItem>?>(Explosions, new Group.Mask<TItem>(Explosions));
                this.Debris = new MaskItem<TItem, Group.Mask<TItem>?>(Debris, new Group.Mask<TItem>(Debris));
                this.ImageSpaces = new MaskItem<TItem, Group.Mask<TItem>?>(ImageSpaces, new Group.Mask<TItem>(ImageSpaces));
                this.ImageSpaceAdapters = new MaskItem<TItem, Group.Mask<TItem>?>(ImageSpaceAdapters, new Group.Mask<TItem>(ImageSpaceAdapters));
                this.FormLists = new MaskItem<TItem, Group.Mask<TItem>?>(FormLists, new Group.Mask<TItem>(FormLists));
                this.Perks = new MaskItem<TItem, Group.Mask<TItem>?>(Perks, new Group.Mask<TItem>(Perks));
                this.BodyParts = new MaskItem<TItem, Group.Mask<TItem>?>(BodyParts, new Group.Mask<TItem>(BodyParts));
                this.AddonNodes = new MaskItem<TItem, Group.Mask<TItem>?>(AddonNodes, new Group.Mask<TItem>(AddonNodes));
                this.ActorValueInformation = new MaskItem<TItem, Group.Mask<TItem>?>(ActorValueInformation, new Group.Mask<TItem>(ActorValueInformation));
                this.CameraShots = new MaskItem<TItem, Group.Mask<TItem>?>(CameraShots, new Group.Mask<TItem>(CameraShots));
                this.CameraPaths = new MaskItem<TItem, Group.Mask<TItem>?>(CameraPaths, new Group.Mask<TItem>(CameraPaths));
                this.VoiceTypes = new MaskItem<TItem, Group.Mask<TItem>?>(VoiceTypes, new Group.Mask<TItem>(VoiceTypes));
                this.MaterialTypes = new MaskItem<TItem, Group.Mask<TItem>?>(MaterialTypes, new Group.Mask<TItem>(MaterialTypes));
                this.Impacts = new MaskItem<TItem, Group.Mask<TItem>?>(Impacts, new Group.Mask<TItem>(Impacts));
                this.ImpactDataSets = new MaskItem<TItem, Group.Mask<TItem>?>(ImpactDataSets, new Group.Mask<TItem>(ImpactDataSets));
                this.ArmorAddons = new MaskItem<TItem, Group.Mask<TItem>?>(ArmorAddons, new Group.Mask<TItem>(ArmorAddons));
                this.EncounterZones = new MaskItem<TItem, Group.Mask<TItem>?>(EncounterZones, new Group.Mask<TItem>(EncounterZones));
                this.Locations = new MaskItem<TItem, Group.Mask<TItem>?>(Locations, new Group.Mask<TItem>(Locations));
                this.Messages = new MaskItem<TItem, Group.Mask<TItem>?>(Messages, new Group.Mask<TItem>(Messages));
                this.DefaultObjectManagers = new MaskItem<TItem, Group.Mask<TItem>?>(DefaultObjectManagers, new Group.Mask<TItem>(DefaultObjectManagers));
                this.LightingTemplates = new MaskItem<TItem, Group.Mask<TItem>?>(LightingTemplates, new Group.Mask<TItem>(LightingTemplates));
                this.MusicTypes = new MaskItem<TItem, Group.Mask<TItem>?>(MusicTypes, new Group.Mask<TItem>(MusicTypes));
                this.Footsteps = new MaskItem<TItem, Group.Mask<TItem>?>(Footsteps, new Group.Mask<TItem>(Footsteps));
                this.FootstepSets = new MaskItem<TItem, Group.Mask<TItem>?>(FootstepSets, new Group.Mask<TItem>(FootstepSets));
                this.StoryManagerBranchNodes = new MaskItem<TItem, Group.Mask<TItem>?>(StoryManagerBranchNodes, new Group.Mask<TItem>(StoryManagerBranchNodes));
                this.StoryManagerQuestNodes = new MaskItem<TItem, Group.Mask<TItem>?>(StoryManagerQuestNodes, new Group.Mask<TItem>(StoryManagerQuestNodes));
                this.StoryManagerEventNodes = new MaskItem<TItem, Group.Mask<TItem>?>(StoryManagerEventNodes, new Group.Mask<TItem>(StoryManagerEventNodes));
                this.DialogBranches = new MaskItem<TItem, Group.Mask<TItem>?>(DialogBranches, new Group.Mask<TItem>(DialogBranches));
                this.MusicTracks = new MaskItem<TItem, Group.Mask<TItem>?>(MusicTracks, new Group.Mask<TItem>(MusicTracks));
                this.DialogViews = new MaskItem<TItem, Group.Mask<TItem>?>(DialogViews, new Group.Mask<TItem>(DialogViews));
                this.WordsOfPower = new MaskItem<TItem, Group.Mask<TItem>?>(WordsOfPower, new Group.Mask<TItem>(WordsOfPower));
                this.Shouts = new MaskItem<TItem, Group.Mask<TItem>?>(Shouts, new Group.Mask<TItem>(Shouts));
                this.EquipTypes = new MaskItem<TItem, Group.Mask<TItem>?>(EquipTypes, new Group.Mask<TItem>(EquipTypes));
                this.Relationships = new MaskItem<TItem, Group.Mask<TItem>?>(Relationships, new Group.Mask<TItem>(Relationships));
                this.Scenes = new MaskItem<TItem, Group.Mask<TItem>?>(Scenes, new Group.Mask<TItem>(Scenes));
                this.AssociationTypes = new MaskItem<TItem, Group.Mask<TItem>?>(AssociationTypes, new Group.Mask<TItem>(AssociationTypes));
                this.Outfits = new MaskItem<TItem, Group.Mask<TItem>?>(Outfits, new Group.Mask<TItem>(Outfits));
                this.ArtObjects = new MaskItem<TItem, Group.Mask<TItem>?>(ArtObjects, new Group.Mask<TItem>(ArtObjects));
                this.MaterialObjects = new MaskItem<TItem, Group.Mask<TItem>?>(MaterialObjects, new Group.Mask<TItem>(MaterialObjects));
                this.MovementTypes = new MaskItem<TItem, Group.Mask<TItem>?>(MovementTypes, new Group.Mask<TItem>(MovementTypes));
                this.SoundDescriptors = new MaskItem<TItem, Group.Mask<TItem>?>(SoundDescriptors, new Group.Mask<TItem>(SoundDescriptors));
                this.DualCastData = new MaskItem<TItem, Group.Mask<TItem>?>(DualCastData, new Group.Mask<TItem>(DualCastData));
                this.SoundCategories = new MaskItem<TItem, Group.Mask<TItem>?>(SoundCategories, new Group.Mask<TItem>(SoundCategories));
                this.SoundOutputModels = new MaskItem<TItem, Group.Mask<TItem>?>(SoundOutputModels, new Group.Mask<TItem>(SoundOutputModels));
                this.CollisionLayers = new MaskItem<TItem, Group.Mask<TItem>?>(CollisionLayers, new Group.Mask<TItem>(CollisionLayers));
                this.Colors = new MaskItem<TItem, Group.Mask<TItem>?>(Colors, new Group.Mask<TItem>(Colors));
                this.ReverbParameters = new MaskItem<TItem, Group.Mask<TItem>?>(ReverbParameters, new Group.Mask<TItem>(ReverbParameters));
                this.VolumetricLightings = new MaskItem<TItem, Group.Mask<TItem>?>(VolumetricLightings, new Group.Mask<TItem>(VolumetricLightings));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Fallout4ModHeader.Mask<TItem>?>? ModHeader { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? GameSettings { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Keywords { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LocationReferenceTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Actions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? TextureSets { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Globals { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Classes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Factions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? HeadParts { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Hairs { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Eyes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Races { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoundMarkers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AcousticSpaces { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MagicEffects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LandscapeTextures { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ObjectEffects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Spells { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Scrolls { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Activators { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? TalkingActivators { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Armors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Books { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Containers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Doors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Ingredients { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Lights { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MiscItems { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AlchemicalApparatuses { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Statics { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MoveableStatics { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Grasses { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Trees { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Florae { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Furniture { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Weapons { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Ammunitions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Npcs { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LeveledNpcs { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Keys { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Ingestibles { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? IdleMarkers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ConstructibleObjects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Projectiles { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Hazards { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoulGems { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LeveledItems { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Weathers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Climates { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ShaderParticleGeometries { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? VisualEffects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Regions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? NavigationMeshInfoMaps { get; set; }
            public MaskItem<TItem, ListGroup.Mask<TItem>?>? Cells { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Worldspaces { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? DialogTopics { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Quests { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? IdleAnimations { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Packages { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? CombatStyles { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LoadScreens { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LeveledSpells { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AnimatedObjects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Waters { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? EffectShaders { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Explosions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Debris { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ImageSpaces { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ImageSpaceAdapters { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? FormLists { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Perks { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? BodyParts { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AddonNodes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ActorValueInformation { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? CameraShots { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? CameraPaths { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? VoiceTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MaterialTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Impacts { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ImpactDataSets { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ArmorAddons { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? EncounterZones { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Locations { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Messages { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? DefaultObjectManagers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LightingTemplates { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MusicTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Footsteps { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? FootstepSets { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? StoryManagerBranchNodes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? StoryManagerQuestNodes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? StoryManagerEventNodes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? DialogBranches { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MusicTracks { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? DialogViews { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? WordsOfPower { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Shouts { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? EquipTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Relationships { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Scenes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AssociationTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Outfits { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ArtObjects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MaterialObjects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MovementTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoundDescriptors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? DualCastData { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoundCategories { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoundOutputModels { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? CollisionLayers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Colors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ReverbParameters { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? VolumetricLightings { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
                if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
                if (!object.Equals(this.Actions, rhs.Actions)) return false;
                if (!object.Equals(this.TextureSets, rhs.TextureSets)) return false;
                if (!object.Equals(this.Globals, rhs.Globals)) return false;
                if (!object.Equals(this.Classes, rhs.Classes)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.Races, rhs.Races)) return false;
                if (!object.Equals(this.SoundMarkers, rhs.SoundMarkers)) return false;
                if (!object.Equals(this.AcousticSpaces, rhs.AcousticSpaces)) return false;
                if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
                if (!object.Equals(this.LandscapeTextures, rhs.LandscapeTextures)) return false;
                if (!object.Equals(this.ObjectEffects, rhs.ObjectEffects)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Scrolls, rhs.Scrolls)) return false;
                if (!object.Equals(this.Activators, rhs.Activators)) return false;
                if (!object.Equals(this.TalkingActivators, rhs.TalkingActivators)) return false;
                if (!object.Equals(this.Armors, rhs.Armors)) return false;
                if (!object.Equals(this.Books, rhs.Books)) return false;
                if (!object.Equals(this.Containers, rhs.Containers)) return false;
                if (!object.Equals(this.Doors, rhs.Doors)) return false;
                if (!object.Equals(this.Ingredients, rhs.Ingredients)) return false;
                if (!object.Equals(this.Lights, rhs.Lights)) return false;
                if (!object.Equals(this.MiscItems, rhs.MiscItems)) return false;
                if (!object.Equals(this.AlchemicalApparatuses, rhs.AlchemicalApparatuses)) return false;
                if (!object.Equals(this.Statics, rhs.Statics)) return false;
                if (!object.Equals(this.MoveableStatics, rhs.MoveableStatics)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                if (!object.Equals(this.Trees, rhs.Trees)) return false;
                if (!object.Equals(this.Florae, rhs.Florae)) return false;
                if (!object.Equals(this.Furniture, rhs.Furniture)) return false;
                if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
                if (!object.Equals(this.Ammunitions, rhs.Ammunitions)) return false;
                if (!object.Equals(this.Npcs, rhs.Npcs)) return false;
                if (!object.Equals(this.LeveledNpcs, rhs.LeveledNpcs)) return false;
                if (!object.Equals(this.Keys, rhs.Keys)) return false;
                if (!object.Equals(this.Ingestibles, rhs.Ingestibles)) return false;
                if (!object.Equals(this.IdleMarkers, rhs.IdleMarkers)) return false;
                if (!object.Equals(this.ConstructibleObjects, rhs.ConstructibleObjects)) return false;
                if (!object.Equals(this.Projectiles, rhs.Projectiles)) return false;
                if (!object.Equals(this.Hazards, rhs.Hazards)) return false;
                if (!object.Equals(this.SoulGems, rhs.SoulGems)) return false;
                if (!object.Equals(this.LeveledItems, rhs.LeveledItems)) return false;
                if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
                if (!object.Equals(this.Climates, rhs.Climates)) return false;
                if (!object.Equals(this.ShaderParticleGeometries, rhs.ShaderParticleGeometries)) return false;
                if (!object.Equals(this.VisualEffects, rhs.VisualEffects)) return false;
                if (!object.Equals(this.Regions, rhs.Regions)) return false;
                if (!object.Equals(this.NavigationMeshInfoMaps, rhs.NavigationMeshInfoMaps)) return false;
                if (!object.Equals(this.Cells, rhs.Cells)) return false;
                if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
                if (!object.Equals(this.DialogTopics, rhs.DialogTopics)) return false;
                if (!object.Equals(this.Quests, rhs.Quests)) return false;
                if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
                if (!object.Equals(this.Packages, rhs.Packages)) return false;
                if (!object.Equals(this.CombatStyles, rhs.CombatStyles)) return false;
                if (!object.Equals(this.LoadScreens, rhs.LoadScreens)) return false;
                if (!object.Equals(this.LeveledSpells, rhs.LeveledSpells)) return false;
                if (!object.Equals(this.AnimatedObjects, rhs.AnimatedObjects)) return false;
                if (!object.Equals(this.Waters, rhs.Waters)) return false;
                if (!object.Equals(this.EffectShaders, rhs.EffectShaders)) return false;
                if (!object.Equals(this.Explosions, rhs.Explosions)) return false;
                if (!object.Equals(this.Debris, rhs.Debris)) return false;
                if (!object.Equals(this.ImageSpaces, rhs.ImageSpaces)) return false;
                if (!object.Equals(this.ImageSpaceAdapters, rhs.ImageSpaceAdapters)) return false;
                if (!object.Equals(this.FormLists, rhs.FormLists)) return false;
                if (!object.Equals(this.Perks, rhs.Perks)) return false;
                if (!object.Equals(this.BodyParts, rhs.BodyParts)) return false;
                if (!object.Equals(this.AddonNodes, rhs.AddonNodes)) return false;
                if (!object.Equals(this.ActorValueInformation, rhs.ActorValueInformation)) return false;
                if (!object.Equals(this.CameraShots, rhs.CameraShots)) return false;
                if (!object.Equals(this.CameraPaths, rhs.CameraPaths)) return false;
                if (!object.Equals(this.VoiceTypes, rhs.VoiceTypes)) return false;
                if (!object.Equals(this.MaterialTypes, rhs.MaterialTypes)) return false;
                if (!object.Equals(this.Impacts, rhs.Impacts)) return false;
                if (!object.Equals(this.ImpactDataSets, rhs.ImpactDataSets)) return false;
                if (!object.Equals(this.ArmorAddons, rhs.ArmorAddons)) return false;
                if (!object.Equals(this.EncounterZones, rhs.EncounterZones)) return false;
                if (!object.Equals(this.Locations, rhs.Locations)) return false;
                if (!object.Equals(this.Messages, rhs.Messages)) return false;
                if (!object.Equals(this.DefaultObjectManagers, rhs.DefaultObjectManagers)) return false;
                if (!object.Equals(this.LightingTemplates, rhs.LightingTemplates)) return false;
                if (!object.Equals(this.MusicTypes, rhs.MusicTypes)) return false;
                if (!object.Equals(this.Footsteps, rhs.Footsteps)) return false;
                if (!object.Equals(this.FootstepSets, rhs.FootstepSets)) return false;
                if (!object.Equals(this.StoryManagerBranchNodes, rhs.StoryManagerBranchNodes)) return false;
                if (!object.Equals(this.StoryManagerQuestNodes, rhs.StoryManagerQuestNodes)) return false;
                if (!object.Equals(this.StoryManagerEventNodes, rhs.StoryManagerEventNodes)) return false;
                if (!object.Equals(this.DialogBranches, rhs.DialogBranches)) return false;
                if (!object.Equals(this.MusicTracks, rhs.MusicTracks)) return false;
                if (!object.Equals(this.DialogViews, rhs.DialogViews)) return false;
                if (!object.Equals(this.WordsOfPower, rhs.WordsOfPower)) return false;
                if (!object.Equals(this.Shouts, rhs.Shouts)) return false;
                if (!object.Equals(this.EquipTypes, rhs.EquipTypes)) return false;
                if (!object.Equals(this.Relationships, rhs.Relationships)) return false;
                if (!object.Equals(this.Scenes, rhs.Scenes)) return false;
                if (!object.Equals(this.AssociationTypes, rhs.AssociationTypes)) return false;
                if (!object.Equals(this.Outfits, rhs.Outfits)) return false;
                if (!object.Equals(this.ArtObjects, rhs.ArtObjects)) return false;
                if (!object.Equals(this.MaterialObjects, rhs.MaterialObjects)) return false;
                if (!object.Equals(this.MovementTypes, rhs.MovementTypes)) return false;
                if (!object.Equals(this.SoundDescriptors, rhs.SoundDescriptors)) return false;
                if (!object.Equals(this.DualCastData, rhs.DualCastData)) return false;
                if (!object.Equals(this.SoundCategories, rhs.SoundCategories)) return false;
                if (!object.Equals(this.SoundOutputModels, rhs.SoundOutputModels)) return false;
                if (!object.Equals(this.CollisionLayers, rhs.CollisionLayers)) return false;
                if (!object.Equals(this.Colors, rhs.Colors)) return false;
                if (!object.Equals(this.ReverbParameters, rhs.ReverbParameters)) return false;
                if (!object.Equals(this.VolumetricLightings, rhs.VolumetricLightings)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModHeader);
                hash.Add(this.GameSettings);
                hash.Add(this.Keywords);
                hash.Add(this.LocationReferenceTypes);
                hash.Add(this.Actions);
                hash.Add(this.TextureSets);
                hash.Add(this.Globals);
                hash.Add(this.Classes);
                hash.Add(this.Factions);
                hash.Add(this.HeadParts);
                hash.Add(this.Hairs);
                hash.Add(this.Eyes);
                hash.Add(this.Races);
                hash.Add(this.SoundMarkers);
                hash.Add(this.AcousticSpaces);
                hash.Add(this.MagicEffects);
                hash.Add(this.LandscapeTextures);
                hash.Add(this.ObjectEffects);
                hash.Add(this.Spells);
                hash.Add(this.Scrolls);
                hash.Add(this.Activators);
                hash.Add(this.TalkingActivators);
                hash.Add(this.Armors);
                hash.Add(this.Books);
                hash.Add(this.Containers);
                hash.Add(this.Doors);
                hash.Add(this.Ingredients);
                hash.Add(this.Lights);
                hash.Add(this.MiscItems);
                hash.Add(this.AlchemicalApparatuses);
                hash.Add(this.Statics);
                hash.Add(this.MoveableStatics);
                hash.Add(this.Grasses);
                hash.Add(this.Trees);
                hash.Add(this.Florae);
                hash.Add(this.Furniture);
                hash.Add(this.Weapons);
                hash.Add(this.Ammunitions);
                hash.Add(this.Npcs);
                hash.Add(this.LeveledNpcs);
                hash.Add(this.Keys);
                hash.Add(this.Ingestibles);
                hash.Add(this.IdleMarkers);
                hash.Add(this.ConstructibleObjects);
                hash.Add(this.Projectiles);
                hash.Add(this.Hazards);
                hash.Add(this.SoulGems);
                hash.Add(this.LeveledItems);
                hash.Add(this.Weathers);
                hash.Add(this.Climates);
                hash.Add(this.ShaderParticleGeometries);
                hash.Add(this.VisualEffects);
                hash.Add(this.Regions);
                hash.Add(this.NavigationMeshInfoMaps);
                hash.Add(this.Cells);
                hash.Add(this.Worldspaces);
                hash.Add(this.DialogTopics);
                hash.Add(this.Quests);
                hash.Add(this.IdleAnimations);
                hash.Add(this.Packages);
                hash.Add(this.CombatStyles);
                hash.Add(this.LoadScreens);
                hash.Add(this.LeveledSpells);
                hash.Add(this.AnimatedObjects);
                hash.Add(this.Waters);
                hash.Add(this.EffectShaders);
                hash.Add(this.Explosions);
                hash.Add(this.Debris);
                hash.Add(this.ImageSpaces);
                hash.Add(this.ImageSpaceAdapters);
                hash.Add(this.FormLists);
                hash.Add(this.Perks);
                hash.Add(this.BodyParts);
                hash.Add(this.AddonNodes);
                hash.Add(this.ActorValueInformation);
                hash.Add(this.CameraShots);
                hash.Add(this.CameraPaths);
                hash.Add(this.VoiceTypes);
                hash.Add(this.MaterialTypes);
                hash.Add(this.Impacts);
                hash.Add(this.ImpactDataSets);
                hash.Add(this.ArmorAddons);
                hash.Add(this.EncounterZones);
                hash.Add(this.Locations);
                hash.Add(this.Messages);
                hash.Add(this.DefaultObjectManagers);
                hash.Add(this.LightingTemplates);
                hash.Add(this.MusicTypes);
                hash.Add(this.Footsteps);
                hash.Add(this.FootstepSets);
                hash.Add(this.StoryManagerBranchNodes);
                hash.Add(this.StoryManagerQuestNodes);
                hash.Add(this.StoryManagerEventNodes);
                hash.Add(this.DialogBranches);
                hash.Add(this.MusicTracks);
                hash.Add(this.DialogViews);
                hash.Add(this.WordsOfPower);
                hash.Add(this.Shouts);
                hash.Add(this.EquipTypes);
                hash.Add(this.Relationships);
                hash.Add(this.Scenes);
                hash.Add(this.AssociationTypes);
                hash.Add(this.Outfits);
                hash.Add(this.ArtObjects);
                hash.Add(this.MaterialObjects);
                hash.Add(this.MovementTypes);
                hash.Add(this.SoundDescriptors);
                hash.Add(this.DualCastData);
                hash.Add(this.SoundCategories);
                hash.Add(this.SoundOutputModels);
                hash.Add(this.CollisionLayers);
                hash.Add(this.Colors);
                hash.Add(this.ReverbParameters);
                hash.Add(this.VolumetricLightings);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (!eval(this.ModHeader.Overall)) return false;
                    if (this.ModHeader.Specific != null && !this.ModHeader.Specific.All(eval)) return false;
                }
                if (GameSettings != null)
                {
                    if (!eval(this.GameSettings.Overall)) return false;
                    if (this.GameSettings.Specific != null && !this.GameSettings.Specific.All(eval)) return false;
                }
                if (Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null && !this.Keywords.Specific.All(eval)) return false;
                }
                if (LocationReferenceTypes != null)
                {
                    if (!eval(this.LocationReferenceTypes.Overall)) return false;
                    if (this.LocationReferenceTypes.Specific != null && !this.LocationReferenceTypes.Specific.All(eval)) return false;
                }
                if (Actions != null)
                {
                    if (!eval(this.Actions.Overall)) return false;
                    if (this.Actions.Specific != null && !this.Actions.Specific.All(eval)) return false;
                }
                if (TextureSets != null)
                {
                    if (!eval(this.TextureSets.Overall)) return false;
                    if (this.TextureSets.Specific != null && !this.TextureSets.Specific.All(eval)) return false;
                }
                if (Globals != null)
                {
                    if (!eval(this.Globals.Overall)) return false;
                    if (this.Globals.Specific != null && !this.Globals.Specific.All(eval)) return false;
                }
                if (Classes != null)
                {
                    if (!eval(this.Classes.Overall)) return false;
                    if (this.Classes.Specific != null && !this.Classes.Specific.All(eval)) return false;
                }
                if (Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null && !this.Factions.Specific.All(eval)) return false;
                }
                if (HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null && !this.HeadParts.Specific.All(eval)) return false;
                }
                if (Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null && !this.Hairs.Specific.All(eval)) return false;
                }
                if (Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null && !this.Eyes.Specific.All(eval)) return false;
                }
                if (Races != null)
                {
                    if (!eval(this.Races.Overall)) return false;
                    if (this.Races.Specific != null && !this.Races.Specific.All(eval)) return false;
                }
                if (SoundMarkers != null)
                {
                    if (!eval(this.SoundMarkers.Overall)) return false;
                    if (this.SoundMarkers.Specific != null && !this.SoundMarkers.Specific.All(eval)) return false;
                }
                if (AcousticSpaces != null)
                {
                    if (!eval(this.AcousticSpaces.Overall)) return false;
                    if (this.AcousticSpaces.Specific != null && !this.AcousticSpaces.Specific.All(eval)) return false;
                }
                if (MagicEffects != null)
                {
                    if (!eval(this.MagicEffects.Overall)) return false;
                    if (this.MagicEffects.Specific != null && !this.MagicEffects.Specific.All(eval)) return false;
                }
                if (LandscapeTextures != null)
                {
                    if (!eval(this.LandscapeTextures.Overall)) return false;
                    if (this.LandscapeTextures.Specific != null && !this.LandscapeTextures.Specific.All(eval)) return false;
                }
                if (ObjectEffects != null)
                {
                    if (!eval(this.ObjectEffects.Overall)) return false;
                    if (this.ObjectEffects.Specific != null && !this.ObjectEffects.Specific.All(eval)) return false;
                }
                if (Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null && !this.Spells.Specific.All(eval)) return false;
                }
                if (Scrolls != null)
                {
                    if (!eval(this.Scrolls.Overall)) return false;
                    if (this.Scrolls.Specific != null && !this.Scrolls.Specific.All(eval)) return false;
                }
                if (Activators != null)
                {
                    if (!eval(this.Activators.Overall)) return false;
                    if (this.Activators.Specific != null && !this.Activators.Specific.All(eval)) return false;
                }
                if (TalkingActivators != null)
                {
                    if (!eval(this.TalkingActivators.Overall)) return false;
                    if (this.TalkingActivators.Specific != null && !this.TalkingActivators.Specific.All(eval)) return false;
                }
                if (Armors != null)
                {
                    if (!eval(this.Armors.Overall)) return false;
                    if (this.Armors.Specific != null && !this.Armors.Specific.All(eval)) return false;
                }
                if (Books != null)
                {
                    if (!eval(this.Books.Overall)) return false;
                    if (this.Books.Specific != null && !this.Books.Specific.All(eval)) return false;
                }
                if (Containers != null)
                {
                    if (!eval(this.Containers.Overall)) return false;
                    if (this.Containers.Specific != null && !this.Containers.Specific.All(eval)) return false;
                }
                if (Doors != null)
                {
                    if (!eval(this.Doors.Overall)) return false;
                    if (this.Doors.Specific != null && !this.Doors.Specific.All(eval)) return false;
                }
                if (Ingredients != null)
                {
                    if (!eval(this.Ingredients.Overall)) return false;
                    if (this.Ingredients.Specific != null && !this.Ingredients.Specific.All(eval)) return false;
                }
                if (Lights != null)
                {
                    if (!eval(this.Lights.Overall)) return false;
                    if (this.Lights.Specific != null && !this.Lights.Specific.All(eval)) return false;
                }
                if (MiscItems != null)
                {
                    if (!eval(this.MiscItems.Overall)) return false;
                    if (this.MiscItems.Specific != null && !this.MiscItems.Specific.All(eval)) return false;
                }
                if (AlchemicalApparatuses != null)
                {
                    if (!eval(this.AlchemicalApparatuses.Overall)) return false;
                    if (this.AlchemicalApparatuses.Specific != null && !this.AlchemicalApparatuses.Specific.All(eval)) return false;
                }
                if (Statics != null)
                {
                    if (!eval(this.Statics.Overall)) return false;
                    if (this.Statics.Specific != null && !this.Statics.Specific.All(eval)) return false;
                }
                if (MoveableStatics != null)
                {
                    if (!eval(this.MoveableStatics.Overall)) return false;
                    if (this.MoveableStatics.Specific != null && !this.MoveableStatics.Specific.All(eval)) return false;
                }
                if (Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null && !this.Grasses.Specific.All(eval)) return false;
                }
                if (Trees != null)
                {
                    if (!eval(this.Trees.Overall)) return false;
                    if (this.Trees.Specific != null && !this.Trees.Specific.All(eval)) return false;
                }
                if (Florae != null)
                {
                    if (!eval(this.Florae.Overall)) return false;
                    if (this.Florae.Specific != null && !this.Florae.Specific.All(eval)) return false;
                }
                if (Furniture != null)
                {
                    if (!eval(this.Furniture.Overall)) return false;
                    if (this.Furniture.Specific != null && !this.Furniture.Specific.All(eval)) return false;
                }
                if (Weapons != null)
                {
                    if (!eval(this.Weapons.Overall)) return false;
                    if (this.Weapons.Specific != null && !this.Weapons.Specific.All(eval)) return false;
                }
                if (Ammunitions != null)
                {
                    if (!eval(this.Ammunitions.Overall)) return false;
                    if (this.Ammunitions.Specific != null && !this.Ammunitions.Specific.All(eval)) return false;
                }
                if (Npcs != null)
                {
                    if (!eval(this.Npcs.Overall)) return false;
                    if (this.Npcs.Specific != null && !this.Npcs.Specific.All(eval)) return false;
                }
                if (LeveledNpcs != null)
                {
                    if (!eval(this.LeveledNpcs.Overall)) return false;
                    if (this.LeveledNpcs.Specific != null && !this.LeveledNpcs.Specific.All(eval)) return false;
                }
                if (Keys != null)
                {
                    if (!eval(this.Keys.Overall)) return false;
                    if (this.Keys.Specific != null && !this.Keys.Specific.All(eval)) return false;
                }
                if (Ingestibles != null)
                {
                    if (!eval(this.Ingestibles.Overall)) return false;
                    if (this.Ingestibles.Specific != null && !this.Ingestibles.Specific.All(eval)) return false;
                }
                if (IdleMarkers != null)
                {
                    if (!eval(this.IdleMarkers.Overall)) return false;
                    if (this.IdleMarkers.Specific != null && !this.IdleMarkers.Specific.All(eval)) return false;
                }
                if (ConstructibleObjects != null)
                {
                    if (!eval(this.ConstructibleObjects.Overall)) return false;
                    if (this.ConstructibleObjects.Specific != null && !this.ConstructibleObjects.Specific.All(eval)) return false;
                }
                if (Projectiles != null)
                {
                    if (!eval(this.Projectiles.Overall)) return false;
                    if (this.Projectiles.Specific != null && !this.Projectiles.Specific.All(eval)) return false;
                }
                if (Hazards != null)
                {
                    if (!eval(this.Hazards.Overall)) return false;
                    if (this.Hazards.Specific != null && !this.Hazards.Specific.All(eval)) return false;
                }
                if (SoulGems != null)
                {
                    if (!eval(this.SoulGems.Overall)) return false;
                    if (this.SoulGems.Specific != null && !this.SoulGems.Specific.All(eval)) return false;
                }
                if (LeveledItems != null)
                {
                    if (!eval(this.LeveledItems.Overall)) return false;
                    if (this.LeveledItems.Specific != null && !this.LeveledItems.Specific.All(eval)) return false;
                }
                if (Weathers != null)
                {
                    if (!eval(this.Weathers.Overall)) return false;
                    if (this.Weathers.Specific != null && !this.Weathers.Specific.All(eval)) return false;
                }
                if (Climates != null)
                {
                    if (!eval(this.Climates.Overall)) return false;
                    if (this.Climates.Specific != null && !this.Climates.Specific.All(eval)) return false;
                }
                if (ShaderParticleGeometries != null)
                {
                    if (!eval(this.ShaderParticleGeometries.Overall)) return false;
                    if (this.ShaderParticleGeometries.Specific != null && !this.ShaderParticleGeometries.Specific.All(eval)) return false;
                }
                if (VisualEffects != null)
                {
                    if (!eval(this.VisualEffects.Overall)) return false;
                    if (this.VisualEffects.Specific != null && !this.VisualEffects.Specific.All(eval)) return false;
                }
                if (Regions != null)
                {
                    if (!eval(this.Regions.Overall)) return false;
                    if (this.Regions.Specific != null && !this.Regions.Specific.All(eval)) return false;
                }
                if (NavigationMeshInfoMaps != null)
                {
                    if (!eval(this.NavigationMeshInfoMaps.Overall)) return false;
                    if (this.NavigationMeshInfoMaps.Specific != null && !this.NavigationMeshInfoMaps.Specific.All(eval)) return false;
                }
                if (Cells != null)
                {
                    if (!eval(this.Cells.Overall)) return false;
                    if (this.Cells.Specific != null && !this.Cells.Specific.All(eval)) return false;
                }
                if (Worldspaces != null)
                {
                    if (!eval(this.Worldspaces.Overall)) return false;
                    if (this.Worldspaces.Specific != null && !this.Worldspaces.Specific.All(eval)) return false;
                }
                if (DialogTopics != null)
                {
                    if (!eval(this.DialogTopics.Overall)) return false;
                    if (this.DialogTopics.Specific != null && !this.DialogTopics.Specific.All(eval)) return false;
                }
                if (Quests != null)
                {
                    if (!eval(this.Quests.Overall)) return false;
                    if (this.Quests.Specific != null && !this.Quests.Specific.All(eval)) return false;
                }
                if (IdleAnimations != null)
                {
                    if (!eval(this.IdleAnimations.Overall)) return false;
                    if (this.IdleAnimations.Specific != null && !this.IdleAnimations.Specific.All(eval)) return false;
                }
                if (Packages != null)
                {
                    if (!eval(this.Packages.Overall)) return false;
                    if (this.Packages.Specific != null && !this.Packages.Specific.All(eval)) return false;
                }
                if (CombatStyles != null)
                {
                    if (!eval(this.CombatStyles.Overall)) return false;
                    if (this.CombatStyles.Specific != null && !this.CombatStyles.Specific.All(eval)) return false;
                }
                if (LoadScreens != null)
                {
                    if (!eval(this.LoadScreens.Overall)) return false;
                    if (this.LoadScreens.Specific != null && !this.LoadScreens.Specific.All(eval)) return false;
                }
                if (LeveledSpells != null)
                {
                    if (!eval(this.LeveledSpells.Overall)) return false;
                    if (this.LeveledSpells.Specific != null && !this.LeveledSpells.Specific.All(eval)) return false;
                }
                if (AnimatedObjects != null)
                {
                    if (!eval(this.AnimatedObjects.Overall)) return false;
                    if (this.AnimatedObjects.Specific != null && !this.AnimatedObjects.Specific.All(eval)) return false;
                }
                if (Waters != null)
                {
                    if (!eval(this.Waters.Overall)) return false;
                    if (this.Waters.Specific != null && !this.Waters.Specific.All(eval)) return false;
                }
                if (EffectShaders != null)
                {
                    if (!eval(this.EffectShaders.Overall)) return false;
                    if (this.EffectShaders.Specific != null && !this.EffectShaders.Specific.All(eval)) return false;
                }
                if (Explosions != null)
                {
                    if (!eval(this.Explosions.Overall)) return false;
                    if (this.Explosions.Specific != null && !this.Explosions.Specific.All(eval)) return false;
                }
                if (Debris != null)
                {
                    if (!eval(this.Debris.Overall)) return false;
                    if (this.Debris.Specific != null && !this.Debris.Specific.All(eval)) return false;
                }
                if (ImageSpaces != null)
                {
                    if (!eval(this.ImageSpaces.Overall)) return false;
                    if (this.ImageSpaces.Specific != null && !this.ImageSpaces.Specific.All(eval)) return false;
                }
                if (ImageSpaceAdapters != null)
                {
                    if (!eval(this.ImageSpaceAdapters.Overall)) return false;
                    if (this.ImageSpaceAdapters.Specific != null && !this.ImageSpaceAdapters.Specific.All(eval)) return false;
                }
                if (FormLists != null)
                {
                    if (!eval(this.FormLists.Overall)) return false;
                    if (this.FormLists.Specific != null && !this.FormLists.Specific.All(eval)) return false;
                }
                if (Perks != null)
                {
                    if (!eval(this.Perks.Overall)) return false;
                    if (this.Perks.Specific != null && !this.Perks.Specific.All(eval)) return false;
                }
                if (BodyParts != null)
                {
                    if (!eval(this.BodyParts.Overall)) return false;
                    if (this.BodyParts.Specific != null && !this.BodyParts.Specific.All(eval)) return false;
                }
                if (AddonNodes != null)
                {
                    if (!eval(this.AddonNodes.Overall)) return false;
                    if (this.AddonNodes.Specific != null && !this.AddonNodes.Specific.All(eval)) return false;
                }
                if (ActorValueInformation != null)
                {
                    if (!eval(this.ActorValueInformation.Overall)) return false;
                    if (this.ActorValueInformation.Specific != null && !this.ActorValueInformation.Specific.All(eval)) return false;
                }
                if (CameraShots != null)
                {
                    if (!eval(this.CameraShots.Overall)) return false;
                    if (this.CameraShots.Specific != null && !this.CameraShots.Specific.All(eval)) return false;
                }
                if (CameraPaths != null)
                {
                    if (!eval(this.CameraPaths.Overall)) return false;
                    if (this.CameraPaths.Specific != null && !this.CameraPaths.Specific.All(eval)) return false;
                }
                if (VoiceTypes != null)
                {
                    if (!eval(this.VoiceTypes.Overall)) return false;
                    if (this.VoiceTypes.Specific != null && !this.VoiceTypes.Specific.All(eval)) return false;
                }
                if (MaterialTypes != null)
                {
                    if (!eval(this.MaterialTypes.Overall)) return false;
                    if (this.MaterialTypes.Specific != null && !this.MaterialTypes.Specific.All(eval)) return false;
                }
                if (Impacts != null)
                {
                    if (!eval(this.Impacts.Overall)) return false;
                    if (this.Impacts.Specific != null && !this.Impacts.Specific.All(eval)) return false;
                }
                if (ImpactDataSets != null)
                {
                    if (!eval(this.ImpactDataSets.Overall)) return false;
                    if (this.ImpactDataSets.Specific != null && !this.ImpactDataSets.Specific.All(eval)) return false;
                }
                if (ArmorAddons != null)
                {
                    if (!eval(this.ArmorAddons.Overall)) return false;
                    if (this.ArmorAddons.Specific != null && !this.ArmorAddons.Specific.All(eval)) return false;
                }
                if (EncounterZones != null)
                {
                    if (!eval(this.EncounterZones.Overall)) return false;
                    if (this.EncounterZones.Specific != null && !this.EncounterZones.Specific.All(eval)) return false;
                }
                if (Locations != null)
                {
                    if (!eval(this.Locations.Overall)) return false;
                    if (this.Locations.Specific != null && !this.Locations.Specific.All(eval)) return false;
                }
                if (Messages != null)
                {
                    if (!eval(this.Messages.Overall)) return false;
                    if (this.Messages.Specific != null && !this.Messages.Specific.All(eval)) return false;
                }
                if (DefaultObjectManagers != null)
                {
                    if (!eval(this.DefaultObjectManagers.Overall)) return false;
                    if (this.DefaultObjectManagers.Specific != null && !this.DefaultObjectManagers.Specific.All(eval)) return false;
                }
                if (LightingTemplates != null)
                {
                    if (!eval(this.LightingTemplates.Overall)) return false;
                    if (this.LightingTemplates.Specific != null && !this.LightingTemplates.Specific.All(eval)) return false;
                }
                if (MusicTypes != null)
                {
                    if (!eval(this.MusicTypes.Overall)) return false;
                    if (this.MusicTypes.Specific != null && !this.MusicTypes.Specific.All(eval)) return false;
                }
                if (Footsteps != null)
                {
                    if (!eval(this.Footsteps.Overall)) return false;
                    if (this.Footsteps.Specific != null && !this.Footsteps.Specific.All(eval)) return false;
                }
                if (FootstepSets != null)
                {
                    if (!eval(this.FootstepSets.Overall)) return false;
                    if (this.FootstepSets.Specific != null && !this.FootstepSets.Specific.All(eval)) return false;
                }
                if (StoryManagerBranchNodes != null)
                {
                    if (!eval(this.StoryManagerBranchNodes.Overall)) return false;
                    if (this.StoryManagerBranchNodes.Specific != null && !this.StoryManagerBranchNodes.Specific.All(eval)) return false;
                }
                if (StoryManagerQuestNodes != null)
                {
                    if (!eval(this.StoryManagerQuestNodes.Overall)) return false;
                    if (this.StoryManagerQuestNodes.Specific != null && !this.StoryManagerQuestNodes.Specific.All(eval)) return false;
                }
                if (StoryManagerEventNodes != null)
                {
                    if (!eval(this.StoryManagerEventNodes.Overall)) return false;
                    if (this.StoryManagerEventNodes.Specific != null && !this.StoryManagerEventNodes.Specific.All(eval)) return false;
                }
                if (DialogBranches != null)
                {
                    if (!eval(this.DialogBranches.Overall)) return false;
                    if (this.DialogBranches.Specific != null && !this.DialogBranches.Specific.All(eval)) return false;
                }
                if (MusicTracks != null)
                {
                    if (!eval(this.MusicTracks.Overall)) return false;
                    if (this.MusicTracks.Specific != null && !this.MusicTracks.Specific.All(eval)) return false;
                }
                if (DialogViews != null)
                {
                    if (!eval(this.DialogViews.Overall)) return false;
                    if (this.DialogViews.Specific != null && !this.DialogViews.Specific.All(eval)) return false;
                }
                if (WordsOfPower != null)
                {
                    if (!eval(this.WordsOfPower.Overall)) return false;
                    if (this.WordsOfPower.Specific != null && !this.WordsOfPower.Specific.All(eval)) return false;
                }
                if (Shouts != null)
                {
                    if (!eval(this.Shouts.Overall)) return false;
                    if (this.Shouts.Specific != null && !this.Shouts.Specific.All(eval)) return false;
                }
                if (EquipTypes != null)
                {
                    if (!eval(this.EquipTypes.Overall)) return false;
                    if (this.EquipTypes.Specific != null && !this.EquipTypes.Specific.All(eval)) return false;
                }
                if (Relationships != null)
                {
                    if (!eval(this.Relationships.Overall)) return false;
                    if (this.Relationships.Specific != null && !this.Relationships.Specific.All(eval)) return false;
                }
                if (Scenes != null)
                {
                    if (!eval(this.Scenes.Overall)) return false;
                    if (this.Scenes.Specific != null && !this.Scenes.Specific.All(eval)) return false;
                }
                if (AssociationTypes != null)
                {
                    if (!eval(this.AssociationTypes.Overall)) return false;
                    if (this.AssociationTypes.Specific != null && !this.AssociationTypes.Specific.All(eval)) return false;
                }
                if (Outfits != null)
                {
                    if (!eval(this.Outfits.Overall)) return false;
                    if (this.Outfits.Specific != null && !this.Outfits.Specific.All(eval)) return false;
                }
                if (ArtObjects != null)
                {
                    if (!eval(this.ArtObjects.Overall)) return false;
                    if (this.ArtObjects.Specific != null && !this.ArtObjects.Specific.All(eval)) return false;
                }
                if (MaterialObjects != null)
                {
                    if (!eval(this.MaterialObjects.Overall)) return false;
                    if (this.MaterialObjects.Specific != null && !this.MaterialObjects.Specific.All(eval)) return false;
                }
                if (MovementTypes != null)
                {
                    if (!eval(this.MovementTypes.Overall)) return false;
                    if (this.MovementTypes.Specific != null && !this.MovementTypes.Specific.All(eval)) return false;
                }
                if (SoundDescriptors != null)
                {
                    if (!eval(this.SoundDescriptors.Overall)) return false;
                    if (this.SoundDescriptors.Specific != null && !this.SoundDescriptors.Specific.All(eval)) return false;
                }
                if (DualCastData != null)
                {
                    if (!eval(this.DualCastData.Overall)) return false;
                    if (this.DualCastData.Specific != null && !this.DualCastData.Specific.All(eval)) return false;
                }
                if (SoundCategories != null)
                {
                    if (!eval(this.SoundCategories.Overall)) return false;
                    if (this.SoundCategories.Specific != null && !this.SoundCategories.Specific.All(eval)) return false;
                }
                if (SoundOutputModels != null)
                {
                    if (!eval(this.SoundOutputModels.Overall)) return false;
                    if (this.SoundOutputModels.Specific != null && !this.SoundOutputModels.Specific.All(eval)) return false;
                }
                if (CollisionLayers != null)
                {
                    if (!eval(this.CollisionLayers.Overall)) return false;
                    if (this.CollisionLayers.Specific != null && !this.CollisionLayers.Specific.All(eval)) return false;
                }
                if (Colors != null)
                {
                    if (!eval(this.Colors.Overall)) return false;
                    if (this.Colors.Specific != null && !this.Colors.Specific.All(eval)) return false;
                }
                if (ReverbParameters != null)
                {
                    if (!eval(this.ReverbParameters.Overall)) return false;
                    if (this.ReverbParameters.Specific != null && !this.ReverbParameters.Specific.All(eval)) return false;
                }
                if (VolumetricLightings != null)
                {
                    if (!eval(this.VolumetricLightings.Overall)) return false;
                    if (this.VolumetricLightings.Specific != null && !this.VolumetricLightings.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (eval(this.ModHeader.Overall)) return true;
                    if (this.ModHeader.Specific != null && this.ModHeader.Specific.Any(eval)) return true;
                }
                if (GameSettings != null)
                {
                    if (eval(this.GameSettings.Overall)) return true;
                    if (this.GameSettings.Specific != null && this.GameSettings.Specific.Any(eval)) return true;
                }
                if (Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null && this.Keywords.Specific.Any(eval)) return true;
                }
                if (LocationReferenceTypes != null)
                {
                    if (eval(this.LocationReferenceTypes.Overall)) return true;
                    if (this.LocationReferenceTypes.Specific != null && this.LocationReferenceTypes.Specific.Any(eval)) return true;
                }
                if (Actions != null)
                {
                    if (eval(this.Actions.Overall)) return true;
                    if (this.Actions.Specific != null && this.Actions.Specific.Any(eval)) return true;
                }
                if (TextureSets != null)
                {
                    if (eval(this.TextureSets.Overall)) return true;
                    if (this.TextureSets.Specific != null && this.TextureSets.Specific.Any(eval)) return true;
                }
                if (Globals != null)
                {
                    if (eval(this.Globals.Overall)) return true;
                    if (this.Globals.Specific != null && this.Globals.Specific.Any(eval)) return true;
                }
                if (Classes != null)
                {
                    if (eval(this.Classes.Overall)) return true;
                    if (this.Classes.Specific != null && this.Classes.Specific.Any(eval)) return true;
                }
                if (Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null && this.Factions.Specific.Any(eval)) return true;
                }
                if (HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null && this.HeadParts.Specific.Any(eval)) return true;
                }
                if (Hairs != null)
                {
                    if (eval(this.Hairs.Overall)) return true;
                    if (this.Hairs.Specific != null && this.Hairs.Specific.Any(eval)) return true;
                }
                if (Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null && this.Eyes.Specific.Any(eval)) return true;
                }
                if (Races != null)
                {
                    if (eval(this.Races.Overall)) return true;
                    if (this.Races.Specific != null && this.Races.Specific.Any(eval)) return true;
                }
                if (SoundMarkers != null)
                {
                    if (eval(this.SoundMarkers.Overall)) return true;
                    if (this.SoundMarkers.Specific != null && this.SoundMarkers.Specific.Any(eval)) return true;
                }
                if (AcousticSpaces != null)
                {
                    if (eval(this.AcousticSpaces.Overall)) return true;
                    if (this.AcousticSpaces.Specific != null && this.AcousticSpaces.Specific.Any(eval)) return true;
                }
                if (MagicEffects != null)
                {
                    if (eval(this.MagicEffects.Overall)) return true;
                    if (this.MagicEffects.Specific != null && this.MagicEffects.Specific.Any(eval)) return true;
                }
                if (LandscapeTextures != null)
                {
                    if (eval(this.LandscapeTextures.Overall)) return true;
                    if (this.LandscapeTextures.Specific != null && this.LandscapeTextures.Specific.Any(eval)) return true;
                }
                if (ObjectEffects != null)
                {
                    if (eval(this.ObjectEffects.Overall)) return true;
                    if (this.ObjectEffects.Specific != null && this.ObjectEffects.Specific.Any(eval)) return true;
                }
                if (Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null && this.Spells.Specific.Any(eval)) return true;
                }
                if (Scrolls != null)
                {
                    if (eval(this.Scrolls.Overall)) return true;
                    if (this.Scrolls.Specific != null && this.Scrolls.Specific.Any(eval)) return true;
                }
                if (Activators != null)
                {
                    if (eval(this.Activators.Overall)) return true;
                    if (this.Activators.Specific != null && this.Activators.Specific.Any(eval)) return true;
                }
                if (TalkingActivators != null)
                {
                    if (eval(this.TalkingActivators.Overall)) return true;
                    if (this.TalkingActivators.Specific != null && this.TalkingActivators.Specific.Any(eval)) return true;
                }
                if (Armors != null)
                {
                    if (eval(this.Armors.Overall)) return true;
                    if (this.Armors.Specific != null && this.Armors.Specific.Any(eval)) return true;
                }
                if (Books != null)
                {
                    if (eval(this.Books.Overall)) return true;
                    if (this.Books.Specific != null && this.Books.Specific.Any(eval)) return true;
                }
                if (Containers != null)
                {
                    if (eval(this.Containers.Overall)) return true;
                    if (this.Containers.Specific != null && this.Containers.Specific.Any(eval)) return true;
                }
                if (Doors != null)
                {
                    if (eval(this.Doors.Overall)) return true;
                    if (this.Doors.Specific != null && this.Doors.Specific.Any(eval)) return true;
                }
                if (Ingredients != null)
                {
                    if (eval(this.Ingredients.Overall)) return true;
                    if (this.Ingredients.Specific != null && this.Ingredients.Specific.Any(eval)) return true;
                }
                if (Lights != null)
                {
                    if (eval(this.Lights.Overall)) return true;
                    if (this.Lights.Specific != null && this.Lights.Specific.Any(eval)) return true;
                }
                if (MiscItems != null)
                {
                    if (eval(this.MiscItems.Overall)) return true;
                    if (this.MiscItems.Specific != null && this.MiscItems.Specific.Any(eval)) return true;
                }
                if (AlchemicalApparatuses != null)
                {
                    if (eval(this.AlchemicalApparatuses.Overall)) return true;
                    if (this.AlchemicalApparatuses.Specific != null && this.AlchemicalApparatuses.Specific.Any(eval)) return true;
                }
                if (Statics != null)
                {
                    if (eval(this.Statics.Overall)) return true;
                    if (this.Statics.Specific != null && this.Statics.Specific.Any(eval)) return true;
                }
                if (MoveableStatics != null)
                {
                    if (eval(this.MoveableStatics.Overall)) return true;
                    if (this.MoveableStatics.Specific != null && this.MoveableStatics.Specific.Any(eval)) return true;
                }
                if (Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null && this.Grasses.Specific.Any(eval)) return true;
                }
                if (Trees != null)
                {
                    if (eval(this.Trees.Overall)) return true;
                    if (this.Trees.Specific != null && this.Trees.Specific.Any(eval)) return true;
                }
                if (Florae != null)
                {
                    if (eval(this.Florae.Overall)) return true;
                    if (this.Florae.Specific != null && this.Florae.Specific.Any(eval)) return true;
                }
                if (Furniture != null)
                {
                    if (eval(this.Furniture.Overall)) return true;
                    if (this.Furniture.Specific != null && this.Furniture.Specific.Any(eval)) return true;
                }
                if (Weapons != null)
                {
                    if (eval(this.Weapons.Overall)) return true;
                    if (this.Weapons.Specific != null && this.Weapons.Specific.Any(eval)) return true;
                }
                if (Ammunitions != null)
                {
                    if (eval(this.Ammunitions.Overall)) return true;
                    if (this.Ammunitions.Specific != null && this.Ammunitions.Specific.Any(eval)) return true;
                }
                if (Npcs != null)
                {
                    if (eval(this.Npcs.Overall)) return true;
                    if (this.Npcs.Specific != null && this.Npcs.Specific.Any(eval)) return true;
                }
                if (LeveledNpcs != null)
                {
                    if (eval(this.LeveledNpcs.Overall)) return true;
                    if (this.LeveledNpcs.Specific != null && this.LeveledNpcs.Specific.Any(eval)) return true;
                }
                if (Keys != null)
                {
                    if (eval(this.Keys.Overall)) return true;
                    if (this.Keys.Specific != null && this.Keys.Specific.Any(eval)) return true;
                }
                if (Ingestibles != null)
                {
                    if (eval(this.Ingestibles.Overall)) return true;
                    if (this.Ingestibles.Specific != null && this.Ingestibles.Specific.Any(eval)) return true;
                }
                if (IdleMarkers != null)
                {
                    if (eval(this.IdleMarkers.Overall)) return true;
                    if (this.IdleMarkers.Specific != null && this.IdleMarkers.Specific.Any(eval)) return true;
                }
                if (ConstructibleObjects != null)
                {
                    if (eval(this.ConstructibleObjects.Overall)) return true;
                    if (this.ConstructibleObjects.Specific != null && this.ConstructibleObjects.Specific.Any(eval)) return true;
                }
                if (Projectiles != null)
                {
                    if (eval(this.Projectiles.Overall)) return true;
                    if (this.Projectiles.Specific != null && this.Projectiles.Specific.Any(eval)) return true;
                }
                if (Hazards != null)
                {
                    if (eval(this.Hazards.Overall)) return true;
                    if (this.Hazards.Specific != null && this.Hazards.Specific.Any(eval)) return true;
                }
                if (SoulGems != null)
                {
                    if (eval(this.SoulGems.Overall)) return true;
                    if (this.SoulGems.Specific != null && this.SoulGems.Specific.Any(eval)) return true;
                }
                if (LeveledItems != null)
                {
                    if (eval(this.LeveledItems.Overall)) return true;
                    if (this.LeveledItems.Specific != null && this.LeveledItems.Specific.Any(eval)) return true;
                }
                if (Weathers != null)
                {
                    if (eval(this.Weathers.Overall)) return true;
                    if (this.Weathers.Specific != null && this.Weathers.Specific.Any(eval)) return true;
                }
                if (Climates != null)
                {
                    if (eval(this.Climates.Overall)) return true;
                    if (this.Climates.Specific != null && this.Climates.Specific.Any(eval)) return true;
                }
                if (ShaderParticleGeometries != null)
                {
                    if (eval(this.ShaderParticleGeometries.Overall)) return true;
                    if (this.ShaderParticleGeometries.Specific != null && this.ShaderParticleGeometries.Specific.Any(eval)) return true;
                }
                if (VisualEffects != null)
                {
                    if (eval(this.VisualEffects.Overall)) return true;
                    if (this.VisualEffects.Specific != null && this.VisualEffects.Specific.Any(eval)) return true;
                }
                if (Regions != null)
                {
                    if (eval(this.Regions.Overall)) return true;
                    if (this.Regions.Specific != null && this.Regions.Specific.Any(eval)) return true;
                }
                if (NavigationMeshInfoMaps != null)
                {
                    if (eval(this.NavigationMeshInfoMaps.Overall)) return true;
                    if (this.NavigationMeshInfoMaps.Specific != null && this.NavigationMeshInfoMaps.Specific.Any(eval)) return true;
                }
                if (Cells != null)
                {
                    if (eval(this.Cells.Overall)) return true;
                    if (this.Cells.Specific != null && this.Cells.Specific.Any(eval)) return true;
                }
                if (Worldspaces != null)
                {
                    if (eval(this.Worldspaces.Overall)) return true;
                    if (this.Worldspaces.Specific != null && this.Worldspaces.Specific.Any(eval)) return true;
                }
                if (DialogTopics != null)
                {
                    if (eval(this.DialogTopics.Overall)) return true;
                    if (this.DialogTopics.Specific != null && this.DialogTopics.Specific.Any(eval)) return true;
                }
                if (Quests != null)
                {
                    if (eval(this.Quests.Overall)) return true;
                    if (this.Quests.Specific != null && this.Quests.Specific.Any(eval)) return true;
                }
                if (IdleAnimations != null)
                {
                    if (eval(this.IdleAnimations.Overall)) return true;
                    if (this.IdleAnimations.Specific != null && this.IdleAnimations.Specific.Any(eval)) return true;
                }
                if (Packages != null)
                {
                    if (eval(this.Packages.Overall)) return true;
                    if (this.Packages.Specific != null && this.Packages.Specific.Any(eval)) return true;
                }
                if (CombatStyles != null)
                {
                    if (eval(this.CombatStyles.Overall)) return true;
                    if (this.CombatStyles.Specific != null && this.CombatStyles.Specific.Any(eval)) return true;
                }
                if (LoadScreens != null)
                {
                    if (eval(this.LoadScreens.Overall)) return true;
                    if (this.LoadScreens.Specific != null && this.LoadScreens.Specific.Any(eval)) return true;
                }
                if (LeveledSpells != null)
                {
                    if (eval(this.LeveledSpells.Overall)) return true;
                    if (this.LeveledSpells.Specific != null && this.LeveledSpells.Specific.Any(eval)) return true;
                }
                if (AnimatedObjects != null)
                {
                    if (eval(this.AnimatedObjects.Overall)) return true;
                    if (this.AnimatedObjects.Specific != null && this.AnimatedObjects.Specific.Any(eval)) return true;
                }
                if (Waters != null)
                {
                    if (eval(this.Waters.Overall)) return true;
                    if (this.Waters.Specific != null && this.Waters.Specific.Any(eval)) return true;
                }
                if (EffectShaders != null)
                {
                    if (eval(this.EffectShaders.Overall)) return true;
                    if (this.EffectShaders.Specific != null && this.EffectShaders.Specific.Any(eval)) return true;
                }
                if (Explosions != null)
                {
                    if (eval(this.Explosions.Overall)) return true;
                    if (this.Explosions.Specific != null && this.Explosions.Specific.Any(eval)) return true;
                }
                if (Debris != null)
                {
                    if (eval(this.Debris.Overall)) return true;
                    if (this.Debris.Specific != null && this.Debris.Specific.Any(eval)) return true;
                }
                if (ImageSpaces != null)
                {
                    if (eval(this.ImageSpaces.Overall)) return true;
                    if (this.ImageSpaces.Specific != null && this.ImageSpaces.Specific.Any(eval)) return true;
                }
                if (ImageSpaceAdapters != null)
                {
                    if (eval(this.ImageSpaceAdapters.Overall)) return true;
                    if (this.ImageSpaceAdapters.Specific != null && this.ImageSpaceAdapters.Specific.Any(eval)) return true;
                }
                if (FormLists != null)
                {
                    if (eval(this.FormLists.Overall)) return true;
                    if (this.FormLists.Specific != null && this.FormLists.Specific.Any(eval)) return true;
                }
                if (Perks != null)
                {
                    if (eval(this.Perks.Overall)) return true;
                    if (this.Perks.Specific != null && this.Perks.Specific.Any(eval)) return true;
                }
                if (BodyParts != null)
                {
                    if (eval(this.BodyParts.Overall)) return true;
                    if (this.BodyParts.Specific != null && this.BodyParts.Specific.Any(eval)) return true;
                }
                if (AddonNodes != null)
                {
                    if (eval(this.AddonNodes.Overall)) return true;
                    if (this.AddonNodes.Specific != null && this.AddonNodes.Specific.Any(eval)) return true;
                }
                if (ActorValueInformation != null)
                {
                    if (eval(this.ActorValueInformation.Overall)) return true;
                    if (this.ActorValueInformation.Specific != null && this.ActorValueInformation.Specific.Any(eval)) return true;
                }
                if (CameraShots != null)
                {
                    if (eval(this.CameraShots.Overall)) return true;
                    if (this.CameraShots.Specific != null && this.CameraShots.Specific.Any(eval)) return true;
                }
                if (CameraPaths != null)
                {
                    if (eval(this.CameraPaths.Overall)) return true;
                    if (this.CameraPaths.Specific != null && this.CameraPaths.Specific.Any(eval)) return true;
                }
                if (VoiceTypes != null)
                {
                    if (eval(this.VoiceTypes.Overall)) return true;
                    if (this.VoiceTypes.Specific != null && this.VoiceTypes.Specific.Any(eval)) return true;
                }
                if (MaterialTypes != null)
                {
                    if (eval(this.MaterialTypes.Overall)) return true;
                    if (this.MaterialTypes.Specific != null && this.MaterialTypes.Specific.Any(eval)) return true;
                }
                if (Impacts != null)
                {
                    if (eval(this.Impacts.Overall)) return true;
                    if (this.Impacts.Specific != null && this.Impacts.Specific.Any(eval)) return true;
                }
                if (ImpactDataSets != null)
                {
                    if (eval(this.ImpactDataSets.Overall)) return true;
                    if (this.ImpactDataSets.Specific != null && this.ImpactDataSets.Specific.Any(eval)) return true;
                }
                if (ArmorAddons != null)
                {
                    if (eval(this.ArmorAddons.Overall)) return true;
                    if (this.ArmorAddons.Specific != null && this.ArmorAddons.Specific.Any(eval)) return true;
                }
                if (EncounterZones != null)
                {
                    if (eval(this.EncounterZones.Overall)) return true;
                    if (this.EncounterZones.Specific != null && this.EncounterZones.Specific.Any(eval)) return true;
                }
                if (Locations != null)
                {
                    if (eval(this.Locations.Overall)) return true;
                    if (this.Locations.Specific != null && this.Locations.Specific.Any(eval)) return true;
                }
                if (Messages != null)
                {
                    if (eval(this.Messages.Overall)) return true;
                    if (this.Messages.Specific != null && this.Messages.Specific.Any(eval)) return true;
                }
                if (DefaultObjectManagers != null)
                {
                    if (eval(this.DefaultObjectManagers.Overall)) return true;
                    if (this.DefaultObjectManagers.Specific != null && this.DefaultObjectManagers.Specific.Any(eval)) return true;
                }
                if (LightingTemplates != null)
                {
                    if (eval(this.LightingTemplates.Overall)) return true;
                    if (this.LightingTemplates.Specific != null && this.LightingTemplates.Specific.Any(eval)) return true;
                }
                if (MusicTypes != null)
                {
                    if (eval(this.MusicTypes.Overall)) return true;
                    if (this.MusicTypes.Specific != null && this.MusicTypes.Specific.Any(eval)) return true;
                }
                if (Footsteps != null)
                {
                    if (eval(this.Footsteps.Overall)) return true;
                    if (this.Footsteps.Specific != null && this.Footsteps.Specific.Any(eval)) return true;
                }
                if (FootstepSets != null)
                {
                    if (eval(this.FootstepSets.Overall)) return true;
                    if (this.FootstepSets.Specific != null && this.FootstepSets.Specific.Any(eval)) return true;
                }
                if (StoryManagerBranchNodes != null)
                {
                    if (eval(this.StoryManagerBranchNodes.Overall)) return true;
                    if (this.StoryManagerBranchNodes.Specific != null && this.StoryManagerBranchNodes.Specific.Any(eval)) return true;
                }
                if (StoryManagerQuestNodes != null)
                {
                    if (eval(this.StoryManagerQuestNodes.Overall)) return true;
                    if (this.StoryManagerQuestNodes.Specific != null && this.StoryManagerQuestNodes.Specific.Any(eval)) return true;
                }
                if (StoryManagerEventNodes != null)
                {
                    if (eval(this.StoryManagerEventNodes.Overall)) return true;
                    if (this.StoryManagerEventNodes.Specific != null && this.StoryManagerEventNodes.Specific.Any(eval)) return true;
                }
                if (DialogBranches != null)
                {
                    if (eval(this.DialogBranches.Overall)) return true;
                    if (this.DialogBranches.Specific != null && this.DialogBranches.Specific.Any(eval)) return true;
                }
                if (MusicTracks != null)
                {
                    if (eval(this.MusicTracks.Overall)) return true;
                    if (this.MusicTracks.Specific != null && this.MusicTracks.Specific.Any(eval)) return true;
                }
                if (DialogViews != null)
                {
                    if (eval(this.DialogViews.Overall)) return true;
                    if (this.DialogViews.Specific != null && this.DialogViews.Specific.Any(eval)) return true;
                }
                if (WordsOfPower != null)
                {
                    if (eval(this.WordsOfPower.Overall)) return true;
                    if (this.WordsOfPower.Specific != null && this.WordsOfPower.Specific.Any(eval)) return true;
                }
                if (Shouts != null)
                {
                    if (eval(this.Shouts.Overall)) return true;
                    if (this.Shouts.Specific != null && this.Shouts.Specific.Any(eval)) return true;
                }
                if (EquipTypes != null)
                {
                    if (eval(this.EquipTypes.Overall)) return true;
                    if (this.EquipTypes.Specific != null && this.EquipTypes.Specific.Any(eval)) return true;
                }
                if (Relationships != null)
                {
                    if (eval(this.Relationships.Overall)) return true;
                    if (this.Relationships.Specific != null && this.Relationships.Specific.Any(eval)) return true;
                }
                if (Scenes != null)
                {
                    if (eval(this.Scenes.Overall)) return true;
                    if (this.Scenes.Specific != null && this.Scenes.Specific.Any(eval)) return true;
                }
                if (AssociationTypes != null)
                {
                    if (eval(this.AssociationTypes.Overall)) return true;
                    if (this.AssociationTypes.Specific != null && this.AssociationTypes.Specific.Any(eval)) return true;
                }
                if (Outfits != null)
                {
                    if (eval(this.Outfits.Overall)) return true;
                    if (this.Outfits.Specific != null && this.Outfits.Specific.Any(eval)) return true;
                }
                if (ArtObjects != null)
                {
                    if (eval(this.ArtObjects.Overall)) return true;
                    if (this.ArtObjects.Specific != null && this.ArtObjects.Specific.Any(eval)) return true;
                }
                if (MaterialObjects != null)
                {
                    if (eval(this.MaterialObjects.Overall)) return true;
                    if (this.MaterialObjects.Specific != null && this.MaterialObjects.Specific.Any(eval)) return true;
                }
                if (MovementTypes != null)
                {
                    if (eval(this.MovementTypes.Overall)) return true;
                    if (this.MovementTypes.Specific != null && this.MovementTypes.Specific.Any(eval)) return true;
                }
                if (SoundDescriptors != null)
                {
                    if (eval(this.SoundDescriptors.Overall)) return true;
                    if (this.SoundDescriptors.Specific != null && this.SoundDescriptors.Specific.Any(eval)) return true;
                }
                if (DualCastData != null)
                {
                    if (eval(this.DualCastData.Overall)) return true;
                    if (this.DualCastData.Specific != null && this.DualCastData.Specific.Any(eval)) return true;
                }
                if (SoundCategories != null)
                {
                    if (eval(this.SoundCategories.Overall)) return true;
                    if (this.SoundCategories.Specific != null && this.SoundCategories.Specific.Any(eval)) return true;
                }
                if (SoundOutputModels != null)
                {
                    if (eval(this.SoundOutputModels.Overall)) return true;
                    if (this.SoundOutputModels.Specific != null && this.SoundOutputModels.Specific.Any(eval)) return true;
                }
                if (CollisionLayers != null)
                {
                    if (eval(this.CollisionLayers.Overall)) return true;
                    if (this.CollisionLayers.Specific != null && this.CollisionLayers.Specific.Any(eval)) return true;
                }
                if (Colors != null)
                {
                    if (eval(this.Colors.Overall)) return true;
                    if (this.Colors.Specific != null && this.Colors.Specific.Any(eval)) return true;
                }
                if (ReverbParameters != null)
                {
                    if (eval(this.ReverbParameters.Overall)) return true;
                    if (this.ReverbParameters.Specific != null && this.ReverbParameters.Specific.Any(eval)) return true;
                }
                if (VolumetricLightings != null)
                {
                    if (eval(this.VolumetricLightings.Overall)) return true;
                    if (this.VolumetricLightings.Specific != null && this.VolumetricLightings.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Fallout4Mod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, Fallout4ModHeader.Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
                obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
                obj.Keywords = this.Keywords == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Keywords.Overall), this.Keywords.Specific?.Translate(eval));
                obj.LocationReferenceTypes = this.LocationReferenceTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LocationReferenceTypes.Overall), this.LocationReferenceTypes.Specific?.Translate(eval));
                obj.Actions = this.Actions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Actions.Overall), this.Actions.Specific?.Translate(eval));
                obj.TextureSets = this.TextureSets == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.TextureSets.Overall), this.TextureSets.Specific?.Translate(eval));
                obj.Globals = this.Globals == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Globals.Overall), this.Globals.Specific?.Translate(eval));
                obj.Classes = this.Classes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Classes.Overall), this.Classes.Specific?.Translate(eval));
                obj.Factions = this.Factions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Factions.Overall), this.Factions.Specific?.Translate(eval));
                obj.HeadParts = this.HeadParts == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.HeadParts.Overall), this.HeadParts.Specific?.Translate(eval));
                obj.Hairs = this.Hairs == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Hairs.Overall), this.Hairs.Specific?.Translate(eval));
                obj.Eyes = this.Eyes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Eyes.Overall), this.Eyes.Specific?.Translate(eval));
                obj.Races = this.Races == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Races.Overall), this.Races.Specific?.Translate(eval));
                obj.SoundMarkers = this.SoundMarkers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoundMarkers.Overall), this.SoundMarkers.Specific?.Translate(eval));
                obj.AcousticSpaces = this.AcousticSpaces == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AcousticSpaces.Overall), this.AcousticSpaces.Specific?.Translate(eval));
                obj.MagicEffects = this.MagicEffects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MagicEffects.Overall), this.MagicEffects.Specific?.Translate(eval));
                obj.LandscapeTextures = this.LandscapeTextures == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LandscapeTextures.Overall), this.LandscapeTextures.Specific?.Translate(eval));
                obj.ObjectEffects = this.ObjectEffects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ObjectEffects.Overall), this.ObjectEffects.Specific?.Translate(eval));
                obj.Spells = this.Spells == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Spells.Overall), this.Spells.Specific?.Translate(eval));
                obj.Scrolls = this.Scrolls == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Scrolls.Overall), this.Scrolls.Specific?.Translate(eval));
                obj.Activators = this.Activators == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Activators.Overall), this.Activators.Specific?.Translate(eval));
                obj.TalkingActivators = this.TalkingActivators == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.TalkingActivators.Overall), this.TalkingActivators.Specific?.Translate(eval));
                obj.Armors = this.Armors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Armors.Overall), this.Armors.Specific?.Translate(eval));
                obj.Books = this.Books == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Books.Overall), this.Books.Specific?.Translate(eval));
                obj.Containers = this.Containers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Containers.Overall), this.Containers.Specific?.Translate(eval));
                obj.Doors = this.Doors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Doors.Overall), this.Doors.Specific?.Translate(eval));
                obj.Ingredients = this.Ingredients == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Ingredients.Overall), this.Ingredients.Specific?.Translate(eval));
                obj.Lights = this.Lights == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Lights.Overall), this.Lights.Specific?.Translate(eval));
                obj.MiscItems = this.MiscItems == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MiscItems.Overall), this.MiscItems.Specific?.Translate(eval));
                obj.AlchemicalApparatuses = this.AlchemicalApparatuses == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AlchemicalApparatuses.Overall), this.AlchemicalApparatuses.Specific?.Translate(eval));
                obj.Statics = this.Statics == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Statics.Overall), this.Statics.Specific?.Translate(eval));
                obj.MoveableStatics = this.MoveableStatics == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MoveableStatics.Overall), this.MoveableStatics.Specific?.Translate(eval));
                obj.Grasses = this.Grasses == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Grasses.Overall), this.Grasses.Specific?.Translate(eval));
                obj.Trees = this.Trees == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Trees.Overall), this.Trees.Specific?.Translate(eval));
                obj.Florae = this.Florae == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Florae.Overall), this.Florae.Specific?.Translate(eval));
                obj.Furniture = this.Furniture == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Furniture.Overall), this.Furniture.Specific?.Translate(eval));
                obj.Weapons = this.Weapons == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Weapons.Overall), this.Weapons.Specific?.Translate(eval));
                obj.Ammunitions = this.Ammunitions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Ammunitions.Overall), this.Ammunitions.Specific?.Translate(eval));
                obj.Npcs = this.Npcs == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Npcs.Overall), this.Npcs.Specific?.Translate(eval));
                obj.LeveledNpcs = this.LeveledNpcs == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LeveledNpcs.Overall), this.LeveledNpcs.Specific?.Translate(eval));
                obj.Keys = this.Keys == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Keys.Overall), this.Keys.Specific?.Translate(eval));
                obj.Ingestibles = this.Ingestibles == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Ingestibles.Overall), this.Ingestibles.Specific?.Translate(eval));
                obj.IdleMarkers = this.IdleMarkers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.IdleMarkers.Overall), this.IdleMarkers.Specific?.Translate(eval));
                obj.ConstructibleObjects = this.ConstructibleObjects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ConstructibleObjects.Overall), this.ConstructibleObjects.Specific?.Translate(eval));
                obj.Projectiles = this.Projectiles == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Projectiles.Overall), this.Projectiles.Specific?.Translate(eval));
                obj.Hazards = this.Hazards == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Hazards.Overall), this.Hazards.Specific?.Translate(eval));
                obj.SoulGems = this.SoulGems == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoulGems.Overall), this.SoulGems.Specific?.Translate(eval));
                obj.LeveledItems = this.LeveledItems == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LeveledItems.Overall), this.LeveledItems.Specific?.Translate(eval));
                obj.Weathers = this.Weathers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Weathers.Overall), this.Weathers.Specific?.Translate(eval));
                obj.Climates = this.Climates == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Climates.Overall), this.Climates.Specific?.Translate(eval));
                obj.ShaderParticleGeometries = this.ShaderParticleGeometries == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ShaderParticleGeometries.Overall), this.ShaderParticleGeometries.Specific?.Translate(eval));
                obj.VisualEffects = this.VisualEffects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.VisualEffects.Overall), this.VisualEffects.Specific?.Translate(eval));
                obj.Regions = this.Regions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Regions.Overall), this.Regions.Specific?.Translate(eval));
                obj.NavigationMeshInfoMaps = this.NavigationMeshInfoMaps == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.NavigationMeshInfoMaps.Overall), this.NavigationMeshInfoMaps.Specific?.Translate(eval));
                obj.Cells = this.Cells == null ? null : new MaskItem<R, ListGroup.Mask<R>?>(eval(this.Cells.Overall), this.Cells.Specific?.Translate(eval));
                obj.Worldspaces = this.Worldspaces == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Worldspaces.Overall), this.Worldspaces.Specific?.Translate(eval));
                obj.DialogTopics = this.DialogTopics == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.DialogTopics.Overall), this.DialogTopics.Specific?.Translate(eval));
                obj.Quests = this.Quests == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Quests.Overall), this.Quests.Specific?.Translate(eval));
                obj.IdleAnimations = this.IdleAnimations == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.IdleAnimations.Overall), this.IdleAnimations.Specific?.Translate(eval));
                obj.Packages = this.Packages == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Packages.Overall), this.Packages.Specific?.Translate(eval));
                obj.CombatStyles = this.CombatStyles == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.CombatStyles.Overall), this.CombatStyles.Specific?.Translate(eval));
                obj.LoadScreens = this.LoadScreens == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LoadScreens.Overall), this.LoadScreens.Specific?.Translate(eval));
                obj.LeveledSpells = this.LeveledSpells == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LeveledSpells.Overall), this.LeveledSpells.Specific?.Translate(eval));
                obj.AnimatedObjects = this.AnimatedObjects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AnimatedObjects.Overall), this.AnimatedObjects.Specific?.Translate(eval));
                obj.Waters = this.Waters == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Waters.Overall), this.Waters.Specific?.Translate(eval));
                obj.EffectShaders = this.EffectShaders == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.EffectShaders.Overall), this.EffectShaders.Specific?.Translate(eval));
                obj.Explosions = this.Explosions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Explosions.Overall), this.Explosions.Specific?.Translate(eval));
                obj.Debris = this.Debris == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Debris.Overall), this.Debris.Specific?.Translate(eval));
                obj.ImageSpaces = this.ImageSpaces == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ImageSpaces.Overall), this.ImageSpaces.Specific?.Translate(eval));
                obj.ImageSpaceAdapters = this.ImageSpaceAdapters == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ImageSpaceAdapters.Overall), this.ImageSpaceAdapters.Specific?.Translate(eval));
                obj.FormLists = this.FormLists == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.FormLists.Overall), this.FormLists.Specific?.Translate(eval));
                obj.Perks = this.Perks == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Perks.Overall), this.Perks.Specific?.Translate(eval));
                obj.BodyParts = this.BodyParts == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.BodyParts.Overall), this.BodyParts.Specific?.Translate(eval));
                obj.AddonNodes = this.AddonNodes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AddonNodes.Overall), this.AddonNodes.Specific?.Translate(eval));
                obj.ActorValueInformation = this.ActorValueInformation == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ActorValueInformation.Overall), this.ActorValueInformation.Specific?.Translate(eval));
                obj.CameraShots = this.CameraShots == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.CameraShots.Overall), this.CameraShots.Specific?.Translate(eval));
                obj.CameraPaths = this.CameraPaths == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.CameraPaths.Overall), this.CameraPaths.Specific?.Translate(eval));
                obj.VoiceTypes = this.VoiceTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.VoiceTypes.Overall), this.VoiceTypes.Specific?.Translate(eval));
                obj.MaterialTypes = this.MaterialTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MaterialTypes.Overall), this.MaterialTypes.Specific?.Translate(eval));
                obj.Impacts = this.Impacts == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Impacts.Overall), this.Impacts.Specific?.Translate(eval));
                obj.ImpactDataSets = this.ImpactDataSets == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ImpactDataSets.Overall), this.ImpactDataSets.Specific?.Translate(eval));
                obj.ArmorAddons = this.ArmorAddons == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ArmorAddons.Overall), this.ArmorAddons.Specific?.Translate(eval));
                obj.EncounterZones = this.EncounterZones == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.EncounterZones.Overall), this.EncounterZones.Specific?.Translate(eval));
                obj.Locations = this.Locations == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Locations.Overall), this.Locations.Specific?.Translate(eval));
                obj.Messages = this.Messages == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Messages.Overall), this.Messages.Specific?.Translate(eval));
                obj.DefaultObjectManagers = this.DefaultObjectManagers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.DefaultObjectManagers.Overall), this.DefaultObjectManagers.Specific?.Translate(eval));
                obj.LightingTemplates = this.LightingTemplates == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LightingTemplates.Overall), this.LightingTemplates.Specific?.Translate(eval));
                obj.MusicTypes = this.MusicTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MusicTypes.Overall), this.MusicTypes.Specific?.Translate(eval));
                obj.Footsteps = this.Footsteps == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Footsteps.Overall), this.Footsteps.Specific?.Translate(eval));
                obj.FootstepSets = this.FootstepSets == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.FootstepSets.Overall), this.FootstepSets.Specific?.Translate(eval));
                obj.StoryManagerBranchNodes = this.StoryManagerBranchNodes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.StoryManagerBranchNodes.Overall), this.StoryManagerBranchNodes.Specific?.Translate(eval));
                obj.StoryManagerQuestNodes = this.StoryManagerQuestNodes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.StoryManagerQuestNodes.Overall), this.StoryManagerQuestNodes.Specific?.Translate(eval));
                obj.StoryManagerEventNodes = this.StoryManagerEventNodes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.StoryManagerEventNodes.Overall), this.StoryManagerEventNodes.Specific?.Translate(eval));
                obj.DialogBranches = this.DialogBranches == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.DialogBranches.Overall), this.DialogBranches.Specific?.Translate(eval));
                obj.MusicTracks = this.MusicTracks == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MusicTracks.Overall), this.MusicTracks.Specific?.Translate(eval));
                obj.DialogViews = this.DialogViews == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.DialogViews.Overall), this.DialogViews.Specific?.Translate(eval));
                obj.WordsOfPower = this.WordsOfPower == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.WordsOfPower.Overall), this.WordsOfPower.Specific?.Translate(eval));
                obj.Shouts = this.Shouts == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Shouts.Overall), this.Shouts.Specific?.Translate(eval));
                obj.EquipTypes = this.EquipTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.EquipTypes.Overall), this.EquipTypes.Specific?.Translate(eval));
                obj.Relationships = this.Relationships == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Relationships.Overall), this.Relationships.Specific?.Translate(eval));
                obj.Scenes = this.Scenes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Scenes.Overall), this.Scenes.Specific?.Translate(eval));
                obj.AssociationTypes = this.AssociationTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AssociationTypes.Overall), this.AssociationTypes.Specific?.Translate(eval));
                obj.Outfits = this.Outfits == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Outfits.Overall), this.Outfits.Specific?.Translate(eval));
                obj.ArtObjects = this.ArtObjects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ArtObjects.Overall), this.ArtObjects.Specific?.Translate(eval));
                obj.MaterialObjects = this.MaterialObjects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MaterialObjects.Overall), this.MaterialObjects.Specific?.Translate(eval));
                obj.MovementTypes = this.MovementTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MovementTypes.Overall), this.MovementTypes.Specific?.Translate(eval));
                obj.SoundDescriptors = this.SoundDescriptors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoundDescriptors.Overall), this.SoundDescriptors.Specific?.Translate(eval));
                obj.DualCastData = this.DualCastData == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.DualCastData.Overall), this.DualCastData.Specific?.Translate(eval));
                obj.SoundCategories = this.SoundCategories == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoundCategories.Overall), this.SoundCategories.Specific?.Translate(eval));
                obj.SoundOutputModels = this.SoundOutputModels == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoundOutputModels.Overall), this.SoundOutputModels.Specific?.Translate(eval));
                obj.CollisionLayers = this.CollisionLayers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.CollisionLayers.Overall), this.CollisionLayers.Specific?.Translate(eval));
                obj.Colors = this.Colors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Colors.Overall), this.Colors.Specific?.Translate(eval));
                obj.ReverbParameters = this.ReverbParameters == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ReverbParameters.Overall), this.ReverbParameters.Specific?.Translate(eval));
                obj.VolumetricLightings = this.VolumetricLightings == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.VolumetricLightings.Overall), this.VolumetricLightings.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Fallout4Mod.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Fallout4Mod.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Fallout4Mod.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ModHeader?.Overall ?? true)
                    {
                        ModHeader?.ToString(fg);
                    }
                    if (printMask?.GameSettings?.Overall ?? true)
                    {
                        GameSettings?.ToString(fg);
                    }
                    if (printMask?.Keywords?.Overall ?? true)
                    {
                        Keywords?.ToString(fg);
                    }
                    if (printMask?.LocationReferenceTypes?.Overall ?? true)
                    {
                        LocationReferenceTypes?.ToString(fg);
                    }
                    if (printMask?.Actions?.Overall ?? true)
                    {
                        Actions?.ToString(fg);
                    }
                    if (printMask?.TextureSets?.Overall ?? true)
                    {
                        TextureSets?.ToString(fg);
                    }
                    if (printMask?.Globals?.Overall ?? true)
                    {
                        Globals?.ToString(fg);
                    }
                    if (printMask?.Classes?.Overall ?? true)
                    {
                        Classes?.ToString(fg);
                    }
                    if (printMask?.Factions?.Overall ?? true)
                    {
                        Factions?.ToString(fg);
                    }
                    if (printMask?.HeadParts?.Overall ?? true)
                    {
                        HeadParts?.ToString(fg);
                    }
                    if (printMask?.Hairs?.Overall ?? true)
                    {
                        Hairs?.ToString(fg);
                    }
                    if (printMask?.Eyes?.Overall ?? true)
                    {
                        Eyes?.ToString(fg);
                    }
                    if (printMask?.Races?.Overall ?? true)
                    {
                        Races?.ToString(fg);
                    }
                    if (printMask?.SoundMarkers?.Overall ?? true)
                    {
                        SoundMarkers?.ToString(fg);
                    }
                    if (printMask?.AcousticSpaces?.Overall ?? true)
                    {
                        AcousticSpaces?.ToString(fg);
                    }
                    if (printMask?.MagicEffects?.Overall ?? true)
                    {
                        MagicEffects?.ToString(fg);
                    }
                    if (printMask?.LandscapeTextures?.Overall ?? true)
                    {
                        LandscapeTextures?.ToString(fg);
                    }
                    if (printMask?.ObjectEffects?.Overall ?? true)
                    {
                        ObjectEffects?.ToString(fg);
                    }
                    if (printMask?.Spells?.Overall ?? true)
                    {
                        Spells?.ToString(fg);
                    }
                    if (printMask?.Scrolls?.Overall ?? true)
                    {
                        Scrolls?.ToString(fg);
                    }
                    if (printMask?.Activators?.Overall ?? true)
                    {
                        Activators?.ToString(fg);
                    }
                    if (printMask?.TalkingActivators?.Overall ?? true)
                    {
                        TalkingActivators?.ToString(fg);
                    }
                    if (printMask?.Armors?.Overall ?? true)
                    {
                        Armors?.ToString(fg);
                    }
                    if (printMask?.Books?.Overall ?? true)
                    {
                        Books?.ToString(fg);
                    }
                    if (printMask?.Containers?.Overall ?? true)
                    {
                        Containers?.ToString(fg);
                    }
                    if (printMask?.Doors?.Overall ?? true)
                    {
                        Doors?.ToString(fg);
                    }
                    if (printMask?.Ingredients?.Overall ?? true)
                    {
                        Ingredients?.ToString(fg);
                    }
                    if (printMask?.Lights?.Overall ?? true)
                    {
                        Lights?.ToString(fg);
                    }
                    if (printMask?.MiscItems?.Overall ?? true)
                    {
                        MiscItems?.ToString(fg);
                    }
                    if (printMask?.AlchemicalApparatuses?.Overall ?? true)
                    {
                        AlchemicalApparatuses?.ToString(fg);
                    }
                    if (printMask?.Statics?.Overall ?? true)
                    {
                        Statics?.ToString(fg);
                    }
                    if (printMask?.MoveableStatics?.Overall ?? true)
                    {
                        MoveableStatics?.ToString(fg);
                    }
                    if (printMask?.Grasses?.Overall ?? true)
                    {
                        Grasses?.ToString(fg);
                    }
                    if (printMask?.Trees?.Overall ?? true)
                    {
                        Trees?.ToString(fg);
                    }
                    if (printMask?.Florae?.Overall ?? true)
                    {
                        Florae?.ToString(fg);
                    }
                    if (printMask?.Furniture?.Overall ?? true)
                    {
                        Furniture?.ToString(fg);
                    }
                    if (printMask?.Weapons?.Overall ?? true)
                    {
                        Weapons?.ToString(fg);
                    }
                    if (printMask?.Ammunitions?.Overall ?? true)
                    {
                        Ammunitions?.ToString(fg);
                    }
                    if (printMask?.Npcs?.Overall ?? true)
                    {
                        Npcs?.ToString(fg);
                    }
                    if (printMask?.LeveledNpcs?.Overall ?? true)
                    {
                        LeveledNpcs?.ToString(fg);
                    }
                    if (printMask?.Keys?.Overall ?? true)
                    {
                        Keys?.ToString(fg);
                    }
                    if (printMask?.Ingestibles?.Overall ?? true)
                    {
                        Ingestibles?.ToString(fg);
                    }
                    if (printMask?.IdleMarkers?.Overall ?? true)
                    {
                        IdleMarkers?.ToString(fg);
                    }
                    if (printMask?.ConstructibleObjects?.Overall ?? true)
                    {
                        ConstructibleObjects?.ToString(fg);
                    }
                    if (printMask?.Projectiles?.Overall ?? true)
                    {
                        Projectiles?.ToString(fg);
                    }
                    if (printMask?.Hazards?.Overall ?? true)
                    {
                        Hazards?.ToString(fg);
                    }
                    if (printMask?.SoulGems?.Overall ?? true)
                    {
                        SoulGems?.ToString(fg);
                    }
                    if (printMask?.LeveledItems?.Overall ?? true)
                    {
                        LeveledItems?.ToString(fg);
                    }
                    if (printMask?.Weathers?.Overall ?? true)
                    {
                        Weathers?.ToString(fg);
                    }
                    if (printMask?.Climates?.Overall ?? true)
                    {
                        Climates?.ToString(fg);
                    }
                    if (printMask?.ShaderParticleGeometries?.Overall ?? true)
                    {
                        ShaderParticleGeometries?.ToString(fg);
                    }
                    if (printMask?.VisualEffects?.Overall ?? true)
                    {
                        VisualEffects?.ToString(fg);
                    }
                    if (printMask?.Regions?.Overall ?? true)
                    {
                        Regions?.ToString(fg);
                    }
                    if (printMask?.NavigationMeshInfoMaps?.Overall ?? true)
                    {
                        NavigationMeshInfoMaps?.ToString(fg);
                    }
                    if (printMask?.Cells?.Overall ?? true)
                    {
                        Cells?.ToString(fg);
                    }
                    if (printMask?.Worldspaces?.Overall ?? true)
                    {
                        Worldspaces?.ToString(fg);
                    }
                    if (printMask?.DialogTopics?.Overall ?? true)
                    {
                        DialogTopics?.ToString(fg);
                    }
                    if (printMask?.Quests?.Overall ?? true)
                    {
                        Quests?.ToString(fg);
                    }
                    if (printMask?.IdleAnimations?.Overall ?? true)
                    {
                        IdleAnimations?.ToString(fg);
                    }
                    if (printMask?.Packages?.Overall ?? true)
                    {
                        Packages?.ToString(fg);
                    }
                    if (printMask?.CombatStyles?.Overall ?? true)
                    {
                        CombatStyles?.ToString(fg);
                    }
                    if (printMask?.LoadScreens?.Overall ?? true)
                    {
                        LoadScreens?.ToString(fg);
                    }
                    if (printMask?.LeveledSpells?.Overall ?? true)
                    {
                        LeveledSpells?.ToString(fg);
                    }
                    if (printMask?.AnimatedObjects?.Overall ?? true)
                    {
                        AnimatedObjects?.ToString(fg);
                    }
                    if (printMask?.Waters?.Overall ?? true)
                    {
                        Waters?.ToString(fg);
                    }
                    if (printMask?.EffectShaders?.Overall ?? true)
                    {
                        EffectShaders?.ToString(fg);
                    }
                    if (printMask?.Explosions?.Overall ?? true)
                    {
                        Explosions?.ToString(fg);
                    }
                    if (printMask?.Debris?.Overall ?? true)
                    {
                        Debris?.ToString(fg);
                    }
                    if (printMask?.ImageSpaces?.Overall ?? true)
                    {
                        ImageSpaces?.ToString(fg);
                    }
                    if (printMask?.ImageSpaceAdapters?.Overall ?? true)
                    {
                        ImageSpaceAdapters?.ToString(fg);
                    }
                    if (printMask?.FormLists?.Overall ?? true)
                    {
                        FormLists?.ToString(fg);
                    }
                    if (printMask?.Perks?.Overall ?? true)
                    {
                        Perks?.ToString(fg);
                    }
                    if (printMask?.BodyParts?.Overall ?? true)
                    {
                        BodyParts?.ToString(fg);
                    }
                    if (printMask?.AddonNodes?.Overall ?? true)
                    {
                        AddonNodes?.ToString(fg);
                    }
                    if (printMask?.ActorValueInformation?.Overall ?? true)
                    {
                        ActorValueInformation?.ToString(fg);
                    }
                    if (printMask?.CameraShots?.Overall ?? true)
                    {
                        CameraShots?.ToString(fg);
                    }
                    if (printMask?.CameraPaths?.Overall ?? true)
                    {
                        CameraPaths?.ToString(fg);
                    }
                    if (printMask?.VoiceTypes?.Overall ?? true)
                    {
                        VoiceTypes?.ToString(fg);
                    }
                    if (printMask?.MaterialTypes?.Overall ?? true)
                    {
                        MaterialTypes?.ToString(fg);
                    }
                    if (printMask?.Impacts?.Overall ?? true)
                    {
                        Impacts?.ToString(fg);
                    }
                    if (printMask?.ImpactDataSets?.Overall ?? true)
                    {
                        ImpactDataSets?.ToString(fg);
                    }
                    if (printMask?.ArmorAddons?.Overall ?? true)
                    {
                        ArmorAddons?.ToString(fg);
                    }
                    if (printMask?.EncounterZones?.Overall ?? true)
                    {
                        EncounterZones?.ToString(fg);
                    }
                    if (printMask?.Locations?.Overall ?? true)
                    {
                        Locations?.ToString(fg);
                    }
                    if (printMask?.Messages?.Overall ?? true)
                    {
                        Messages?.ToString(fg);
                    }
                    if (printMask?.DefaultObjectManagers?.Overall ?? true)
                    {
                        DefaultObjectManagers?.ToString(fg);
                    }
                    if (printMask?.LightingTemplates?.Overall ?? true)
                    {
                        LightingTemplates?.ToString(fg);
                    }
                    if (printMask?.MusicTypes?.Overall ?? true)
                    {
                        MusicTypes?.ToString(fg);
                    }
                    if (printMask?.Footsteps?.Overall ?? true)
                    {
                        Footsteps?.ToString(fg);
                    }
                    if (printMask?.FootstepSets?.Overall ?? true)
                    {
                        FootstepSets?.ToString(fg);
                    }
                    if (printMask?.StoryManagerBranchNodes?.Overall ?? true)
                    {
                        StoryManagerBranchNodes?.ToString(fg);
                    }
                    if (printMask?.StoryManagerQuestNodes?.Overall ?? true)
                    {
                        StoryManagerQuestNodes?.ToString(fg);
                    }
                    if (printMask?.StoryManagerEventNodes?.Overall ?? true)
                    {
                        StoryManagerEventNodes?.ToString(fg);
                    }
                    if (printMask?.DialogBranches?.Overall ?? true)
                    {
                        DialogBranches?.ToString(fg);
                    }
                    if (printMask?.MusicTracks?.Overall ?? true)
                    {
                        MusicTracks?.ToString(fg);
                    }
                    if (printMask?.DialogViews?.Overall ?? true)
                    {
                        DialogViews?.ToString(fg);
                    }
                    if (printMask?.WordsOfPower?.Overall ?? true)
                    {
                        WordsOfPower?.ToString(fg);
                    }
                    if (printMask?.Shouts?.Overall ?? true)
                    {
                        Shouts?.ToString(fg);
                    }
                    if (printMask?.EquipTypes?.Overall ?? true)
                    {
                        EquipTypes?.ToString(fg);
                    }
                    if (printMask?.Relationships?.Overall ?? true)
                    {
                        Relationships?.ToString(fg);
                    }
                    if (printMask?.Scenes?.Overall ?? true)
                    {
                        Scenes?.ToString(fg);
                    }
                    if (printMask?.AssociationTypes?.Overall ?? true)
                    {
                        AssociationTypes?.ToString(fg);
                    }
                    if (printMask?.Outfits?.Overall ?? true)
                    {
                        Outfits?.ToString(fg);
                    }
                    if (printMask?.ArtObjects?.Overall ?? true)
                    {
                        ArtObjects?.ToString(fg);
                    }
                    if (printMask?.MaterialObjects?.Overall ?? true)
                    {
                        MaterialObjects?.ToString(fg);
                    }
                    if (printMask?.MovementTypes?.Overall ?? true)
                    {
                        MovementTypes?.ToString(fg);
                    }
                    if (printMask?.SoundDescriptors?.Overall ?? true)
                    {
                        SoundDescriptors?.ToString(fg);
                    }
                    if (printMask?.DualCastData?.Overall ?? true)
                    {
                        DualCastData?.ToString(fg);
                    }
                    if (printMask?.SoundCategories?.Overall ?? true)
                    {
                        SoundCategories?.ToString(fg);
                    }
                    if (printMask?.SoundOutputModels?.Overall ?? true)
                    {
                        SoundOutputModels?.ToString(fg);
                    }
                    if (printMask?.CollisionLayers?.Overall ?? true)
                    {
                        CollisionLayers?.ToString(fg);
                    }
                    if (printMask?.Colors?.Overall ?? true)
                    {
                        Colors?.ToString(fg);
                    }
                    if (printMask?.ReverbParameters?.Overall ?? true)
                    {
                        ReverbParameters?.ToString(fg);
                    }
                    if (printMask?.VolumetricLightings?.Overall ?? true)
                    {
                        VolumetricLightings?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, Fallout4ModHeader.ErrorMask?>? ModHeader;
            public MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>? GameSettings;
            public MaskItem<Exception?, Group.ErrorMask<Keyword.ErrorMask>?>? Keywords;
            public MaskItem<Exception?, Group.ErrorMask<LocationReferenceType.ErrorMask>?>? LocationReferenceTypes;
            public MaskItem<Exception?, Group.ErrorMask<ActionRecord.ErrorMask>?>? Actions;
            public MaskItem<Exception?, Group.ErrorMask<TextureSet.ErrorMask>?>? TextureSets;
            public MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>? Globals;
            public MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>? Classes;
            public MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>? Factions;
            public MaskItem<Exception?, Group.ErrorMask<HeadPart.ErrorMask>?>? HeadParts;
            public MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>? Hairs;
            public MaskItem<Exception?, Group.ErrorMask<Eyes.ErrorMask>?>? Eyes;
            public MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>? Races;
            public MaskItem<Exception?, Group.ErrorMask<SoundMarker.ErrorMask>?>? SoundMarkers;
            public MaskItem<Exception?, Group.ErrorMask<AcousticSpace.ErrorMask>?>? AcousticSpaces;
            public MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>? MagicEffects;
            public MaskItem<Exception?, Group.ErrorMask<LandscapeTexture.ErrorMask>?>? LandscapeTextures;
            public MaskItem<Exception?, Group.ErrorMask<ObjectEffect.ErrorMask>?>? ObjectEffects;
            public MaskItem<Exception?, Group.ErrorMask<Spell.ErrorMask>?>? Spells;
            public MaskItem<Exception?, Group.ErrorMask<Scroll.ErrorMask>?>? Scrolls;
            public MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>? Activators;
            public MaskItem<Exception?, Group.ErrorMask<TalkingActivator.ErrorMask>?>? TalkingActivators;
            public MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>? Armors;
            public MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>? Books;
            public MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>? Containers;
            public MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>? Doors;
            public MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>? Ingredients;
            public MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>? Lights;
            public MaskItem<Exception?, Group.ErrorMask<MiscItem.ErrorMask>?>? MiscItems;
            public MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>? AlchemicalApparatuses;
            public MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>? Statics;
            public MaskItem<Exception?, Group.ErrorMask<MoveableStatic.ErrorMask>?>? MoveableStatics;
            public MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>? Grasses;
            public MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>? Trees;
            public MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>? Florae;
            public MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>? Furniture;
            public MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>? Weapons;
            public MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>? Ammunitions;
            public MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>? Npcs;
            public MaskItem<Exception?, Group.ErrorMask<LeveledNpc.ErrorMask>?>? LeveledNpcs;
            public MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>? Keys;
            public MaskItem<Exception?, Group.ErrorMask<Ingestible.ErrorMask>?>? Ingestibles;
            public MaskItem<Exception?, Group.ErrorMask<IdleMarker.ErrorMask>?>? IdleMarkers;
            public MaskItem<Exception?, Group.ErrorMask<ConstructibleObject.ErrorMask>?>? ConstructibleObjects;
            public MaskItem<Exception?, Group.ErrorMask<Projectile.ErrorMask>?>? Projectiles;
            public MaskItem<Exception?, Group.ErrorMask<Hazard.ErrorMask>?>? Hazards;
            public MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>? SoulGems;
            public MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>? LeveledItems;
            public MaskItem<Exception?, Group.ErrorMask<Weather.ErrorMask>?>? Weathers;
            public MaskItem<Exception?, Group.ErrorMask<Climate.ErrorMask>?>? Climates;
            public MaskItem<Exception?, Group.ErrorMask<ShaderParticleGeometry.ErrorMask>?>? ShaderParticleGeometries;
            public MaskItem<Exception?, Group.ErrorMask<VisualEffect.ErrorMask>?>? VisualEffects;
            public MaskItem<Exception?, Group.ErrorMask<Region.ErrorMask>?>? Regions;
            public MaskItem<Exception?, Group.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>? NavigationMeshInfoMaps;
            public MaskItem<Exception?, ListGroup.ErrorMask<CellBlock.ErrorMask>?>? Cells;
            public MaskItem<Exception?, Group.ErrorMask<Worldspace.ErrorMask>?>? Worldspaces;
            public MaskItem<Exception?, Group.ErrorMask<DialogTopic.ErrorMask>?>? DialogTopics;
            public MaskItem<Exception?, Group.ErrorMask<Quest.ErrorMask>?>? Quests;
            public MaskItem<Exception?, Group.ErrorMask<IdleAnimation.ErrorMask>?>? IdleAnimations;
            public MaskItem<Exception?, Group.ErrorMask<Package.ErrorMask>?>? Packages;
            public MaskItem<Exception?, Group.ErrorMask<CombatStyle.ErrorMask>?>? CombatStyles;
            public MaskItem<Exception?, Group.ErrorMask<LoadScreen.ErrorMask>?>? LoadScreens;
            public MaskItem<Exception?, Group.ErrorMask<LeveledSpell.ErrorMask>?>? LeveledSpells;
            public MaskItem<Exception?, Group.ErrorMask<AnimatedObject.ErrorMask>?>? AnimatedObjects;
            public MaskItem<Exception?, Group.ErrorMask<Water.ErrorMask>?>? Waters;
            public MaskItem<Exception?, Group.ErrorMask<EffectShader.ErrorMask>?>? EffectShaders;
            public MaskItem<Exception?, Group.ErrorMask<Explosion.ErrorMask>?>? Explosions;
            public MaskItem<Exception?, Group.ErrorMask<Debris.ErrorMask>?>? Debris;
            public MaskItem<Exception?, Group.ErrorMask<ImageSpace.ErrorMask>?>? ImageSpaces;
            public MaskItem<Exception?, Group.ErrorMask<ImageSpaceAdapter.ErrorMask>?>? ImageSpaceAdapters;
            public MaskItem<Exception?, Group.ErrorMask<FormList.ErrorMask>?>? FormLists;
            public MaskItem<Exception?, Group.ErrorMask<Perk.ErrorMask>?>? Perks;
            public MaskItem<Exception?, Group.ErrorMask<BodyPartData.ErrorMask>?>? BodyParts;
            public MaskItem<Exception?, Group.ErrorMask<AddonNode.ErrorMask>?>? AddonNodes;
            public MaskItem<Exception?, Group.ErrorMask<ActorValueInformation.ErrorMask>?>? ActorValueInformation;
            public MaskItem<Exception?, Group.ErrorMask<CameraShot.ErrorMask>?>? CameraShots;
            public MaskItem<Exception?, Group.ErrorMask<CameraPath.ErrorMask>?>? CameraPaths;
            public MaskItem<Exception?, Group.ErrorMask<VoiceType.ErrorMask>?>? VoiceTypes;
            public MaskItem<Exception?, Group.ErrorMask<MaterialType.ErrorMask>?>? MaterialTypes;
            public MaskItem<Exception?, Group.ErrorMask<Impact.ErrorMask>?>? Impacts;
            public MaskItem<Exception?, Group.ErrorMask<ImpactDataSet.ErrorMask>?>? ImpactDataSets;
            public MaskItem<Exception?, Group.ErrorMask<ArmorAddon.ErrorMask>?>? ArmorAddons;
            public MaskItem<Exception?, Group.ErrorMask<EncounterZone.ErrorMask>?>? EncounterZones;
            public MaskItem<Exception?, Group.ErrorMask<Location.ErrorMask>?>? Locations;
            public MaskItem<Exception?, Group.ErrorMask<Message.ErrorMask>?>? Messages;
            public MaskItem<Exception?, Group.ErrorMask<DefaultObjectManager.ErrorMask>?>? DefaultObjectManagers;
            public MaskItem<Exception?, Group.ErrorMask<LightingTemplate.ErrorMask>?>? LightingTemplates;
            public MaskItem<Exception?, Group.ErrorMask<MusicType.ErrorMask>?>? MusicTypes;
            public MaskItem<Exception?, Group.ErrorMask<Footstep.ErrorMask>?>? Footsteps;
            public MaskItem<Exception?, Group.ErrorMask<FootstepSet.ErrorMask>?>? FootstepSets;
            public MaskItem<Exception?, Group.ErrorMask<StoryManagerBranchNode.ErrorMask>?>? StoryManagerBranchNodes;
            public MaskItem<Exception?, Group.ErrorMask<StoryManagerQuestNode.ErrorMask>?>? StoryManagerQuestNodes;
            public MaskItem<Exception?, Group.ErrorMask<StoryManagerEventNode.ErrorMask>?>? StoryManagerEventNodes;
            public MaskItem<Exception?, Group.ErrorMask<DialogBranch.ErrorMask>?>? DialogBranches;
            public MaskItem<Exception?, Group.ErrorMask<MusicTrack.ErrorMask>?>? MusicTracks;
            public MaskItem<Exception?, Group.ErrorMask<DialogView.ErrorMask>?>? DialogViews;
            public MaskItem<Exception?, Group.ErrorMask<WordOfPower.ErrorMask>?>? WordsOfPower;
            public MaskItem<Exception?, Group.ErrorMask<Shout.ErrorMask>?>? Shouts;
            public MaskItem<Exception?, Group.ErrorMask<EquipType.ErrorMask>?>? EquipTypes;
            public MaskItem<Exception?, Group.ErrorMask<Relationship.ErrorMask>?>? Relationships;
            public MaskItem<Exception?, Group.ErrorMask<Scene.ErrorMask>?>? Scenes;
            public MaskItem<Exception?, Group.ErrorMask<AssociationType.ErrorMask>?>? AssociationTypes;
            public MaskItem<Exception?, Group.ErrorMask<Outfit.ErrorMask>?>? Outfits;
            public MaskItem<Exception?, Group.ErrorMask<ArtObject.ErrorMask>?>? ArtObjects;
            public MaskItem<Exception?, Group.ErrorMask<MaterialObject.ErrorMask>?>? MaterialObjects;
            public MaskItem<Exception?, Group.ErrorMask<MovementType.ErrorMask>?>? MovementTypes;
            public MaskItem<Exception?, Group.ErrorMask<SoundDescriptor.ErrorMask>?>? SoundDescriptors;
            public MaskItem<Exception?, Group.ErrorMask<DualCastData.ErrorMask>?>? DualCastData;
            public MaskItem<Exception?, Group.ErrorMask<SoundCategory.ErrorMask>?>? SoundCategories;
            public MaskItem<Exception?, Group.ErrorMask<SoundOutputModel.ErrorMask>?>? SoundOutputModels;
            public MaskItem<Exception?, Group.ErrorMask<CollisionLayer.ErrorMask>?>? CollisionLayers;
            public MaskItem<Exception?, Group.ErrorMask<ColorRecord.ErrorMask>?>? Colors;
            public MaskItem<Exception?, Group.ErrorMask<ReverbParameters.ErrorMask>?>? ReverbParameters;
            public MaskItem<Exception?, Group.ErrorMask<VolumetricLighting.ErrorMask>?>? VolumetricLightings;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Fallout4Mod_FieldIndex enu = (Fallout4Mod_FieldIndex)index;
                switch (enu)
                {
                    case Fallout4Mod_FieldIndex.ModHeader:
                        return ModHeader;
                    case Fallout4Mod_FieldIndex.GameSettings:
                        return GameSettings;
                    case Fallout4Mod_FieldIndex.Keywords:
                        return Keywords;
                    case Fallout4Mod_FieldIndex.LocationReferenceTypes:
                        return LocationReferenceTypes;
                    case Fallout4Mod_FieldIndex.Actions:
                        return Actions;
                    case Fallout4Mod_FieldIndex.TextureSets:
                        return TextureSets;
                    case Fallout4Mod_FieldIndex.Globals:
                        return Globals;
                    case Fallout4Mod_FieldIndex.Classes:
                        return Classes;
                    case Fallout4Mod_FieldIndex.Factions:
                        return Factions;
                    case Fallout4Mod_FieldIndex.HeadParts:
                        return HeadParts;
                    case Fallout4Mod_FieldIndex.Hairs:
                        return Hairs;
                    case Fallout4Mod_FieldIndex.Eyes:
                        return Eyes;
                    case Fallout4Mod_FieldIndex.Races:
                        return Races;
                    case Fallout4Mod_FieldIndex.SoundMarkers:
                        return SoundMarkers;
                    case Fallout4Mod_FieldIndex.AcousticSpaces:
                        return AcousticSpaces;
                    case Fallout4Mod_FieldIndex.MagicEffects:
                        return MagicEffects;
                    case Fallout4Mod_FieldIndex.LandscapeTextures:
                        return LandscapeTextures;
                    case Fallout4Mod_FieldIndex.ObjectEffects:
                        return ObjectEffects;
                    case Fallout4Mod_FieldIndex.Spells:
                        return Spells;
                    case Fallout4Mod_FieldIndex.Scrolls:
                        return Scrolls;
                    case Fallout4Mod_FieldIndex.Activators:
                        return Activators;
                    case Fallout4Mod_FieldIndex.TalkingActivators:
                        return TalkingActivators;
                    case Fallout4Mod_FieldIndex.Armors:
                        return Armors;
                    case Fallout4Mod_FieldIndex.Books:
                        return Books;
                    case Fallout4Mod_FieldIndex.Containers:
                        return Containers;
                    case Fallout4Mod_FieldIndex.Doors:
                        return Doors;
                    case Fallout4Mod_FieldIndex.Ingredients:
                        return Ingredients;
                    case Fallout4Mod_FieldIndex.Lights:
                        return Lights;
                    case Fallout4Mod_FieldIndex.MiscItems:
                        return MiscItems;
                    case Fallout4Mod_FieldIndex.AlchemicalApparatuses:
                        return AlchemicalApparatuses;
                    case Fallout4Mod_FieldIndex.Statics:
                        return Statics;
                    case Fallout4Mod_FieldIndex.MoveableStatics:
                        return MoveableStatics;
                    case Fallout4Mod_FieldIndex.Grasses:
                        return Grasses;
                    case Fallout4Mod_FieldIndex.Trees:
                        return Trees;
                    case Fallout4Mod_FieldIndex.Florae:
                        return Florae;
                    case Fallout4Mod_FieldIndex.Furniture:
                        return Furniture;
                    case Fallout4Mod_FieldIndex.Weapons:
                        return Weapons;
                    case Fallout4Mod_FieldIndex.Ammunitions:
                        return Ammunitions;
                    case Fallout4Mod_FieldIndex.Npcs:
                        return Npcs;
                    case Fallout4Mod_FieldIndex.LeveledNpcs:
                        return LeveledNpcs;
                    case Fallout4Mod_FieldIndex.Keys:
                        return Keys;
                    case Fallout4Mod_FieldIndex.Ingestibles:
                        return Ingestibles;
                    case Fallout4Mod_FieldIndex.IdleMarkers:
                        return IdleMarkers;
                    case Fallout4Mod_FieldIndex.ConstructibleObjects:
                        return ConstructibleObjects;
                    case Fallout4Mod_FieldIndex.Projectiles:
                        return Projectiles;
                    case Fallout4Mod_FieldIndex.Hazards:
                        return Hazards;
                    case Fallout4Mod_FieldIndex.SoulGems:
                        return SoulGems;
                    case Fallout4Mod_FieldIndex.LeveledItems:
                        return LeveledItems;
                    case Fallout4Mod_FieldIndex.Weathers:
                        return Weathers;
                    case Fallout4Mod_FieldIndex.Climates:
                        return Climates;
                    case Fallout4Mod_FieldIndex.ShaderParticleGeometries:
                        return ShaderParticleGeometries;
                    case Fallout4Mod_FieldIndex.VisualEffects:
                        return VisualEffects;
                    case Fallout4Mod_FieldIndex.Regions:
                        return Regions;
                    case Fallout4Mod_FieldIndex.NavigationMeshInfoMaps:
                        return NavigationMeshInfoMaps;
                    case Fallout4Mod_FieldIndex.Cells:
                        return Cells;
                    case Fallout4Mod_FieldIndex.Worldspaces:
                        return Worldspaces;
                    case Fallout4Mod_FieldIndex.DialogTopics:
                        return DialogTopics;
                    case Fallout4Mod_FieldIndex.Quests:
                        return Quests;
                    case Fallout4Mod_FieldIndex.IdleAnimations:
                        return IdleAnimations;
                    case Fallout4Mod_FieldIndex.Packages:
                        return Packages;
                    case Fallout4Mod_FieldIndex.CombatStyles:
                        return CombatStyles;
                    case Fallout4Mod_FieldIndex.LoadScreens:
                        return LoadScreens;
                    case Fallout4Mod_FieldIndex.LeveledSpells:
                        return LeveledSpells;
                    case Fallout4Mod_FieldIndex.AnimatedObjects:
                        return AnimatedObjects;
                    case Fallout4Mod_FieldIndex.Waters:
                        return Waters;
                    case Fallout4Mod_FieldIndex.EffectShaders:
                        return EffectShaders;
                    case Fallout4Mod_FieldIndex.Explosions:
                        return Explosions;
                    case Fallout4Mod_FieldIndex.Debris:
                        return Debris;
                    case Fallout4Mod_FieldIndex.ImageSpaces:
                        return ImageSpaces;
                    case Fallout4Mod_FieldIndex.ImageSpaceAdapters:
                        return ImageSpaceAdapters;
                    case Fallout4Mod_FieldIndex.FormLists:
                        return FormLists;
                    case Fallout4Mod_FieldIndex.Perks:
                        return Perks;
                    case Fallout4Mod_FieldIndex.BodyParts:
                        return BodyParts;
                    case Fallout4Mod_FieldIndex.AddonNodes:
                        return AddonNodes;
                    case Fallout4Mod_FieldIndex.ActorValueInformation:
                        return ActorValueInformation;
                    case Fallout4Mod_FieldIndex.CameraShots:
                        return CameraShots;
                    case Fallout4Mod_FieldIndex.CameraPaths:
                        return CameraPaths;
                    case Fallout4Mod_FieldIndex.VoiceTypes:
                        return VoiceTypes;
                    case Fallout4Mod_FieldIndex.MaterialTypes:
                        return MaterialTypes;
                    case Fallout4Mod_FieldIndex.Impacts:
                        return Impacts;
                    case Fallout4Mod_FieldIndex.ImpactDataSets:
                        return ImpactDataSets;
                    case Fallout4Mod_FieldIndex.ArmorAddons:
                        return ArmorAddons;
                    case Fallout4Mod_FieldIndex.EncounterZones:
                        return EncounterZones;
                    case Fallout4Mod_FieldIndex.Locations:
                        return Locations;
                    case Fallout4Mod_FieldIndex.Messages:
                        return Messages;
                    case Fallout4Mod_FieldIndex.DefaultObjectManagers:
                        return DefaultObjectManagers;
                    case Fallout4Mod_FieldIndex.LightingTemplates:
                        return LightingTemplates;
                    case Fallout4Mod_FieldIndex.MusicTypes:
                        return MusicTypes;
                    case Fallout4Mod_FieldIndex.Footsteps:
                        return Footsteps;
                    case Fallout4Mod_FieldIndex.FootstepSets:
                        return FootstepSets;
                    case Fallout4Mod_FieldIndex.StoryManagerBranchNodes:
                        return StoryManagerBranchNodes;
                    case Fallout4Mod_FieldIndex.StoryManagerQuestNodes:
                        return StoryManagerQuestNodes;
                    case Fallout4Mod_FieldIndex.StoryManagerEventNodes:
                        return StoryManagerEventNodes;
                    case Fallout4Mod_FieldIndex.DialogBranches:
                        return DialogBranches;
                    case Fallout4Mod_FieldIndex.MusicTracks:
                        return MusicTracks;
                    case Fallout4Mod_FieldIndex.DialogViews:
                        return DialogViews;
                    case Fallout4Mod_FieldIndex.WordsOfPower:
                        return WordsOfPower;
                    case Fallout4Mod_FieldIndex.Shouts:
                        return Shouts;
                    case Fallout4Mod_FieldIndex.EquipTypes:
                        return EquipTypes;
                    case Fallout4Mod_FieldIndex.Relationships:
                        return Relationships;
                    case Fallout4Mod_FieldIndex.Scenes:
                        return Scenes;
                    case Fallout4Mod_FieldIndex.AssociationTypes:
                        return AssociationTypes;
                    case Fallout4Mod_FieldIndex.Outfits:
                        return Outfits;
                    case Fallout4Mod_FieldIndex.ArtObjects:
                        return ArtObjects;
                    case Fallout4Mod_FieldIndex.MaterialObjects:
                        return MaterialObjects;
                    case Fallout4Mod_FieldIndex.MovementTypes:
                        return MovementTypes;
                    case Fallout4Mod_FieldIndex.SoundDescriptors:
                        return SoundDescriptors;
                    case Fallout4Mod_FieldIndex.DualCastData:
                        return DualCastData;
                    case Fallout4Mod_FieldIndex.SoundCategories:
                        return SoundCategories;
                    case Fallout4Mod_FieldIndex.SoundOutputModels:
                        return SoundOutputModels;
                    case Fallout4Mod_FieldIndex.CollisionLayers:
                        return CollisionLayers;
                    case Fallout4Mod_FieldIndex.Colors:
                        return Colors;
                    case Fallout4Mod_FieldIndex.ReverbParameters:
                        return ReverbParameters;
                    case Fallout4Mod_FieldIndex.VolumetricLightings:
                        return VolumetricLightings;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Fallout4Mod_FieldIndex enu = (Fallout4Mod_FieldIndex)index;
                switch (enu)
                {
                    case Fallout4Mod_FieldIndex.ModHeader:
                        this.ModHeader = new MaskItem<Exception?, Fallout4ModHeader.ErrorMask?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.GameSettings:
                        this.GameSettings = new MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, Group.ErrorMask<Keyword.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = new MaskItem<Exception?, Group.ErrorMask<LocationReferenceType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Actions:
                        this.Actions = new MaskItem<Exception?, Group.ErrorMask<ActionRecord.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.TextureSets:
                        this.TextureSets = new MaskItem<Exception?, Group.ErrorMask<TextureSet.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Globals:
                        this.Globals = new MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Classes:
                        this.Classes = new MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, Group.ErrorMask<HeadPart.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, Group.ErrorMask<Eyes.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Races:
                        this.Races = new MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = new MaskItem<Exception?, Group.ErrorMask<SoundMarker.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = new MaskItem<Exception?, Group.ErrorMask<AcousticSpace.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MagicEffects:
                        this.MagicEffects = new MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = new MaskItem<Exception?, Group.ErrorMask<LandscapeTexture.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = new MaskItem<Exception?, Group.ErrorMask<ObjectEffect.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, Group.ErrorMask<Spell.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Scrolls:
                        this.Scrolls = new MaskItem<Exception?, Group.ErrorMask<Scroll.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Activators:
                        this.Activators = new MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.TalkingActivators:
                        this.TalkingActivators = new MaskItem<Exception?, Group.ErrorMask<TalkingActivator.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Armors:
                        this.Armors = new MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Books:
                        this.Books = new MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Containers:
                        this.Containers = new MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Doors:
                        this.Doors = new MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Ingredients:
                        this.Ingredients = new MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Lights:
                        this.Lights = new MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MiscItems:
                        this.MiscItems = new MaskItem<Exception?, Group.ErrorMask<MiscItem.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AlchemicalApparatuses:
                        this.AlchemicalApparatuses = new MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Statics:
                        this.Statics = new MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MoveableStatics:
                        this.MoveableStatics = new MaskItem<Exception?, Group.ErrorMask<MoveableStatic.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Trees:
                        this.Trees = new MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Florae:
                        this.Florae = new MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Furniture:
                        this.Furniture = new MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Weapons:
                        this.Weapons = new MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Ammunitions:
                        this.Ammunitions = new MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Npcs:
                        this.Npcs = new MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = new MaskItem<Exception?, Group.ErrorMask<LeveledNpc.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Keys:
                        this.Keys = new MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Ingestibles:
                        this.Ingestibles = new MaskItem<Exception?, Group.ErrorMask<Ingestible.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = new MaskItem<Exception?, Group.ErrorMask<IdleMarker.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = new MaskItem<Exception?, Group.ErrorMask<ConstructibleObject.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Projectiles:
                        this.Projectiles = new MaskItem<Exception?, Group.ErrorMask<Projectile.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Hazards:
                        this.Hazards = new MaskItem<Exception?, Group.ErrorMask<Hazard.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.SoulGems:
                        this.SoulGems = new MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LeveledItems:
                        this.LeveledItems = new MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Weathers:
                        this.Weathers = new MaskItem<Exception?, Group.ErrorMask<Weather.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Climates:
                        this.Climates = new MaskItem<Exception?, Group.ErrorMask<Climate.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ShaderParticleGeometries:
                        this.ShaderParticleGeometries = new MaskItem<Exception?, Group.ErrorMask<ShaderParticleGeometry.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.VisualEffects:
                        this.VisualEffects = new MaskItem<Exception?, Group.ErrorMask<VisualEffect.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Regions:
                        this.Regions = new MaskItem<Exception?, Group.ErrorMask<Region.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.NavigationMeshInfoMaps:
                        this.NavigationMeshInfoMaps = new MaskItem<Exception?, Group.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Cells:
                        this.Cells = new MaskItem<Exception?, ListGroup.ErrorMask<CellBlock.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Worldspaces:
                        this.Worldspaces = new MaskItem<Exception?, Group.ErrorMask<Worldspace.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.DialogTopics:
                        this.DialogTopics = new MaskItem<Exception?, Group.ErrorMask<DialogTopic.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Quests:
                        this.Quests = new MaskItem<Exception?, Group.ErrorMask<Quest.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = new MaskItem<Exception?, Group.ErrorMask<IdleAnimation.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Packages:
                        this.Packages = new MaskItem<Exception?, Group.ErrorMask<Package.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.CombatStyles:
                        this.CombatStyles = new MaskItem<Exception?, Group.ErrorMask<CombatStyle.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LoadScreens:
                        this.LoadScreens = new MaskItem<Exception?, Group.ErrorMask<LoadScreen.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LeveledSpells:
                        this.LeveledSpells = new MaskItem<Exception?, Group.ErrorMask<LeveledSpell.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = new MaskItem<Exception?, Group.ErrorMask<AnimatedObject.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Waters:
                        this.Waters = new MaskItem<Exception?, Group.ErrorMask<Water.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.EffectShaders:
                        this.EffectShaders = new MaskItem<Exception?, Group.ErrorMask<EffectShader.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Explosions:
                        this.Explosions = new MaskItem<Exception?, Group.ErrorMask<Explosion.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Debris:
                        this.Debris = new MaskItem<Exception?, Group.ErrorMask<Debris.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ImageSpaces:
                        this.ImageSpaces = new MaskItem<Exception?, Group.ErrorMask<ImageSpace.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ImageSpaceAdapters:
                        this.ImageSpaceAdapters = new MaskItem<Exception?, Group.ErrorMask<ImageSpaceAdapter.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.FormLists:
                        this.FormLists = new MaskItem<Exception?, Group.ErrorMask<FormList.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Perks:
                        this.Perks = new MaskItem<Exception?, Group.ErrorMask<Perk.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.BodyParts:
                        this.BodyParts = new MaskItem<Exception?, Group.ErrorMask<BodyPartData.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AddonNodes:
                        this.AddonNodes = new MaskItem<Exception?, Group.ErrorMask<AddonNode.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ActorValueInformation:
                        this.ActorValueInformation = new MaskItem<Exception?, Group.ErrorMask<ActorValueInformation.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.CameraShots:
                        this.CameraShots = new MaskItem<Exception?, Group.ErrorMask<CameraShot.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.CameraPaths:
                        this.CameraPaths = new MaskItem<Exception?, Group.ErrorMask<CameraPath.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.VoiceTypes:
                        this.VoiceTypes = new MaskItem<Exception?, Group.ErrorMask<VoiceType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MaterialTypes:
                        this.MaterialTypes = new MaskItem<Exception?, Group.ErrorMask<MaterialType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Impacts:
                        this.Impacts = new MaskItem<Exception?, Group.ErrorMask<Impact.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ImpactDataSets:
                        this.ImpactDataSets = new MaskItem<Exception?, Group.ErrorMask<ImpactDataSet.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ArmorAddons:
                        this.ArmorAddons = new MaskItem<Exception?, Group.ErrorMask<ArmorAddon.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.EncounterZones:
                        this.EncounterZones = new MaskItem<Exception?, Group.ErrorMask<EncounterZone.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Locations:
                        this.Locations = new MaskItem<Exception?, Group.ErrorMask<Location.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Messages:
                        this.Messages = new MaskItem<Exception?, Group.ErrorMask<Message.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.DefaultObjectManagers:
                        this.DefaultObjectManagers = new MaskItem<Exception?, Group.ErrorMask<DefaultObjectManager.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LightingTemplates:
                        this.LightingTemplates = new MaskItem<Exception?, Group.ErrorMask<LightingTemplate.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MusicTypes:
                        this.MusicTypes = new MaskItem<Exception?, Group.ErrorMask<MusicType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Footsteps:
                        this.Footsteps = new MaskItem<Exception?, Group.ErrorMask<Footstep.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.FootstepSets:
                        this.FootstepSets = new MaskItem<Exception?, Group.ErrorMask<FootstepSet.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerBranchNodes:
                        this.StoryManagerBranchNodes = new MaskItem<Exception?, Group.ErrorMask<StoryManagerBranchNode.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerQuestNodes:
                        this.StoryManagerQuestNodes = new MaskItem<Exception?, Group.ErrorMask<StoryManagerQuestNode.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerEventNodes:
                        this.StoryManagerEventNodes = new MaskItem<Exception?, Group.ErrorMask<StoryManagerEventNode.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.DialogBranches:
                        this.DialogBranches = new MaskItem<Exception?, Group.ErrorMask<DialogBranch.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MusicTracks:
                        this.MusicTracks = new MaskItem<Exception?, Group.ErrorMask<MusicTrack.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.DialogViews:
                        this.DialogViews = new MaskItem<Exception?, Group.ErrorMask<DialogView.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.WordsOfPower:
                        this.WordsOfPower = new MaskItem<Exception?, Group.ErrorMask<WordOfPower.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Shouts:
                        this.Shouts = new MaskItem<Exception?, Group.ErrorMask<Shout.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.EquipTypes:
                        this.EquipTypes = new MaskItem<Exception?, Group.ErrorMask<EquipType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Relationships:
                        this.Relationships = new MaskItem<Exception?, Group.ErrorMask<Relationship.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Scenes:
                        this.Scenes = new MaskItem<Exception?, Group.ErrorMask<Scene.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AssociationTypes:
                        this.AssociationTypes = new MaskItem<Exception?, Group.ErrorMask<AssociationType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Outfits:
                        this.Outfits = new MaskItem<Exception?, Group.ErrorMask<Outfit.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ArtObjects:
                        this.ArtObjects = new MaskItem<Exception?, Group.ErrorMask<ArtObject.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MaterialObjects:
                        this.MaterialObjects = new MaskItem<Exception?, Group.ErrorMask<MaterialObject.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MovementTypes:
                        this.MovementTypes = new MaskItem<Exception?, Group.ErrorMask<MovementType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.SoundDescriptors:
                        this.SoundDescriptors = new MaskItem<Exception?, Group.ErrorMask<SoundDescriptor.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.DualCastData:
                        this.DualCastData = new MaskItem<Exception?, Group.ErrorMask<DualCastData.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.SoundCategories:
                        this.SoundCategories = new MaskItem<Exception?, Group.ErrorMask<SoundCategory.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.SoundOutputModels:
                        this.SoundOutputModels = new MaskItem<Exception?, Group.ErrorMask<SoundOutputModel.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.CollisionLayers:
                        this.CollisionLayers = new MaskItem<Exception?, Group.ErrorMask<CollisionLayer.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Colors:
                        this.Colors = new MaskItem<Exception?, Group.ErrorMask<ColorRecord.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ReverbParameters:
                        this.ReverbParameters = new MaskItem<Exception?, Group.ErrorMask<ReverbParameters.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.VolumetricLightings:
                        this.VolumetricLightings = new MaskItem<Exception?, Group.ErrorMask<VolumetricLighting.ErrorMask>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Fallout4Mod_FieldIndex enu = (Fallout4Mod_FieldIndex)index;
                switch (enu)
                {
                    case Fallout4Mod_FieldIndex.ModHeader:
                        this.ModHeader = (MaskItem<Exception?, Fallout4ModHeader.ErrorMask?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.GameSettings:
                        this.GameSettings = (MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, Group.ErrorMask<Keyword.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = (MaskItem<Exception?, Group.ErrorMask<LocationReferenceType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Actions:
                        this.Actions = (MaskItem<Exception?, Group.ErrorMask<ActionRecord.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.TextureSets:
                        this.TextureSets = (MaskItem<Exception?, Group.ErrorMask<TextureSet.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Globals:
                        this.Globals = (MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Classes:
                        this.Classes = (MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, Group.ErrorMask<HeadPart.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, Group.ErrorMask<Eyes.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Races:
                        this.Races = (MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = (MaskItem<Exception?, Group.ErrorMask<SoundMarker.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = (MaskItem<Exception?, Group.ErrorMask<AcousticSpace.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MagicEffects:
                        this.MagicEffects = (MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = (MaskItem<Exception?, Group.ErrorMask<LandscapeTexture.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = (MaskItem<Exception?, Group.ErrorMask<ObjectEffect.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, Group.ErrorMask<Spell.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Scrolls:
                        this.Scrolls = (MaskItem<Exception?, Group.ErrorMask<Scroll.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Activators:
                        this.Activators = (MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.TalkingActivators:
                        this.TalkingActivators = (MaskItem<Exception?, Group.ErrorMask<TalkingActivator.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Armors:
                        this.Armors = (MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Books:
                        this.Books = (MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Containers:
                        this.Containers = (MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Doors:
                        this.Doors = (MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Ingredients:
                        this.Ingredients = (MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Lights:
                        this.Lights = (MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MiscItems:
                        this.MiscItems = (MaskItem<Exception?, Group.ErrorMask<MiscItem.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AlchemicalApparatuses:
                        this.AlchemicalApparatuses = (MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Statics:
                        this.Statics = (MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MoveableStatics:
                        this.MoveableStatics = (MaskItem<Exception?, Group.ErrorMask<MoveableStatic.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Trees:
                        this.Trees = (MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Florae:
                        this.Florae = (MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Furniture:
                        this.Furniture = (MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Weapons:
                        this.Weapons = (MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Ammunitions:
                        this.Ammunitions = (MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Npcs:
                        this.Npcs = (MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = (MaskItem<Exception?, Group.ErrorMask<LeveledNpc.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Keys:
                        this.Keys = (MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Ingestibles:
                        this.Ingestibles = (MaskItem<Exception?, Group.ErrorMask<Ingestible.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = (MaskItem<Exception?, Group.ErrorMask<IdleMarker.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = (MaskItem<Exception?, Group.ErrorMask<ConstructibleObject.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Projectiles:
                        this.Projectiles = (MaskItem<Exception?, Group.ErrorMask<Projectile.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Hazards:
                        this.Hazards = (MaskItem<Exception?, Group.ErrorMask<Hazard.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.SoulGems:
                        this.SoulGems = (MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LeveledItems:
                        this.LeveledItems = (MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Weathers:
                        this.Weathers = (MaskItem<Exception?, Group.ErrorMask<Weather.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Climates:
                        this.Climates = (MaskItem<Exception?, Group.ErrorMask<Climate.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ShaderParticleGeometries:
                        this.ShaderParticleGeometries = (MaskItem<Exception?, Group.ErrorMask<ShaderParticleGeometry.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.VisualEffects:
                        this.VisualEffects = (MaskItem<Exception?, Group.ErrorMask<VisualEffect.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Regions:
                        this.Regions = (MaskItem<Exception?, Group.ErrorMask<Region.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.NavigationMeshInfoMaps:
                        this.NavigationMeshInfoMaps = (MaskItem<Exception?, Group.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Cells:
                        this.Cells = (MaskItem<Exception?, ListGroup.ErrorMask<CellBlock.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Worldspaces:
                        this.Worldspaces = (MaskItem<Exception?, Group.ErrorMask<Worldspace.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.DialogTopics:
                        this.DialogTopics = (MaskItem<Exception?, Group.ErrorMask<DialogTopic.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Quests:
                        this.Quests = (MaskItem<Exception?, Group.ErrorMask<Quest.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = (MaskItem<Exception?, Group.ErrorMask<IdleAnimation.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Packages:
                        this.Packages = (MaskItem<Exception?, Group.ErrorMask<Package.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.CombatStyles:
                        this.CombatStyles = (MaskItem<Exception?, Group.ErrorMask<CombatStyle.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LoadScreens:
                        this.LoadScreens = (MaskItem<Exception?, Group.ErrorMask<LoadScreen.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LeveledSpells:
                        this.LeveledSpells = (MaskItem<Exception?, Group.ErrorMask<LeveledSpell.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = (MaskItem<Exception?, Group.ErrorMask<AnimatedObject.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Waters:
                        this.Waters = (MaskItem<Exception?, Group.ErrorMask<Water.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.EffectShaders:
                        this.EffectShaders = (MaskItem<Exception?, Group.ErrorMask<EffectShader.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Explosions:
                        this.Explosions = (MaskItem<Exception?, Group.ErrorMask<Explosion.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Debris:
                        this.Debris = (MaskItem<Exception?, Group.ErrorMask<Debris.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ImageSpaces:
                        this.ImageSpaces = (MaskItem<Exception?, Group.ErrorMask<ImageSpace.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ImageSpaceAdapters:
                        this.ImageSpaceAdapters = (MaskItem<Exception?, Group.ErrorMask<ImageSpaceAdapter.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.FormLists:
                        this.FormLists = (MaskItem<Exception?, Group.ErrorMask<FormList.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Perks:
                        this.Perks = (MaskItem<Exception?, Group.ErrorMask<Perk.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.BodyParts:
                        this.BodyParts = (MaskItem<Exception?, Group.ErrorMask<BodyPartData.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AddonNodes:
                        this.AddonNodes = (MaskItem<Exception?, Group.ErrorMask<AddonNode.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ActorValueInformation:
                        this.ActorValueInformation = (MaskItem<Exception?, Group.ErrorMask<ActorValueInformation.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.CameraShots:
                        this.CameraShots = (MaskItem<Exception?, Group.ErrorMask<CameraShot.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.CameraPaths:
                        this.CameraPaths = (MaskItem<Exception?, Group.ErrorMask<CameraPath.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.VoiceTypes:
                        this.VoiceTypes = (MaskItem<Exception?, Group.ErrorMask<VoiceType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MaterialTypes:
                        this.MaterialTypes = (MaskItem<Exception?, Group.ErrorMask<MaterialType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Impacts:
                        this.Impacts = (MaskItem<Exception?, Group.ErrorMask<Impact.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ImpactDataSets:
                        this.ImpactDataSets = (MaskItem<Exception?, Group.ErrorMask<ImpactDataSet.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ArmorAddons:
                        this.ArmorAddons = (MaskItem<Exception?, Group.ErrorMask<ArmorAddon.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.EncounterZones:
                        this.EncounterZones = (MaskItem<Exception?, Group.ErrorMask<EncounterZone.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Locations:
                        this.Locations = (MaskItem<Exception?, Group.ErrorMask<Location.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Messages:
                        this.Messages = (MaskItem<Exception?, Group.ErrorMask<Message.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.DefaultObjectManagers:
                        this.DefaultObjectManagers = (MaskItem<Exception?, Group.ErrorMask<DefaultObjectManager.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LightingTemplates:
                        this.LightingTemplates = (MaskItem<Exception?, Group.ErrorMask<LightingTemplate.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MusicTypes:
                        this.MusicTypes = (MaskItem<Exception?, Group.ErrorMask<MusicType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Footsteps:
                        this.Footsteps = (MaskItem<Exception?, Group.ErrorMask<Footstep.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.FootstepSets:
                        this.FootstepSets = (MaskItem<Exception?, Group.ErrorMask<FootstepSet.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerBranchNodes:
                        this.StoryManagerBranchNodes = (MaskItem<Exception?, Group.ErrorMask<StoryManagerBranchNode.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerQuestNodes:
                        this.StoryManagerQuestNodes = (MaskItem<Exception?, Group.ErrorMask<StoryManagerQuestNode.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerEventNodes:
                        this.StoryManagerEventNodes = (MaskItem<Exception?, Group.ErrorMask<StoryManagerEventNode.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.DialogBranches:
                        this.DialogBranches = (MaskItem<Exception?, Group.ErrorMask<DialogBranch.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MusicTracks:
                        this.MusicTracks = (MaskItem<Exception?, Group.ErrorMask<MusicTrack.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.DialogViews:
                        this.DialogViews = (MaskItem<Exception?, Group.ErrorMask<DialogView.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.WordsOfPower:
                        this.WordsOfPower = (MaskItem<Exception?, Group.ErrorMask<WordOfPower.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Shouts:
                        this.Shouts = (MaskItem<Exception?, Group.ErrorMask<Shout.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.EquipTypes:
                        this.EquipTypes = (MaskItem<Exception?, Group.ErrorMask<EquipType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Relationships:
                        this.Relationships = (MaskItem<Exception?, Group.ErrorMask<Relationship.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Scenes:
                        this.Scenes = (MaskItem<Exception?, Group.ErrorMask<Scene.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AssociationTypes:
                        this.AssociationTypes = (MaskItem<Exception?, Group.ErrorMask<AssociationType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Outfits:
                        this.Outfits = (MaskItem<Exception?, Group.ErrorMask<Outfit.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ArtObjects:
                        this.ArtObjects = (MaskItem<Exception?, Group.ErrorMask<ArtObject.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MaterialObjects:
                        this.MaterialObjects = (MaskItem<Exception?, Group.ErrorMask<MaterialObject.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MovementTypes:
                        this.MovementTypes = (MaskItem<Exception?, Group.ErrorMask<MovementType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.SoundDescriptors:
                        this.SoundDescriptors = (MaskItem<Exception?, Group.ErrorMask<SoundDescriptor.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.DualCastData:
                        this.DualCastData = (MaskItem<Exception?, Group.ErrorMask<DualCastData.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.SoundCategories:
                        this.SoundCategories = (MaskItem<Exception?, Group.ErrorMask<SoundCategory.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.SoundOutputModels:
                        this.SoundOutputModels = (MaskItem<Exception?, Group.ErrorMask<SoundOutputModel.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.CollisionLayers:
                        this.CollisionLayers = (MaskItem<Exception?, Group.ErrorMask<CollisionLayer.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Colors:
                        this.Colors = (MaskItem<Exception?, Group.ErrorMask<ColorRecord.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ReverbParameters:
                        this.ReverbParameters = (MaskItem<Exception?, Group.ErrorMask<ReverbParameters.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.VolumetricLightings:
                        this.VolumetricLightings = (MaskItem<Exception?, Group.ErrorMask<VolumetricLighting.ErrorMask>?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModHeader != null) return true;
                if (GameSettings != null) return true;
                if (Keywords != null) return true;
                if (LocationReferenceTypes != null) return true;
                if (Actions != null) return true;
                if (TextureSets != null) return true;
                if (Globals != null) return true;
                if (Classes != null) return true;
                if (Factions != null) return true;
                if (HeadParts != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (Races != null) return true;
                if (SoundMarkers != null) return true;
                if (AcousticSpaces != null) return true;
                if (MagicEffects != null) return true;
                if (LandscapeTextures != null) return true;
                if (ObjectEffects != null) return true;
                if (Spells != null) return true;
                if (Scrolls != null) return true;
                if (Activators != null) return true;
                if (TalkingActivators != null) return true;
                if (Armors != null) return true;
                if (Books != null) return true;
                if (Containers != null) return true;
                if (Doors != null) return true;
                if (Ingredients != null) return true;
                if (Lights != null) return true;
                if (MiscItems != null) return true;
                if (AlchemicalApparatuses != null) return true;
                if (Statics != null) return true;
                if (MoveableStatics != null) return true;
                if (Grasses != null) return true;
                if (Trees != null) return true;
                if (Florae != null) return true;
                if (Furniture != null) return true;
                if (Weapons != null) return true;
                if (Ammunitions != null) return true;
                if (Npcs != null) return true;
                if (LeveledNpcs != null) return true;
                if (Keys != null) return true;
                if (Ingestibles != null) return true;
                if (IdleMarkers != null) return true;
                if (ConstructibleObjects != null) return true;
                if (Projectiles != null) return true;
                if (Hazards != null) return true;
                if (SoulGems != null) return true;
                if (LeveledItems != null) return true;
                if (Weathers != null) return true;
                if (Climates != null) return true;
                if (ShaderParticleGeometries != null) return true;
                if (VisualEffects != null) return true;
                if (Regions != null) return true;
                if (NavigationMeshInfoMaps != null) return true;
                if (Cells != null) return true;
                if (Worldspaces != null) return true;
                if (DialogTopics != null) return true;
                if (Quests != null) return true;
                if (IdleAnimations != null) return true;
                if (Packages != null) return true;
                if (CombatStyles != null) return true;
                if (LoadScreens != null) return true;
                if (LeveledSpells != null) return true;
                if (AnimatedObjects != null) return true;
                if (Waters != null) return true;
                if (EffectShaders != null) return true;
                if (Explosions != null) return true;
                if (Debris != null) return true;
                if (ImageSpaces != null) return true;
                if (ImageSpaceAdapters != null) return true;
                if (FormLists != null) return true;
                if (Perks != null) return true;
                if (BodyParts != null) return true;
                if (AddonNodes != null) return true;
                if (ActorValueInformation != null) return true;
                if (CameraShots != null) return true;
                if (CameraPaths != null) return true;
                if (VoiceTypes != null) return true;
                if (MaterialTypes != null) return true;
                if (Impacts != null) return true;
                if (ImpactDataSets != null) return true;
                if (ArmorAddons != null) return true;
                if (EncounterZones != null) return true;
                if (Locations != null) return true;
                if (Messages != null) return true;
                if (DefaultObjectManagers != null) return true;
                if (LightingTemplates != null) return true;
                if (MusicTypes != null) return true;
                if (Footsteps != null) return true;
                if (FootstepSets != null) return true;
                if (StoryManagerBranchNodes != null) return true;
                if (StoryManagerQuestNodes != null) return true;
                if (StoryManagerEventNodes != null) return true;
                if (DialogBranches != null) return true;
                if (MusicTracks != null) return true;
                if (DialogViews != null) return true;
                if (WordsOfPower != null) return true;
                if (Shouts != null) return true;
                if (EquipTypes != null) return true;
                if (Relationships != null) return true;
                if (Scenes != null) return true;
                if (AssociationTypes != null) return true;
                if (Outfits != null) return true;
                if (ArtObjects != null) return true;
                if (MaterialObjects != null) return true;
                if (MovementTypes != null) return true;
                if (SoundDescriptors != null) return true;
                if (DualCastData != null) return true;
                if (SoundCategories != null) return true;
                if (SoundOutputModels != null) return true;
                if (CollisionLayers != null) return true;
                if (Colors != null) return true;
                if (ReverbParameters != null) return true;
                if (VolumetricLightings != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                ModHeader?.ToString(fg);
                GameSettings?.ToString(fg);
                Keywords?.ToString(fg);
                LocationReferenceTypes?.ToString(fg);
                Actions?.ToString(fg);
                TextureSets?.ToString(fg);
                Globals?.ToString(fg);
                Classes?.ToString(fg);
                Factions?.ToString(fg);
                HeadParts?.ToString(fg);
                Hairs?.ToString(fg);
                Eyes?.ToString(fg);
                Races?.ToString(fg);
                SoundMarkers?.ToString(fg);
                AcousticSpaces?.ToString(fg);
                MagicEffects?.ToString(fg);
                LandscapeTextures?.ToString(fg);
                ObjectEffects?.ToString(fg);
                Spells?.ToString(fg);
                Scrolls?.ToString(fg);
                Activators?.ToString(fg);
                TalkingActivators?.ToString(fg);
                Armors?.ToString(fg);
                Books?.ToString(fg);
                Containers?.ToString(fg);
                Doors?.ToString(fg);
                Ingredients?.ToString(fg);
                Lights?.ToString(fg);
                MiscItems?.ToString(fg);
                AlchemicalApparatuses?.ToString(fg);
                Statics?.ToString(fg);
                MoveableStatics?.ToString(fg);
                Grasses?.ToString(fg);
                Trees?.ToString(fg);
                Florae?.ToString(fg);
                Furniture?.ToString(fg);
                Weapons?.ToString(fg);
                Ammunitions?.ToString(fg);
                Npcs?.ToString(fg);
                LeveledNpcs?.ToString(fg);
                Keys?.ToString(fg);
                Ingestibles?.ToString(fg);
                IdleMarkers?.ToString(fg);
                ConstructibleObjects?.ToString(fg);
                Projectiles?.ToString(fg);
                Hazards?.ToString(fg);
                SoulGems?.ToString(fg);
                LeveledItems?.ToString(fg);
                Weathers?.ToString(fg);
                Climates?.ToString(fg);
                ShaderParticleGeometries?.ToString(fg);
                VisualEffects?.ToString(fg);
                Regions?.ToString(fg);
                NavigationMeshInfoMaps?.ToString(fg);
                Cells?.ToString(fg);
                Worldspaces?.ToString(fg);
                DialogTopics?.ToString(fg);
                Quests?.ToString(fg);
                IdleAnimations?.ToString(fg);
                Packages?.ToString(fg);
                CombatStyles?.ToString(fg);
                LoadScreens?.ToString(fg);
                LeveledSpells?.ToString(fg);
                AnimatedObjects?.ToString(fg);
                Waters?.ToString(fg);
                EffectShaders?.ToString(fg);
                Explosions?.ToString(fg);
                Debris?.ToString(fg);
                ImageSpaces?.ToString(fg);
                ImageSpaceAdapters?.ToString(fg);
                FormLists?.ToString(fg);
                Perks?.ToString(fg);
                BodyParts?.ToString(fg);
                AddonNodes?.ToString(fg);
                ActorValueInformation?.ToString(fg);
                CameraShots?.ToString(fg);
                CameraPaths?.ToString(fg);
                VoiceTypes?.ToString(fg);
                MaterialTypes?.ToString(fg);
                Impacts?.ToString(fg);
                ImpactDataSets?.ToString(fg);
                ArmorAddons?.ToString(fg);
                EncounterZones?.ToString(fg);
                Locations?.ToString(fg);
                Messages?.ToString(fg);
                DefaultObjectManagers?.ToString(fg);
                LightingTemplates?.ToString(fg);
                MusicTypes?.ToString(fg);
                Footsteps?.ToString(fg);
                FootstepSets?.ToString(fg);
                StoryManagerBranchNodes?.ToString(fg);
                StoryManagerQuestNodes?.ToString(fg);
                StoryManagerEventNodes?.ToString(fg);
                DialogBranches?.ToString(fg);
                MusicTracks?.ToString(fg);
                DialogViews?.ToString(fg);
                WordsOfPower?.ToString(fg);
                Shouts?.ToString(fg);
                EquipTypes?.ToString(fg);
                Relationships?.ToString(fg);
                Scenes?.ToString(fg);
                AssociationTypes?.ToString(fg);
                Outfits?.ToString(fg);
                ArtObjects?.ToString(fg);
                MaterialObjects?.ToString(fg);
                MovementTypes?.ToString(fg);
                SoundDescriptors?.ToString(fg);
                DualCastData?.ToString(fg);
                SoundCategories?.ToString(fg);
                SoundOutputModels?.ToString(fg);
                CollisionLayers?.ToString(fg);
                Colors?.ToString(fg);
                ReverbParameters?.ToString(fg);
                VolumetricLightings?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModHeader = this.ModHeader.Combine(rhs.ModHeader, (l, r) => l.Combine(r));
                ret.GameSettings = this.GameSettings.Combine(rhs.GameSettings, (l, r) => l.Combine(r));
                ret.Keywords = this.Keywords.Combine(rhs.Keywords, (l, r) => l.Combine(r));
                ret.LocationReferenceTypes = this.LocationReferenceTypes.Combine(rhs.LocationReferenceTypes, (l, r) => l.Combine(r));
                ret.Actions = this.Actions.Combine(rhs.Actions, (l, r) => l.Combine(r));
                ret.TextureSets = this.TextureSets.Combine(rhs.TextureSets, (l, r) => l.Combine(r));
                ret.Globals = this.Globals.Combine(rhs.Globals, (l, r) => l.Combine(r));
                ret.Classes = this.Classes.Combine(rhs.Classes, (l, r) => l.Combine(r));
                ret.Factions = this.Factions.Combine(rhs.Factions, (l, r) => l.Combine(r));
                ret.HeadParts = this.HeadParts.Combine(rhs.HeadParts, (l, r) => l.Combine(r));
                ret.Hairs = this.Hairs.Combine(rhs.Hairs, (l, r) => l.Combine(r));
                ret.Eyes = this.Eyes.Combine(rhs.Eyes, (l, r) => l.Combine(r));
                ret.Races = this.Races.Combine(rhs.Races, (l, r) => l.Combine(r));
                ret.SoundMarkers = this.SoundMarkers.Combine(rhs.SoundMarkers, (l, r) => l.Combine(r));
                ret.AcousticSpaces = this.AcousticSpaces.Combine(rhs.AcousticSpaces, (l, r) => l.Combine(r));
                ret.MagicEffects = this.MagicEffects.Combine(rhs.MagicEffects, (l, r) => l.Combine(r));
                ret.LandscapeTextures = this.LandscapeTextures.Combine(rhs.LandscapeTextures, (l, r) => l.Combine(r));
                ret.ObjectEffects = this.ObjectEffects.Combine(rhs.ObjectEffects, (l, r) => l.Combine(r));
                ret.Spells = this.Spells.Combine(rhs.Spells, (l, r) => l.Combine(r));
                ret.Scrolls = this.Scrolls.Combine(rhs.Scrolls, (l, r) => l.Combine(r));
                ret.Activators = this.Activators.Combine(rhs.Activators, (l, r) => l.Combine(r));
                ret.TalkingActivators = this.TalkingActivators.Combine(rhs.TalkingActivators, (l, r) => l.Combine(r));
                ret.Armors = this.Armors.Combine(rhs.Armors, (l, r) => l.Combine(r));
                ret.Books = this.Books.Combine(rhs.Books, (l, r) => l.Combine(r));
                ret.Containers = this.Containers.Combine(rhs.Containers, (l, r) => l.Combine(r));
                ret.Doors = this.Doors.Combine(rhs.Doors, (l, r) => l.Combine(r));
                ret.Ingredients = this.Ingredients.Combine(rhs.Ingredients, (l, r) => l.Combine(r));
                ret.Lights = this.Lights.Combine(rhs.Lights, (l, r) => l.Combine(r));
                ret.MiscItems = this.MiscItems.Combine(rhs.MiscItems, (l, r) => l.Combine(r));
                ret.AlchemicalApparatuses = this.AlchemicalApparatuses.Combine(rhs.AlchemicalApparatuses, (l, r) => l.Combine(r));
                ret.Statics = this.Statics.Combine(rhs.Statics, (l, r) => l.Combine(r));
                ret.MoveableStatics = this.MoveableStatics.Combine(rhs.MoveableStatics, (l, r) => l.Combine(r));
                ret.Grasses = this.Grasses.Combine(rhs.Grasses, (l, r) => l.Combine(r));
                ret.Trees = this.Trees.Combine(rhs.Trees, (l, r) => l.Combine(r));
                ret.Florae = this.Florae.Combine(rhs.Florae, (l, r) => l.Combine(r));
                ret.Furniture = this.Furniture.Combine(rhs.Furniture, (l, r) => l.Combine(r));
                ret.Weapons = this.Weapons.Combine(rhs.Weapons, (l, r) => l.Combine(r));
                ret.Ammunitions = this.Ammunitions.Combine(rhs.Ammunitions, (l, r) => l.Combine(r));
                ret.Npcs = this.Npcs.Combine(rhs.Npcs, (l, r) => l.Combine(r));
                ret.LeveledNpcs = this.LeveledNpcs.Combine(rhs.LeveledNpcs, (l, r) => l.Combine(r));
                ret.Keys = this.Keys.Combine(rhs.Keys, (l, r) => l.Combine(r));
                ret.Ingestibles = this.Ingestibles.Combine(rhs.Ingestibles, (l, r) => l.Combine(r));
                ret.IdleMarkers = this.IdleMarkers.Combine(rhs.IdleMarkers, (l, r) => l.Combine(r));
                ret.ConstructibleObjects = this.ConstructibleObjects.Combine(rhs.ConstructibleObjects, (l, r) => l.Combine(r));
                ret.Projectiles = this.Projectiles.Combine(rhs.Projectiles, (l, r) => l.Combine(r));
                ret.Hazards = this.Hazards.Combine(rhs.Hazards, (l, r) => l.Combine(r));
                ret.SoulGems = this.SoulGems.Combine(rhs.SoulGems, (l, r) => l.Combine(r));
                ret.LeveledItems = this.LeveledItems.Combine(rhs.LeveledItems, (l, r) => l.Combine(r));
                ret.Weathers = this.Weathers.Combine(rhs.Weathers, (l, r) => l.Combine(r));
                ret.Climates = this.Climates.Combine(rhs.Climates, (l, r) => l.Combine(r));
                ret.ShaderParticleGeometries = this.ShaderParticleGeometries.Combine(rhs.ShaderParticleGeometries, (l, r) => l.Combine(r));
                ret.VisualEffects = this.VisualEffects.Combine(rhs.VisualEffects, (l, r) => l.Combine(r));
                ret.Regions = this.Regions.Combine(rhs.Regions, (l, r) => l.Combine(r));
                ret.NavigationMeshInfoMaps = this.NavigationMeshInfoMaps.Combine(rhs.NavigationMeshInfoMaps, (l, r) => l.Combine(r));
                ret.Cells = this.Cells.Combine(rhs.Cells, (l, r) => l.Combine(r));
                ret.Worldspaces = this.Worldspaces.Combine(rhs.Worldspaces, (l, r) => l.Combine(r));
                ret.DialogTopics = this.DialogTopics.Combine(rhs.DialogTopics, (l, r) => l.Combine(r));
                ret.Quests = this.Quests.Combine(rhs.Quests, (l, r) => l.Combine(r));
                ret.IdleAnimations = this.IdleAnimations.Combine(rhs.IdleAnimations, (l, r) => l.Combine(r));
                ret.Packages = this.Packages.Combine(rhs.Packages, (l, r) => l.Combine(r));
                ret.CombatStyles = this.CombatStyles.Combine(rhs.CombatStyles, (l, r) => l.Combine(r));
                ret.LoadScreens = this.LoadScreens.Combine(rhs.LoadScreens, (l, r) => l.Combine(r));
                ret.LeveledSpells = this.LeveledSpells.Combine(rhs.LeveledSpells, (l, r) => l.Combine(r));
                ret.AnimatedObjects = this.AnimatedObjects.Combine(rhs.AnimatedObjects, (l, r) => l.Combine(r));
                ret.Waters = this.Waters.Combine(rhs.Waters, (l, r) => l.Combine(r));
                ret.EffectShaders = this.EffectShaders.Combine(rhs.EffectShaders, (l, r) => l.Combine(r));
                ret.Explosions = this.Explosions.Combine(rhs.Explosions, (l, r) => l.Combine(r));
                ret.Debris = this.Debris.Combine(rhs.Debris, (l, r) => l.Combine(r));
                ret.ImageSpaces = this.ImageSpaces.Combine(rhs.ImageSpaces, (l, r) => l.Combine(r));
                ret.ImageSpaceAdapters = this.ImageSpaceAdapters.Combine(rhs.ImageSpaceAdapters, (l, r) => l.Combine(r));
                ret.FormLists = this.FormLists.Combine(rhs.FormLists, (l, r) => l.Combine(r));
                ret.Perks = this.Perks.Combine(rhs.Perks, (l, r) => l.Combine(r));
                ret.BodyParts = this.BodyParts.Combine(rhs.BodyParts, (l, r) => l.Combine(r));
                ret.AddonNodes = this.AddonNodes.Combine(rhs.AddonNodes, (l, r) => l.Combine(r));
                ret.ActorValueInformation = this.ActorValueInformation.Combine(rhs.ActorValueInformation, (l, r) => l.Combine(r));
                ret.CameraShots = this.CameraShots.Combine(rhs.CameraShots, (l, r) => l.Combine(r));
                ret.CameraPaths = this.CameraPaths.Combine(rhs.CameraPaths, (l, r) => l.Combine(r));
                ret.VoiceTypes = this.VoiceTypes.Combine(rhs.VoiceTypes, (l, r) => l.Combine(r));
                ret.MaterialTypes = this.MaterialTypes.Combine(rhs.MaterialTypes, (l, r) => l.Combine(r));
                ret.Impacts = this.Impacts.Combine(rhs.Impacts, (l, r) => l.Combine(r));
                ret.ImpactDataSets = this.ImpactDataSets.Combine(rhs.ImpactDataSets, (l, r) => l.Combine(r));
                ret.ArmorAddons = this.ArmorAddons.Combine(rhs.ArmorAddons, (l, r) => l.Combine(r));
                ret.EncounterZones = this.EncounterZones.Combine(rhs.EncounterZones, (l, r) => l.Combine(r));
                ret.Locations = this.Locations.Combine(rhs.Locations, (l, r) => l.Combine(r));
                ret.Messages = this.Messages.Combine(rhs.Messages, (l, r) => l.Combine(r));
                ret.DefaultObjectManagers = this.DefaultObjectManagers.Combine(rhs.DefaultObjectManagers, (l, r) => l.Combine(r));
                ret.LightingTemplates = this.LightingTemplates.Combine(rhs.LightingTemplates, (l, r) => l.Combine(r));
                ret.MusicTypes = this.MusicTypes.Combine(rhs.MusicTypes, (l, r) => l.Combine(r));
                ret.Footsteps = this.Footsteps.Combine(rhs.Footsteps, (l, r) => l.Combine(r));
                ret.FootstepSets = this.FootstepSets.Combine(rhs.FootstepSets, (l, r) => l.Combine(r));
                ret.StoryManagerBranchNodes = this.StoryManagerBranchNodes.Combine(rhs.StoryManagerBranchNodes, (l, r) => l.Combine(r));
                ret.StoryManagerQuestNodes = this.StoryManagerQuestNodes.Combine(rhs.StoryManagerQuestNodes, (l, r) => l.Combine(r));
                ret.StoryManagerEventNodes = this.StoryManagerEventNodes.Combine(rhs.StoryManagerEventNodes, (l, r) => l.Combine(r));
                ret.DialogBranches = this.DialogBranches.Combine(rhs.DialogBranches, (l, r) => l.Combine(r));
                ret.MusicTracks = this.MusicTracks.Combine(rhs.MusicTracks, (l, r) => l.Combine(r));
                ret.DialogViews = this.DialogViews.Combine(rhs.DialogViews, (l, r) => l.Combine(r));
                ret.WordsOfPower = this.WordsOfPower.Combine(rhs.WordsOfPower, (l, r) => l.Combine(r));
                ret.Shouts = this.Shouts.Combine(rhs.Shouts, (l, r) => l.Combine(r));
                ret.EquipTypes = this.EquipTypes.Combine(rhs.EquipTypes, (l, r) => l.Combine(r));
                ret.Relationships = this.Relationships.Combine(rhs.Relationships, (l, r) => l.Combine(r));
                ret.Scenes = this.Scenes.Combine(rhs.Scenes, (l, r) => l.Combine(r));
                ret.AssociationTypes = this.AssociationTypes.Combine(rhs.AssociationTypes, (l, r) => l.Combine(r));
                ret.Outfits = this.Outfits.Combine(rhs.Outfits, (l, r) => l.Combine(r));
                ret.ArtObjects = this.ArtObjects.Combine(rhs.ArtObjects, (l, r) => l.Combine(r));
                ret.MaterialObjects = this.MaterialObjects.Combine(rhs.MaterialObjects, (l, r) => l.Combine(r));
                ret.MovementTypes = this.MovementTypes.Combine(rhs.MovementTypes, (l, r) => l.Combine(r));
                ret.SoundDescriptors = this.SoundDescriptors.Combine(rhs.SoundDescriptors, (l, r) => l.Combine(r));
                ret.DualCastData = this.DualCastData.Combine(rhs.DualCastData, (l, r) => l.Combine(r));
                ret.SoundCategories = this.SoundCategories.Combine(rhs.SoundCategories, (l, r) => l.Combine(r));
                ret.SoundOutputModels = this.SoundOutputModels.Combine(rhs.SoundOutputModels, (l, r) => l.Combine(r));
                ret.CollisionLayers = this.CollisionLayers.Combine(rhs.CollisionLayers, (l, r) => l.Combine(r));
                ret.Colors = this.Colors.Combine(rhs.Colors, (l, r) => l.Combine(r));
                ret.ReverbParameters = this.ReverbParameters.Combine(rhs.ReverbParameters, (l, r) => l.Combine(r));
                ret.VolumetricLightings = this.VolumetricLightings.Combine(rhs.VolumetricLightings, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public Fallout4ModHeader.TranslationMask? ModHeader;
            public Group.TranslationMask<GameSetting.TranslationMask>? GameSettings;
            public Group.TranslationMask<Keyword.TranslationMask>? Keywords;
            public Group.TranslationMask<LocationReferenceType.TranslationMask>? LocationReferenceTypes;
            public Group.TranslationMask<ActionRecord.TranslationMask>? Actions;
            public Group.TranslationMask<TextureSet.TranslationMask>? TextureSets;
            public Group.TranslationMask<Global.TranslationMask>? Globals;
            public Group.TranslationMask<Class.TranslationMask>? Classes;
            public Group.TranslationMask<Faction.TranslationMask>? Factions;
            public Group.TranslationMask<HeadPart.TranslationMask>? HeadParts;
            public Group.TranslationMask<Hair.TranslationMask>? Hairs;
            public Group.TranslationMask<Eyes.TranslationMask>? Eyes;
            public Group.TranslationMask<Race.TranslationMask>? Races;
            public Group.TranslationMask<SoundMarker.TranslationMask>? SoundMarkers;
            public Group.TranslationMask<AcousticSpace.TranslationMask>? AcousticSpaces;
            public Group.TranslationMask<MagicEffect.TranslationMask>? MagicEffects;
            public Group.TranslationMask<LandscapeTexture.TranslationMask>? LandscapeTextures;
            public Group.TranslationMask<ObjectEffect.TranslationMask>? ObjectEffects;
            public Group.TranslationMask<Spell.TranslationMask>? Spells;
            public Group.TranslationMask<Scroll.TranslationMask>? Scrolls;
            public Group.TranslationMask<Activator.TranslationMask>? Activators;
            public Group.TranslationMask<TalkingActivator.TranslationMask>? TalkingActivators;
            public Group.TranslationMask<Armor.TranslationMask>? Armors;
            public Group.TranslationMask<Book.TranslationMask>? Books;
            public Group.TranslationMask<Container.TranslationMask>? Containers;
            public Group.TranslationMask<Door.TranslationMask>? Doors;
            public Group.TranslationMask<Ingredient.TranslationMask>? Ingredients;
            public Group.TranslationMask<Light.TranslationMask>? Lights;
            public Group.TranslationMask<MiscItem.TranslationMask>? MiscItems;
            public Group.TranslationMask<AlchemicalApparatus.TranslationMask>? AlchemicalApparatuses;
            public Group.TranslationMask<Static.TranslationMask>? Statics;
            public Group.TranslationMask<MoveableStatic.TranslationMask>? MoveableStatics;
            public Group.TranslationMask<Grass.TranslationMask>? Grasses;
            public Group.TranslationMask<Tree.TranslationMask>? Trees;
            public Group.TranslationMask<Flora.TranslationMask>? Florae;
            public Group.TranslationMask<Furniture.TranslationMask>? Furniture;
            public Group.TranslationMask<Weapon.TranslationMask>? Weapons;
            public Group.TranslationMask<Ammunition.TranslationMask>? Ammunitions;
            public Group.TranslationMask<Npc.TranslationMask>? Npcs;
            public Group.TranslationMask<LeveledNpc.TranslationMask>? LeveledNpcs;
            public Group.TranslationMask<Key.TranslationMask>? Keys;
            public Group.TranslationMask<Ingestible.TranslationMask>? Ingestibles;
            public Group.TranslationMask<IdleMarker.TranslationMask>? IdleMarkers;
            public Group.TranslationMask<ConstructibleObject.TranslationMask>? ConstructibleObjects;
            public Group.TranslationMask<Projectile.TranslationMask>? Projectiles;
            public Group.TranslationMask<Hazard.TranslationMask>? Hazards;
            public Group.TranslationMask<SoulGem.TranslationMask>? SoulGems;
            public Group.TranslationMask<LeveledItem.TranslationMask>? LeveledItems;
            public Group.TranslationMask<Weather.TranslationMask>? Weathers;
            public Group.TranslationMask<Climate.TranslationMask>? Climates;
            public Group.TranslationMask<ShaderParticleGeometry.TranslationMask>? ShaderParticleGeometries;
            public Group.TranslationMask<VisualEffect.TranslationMask>? VisualEffects;
            public Group.TranslationMask<Region.TranslationMask>? Regions;
            public Group.TranslationMask<NavigationMeshInfoMap.TranslationMask>? NavigationMeshInfoMaps;
            public ListGroup.TranslationMask<CellBlock.TranslationMask>? Cells;
            public Group.TranslationMask<Worldspace.TranslationMask>? Worldspaces;
            public Group.TranslationMask<DialogTopic.TranslationMask>? DialogTopics;
            public Group.TranslationMask<Quest.TranslationMask>? Quests;
            public Group.TranslationMask<IdleAnimation.TranslationMask>? IdleAnimations;
            public Group.TranslationMask<Package.TranslationMask>? Packages;
            public Group.TranslationMask<CombatStyle.TranslationMask>? CombatStyles;
            public Group.TranslationMask<LoadScreen.TranslationMask>? LoadScreens;
            public Group.TranslationMask<LeveledSpell.TranslationMask>? LeveledSpells;
            public Group.TranslationMask<AnimatedObject.TranslationMask>? AnimatedObjects;
            public Group.TranslationMask<Water.TranslationMask>? Waters;
            public Group.TranslationMask<EffectShader.TranslationMask>? EffectShaders;
            public Group.TranslationMask<Explosion.TranslationMask>? Explosions;
            public Group.TranslationMask<Debris.TranslationMask>? Debris;
            public Group.TranslationMask<ImageSpace.TranslationMask>? ImageSpaces;
            public Group.TranslationMask<ImageSpaceAdapter.TranslationMask>? ImageSpaceAdapters;
            public Group.TranslationMask<FormList.TranslationMask>? FormLists;
            public Group.TranslationMask<Perk.TranslationMask>? Perks;
            public Group.TranslationMask<BodyPartData.TranslationMask>? BodyParts;
            public Group.TranslationMask<AddonNode.TranslationMask>? AddonNodes;
            public Group.TranslationMask<ActorValueInformation.TranslationMask>? ActorValueInformation;
            public Group.TranslationMask<CameraShot.TranslationMask>? CameraShots;
            public Group.TranslationMask<CameraPath.TranslationMask>? CameraPaths;
            public Group.TranslationMask<VoiceType.TranslationMask>? VoiceTypes;
            public Group.TranslationMask<MaterialType.TranslationMask>? MaterialTypes;
            public Group.TranslationMask<Impact.TranslationMask>? Impacts;
            public Group.TranslationMask<ImpactDataSet.TranslationMask>? ImpactDataSets;
            public Group.TranslationMask<ArmorAddon.TranslationMask>? ArmorAddons;
            public Group.TranslationMask<EncounterZone.TranslationMask>? EncounterZones;
            public Group.TranslationMask<Location.TranslationMask>? Locations;
            public Group.TranslationMask<Message.TranslationMask>? Messages;
            public Group.TranslationMask<DefaultObjectManager.TranslationMask>? DefaultObjectManagers;
            public Group.TranslationMask<LightingTemplate.TranslationMask>? LightingTemplates;
            public Group.TranslationMask<MusicType.TranslationMask>? MusicTypes;
            public Group.TranslationMask<Footstep.TranslationMask>? Footsteps;
            public Group.TranslationMask<FootstepSet.TranslationMask>? FootstepSets;
            public Group.TranslationMask<StoryManagerBranchNode.TranslationMask>? StoryManagerBranchNodes;
            public Group.TranslationMask<StoryManagerQuestNode.TranslationMask>? StoryManagerQuestNodes;
            public Group.TranslationMask<StoryManagerEventNode.TranslationMask>? StoryManagerEventNodes;
            public Group.TranslationMask<DialogBranch.TranslationMask>? DialogBranches;
            public Group.TranslationMask<MusicTrack.TranslationMask>? MusicTracks;
            public Group.TranslationMask<DialogView.TranslationMask>? DialogViews;
            public Group.TranslationMask<WordOfPower.TranslationMask>? WordsOfPower;
            public Group.TranslationMask<Shout.TranslationMask>? Shouts;
            public Group.TranslationMask<EquipType.TranslationMask>? EquipTypes;
            public Group.TranslationMask<Relationship.TranslationMask>? Relationships;
            public Group.TranslationMask<Scene.TranslationMask>? Scenes;
            public Group.TranslationMask<AssociationType.TranslationMask>? AssociationTypes;
            public Group.TranslationMask<Outfit.TranslationMask>? Outfits;
            public Group.TranslationMask<ArtObject.TranslationMask>? ArtObjects;
            public Group.TranslationMask<MaterialObject.TranslationMask>? MaterialObjects;
            public Group.TranslationMask<MovementType.TranslationMask>? MovementTypes;
            public Group.TranslationMask<SoundDescriptor.TranslationMask>? SoundDescriptors;
            public Group.TranslationMask<DualCastData.TranslationMask>? DualCastData;
            public Group.TranslationMask<SoundCategory.TranslationMask>? SoundCategories;
            public Group.TranslationMask<SoundOutputModel.TranslationMask>? SoundOutputModels;
            public Group.TranslationMask<CollisionLayer.TranslationMask>? CollisionLayers;
            public Group.TranslationMask<ColorRecord.TranslationMask>? Colors;
            public Group.TranslationMask<ReverbParameters.TranslationMask>? ReverbParameters;
            public Group.TranslationMask<VolumetricLighting.TranslationMask>? VolumetricLightings;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModHeader != null ? ModHeader.OnOverall : DefaultOn, ModHeader?.GetCrystal()));
                ret.Add((GameSettings != null ? GameSettings.OnOverall : DefaultOn, GameSettings?.GetCrystal()));
                ret.Add((Keywords != null ? Keywords.OnOverall : DefaultOn, Keywords?.GetCrystal()));
                ret.Add((LocationReferenceTypes != null ? LocationReferenceTypes.OnOverall : DefaultOn, LocationReferenceTypes?.GetCrystal()));
                ret.Add((Actions != null ? Actions.OnOverall : DefaultOn, Actions?.GetCrystal()));
                ret.Add((TextureSets != null ? TextureSets.OnOverall : DefaultOn, TextureSets?.GetCrystal()));
                ret.Add((Globals != null ? Globals.OnOverall : DefaultOn, Globals?.GetCrystal()));
                ret.Add((Classes != null ? Classes.OnOverall : DefaultOn, Classes?.GetCrystal()));
                ret.Add((Factions != null ? Factions.OnOverall : DefaultOn, Factions?.GetCrystal()));
                ret.Add((HeadParts != null ? HeadParts.OnOverall : DefaultOn, HeadParts?.GetCrystal()));
                ret.Add((Hairs != null ? Hairs.OnOverall : DefaultOn, Hairs?.GetCrystal()));
                ret.Add((Eyes != null ? Eyes.OnOverall : DefaultOn, Eyes?.GetCrystal()));
                ret.Add((Races != null ? Races.OnOverall : DefaultOn, Races?.GetCrystal()));
                ret.Add((SoundMarkers != null ? SoundMarkers.OnOverall : DefaultOn, SoundMarkers?.GetCrystal()));
                ret.Add((AcousticSpaces != null ? AcousticSpaces.OnOverall : DefaultOn, AcousticSpaces?.GetCrystal()));
                ret.Add((MagicEffects != null ? MagicEffects.OnOverall : DefaultOn, MagicEffects?.GetCrystal()));
                ret.Add((LandscapeTextures != null ? LandscapeTextures.OnOverall : DefaultOn, LandscapeTextures?.GetCrystal()));
                ret.Add((ObjectEffects != null ? ObjectEffects.OnOverall : DefaultOn, ObjectEffects?.GetCrystal()));
                ret.Add((Spells != null ? Spells.OnOverall : DefaultOn, Spells?.GetCrystal()));
                ret.Add((Scrolls != null ? Scrolls.OnOverall : DefaultOn, Scrolls?.GetCrystal()));
                ret.Add((Activators != null ? Activators.OnOverall : DefaultOn, Activators?.GetCrystal()));
                ret.Add((TalkingActivators != null ? TalkingActivators.OnOverall : DefaultOn, TalkingActivators?.GetCrystal()));
                ret.Add((Armors != null ? Armors.OnOverall : DefaultOn, Armors?.GetCrystal()));
                ret.Add((Books != null ? Books.OnOverall : DefaultOn, Books?.GetCrystal()));
                ret.Add((Containers != null ? Containers.OnOverall : DefaultOn, Containers?.GetCrystal()));
                ret.Add((Doors != null ? Doors.OnOverall : DefaultOn, Doors?.GetCrystal()));
                ret.Add((Ingredients != null ? Ingredients.OnOverall : DefaultOn, Ingredients?.GetCrystal()));
                ret.Add((Lights != null ? Lights.OnOverall : DefaultOn, Lights?.GetCrystal()));
                ret.Add((MiscItems != null ? MiscItems.OnOverall : DefaultOn, MiscItems?.GetCrystal()));
                ret.Add((AlchemicalApparatuses != null ? AlchemicalApparatuses.OnOverall : DefaultOn, AlchemicalApparatuses?.GetCrystal()));
                ret.Add((Statics != null ? Statics.OnOverall : DefaultOn, Statics?.GetCrystal()));
                ret.Add((MoveableStatics != null ? MoveableStatics.OnOverall : DefaultOn, MoveableStatics?.GetCrystal()));
                ret.Add((Grasses != null ? Grasses.OnOverall : DefaultOn, Grasses?.GetCrystal()));
                ret.Add((Trees != null ? Trees.OnOverall : DefaultOn, Trees?.GetCrystal()));
                ret.Add((Florae != null ? Florae.OnOverall : DefaultOn, Florae?.GetCrystal()));
                ret.Add((Furniture != null ? Furniture.OnOverall : DefaultOn, Furniture?.GetCrystal()));
                ret.Add((Weapons != null ? Weapons.OnOverall : DefaultOn, Weapons?.GetCrystal()));
                ret.Add((Ammunitions != null ? Ammunitions.OnOverall : DefaultOn, Ammunitions?.GetCrystal()));
                ret.Add((Npcs != null ? Npcs.OnOverall : DefaultOn, Npcs?.GetCrystal()));
                ret.Add((LeveledNpcs != null ? LeveledNpcs.OnOverall : DefaultOn, LeveledNpcs?.GetCrystal()));
                ret.Add((Keys != null ? Keys.OnOverall : DefaultOn, Keys?.GetCrystal()));
                ret.Add((Ingestibles != null ? Ingestibles.OnOverall : DefaultOn, Ingestibles?.GetCrystal()));
                ret.Add((IdleMarkers != null ? IdleMarkers.OnOverall : DefaultOn, IdleMarkers?.GetCrystal()));
                ret.Add((ConstructibleObjects != null ? ConstructibleObjects.OnOverall : DefaultOn, ConstructibleObjects?.GetCrystal()));
                ret.Add((Projectiles != null ? Projectiles.OnOverall : DefaultOn, Projectiles?.GetCrystal()));
                ret.Add((Hazards != null ? Hazards.OnOverall : DefaultOn, Hazards?.GetCrystal()));
                ret.Add((SoulGems != null ? SoulGems.OnOverall : DefaultOn, SoulGems?.GetCrystal()));
                ret.Add((LeveledItems != null ? LeveledItems.OnOverall : DefaultOn, LeveledItems?.GetCrystal()));
                ret.Add((Weathers != null ? Weathers.OnOverall : DefaultOn, Weathers?.GetCrystal()));
                ret.Add((Climates != null ? Climates.OnOverall : DefaultOn, Climates?.GetCrystal()));
                ret.Add((ShaderParticleGeometries != null ? ShaderParticleGeometries.OnOverall : DefaultOn, ShaderParticleGeometries?.GetCrystal()));
                ret.Add((VisualEffects != null ? VisualEffects.OnOverall : DefaultOn, VisualEffects?.GetCrystal()));
                ret.Add((Regions != null ? Regions.OnOverall : DefaultOn, Regions?.GetCrystal()));
                ret.Add((NavigationMeshInfoMaps != null ? NavigationMeshInfoMaps.OnOverall : DefaultOn, NavigationMeshInfoMaps?.GetCrystal()));
                ret.Add((Cells != null ? Cells.OnOverall : DefaultOn, Cells?.GetCrystal()));
                ret.Add((Worldspaces != null ? Worldspaces.OnOverall : DefaultOn, Worldspaces?.GetCrystal()));
                ret.Add((DialogTopics != null ? DialogTopics.OnOverall : DefaultOn, DialogTopics?.GetCrystal()));
                ret.Add((Quests != null ? Quests.OnOverall : DefaultOn, Quests?.GetCrystal()));
                ret.Add((IdleAnimations != null ? IdleAnimations.OnOverall : DefaultOn, IdleAnimations?.GetCrystal()));
                ret.Add((Packages != null ? Packages.OnOverall : DefaultOn, Packages?.GetCrystal()));
                ret.Add((CombatStyles != null ? CombatStyles.OnOverall : DefaultOn, CombatStyles?.GetCrystal()));
                ret.Add((LoadScreens != null ? LoadScreens.OnOverall : DefaultOn, LoadScreens?.GetCrystal()));
                ret.Add((LeveledSpells != null ? LeveledSpells.OnOverall : DefaultOn, LeveledSpells?.GetCrystal()));
                ret.Add((AnimatedObjects != null ? AnimatedObjects.OnOverall : DefaultOn, AnimatedObjects?.GetCrystal()));
                ret.Add((Waters != null ? Waters.OnOverall : DefaultOn, Waters?.GetCrystal()));
                ret.Add((EffectShaders != null ? EffectShaders.OnOverall : DefaultOn, EffectShaders?.GetCrystal()));
                ret.Add((Explosions != null ? Explosions.OnOverall : DefaultOn, Explosions?.GetCrystal()));
                ret.Add((Debris != null ? Debris.OnOverall : DefaultOn, Debris?.GetCrystal()));
                ret.Add((ImageSpaces != null ? ImageSpaces.OnOverall : DefaultOn, ImageSpaces?.GetCrystal()));
                ret.Add((ImageSpaceAdapters != null ? ImageSpaceAdapters.OnOverall : DefaultOn, ImageSpaceAdapters?.GetCrystal()));
                ret.Add((FormLists != null ? FormLists.OnOverall : DefaultOn, FormLists?.GetCrystal()));
                ret.Add((Perks != null ? Perks.OnOverall : DefaultOn, Perks?.GetCrystal()));
                ret.Add((BodyParts != null ? BodyParts.OnOverall : DefaultOn, BodyParts?.GetCrystal()));
                ret.Add((AddonNodes != null ? AddonNodes.OnOverall : DefaultOn, AddonNodes?.GetCrystal()));
                ret.Add((ActorValueInformation != null ? ActorValueInformation.OnOverall : DefaultOn, ActorValueInformation?.GetCrystal()));
                ret.Add((CameraShots != null ? CameraShots.OnOverall : DefaultOn, CameraShots?.GetCrystal()));
                ret.Add((CameraPaths != null ? CameraPaths.OnOverall : DefaultOn, CameraPaths?.GetCrystal()));
                ret.Add((VoiceTypes != null ? VoiceTypes.OnOverall : DefaultOn, VoiceTypes?.GetCrystal()));
                ret.Add((MaterialTypes != null ? MaterialTypes.OnOverall : DefaultOn, MaterialTypes?.GetCrystal()));
                ret.Add((Impacts != null ? Impacts.OnOverall : DefaultOn, Impacts?.GetCrystal()));
                ret.Add((ImpactDataSets != null ? ImpactDataSets.OnOverall : DefaultOn, ImpactDataSets?.GetCrystal()));
                ret.Add((ArmorAddons != null ? ArmorAddons.OnOverall : DefaultOn, ArmorAddons?.GetCrystal()));
                ret.Add((EncounterZones != null ? EncounterZones.OnOverall : DefaultOn, EncounterZones?.GetCrystal()));
                ret.Add((Locations != null ? Locations.OnOverall : DefaultOn, Locations?.GetCrystal()));
                ret.Add((Messages != null ? Messages.OnOverall : DefaultOn, Messages?.GetCrystal()));
                ret.Add((DefaultObjectManagers != null ? DefaultObjectManagers.OnOverall : DefaultOn, DefaultObjectManagers?.GetCrystal()));
                ret.Add((LightingTemplates != null ? LightingTemplates.OnOverall : DefaultOn, LightingTemplates?.GetCrystal()));
                ret.Add((MusicTypes != null ? MusicTypes.OnOverall : DefaultOn, MusicTypes?.GetCrystal()));
                ret.Add((Footsteps != null ? Footsteps.OnOverall : DefaultOn, Footsteps?.GetCrystal()));
                ret.Add((FootstepSets != null ? FootstepSets.OnOverall : DefaultOn, FootstepSets?.GetCrystal()));
                ret.Add((StoryManagerBranchNodes != null ? StoryManagerBranchNodes.OnOverall : DefaultOn, StoryManagerBranchNodes?.GetCrystal()));
                ret.Add((StoryManagerQuestNodes != null ? StoryManagerQuestNodes.OnOverall : DefaultOn, StoryManagerQuestNodes?.GetCrystal()));
                ret.Add((StoryManagerEventNodes != null ? StoryManagerEventNodes.OnOverall : DefaultOn, StoryManagerEventNodes?.GetCrystal()));
                ret.Add((DialogBranches != null ? DialogBranches.OnOverall : DefaultOn, DialogBranches?.GetCrystal()));
                ret.Add((MusicTracks != null ? MusicTracks.OnOverall : DefaultOn, MusicTracks?.GetCrystal()));
                ret.Add((DialogViews != null ? DialogViews.OnOverall : DefaultOn, DialogViews?.GetCrystal()));
                ret.Add((WordsOfPower != null ? WordsOfPower.OnOverall : DefaultOn, WordsOfPower?.GetCrystal()));
                ret.Add((Shouts != null ? Shouts.OnOverall : DefaultOn, Shouts?.GetCrystal()));
                ret.Add((EquipTypes != null ? EquipTypes.OnOverall : DefaultOn, EquipTypes?.GetCrystal()));
                ret.Add((Relationships != null ? Relationships.OnOverall : DefaultOn, Relationships?.GetCrystal()));
                ret.Add((Scenes != null ? Scenes.OnOverall : DefaultOn, Scenes?.GetCrystal()));
                ret.Add((AssociationTypes != null ? AssociationTypes.OnOverall : DefaultOn, AssociationTypes?.GetCrystal()));
                ret.Add((Outfits != null ? Outfits.OnOverall : DefaultOn, Outfits?.GetCrystal()));
                ret.Add((ArtObjects != null ? ArtObjects.OnOverall : DefaultOn, ArtObjects?.GetCrystal()));
                ret.Add((MaterialObjects != null ? MaterialObjects.OnOverall : DefaultOn, MaterialObjects?.GetCrystal()));
                ret.Add((MovementTypes != null ? MovementTypes.OnOverall : DefaultOn, MovementTypes?.GetCrystal()));
                ret.Add((SoundDescriptors != null ? SoundDescriptors.OnOverall : DefaultOn, SoundDescriptors?.GetCrystal()));
                ret.Add((DualCastData != null ? DualCastData.OnOverall : DefaultOn, DualCastData?.GetCrystal()));
                ret.Add((SoundCategories != null ? SoundCategories.OnOverall : DefaultOn, SoundCategories?.GetCrystal()));
                ret.Add((SoundOutputModels != null ? SoundOutputModels.OnOverall : DefaultOn, SoundOutputModels?.GetCrystal()));
                ret.Add((CollisionLayers != null ? CollisionLayers.OnOverall : DefaultOn, CollisionLayers?.GetCrystal()));
                ret.Add((Colors != null ? Colors.OnOverall : DefaultOn, Colors?.GetCrystal()));
                ret.Add((ReverbParameters != null ? ReverbParameters.OnOverall : DefaultOn, ReverbParameters?.GetCrystal()));
                ret.Add((VolumetricLightings != null ? VolumetricLightings.OnOverall : DefaultOn, VolumetricLightings?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Fallout4Mod_Registration.TriggeringRecordType;
        public Fallout4Release Fallout4Release { get; }
        public override GameRelease GameRelease => Fallout4Release.ToGameRelease();
        IReadOnlyCache<T, FormKey> IModGetter.GetTopLevelGroupGetter<T>() => this.GetTopLevelGroupGetter<T>();
        ICache<T, FormKey> IMod.GetGroup<T>() => this.GetGroup<T>();
        void IModGetter.WriteToBinary(string path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(string path, BinaryWriteParameters? param) => this.WriteToBinaryParallel(path, param);
        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => Fallout4ModMixIn.GetEqualsMask(this, (IFallout4ModGetter)rhs, include);
        public override bool CanUseLocalization => true;
        public override bool UsingLocalization
        {
            get => this.ModHeader.Flags.HasFlag(Fallout4ModHeader.HeaderFlag.Localized);
            set => this.ModHeader.Flags.SetFlag(Fallout4ModHeader.HeaderFlag.Localized, value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<MasterReference> IMod.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IMod.NextFormID
        {
            get => this.ModHeader.Stats.NextFormID;
            set => this.ModHeader.Stats.NextFormID = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IModGetter.NextFormID => this.ModHeader.Stats.NextFormID;
        public Fallout4Mod(
            ModKey modKey,
            Fallout4Release release)
            : base(modKey)
        {
            this.ModHeader.Stats.NextFormID = GetDefaultInitialNextFormID();
            this.Fallout4Release = release;
            _GameSettings_Object = new Group<GameSetting>(this);
            _Keywords_Object = new Group<Keyword>(this);
            _LocationReferenceTypes_Object = new Group<LocationReferenceType>(this);
            _Actions_Object = new Group<ActionRecord>(this);
            _TextureSets_Object = new Group<TextureSet>(this);
            _Globals_Object = new Group<Global>(this);
            _Classes_Object = new Group<Class>(this);
            _Factions_Object = new Group<Faction>(this);
            _HeadParts_Object = new Group<HeadPart>(this);
            _Hairs_Object = new Group<Hair>(this);
            _Eyes_Object = new Group<Eyes>(this);
            _Races_Object = new Group<Race>(this);
            _SoundMarkers_Object = new Group<SoundMarker>(this);
            _AcousticSpaces_Object = new Group<AcousticSpace>(this);
            _MagicEffects_Object = new Group<MagicEffect>(this);
            _LandscapeTextures_Object = new Group<LandscapeTexture>(this);
            _ObjectEffects_Object = new Group<ObjectEffect>(this);
            _Spells_Object = new Group<Spell>(this);
            _Scrolls_Object = new Group<Scroll>(this);
            _Activators_Object = new Group<Activator>(this);
            _TalkingActivators_Object = new Group<TalkingActivator>(this);
            _Armors_Object = new Group<Armor>(this);
            _Books_Object = new Group<Book>(this);
            _Containers_Object = new Group<Container>(this);
            _Doors_Object = new Group<Door>(this);
            _Ingredients_Object = new Group<Ingredient>(this);
            _Lights_Object = new Group<Light>(this);
            _MiscItems_Object = new Group<MiscItem>(this);
            _AlchemicalApparatuses_Object = new Group<AlchemicalApparatus>(this);
            _Statics_Object = new Group<Static>(this);
            _MoveableStatics_Object = new Group<MoveableStatic>(this);
            _Grasses_Object = new Group<Grass>(this);
            _Trees_Object = new Group<Tree>(this);
            _Florae_Object = new Group<Flora>(this);
            _Furniture_Object = new Group<Furniture>(this);
            _Weapons_Object = new Group<Weapon>(this);
            _Ammunitions_Object = new Group<Ammunition>(this);
            _Npcs_Object = new Group<Npc>(this);
            _LeveledNpcs_Object = new Group<LeveledNpc>(this);
            _Keys_Object = new Group<Key>(this);
            _Ingestibles_Object = new Group<Ingestible>(this);
            _IdleMarkers_Object = new Group<IdleMarker>(this);
            _ConstructibleObjects_Object = new Group<ConstructibleObject>(this);
            _Projectiles_Object = new Group<Projectile>(this);
            _Hazards_Object = new Group<Hazard>(this);
            _SoulGems_Object = new Group<SoulGem>(this);
            _LeveledItems_Object = new Group<LeveledItem>(this);
            _Weathers_Object = new Group<Weather>(this);
            _Climates_Object = new Group<Climate>(this);
            _ShaderParticleGeometries_Object = new Group<ShaderParticleGeometry>(this);
            _VisualEffects_Object = new Group<VisualEffect>(this);
            _Regions_Object = new Group<Region>(this);
            _NavigationMeshInfoMaps_Object = new Group<NavigationMeshInfoMap>(this);
            _Worldspaces_Object = new Group<Worldspace>(this);
            _DialogTopics_Object = new Group<DialogTopic>(this);
            _Quests_Object = new Group<Quest>(this);
            _IdleAnimations_Object = new Group<IdleAnimation>(this);
            _Packages_Object = new Group<Package>(this);
            _CombatStyles_Object = new Group<CombatStyle>(this);
            _LoadScreens_Object = new Group<LoadScreen>(this);
            _LeveledSpells_Object = new Group<LeveledSpell>(this);
            _AnimatedObjects_Object = new Group<AnimatedObject>(this);
            _Waters_Object = new Group<Water>(this);
            _EffectShaders_Object = new Group<EffectShader>(this);
            _Explosions_Object = new Group<Explosion>(this);
            _Debris_Object = new Group<Debris>(this);
            _ImageSpaces_Object = new Group<ImageSpace>(this);
            _ImageSpaceAdapters_Object = new Group<ImageSpaceAdapter>(this);
            _FormLists_Object = new Group<FormList>(this);
            _Perks_Object = new Group<Perk>(this);
            _BodyParts_Object = new Group<BodyPartData>(this);
            _AddonNodes_Object = new Group<AddonNode>(this);
            _ActorValueInformation_Object = new Group<ActorValueInformation>(this);
            _CameraShots_Object = new Group<CameraShot>(this);
            _CameraPaths_Object = new Group<CameraPath>(this);
            _VoiceTypes_Object = new Group<VoiceType>(this);
            _MaterialTypes_Object = new Group<MaterialType>(this);
            _Impacts_Object = new Group<Impact>(this);
            _ImpactDataSets_Object = new Group<ImpactDataSet>(this);
            _ArmorAddons_Object = new Group<ArmorAddon>(this);
            _EncounterZones_Object = new Group<EncounterZone>(this);
            _Locations_Object = new Group<Location>(this);
            _Messages_Object = new Group<Message>(this);
            _DefaultObjectManagers_Object = new Group<DefaultObjectManager>(this);
            _LightingTemplates_Object = new Group<LightingTemplate>(this);
            _MusicTypes_Object = new Group<MusicType>(this);
            _Footsteps_Object = new Group<Footstep>(this);
            _FootstepSets_Object = new Group<FootstepSet>(this);
            _StoryManagerBranchNodes_Object = new Group<StoryManagerBranchNode>(this);
            _StoryManagerQuestNodes_Object = new Group<StoryManagerQuestNode>(this);
            _StoryManagerEventNodes_Object = new Group<StoryManagerEventNode>(this);
            _DialogBranches_Object = new Group<DialogBranch>(this);
            _MusicTracks_Object = new Group<MusicTrack>(this);
            _DialogViews_Object = new Group<DialogView>(this);
            _WordsOfPower_Object = new Group<WordOfPower>(this);
            _Shouts_Object = new Group<Shout>(this);
            _EquipTypes_Object = new Group<EquipType>(this);
            _Relationships_Object = new Group<Relationship>(this);
            _Scenes_Object = new Group<Scene>(this);
            _AssociationTypes_Object = new Group<AssociationType>(this);
            _Outfits_Object = new Group<Outfit>(this);
            _ArtObjects_Object = new Group<ArtObject>(this);
            _MaterialObjects_Object = new Group<MaterialObject>(this);
            _MovementTypes_Object = new Group<MovementType>(this);
            _SoundDescriptors_Object = new Group<SoundDescriptor>(this);
            _DualCastData_Object = new Group<DualCastData>(this);
            _SoundCategories_Object = new Group<SoundCategory>(this);
            _SoundOutputModels_Object = new Group<SoundOutputModel>(this);
            _CollisionLayers_Object = new Group<CollisionLayer>(this);
            _Colors_Object = new Group<ColorRecord>(this);
            _ReverbParameters_Object = new Group<ReverbParameters>(this);
            _VolumetricLightings_Object = new Group<VolumetricLighting>(this);
            CustomCtor();
        }
        public void AddRecords(
            Fallout4Mod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(rhsMod.Keywords.RecordCache.Items);
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(rhsMod.LocationReferenceTypes.RecordCache.Items);
            }
            if (mask?.Actions ?? true)
            {
                this.Actions.RecordCache.Set(rhsMod.Actions.RecordCache.Items);
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(rhsMod.TextureSets.RecordCache.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(rhsMod.Globals.RecordCache.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(rhsMod.Classes.RecordCache.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(rhsMod.Factions.RecordCache.Items);
            }
            if (mask?.HeadParts ?? true)
            {
                this.HeadParts.RecordCache.Set(rhsMod.HeadParts.RecordCache.Items);
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.RecordCache.Set(rhsMod.Hairs.RecordCache.Items);
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.RecordCache.Set(rhsMod.Eyes.RecordCache.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(rhsMod.Races.RecordCache.Items);
            }
            if (mask?.SoundMarkers ?? true)
            {
                this.SoundMarkers.RecordCache.Set(rhsMod.SoundMarkers.RecordCache.Items);
            }
            if (mask?.AcousticSpaces ?? true)
            {
                this.AcousticSpaces.RecordCache.Set(rhsMod.AcousticSpaces.RecordCache.Items);
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.RecordCache.Set(rhsMod.MagicEffects.RecordCache.Items);
            }
            if (mask?.LandscapeTextures ?? true)
            {
                this.LandscapeTextures.RecordCache.Set(rhsMod.LandscapeTextures.RecordCache.Items);
            }
            if (mask?.ObjectEffects ?? true)
            {
                this.ObjectEffects.RecordCache.Set(rhsMod.ObjectEffects.RecordCache.Items);
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.RecordCache.Set(rhsMod.Spells.RecordCache.Items);
            }
            if (mask?.Scrolls ?? true)
            {
                this.Scrolls.RecordCache.Set(rhsMod.Scrolls.RecordCache.Items);
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.RecordCache.Set(rhsMod.Activators.RecordCache.Items);
            }
            if (mask?.TalkingActivators ?? true)
            {
                this.TalkingActivators.RecordCache.Set(rhsMod.TalkingActivators.RecordCache.Items);
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.RecordCache.Set(rhsMod.Armors.RecordCache.Items);
            }
            if (mask?.Books ?? true)
            {
                this.Books.RecordCache.Set(rhsMod.Books.RecordCache.Items);
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.RecordCache.Set(rhsMod.Containers.RecordCache.Items);
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.RecordCache.Set(rhsMod.Doors.RecordCache.Items);
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.RecordCache.Set(rhsMod.Ingredients.RecordCache.Items);
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.RecordCache.Set(rhsMod.Lights.RecordCache.Items);
            }
            if (mask?.MiscItems ?? true)
            {
                this.MiscItems.RecordCache.Set(rhsMod.MiscItems.RecordCache.Items);
            }
            if (mask?.AlchemicalApparatuses ?? true)
            {
                this.AlchemicalApparatuses.RecordCache.Set(rhsMod.AlchemicalApparatuses.RecordCache.Items);
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.RecordCache.Set(rhsMod.Statics.RecordCache.Items);
            }
            if (mask?.MoveableStatics ?? true)
            {
                this.MoveableStatics.RecordCache.Set(rhsMod.MoveableStatics.RecordCache.Items);
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.RecordCache.Set(rhsMod.Grasses.RecordCache.Items);
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.RecordCache.Set(rhsMod.Trees.RecordCache.Items);
            }
            if (mask?.Florae ?? true)
            {
                this.Florae.RecordCache.Set(rhsMod.Florae.RecordCache.Items);
            }
            if (mask?.Furniture ?? true)
            {
                this.Furniture.RecordCache.Set(rhsMod.Furniture.RecordCache.Items);
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.RecordCache.Set(rhsMod.Weapons.RecordCache.Items);
            }
            if (mask?.Ammunitions ?? true)
            {
                this.Ammunitions.RecordCache.Set(rhsMod.Ammunitions.RecordCache.Items);
            }
            if (mask?.Npcs ?? true)
            {
                this.Npcs.RecordCache.Set(rhsMod.Npcs.RecordCache.Items);
            }
            if (mask?.LeveledNpcs ?? true)
            {
                this.LeveledNpcs.RecordCache.Set(rhsMod.LeveledNpcs.RecordCache.Items);
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.RecordCache.Set(rhsMod.Keys.RecordCache.Items);
            }
            if (mask?.Ingestibles ?? true)
            {
                this.Ingestibles.RecordCache.Set(rhsMod.Ingestibles.RecordCache.Items);
            }
            if (mask?.IdleMarkers ?? true)
            {
                this.IdleMarkers.RecordCache.Set(rhsMod.IdleMarkers.RecordCache.Items);
            }
            if (mask?.ConstructibleObjects ?? true)
            {
                this.ConstructibleObjects.RecordCache.Set(rhsMod.ConstructibleObjects.RecordCache.Items);
            }
            if (mask?.Projectiles ?? true)
            {
                this.Projectiles.RecordCache.Set(rhsMod.Projectiles.RecordCache.Items);
            }
            if (mask?.Hazards ?? true)
            {
                this.Hazards.RecordCache.Set(rhsMod.Hazards.RecordCache.Items);
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.RecordCache.Set(rhsMod.SoulGems.RecordCache.Items);
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.RecordCache.Set(rhsMod.LeveledItems.RecordCache.Items);
            }
            if (mask?.Weathers ?? true)
            {
                this.Weathers.RecordCache.Set(rhsMod.Weathers.RecordCache.Items);
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.RecordCache.Set(rhsMod.Climates.RecordCache.Items);
            }
            if (mask?.ShaderParticleGeometries ?? true)
            {
                this.ShaderParticleGeometries.RecordCache.Set(rhsMod.ShaderParticleGeometries.RecordCache.Items);
            }
            if (mask?.VisualEffects ?? true)
            {
                this.VisualEffects.RecordCache.Set(rhsMod.VisualEffects.RecordCache.Items);
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.RecordCache.Set(rhsMod.Regions.RecordCache.Items);
            }
            if (mask?.NavigationMeshInfoMaps ?? true)
            {
                this.NavigationMeshInfoMaps.RecordCache.Set(rhsMod.NavigationMeshInfoMaps.RecordCache.Items);
            }
            if (mask?.Cells ?? true)
            {
                if (rhsMod.Cells.Records.Count > 0)
                {
                    throw new NotImplementedException("Cell additions need implementing");
                }
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.RecordCache.Set(rhsMod.Worldspaces.RecordCache.Items);
            }
            if (mask?.DialogTopics ?? true)
            {
                this.DialogTopics.RecordCache.Set(rhsMod.DialogTopics.RecordCache.Items);
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.RecordCache.Set(rhsMod.Quests.RecordCache.Items);
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.RecordCache.Set(rhsMod.IdleAnimations.RecordCache.Items);
            }
            if (mask?.Packages ?? true)
            {
                this.Packages.RecordCache.Set(rhsMod.Packages.RecordCache.Items);
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.RecordCache.Set(rhsMod.CombatStyles.RecordCache.Items);
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.RecordCache.Set(rhsMod.LoadScreens.RecordCache.Items);
            }
            if (mask?.LeveledSpells ?? true)
            {
                this.LeveledSpells.RecordCache.Set(rhsMod.LeveledSpells.RecordCache.Items);
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.RecordCache.Set(rhsMod.AnimatedObjects.RecordCache.Items);
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.RecordCache.Set(rhsMod.Waters.RecordCache.Items);
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.RecordCache.Set(rhsMod.EffectShaders.RecordCache.Items);
            }
            if (mask?.Explosions ?? true)
            {
                this.Explosions.RecordCache.Set(rhsMod.Explosions.RecordCache.Items);
            }
            if (mask?.Debris ?? true)
            {
                this.Debris.RecordCache.Set(rhsMod.Debris.RecordCache.Items);
            }
            if (mask?.ImageSpaces ?? true)
            {
                this.ImageSpaces.RecordCache.Set(rhsMod.ImageSpaces.RecordCache.Items);
            }
            if (mask?.ImageSpaceAdapters ?? true)
            {
                this.ImageSpaceAdapters.RecordCache.Set(rhsMod.ImageSpaceAdapters.RecordCache.Items);
            }
            if (mask?.FormLists ?? true)
            {
                this.FormLists.RecordCache.Set(rhsMod.FormLists.RecordCache.Items);
            }
            if (mask?.Perks ?? true)
            {
                this.Perks.RecordCache.Set(rhsMod.Perks.RecordCache.Items);
            }
            if (mask?.BodyParts ?? true)
            {
                this.BodyParts.RecordCache.Set(rhsMod.BodyParts.RecordCache.Items);
            }
            if (mask?.AddonNodes ?? true)
            {
                this.AddonNodes.RecordCache.Set(rhsMod.AddonNodes.RecordCache.Items);
            }
            if (mask?.ActorValueInformation ?? true)
            {
                this.ActorValueInformation.RecordCache.Set(rhsMod.ActorValueInformation.RecordCache.Items);
            }
            if (mask?.CameraShots ?? true)
            {
                this.CameraShots.RecordCache.Set(rhsMod.CameraShots.RecordCache.Items);
            }
            if (mask?.CameraPaths ?? true)
            {
                this.CameraPaths.RecordCache.Set(rhsMod.CameraPaths.RecordCache.Items);
            }
            if (mask?.VoiceTypes ?? true)
            {
                this.VoiceTypes.RecordCache.Set(rhsMod.VoiceTypes.RecordCache.Items);
            }
            if (mask?.MaterialTypes ?? true)
            {
                this.MaterialTypes.RecordCache.Set(rhsMod.MaterialTypes.RecordCache.Items);
            }
            if (mask?.Impacts ?? true)
            {
                this.Impacts.RecordCache.Set(rhsMod.Impacts.RecordCache.Items);
            }
            if (mask?.ImpactDataSets ?? true)
            {
                this.ImpactDataSets.RecordCache.Set(rhsMod.ImpactDataSets.RecordCache.Items);
            }
            if (mask?.ArmorAddons ?? true)
            {
                this.ArmorAddons.RecordCache.Set(rhsMod.ArmorAddons.RecordCache.Items);
            }
            if (mask?.EncounterZones ?? true)
            {
                this.EncounterZones.RecordCache.Set(rhsMod.EncounterZones.RecordCache.Items);
            }
            if (mask?.Locations ?? true)
            {
                this.Locations.RecordCache.Set(rhsMod.Locations.RecordCache.Items);
            }
            if (mask?.Messages ?? true)
            {
                this.Messages.RecordCache.Set(rhsMod.Messages.RecordCache.Items);
            }
            if (mask?.DefaultObjectManagers ?? true)
            {
                this.DefaultObjectManagers.RecordCache.Set(rhsMod.DefaultObjectManagers.RecordCache.Items);
            }
            if (mask?.LightingTemplates ?? true)
            {
                this.LightingTemplates.RecordCache.Set(rhsMod.LightingTemplates.RecordCache.Items);
            }
            if (mask?.MusicTypes ?? true)
            {
                this.MusicTypes.RecordCache.Set(rhsMod.MusicTypes.RecordCache.Items);
            }
            if (mask?.Footsteps ?? true)
            {
                this.Footsteps.RecordCache.Set(rhsMod.Footsteps.RecordCache.Items);
            }
            if (mask?.FootstepSets ?? true)
            {
                this.FootstepSets.RecordCache.Set(rhsMod.FootstepSets.RecordCache.Items);
            }
            if (mask?.StoryManagerBranchNodes ?? true)
            {
                this.StoryManagerBranchNodes.RecordCache.Set(rhsMod.StoryManagerBranchNodes.RecordCache.Items);
            }
            if (mask?.StoryManagerQuestNodes ?? true)
            {
                this.StoryManagerQuestNodes.RecordCache.Set(rhsMod.StoryManagerQuestNodes.RecordCache.Items);
            }
            if (mask?.StoryManagerEventNodes ?? true)
            {
                this.StoryManagerEventNodes.RecordCache.Set(rhsMod.StoryManagerEventNodes.RecordCache.Items);
            }
            if (mask?.DialogBranches ?? true)
            {
                this.DialogBranches.RecordCache.Set(rhsMod.DialogBranches.RecordCache.Items);
            }
            if (mask?.MusicTracks ?? true)
            {
                this.MusicTracks.RecordCache.Set(rhsMod.MusicTracks.RecordCache.Items);
            }
            if (mask?.DialogViews ?? true)
            {
                this.DialogViews.RecordCache.Set(rhsMod.DialogViews.RecordCache.Items);
            }
            if (mask?.WordsOfPower ?? true)
            {
                this.WordsOfPower.RecordCache.Set(rhsMod.WordsOfPower.RecordCache.Items);
            }
            if (mask?.Shouts ?? true)
            {
                this.Shouts.RecordCache.Set(rhsMod.Shouts.RecordCache.Items);
            }
            if (mask?.EquipTypes ?? true)
            {
                this.EquipTypes.RecordCache.Set(rhsMod.EquipTypes.RecordCache.Items);
            }
            if (mask?.Relationships ?? true)
            {
                this.Relationships.RecordCache.Set(rhsMod.Relationships.RecordCache.Items);
            }
            if (mask?.Scenes ?? true)
            {
                this.Scenes.RecordCache.Set(rhsMod.Scenes.RecordCache.Items);
            }
            if (mask?.AssociationTypes ?? true)
            {
                this.AssociationTypes.RecordCache.Set(rhsMod.AssociationTypes.RecordCache.Items);
            }
            if (mask?.Outfits ?? true)
            {
                this.Outfits.RecordCache.Set(rhsMod.Outfits.RecordCache.Items);
            }
            if (mask?.ArtObjects ?? true)
            {
                this.ArtObjects.RecordCache.Set(rhsMod.ArtObjects.RecordCache.Items);
            }
            if (mask?.MaterialObjects ?? true)
            {
                this.MaterialObjects.RecordCache.Set(rhsMod.MaterialObjects.RecordCache.Items);
            }
            if (mask?.MovementTypes ?? true)
            {
                this.MovementTypes.RecordCache.Set(rhsMod.MovementTypes.RecordCache.Items);
            }
            if (mask?.SoundDescriptors ?? true)
            {
                this.SoundDescriptors.RecordCache.Set(rhsMod.SoundDescriptors.RecordCache.Items);
            }
            if (mask?.DualCastData ?? true)
            {
                this.DualCastData.RecordCache.Set(rhsMod.DualCastData.RecordCache.Items);
            }
            if (mask?.SoundCategories ?? true)
            {
                this.SoundCategories.RecordCache.Set(rhsMod.SoundCategories.RecordCache.Items);
            }
            if (mask?.SoundOutputModels ?? true)
            {
                this.SoundOutputModels.RecordCache.Set(rhsMod.SoundOutputModels.RecordCache.Items);
            }
            if (mask?.CollisionLayers ?? true)
            {
                this.CollisionLayers.RecordCache.Set(rhsMod.CollisionLayers.RecordCache.Items);
            }
            if (mask?.Colors ?? true)
            {
                this.Colors.RecordCache.Set(rhsMod.Colors.RecordCache.Items);
            }
            if (mask?.ReverbParameters ?? true)
            {
                this.ReverbParameters.RecordCache.Set(rhsMod.ReverbParameters.RecordCache.Items);
            }
            if (mask?.VolumetricLightings ?? true)
            {
                this.VolumetricLightings.RecordCache.Set(rhsMod.VolumetricLightings.RecordCache.Items);
            }
        }

        public override void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = GetRecordCount();
        }

        public uint GetRecordCount()
        {
            uint count = (uint)this.EnumerateMajorRecords().Count();
            count += GameSettings.RecordCache.Count > 0 ? 1 : default(uint);
            count += Keywords.RecordCache.Count > 0 ? 1 : default(uint);
            count += LocationReferenceTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Actions.RecordCache.Count > 0 ? 1 : default(uint);
            count += TextureSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += Globals.RecordCache.Count > 0 ? 1 : default(uint);
            count += Classes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Factions.RecordCache.Count > 0 ? 1 : default(uint);
            count += HeadParts.RecordCache.Count > 0 ? 1 : default(uint);
            count += Hairs.RecordCache.Count > 0 ? 1 : default(uint);
            count += Eyes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Races.RecordCache.Count > 0 ? 1 : default(uint);
            count += SoundMarkers.RecordCache.Count > 0 ? 1 : default(uint);
            count += AcousticSpaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += MagicEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += LandscapeTextures.RecordCache.Count > 0 ? 1 : default(uint);
            count += ObjectEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += Spells.RecordCache.Count > 0 ? 1 : default(uint);
            count += Scrolls.RecordCache.Count > 0 ? 1 : default(uint);
            count += Activators.RecordCache.Count > 0 ? 1 : default(uint);
            count += TalkingActivators.RecordCache.Count > 0 ? 1 : default(uint);
            count += Armors.RecordCache.Count > 0 ? 1 : default(uint);
            count += Books.RecordCache.Count > 0 ? 1 : default(uint);
            count += Containers.RecordCache.Count > 0 ? 1 : default(uint);
            count += Doors.RecordCache.Count > 0 ? 1 : default(uint);
            count += Ingredients.RecordCache.Count > 0 ? 1 : default(uint);
            count += Lights.RecordCache.Count > 0 ? 1 : default(uint);
            count += MiscItems.RecordCache.Count > 0 ? 1 : default(uint);
            count += AlchemicalApparatuses.RecordCache.Count > 0 ? 1 : default(uint);
            count += Statics.RecordCache.Count > 0 ? 1 : default(uint);
            count += MoveableStatics.RecordCache.Count > 0 ? 1 : default(uint);
            count += Grasses.RecordCache.Count > 0 ? 1 : default(uint);
            count += Trees.RecordCache.Count > 0 ? 1 : default(uint);
            count += Florae.RecordCache.Count > 0 ? 1 : default(uint);
            count += Furniture.RecordCache.Count > 0 ? 1 : default(uint);
            count += Weapons.RecordCache.Count > 0 ? 1 : default(uint);
            count += Ammunitions.RecordCache.Count > 0 ? 1 : default(uint);
            count += Npcs.RecordCache.Count > 0 ? 1 : default(uint);
            count += LeveledNpcs.RecordCache.Count > 0 ? 1 : default(uint);
            count += Keys.RecordCache.Count > 0 ? 1 : default(uint);
            count += Ingestibles.RecordCache.Count > 0 ? 1 : default(uint);
            count += IdleMarkers.RecordCache.Count > 0 ? 1 : default(uint);
            count += ConstructibleObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += Projectiles.RecordCache.Count > 0 ? 1 : default(uint);
            count += Hazards.RecordCache.Count > 0 ? 1 : default(uint);
            count += SoulGems.RecordCache.Count > 0 ? 1 : default(uint);
            count += LeveledItems.RecordCache.Count > 0 ? 1 : default(uint);
            count += Weathers.RecordCache.Count > 0 ? 1 : default(uint);
            count += Climates.RecordCache.Count > 0 ? 1 : default(uint);
            count += ShaderParticleGeometries.RecordCache.Count > 0 ? 1 : default(uint);
            count += VisualEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += Regions.RecordCache.Count > 0 ? 1 : default(uint);
            count += NavigationMeshInfoMaps.RecordCache.Count > 0 ? 1 : default(uint);
            count += Cells.Records.Count > 0 ? 1 : default(uint);
            count += Worldspaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += DialogTopics.RecordCache.Count > 0 ? 1 : default(uint);
            count += Quests.RecordCache.Count > 0 ? 1 : default(uint);
            count += IdleAnimations.RecordCache.Count > 0 ? 1 : default(uint);
            count += Packages.RecordCache.Count > 0 ? 1 : default(uint);
            count += CombatStyles.RecordCache.Count > 0 ? 1 : default(uint);
            count += LoadScreens.RecordCache.Count > 0 ? 1 : default(uint);
            count += LeveledSpells.RecordCache.Count > 0 ? 1 : default(uint);
            count += AnimatedObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += Waters.RecordCache.Count > 0 ? 1 : default(uint);
            count += EffectShaders.RecordCache.Count > 0 ? 1 : default(uint);
            count += Explosions.RecordCache.Count > 0 ? 1 : default(uint);
            count += Debris.RecordCache.Count > 0 ? 1 : default(uint);
            count += ImageSpaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += ImageSpaceAdapters.RecordCache.Count > 0 ? 1 : default(uint);
            count += FormLists.RecordCache.Count > 0 ? 1 : default(uint);
            count += Perks.RecordCache.Count > 0 ? 1 : default(uint);
            count += BodyParts.RecordCache.Count > 0 ? 1 : default(uint);
            count += AddonNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += ActorValueInformation.RecordCache.Count > 0 ? 1 : default(uint);
            count += CameraShots.RecordCache.Count > 0 ? 1 : default(uint);
            count += CameraPaths.RecordCache.Count > 0 ? 1 : default(uint);
            count += VoiceTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += MaterialTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Impacts.RecordCache.Count > 0 ? 1 : default(uint);
            count += ImpactDataSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += ArmorAddons.RecordCache.Count > 0 ? 1 : default(uint);
            count += EncounterZones.RecordCache.Count > 0 ? 1 : default(uint);
            count += Locations.RecordCache.Count > 0 ? 1 : default(uint);
            count += Messages.RecordCache.Count > 0 ? 1 : default(uint);
            count += DefaultObjectManagers.RecordCache.Count > 0 ? 1 : default(uint);
            count += LightingTemplates.RecordCache.Count > 0 ? 1 : default(uint);
            count += MusicTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Footsteps.RecordCache.Count > 0 ? 1 : default(uint);
            count += FootstepSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += StoryManagerBranchNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += StoryManagerQuestNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += StoryManagerEventNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += DialogBranches.RecordCache.Count > 0 ? 1 : default(uint);
            count += MusicTracks.RecordCache.Count > 0 ? 1 : default(uint);
            count += DialogViews.RecordCache.Count > 0 ? 1 : default(uint);
            count += WordsOfPower.RecordCache.Count > 0 ? 1 : default(uint);
            count += Shouts.RecordCache.Count > 0 ? 1 : default(uint);
            count += EquipTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Relationships.RecordCache.Count > 0 ? 1 : default(uint);
            count += Scenes.RecordCache.Count > 0 ? 1 : default(uint);
            count += AssociationTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Outfits.RecordCache.Count > 0 ? 1 : default(uint);
            count += ArtObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += MaterialObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += MovementTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += SoundDescriptors.RecordCache.Count > 0 ? 1 : default(uint);
            count += DualCastData.RecordCache.Count > 0 ? 1 : default(uint);
            count += SoundCategories.RecordCache.Count > 0 ? 1 : default(uint);
            count += SoundOutputModels.RecordCache.Count > 0 ? 1 : default(uint);
            count += CollisionLayers.RecordCache.Count > 0 ? 1 : default(uint);
            count += Colors.RecordCache.Count > 0 ? 1 : default(uint);
            count += ReverbParameters.RecordCache.Count > 0 ? 1 : default(uint);
            count += VolumetricLightings.RecordCache.Count > 0 ? 1 : default(uint);
            GetCustomRecordCount((customCount) => count += customCount);
            return count;
        }

        partial void GetCustomRecordCount(Action<uint> setter);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => Fallout4ModCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => Fallout4ModSetterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout4Mod, TSetter, TGetter>> IMajorRecordContextEnumerable<IFallout4Mod>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter>> IMajorRecordContextEnumerable<IFallout4Mod>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        #endregion

        #region Binary Translation
        #region Binary Create
        public static Fallout4Mod CreateFromBinary(
            MutagenFrame frame,
            Fallout4Release release,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            var ret = new Fallout4Mod(
                modKey: modKey,
                release: release);
            frame.MetaData.ModKey = modKey;
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                release: release,
                importMask: importMask,
                modKey: modKey,
                frame: frame);
            return ret;
        }

        public static Fallout4Mod CreateFromBinary(
            ModPath path,
            Fallout4Release release,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true)
        {
            var gameRelease = release.ToGameRelease();
            using (var reader = new MutagenBinaryReadStream(path, gameRelease))
            {
                var modKey = path.ModKey;
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, gameRelease));
                frame.MetaData.Parallel = parallel;
                if (reader.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = reader.GetInt32(offset: 8);
                if (EnumExt.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                {
                    frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(Path.GetDirectoryName(path.Path)!, stringsParam, path.ModKey);
                }
                return CreateFromBinary(
                    release: release,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static Fallout4Mod CreateFromBinary(
            ModPath path,
            Fallout4Release release,
            ErrorMaskBuilder? errorMask,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true)
        {
            var gameRelease = release.ToGameRelease();
            using (var reader = new MutagenBinaryReadStream(path, gameRelease))
            {
                var modKey = path.ModKey;
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, gameRelease));
                frame.MetaData.Parallel = parallel;
                if (reader.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = reader.GetInt32(offset: 8);
                if (EnumExt.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                {
                    frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(Path.GetDirectoryName(path.Path)!, stringsParam, path.ModKey);
                }
                return CreateFromBinary(
                    release: release,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static Fallout4Mod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            Fallout4Release release,
            RecordInfoCache infoCache,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(stream, modKey, release.ToGameRelease()))
            {
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = infoCache;
                frame.MetaData.Parallel = parallel;
                return CreateFromBinary(
                    release: release,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static Fallout4Mod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            Fallout4Release release,
            RecordInfoCache infoCache,
            ErrorMaskBuilder? errorMask,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(stream, modKey, release.ToGameRelease()))
            {
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = infoCache;
                frame.MetaData.Parallel = parallel;
                return CreateFromBinary(
                    release: release,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        #endregion

        public static IFallout4ModDisposableGetter CreateFromBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            Fallout4Release release,
            ModKey modKey,
            IStringsFolderLookup? stringsLookup = null)
        {
            var meta = new ParsingBundle(release.ToGameRelease(), new MasterReferenceReader(modKey));
            meta.RecordInfoCache = new RecordInfoCache(() => new MutagenMemoryReadStream(bytes, meta));
            meta.StringsLookup = stringsLookup;
            return Fallout4ModBinaryOverlay.Fallout4ModFactory(
                stream: new MutagenMemoryReadStream(
                    data: bytes,
                    metaData: meta),
                release: release,
                modKey: modKey,
                shouldDispose: false);
        }

        public static IFallout4ModDisposableGetter CreateFromBinaryOverlay(
            ModPath path,
            Fallout4Release release,
            StringsReadParameters? stringsParam = null)
        {
            return Fallout4ModBinaryOverlay.Fallout4ModFactory(
                path: path,
                stringsParam: stringsParam,
                release: release);
        }

        public static IFallout4ModDisposableGetter CreateFromBinaryOverlay(
            Stream stream,
            Fallout4Release release,
            ModKey modKey)
        {
            return Fallout4ModBinaryOverlay.Fallout4ModFactory(
                stream: new MutagenBinaryReadStream(stream, modKey, release.ToGameRelease()),
                modKey: modKey,
                release: release,
                shouldDispose: false);
        }

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Fallout4Mod GetNew()
        {
            return new Fallout4Mod();
        }

    }
    #endregion

    #region Interface
    public partial interface IFallout4Mod :
        IFallout4ModGetter,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IFallout4Mod>,
        IMod,
        IContextMod<IFallout4Mod>,
        IFormLinkContainer
    {
        new Fallout4ModHeader ModHeader { get; }
        new Group<GameSetting> GameSettings { get; }
        new Group<Keyword> Keywords { get; }
        new Group<LocationReferenceType> LocationReferenceTypes { get; }
        new Group<ActionRecord> Actions { get; }
        new Group<TextureSet> TextureSets { get; }
        new Group<Global> Globals { get; }
        new Group<Class> Classes { get; }
        new Group<Faction> Factions { get; }
        new Group<HeadPart> HeadParts { get; }
        new Group<Hair> Hairs { get; }
        new Group<Eyes> Eyes { get; }
        new Group<Race> Races { get; }
        new Group<SoundMarker> SoundMarkers { get; }
        new Group<AcousticSpace> AcousticSpaces { get; }
        new Group<MagicEffect> MagicEffects { get; }
        new Group<LandscapeTexture> LandscapeTextures { get; }
        new Group<ObjectEffect> ObjectEffects { get; }
        new Group<Spell> Spells { get; }
        new Group<Scroll> Scrolls { get; }
        new Group<Activator> Activators { get; }
        new Group<TalkingActivator> TalkingActivators { get; }
        new Group<Armor> Armors { get; }
        new Group<Book> Books { get; }
        new Group<Container> Containers { get; }
        new Group<Door> Doors { get; }
        new Group<Ingredient> Ingredients { get; }
        new Group<Light> Lights { get; }
        new Group<MiscItem> MiscItems { get; }
        new Group<AlchemicalApparatus> AlchemicalApparatuses { get; }
        new Group<Static> Statics { get; }
        new Group<MoveableStatic> MoveableStatics { get; }
        new Group<Grass> Grasses { get; }
        new Group<Tree> Trees { get; }
        new Group<Flora> Florae { get; }
        new Group<Furniture> Furniture { get; }
        new Group<Weapon> Weapons { get; }
        new Group<Ammunition> Ammunitions { get; }
        new Group<Npc> Npcs { get; }
        new Group<LeveledNpc> LeveledNpcs { get; }
        new Group<Key> Keys { get; }
        new Group<Ingestible> Ingestibles { get; }
        new Group<IdleMarker> IdleMarkers { get; }
        new Group<ConstructibleObject> ConstructibleObjects { get; }
        new Group<Projectile> Projectiles { get; }
        new Group<Hazard> Hazards { get; }
        new Group<SoulGem> SoulGems { get; }
        new Group<LeveledItem> LeveledItems { get; }
        new Group<Weather> Weathers { get; }
        new Group<Climate> Climates { get; }
        new Group<ShaderParticleGeometry> ShaderParticleGeometries { get; }
        new Group<VisualEffect> VisualEffects { get; }
        new Group<Region> Regions { get; }
        new Group<NavigationMeshInfoMap> NavigationMeshInfoMaps { get; }
        new ListGroup<CellBlock> Cells { get; }
        new Group<Worldspace> Worldspaces { get; }
        new Group<DialogTopic> DialogTopics { get; }
        new Group<Quest> Quests { get; }
        new Group<IdleAnimation> IdleAnimations { get; }
        new Group<Package> Packages { get; }
        new Group<CombatStyle> CombatStyles { get; }
        new Group<LoadScreen> LoadScreens { get; }
        new Group<LeveledSpell> LeveledSpells { get; }
        new Group<AnimatedObject> AnimatedObjects { get; }
        new Group<Water> Waters { get; }
        new Group<EffectShader> EffectShaders { get; }
        new Group<Explosion> Explosions { get; }
        new Group<Debris> Debris { get; }
        new Group<ImageSpace> ImageSpaces { get; }
        new Group<ImageSpaceAdapter> ImageSpaceAdapters { get; }
        new Group<FormList> FormLists { get; }
        new Group<Perk> Perks { get; }
        new Group<BodyPartData> BodyParts { get; }
        new Group<AddonNode> AddonNodes { get; }
        new Group<ActorValueInformation> ActorValueInformation { get; }
        new Group<CameraShot> CameraShots { get; }
        new Group<CameraPath> CameraPaths { get; }
        new Group<VoiceType> VoiceTypes { get; }
        new Group<MaterialType> MaterialTypes { get; }
        new Group<Impact> Impacts { get; }
        new Group<ImpactDataSet> ImpactDataSets { get; }
        new Group<ArmorAddon> ArmorAddons { get; }
        new Group<EncounterZone> EncounterZones { get; }
        new Group<Location> Locations { get; }
        new Group<Message> Messages { get; }
        new Group<DefaultObjectManager> DefaultObjectManagers { get; }
        new Group<LightingTemplate> LightingTemplates { get; }
        new Group<MusicType> MusicTypes { get; }
        new Group<Footstep> Footsteps { get; }
        new Group<FootstepSet> FootstepSets { get; }
        new Group<StoryManagerBranchNode> StoryManagerBranchNodes { get; }
        new Group<StoryManagerQuestNode> StoryManagerQuestNodes { get; }
        new Group<StoryManagerEventNode> StoryManagerEventNodes { get; }
        new Group<DialogBranch> DialogBranches { get; }
        new Group<MusicTrack> MusicTracks { get; }
        new Group<DialogView> DialogViews { get; }
        new Group<WordOfPower> WordsOfPower { get; }
        new Group<Shout> Shouts { get; }
        new Group<EquipType> EquipTypes { get; }
        new Group<Relationship> Relationships { get; }
        new Group<Scene> Scenes { get; }
        new Group<AssociationType> AssociationTypes { get; }
        new Group<Outfit> Outfits { get; }
        new Group<ArtObject> ArtObjects { get; }
        new Group<MaterialObject> MaterialObjects { get; }
        new Group<MovementType> MovementTypes { get; }
        new Group<SoundDescriptor> SoundDescriptors { get; }
        new Group<DualCastData> DualCastData { get; }
        new Group<SoundCategory> SoundCategories { get; }
        new Group<SoundOutputModel> SoundOutputModels { get; }
        new Group<CollisionLayer> CollisionLayers { get; }
        new Group<ColorRecord> Colors { get; }
        new Group<ReverbParameters> ReverbParameters { get; }
        new Group<VolumetricLighting> VolumetricLightings { get; }
    }

    public partial interface IFallout4ModGetter :
        ILoquiObject,
        IMajorRecordContextEnumerable<IFallout4Mod>,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IFallout4ModGetter>,
        IModGetter,
        IContextGetterMod<IFallout4Mod>,
        IFormLinkContainerGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => Fallout4Mod_Registration.Instance;
        IFallout4ModHeaderGetter ModHeader { get; }
        IGroupGetter<IGameSettingGetter> GameSettings { get; }
        IGroupGetter<IKeywordGetter> Keywords { get; }
        IGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes { get; }
        IGroupGetter<IActionRecordGetter> Actions { get; }
        IGroupGetter<ITextureSetGetter> TextureSets { get; }
        IGroupGetter<IGlobalGetter> Globals { get; }
        IGroupGetter<IClassGetter> Classes { get; }
        IGroupGetter<IFactionGetter> Factions { get; }
        IGroupGetter<IHeadPartGetter> HeadParts { get; }
        IGroupGetter<IHairGetter> Hairs { get; }
        IGroupGetter<IEyesGetter> Eyes { get; }
        IGroupGetter<IRaceGetter> Races { get; }
        IGroupGetter<ISoundMarkerGetter> SoundMarkers { get; }
        IGroupGetter<IAcousticSpaceGetter> AcousticSpaces { get; }
        IGroupGetter<IMagicEffectGetter> MagicEffects { get; }
        IGroupGetter<ILandscapeTextureGetter> LandscapeTextures { get; }
        IGroupGetter<IObjectEffectGetter> ObjectEffects { get; }
        IGroupGetter<ISpellGetter> Spells { get; }
        IGroupGetter<IScrollGetter> Scrolls { get; }
        IGroupGetter<IActivatorGetter> Activators { get; }
        IGroupGetter<ITalkingActivatorGetter> TalkingActivators { get; }
        IGroupGetter<IArmorGetter> Armors { get; }
        IGroupGetter<IBookGetter> Books { get; }
        IGroupGetter<IContainerGetter> Containers { get; }
        IGroupGetter<IDoorGetter> Doors { get; }
        IGroupGetter<IIngredientGetter> Ingredients { get; }
        IGroupGetter<ILightGetter> Lights { get; }
        IGroupGetter<IMiscItemGetter> MiscItems { get; }
        IGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatuses { get; }
        IGroupGetter<IStaticGetter> Statics { get; }
        IGroupGetter<IMoveableStaticGetter> MoveableStatics { get; }
        IGroupGetter<IGrassGetter> Grasses { get; }
        IGroupGetter<ITreeGetter> Trees { get; }
        IGroupGetter<IFloraGetter> Florae { get; }
        IGroupGetter<IFurnitureGetter> Furniture { get; }
        IGroupGetter<IWeaponGetter> Weapons { get; }
        IGroupGetter<IAmmunitionGetter> Ammunitions { get; }
        IGroupGetter<INpcGetter> Npcs { get; }
        IGroupGetter<ILeveledNpcGetter> LeveledNpcs { get; }
        IGroupGetter<IKeyGetter> Keys { get; }
        IGroupGetter<IIngestibleGetter> Ingestibles { get; }
        IGroupGetter<IIdleMarkerGetter> IdleMarkers { get; }
        IGroupGetter<IConstructibleObjectGetter> ConstructibleObjects { get; }
        IGroupGetter<IProjectileGetter> Projectiles { get; }
        IGroupGetter<IHazardGetter> Hazards { get; }
        IGroupGetter<ISoulGemGetter> SoulGems { get; }
        IGroupGetter<ILeveledItemGetter> LeveledItems { get; }
        IGroupGetter<IWeatherGetter> Weathers { get; }
        IGroupGetter<IClimateGetter> Climates { get; }
        IGroupGetter<IShaderParticleGeometryGetter> ShaderParticleGeometries { get; }
        IGroupGetter<IVisualEffectGetter> VisualEffects { get; }
        IGroupGetter<IRegionGetter> Regions { get; }
        IGroupGetter<INavigationMeshInfoMapGetter> NavigationMeshInfoMaps { get; }
        IListGroupGetter<ICellBlockGetter> Cells { get; }
        IGroupGetter<IWorldspaceGetter> Worldspaces { get; }
        IGroupGetter<IDialogTopicGetter> DialogTopics { get; }
        IGroupGetter<IQuestGetter> Quests { get; }
        IGroupGetter<IIdleAnimationGetter> IdleAnimations { get; }
        IGroupGetter<IPackageGetter> Packages { get; }
        IGroupGetter<ICombatStyleGetter> CombatStyles { get; }
        IGroupGetter<ILoadScreenGetter> LoadScreens { get; }
        IGroupGetter<ILeveledSpellGetter> LeveledSpells { get; }
        IGroupGetter<IAnimatedObjectGetter> AnimatedObjects { get; }
        IGroupGetter<IWaterGetter> Waters { get; }
        IGroupGetter<IEffectShaderGetter> EffectShaders { get; }
        IGroupGetter<IExplosionGetter> Explosions { get; }
        IGroupGetter<IDebrisGetter> Debris { get; }
        IGroupGetter<IImageSpaceGetter> ImageSpaces { get; }
        IGroupGetter<IImageSpaceAdapterGetter> ImageSpaceAdapters { get; }
        IGroupGetter<IFormListGetter> FormLists { get; }
        IGroupGetter<IPerkGetter> Perks { get; }
        IGroupGetter<IBodyPartDataGetter> BodyParts { get; }
        IGroupGetter<IAddonNodeGetter> AddonNodes { get; }
        IGroupGetter<IActorValueInformationGetter> ActorValueInformation { get; }
        IGroupGetter<ICameraShotGetter> CameraShots { get; }
        IGroupGetter<ICameraPathGetter> CameraPaths { get; }
        IGroupGetter<IVoiceTypeGetter> VoiceTypes { get; }
        IGroupGetter<IMaterialTypeGetter> MaterialTypes { get; }
        IGroupGetter<IImpactGetter> Impacts { get; }
        IGroupGetter<IImpactDataSetGetter> ImpactDataSets { get; }
        IGroupGetter<IArmorAddonGetter> ArmorAddons { get; }
        IGroupGetter<IEncounterZoneGetter> EncounterZones { get; }
        IGroupGetter<ILocationGetter> Locations { get; }
        IGroupGetter<IMessageGetter> Messages { get; }
        IGroupGetter<IDefaultObjectManagerGetter> DefaultObjectManagers { get; }
        IGroupGetter<ILightingTemplateGetter> LightingTemplates { get; }
        IGroupGetter<IMusicTypeGetter> MusicTypes { get; }
        IGroupGetter<IFootstepGetter> Footsteps { get; }
        IGroupGetter<IFootstepSetGetter> FootstepSets { get; }
        IGroupGetter<IStoryManagerBranchNodeGetter> StoryManagerBranchNodes { get; }
        IGroupGetter<IStoryManagerQuestNodeGetter> StoryManagerQuestNodes { get; }
        IGroupGetter<IStoryManagerEventNodeGetter> StoryManagerEventNodes { get; }
        IGroupGetter<IDialogBranchGetter> DialogBranches { get; }
        IGroupGetter<IMusicTrackGetter> MusicTracks { get; }
        IGroupGetter<IDialogViewGetter> DialogViews { get; }
        IGroupGetter<IWordOfPowerGetter> WordsOfPower { get; }
        IGroupGetter<IShoutGetter> Shouts { get; }
        IGroupGetter<IEquipTypeGetter> EquipTypes { get; }
        IGroupGetter<IRelationshipGetter> Relationships { get; }
        IGroupGetter<ISceneGetter> Scenes { get; }
        IGroupGetter<IAssociationTypeGetter> AssociationTypes { get; }
        IGroupGetter<IOutfitGetter> Outfits { get; }
        IGroupGetter<IArtObjectGetter> ArtObjects { get; }
        IGroupGetter<IMaterialObjectGetter> MaterialObjects { get; }
        IGroupGetter<IMovementTypeGetter> MovementTypes { get; }
        IGroupGetter<ISoundDescriptorGetter> SoundDescriptors { get; }
        IGroupGetter<IDualCastDataGetter> DualCastData { get; }
        IGroupGetter<ISoundCategoryGetter> SoundCategories { get; }
        IGroupGetter<ISoundOutputModelGetter> SoundOutputModels { get; }
        IGroupGetter<ICollisionLayerGetter> CollisionLayers { get; }
        IGroupGetter<IColorRecordGetter> Colors { get; }
        IGroupGetter<IReverbParametersGetter> ReverbParameters { get; }
        IGroupGetter<IVolumetricLightingGetter> VolumetricLightings { get; }

        #region Mutagen
        Fallout4Release Fallout4Release { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class Fallout4ModMixIn
    {
        public static void Clear(this IFallout4Mod item)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Fallout4Mod.Mask<bool> GetEqualsMask(
            this IFallout4ModGetter item,
            IFallout4ModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFallout4ModGetter item,
            string? name = null,
            Fallout4Mod.Mask<bool>? printMask = null)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFallout4ModGetter item,
            FileGeneration fg,
            string? name = null,
            Fallout4Mod.Mask<bool>? printMask = null)
        {
            ((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFallout4ModGetter item,
            IFallout4ModGetter rhs)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFallout4Mod lhs,
            IFallout4ModGetter rhs)
        {
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFallout4Mod lhs,
            IFallout4ModGetter rhs,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFallout4Mod lhs,
            IFallout4ModGetter rhs,
            out Fallout4Mod.ErrorMask errorMask,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Fallout4Mod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFallout4Mod lhs,
            IFallout4ModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Fallout4Mod DeepCopy(
            this IFallout4ModGetter item,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            return ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Fallout4Mod DeepCopy(
            this IFallout4ModGetter item,
            out Fallout4Mod.ErrorMask errorMask,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            return ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Fallout4Mod DeepCopy(
            this IFallout4ModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IReadOnlyCache<T, FormKey> GetTopLevelGroupGetter<T>(this IFallout4ModGetter obj)
            where T : IMajorRecordCommonGetter
        {
            return (IReadOnlyCache<T, FormKey>)((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).GetGroup<T>(obj: obj);
        }

        public static ICache<T, FormKey> GetGroup<T>(this IFallout4Mod obj)
            where T : IMajorRecordCommon
        {
            return (ICache<T, FormKey>)((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).GetGroup<T>(obj: obj);
        }

        public static void WriteToBinaryParallel(
            this IFallout4ModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null)
        {
            Fallout4ModCommon.WriteParallel(
                item: item,
                stream: stream,
                param: param ?? BinaryWriteParameters.Default,
                modKey: item.ModKey);
        }

        public static void WriteToBinaryParallel(
            this IFallout4ModGetter item,
            string path,
            BinaryWriteParameters? param = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            bool disposeStrings = param.StringsWriter == null;
            param.StringsWriter ??= EnumExt.HasFlag((int)item.ModHeader.Flags, (int)ModHeaderCommonFlag.Localized) ? new StringsWriter(modKey, Path.Combine(Path.GetDirectoryName(path)!, "Strings")) : null;
            using (var stream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                Fallout4ModCommon.WriteParallel(
                    item: item,
                    stream: stream,
                    param: param,
                    modKey: modKey);
            }
            if (disposeStrings)
            {
                param.StringsWriter?.Dispose();
            }
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this IFallout4ModGetter obj)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IFallout4ModGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m)
                .Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            this IFallout4ModGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommonGetter)m)
                .Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this IFallout4Mod obj)
        {
            return ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IFallout4Mod obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m)
                .Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(
            this IFallout4Mod obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommon)m)
                .Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            IEnumerable<FormKey> keys)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            HashSet<FormKey> keys)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4Mod obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4Mod obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4Mod obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4Mod obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4Mod obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordCommonGetter
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IFallout4Mod, TSetter, TGetter>> EnumerateMajorRecordContexts<TSetter, TGetter>(
            this IFallout4ModGetter obj,
            ILinkCache linkCache,
            bool throwIfUnknown = true)
            where TSetter : class, IMajorRecordCommon, TGetter
            where TGetter : class, IMajorRecordCommonGetter
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: typeof(TGetter),
                throwIfUnknown: throwIfUnknown)
                .Select(m => m.AsType<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter, TSetter, TGetter>())
                .Catch(e => throw RecordException.Factory(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            this IFallout4ModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFallout4Mod item,
            MutagenFrame frame,
            Fallout4Release release,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                release: release,
                importMask: importMask,
                modKey: modKey,
                frame: frame);
        }

        public static void CopyInFromBinary(
            this IFallout4Mod item,
            ModPath path,
            Fallout4Release release,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true)
        {
            var gameRelease = release.ToGameRelease();
            using (var reader = new MutagenBinaryReadStream(path, gameRelease))
            {
                var modKey = path.ModKey;
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, gameRelease));
                frame.MetaData.Parallel = parallel;
                if (reader.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = reader.GetInt32(offset: 8);
                if (EnumExt.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                {
                    frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(Path.GetDirectoryName(path.Path)!, stringsParam, path.ModKey);
                }
                CopyInFromBinary(
                    item: item,
                    release: release,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static void CopyInFromBinary(
            this IFallout4Mod item,
            Stream stream,
            ModKey modKey,
            Fallout4Release release,
            RecordInfoCache infoCache,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(stream, modKey, release.ToGameRelease()))
            {
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = infoCache;
                frame.MetaData.Parallel = parallel;
                CopyInFromBinary(
                    item: item,
                    release: release,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum Fallout4Mod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Keywords = 2,
        LocationReferenceTypes = 3,
        Actions = 4,
        TextureSets = 5,
        Globals = 6,
        Classes = 7,
        Factions = 8,
        HeadParts = 9,
        Hairs = 10,
        Eyes = 11,
        Races = 12,
        SoundMarkers = 13,
        AcousticSpaces = 14,
        MagicEffects = 15,
        LandscapeTextures = 16,
        ObjectEffects = 17,
        Spells = 18,
        Scrolls = 19,
        Activators = 20,
        TalkingActivators = 21,
        Armors = 22,
        Books = 23,
        Containers = 24,
        Doors = 25,
        Ingredients = 26,
        Lights = 27,
        MiscItems = 28,
        AlchemicalApparatuses = 29,
        Statics = 30,
        MoveableStatics = 31,
        Grasses = 32,
        Trees = 33,
        Florae = 34,
        Furniture = 35,
        Weapons = 36,
        Ammunitions = 37,
        Npcs = 38,
        LeveledNpcs = 39,
        Keys = 40,
        Ingestibles = 41,
        IdleMarkers = 42,
        ConstructibleObjects = 43,
        Projectiles = 44,
        Hazards = 45,
        SoulGems = 46,
        LeveledItems = 47,
        Weathers = 48,
        Climates = 49,
        ShaderParticleGeometries = 50,
        VisualEffects = 51,
        Regions = 52,
        NavigationMeshInfoMaps = 53,
        Cells = 54,
        Worldspaces = 55,
        DialogTopics = 56,
        Quests = 57,
        IdleAnimations = 58,
        Packages = 59,
        CombatStyles = 60,
        LoadScreens = 61,
        LeveledSpells = 62,
        AnimatedObjects = 63,
        Waters = 64,
        EffectShaders = 65,
        Explosions = 66,
        Debris = 67,
        ImageSpaces = 68,
        ImageSpaceAdapters = 69,
        FormLists = 70,
        Perks = 71,
        BodyParts = 72,
        AddonNodes = 73,
        ActorValueInformation = 74,
        CameraShots = 75,
        CameraPaths = 76,
        VoiceTypes = 77,
        MaterialTypes = 78,
        Impacts = 79,
        ImpactDataSets = 80,
        ArmorAddons = 81,
        EncounterZones = 82,
        Locations = 83,
        Messages = 84,
        DefaultObjectManagers = 85,
        LightingTemplates = 86,
        MusicTypes = 87,
        Footsteps = 88,
        FootstepSets = 89,
        StoryManagerBranchNodes = 90,
        StoryManagerQuestNodes = 91,
        StoryManagerEventNodes = 92,
        DialogBranches = 93,
        MusicTracks = 94,
        DialogViews = 95,
        WordsOfPower = 96,
        Shouts = 97,
        EquipTypes = 98,
        Relationships = 99,
        Scenes = 100,
        AssociationTypes = 101,
        Outfits = 102,
        ArtObjects = 103,
        MaterialObjects = 104,
        MovementTypes = 105,
        SoundDescriptors = 106,
        DualCastData = 107,
        SoundCategories = 108,
        SoundOutputModels = 109,
        CollisionLayers = 110,
        Colors = 111,
        ReverbParameters = 112,
        VolumetricLightings = 113,
    }
    #endregion

    #region Registration
    public partial class Fallout4Mod_Registration : ILoquiRegistration
    {
        public static readonly Fallout4Mod_Registration Instance = new Fallout4Mod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 66,
            version: 0);

        public const string GUID = "9dcb1a8f-db0a-44bd-9a30-9427a9350e7a";

        public const ushort AdditionalFieldCount = 114;

        public const ushort FieldCount = 114;

        public static readonly Type MaskType = typeof(Fallout4Mod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Fallout4Mod.ErrorMask);

        public static readonly Type ClassType = typeof(Fallout4Mod);

        public static readonly Type GetterType = typeof(IFallout4ModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFallout4Mod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.Fallout4Mod";

        public const string Name = "Fallout4Mod";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TES4;
        public static readonly Type BinaryWriteTranslation = typeof(Fallout4ModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class Fallout4ModSetterCommon
    {
        public static readonly Fallout4ModSetterCommon Instance = new Fallout4ModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFallout4Mod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.Keywords.Clear();
            item.LocationReferenceTypes.Clear();
            item.Actions.Clear();
            item.TextureSets.Clear();
            item.Globals.Clear();
            item.Classes.Clear();
            item.Factions.Clear();
            item.HeadParts.Clear();
            item.Hairs.Clear();
            item.Eyes.Clear();
            item.Races.Clear();
            item.SoundMarkers.Clear();
            item.AcousticSpaces.Clear();
            item.MagicEffects.Clear();
            item.LandscapeTextures.Clear();
            item.ObjectEffects.Clear();
            item.Spells.Clear();
            item.Scrolls.Clear();
            item.Activators.Clear();
            item.TalkingActivators.Clear();
            item.Armors.Clear();
            item.Books.Clear();
            item.Containers.Clear();
            item.Doors.Clear();
            item.Ingredients.Clear();
            item.Lights.Clear();
            item.MiscItems.Clear();
            item.AlchemicalApparatuses.Clear();
            item.Statics.Clear();
            item.MoveableStatics.Clear();
            item.Grasses.Clear();
            item.Trees.Clear();
            item.Florae.Clear();
            item.Furniture.Clear();
            item.Weapons.Clear();
            item.Ammunitions.Clear();
            item.Npcs.Clear();
            item.LeveledNpcs.Clear();
            item.Keys.Clear();
            item.Ingestibles.Clear();
            item.IdleMarkers.Clear();
            item.ConstructibleObjects.Clear();
            item.Projectiles.Clear();
            item.Hazards.Clear();
            item.SoulGems.Clear();
            item.LeveledItems.Clear();
            item.Weathers.Clear();
            item.Climates.Clear();
            item.ShaderParticleGeometries.Clear();
            item.VisualEffects.Clear();
            item.Regions.Clear();
            item.NavigationMeshInfoMaps.Clear();
            item.Worldspaces.Clear();
            item.DialogTopics.Clear();
            item.Quests.Clear();
            item.IdleAnimations.Clear();
            item.Packages.Clear();
            item.CombatStyles.Clear();
            item.LoadScreens.Clear();
            item.LeveledSpells.Clear();
            item.AnimatedObjects.Clear();
            item.Waters.Clear();
            item.EffectShaders.Clear();
            item.Explosions.Clear();
            item.Debris.Clear();
            item.ImageSpaces.Clear();
            item.ImageSpaceAdapters.Clear();
            item.FormLists.Clear();
            item.Perks.Clear();
            item.BodyParts.Clear();
            item.AddonNodes.Clear();
            item.ActorValueInformation.Clear();
            item.CameraShots.Clear();
            item.CameraPaths.Clear();
            item.VoiceTypes.Clear();
            item.MaterialTypes.Clear();
            item.Impacts.Clear();
            item.ImpactDataSets.Clear();
            item.ArmorAddons.Clear();
            item.EncounterZones.Clear();
            item.Locations.Clear();
            item.Messages.Clear();
            item.DefaultObjectManagers.Clear();
            item.LightingTemplates.Clear();
            item.MusicTypes.Clear();
            item.Footsteps.Clear();
            item.FootstepSets.Clear();
            item.StoryManagerBranchNodes.Clear();
            item.StoryManagerQuestNodes.Clear();
            item.StoryManagerEventNodes.Clear();
            item.DialogBranches.Clear();
            item.MusicTracks.Clear();
            item.DialogViews.Clear();
            item.WordsOfPower.Clear();
            item.Shouts.Clear();
            item.EquipTypes.Clear();
            item.Relationships.Clear();
            item.Scenes.Clear();
            item.AssociationTypes.Clear();
            item.Outfits.Clear();
            item.ArtObjects.Clear();
            item.MaterialObjects.Clear();
            item.MovementTypes.Clear();
            item.SoundDescriptors.Clear();
            item.DualCastData.Clear();
            item.SoundCategories.Clear();
            item.SoundOutputModels.Clear();
            item.CollisionLayers.Clear();
            item.Colors.Clear();
            item.ReverbParameters.Clear();
            item.VolumetricLightings.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IFallout4Mod obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ModHeader.RemapLinks(mapping);
            obj.GameSettings.RemapLinks(mapping);
            obj.Keywords.RemapLinks(mapping);
            obj.LocationReferenceTypes.RemapLinks(mapping);
            obj.Actions.RemapLinks(mapping);
            obj.TextureSets.RemapLinks(mapping);
            obj.Globals.RemapLinks(mapping);
            obj.Classes.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.HeadParts.RemapLinks(mapping);
            obj.Hairs.RemapLinks(mapping);
            obj.Eyes.RemapLinks(mapping);
            obj.Races.RemapLinks(mapping);
            obj.SoundMarkers.RemapLinks(mapping);
            obj.AcousticSpaces.RemapLinks(mapping);
            obj.MagicEffects.RemapLinks(mapping);
            obj.LandscapeTextures.RemapLinks(mapping);
            obj.ObjectEffects.RemapLinks(mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Scrolls.RemapLinks(mapping);
            obj.Activators.RemapLinks(mapping);
            obj.TalkingActivators.RemapLinks(mapping);
            obj.Armors.RemapLinks(mapping);
            obj.Books.RemapLinks(mapping);
            obj.Containers.RemapLinks(mapping);
            obj.Doors.RemapLinks(mapping);
            obj.Ingredients.RemapLinks(mapping);
            obj.Lights.RemapLinks(mapping);
            obj.MiscItems.RemapLinks(mapping);
            obj.AlchemicalApparatuses.RemapLinks(mapping);
            obj.Statics.RemapLinks(mapping);
            obj.MoveableStatics.RemapLinks(mapping);
            obj.Grasses.RemapLinks(mapping);
            obj.Trees.RemapLinks(mapping);
            obj.Florae.RemapLinks(mapping);
            obj.Furniture.RemapLinks(mapping);
            obj.Weapons.RemapLinks(mapping);
            obj.Ammunitions.RemapLinks(mapping);
            obj.Npcs.RemapLinks(mapping);
            obj.LeveledNpcs.RemapLinks(mapping);
            obj.Keys.RemapLinks(mapping);
            obj.Ingestibles.RemapLinks(mapping);
            obj.IdleMarkers.RemapLinks(mapping);
            obj.ConstructibleObjects.RemapLinks(mapping);
            obj.Projectiles.RemapLinks(mapping);
            obj.Hazards.RemapLinks(mapping);
            obj.SoulGems.RemapLinks(mapping);
            obj.LeveledItems.RemapLinks(mapping);
            obj.Weathers.RemapLinks(mapping);
            obj.Climates.RemapLinks(mapping);
            obj.ShaderParticleGeometries.RemapLinks(mapping);
            obj.VisualEffects.RemapLinks(mapping);
            obj.Regions.RemapLinks(mapping);
            obj.NavigationMeshInfoMaps.RemapLinks(mapping);
            obj.Cells.RemapLinks(mapping);
            obj.Worldspaces.RemapLinks(mapping);
            obj.DialogTopics.RemapLinks(mapping);
            obj.Quests.RemapLinks(mapping);
            obj.IdleAnimations.RemapLinks(mapping);
            obj.Packages.RemapLinks(mapping);
            obj.CombatStyles.RemapLinks(mapping);
            obj.LoadScreens.RemapLinks(mapping);
            obj.LeveledSpells.RemapLinks(mapping);
            obj.AnimatedObjects.RemapLinks(mapping);
            obj.Waters.RemapLinks(mapping);
            obj.EffectShaders.RemapLinks(mapping);
            obj.Explosions.RemapLinks(mapping);
            obj.Debris.RemapLinks(mapping);
            obj.ImageSpaces.RemapLinks(mapping);
            obj.ImageSpaceAdapters.RemapLinks(mapping);
            obj.FormLists.RemapLinks(mapping);
            obj.Perks.RemapLinks(mapping);
            obj.BodyParts.RemapLinks(mapping);
            obj.AddonNodes.RemapLinks(mapping);
            obj.ActorValueInformation.RemapLinks(mapping);
            obj.CameraShots.RemapLinks(mapping);
            obj.CameraPaths.RemapLinks(mapping);
            obj.VoiceTypes.RemapLinks(mapping);
            obj.MaterialTypes.RemapLinks(mapping);
            obj.Impacts.RemapLinks(mapping);
            obj.ImpactDataSets.RemapLinks(mapping);
            obj.ArmorAddons.RemapLinks(mapping);
            obj.EncounterZones.RemapLinks(mapping);
            obj.Locations.RemapLinks(mapping);
            obj.Messages.RemapLinks(mapping);
            obj.DefaultObjectManagers.RemapLinks(mapping);
            obj.LightingTemplates.RemapLinks(mapping);
            obj.MusicTypes.RemapLinks(mapping);
            obj.Footsteps.RemapLinks(mapping);
            obj.FootstepSets.RemapLinks(mapping);
            obj.StoryManagerBranchNodes.RemapLinks(mapping);
            obj.StoryManagerQuestNodes.RemapLinks(mapping);
            obj.StoryManagerEventNodes.RemapLinks(mapping);
            obj.DialogBranches.RemapLinks(mapping);
            obj.MusicTracks.RemapLinks(mapping);
            obj.DialogViews.RemapLinks(mapping);
            obj.WordsOfPower.RemapLinks(mapping);
            obj.Shouts.RemapLinks(mapping);
            obj.EquipTypes.RemapLinks(mapping);
            obj.Relationships.RemapLinks(mapping);
            obj.Scenes.RemapLinks(mapping);
            obj.AssociationTypes.RemapLinks(mapping);
            obj.Outfits.RemapLinks(mapping);
            obj.ArtObjects.RemapLinks(mapping);
            obj.MaterialObjects.RemapLinks(mapping);
            obj.MovementTypes.RemapLinks(mapping);
            obj.SoundDescriptors.RemapLinks(mapping);
            obj.DualCastData.RemapLinks(mapping);
            obj.SoundCategories.RemapLinks(mapping);
            obj.SoundOutputModels.RemapLinks(mapping);
            obj.CollisionLayers.RemapLinks(mapping);
            obj.Colors.RemapLinks(mapping);
            obj.ReverbParameters.RemapLinks(mapping);
            obj.VolumetricLightings.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IFallout4Mod obj)
        {
            foreach (var item in Fallout4ModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            IFallout4Mod obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in Fallout4ModCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IFallout4Mod obj,
            HashSet<FormKey> keys)
        {
            obj.GameSettings.Remove(keys);
            obj.Keywords.Remove(keys);
            obj.LocationReferenceTypes.Remove(keys);
            obj.Actions.Remove(keys);
            obj.TextureSets.Remove(keys);
            obj.Globals.Remove(keys);
            obj.Classes.Remove(keys);
            obj.Factions.Remove(keys);
            obj.HeadParts.Remove(keys);
            obj.Hairs.Remove(keys);
            obj.Eyes.Remove(keys);
            obj.Races.Remove(keys);
            obj.SoundMarkers.Remove(keys);
            obj.AcousticSpaces.Remove(keys);
            obj.MagicEffects.Remove(keys);
            obj.LandscapeTextures.Remove(keys);
            obj.ObjectEffects.Remove(keys);
            obj.Spells.Remove(keys);
            obj.Scrolls.Remove(keys);
            obj.Activators.Remove(keys);
            obj.TalkingActivators.Remove(keys);
            obj.Armors.Remove(keys);
            obj.Books.Remove(keys);
            obj.Containers.Remove(keys);
            obj.Doors.Remove(keys);
            obj.Ingredients.Remove(keys);
            obj.Lights.Remove(keys);
            obj.MiscItems.Remove(keys);
            obj.AlchemicalApparatuses.Remove(keys);
            obj.Statics.Remove(keys);
            obj.MoveableStatics.Remove(keys);
            obj.Grasses.Remove(keys);
            obj.Trees.Remove(keys);
            obj.Florae.Remove(keys);
            obj.Furniture.Remove(keys);
            obj.Weapons.Remove(keys);
            obj.Ammunitions.Remove(keys);
            obj.Npcs.Remove(keys);
            obj.LeveledNpcs.Remove(keys);
            obj.Keys.Remove(keys);
            obj.Ingestibles.Remove(keys);
            obj.IdleMarkers.Remove(keys);
            obj.ConstructibleObjects.Remove(keys);
            obj.Projectiles.Remove(keys);
            obj.Hazards.Remove(keys);
            obj.SoulGems.Remove(keys);
            obj.LeveledItems.Remove(keys);
            obj.Weathers.Remove(keys);
            obj.Climates.Remove(keys);
            obj.ShaderParticleGeometries.Remove(keys);
            obj.VisualEffects.Remove(keys);
            obj.Regions.Remove(keys);
            obj.NavigationMeshInfoMaps.Remove(keys);
            obj.Cells.Remove(keys);
            obj.Worldspaces.Remove(keys);
            obj.DialogTopics.Remove(keys);
            obj.Quests.Remove(keys);
            obj.IdleAnimations.Remove(keys);
            obj.Packages.Remove(keys);
            obj.CombatStyles.Remove(keys);
            obj.LoadScreens.Remove(keys);
            obj.LeveledSpells.Remove(keys);
            obj.AnimatedObjects.Remove(keys);
            obj.Waters.Remove(keys);
            obj.EffectShaders.Remove(keys);
            obj.Explosions.Remove(keys);
            obj.Debris.Remove(keys);
            obj.ImageSpaces.Remove(keys);
            obj.ImageSpaceAdapters.Remove(keys);
            obj.FormLists.Remove(keys);
            obj.Perks.Remove(keys);
            obj.BodyParts.Remove(keys);
            obj.AddonNodes.Remove(keys);
            obj.ActorValueInformation.Remove(keys);
            obj.CameraShots.Remove(keys);
            obj.CameraPaths.Remove(keys);
            obj.VoiceTypes.Remove(keys);
            obj.MaterialTypes.Remove(keys);
            obj.Impacts.Remove(keys);
            obj.ImpactDataSets.Remove(keys);
            obj.ArmorAddons.Remove(keys);
            obj.EncounterZones.Remove(keys);
            obj.Locations.Remove(keys);
            obj.Messages.Remove(keys);
            obj.DefaultObjectManagers.Remove(keys);
            obj.LightingTemplates.Remove(keys);
            obj.MusicTypes.Remove(keys);
            obj.Footsteps.Remove(keys);
            obj.FootstepSets.Remove(keys);
            obj.StoryManagerBranchNodes.Remove(keys);
            obj.StoryManagerQuestNodes.Remove(keys);
            obj.StoryManagerEventNodes.Remove(keys);
            obj.DialogBranches.Remove(keys);
            obj.MusicTracks.Remove(keys);
            obj.DialogViews.Remove(keys);
            obj.WordsOfPower.Remove(keys);
            obj.Shouts.Remove(keys);
            obj.EquipTypes.Remove(keys);
            obj.Relationships.Remove(keys);
            obj.Scenes.Remove(keys);
            obj.AssociationTypes.Remove(keys);
            obj.Outfits.Remove(keys);
            obj.ArtObjects.Remove(keys);
            obj.MaterialObjects.Remove(keys);
            obj.MovementTypes.Remove(keys);
            obj.SoundDescriptors.Remove(keys);
            obj.DualCastData.Remove(keys);
            obj.SoundCategories.Remove(keys);
            obj.SoundOutputModels.Remove(keys);
            obj.CollisionLayers.Remove(keys);
            obj.Colors.Remove(keys);
            obj.ReverbParameters.Remove(keys);
            obj.VolumetricLightings.Remove(keys);
        }
        
        public void Remove(
            IFallout4Mod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    obj.GameSettings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    obj.Keywords.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    obj.LocationReferenceTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    obj.Actions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    obj.TextureSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    obj.Globals.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    obj.Classes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    obj.Factions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    obj.HeadParts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    obj.Hairs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    obj.Eyes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    obj.Races.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    obj.SoundMarkers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    obj.AcousticSpaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    obj.MagicEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    obj.LandscapeTextures.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    obj.ObjectEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    obj.Spells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    obj.Scrolls.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    obj.Activators.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    obj.TalkingActivators.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    obj.Armors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    obj.Books.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    obj.Containers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    obj.Doors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    obj.Ingredients.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    obj.Lights.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    obj.MiscItems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    obj.AlchemicalApparatuses.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    obj.Statics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    obj.MoveableStatics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    obj.Grasses.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    obj.Trees.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    obj.Florae.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    obj.Furniture.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    obj.Weapons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    obj.Ammunitions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    obj.Npcs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    obj.LeveledNpcs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    obj.Keys.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    obj.Ingestibles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    obj.IdleMarkers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    obj.ConstructibleObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    obj.Projectiles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    obj.Hazards.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    obj.SoulGems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    obj.LeveledItems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    obj.Weathers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    obj.Climates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    obj.ShaderParticleGeometries.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    obj.VisualEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    obj.Regions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    obj.NavigationMeshInfoMaps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    obj.DialogTopics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    obj.IdleAnimations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    obj.Packages.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    obj.CombatStyles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    obj.LoadScreens.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    obj.LeveledSpells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    obj.AnimatedObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    obj.Waters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    obj.EffectShaders.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    obj.Explosions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    obj.Debris.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    obj.ImageSpaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    obj.ImageSpaceAdapters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    obj.FormLists.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    obj.Perks.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    obj.BodyParts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    obj.AddonNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    obj.ActorValueInformation.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    obj.CameraShots.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    obj.CameraPaths.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    obj.VoiceTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    obj.MaterialTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    obj.Impacts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    obj.ImpactDataSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    obj.ArmorAddons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    obj.EncounterZones.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    obj.Locations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    obj.Messages.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    obj.DefaultObjectManagers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    obj.LightingTemplates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    obj.MusicTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    obj.Footsteps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    obj.FootstepSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    obj.StoryManagerBranchNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    obj.StoryManagerQuestNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    obj.StoryManagerEventNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    obj.DialogBranches.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    obj.MusicTracks.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    obj.DialogViews.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "WordOfPower":
                case "IWordOfPowerGetter":
                case "IWordOfPower":
                case "IWordOfPowerInternal":
                    obj.WordsOfPower.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Shout":
                case "IShoutGetter":
                case "IShout":
                case "IShoutInternal":
                    obj.Shouts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    obj.EquipTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    obj.Relationships.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    obj.Scenes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    obj.AssociationTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    obj.Outfits.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    obj.ArtObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    obj.MaterialObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    obj.MovementTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    obj.SoundDescriptors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DualCastData":
                case "IDualCastDataGetter":
                case "IDualCastData":
                case "IDualCastDataInternal":
                    obj.DualCastData.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    obj.SoundCategories.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    obj.SoundOutputModels.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    obj.CollisionLayers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    obj.Colors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    obj.ReverbParameters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    obj.VolumetricLightings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "APlaced":
                case "IAPlacedGetter":
                case "IAPlaced":
                case "IAPlacedInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    obj.DialogTopics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IIdleRelation":
                case "IIdleRelationGetter":
                    Remove(obj, keys, typeof(IActionRecordGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleAnimationGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IObjectId":
                case "IObjectIdGetter":
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IShoutGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IItem":
                case "IItemGetter":
                    Remove(obj, keys, typeof(IAlchemicalApparatusGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoulGemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IOutfitTarget":
                case "IOutfitTargetGetter":
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IComplexLocation":
                case "IComplexLocationGetter":
                    Remove(obj, keys, typeof(IWorldspaceGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IDialog":
                case "IDialogGetter":
                    Remove(obj, keys, typeof(IDialogTopicGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILocationTargetable":
                case "ILocationTargetableGetter":
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IOwner":
                case "IOwnerGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IRelatable":
                case "IRelatableGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IRaceGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IRegionTarget":
                case "IRegionTargetGetter":
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILandscapeTextureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITreeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IAliasVoiceType":
                case "IAliasVoiceTypeGetter":
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILockList":
                case "ILockListGetter":
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlacedTrapTarget":
                case "IPlacedTrapTargetGetter":
                    Remove(obj, keys, typeof(IHazardGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IHarvestTarget":
                case "IHarvestTargetGetter":
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                    Remove(obj, keys, typeof(IKeywordGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "INpcSpawn":
                case "INpcSpawnGetter":
                    Remove(obj, keys, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ISpellSpawn":
                case "ISpellSpawnGetter":
                    Remove(obj, keys, typeof(ILeveledSpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IEmittance":
                case "IEmittanceGetter":
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IRegionGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILocationRecord":
                case "ILocationRecordGetter":
                    Remove(obj, keys, typeof(ILocationGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILocationReferenceTypeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IEffectRecord":
                case "IEffectRecordGetter":
                    Remove(obj, keys, typeof(IObjectEffectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILinkedReference":
                case "ILinkedReferenceGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlacedSimple":
                case "IPlacedSimpleGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlacedThing":
                case "IPlacedThingGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ISound":
                case "ISoundGetter":
                    Remove(obj, keys, typeof(ISoundDescriptorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFallout4Mod item,
            MutagenFrame frame,
            Fallout4Release release,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            UtilityTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                fillStructs: Fallout4ModBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: Fallout4ModBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class Fallout4ModCommon
    {
        public static readonly Fallout4ModCommon Instance = new Fallout4ModCommon();

        public Fallout4Mod.Mask<bool> GetEqualsMask(
            IFallout4ModGetter item,
            IFallout4ModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Fallout4Mod.Mask<bool>(false);
            ((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFallout4ModGetter item,
            IFallout4ModGetter rhs,
            Fallout4Mod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Keywords = MaskItemExt.Factory(item.Keywords.GetEqualsMask(rhs.Keywords, include), include);
            ret.LocationReferenceTypes = MaskItemExt.Factory(item.LocationReferenceTypes.GetEqualsMask(rhs.LocationReferenceTypes, include), include);
            ret.Actions = MaskItemExt.Factory(item.Actions.GetEqualsMask(rhs.Actions, include), include);
            ret.TextureSets = MaskItemExt.Factory(item.TextureSets.GetEqualsMask(rhs.TextureSets, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
            ret.Classes = MaskItemExt.Factory(item.Classes.GetEqualsMask(rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(item.Factions.GetEqualsMask(rhs.Factions, include), include);
            ret.HeadParts = MaskItemExt.Factory(item.HeadParts.GetEqualsMask(rhs.HeadParts, include), include);
            ret.Hairs = MaskItemExt.Factory(item.Hairs.GetEqualsMask(rhs.Hairs, include), include);
            ret.Eyes = MaskItemExt.Factory(item.Eyes.GetEqualsMask(rhs.Eyes, include), include);
            ret.Races = MaskItemExt.Factory(item.Races.GetEqualsMask(rhs.Races, include), include);
            ret.SoundMarkers = MaskItemExt.Factory(item.SoundMarkers.GetEqualsMask(rhs.SoundMarkers, include), include);
            ret.AcousticSpaces = MaskItemExt.Factory(item.AcousticSpaces.GetEqualsMask(rhs.AcousticSpaces, include), include);
            ret.MagicEffects = MaskItemExt.Factory(item.MagicEffects.GetEqualsMask(rhs.MagicEffects, include), include);
            ret.LandscapeTextures = MaskItemExt.Factory(item.LandscapeTextures.GetEqualsMask(rhs.LandscapeTextures, include), include);
            ret.ObjectEffects = MaskItemExt.Factory(item.ObjectEffects.GetEqualsMask(rhs.ObjectEffects, include), include);
            ret.Spells = MaskItemExt.Factory(item.Spells.GetEqualsMask(rhs.Spells, include), include);
            ret.Scrolls = MaskItemExt.Factory(item.Scrolls.GetEqualsMask(rhs.Scrolls, include), include);
            ret.Activators = MaskItemExt.Factory(item.Activators.GetEqualsMask(rhs.Activators, include), include);
            ret.TalkingActivators = MaskItemExt.Factory(item.TalkingActivators.GetEqualsMask(rhs.TalkingActivators, include), include);
            ret.Armors = MaskItemExt.Factory(item.Armors.GetEqualsMask(rhs.Armors, include), include);
            ret.Books = MaskItemExt.Factory(item.Books.GetEqualsMask(rhs.Books, include), include);
            ret.Containers = MaskItemExt.Factory(item.Containers.GetEqualsMask(rhs.Containers, include), include);
            ret.Doors = MaskItemExt.Factory(item.Doors.GetEqualsMask(rhs.Doors, include), include);
            ret.Ingredients = MaskItemExt.Factory(item.Ingredients.GetEqualsMask(rhs.Ingredients, include), include);
            ret.Lights = MaskItemExt.Factory(item.Lights.GetEqualsMask(rhs.Lights, include), include);
            ret.MiscItems = MaskItemExt.Factory(item.MiscItems.GetEqualsMask(rhs.MiscItems, include), include);
            ret.AlchemicalApparatuses = MaskItemExt.Factory(item.AlchemicalApparatuses.GetEqualsMask(rhs.AlchemicalApparatuses, include), include);
            ret.Statics = MaskItemExt.Factory(item.Statics.GetEqualsMask(rhs.Statics, include), include);
            ret.MoveableStatics = MaskItemExt.Factory(item.MoveableStatics.GetEqualsMask(rhs.MoveableStatics, include), include);
            ret.Grasses = MaskItemExt.Factory(item.Grasses.GetEqualsMask(rhs.Grasses, include), include);
            ret.Trees = MaskItemExt.Factory(item.Trees.GetEqualsMask(rhs.Trees, include), include);
            ret.Florae = MaskItemExt.Factory(item.Florae.GetEqualsMask(rhs.Florae, include), include);
            ret.Furniture = MaskItemExt.Factory(item.Furniture.GetEqualsMask(rhs.Furniture, include), include);
            ret.Weapons = MaskItemExt.Factory(item.Weapons.GetEqualsMask(rhs.Weapons, include), include);
            ret.Ammunitions = MaskItemExt.Factory(item.Ammunitions.GetEqualsMask(rhs.Ammunitions, include), include);
            ret.Npcs = MaskItemExt.Factory(item.Npcs.GetEqualsMask(rhs.Npcs, include), include);
            ret.LeveledNpcs = MaskItemExt.Factory(item.LeveledNpcs.GetEqualsMask(rhs.LeveledNpcs, include), include);
            ret.Keys = MaskItemExt.Factory(item.Keys.GetEqualsMask(rhs.Keys, include), include);
            ret.Ingestibles = MaskItemExt.Factory(item.Ingestibles.GetEqualsMask(rhs.Ingestibles, include), include);
            ret.IdleMarkers = MaskItemExt.Factory(item.IdleMarkers.GetEqualsMask(rhs.IdleMarkers, include), include);
            ret.ConstructibleObjects = MaskItemExt.Factory(item.ConstructibleObjects.GetEqualsMask(rhs.ConstructibleObjects, include), include);
            ret.Projectiles = MaskItemExt.Factory(item.Projectiles.GetEqualsMask(rhs.Projectiles, include), include);
            ret.Hazards = MaskItemExt.Factory(item.Hazards.GetEqualsMask(rhs.Hazards, include), include);
            ret.SoulGems = MaskItemExt.Factory(item.SoulGems.GetEqualsMask(rhs.SoulGems, include), include);
            ret.LeveledItems = MaskItemExt.Factory(item.LeveledItems.GetEqualsMask(rhs.LeveledItems, include), include);
            ret.Weathers = MaskItemExt.Factory(item.Weathers.GetEqualsMask(rhs.Weathers, include), include);
            ret.Climates = MaskItemExt.Factory(item.Climates.GetEqualsMask(rhs.Climates, include), include);
            ret.ShaderParticleGeometries = MaskItemExt.Factory(item.ShaderParticleGeometries.GetEqualsMask(rhs.ShaderParticleGeometries, include), include);
            ret.VisualEffects = MaskItemExt.Factory(item.VisualEffects.GetEqualsMask(rhs.VisualEffects, include), include);
            ret.Regions = MaskItemExt.Factory(item.Regions.GetEqualsMask(rhs.Regions, include), include);
            ret.NavigationMeshInfoMaps = MaskItemExt.Factory(item.NavigationMeshInfoMaps.GetEqualsMask(rhs.NavigationMeshInfoMaps, include), include);
            ret.Cells = MaskItemExt.Factory(item.Cells.GetEqualsMask(rhs.Cells, include), include);
            ret.Worldspaces = MaskItemExt.Factory(item.Worldspaces.GetEqualsMask(rhs.Worldspaces, include), include);
            ret.DialogTopics = MaskItemExt.Factory(item.DialogTopics.GetEqualsMask(rhs.DialogTopics, include), include);
            ret.Quests = MaskItemExt.Factory(item.Quests.GetEqualsMask(rhs.Quests, include), include);
            ret.IdleAnimations = MaskItemExt.Factory(item.IdleAnimations.GetEqualsMask(rhs.IdleAnimations, include), include);
            ret.Packages = MaskItemExt.Factory(item.Packages.GetEqualsMask(rhs.Packages, include), include);
            ret.CombatStyles = MaskItemExt.Factory(item.CombatStyles.GetEqualsMask(rhs.CombatStyles, include), include);
            ret.LoadScreens = MaskItemExt.Factory(item.LoadScreens.GetEqualsMask(rhs.LoadScreens, include), include);
            ret.LeveledSpells = MaskItemExt.Factory(item.LeveledSpells.GetEqualsMask(rhs.LeveledSpells, include), include);
            ret.AnimatedObjects = MaskItemExt.Factory(item.AnimatedObjects.GetEqualsMask(rhs.AnimatedObjects, include), include);
            ret.Waters = MaskItemExt.Factory(item.Waters.GetEqualsMask(rhs.Waters, include), include);
            ret.EffectShaders = MaskItemExt.Factory(item.EffectShaders.GetEqualsMask(rhs.EffectShaders, include), include);
            ret.Explosions = MaskItemExt.Factory(item.Explosions.GetEqualsMask(rhs.Explosions, include), include);
            ret.Debris = MaskItemExt.Factory(item.Debris.GetEqualsMask(rhs.Debris, include), include);
            ret.ImageSpaces = MaskItemExt.Factory(item.ImageSpaces.GetEqualsMask(rhs.ImageSpaces, include), include);
            ret.ImageSpaceAdapters = MaskItemExt.Factory(item.ImageSpaceAdapters.GetEqualsMask(rhs.ImageSpaceAdapters, include), include);
            ret.FormLists = MaskItemExt.Factory(item.FormLists.GetEqualsMask(rhs.FormLists, include), include);
            ret.Perks = MaskItemExt.Factory(item.Perks.GetEqualsMask(rhs.Perks, include), include);
            ret.BodyParts = MaskItemExt.Factory(item.BodyParts.GetEqualsMask(rhs.BodyParts, include), include);
            ret.AddonNodes = MaskItemExt.Factory(item.AddonNodes.GetEqualsMask(rhs.AddonNodes, include), include);
            ret.ActorValueInformation = MaskItemExt.Factory(item.ActorValueInformation.GetEqualsMask(rhs.ActorValueInformation, include), include);
            ret.CameraShots = MaskItemExt.Factory(item.CameraShots.GetEqualsMask(rhs.CameraShots, include), include);
            ret.CameraPaths = MaskItemExt.Factory(item.CameraPaths.GetEqualsMask(rhs.CameraPaths, include), include);
            ret.VoiceTypes = MaskItemExt.Factory(item.VoiceTypes.GetEqualsMask(rhs.VoiceTypes, include), include);
            ret.MaterialTypes = MaskItemExt.Factory(item.MaterialTypes.GetEqualsMask(rhs.MaterialTypes, include), include);
            ret.Impacts = MaskItemExt.Factory(item.Impacts.GetEqualsMask(rhs.Impacts, include), include);
            ret.ImpactDataSets = MaskItemExt.Factory(item.ImpactDataSets.GetEqualsMask(rhs.ImpactDataSets, include), include);
            ret.ArmorAddons = MaskItemExt.Factory(item.ArmorAddons.GetEqualsMask(rhs.ArmorAddons, include), include);
            ret.EncounterZones = MaskItemExt.Factory(item.EncounterZones.GetEqualsMask(rhs.EncounterZones, include), include);
            ret.Locations = MaskItemExt.Factory(item.Locations.GetEqualsMask(rhs.Locations, include), include);
            ret.Messages = MaskItemExt.Factory(item.Messages.GetEqualsMask(rhs.Messages, include), include);
            ret.DefaultObjectManagers = MaskItemExt.Factory(item.DefaultObjectManagers.GetEqualsMask(rhs.DefaultObjectManagers, include), include);
            ret.LightingTemplates = MaskItemExt.Factory(item.LightingTemplates.GetEqualsMask(rhs.LightingTemplates, include), include);
            ret.MusicTypes = MaskItemExt.Factory(item.MusicTypes.GetEqualsMask(rhs.MusicTypes, include), include);
            ret.Footsteps = MaskItemExt.Factory(item.Footsteps.GetEqualsMask(rhs.Footsteps, include), include);
            ret.FootstepSets = MaskItemExt.Factory(item.FootstepSets.GetEqualsMask(rhs.FootstepSets, include), include);
            ret.StoryManagerBranchNodes = MaskItemExt.Factory(item.StoryManagerBranchNodes.GetEqualsMask(rhs.StoryManagerBranchNodes, include), include);
            ret.StoryManagerQuestNodes = MaskItemExt.Factory(item.StoryManagerQuestNodes.GetEqualsMask(rhs.StoryManagerQuestNodes, include), include);
            ret.StoryManagerEventNodes = MaskItemExt.Factory(item.StoryManagerEventNodes.GetEqualsMask(rhs.StoryManagerEventNodes, include), include);
            ret.DialogBranches = MaskItemExt.Factory(item.DialogBranches.GetEqualsMask(rhs.DialogBranches, include), include);
            ret.MusicTracks = MaskItemExt.Factory(item.MusicTracks.GetEqualsMask(rhs.MusicTracks, include), include);
            ret.DialogViews = MaskItemExt.Factory(item.DialogViews.GetEqualsMask(rhs.DialogViews, include), include);
            ret.WordsOfPower = MaskItemExt.Factory(item.WordsOfPower.GetEqualsMask(rhs.WordsOfPower, include), include);
            ret.Shouts = MaskItemExt.Factory(item.Shouts.GetEqualsMask(rhs.Shouts, include), include);
            ret.EquipTypes = MaskItemExt.Factory(item.EquipTypes.GetEqualsMask(rhs.EquipTypes, include), include);
            ret.Relationships = MaskItemExt.Factory(item.Relationships.GetEqualsMask(rhs.Relationships, include), include);
            ret.Scenes = MaskItemExt.Factory(item.Scenes.GetEqualsMask(rhs.Scenes, include), include);
            ret.AssociationTypes = MaskItemExt.Factory(item.AssociationTypes.GetEqualsMask(rhs.AssociationTypes, include), include);
            ret.Outfits = MaskItemExt.Factory(item.Outfits.GetEqualsMask(rhs.Outfits, include), include);
            ret.ArtObjects = MaskItemExt.Factory(item.ArtObjects.GetEqualsMask(rhs.ArtObjects, include), include);
            ret.MaterialObjects = MaskItemExt.Factory(item.MaterialObjects.GetEqualsMask(rhs.MaterialObjects, include), include);
            ret.MovementTypes = MaskItemExt.Factory(item.MovementTypes.GetEqualsMask(rhs.MovementTypes, include), include);
            ret.SoundDescriptors = MaskItemExt.Factory(item.SoundDescriptors.GetEqualsMask(rhs.SoundDescriptors, include), include);
            ret.DualCastData = MaskItemExt.Factory(item.DualCastData.GetEqualsMask(rhs.DualCastData, include), include);
            ret.SoundCategories = MaskItemExt.Factory(item.SoundCategories.GetEqualsMask(rhs.SoundCategories, include), include);
            ret.SoundOutputModels = MaskItemExt.Factory(item.SoundOutputModels.GetEqualsMask(rhs.SoundOutputModels, include), include);
            ret.CollisionLayers = MaskItemExt.Factory(item.CollisionLayers.GetEqualsMask(rhs.CollisionLayers, include), include);
            ret.Colors = MaskItemExt.Factory(item.Colors.GetEqualsMask(rhs.Colors, include), include);
            ret.ReverbParameters = MaskItemExt.Factory(item.ReverbParameters.GetEqualsMask(rhs.ReverbParameters, include), include);
            ret.VolumetricLightings = MaskItemExt.Factory(item.VolumetricLightings.GetEqualsMask(rhs.VolumetricLightings, include), include);
        }
        
        public string ToString(
            IFallout4ModGetter item,
            string? name = null,
            Fallout4Mod.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFallout4ModGetter item,
            FileGeneration fg,
            string? name = null,
            Fallout4Mod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Fallout4Mod =>");
            }
            else
            {
                fg.AppendLine($"{name} (Fallout4Mod) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFallout4ModGetter item,
            FileGeneration fg,
            Fallout4Mod.Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.ToString(fg, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.ToString(fg, "GameSettings");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                item.Keywords?.ToString(fg, "Keywords");
            }
            if (printMask?.LocationReferenceTypes?.Overall ?? true)
            {
                item.LocationReferenceTypes?.ToString(fg, "LocationReferenceTypes");
            }
            if (printMask?.Actions?.Overall ?? true)
            {
                item.Actions?.ToString(fg, "Actions");
            }
            if (printMask?.TextureSets?.Overall ?? true)
            {
                item.TextureSets?.ToString(fg, "TextureSets");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.ToString(fg, "Globals");
            }
            if (printMask?.Classes?.Overall ?? true)
            {
                item.Classes?.ToString(fg, "Classes");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                item.Factions?.ToString(fg, "Factions");
            }
            if (printMask?.HeadParts?.Overall ?? true)
            {
                item.HeadParts?.ToString(fg, "HeadParts");
            }
            if (printMask?.Hairs?.Overall ?? true)
            {
                item.Hairs?.ToString(fg, "Hairs");
            }
            if (printMask?.Eyes?.Overall ?? true)
            {
                item.Eyes?.ToString(fg, "Eyes");
            }
            if (printMask?.Races?.Overall ?? true)
            {
                item.Races?.ToString(fg, "Races");
            }
            if (printMask?.SoundMarkers?.Overall ?? true)
            {
                item.SoundMarkers?.ToString(fg, "SoundMarkers");
            }
            if (printMask?.AcousticSpaces?.Overall ?? true)
            {
                item.AcousticSpaces?.ToString(fg, "AcousticSpaces");
            }
            if (printMask?.MagicEffects?.Overall ?? true)
            {
                item.MagicEffects?.ToString(fg, "MagicEffects");
            }
            if (printMask?.LandscapeTextures?.Overall ?? true)
            {
                item.LandscapeTextures?.ToString(fg, "LandscapeTextures");
            }
            if (printMask?.ObjectEffects?.Overall ?? true)
            {
                item.ObjectEffects?.ToString(fg, "ObjectEffects");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                item.Spells?.ToString(fg, "Spells");
            }
            if (printMask?.Scrolls?.Overall ?? true)
            {
                item.Scrolls?.ToString(fg, "Scrolls");
            }
            if (printMask?.Activators?.Overall ?? true)
            {
                item.Activators?.ToString(fg, "Activators");
            }
            if (printMask?.TalkingActivators?.Overall ?? true)
            {
                item.TalkingActivators?.ToString(fg, "TalkingActivators");
            }
            if (printMask?.Armors?.Overall ?? true)
            {
                item.Armors?.ToString(fg, "Armors");
            }
            if (printMask?.Books?.Overall ?? true)
            {
                item.Books?.ToString(fg, "Books");
            }
            if (printMask?.Containers?.Overall ?? true)
            {
                item.Containers?.ToString(fg, "Containers");
            }
            if (printMask?.Doors?.Overall ?? true)
            {
                item.Doors?.ToString(fg, "Doors");
            }
            if (printMask?.Ingredients?.Overall ?? true)
            {
                item.Ingredients?.ToString(fg, "Ingredients");
            }
            if (printMask?.Lights?.Overall ?? true)
            {
                item.Lights?.ToString(fg, "Lights");
            }
            if (printMask?.MiscItems?.Overall ?? true)
            {
                item.MiscItems?.ToString(fg, "MiscItems");
            }
            if (printMask?.AlchemicalApparatuses?.Overall ?? true)
            {
                item.AlchemicalApparatuses?.ToString(fg, "AlchemicalApparatuses");
            }
            if (printMask?.Statics?.Overall ?? true)
            {
                item.Statics?.ToString(fg, "Statics");
            }
            if (printMask?.MoveableStatics?.Overall ?? true)
            {
                item.MoveableStatics?.ToString(fg, "MoveableStatics");
            }
            if (printMask?.Grasses?.Overall ?? true)
            {
                item.Grasses?.ToString(fg, "Grasses");
            }
            if (printMask?.Trees?.Overall ?? true)
            {
                item.Trees?.ToString(fg, "Trees");
            }
            if (printMask?.Florae?.Overall ?? true)
            {
                item.Florae?.ToString(fg, "Florae");
            }
            if (printMask?.Furniture?.Overall ?? true)
            {
                item.Furniture?.ToString(fg, "Furniture");
            }
            if (printMask?.Weapons?.Overall ?? true)
            {
                item.Weapons?.ToString(fg, "Weapons");
            }
            if (printMask?.Ammunitions?.Overall ?? true)
            {
                item.Ammunitions?.ToString(fg, "Ammunitions");
            }
            if (printMask?.Npcs?.Overall ?? true)
            {
                item.Npcs?.ToString(fg, "Npcs");
            }
            if (printMask?.LeveledNpcs?.Overall ?? true)
            {
                item.LeveledNpcs?.ToString(fg, "LeveledNpcs");
            }
            if (printMask?.Keys?.Overall ?? true)
            {
                item.Keys?.ToString(fg, "Keys");
            }
            if (printMask?.Ingestibles?.Overall ?? true)
            {
                item.Ingestibles?.ToString(fg, "Ingestibles");
            }
            if (printMask?.IdleMarkers?.Overall ?? true)
            {
                item.IdleMarkers?.ToString(fg, "IdleMarkers");
            }
            if (printMask?.ConstructibleObjects?.Overall ?? true)
            {
                item.ConstructibleObjects?.ToString(fg, "ConstructibleObjects");
            }
            if (printMask?.Projectiles?.Overall ?? true)
            {
                item.Projectiles?.ToString(fg, "Projectiles");
            }
            if (printMask?.Hazards?.Overall ?? true)
            {
                item.Hazards?.ToString(fg, "Hazards");
            }
            if (printMask?.SoulGems?.Overall ?? true)
            {
                item.SoulGems?.ToString(fg, "SoulGems");
            }
            if (printMask?.LeveledItems?.Overall ?? true)
            {
                item.LeveledItems?.ToString(fg, "LeveledItems");
            }
            if (printMask?.Weathers?.Overall ?? true)
            {
                item.Weathers?.ToString(fg, "Weathers");
            }
            if (printMask?.Climates?.Overall ?? true)
            {
                item.Climates?.ToString(fg, "Climates");
            }
            if (printMask?.ShaderParticleGeometries?.Overall ?? true)
            {
                item.ShaderParticleGeometries?.ToString(fg, "ShaderParticleGeometries");
            }
            if (printMask?.VisualEffects?.Overall ?? true)
            {
                item.VisualEffects?.ToString(fg, "VisualEffects");
            }
            if (printMask?.Regions?.Overall ?? true)
            {
                item.Regions?.ToString(fg, "Regions");
            }
            if (printMask?.NavigationMeshInfoMaps?.Overall ?? true)
            {
                item.NavigationMeshInfoMaps?.ToString(fg, "NavigationMeshInfoMaps");
            }
            if (printMask?.Cells?.Overall ?? true)
            {
                item.Cells?.ToString(fg, "Cells");
            }
            if (printMask?.Worldspaces?.Overall ?? true)
            {
                item.Worldspaces?.ToString(fg, "Worldspaces");
            }
            if (printMask?.DialogTopics?.Overall ?? true)
            {
                item.DialogTopics?.ToString(fg, "DialogTopics");
            }
            if (printMask?.Quests?.Overall ?? true)
            {
                item.Quests?.ToString(fg, "Quests");
            }
            if (printMask?.IdleAnimations?.Overall ?? true)
            {
                item.IdleAnimations?.ToString(fg, "IdleAnimations");
            }
            if (printMask?.Packages?.Overall ?? true)
            {
                item.Packages?.ToString(fg, "Packages");
            }
            if (printMask?.CombatStyles?.Overall ?? true)
            {
                item.CombatStyles?.ToString(fg, "CombatStyles");
            }
            if (printMask?.LoadScreens?.Overall ?? true)
            {
                item.LoadScreens?.ToString(fg, "LoadScreens");
            }
            if (printMask?.LeveledSpells?.Overall ?? true)
            {
                item.LeveledSpells?.ToString(fg, "LeveledSpells");
            }
            if (printMask?.AnimatedObjects?.Overall ?? true)
            {
                item.AnimatedObjects?.ToString(fg, "AnimatedObjects");
            }
            if (printMask?.Waters?.Overall ?? true)
            {
                item.Waters?.ToString(fg, "Waters");
            }
            if (printMask?.EffectShaders?.Overall ?? true)
            {
                item.EffectShaders?.ToString(fg, "EffectShaders");
            }
            if (printMask?.Explosions?.Overall ?? true)
            {
                item.Explosions?.ToString(fg, "Explosions");
            }
            if (printMask?.Debris?.Overall ?? true)
            {
                item.Debris?.ToString(fg, "Debris");
            }
            if (printMask?.ImageSpaces?.Overall ?? true)
            {
                item.ImageSpaces?.ToString(fg, "ImageSpaces");
            }
            if (printMask?.ImageSpaceAdapters?.Overall ?? true)
            {
                item.ImageSpaceAdapters?.ToString(fg, "ImageSpaceAdapters");
            }
            if (printMask?.FormLists?.Overall ?? true)
            {
                item.FormLists?.ToString(fg, "FormLists");
            }
            if (printMask?.Perks?.Overall ?? true)
            {
                item.Perks?.ToString(fg, "Perks");
            }
            if (printMask?.BodyParts?.Overall ?? true)
            {
                item.BodyParts?.ToString(fg, "BodyParts");
            }
            if (printMask?.AddonNodes?.Overall ?? true)
            {
                item.AddonNodes?.ToString(fg, "AddonNodes");
            }
            if (printMask?.ActorValueInformation?.Overall ?? true)
            {
                item.ActorValueInformation?.ToString(fg, "ActorValueInformation");
            }
            if (printMask?.CameraShots?.Overall ?? true)
            {
                item.CameraShots?.ToString(fg, "CameraShots");
            }
            if (printMask?.CameraPaths?.Overall ?? true)
            {
                item.CameraPaths?.ToString(fg, "CameraPaths");
            }
            if (printMask?.VoiceTypes?.Overall ?? true)
            {
                item.VoiceTypes?.ToString(fg, "VoiceTypes");
            }
            if (printMask?.MaterialTypes?.Overall ?? true)
            {
                item.MaterialTypes?.ToString(fg, "MaterialTypes");
            }
            if (printMask?.Impacts?.Overall ?? true)
            {
                item.Impacts?.ToString(fg, "Impacts");
            }
            if (printMask?.ImpactDataSets?.Overall ?? true)
            {
                item.ImpactDataSets?.ToString(fg, "ImpactDataSets");
            }
            if (printMask?.ArmorAddons?.Overall ?? true)
            {
                item.ArmorAddons?.ToString(fg, "ArmorAddons");
            }
            if (printMask?.EncounterZones?.Overall ?? true)
            {
                item.EncounterZones?.ToString(fg, "EncounterZones");
            }
            if (printMask?.Locations?.Overall ?? true)
            {
                item.Locations?.ToString(fg, "Locations");
            }
            if (printMask?.Messages?.Overall ?? true)
            {
                item.Messages?.ToString(fg, "Messages");
            }
            if (printMask?.DefaultObjectManagers?.Overall ?? true)
            {
                item.DefaultObjectManagers?.ToString(fg, "DefaultObjectManagers");
            }
            if (printMask?.LightingTemplates?.Overall ?? true)
            {
                item.LightingTemplates?.ToString(fg, "LightingTemplates");
            }
            if (printMask?.MusicTypes?.Overall ?? true)
            {
                item.MusicTypes?.ToString(fg, "MusicTypes");
            }
            if (printMask?.Footsteps?.Overall ?? true)
            {
                item.Footsteps?.ToString(fg, "Footsteps");
            }
            if (printMask?.FootstepSets?.Overall ?? true)
            {
                item.FootstepSets?.ToString(fg, "FootstepSets");
            }
            if (printMask?.StoryManagerBranchNodes?.Overall ?? true)
            {
                item.StoryManagerBranchNodes?.ToString(fg, "StoryManagerBranchNodes");
            }
            if (printMask?.StoryManagerQuestNodes?.Overall ?? true)
            {
                item.StoryManagerQuestNodes?.ToString(fg, "StoryManagerQuestNodes");
            }
            if (printMask?.StoryManagerEventNodes?.Overall ?? true)
            {
                item.StoryManagerEventNodes?.ToString(fg, "StoryManagerEventNodes");
            }
            if (printMask?.DialogBranches?.Overall ?? true)
            {
                item.DialogBranches?.ToString(fg, "DialogBranches");
            }
            if (printMask?.MusicTracks?.Overall ?? true)
            {
                item.MusicTracks?.ToString(fg, "MusicTracks");
            }
            if (printMask?.DialogViews?.Overall ?? true)
            {
                item.DialogViews?.ToString(fg, "DialogViews");
            }
            if (printMask?.WordsOfPower?.Overall ?? true)
            {
                item.WordsOfPower?.ToString(fg, "WordsOfPower");
            }
            if (printMask?.Shouts?.Overall ?? true)
            {
                item.Shouts?.ToString(fg, "Shouts");
            }
            if (printMask?.EquipTypes?.Overall ?? true)
            {
                item.EquipTypes?.ToString(fg, "EquipTypes");
            }
            if (printMask?.Relationships?.Overall ?? true)
            {
                item.Relationships?.ToString(fg, "Relationships");
            }
            if (printMask?.Scenes?.Overall ?? true)
            {
                item.Scenes?.ToString(fg, "Scenes");
            }
            if (printMask?.AssociationTypes?.Overall ?? true)
            {
                item.AssociationTypes?.ToString(fg, "AssociationTypes");
            }
            if (printMask?.Outfits?.Overall ?? true)
            {
                item.Outfits?.ToString(fg, "Outfits");
            }
            if (printMask?.ArtObjects?.Overall ?? true)
            {
                item.ArtObjects?.ToString(fg, "ArtObjects");
            }
            if (printMask?.MaterialObjects?.Overall ?? true)
            {
                item.MaterialObjects?.ToString(fg, "MaterialObjects");
            }
            if (printMask?.MovementTypes?.Overall ?? true)
            {
                item.MovementTypes?.ToString(fg, "MovementTypes");
            }
            if (printMask?.SoundDescriptors?.Overall ?? true)
            {
                item.SoundDescriptors?.ToString(fg, "SoundDescriptors");
            }
            if (printMask?.DualCastData?.Overall ?? true)
            {
                item.DualCastData?.ToString(fg, "DualCastData");
            }
            if (printMask?.SoundCategories?.Overall ?? true)
            {
                item.SoundCategories?.ToString(fg, "SoundCategories");
            }
            if (printMask?.SoundOutputModels?.Overall ?? true)
            {
                item.SoundOutputModels?.ToString(fg, "SoundOutputModels");
            }
            if (printMask?.CollisionLayers?.Overall ?? true)
            {
                item.CollisionLayers?.ToString(fg, "CollisionLayers");
            }
            if (printMask?.Colors?.Overall ?? true)
            {
                item.Colors?.ToString(fg, "Colors");
            }
            if (printMask?.ReverbParameters?.Overall ?? true)
            {
                item.ReverbParameters?.ToString(fg, "ReverbParameters");
            }
            if (printMask?.VolumetricLightings?.Overall ?? true)
            {
                item.VolumetricLightings?.ToString(fg, "VolumetricLightings");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFallout4ModGetter? lhs,
            IFallout4ModGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.ModHeader, rhs.ModHeader)) return false;
            if (!object.Equals(lhs.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(lhs.Keywords, rhs.Keywords)) return false;
            if (!object.Equals(lhs.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
            if (!object.Equals(lhs.Actions, rhs.Actions)) return false;
            if (!object.Equals(lhs.TextureSets, rhs.TextureSets)) return false;
            if (!object.Equals(lhs.Globals, rhs.Globals)) return false;
            if (!object.Equals(lhs.Classes, rhs.Classes)) return false;
            if (!object.Equals(lhs.Factions, rhs.Factions)) return false;
            if (!object.Equals(lhs.HeadParts, rhs.HeadParts)) return false;
            if (!object.Equals(lhs.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(lhs.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(lhs.Races, rhs.Races)) return false;
            if (!object.Equals(lhs.SoundMarkers, rhs.SoundMarkers)) return false;
            if (!object.Equals(lhs.AcousticSpaces, rhs.AcousticSpaces)) return false;
            if (!object.Equals(lhs.MagicEffects, rhs.MagicEffects)) return false;
            if (!object.Equals(lhs.LandscapeTextures, rhs.LandscapeTextures)) return false;
            if (!object.Equals(lhs.ObjectEffects, rhs.ObjectEffects)) return false;
            if (!object.Equals(lhs.Spells, rhs.Spells)) return false;
            if (!object.Equals(lhs.Scrolls, rhs.Scrolls)) return false;
            if (!object.Equals(lhs.Activators, rhs.Activators)) return false;
            if (!object.Equals(lhs.TalkingActivators, rhs.TalkingActivators)) return false;
            if (!object.Equals(lhs.Armors, rhs.Armors)) return false;
            if (!object.Equals(lhs.Books, rhs.Books)) return false;
            if (!object.Equals(lhs.Containers, rhs.Containers)) return false;
            if (!object.Equals(lhs.Doors, rhs.Doors)) return false;
            if (!object.Equals(lhs.Ingredients, rhs.Ingredients)) return false;
            if (!object.Equals(lhs.Lights, rhs.Lights)) return false;
            if (!object.Equals(lhs.MiscItems, rhs.MiscItems)) return false;
            if (!object.Equals(lhs.AlchemicalApparatuses, rhs.AlchemicalApparatuses)) return false;
            if (!object.Equals(lhs.Statics, rhs.Statics)) return false;
            if (!object.Equals(lhs.MoveableStatics, rhs.MoveableStatics)) return false;
            if (!object.Equals(lhs.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(lhs.Trees, rhs.Trees)) return false;
            if (!object.Equals(lhs.Florae, rhs.Florae)) return false;
            if (!object.Equals(lhs.Furniture, rhs.Furniture)) return false;
            if (!object.Equals(lhs.Weapons, rhs.Weapons)) return false;
            if (!object.Equals(lhs.Ammunitions, rhs.Ammunitions)) return false;
            if (!object.Equals(lhs.Npcs, rhs.Npcs)) return false;
            if (!object.Equals(lhs.LeveledNpcs, rhs.LeveledNpcs)) return false;
            if (!object.Equals(lhs.Keys, rhs.Keys)) return false;
            if (!object.Equals(lhs.Ingestibles, rhs.Ingestibles)) return false;
            if (!object.Equals(lhs.IdleMarkers, rhs.IdleMarkers)) return false;
            if (!object.Equals(lhs.ConstructibleObjects, rhs.ConstructibleObjects)) return false;
            if (!object.Equals(lhs.Projectiles, rhs.Projectiles)) return false;
            if (!object.Equals(lhs.Hazards, rhs.Hazards)) return false;
            if (!object.Equals(lhs.SoulGems, rhs.SoulGems)) return false;
            if (!object.Equals(lhs.LeveledItems, rhs.LeveledItems)) return false;
            if (!object.Equals(lhs.Weathers, rhs.Weathers)) return false;
            if (!object.Equals(lhs.Climates, rhs.Climates)) return false;
            if (!object.Equals(lhs.ShaderParticleGeometries, rhs.ShaderParticleGeometries)) return false;
            if (!object.Equals(lhs.VisualEffects, rhs.VisualEffects)) return false;
            if (!object.Equals(lhs.Regions, rhs.Regions)) return false;
            if (!object.Equals(lhs.NavigationMeshInfoMaps, rhs.NavigationMeshInfoMaps)) return false;
            if (!object.Equals(lhs.Cells, rhs.Cells)) return false;
            if (!object.Equals(lhs.Worldspaces, rhs.Worldspaces)) return false;
            if (!object.Equals(lhs.DialogTopics, rhs.DialogTopics)) return false;
            if (!object.Equals(lhs.Quests, rhs.Quests)) return false;
            if (!object.Equals(lhs.IdleAnimations, rhs.IdleAnimations)) return false;
            if (!object.Equals(lhs.Packages, rhs.Packages)) return false;
            if (!object.Equals(lhs.CombatStyles, rhs.CombatStyles)) return false;
            if (!object.Equals(lhs.LoadScreens, rhs.LoadScreens)) return false;
            if (!object.Equals(lhs.LeveledSpells, rhs.LeveledSpells)) return false;
            if (!object.Equals(lhs.AnimatedObjects, rhs.AnimatedObjects)) return false;
            if (!object.Equals(lhs.Waters, rhs.Waters)) return false;
            if (!object.Equals(lhs.EffectShaders, rhs.EffectShaders)) return false;
            if (!object.Equals(lhs.Explosions, rhs.Explosions)) return false;
            if (!object.Equals(lhs.Debris, rhs.Debris)) return false;
            if (!object.Equals(lhs.ImageSpaces, rhs.ImageSpaces)) return false;
            if (!object.Equals(lhs.ImageSpaceAdapters, rhs.ImageSpaceAdapters)) return false;
            if (!object.Equals(lhs.FormLists, rhs.FormLists)) return false;
            if (!object.Equals(lhs.Perks, rhs.Perks)) return false;
            if (!object.Equals(lhs.BodyParts, rhs.BodyParts)) return false;
            if (!object.Equals(lhs.AddonNodes, rhs.AddonNodes)) return false;
            if (!object.Equals(lhs.ActorValueInformation, rhs.ActorValueInformation)) return false;
            if (!object.Equals(lhs.CameraShots, rhs.CameraShots)) return false;
            if (!object.Equals(lhs.CameraPaths, rhs.CameraPaths)) return false;
            if (!object.Equals(lhs.VoiceTypes, rhs.VoiceTypes)) return false;
            if (!object.Equals(lhs.MaterialTypes, rhs.MaterialTypes)) return false;
            if (!object.Equals(lhs.Impacts, rhs.Impacts)) return false;
            if (!object.Equals(lhs.ImpactDataSets, rhs.ImpactDataSets)) return false;
            if (!object.Equals(lhs.ArmorAddons, rhs.ArmorAddons)) return false;
            if (!object.Equals(lhs.EncounterZones, rhs.EncounterZones)) return false;
            if (!object.Equals(lhs.Locations, rhs.Locations)) return false;
            if (!object.Equals(lhs.Messages, rhs.Messages)) return false;
            if (!object.Equals(lhs.DefaultObjectManagers, rhs.DefaultObjectManagers)) return false;
            if (!object.Equals(lhs.LightingTemplates, rhs.LightingTemplates)) return false;
            if (!object.Equals(lhs.MusicTypes, rhs.MusicTypes)) return false;
            if (!object.Equals(lhs.Footsteps, rhs.Footsteps)) return false;
            if (!object.Equals(lhs.FootstepSets, rhs.FootstepSets)) return false;
            if (!object.Equals(lhs.StoryManagerBranchNodes, rhs.StoryManagerBranchNodes)) return false;
            if (!object.Equals(lhs.StoryManagerQuestNodes, rhs.StoryManagerQuestNodes)) return false;
            if (!object.Equals(lhs.StoryManagerEventNodes, rhs.StoryManagerEventNodes)) return false;
            if (!object.Equals(lhs.DialogBranches, rhs.DialogBranches)) return false;
            if (!object.Equals(lhs.MusicTracks, rhs.MusicTracks)) return false;
            if (!object.Equals(lhs.DialogViews, rhs.DialogViews)) return false;
            if (!object.Equals(lhs.WordsOfPower, rhs.WordsOfPower)) return false;
            if (!object.Equals(lhs.Shouts, rhs.Shouts)) return false;
            if (!object.Equals(lhs.EquipTypes, rhs.EquipTypes)) return false;
            if (!object.Equals(lhs.Relationships, rhs.Relationships)) return false;
            if (!object.Equals(lhs.Scenes, rhs.Scenes)) return false;
            if (!object.Equals(lhs.AssociationTypes, rhs.AssociationTypes)) return false;
            if (!object.Equals(lhs.Outfits, rhs.Outfits)) return false;
            if (!object.Equals(lhs.ArtObjects, rhs.ArtObjects)) return false;
            if (!object.Equals(lhs.MaterialObjects, rhs.MaterialObjects)) return false;
            if (!object.Equals(lhs.MovementTypes, rhs.MovementTypes)) return false;
            if (!object.Equals(lhs.SoundDescriptors, rhs.SoundDescriptors)) return false;
            if (!object.Equals(lhs.DualCastData, rhs.DualCastData)) return false;
            if (!object.Equals(lhs.SoundCategories, rhs.SoundCategories)) return false;
            if (!object.Equals(lhs.SoundOutputModels, rhs.SoundOutputModels)) return false;
            if (!object.Equals(lhs.CollisionLayers, rhs.CollisionLayers)) return false;
            if (!object.Equals(lhs.Colors, rhs.Colors)) return false;
            if (!object.Equals(lhs.ReverbParameters, rhs.ReverbParameters)) return false;
            if (!object.Equals(lhs.VolumetricLightings, rhs.VolumetricLightings)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IFallout4ModGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModHeader);
            hash.Add(item.GameSettings);
            hash.Add(item.Keywords);
            hash.Add(item.LocationReferenceTypes);
            hash.Add(item.Actions);
            hash.Add(item.TextureSets);
            hash.Add(item.Globals);
            hash.Add(item.Classes);
            hash.Add(item.Factions);
            hash.Add(item.HeadParts);
            hash.Add(item.Hairs);
            hash.Add(item.Eyes);
            hash.Add(item.Races);
            hash.Add(item.SoundMarkers);
            hash.Add(item.AcousticSpaces);
            hash.Add(item.MagicEffects);
            hash.Add(item.LandscapeTextures);
            hash.Add(item.ObjectEffects);
            hash.Add(item.Spells);
            hash.Add(item.Scrolls);
            hash.Add(item.Activators);
            hash.Add(item.TalkingActivators);
            hash.Add(item.Armors);
            hash.Add(item.Books);
            hash.Add(item.Containers);
            hash.Add(item.Doors);
            hash.Add(item.Ingredients);
            hash.Add(item.Lights);
            hash.Add(item.MiscItems);
            hash.Add(item.AlchemicalApparatuses);
            hash.Add(item.Statics);
            hash.Add(item.MoveableStatics);
            hash.Add(item.Grasses);
            hash.Add(item.Trees);
            hash.Add(item.Florae);
            hash.Add(item.Furniture);
            hash.Add(item.Weapons);
            hash.Add(item.Ammunitions);
            hash.Add(item.Npcs);
            hash.Add(item.LeveledNpcs);
            hash.Add(item.Keys);
            hash.Add(item.Ingestibles);
            hash.Add(item.IdleMarkers);
            hash.Add(item.ConstructibleObjects);
            hash.Add(item.Projectiles);
            hash.Add(item.Hazards);
            hash.Add(item.SoulGems);
            hash.Add(item.LeveledItems);
            hash.Add(item.Weathers);
            hash.Add(item.Climates);
            hash.Add(item.ShaderParticleGeometries);
            hash.Add(item.VisualEffects);
            hash.Add(item.Regions);
            hash.Add(item.NavigationMeshInfoMaps);
            hash.Add(item.Cells);
            hash.Add(item.Worldspaces);
            hash.Add(item.DialogTopics);
            hash.Add(item.Quests);
            hash.Add(item.IdleAnimations);
            hash.Add(item.Packages);
            hash.Add(item.CombatStyles);
            hash.Add(item.LoadScreens);
            hash.Add(item.LeveledSpells);
            hash.Add(item.AnimatedObjects);
            hash.Add(item.Waters);
            hash.Add(item.EffectShaders);
            hash.Add(item.Explosions);
            hash.Add(item.Debris);
            hash.Add(item.ImageSpaces);
            hash.Add(item.ImageSpaceAdapters);
            hash.Add(item.FormLists);
            hash.Add(item.Perks);
            hash.Add(item.BodyParts);
            hash.Add(item.AddonNodes);
            hash.Add(item.ActorValueInformation);
            hash.Add(item.CameraShots);
            hash.Add(item.CameraPaths);
            hash.Add(item.VoiceTypes);
            hash.Add(item.MaterialTypes);
            hash.Add(item.Impacts);
            hash.Add(item.ImpactDataSets);
            hash.Add(item.ArmorAddons);
            hash.Add(item.EncounterZones);
            hash.Add(item.Locations);
            hash.Add(item.Messages);
            hash.Add(item.DefaultObjectManagers);
            hash.Add(item.LightingTemplates);
            hash.Add(item.MusicTypes);
            hash.Add(item.Footsteps);
            hash.Add(item.FootstepSets);
            hash.Add(item.StoryManagerBranchNodes);
            hash.Add(item.StoryManagerQuestNodes);
            hash.Add(item.StoryManagerEventNodes);
            hash.Add(item.DialogBranches);
            hash.Add(item.MusicTracks);
            hash.Add(item.DialogViews);
            hash.Add(item.WordsOfPower);
            hash.Add(item.Shouts);
            hash.Add(item.EquipTypes);
            hash.Add(item.Relationships);
            hash.Add(item.Scenes);
            hash.Add(item.AssociationTypes);
            hash.Add(item.Outfits);
            hash.Add(item.ArtObjects);
            hash.Add(item.MaterialObjects);
            hash.Add(item.MovementTypes);
            hash.Add(item.SoundDescriptors);
            hash.Add(item.DualCastData);
            hash.Add(item.SoundCategories);
            hash.Add(item.SoundOutputModels);
            hash.Add(item.CollisionLayers);
            hash.Add(item.Colors);
            hash.Add(item.ReverbParameters);
            hash.Add(item.VolumetricLightings);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Fallout4Mod.GetNew();
        }
        
        #region Mutagen
        public object GetGroup<TMajor>(IFallout4ModGetter obj)
            where TMajor : IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings.RecordCache;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    return obj.Keywords.RecordCache;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    return obj.LocationReferenceTypes.RecordCache;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    return obj.Actions.RecordCache;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    return obj.TextureSets.RecordCache;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals.RecordCache;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    return obj.Classes.RecordCache;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    return obj.Factions.RecordCache;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    return obj.HeadParts.RecordCache;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    return obj.Hairs.RecordCache;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    return obj.Eyes.RecordCache;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    return obj.Races.RecordCache;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    return obj.SoundMarkers.RecordCache;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    return obj.AcousticSpaces.RecordCache;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    return obj.MagicEffects.RecordCache;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    return obj.LandscapeTextures.RecordCache;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    return obj.ObjectEffects.RecordCache;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    return obj.Spells.RecordCache;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    return obj.Scrolls.RecordCache;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    return obj.Activators.RecordCache;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    return obj.TalkingActivators.RecordCache;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    return obj.Armors.RecordCache;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    return obj.Books.RecordCache;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    return obj.Containers.RecordCache;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    return obj.Doors.RecordCache;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    return obj.Ingredients.RecordCache;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    return obj.Lights.RecordCache;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    return obj.MiscItems.RecordCache;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    return obj.AlchemicalApparatuses.RecordCache;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    return obj.Statics.RecordCache;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    return obj.MoveableStatics.RecordCache;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    return obj.Grasses.RecordCache;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    return obj.Trees.RecordCache;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    return obj.Florae.RecordCache;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    return obj.Furniture.RecordCache;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    return obj.Weapons.RecordCache;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    return obj.Ammunitions.RecordCache;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    return obj.Npcs.RecordCache;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    return obj.LeveledNpcs.RecordCache;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    return obj.Keys.RecordCache;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    return obj.Ingestibles.RecordCache;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    return obj.IdleMarkers.RecordCache;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    return obj.ConstructibleObjects.RecordCache;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    return obj.Projectiles.RecordCache;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    return obj.Hazards.RecordCache;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    return obj.SoulGems.RecordCache;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    return obj.LeveledItems.RecordCache;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    return obj.Weathers.RecordCache;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    return obj.Climates.RecordCache;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    return obj.ShaderParticleGeometries.RecordCache;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    return obj.VisualEffects.RecordCache;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    return obj.Regions.RecordCache;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    return obj.NavigationMeshInfoMaps.RecordCache;
                case "CellBlock":
                case "ICellBlockGetter":
                case "ICellBlock":
                    return obj.Cells.Records;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    return obj.Worldspaces.RecordCache;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    return obj.DialogTopics.RecordCache;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    return obj.Quests.RecordCache;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    return obj.IdleAnimations.RecordCache;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    return obj.Packages.RecordCache;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    return obj.CombatStyles.RecordCache;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    return obj.LoadScreens.RecordCache;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    return obj.LeveledSpells.RecordCache;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    return obj.AnimatedObjects.RecordCache;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    return obj.Waters.RecordCache;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    return obj.EffectShaders.RecordCache;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    return obj.Explosions.RecordCache;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    return obj.Debris.RecordCache;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    return obj.ImageSpaces.RecordCache;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    return obj.ImageSpaceAdapters.RecordCache;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    return obj.FormLists.RecordCache;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    return obj.Perks.RecordCache;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    return obj.BodyParts.RecordCache;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    return obj.AddonNodes.RecordCache;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    return obj.ActorValueInformation.RecordCache;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    return obj.CameraShots.RecordCache;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    return obj.CameraPaths.RecordCache;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    return obj.VoiceTypes.RecordCache;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    return obj.MaterialTypes.RecordCache;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    return obj.Impacts.RecordCache;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    return obj.ImpactDataSets.RecordCache;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    return obj.ArmorAddons.RecordCache;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    return obj.EncounterZones.RecordCache;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    return obj.Locations.RecordCache;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    return obj.Messages.RecordCache;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    return obj.DefaultObjectManagers.RecordCache;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    return obj.LightingTemplates.RecordCache;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    return obj.MusicTypes.RecordCache;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    return obj.Footsteps.RecordCache;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    return obj.FootstepSets.RecordCache;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    return obj.StoryManagerBranchNodes.RecordCache;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    return obj.StoryManagerQuestNodes.RecordCache;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    return obj.StoryManagerEventNodes.RecordCache;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    return obj.DialogBranches.RecordCache;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    return obj.MusicTracks.RecordCache;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    return obj.DialogViews.RecordCache;
                case "WordOfPower":
                case "IWordOfPowerGetter":
                case "IWordOfPower":
                case "IWordOfPowerInternal":
                    return obj.WordsOfPower.RecordCache;
                case "Shout":
                case "IShoutGetter":
                case "IShout":
                case "IShoutInternal":
                    return obj.Shouts.RecordCache;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    return obj.EquipTypes.RecordCache;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    return obj.Relationships.RecordCache;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    return obj.Scenes.RecordCache;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    return obj.AssociationTypes.RecordCache;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    return obj.Outfits.RecordCache;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    return obj.ArtObjects.RecordCache;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    return obj.MaterialObjects.RecordCache;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    return obj.MovementTypes.RecordCache;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    return obj.SoundDescriptors.RecordCache;
                case "DualCastData":
                case "IDualCastDataGetter":
                case "IDualCastData":
                case "IDualCastDataInternal":
                    return obj.DualCastData.RecordCache;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    return obj.SoundCategories.RecordCache;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    return obj.SoundOutputModels.RecordCache;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    return obj.CollisionLayers.RecordCache;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    return obj.Colors.RecordCache;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    return obj.ReverbParameters.RecordCache;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    return obj.VolumetricLightings.RecordCache;
                default:
                    throw new ArgumentException($"Unknown major record type: {typeof(TMajor)}");
            }
        }
        
        const int CutCount = 100;
        public static void WriteParallel(
            IFallout4ModGetter item,
            Stream stream,
            BinaryWriteParameters param,
            ModKey modKey)
        {
            var gameConstants = GameConstants.Get(item.Fallout4Release.ToGameRelease());
            var bundle = new WritingBundle(gameConstants);
            var writer = new MutagenWriter(stream, bundle);
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            Stream[] outputStreams = new Stream[113];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, writer.MetaData.MasterReferences!, 0, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Keywords, writer.MetaData.MasterReferences!, 1, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LocationReferenceTypes, writer.MetaData.MasterReferences!, 2, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Actions, writer.MetaData.MasterReferences!, 3, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.TextureSets, writer.MetaData.MasterReferences!, 4, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Globals, writer.MetaData.MasterReferences!, 5, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Classes, writer.MetaData.MasterReferences!, 6, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Factions, writer.MetaData.MasterReferences!, 7, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.HeadParts, writer.MetaData.MasterReferences!, 8, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Hairs, writer.MetaData.MasterReferences!, 9, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Eyes, writer.MetaData.MasterReferences!, 10, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Races, writer.MetaData.MasterReferences!, 11, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.SoundMarkers, writer.MetaData.MasterReferences!, 12, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.AcousticSpaces, writer.MetaData.MasterReferences!, 13, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MagicEffects, writer.MetaData.MasterReferences!, 14, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LandscapeTextures, writer.MetaData.MasterReferences!, 15, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ObjectEffects, writer.MetaData.MasterReferences!, 16, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Spells, writer.MetaData.MasterReferences!, 17, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Scrolls, writer.MetaData.MasterReferences!, 18, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Activators, writer.MetaData.MasterReferences!, 19, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.TalkingActivators, writer.MetaData.MasterReferences!, 20, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Armors, writer.MetaData.MasterReferences!, 21, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Books, writer.MetaData.MasterReferences!, 22, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Containers, writer.MetaData.MasterReferences!, 23, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Doors, writer.MetaData.MasterReferences!, 24, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Ingredients, writer.MetaData.MasterReferences!, 25, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Lights, writer.MetaData.MasterReferences!, 26, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MiscItems, writer.MetaData.MasterReferences!, 27, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.AlchemicalApparatuses, writer.MetaData.MasterReferences!, 28, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Statics, writer.MetaData.MasterReferences!, 29, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MoveableStatics, writer.MetaData.MasterReferences!, 30, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Grasses, writer.MetaData.MasterReferences!, 31, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Trees, writer.MetaData.MasterReferences!, 32, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Florae, writer.MetaData.MasterReferences!, 33, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Furniture, writer.MetaData.MasterReferences!, 34, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Weapons, writer.MetaData.MasterReferences!, 35, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Ammunitions, writer.MetaData.MasterReferences!, 36, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Npcs, writer.MetaData.MasterReferences!, 37, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LeveledNpcs, writer.MetaData.MasterReferences!, 38, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Keys, writer.MetaData.MasterReferences!, 39, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Ingestibles, writer.MetaData.MasterReferences!, 40, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.IdleMarkers, writer.MetaData.MasterReferences!, 41, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ConstructibleObjects, writer.MetaData.MasterReferences!, 42, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Projectiles, writer.MetaData.MasterReferences!, 43, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Hazards, writer.MetaData.MasterReferences!, 44, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.SoulGems, writer.MetaData.MasterReferences!, 45, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LeveledItems, writer.MetaData.MasterReferences!, 46, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Weathers, writer.MetaData.MasterReferences!, 47, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Climates, writer.MetaData.MasterReferences!, 48, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ShaderParticleGeometries, writer.MetaData.MasterReferences!, 49, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.VisualEffects, writer.MetaData.MasterReferences!, 50, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Regions, writer.MetaData.MasterReferences!, 51, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.NavigationMeshInfoMaps, writer.MetaData.MasterReferences!, 52, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteCellsParallel(item.Cells, writer.MetaData.MasterReferences!, 53, gameConstants, outputStreams));
            toDo.Add(() => WriteWorldspacesParallel(item.Worldspaces, writer.MetaData.MasterReferences!, 54, gameConstants, outputStreams));
            toDo.Add(() => WriteDialogTopicsParallel(item.DialogTopics, writer.MetaData.MasterReferences!, 55, gameConstants, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Quests, writer.MetaData.MasterReferences!, 56, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.IdleAnimations, writer.MetaData.MasterReferences!, 57, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Packages, writer.MetaData.MasterReferences!, 58, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.CombatStyles, writer.MetaData.MasterReferences!, 59, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LoadScreens, writer.MetaData.MasterReferences!, 60, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LeveledSpells, writer.MetaData.MasterReferences!, 61, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.AnimatedObjects, writer.MetaData.MasterReferences!, 62, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Waters, writer.MetaData.MasterReferences!, 63, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.EffectShaders, writer.MetaData.MasterReferences!, 64, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Explosions, writer.MetaData.MasterReferences!, 65, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Debris, writer.MetaData.MasterReferences!, 66, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ImageSpaces, writer.MetaData.MasterReferences!, 67, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ImageSpaceAdapters, writer.MetaData.MasterReferences!, 68, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.FormLists, writer.MetaData.MasterReferences!, 69, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Perks, writer.MetaData.MasterReferences!, 70, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.BodyParts, writer.MetaData.MasterReferences!, 71, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.AddonNodes, writer.MetaData.MasterReferences!, 72, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ActorValueInformation, writer.MetaData.MasterReferences!, 73, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.CameraShots, writer.MetaData.MasterReferences!, 74, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.CameraPaths, writer.MetaData.MasterReferences!, 75, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.VoiceTypes, writer.MetaData.MasterReferences!, 76, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MaterialTypes, writer.MetaData.MasterReferences!, 77, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Impacts, writer.MetaData.MasterReferences!, 78, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ImpactDataSets, writer.MetaData.MasterReferences!, 79, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ArmorAddons, writer.MetaData.MasterReferences!, 80, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.EncounterZones, writer.MetaData.MasterReferences!, 81, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Locations, writer.MetaData.MasterReferences!, 82, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Messages, writer.MetaData.MasterReferences!, 83, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.DefaultObjectManagers, writer.MetaData.MasterReferences!, 84, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LightingTemplates, writer.MetaData.MasterReferences!, 85, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MusicTypes, writer.MetaData.MasterReferences!, 86, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Footsteps, writer.MetaData.MasterReferences!, 87, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.FootstepSets, writer.MetaData.MasterReferences!, 88, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerBranchNodes, writer.MetaData.MasterReferences!, 89, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerQuestNodes, writer.MetaData.MasterReferences!, 90, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerEventNodes, writer.MetaData.MasterReferences!, 91, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.DialogBranches, writer.MetaData.MasterReferences!, 92, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MusicTracks, writer.MetaData.MasterReferences!, 93, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.DialogViews, writer.MetaData.MasterReferences!, 94, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.WordsOfPower, writer.MetaData.MasterReferences!, 95, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Shouts, writer.MetaData.MasterReferences!, 96, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.EquipTypes, writer.MetaData.MasterReferences!, 97, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Relationships, writer.MetaData.MasterReferences!, 98, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Scenes, writer.MetaData.MasterReferences!, 99, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.AssociationTypes, writer.MetaData.MasterReferences!, 100, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Outfits, writer.MetaData.MasterReferences!, 101, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ArtObjects, writer.MetaData.MasterReferences!, 102, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MaterialObjects, writer.MetaData.MasterReferences!, 103, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MovementTypes, writer.MetaData.MasterReferences!, 104, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.SoundDescriptors, writer.MetaData.MasterReferences!, 105, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.DualCastData, writer.MetaData.MasterReferences!, 106, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.SoundCategories, writer.MetaData.MasterReferences!, 107, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.SoundOutputModels, writer.MetaData.MasterReferences!, 108, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.CollisionLayers, writer.MetaData.MasterReferences!, 109, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Colors, writer.MetaData.MasterReferences!, 110, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ReverbParameters, writer.MetaData.MasterReferences!, 111, gameConstants, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.VolumetricLightings, writer.MetaData.MasterReferences!, 112, gameConstants, outputStreams, param.StringsWriter));
            Parallel.Invoke(toDo.ToArray());
            UtilityTranslation.CompileStreamsInto(
                outputStreams.NotNull(),
                stream);
        }
        
        public static void WriteGroupParallel<T>(
            IGroupGetter<T> group,
            MasterReferenceReader masters,
            int targetIndex,
            GameConstants gameConstants,
            Stream[] streamDepositArray,
            StringsWriter? stringsWriter)
            where T : class, IFallout4MajorRecordGetter, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Cut(CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[gameConstants.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), RecordTypes.GRUP.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, gameConstants, dispose: false))
            {
                stream.Position += 8;
                GroupBinaryWriteTranslation.WriteEmbedded<T>(group, stream);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                var bundle = new WritingBundle(gameConstants)
                {
                    MasterReferences = masters,
                    StringsWriter = stringsWriter
                };
                using (var stream = new MutagenWriter(trib, bundle, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            UtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IFallout4ModGetter obj)
        {
            foreach (var item in obj.ModHeader.ContainedFormLinks)
            {
                yield return item;
            }
            if (obj.GameSettings is IFormLinkContainerGetter GameSettingslinkCont)
            {
                foreach (var item in GameSettingslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Keywords is IFormLinkContainerGetter KeywordslinkCont)
            {
                foreach (var item in KeywordslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LocationReferenceTypes is IFormLinkContainerGetter LocationReferenceTypeslinkCont)
            {
                foreach (var item in LocationReferenceTypeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Actions is IFormLinkContainerGetter ActionslinkCont)
            {
                foreach (var item in ActionslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.TextureSets is IFormLinkContainerGetter TextureSetslinkCont)
            {
                foreach (var item in TextureSetslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Globals is IFormLinkContainerGetter GlobalslinkCont)
            {
                foreach (var item in GlobalslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Classes is IFormLinkContainerGetter ClasseslinkCont)
            {
                foreach (var item in ClasseslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Factions is IFormLinkContainerGetter FactionslinkCont)
            {
                foreach (var item in FactionslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.HeadParts is IFormLinkContainerGetter HeadPartslinkCont)
            {
                foreach (var item in HeadPartslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Hairs is IFormLinkContainerGetter HairslinkCont)
            {
                foreach (var item in HairslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Eyes is IFormLinkContainerGetter EyeslinkCont)
            {
                foreach (var item in EyeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Races is IFormLinkContainerGetter RaceslinkCont)
            {
                foreach (var item in RaceslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.SoundMarkers is IFormLinkContainerGetter SoundMarkerslinkCont)
            {
                foreach (var item in SoundMarkerslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.AcousticSpaces is IFormLinkContainerGetter AcousticSpaceslinkCont)
            {
                foreach (var item in AcousticSpaceslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.MagicEffects is IFormLinkContainerGetter MagicEffectslinkCont)
            {
                foreach (var item in MagicEffectslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LandscapeTextures is IFormLinkContainerGetter LandscapeTextureslinkCont)
            {
                foreach (var item in LandscapeTextureslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ObjectEffects is IFormLinkContainerGetter ObjectEffectslinkCont)
            {
                foreach (var item in ObjectEffectslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Spells is IFormLinkContainerGetter SpellslinkCont)
            {
                foreach (var item in SpellslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Scrolls is IFormLinkContainerGetter ScrollslinkCont)
            {
                foreach (var item in ScrollslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Activators is IFormLinkContainerGetter ActivatorslinkCont)
            {
                foreach (var item in ActivatorslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.TalkingActivators is IFormLinkContainerGetter TalkingActivatorslinkCont)
            {
                foreach (var item in TalkingActivatorslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Armors is IFormLinkContainerGetter ArmorslinkCont)
            {
                foreach (var item in ArmorslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Books is IFormLinkContainerGetter BookslinkCont)
            {
                foreach (var item in BookslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Containers is IFormLinkContainerGetter ContainerslinkCont)
            {
                foreach (var item in ContainerslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Doors is IFormLinkContainerGetter DoorslinkCont)
            {
                foreach (var item in DoorslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Ingredients is IFormLinkContainerGetter IngredientslinkCont)
            {
                foreach (var item in IngredientslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Lights is IFormLinkContainerGetter LightslinkCont)
            {
                foreach (var item in LightslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.MiscItems is IFormLinkContainerGetter MiscItemslinkCont)
            {
                foreach (var item in MiscItemslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.AlchemicalApparatuses is IFormLinkContainerGetter AlchemicalApparatuseslinkCont)
            {
                foreach (var item in AlchemicalApparatuseslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Statics is IFormLinkContainerGetter StaticslinkCont)
            {
                foreach (var item in StaticslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.MoveableStatics is IFormLinkContainerGetter MoveableStaticslinkCont)
            {
                foreach (var item in MoveableStaticslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Grasses is IFormLinkContainerGetter GrasseslinkCont)
            {
                foreach (var item in GrasseslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Trees is IFormLinkContainerGetter TreeslinkCont)
            {
                foreach (var item in TreeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Florae is IFormLinkContainerGetter FloraelinkCont)
            {
                foreach (var item in FloraelinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Furniture is IFormLinkContainerGetter FurniturelinkCont)
            {
                foreach (var item in FurniturelinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Weapons is IFormLinkContainerGetter WeaponslinkCont)
            {
                foreach (var item in WeaponslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Ammunitions is IFormLinkContainerGetter AmmunitionslinkCont)
            {
                foreach (var item in AmmunitionslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Npcs is IFormLinkContainerGetter NpcslinkCont)
            {
                foreach (var item in NpcslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LeveledNpcs is IFormLinkContainerGetter LeveledNpcslinkCont)
            {
                foreach (var item in LeveledNpcslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Keys is IFormLinkContainerGetter KeyslinkCont)
            {
                foreach (var item in KeyslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Ingestibles is IFormLinkContainerGetter IngestibleslinkCont)
            {
                foreach (var item in IngestibleslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.IdleMarkers is IFormLinkContainerGetter IdleMarkerslinkCont)
            {
                foreach (var item in IdleMarkerslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ConstructibleObjects is IFormLinkContainerGetter ConstructibleObjectslinkCont)
            {
                foreach (var item in ConstructibleObjectslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Projectiles is IFormLinkContainerGetter ProjectileslinkCont)
            {
                foreach (var item in ProjectileslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Hazards is IFormLinkContainerGetter HazardslinkCont)
            {
                foreach (var item in HazardslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.SoulGems is IFormLinkContainerGetter SoulGemslinkCont)
            {
                foreach (var item in SoulGemslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LeveledItems is IFormLinkContainerGetter LeveledItemslinkCont)
            {
                foreach (var item in LeveledItemslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Weathers is IFormLinkContainerGetter WeatherslinkCont)
            {
                foreach (var item in WeatherslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Climates is IFormLinkContainerGetter ClimateslinkCont)
            {
                foreach (var item in ClimateslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ShaderParticleGeometries is IFormLinkContainerGetter ShaderParticleGeometrieslinkCont)
            {
                foreach (var item in ShaderParticleGeometrieslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.VisualEffects is IFormLinkContainerGetter VisualEffectslinkCont)
            {
                foreach (var item in VisualEffectslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Regions is IFormLinkContainerGetter RegionslinkCont)
            {
                foreach (var item in RegionslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.NavigationMeshInfoMaps is IFormLinkContainerGetter NavigationMeshInfoMapslinkCont)
            {
                foreach (var item in NavigationMeshInfoMapslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Cells.ContainedFormLinks)
            {
                yield return item;
            }
            if (obj.Worldspaces is IFormLinkContainerGetter WorldspaceslinkCont)
            {
                foreach (var item in WorldspaceslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.DialogTopics is IFormLinkContainerGetter DialogTopicslinkCont)
            {
                foreach (var item in DialogTopicslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Quests is IFormLinkContainerGetter QuestslinkCont)
            {
                foreach (var item in QuestslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.IdleAnimations is IFormLinkContainerGetter IdleAnimationslinkCont)
            {
                foreach (var item in IdleAnimationslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Packages is IFormLinkContainerGetter PackageslinkCont)
            {
                foreach (var item in PackageslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.CombatStyles is IFormLinkContainerGetter CombatStyleslinkCont)
            {
                foreach (var item in CombatStyleslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LoadScreens is IFormLinkContainerGetter LoadScreenslinkCont)
            {
                foreach (var item in LoadScreenslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LeveledSpells is IFormLinkContainerGetter LeveledSpellslinkCont)
            {
                foreach (var item in LeveledSpellslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.AnimatedObjects is IFormLinkContainerGetter AnimatedObjectslinkCont)
            {
                foreach (var item in AnimatedObjectslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Waters is IFormLinkContainerGetter WaterslinkCont)
            {
                foreach (var item in WaterslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.EffectShaders is IFormLinkContainerGetter EffectShaderslinkCont)
            {
                foreach (var item in EffectShaderslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Explosions is IFormLinkContainerGetter ExplosionslinkCont)
            {
                foreach (var item in ExplosionslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Debris is IFormLinkContainerGetter DebrislinkCont)
            {
                foreach (var item in DebrislinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ImageSpaces is IFormLinkContainerGetter ImageSpaceslinkCont)
            {
                foreach (var item in ImageSpaceslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ImageSpaceAdapters is IFormLinkContainerGetter ImageSpaceAdapterslinkCont)
            {
                foreach (var item in ImageSpaceAdapterslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.FormLists is IFormLinkContainerGetter FormListslinkCont)
            {
                foreach (var item in FormListslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Perks is IFormLinkContainerGetter PerkslinkCont)
            {
                foreach (var item in PerkslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.BodyParts is IFormLinkContainerGetter BodyPartslinkCont)
            {
                foreach (var item in BodyPartslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.AddonNodes is IFormLinkContainerGetter AddonNodeslinkCont)
            {
                foreach (var item in AddonNodeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ActorValueInformation is IFormLinkContainerGetter ActorValueInformationlinkCont)
            {
                foreach (var item in ActorValueInformationlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.CameraShots is IFormLinkContainerGetter CameraShotslinkCont)
            {
                foreach (var item in CameraShotslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.CameraPaths is IFormLinkContainerGetter CameraPathslinkCont)
            {
                foreach (var item in CameraPathslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.VoiceTypes is IFormLinkContainerGetter VoiceTypeslinkCont)
            {
                foreach (var item in VoiceTypeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.MaterialTypes is IFormLinkContainerGetter MaterialTypeslinkCont)
            {
                foreach (var item in MaterialTypeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Impacts is IFormLinkContainerGetter ImpactslinkCont)
            {
                foreach (var item in ImpactslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ImpactDataSets is IFormLinkContainerGetter ImpactDataSetslinkCont)
            {
                foreach (var item in ImpactDataSetslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ArmorAddons is IFormLinkContainerGetter ArmorAddonslinkCont)
            {
                foreach (var item in ArmorAddonslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.EncounterZones is IFormLinkContainerGetter EncounterZoneslinkCont)
            {
                foreach (var item in EncounterZoneslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Locations is IFormLinkContainerGetter LocationslinkCont)
            {
                foreach (var item in LocationslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Messages is IFormLinkContainerGetter MessageslinkCont)
            {
                foreach (var item in MessageslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.DefaultObjectManagers is IFormLinkContainerGetter DefaultObjectManagerslinkCont)
            {
                foreach (var item in DefaultObjectManagerslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.LightingTemplates is IFormLinkContainerGetter LightingTemplateslinkCont)
            {
                foreach (var item in LightingTemplateslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.MusicTypes is IFormLinkContainerGetter MusicTypeslinkCont)
            {
                foreach (var item in MusicTypeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Footsteps is IFormLinkContainerGetter FootstepslinkCont)
            {
                foreach (var item in FootstepslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.FootstepSets is IFormLinkContainerGetter FootstepSetslinkCont)
            {
                foreach (var item in FootstepSetslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.StoryManagerBranchNodes is IFormLinkContainerGetter StoryManagerBranchNodeslinkCont)
            {
                foreach (var item in StoryManagerBranchNodeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.StoryManagerQuestNodes is IFormLinkContainerGetter StoryManagerQuestNodeslinkCont)
            {
                foreach (var item in StoryManagerQuestNodeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.StoryManagerEventNodes is IFormLinkContainerGetter StoryManagerEventNodeslinkCont)
            {
                foreach (var item in StoryManagerEventNodeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.DialogBranches is IFormLinkContainerGetter DialogBrancheslinkCont)
            {
                foreach (var item in DialogBrancheslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.MusicTracks is IFormLinkContainerGetter MusicTrackslinkCont)
            {
                foreach (var item in MusicTrackslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.DialogViews is IFormLinkContainerGetter DialogViewslinkCont)
            {
                foreach (var item in DialogViewslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.WordsOfPower is IFormLinkContainerGetter WordsOfPowerlinkCont)
            {
                foreach (var item in WordsOfPowerlinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Shouts is IFormLinkContainerGetter ShoutslinkCont)
            {
                foreach (var item in ShoutslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.EquipTypes is IFormLinkContainerGetter EquipTypeslinkCont)
            {
                foreach (var item in EquipTypeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Relationships is IFormLinkContainerGetter RelationshipslinkCont)
            {
                foreach (var item in RelationshipslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Scenes is IFormLinkContainerGetter SceneslinkCont)
            {
                foreach (var item in SceneslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.AssociationTypes is IFormLinkContainerGetter AssociationTypeslinkCont)
            {
                foreach (var item in AssociationTypeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Outfits is IFormLinkContainerGetter OutfitslinkCont)
            {
                foreach (var item in OutfitslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ArtObjects is IFormLinkContainerGetter ArtObjectslinkCont)
            {
                foreach (var item in ArtObjectslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.MaterialObjects is IFormLinkContainerGetter MaterialObjectslinkCont)
            {
                foreach (var item in MaterialObjectslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.MovementTypes is IFormLinkContainerGetter MovementTypeslinkCont)
            {
                foreach (var item in MovementTypeslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.SoundDescriptors is IFormLinkContainerGetter SoundDescriptorslinkCont)
            {
                foreach (var item in SoundDescriptorslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.DualCastData is IFormLinkContainerGetter DualCastDatalinkCont)
            {
                foreach (var item in DualCastDatalinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.SoundCategories is IFormLinkContainerGetter SoundCategorieslinkCont)
            {
                foreach (var item in SoundCategorieslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.SoundOutputModels is IFormLinkContainerGetter SoundOutputModelslinkCont)
            {
                foreach (var item in SoundOutputModelslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.CollisionLayers is IFormLinkContainerGetter CollisionLayerslinkCont)
            {
                foreach (var item in CollisionLayerslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.Colors is IFormLinkContainerGetter ColorslinkCont)
            {
                foreach (var item in ColorslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.ReverbParameters is IFormLinkContainerGetter ReverbParameterslinkCont)
            {
                foreach (var item in ReverbParameterslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            if (obj.VolumetricLightings is IFormLinkContainerGetter VolumetricLightingslinkCont)
            {
                foreach (var item in VolumetricLightingslinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IFallout4ModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Actions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TextureSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hairs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Eyes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Scrolls.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TalkingActivators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MiscItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AlchemicalApparatuses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MoveableStatics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Trees.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Florae.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingestibles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Projectiles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hazards.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoulGems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ShaderParticleGeometries.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VisualEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshInfoMaps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogTopics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Packages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CombatStyles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledSpells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Explosions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Debris.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImageSpaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImageSpaceAdapters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FormLists.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Perks.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BodyParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AddonNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ActorValueInformation.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CameraShots.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CameraPaths.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VoiceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Impacts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImpactDataSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ArmorAddons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EncounterZones.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Locations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Messages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjectManagers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LightingTemplates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Footsteps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FootstepSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerBranchNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerQuestNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerEventNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogBranches.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTracks.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogViews.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.WordsOfPower.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Shouts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EquipTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Relationships.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Scenes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AssociationTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Outfits.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ArtObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MovementTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundDescriptors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DualCastData.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundCategories.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundOutputModels.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CollisionLayers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Colors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ReverbParameters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VolumetricLightings.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            IFallout4ModGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in obj.Keywords.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in obj.Actions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in obj.TextureSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in obj.HeadParts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    foreach (var item in obj.Hairs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    foreach (var item in obj.Eyes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    foreach (var item in obj.SoundMarkers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in obj.MagicEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    foreach (var item in obj.ObjectEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in obj.Spells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    foreach (var item in obj.Scrolls.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in obj.Activators.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    foreach (var item in obj.TalkingActivators.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in obj.Armors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in obj.Books.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in obj.Containers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in obj.Doors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in obj.Ingredients.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in obj.Lights.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    foreach (var item in obj.MiscItems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    foreach (var item in obj.AlchemicalApparatuses.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in obj.Statics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    foreach (var item in obj.MoveableStatics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in obj.Grasses.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in obj.Trees.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in obj.Florae.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in obj.Furniture.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in obj.Ammunitions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in obj.Npcs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in obj.Keys.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    foreach (var item in obj.Ingestibles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    foreach (var item in obj.IdleMarkers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    foreach (var item in obj.Projectiles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    foreach (var item in obj.Hazards.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    foreach (var item in obj.SoulGems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in obj.LeveledItems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in obj.Weathers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in obj.Climates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    foreach (var item in obj.ShaderParticleGeometries.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    foreach (var item in obj.VisualEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in obj.Regions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    foreach (var item in obj.NavigationMeshInfoMaps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in obj.DialogTopics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in obj.IdleAnimations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    foreach (var item in obj.Packages.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in obj.CombatStyles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in obj.LoadScreens.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    foreach (var item in obj.LeveledSpells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in obj.Waters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in obj.EffectShaders.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    foreach (var item in obj.Explosions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    foreach (var item in obj.Debris.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    foreach (var item in obj.ImageSpaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    foreach (var item in obj.ImageSpaceAdapters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    foreach (var item in obj.FormLists.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    foreach (var item in obj.Perks.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    foreach (var item in obj.BodyParts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    foreach (var item in obj.AddonNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    foreach (var item in obj.ActorValueInformation.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    foreach (var item in obj.CameraShots.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    foreach (var item in obj.CameraPaths.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    foreach (var item in obj.VoiceTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    foreach (var item in obj.MaterialTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    foreach (var item in obj.Impacts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    foreach (var item in obj.ImpactDataSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    foreach (var item in obj.ArmorAddons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    foreach (var item in obj.EncounterZones.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    foreach (var item in obj.Locations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    foreach (var item in obj.Messages.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    foreach (var item in obj.DefaultObjectManagers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    foreach (var item in obj.LightingTemplates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    foreach (var item in obj.MusicTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    foreach (var item in obj.Footsteps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    foreach (var item in obj.FootstepSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    foreach (var item in obj.StoryManagerBranchNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    foreach (var item in obj.StoryManagerQuestNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    foreach (var item in obj.StoryManagerEventNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    foreach (var item in obj.DialogBranches.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    foreach (var item in obj.MusicTracks.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    foreach (var item in obj.DialogViews.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "WordOfPower":
                case "IWordOfPowerGetter":
                case "IWordOfPower":
                case "IWordOfPowerInternal":
                    foreach (var item in obj.WordsOfPower.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Shout":
                case "IShoutGetter":
                case "IShout":
                case "IShoutInternal":
                    foreach (var item in obj.Shouts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    foreach (var item in obj.EquipTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    foreach (var item in obj.Relationships.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    foreach (var item in obj.Scenes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    foreach (var item in obj.AssociationTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    foreach (var item in obj.Outfits.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    foreach (var item in obj.ArtObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    foreach (var item in obj.MaterialObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    foreach (var item in obj.MovementTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    foreach (var item in obj.SoundDescriptors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DualCastData":
                case "IDualCastDataGetter":
                case "IDualCastData":
                case "IDualCastDataInternal":
                    foreach (var item in obj.DualCastData.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    foreach (var item in obj.SoundCategories.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    foreach (var item in obj.SoundOutputModels.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    foreach (var item in obj.CollisionLayers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    foreach (var item in obj.Colors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    foreach (var item in obj.ReverbParameters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    foreach (var item in obj.VolumetricLightings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "APlaced":
                case "IAPlacedGetter":
                case "IAPlaced":
                case "IAPlacedInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var item in obj.DialogTopics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IIdleRelation":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IActionRecordGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIdleAnimationGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IIdleRelationGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IActionRecordGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIdleAnimationGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IObjectId":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IBookGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILightGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(INpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IShoutGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IObjectIdGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IBookGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILightGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(INpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IShoutGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IItem":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IAlchemicalApparatusGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IBookGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILightGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISoulGemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IItemGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IAlchemicalApparatusGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IBookGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILightGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISoulGemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IOutfitTarget":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IOutfitTargetGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IComplexLocation":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IWorldspaceGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IComplexLocationGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IWorldspaceGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IDialog":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IDialogTopicGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IDialogGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IDialogTopicGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILocationTargetable":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILocationTargetableGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IOwner":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IOwnerGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IRelatable":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IRaceGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IRelatableGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IRaceGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IRegionTarget":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILandscapeTextureGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ITreeGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IRegionTargetGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILandscapeTextureGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ITreeGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IAliasVoiceType":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(INpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IAliasVoiceTypeGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(INpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILockList":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(INpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILockListGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(INpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlacedTrapTarget":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IHazardGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlacedTrapTargetGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IHazardGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IHarvestTarget":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IHarvestTargetGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IKeywordLinkedReference":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IKeywordGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IKeywordLinkedReferenceGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IKeywordGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "INpcSpawn":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(INpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "INpcSpawnGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(INpcGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ISpellSpawn":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILeveledSpellGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ISpellSpawnGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILeveledSpellGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IEmittance":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILightGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IRegionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IEmittanceGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILightGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IRegionGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILocationRecord":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILocationGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILocationReferenceTypeGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILocationRecordGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILocationGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ILocationReferenceTypeGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IEffectRecord":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IObjectEffectGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IEffectRecordGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IObjectEffectGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILinkedReference":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILinkedReferenceGetter":
                {
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlaced":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlacedGetter":
                {
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlacedSimple":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlacedSimpleGetter":
                {
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlacedThing":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlacedThingGetter":
                {
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ISound":
                {
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISoundDescriptorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ISoundGetter":
                {
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISoundDescriptorGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            IFallout4ModGetter obj,
            ILinkCache linkCache)
        {
            foreach (var item in obj.GameSettings)
            {
                yield return new ModContext<IFallout4Mod, IGameSettingInternal, IGameSettingGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.GameSettings.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.GameSettings.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Keywords)
            {
                yield return new ModContext<IFallout4Mod, IKeywordInternal, IKeywordGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Keywords.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Keywords.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LocationReferenceTypes)
            {
                yield return new ModContext<IFallout4Mod, ILocationReferenceTypeInternal, ILocationReferenceTypeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LocationReferenceTypes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LocationReferenceTypes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Actions)
            {
                yield return new ModContext<IFallout4Mod, IActionRecordInternal, IActionRecordGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Actions.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Actions.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.TextureSets)
            {
                yield return new ModContext<IFallout4Mod, ITextureSetInternal, ITextureSetGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.TextureSets.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.TextureSets.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Globals)
            {
                yield return new ModContext<IFallout4Mod, IGlobalInternal, IGlobalGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Globals.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Globals.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Classes)
            {
                yield return new ModContext<IFallout4Mod, IClassInternal, IClassGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Classes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Classes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Factions)
            {
                yield return new ModContext<IFallout4Mod, IFactionInternal, IFactionGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Factions.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Factions.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.HeadParts)
            {
                yield return new ModContext<IFallout4Mod, IHeadPartInternal, IHeadPartGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.HeadParts.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.HeadParts.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Hairs)
            {
                yield return new ModContext<IFallout4Mod, IHairInternal, IHairGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Hairs.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Hairs.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Eyes)
            {
                yield return new ModContext<IFallout4Mod, IEyesInternal, IEyesGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Eyes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Eyes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Races)
            {
                yield return new ModContext<IFallout4Mod, IRaceInternal, IRaceGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Races.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Races.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.SoundMarkers)
            {
                yield return new ModContext<IFallout4Mod, ISoundMarkerInternal, ISoundMarkerGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.SoundMarkers.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.SoundMarkers.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.AcousticSpaces)
            {
                yield return new ModContext<IFallout4Mod, IAcousticSpaceInternal, IAcousticSpaceGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.AcousticSpaces.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.AcousticSpaces.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.MagicEffects)
            {
                yield return new ModContext<IFallout4Mod, IMagicEffectInternal, IMagicEffectGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.MagicEffects.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.MagicEffects.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LandscapeTextures)
            {
                yield return new ModContext<IFallout4Mod, ILandscapeTextureInternal, ILandscapeTextureGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LandscapeTextures.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LandscapeTextures.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.ObjectEffects)
            {
                yield return new ModContext<IFallout4Mod, IObjectEffectInternal, IObjectEffectGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.ObjectEffects.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.ObjectEffects.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Spells)
            {
                yield return new ModContext<IFallout4Mod, ISpellInternal, ISpellGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Spells.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Spells.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Scrolls)
            {
                yield return new ModContext<IFallout4Mod, IScrollInternal, IScrollGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Scrolls.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Scrolls.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Activators)
            {
                yield return new ModContext<IFallout4Mod, IActivatorInternal, IActivatorGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Activators.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Activators.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.TalkingActivators)
            {
                yield return new ModContext<IFallout4Mod, ITalkingActivatorInternal, ITalkingActivatorGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.TalkingActivators.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.TalkingActivators.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Armors)
            {
                yield return new ModContext<IFallout4Mod, IArmorInternal, IArmorGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Armors.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Armors.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Books)
            {
                yield return new ModContext<IFallout4Mod, IBookInternal, IBookGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Books.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Books.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Containers)
            {
                yield return new ModContext<IFallout4Mod, IContainerInternal, IContainerGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Containers.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Containers.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Doors)
            {
                yield return new ModContext<IFallout4Mod, IDoorInternal, IDoorGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Doors.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Doors.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Ingredients)
            {
                yield return new ModContext<IFallout4Mod, IIngredientInternal, IIngredientGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Ingredients.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Ingredients.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Lights)
            {
                yield return new ModContext<IFallout4Mod, ILightInternal, ILightGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Lights.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Lights.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.MiscItems)
            {
                yield return new ModContext<IFallout4Mod, IMiscItemInternal, IMiscItemGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.MiscItems.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.MiscItems.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.AlchemicalApparatuses)
            {
                yield return new ModContext<IFallout4Mod, IAlchemicalApparatusInternal, IAlchemicalApparatusGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.AlchemicalApparatuses.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.AlchemicalApparatuses.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Statics)
            {
                yield return new ModContext<IFallout4Mod, IStaticInternal, IStaticGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Statics.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Statics.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.MoveableStatics)
            {
                yield return new ModContext<IFallout4Mod, IMoveableStaticInternal, IMoveableStaticGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.MoveableStatics.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.MoveableStatics.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Grasses)
            {
                yield return new ModContext<IFallout4Mod, IGrassInternal, IGrassGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Grasses.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Grasses.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Trees)
            {
                yield return new ModContext<IFallout4Mod, ITreeInternal, ITreeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Trees.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Trees.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Florae)
            {
                yield return new ModContext<IFallout4Mod, IFloraInternal, IFloraGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Florae.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Florae.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Furniture)
            {
                yield return new ModContext<IFallout4Mod, IFurnitureInternal, IFurnitureGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Furniture.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Furniture.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Weapons)
            {
                yield return new ModContext<IFallout4Mod, IWeaponInternal, IWeaponGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Weapons.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Weapons.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Ammunitions)
            {
                yield return new ModContext<IFallout4Mod, IAmmunitionInternal, IAmmunitionGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Ammunitions.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Ammunitions.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Npcs)
            {
                yield return new ModContext<IFallout4Mod, INpcInternal, INpcGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Npcs.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Npcs.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LeveledNpcs)
            {
                yield return new ModContext<IFallout4Mod, ILeveledNpcInternal, ILeveledNpcGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LeveledNpcs.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LeveledNpcs.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Keys)
            {
                yield return new ModContext<IFallout4Mod, IKeyInternal, IKeyGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Keys.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Keys.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Ingestibles)
            {
                yield return new ModContext<IFallout4Mod, IIngestibleInternal, IIngestibleGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Ingestibles.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Ingestibles.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.IdleMarkers)
            {
                yield return new ModContext<IFallout4Mod, IIdleMarkerInternal, IIdleMarkerGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.IdleMarkers.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.IdleMarkers.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.ConstructibleObjects)
            {
                yield return new ModContext<IFallout4Mod, IConstructibleObjectInternal, IConstructibleObjectGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.ConstructibleObjects.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.ConstructibleObjects.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Projectiles)
            {
                yield return new ModContext<IFallout4Mod, IProjectileInternal, IProjectileGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Projectiles.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Projectiles.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Hazards)
            {
                yield return new ModContext<IFallout4Mod, IHazardInternal, IHazardGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Hazards.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Hazards.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.SoulGems)
            {
                yield return new ModContext<IFallout4Mod, ISoulGemInternal, ISoulGemGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.SoulGems.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.SoulGems.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LeveledItems)
            {
                yield return new ModContext<IFallout4Mod, ILeveledItemInternal, ILeveledItemGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LeveledItems.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LeveledItems.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Weathers)
            {
                yield return new ModContext<IFallout4Mod, IWeatherInternal, IWeatherGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Weathers.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Weathers.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Climates)
            {
                yield return new ModContext<IFallout4Mod, IClimateInternal, IClimateGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Climates.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Climates.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.ShaderParticleGeometries)
            {
                yield return new ModContext<IFallout4Mod, IShaderParticleGeometryInternal, IShaderParticleGeometryGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.ShaderParticleGeometries.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.ShaderParticleGeometries.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.VisualEffects)
            {
                yield return new ModContext<IFallout4Mod, IVisualEffectInternal, IVisualEffectGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.VisualEffects.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.VisualEffects.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Regions)
            {
                yield return new ModContext<IFallout4Mod, IRegionInternal, IRegionGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Regions.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Regions.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.NavigationMeshInfoMaps)
            {
                yield return new ModContext<IFallout4Mod, INavigationMeshInfoMapInternal, INavigationMeshInfoMapGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.NavigationMeshInfoMaps.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.NavigationMeshInfoMaps.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Worldspaces)
            {
                yield return new ModContext<IFallout4Mod, IWorldspaceInternal, IWorldspaceGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(r, e));
            }
            foreach (var groupItem in obj.Worldspaces)
            {
                foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                    duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.DialogTopics)
            {
                yield return new ModContext<IFallout4Mod, IDialogTopicInternal, IDialogTopicGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.DialogTopics.DuplicateInAsNewRecord(r, e));
            }
            foreach (var groupItem in obj.DialogTopics)
            {
                foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(linkCache.Resolve<IDialogTopicGetter>(r.FormKey)),
                    duplicateInto: (m, r, e) => m.DialogTopics.DuplicateInAsNewRecord(linkCache.Resolve<IDialogTopicGetter>(r.FormKey), e)))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Quests)
            {
                yield return new ModContext<IFallout4Mod, IQuestInternal, IQuestGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Quests.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.IdleAnimations)
            {
                yield return new ModContext<IFallout4Mod, IIdleAnimationInternal, IIdleAnimationGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.IdleAnimations.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.IdleAnimations.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Packages)
            {
                yield return new ModContext<IFallout4Mod, IPackageInternal, IPackageGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Packages.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Packages.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.CombatStyles)
            {
                yield return new ModContext<IFallout4Mod, ICombatStyleInternal, ICombatStyleGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.CombatStyles.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.CombatStyles.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LoadScreens)
            {
                yield return new ModContext<IFallout4Mod, ILoadScreenInternal, ILoadScreenGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LoadScreens.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LoadScreens.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LeveledSpells)
            {
                yield return new ModContext<IFallout4Mod, ILeveledSpellInternal, ILeveledSpellGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LeveledSpells.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LeveledSpells.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.AnimatedObjects)
            {
                yield return new ModContext<IFallout4Mod, IAnimatedObjectInternal, IAnimatedObjectGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.AnimatedObjects.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.AnimatedObjects.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Waters)
            {
                yield return new ModContext<IFallout4Mod, IWaterInternal, IWaterGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Waters.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Waters.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.EffectShaders)
            {
                yield return new ModContext<IFallout4Mod, IEffectShaderInternal, IEffectShaderGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.EffectShaders.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.EffectShaders.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Explosions)
            {
                yield return new ModContext<IFallout4Mod, IExplosionInternal, IExplosionGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Explosions.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Explosions.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Debris)
            {
                yield return new ModContext<IFallout4Mod, IDebrisInternal, IDebrisGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Debris.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Debris.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.ImageSpaces)
            {
                yield return new ModContext<IFallout4Mod, IImageSpaceInternal, IImageSpaceGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.ImageSpaces.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.ImageSpaces.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.ImageSpaceAdapters)
            {
                yield return new ModContext<IFallout4Mod, IImageSpaceAdapterInternal, IImageSpaceAdapterGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.ImageSpaceAdapters.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.ImageSpaceAdapters.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.FormLists)
            {
                yield return new ModContext<IFallout4Mod, IFormListInternal, IFormListGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.FormLists.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.FormLists.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Perks)
            {
                yield return new ModContext<IFallout4Mod, IPerkInternal, IPerkGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Perks.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Perks.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.BodyParts)
            {
                yield return new ModContext<IFallout4Mod, IBodyPartDataInternal, IBodyPartDataGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.BodyParts.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.BodyParts.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.AddonNodes)
            {
                yield return new ModContext<IFallout4Mod, IAddonNodeInternal, IAddonNodeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.AddonNodes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.AddonNodes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.ActorValueInformation)
            {
                yield return new ModContext<IFallout4Mod, IActorValueInformationInternal, IActorValueInformationGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.ActorValueInformation.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.ActorValueInformation.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.CameraShots)
            {
                yield return new ModContext<IFallout4Mod, ICameraShotInternal, ICameraShotGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.CameraShots.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.CameraShots.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.CameraPaths)
            {
                yield return new ModContext<IFallout4Mod, ICameraPathInternal, ICameraPathGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.CameraPaths.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.CameraPaths.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.VoiceTypes)
            {
                yield return new ModContext<IFallout4Mod, IVoiceTypeInternal, IVoiceTypeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.VoiceTypes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.VoiceTypes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.MaterialTypes)
            {
                yield return new ModContext<IFallout4Mod, IMaterialTypeInternal, IMaterialTypeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.MaterialTypes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.MaterialTypes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Impacts)
            {
                yield return new ModContext<IFallout4Mod, IImpactInternal, IImpactGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Impacts.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Impacts.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.ImpactDataSets)
            {
                yield return new ModContext<IFallout4Mod, IImpactDataSetInternal, IImpactDataSetGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.ImpactDataSets.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.ImpactDataSets.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.ArmorAddons)
            {
                yield return new ModContext<IFallout4Mod, IArmorAddonInternal, IArmorAddonGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.ArmorAddons.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.ArmorAddons.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.EncounterZones)
            {
                yield return new ModContext<IFallout4Mod, IEncounterZoneInternal, IEncounterZoneGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.EncounterZones.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.EncounterZones.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Locations)
            {
                yield return new ModContext<IFallout4Mod, ILocationInternal, ILocationGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Locations.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Locations.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Messages)
            {
                yield return new ModContext<IFallout4Mod, IMessageInternal, IMessageGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Messages.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Messages.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.DefaultObjectManagers)
            {
                yield return new ModContext<IFallout4Mod, IDefaultObjectManagerInternal, IDefaultObjectManagerGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.DefaultObjectManagers.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.DefaultObjectManagers.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.LightingTemplates)
            {
                yield return new ModContext<IFallout4Mod, ILightingTemplateInternal, ILightingTemplateGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.LightingTemplates.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.LightingTemplates.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.MusicTypes)
            {
                yield return new ModContext<IFallout4Mod, IMusicTypeInternal, IMusicTypeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.MusicTypes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.MusicTypes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Footsteps)
            {
                yield return new ModContext<IFallout4Mod, IFootstepInternal, IFootstepGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Footsteps.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Footsteps.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.FootstepSets)
            {
                yield return new ModContext<IFallout4Mod, IFootstepSetInternal, IFootstepSetGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.FootstepSets.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.FootstepSets.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.StoryManagerBranchNodes)
            {
                yield return new ModContext<IFallout4Mod, IStoryManagerBranchNodeInternal, IStoryManagerBranchNodeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.StoryManagerBranchNodes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.StoryManagerBranchNodes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.StoryManagerQuestNodes)
            {
                yield return new ModContext<IFallout4Mod, IStoryManagerQuestNodeInternal, IStoryManagerQuestNodeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.StoryManagerQuestNodes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.StoryManagerQuestNodes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.StoryManagerEventNodes)
            {
                yield return new ModContext<IFallout4Mod, IStoryManagerEventNodeInternal, IStoryManagerEventNodeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.StoryManagerEventNodes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.StoryManagerEventNodes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.DialogBranches)
            {
                yield return new ModContext<IFallout4Mod, IDialogBranchInternal, IDialogBranchGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.DialogBranches.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.DialogBranches.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.MusicTracks)
            {
                yield return new ModContext<IFallout4Mod, IMusicTrackInternal, IMusicTrackGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.MusicTracks.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.MusicTracks.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.DialogViews)
            {
                yield return new ModContext<IFallout4Mod, IDialogViewInternal, IDialogViewGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.DialogViews.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.DialogViews.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.WordsOfPower)
            {
                yield return new ModContext<IFallout4Mod, IWordOfPowerInternal, IWordOfPowerGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.WordsOfPower.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.WordsOfPower.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Shouts)
            {
                yield return new ModContext<IFallout4Mod, IShoutInternal, IShoutGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Shouts.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Shouts.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.EquipTypes)
            {
                yield return new ModContext<IFallout4Mod, IEquipTypeInternal, IEquipTypeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.EquipTypes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.EquipTypes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Relationships)
            {
                yield return new ModContext<IFallout4Mod, IRelationshipInternal, IRelationshipGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Relationships.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Relationships.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Scenes)
            {
                yield return new ModContext<IFallout4Mod, ISceneInternal, ISceneGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Scenes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Scenes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.AssociationTypes)
            {
                yield return new ModContext<IFallout4Mod, IAssociationTypeInternal, IAssociationTypeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.AssociationTypes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.AssociationTypes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Outfits)
            {
                yield return new ModContext<IFallout4Mod, IOutfitInternal, IOutfitGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Outfits.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Outfits.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.ArtObjects)
            {
                yield return new ModContext<IFallout4Mod, IArtObjectInternal, IArtObjectGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.ArtObjects.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.ArtObjects.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.MaterialObjects)
            {
                yield return new ModContext<IFallout4Mod, IMaterialObjectInternal, IMaterialObjectGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.MaterialObjects.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.MaterialObjects.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.MovementTypes)
            {
                yield return new ModContext<IFallout4Mod, IMovementTypeInternal, IMovementTypeGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.MovementTypes.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.MovementTypes.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.SoundDescriptors)
            {
                yield return new ModContext<IFallout4Mod, ISoundDescriptorInternal, ISoundDescriptorGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.SoundDescriptors.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.SoundDescriptors.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.DualCastData)
            {
                yield return new ModContext<IFallout4Mod, IDualCastDataInternal, IDualCastDataGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.DualCastData.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.DualCastData.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.SoundCategories)
            {
                yield return new ModContext<IFallout4Mod, ISoundCategoryInternal, ISoundCategoryGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.SoundCategories.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.SoundCategories.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.SoundOutputModels)
            {
                yield return new ModContext<IFallout4Mod, ISoundOutputModelInternal, ISoundOutputModelGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.SoundOutputModels.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.SoundOutputModels.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.CollisionLayers)
            {
                yield return new ModContext<IFallout4Mod, ICollisionLayerInternal, ICollisionLayerGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.CollisionLayers.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.CollisionLayers.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.Colors)
            {
                yield return new ModContext<IFallout4Mod, IColorRecordInternal, IColorRecordGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.Colors.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.Colors.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.ReverbParameters)
            {
                yield return new ModContext<IFallout4Mod, IReverbParametersInternal, IReverbParametersGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.ReverbParameters.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.ReverbParameters.DuplicateInAsNewRecord(r, e));
            }
            foreach (var item in obj.VolumetricLightings)
            {
                yield return new ModContext<IFallout4Mod, IVolumetricLightingInternal, IVolumetricLightingGetter>(
                    modKey: obj.ModKey,
                    record: item,
                    getOrAddAsOverride: (m, r) => m.VolumetricLightings.GetOrAddAsOverride(r),
                    duplicateInto: (m, r, e) => m.VolumetricLightings.DuplicateInAsNewRecord(r, e));
            }
        }
        
        public IEnumerable<IModContext<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter>> EnumerateMajorRecordContexts(
            IFallout4ModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IMajorRecordCommonGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings)
                    {
                        yield return new ModContext<IFallout4Mod, IGameSettingInternal, IGameSettingGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.GameSettings.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.GameSettings.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in obj.Keywords)
                    {
                        yield return new ModContext<IFallout4Mod, IKeywordInternal, IKeywordGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Keywords.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Keywords.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in obj.LocationReferenceTypes)
                    {
                        yield return new ModContext<IFallout4Mod, ILocationReferenceTypeInternal, ILocationReferenceTypeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LocationReferenceTypes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LocationReferenceTypes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in obj.Actions)
                    {
                        yield return new ModContext<IFallout4Mod, IActionRecordInternal, IActionRecordGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Actions.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Actions.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in obj.TextureSets)
                    {
                        yield return new ModContext<IFallout4Mod, ITextureSetInternal, ITextureSetGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.TextureSets.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.TextureSets.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals)
                    {
                        yield return new ModContext<IFallout4Mod, IGlobalInternal, IGlobalGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Globals.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Globals.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes)
                    {
                        yield return new ModContext<IFallout4Mod, IClassInternal, IClassGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Classes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Classes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions)
                    {
                        yield return new ModContext<IFallout4Mod, IFactionInternal, IFactionGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Factions.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Factions.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in obj.HeadParts)
                    {
                        yield return new ModContext<IFallout4Mod, IHeadPartInternal, IHeadPartGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.HeadParts.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.HeadParts.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    foreach (var item in obj.Hairs)
                    {
                        yield return new ModContext<IFallout4Mod, IHairInternal, IHairGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Hairs.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Hairs.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    foreach (var item in obj.Eyes)
                    {
                        yield return new ModContext<IFallout4Mod, IEyesInternal, IEyesGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Eyes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Eyes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races)
                    {
                        yield return new ModContext<IFallout4Mod, IRaceInternal, IRaceGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Races.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Races.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    foreach (var item in obj.SoundMarkers)
                    {
                        yield return new ModContext<IFallout4Mod, ISoundMarkerInternal, ISoundMarkerGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.SoundMarkers.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.SoundMarkers.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    foreach (var item in obj.AcousticSpaces)
                    {
                        yield return new ModContext<IFallout4Mod, IAcousticSpaceInternal, IAcousticSpaceGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.AcousticSpaces.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.AcousticSpaces.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in obj.MagicEffects)
                    {
                        yield return new ModContext<IFallout4Mod, IMagicEffectInternal, IMagicEffectGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.MagicEffects.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.MagicEffects.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    foreach (var item in obj.LandscapeTextures)
                    {
                        yield return new ModContext<IFallout4Mod, ILandscapeTextureInternal, ILandscapeTextureGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LandscapeTextures.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LandscapeTextures.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    foreach (var item in obj.ObjectEffects)
                    {
                        yield return new ModContext<IFallout4Mod, IObjectEffectInternal, IObjectEffectGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.ObjectEffects.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.ObjectEffects.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in obj.Spells)
                    {
                        yield return new ModContext<IFallout4Mod, ISpellInternal, ISpellGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Spells.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Spells.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    foreach (var item in obj.Scrolls)
                    {
                        yield return new ModContext<IFallout4Mod, IScrollInternal, IScrollGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Scrolls.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Scrolls.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in obj.Activators)
                    {
                        yield return new ModContext<IFallout4Mod, IActivatorInternal, IActivatorGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Activators.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Activators.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    foreach (var item in obj.TalkingActivators)
                    {
                        yield return new ModContext<IFallout4Mod, ITalkingActivatorInternal, ITalkingActivatorGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.TalkingActivators.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.TalkingActivators.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in obj.Armors)
                    {
                        yield return new ModContext<IFallout4Mod, IArmorInternal, IArmorGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Armors.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Armors.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in obj.Books)
                    {
                        yield return new ModContext<IFallout4Mod, IBookInternal, IBookGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Books.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Books.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in obj.Containers)
                    {
                        yield return new ModContext<IFallout4Mod, IContainerInternal, IContainerGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Containers.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Containers.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in obj.Doors)
                    {
                        yield return new ModContext<IFallout4Mod, IDoorInternal, IDoorGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Doors.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Doors.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in obj.Ingredients)
                    {
                        yield return new ModContext<IFallout4Mod, IIngredientInternal, IIngredientGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Ingredients.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Ingredients.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in obj.Lights)
                    {
                        yield return new ModContext<IFallout4Mod, ILightInternal, ILightGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Lights.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Lights.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    foreach (var item in obj.MiscItems)
                    {
                        yield return new ModContext<IFallout4Mod, IMiscItemInternal, IMiscItemGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.MiscItems.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.MiscItems.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    foreach (var item in obj.AlchemicalApparatuses)
                    {
                        yield return new ModContext<IFallout4Mod, IAlchemicalApparatusInternal, IAlchemicalApparatusGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.AlchemicalApparatuses.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.AlchemicalApparatuses.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in obj.Statics)
                    {
                        yield return new ModContext<IFallout4Mod, IStaticInternal, IStaticGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Statics.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Statics.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    foreach (var item in obj.MoveableStatics)
                    {
                        yield return new ModContext<IFallout4Mod, IMoveableStaticInternal, IMoveableStaticGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.MoveableStatics.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.MoveableStatics.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in obj.Grasses)
                    {
                        yield return new ModContext<IFallout4Mod, IGrassInternal, IGrassGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Grasses.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Grasses.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in obj.Trees)
                    {
                        yield return new ModContext<IFallout4Mod, ITreeInternal, ITreeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Trees.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Trees.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in obj.Florae)
                    {
                        yield return new ModContext<IFallout4Mod, IFloraInternal, IFloraGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Florae.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Florae.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in obj.Furniture)
                    {
                        yield return new ModContext<IFallout4Mod, IFurnitureInternal, IFurnitureGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Furniture.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Furniture.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons)
                    {
                        yield return new ModContext<IFallout4Mod, IWeaponInternal, IWeaponGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Weapons.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Weapons.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in obj.Ammunitions)
                    {
                        yield return new ModContext<IFallout4Mod, IAmmunitionInternal, IAmmunitionGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Ammunitions.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Ammunitions.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in obj.Npcs)
                    {
                        yield return new ModContext<IFallout4Mod, INpcInternal, INpcGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Npcs.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Npcs.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    foreach (var item in obj.LeveledNpcs)
                    {
                        yield return new ModContext<IFallout4Mod, ILeveledNpcInternal, ILeveledNpcGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LeveledNpcs.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LeveledNpcs.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in obj.Keys)
                    {
                        yield return new ModContext<IFallout4Mod, IKeyInternal, IKeyGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Keys.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Keys.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    foreach (var item in obj.Ingestibles)
                    {
                        yield return new ModContext<IFallout4Mod, IIngestibleInternal, IIngestibleGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Ingestibles.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Ingestibles.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    foreach (var item in obj.IdleMarkers)
                    {
                        yield return new ModContext<IFallout4Mod, IIdleMarkerInternal, IIdleMarkerGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.IdleMarkers.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.IdleMarkers.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    foreach (var item in obj.ConstructibleObjects)
                    {
                        yield return new ModContext<IFallout4Mod, IConstructibleObjectInternal, IConstructibleObjectGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.ConstructibleObjects.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.ConstructibleObjects.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    foreach (var item in obj.Projectiles)
                    {
                        yield return new ModContext<IFallout4Mod, IProjectileInternal, IProjectileGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Projectiles.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Projectiles.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    foreach (var item in obj.Hazards)
                    {
                        yield return new ModContext<IFallout4Mod, IHazardInternal, IHazardGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Hazards.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Hazards.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    foreach (var item in obj.SoulGems)
                    {
                        yield return new ModContext<IFallout4Mod, ISoulGemInternal, ISoulGemGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.SoulGems.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.SoulGems.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in obj.LeveledItems)
                    {
                        yield return new ModContext<IFallout4Mod, ILeveledItemInternal, ILeveledItemGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LeveledItems.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LeveledItems.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in obj.Weathers)
                    {
                        yield return new ModContext<IFallout4Mod, IWeatherInternal, IWeatherGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Weathers.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Weathers.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in obj.Climates)
                    {
                        yield return new ModContext<IFallout4Mod, IClimateInternal, IClimateGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Climates.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Climates.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    foreach (var item in obj.ShaderParticleGeometries)
                    {
                        yield return new ModContext<IFallout4Mod, IShaderParticleGeometryInternal, IShaderParticleGeometryGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.ShaderParticleGeometries.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.ShaderParticleGeometries.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    foreach (var item in obj.VisualEffects)
                    {
                        yield return new ModContext<IFallout4Mod, IVisualEffectInternal, IVisualEffectGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.VisualEffects.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.VisualEffects.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in obj.Regions)
                    {
                        yield return new ModContext<IFallout4Mod, IRegionInternal, IRegionGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Regions.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Regions.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    foreach (var item in obj.NavigationMeshInfoMaps)
                    {
                        yield return new ModContext<IFallout4Mod, INavigationMeshInfoMapInternal, INavigationMeshInfoMapGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.NavigationMeshInfoMaps.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.NavigationMeshInfoMaps.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in obj.Worldspaces)
                    {
                        yield return new ModContext<IFallout4Mod, IWorldspaceInternal, IWorldspaceGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in obj.DialogTopics)
                    {
                        yield return new ModContext<IFallout4Mod, IDialogTopicInternal, IDialogTopicGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.DialogTopics.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in obj.Quests)
                    {
                        yield return new ModContext<IFallout4Mod, IQuestInternal, IQuestGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Quests.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in obj.IdleAnimations)
                    {
                        yield return new ModContext<IFallout4Mod, IIdleAnimationInternal, IIdleAnimationGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.IdleAnimations.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.IdleAnimations.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    foreach (var item in obj.Packages)
                    {
                        yield return new ModContext<IFallout4Mod, IPackageInternal, IPackageGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Packages.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Packages.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in obj.CombatStyles)
                    {
                        yield return new ModContext<IFallout4Mod, ICombatStyleInternal, ICombatStyleGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.CombatStyles.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.CombatStyles.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in obj.LoadScreens)
                    {
                        yield return new ModContext<IFallout4Mod, ILoadScreenInternal, ILoadScreenGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LoadScreens.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LoadScreens.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    foreach (var item in obj.LeveledSpells)
                    {
                        yield return new ModContext<IFallout4Mod, ILeveledSpellInternal, ILeveledSpellGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LeveledSpells.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LeveledSpells.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in obj.AnimatedObjects)
                    {
                        yield return new ModContext<IFallout4Mod, IAnimatedObjectInternal, IAnimatedObjectGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.AnimatedObjects.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.AnimatedObjects.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in obj.Waters)
                    {
                        yield return new ModContext<IFallout4Mod, IWaterInternal, IWaterGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Waters.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Waters.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in obj.EffectShaders)
                    {
                        yield return new ModContext<IFallout4Mod, IEffectShaderInternal, IEffectShaderGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.EffectShaders.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.EffectShaders.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    foreach (var item in obj.Explosions)
                    {
                        yield return new ModContext<IFallout4Mod, IExplosionInternal, IExplosionGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Explosions.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Explosions.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    foreach (var item in obj.Debris)
                    {
                        yield return new ModContext<IFallout4Mod, IDebrisInternal, IDebrisGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Debris.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Debris.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    foreach (var item in obj.ImageSpaces)
                    {
                        yield return new ModContext<IFallout4Mod, IImageSpaceInternal, IImageSpaceGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.ImageSpaces.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.ImageSpaces.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    foreach (var item in obj.ImageSpaceAdapters)
                    {
                        yield return new ModContext<IFallout4Mod, IImageSpaceAdapterInternal, IImageSpaceAdapterGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.ImageSpaceAdapters.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.ImageSpaceAdapters.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    foreach (var item in obj.FormLists)
                    {
                        yield return new ModContext<IFallout4Mod, IFormListInternal, IFormListGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.FormLists.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.FormLists.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    foreach (var item in obj.Perks)
                    {
                        yield return new ModContext<IFallout4Mod, IPerkInternal, IPerkGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Perks.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Perks.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    foreach (var item in obj.BodyParts)
                    {
                        yield return new ModContext<IFallout4Mod, IBodyPartDataInternal, IBodyPartDataGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.BodyParts.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.BodyParts.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    foreach (var item in obj.AddonNodes)
                    {
                        yield return new ModContext<IFallout4Mod, IAddonNodeInternal, IAddonNodeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.AddonNodes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.AddonNodes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    foreach (var item in obj.ActorValueInformation)
                    {
                        yield return new ModContext<IFallout4Mod, IActorValueInformationInternal, IActorValueInformationGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.ActorValueInformation.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.ActorValueInformation.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    foreach (var item in obj.CameraShots)
                    {
                        yield return new ModContext<IFallout4Mod, ICameraShotInternal, ICameraShotGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.CameraShots.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.CameraShots.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    foreach (var item in obj.CameraPaths)
                    {
                        yield return new ModContext<IFallout4Mod, ICameraPathInternal, ICameraPathGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.CameraPaths.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.CameraPaths.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    foreach (var item in obj.VoiceTypes)
                    {
                        yield return new ModContext<IFallout4Mod, IVoiceTypeInternal, IVoiceTypeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.VoiceTypes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.VoiceTypes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    foreach (var item in obj.MaterialTypes)
                    {
                        yield return new ModContext<IFallout4Mod, IMaterialTypeInternal, IMaterialTypeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.MaterialTypes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.MaterialTypes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    foreach (var item in obj.Impacts)
                    {
                        yield return new ModContext<IFallout4Mod, IImpactInternal, IImpactGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Impacts.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Impacts.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    foreach (var item in obj.ImpactDataSets)
                    {
                        yield return new ModContext<IFallout4Mod, IImpactDataSetInternal, IImpactDataSetGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.ImpactDataSets.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.ImpactDataSets.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    foreach (var item in obj.ArmorAddons)
                    {
                        yield return new ModContext<IFallout4Mod, IArmorAddonInternal, IArmorAddonGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.ArmorAddons.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.ArmorAddons.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    foreach (var item in obj.EncounterZones)
                    {
                        yield return new ModContext<IFallout4Mod, IEncounterZoneInternal, IEncounterZoneGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.EncounterZones.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.EncounterZones.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    foreach (var item in obj.Locations)
                    {
                        yield return new ModContext<IFallout4Mod, ILocationInternal, ILocationGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Locations.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Locations.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    foreach (var item in obj.Messages)
                    {
                        yield return new ModContext<IFallout4Mod, IMessageInternal, IMessageGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Messages.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Messages.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    foreach (var item in obj.DefaultObjectManagers)
                    {
                        yield return new ModContext<IFallout4Mod, IDefaultObjectManagerInternal, IDefaultObjectManagerGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.DefaultObjectManagers.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.DefaultObjectManagers.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    foreach (var item in obj.LightingTemplates)
                    {
                        yield return new ModContext<IFallout4Mod, ILightingTemplateInternal, ILightingTemplateGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.LightingTemplates.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.LightingTemplates.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    foreach (var item in obj.MusicTypes)
                    {
                        yield return new ModContext<IFallout4Mod, IMusicTypeInternal, IMusicTypeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.MusicTypes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.MusicTypes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    foreach (var item in obj.Footsteps)
                    {
                        yield return new ModContext<IFallout4Mod, IFootstepInternal, IFootstepGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Footsteps.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Footsteps.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    foreach (var item in obj.FootstepSets)
                    {
                        yield return new ModContext<IFallout4Mod, IFootstepSetInternal, IFootstepSetGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.FootstepSets.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.FootstepSets.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    foreach (var item in obj.StoryManagerBranchNodes)
                    {
                        yield return new ModContext<IFallout4Mod, IStoryManagerBranchNodeInternal, IStoryManagerBranchNodeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.StoryManagerBranchNodes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.StoryManagerBranchNodes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    foreach (var item in obj.StoryManagerQuestNodes)
                    {
                        yield return new ModContext<IFallout4Mod, IStoryManagerQuestNodeInternal, IStoryManagerQuestNodeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.StoryManagerQuestNodes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.StoryManagerQuestNodes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    foreach (var item in obj.StoryManagerEventNodes)
                    {
                        yield return new ModContext<IFallout4Mod, IStoryManagerEventNodeInternal, IStoryManagerEventNodeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.StoryManagerEventNodes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.StoryManagerEventNodes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    foreach (var item in obj.DialogBranches)
                    {
                        yield return new ModContext<IFallout4Mod, IDialogBranchInternal, IDialogBranchGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.DialogBranches.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.DialogBranches.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    foreach (var item in obj.MusicTracks)
                    {
                        yield return new ModContext<IFallout4Mod, IMusicTrackInternal, IMusicTrackGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.MusicTracks.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.MusicTracks.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    foreach (var item in obj.DialogViews)
                    {
                        yield return new ModContext<IFallout4Mod, IDialogViewInternal, IDialogViewGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.DialogViews.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.DialogViews.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "WordOfPower":
                case "IWordOfPowerGetter":
                case "IWordOfPower":
                case "IWordOfPowerInternal":
                    foreach (var item in obj.WordsOfPower)
                    {
                        yield return new ModContext<IFallout4Mod, IWordOfPowerInternal, IWordOfPowerGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.WordsOfPower.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.WordsOfPower.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Shout":
                case "IShoutGetter":
                case "IShout":
                case "IShoutInternal":
                    foreach (var item in obj.Shouts)
                    {
                        yield return new ModContext<IFallout4Mod, IShoutInternal, IShoutGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Shouts.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Shouts.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    foreach (var item in obj.EquipTypes)
                    {
                        yield return new ModContext<IFallout4Mod, IEquipTypeInternal, IEquipTypeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.EquipTypes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.EquipTypes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    foreach (var item in obj.Relationships)
                    {
                        yield return new ModContext<IFallout4Mod, IRelationshipInternal, IRelationshipGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Relationships.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Relationships.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    foreach (var item in obj.Scenes)
                    {
                        yield return new ModContext<IFallout4Mod, ISceneInternal, ISceneGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Scenes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Scenes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    foreach (var item in obj.AssociationTypes)
                    {
                        yield return new ModContext<IFallout4Mod, IAssociationTypeInternal, IAssociationTypeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.AssociationTypes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.AssociationTypes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    foreach (var item in obj.Outfits)
                    {
                        yield return new ModContext<IFallout4Mod, IOutfitInternal, IOutfitGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Outfits.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Outfits.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    foreach (var item in obj.ArtObjects)
                    {
                        yield return new ModContext<IFallout4Mod, IArtObjectInternal, IArtObjectGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.ArtObjects.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.ArtObjects.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    foreach (var item in obj.MaterialObjects)
                    {
                        yield return new ModContext<IFallout4Mod, IMaterialObjectInternal, IMaterialObjectGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.MaterialObjects.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.MaterialObjects.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    foreach (var item in obj.MovementTypes)
                    {
                        yield return new ModContext<IFallout4Mod, IMovementTypeInternal, IMovementTypeGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.MovementTypes.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.MovementTypes.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    foreach (var item in obj.SoundDescriptors)
                    {
                        yield return new ModContext<IFallout4Mod, ISoundDescriptorInternal, ISoundDescriptorGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.SoundDescriptors.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.SoundDescriptors.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "DualCastData":
                case "IDualCastDataGetter":
                case "IDualCastData":
                case "IDualCastDataInternal":
                    foreach (var item in obj.DualCastData)
                    {
                        yield return new ModContext<IFallout4Mod, IDualCastDataInternal, IDualCastDataGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.DualCastData.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.DualCastData.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    foreach (var item in obj.SoundCategories)
                    {
                        yield return new ModContext<IFallout4Mod, ISoundCategoryInternal, ISoundCategoryGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.SoundCategories.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.SoundCategories.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    foreach (var item in obj.SoundOutputModels)
                    {
                        yield return new ModContext<IFallout4Mod, ISoundOutputModelInternal, ISoundOutputModelGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.SoundOutputModels.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.SoundOutputModels.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    foreach (var item in obj.CollisionLayers)
                    {
                        yield return new ModContext<IFallout4Mod, ICollisionLayerInternal, ICollisionLayerGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.CollisionLayers.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.CollisionLayers.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    foreach (var item in obj.Colors)
                    {
                        yield return new ModContext<IFallout4Mod, IColorRecordInternal, IColorRecordGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.Colors.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.Colors.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    foreach (var item in obj.ReverbParameters)
                    {
                        yield return new ModContext<IFallout4Mod, IReverbParametersInternal, IReverbParametersGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.ReverbParameters.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.ReverbParameters.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    foreach (var item in obj.VolumetricLightings)
                    {
                        yield return new ModContext<IFallout4Mod, IVolumetricLightingInternal, IVolumetricLightingGetter>(
                            modKey: obj.ModKey,
                            record: item,
                            getOrAddAsOverride: (m, r) => m.VolumetricLightings.GetOrAddAsOverride(r),
                            duplicateInto: (m, r, e) => m.VolumetricLightings.DuplicateInAsNewRecord(r, e));
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "APlaced":
                case "IAPlacedGetter":
                case "IAPlaced":
                case "IAPlacedInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var groupItem in obj.DialogTopics)
                    {
                        foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(linkCache.Resolve<IDialogTopicGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.DialogTopics.DuplicateInAsNewRecord(linkCache.Resolve<IDialogTopicGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "IIdleRelation":
                case "IIdleRelationGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IActionRecordGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IIdleAnimationGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IObjectId":
                case "IObjectIdGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IActivatorGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IAmmunitionGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IArmorGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IBookGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IContainerGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IDoorGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IFactionGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IFormListGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IFurnitureGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IIdleMarkerGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IIngestibleGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IKeyGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ILightGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IMiscItemGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IMoveableStaticGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(INpcGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IProjectileGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IScrollGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IShoutGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ISoundMarkerGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ISpellGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IStaticGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ITextureSetGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IWeaponGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IItem":
                case "IItemGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IAlchemicalApparatusGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IAmmunitionGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IArmorGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IBookGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IIngestibleGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IIngredientGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IKeyGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ILeveledItemGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ILightGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IMiscItemGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IScrollGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ISoulGemGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IWeaponGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IOutfitTarget":
                case "IOutfitTargetGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IArmorGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ILeveledItemGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IComplexLocation":
                case "IComplexLocationGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IWorldspaceGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IDialog":
                case "IDialogGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IDialogTopicGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILocationTargetable":
                case "ILocationTargetableGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IDoorGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IOwner":
                case "IOwnerGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IFactionGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IRelatable":
                case "IRelatableGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IFactionGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IRaceGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IRegionTarget":
                case "IRegionTargetGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IFloraGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ILandscapeTextureGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IMoveableStaticGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IStaticGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ITreeGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IAliasVoiceType":
                case "IAliasVoiceTypeGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IFormListGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(INpcGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILockList":
                case "ILockListGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IFormListGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(INpcGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IPlacedTrapTarget":
                case "IPlacedTrapTargetGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IHazardGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IProjectileGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IHarvestTarget":
                case "IHarvestTargetGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IIngestibleGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IIngredientGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ILeveledItemGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IMiscItemGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IKeywordGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "INpcSpawn":
                case "INpcSpawnGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ILeveledNpcGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(INpcGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ISpellSpawn":
                case "ISpellSpawnGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ILeveledSpellGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ISpellGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IEmittance":
                case "IEmittanceGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ILightGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IRegionGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILocationRecord":
                case "ILocationRecordGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ILocationGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ILocationReferenceTypeGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "IEffectRecord":
                case "IEffectRecordGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(IObjectEffectGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ISpellGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                case "ILinkedReference":
                case "ILinkedReferenceGetter":
                {
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlaced":
                case "IPlacedGetter":
                {
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedSimple":
                case "IPlacedSimpleGetter":
                {
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "IPlacedThing":
                case "IPlacedThingGetter":
                {
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                }
                case "ISound":
                case "ISoundGetter":
                {
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ISoundDescriptorGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        type: typeof(ISoundMarkerGetter),
                        throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                }
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        #endregion
        
    }
    public partial class Fallout4ModSetterTranslationCommon
    {
        public static readonly Fallout4ModSetterTranslationCommon Instance = new Fallout4ModSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFallout4Mod item,
            IFallout4ModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Keywords);
                try
                {
                    item.Keywords.DeepCopyIn(
                        rhs: rhs.Keywords,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Keywords));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LocationReferenceTypes);
                try
                {
                    item.LocationReferenceTypes.DeepCopyIn(
                        rhs: rhs.LocationReferenceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LocationReferenceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Actions) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Actions);
                try
                {
                    item.Actions.DeepCopyIn(
                        rhs: rhs.Actions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Actions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.TextureSets) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.TextureSets);
                try
                {
                    item.TextureSets.DeepCopyIn(
                        rhs: rhs.TextureSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.TextureSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyIn(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Classes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Classes);
                try
                {
                    item.Classes.DeepCopyIn(
                        rhs: rhs.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Classes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Factions);
                try
                {
                    item.Factions.DeepCopyIn(
                        rhs: rhs.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Factions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.DeepCopyIn(
                        rhs: rhs.HeadParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.HeadParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Hairs);
                try
                {
                    item.Hairs.DeepCopyIn(
                        rhs: rhs.Hairs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Hairs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Eyes);
                try
                {
                    item.Eyes.DeepCopyIn(
                        rhs: rhs.Eyes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Eyes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Races) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Races);
                try
                {
                    item.Races.DeepCopyIn(
                        rhs: rhs.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Races));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundMarkers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.SoundMarkers);
                try
                {
                    item.SoundMarkers.DeepCopyIn(
                        rhs: rhs.SoundMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.SoundMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AcousticSpaces) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AcousticSpaces);
                try
                {
                    item.AcousticSpaces.DeepCopyIn(
                        rhs: rhs.AcousticSpaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AcousticSpaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MagicEffects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MagicEffects);
                try
                {
                    item.MagicEffects.DeepCopyIn(
                        rhs: rhs.MagicEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MagicEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LandscapeTextures) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LandscapeTextures);
                try
                {
                    item.LandscapeTextures.DeepCopyIn(
                        rhs: rhs.LandscapeTextures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LandscapeTextures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ObjectEffects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ObjectEffects);
                try
                {
                    item.ObjectEffects.DeepCopyIn(
                        rhs: rhs.ObjectEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ObjectEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Spells);
                try
                {
                    item.Spells.DeepCopyIn(
                        rhs: rhs.Spells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Spells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Scrolls) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Scrolls);
                try
                {
                    item.Scrolls.DeepCopyIn(
                        rhs: rhs.Scrolls,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Scrolls));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Activators) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Activators);
                try
                {
                    item.Activators.DeepCopyIn(
                        rhs: rhs.Activators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Activators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.TalkingActivators) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.TalkingActivators);
                try
                {
                    item.TalkingActivators.DeepCopyIn(
                        rhs: rhs.TalkingActivators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.TalkingActivators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Armors) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Armors);
                try
                {
                    item.Armors.DeepCopyIn(
                        rhs: rhs.Armors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Armors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Books) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Books);
                try
                {
                    item.Books.DeepCopyIn(
                        rhs: rhs.Books,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Books));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Containers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Containers);
                try
                {
                    item.Containers.DeepCopyIn(
                        rhs: rhs.Containers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Containers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Doors) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Doors);
                try
                {
                    item.Doors.DeepCopyIn(
                        rhs: rhs.Doors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Doors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Ingredients) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Ingredients);
                try
                {
                    item.Ingredients.DeepCopyIn(
                        rhs: rhs.Ingredients,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Ingredients));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Lights) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Lights);
                try
                {
                    item.Lights.DeepCopyIn(
                        rhs: rhs.Lights,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Lights));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MiscItems) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MiscItems);
                try
                {
                    item.MiscItems.DeepCopyIn(
                        rhs: rhs.MiscItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MiscItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AlchemicalApparatuses) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AlchemicalApparatuses);
                try
                {
                    item.AlchemicalApparatuses.DeepCopyIn(
                        rhs: rhs.AlchemicalApparatuses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AlchemicalApparatuses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Statics) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Statics);
                try
                {
                    item.Statics.DeepCopyIn(
                        rhs: rhs.Statics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Statics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MoveableStatics) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MoveableStatics);
                try
                {
                    item.MoveableStatics.DeepCopyIn(
                        rhs: rhs.MoveableStatics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MoveableStatics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Grasses);
                try
                {
                    item.Grasses.DeepCopyIn(
                        rhs: rhs.Grasses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Grasses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Trees) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Trees);
                try
                {
                    item.Trees.DeepCopyIn(
                        rhs: rhs.Trees,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Trees));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Florae) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Florae);
                try
                {
                    item.Florae.DeepCopyIn(
                        rhs: rhs.Florae,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Florae));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Furniture) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Furniture);
                try
                {
                    item.Furniture.DeepCopyIn(
                        rhs: rhs.Furniture,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Furniture));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Weapons) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Weapons);
                try
                {
                    item.Weapons.DeepCopyIn(
                        rhs: rhs.Weapons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Weapons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Ammunitions) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Ammunitions);
                try
                {
                    item.Ammunitions.DeepCopyIn(
                        rhs: rhs.Ammunitions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Ammunitions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Npcs) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Npcs);
                try
                {
                    item.Npcs.DeepCopyIn(
                        rhs: rhs.Npcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Npcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LeveledNpcs) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LeveledNpcs);
                try
                {
                    item.LeveledNpcs.DeepCopyIn(
                        rhs: rhs.LeveledNpcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LeveledNpcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Keys) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Keys);
                try
                {
                    item.Keys.DeepCopyIn(
                        rhs: rhs.Keys,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Keys));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Ingestibles) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Ingestibles);
                try
                {
                    item.Ingestibles.DeepCopyIn(
                        rhs: rhs.Ingestibles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Ingestibles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.IdleMarkers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.IdleMarkers);
                try
                {
                    item.IdleMarkers.DeepCopyIn(
                        rhs: rhs.IdleMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.IdleMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ConstructibleObjects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ConstructibleObjects);
                try
                {
                    item.ConstructibleObjects.DeepCopyIn(
                        rhs: rhs.ConstructibleObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ConstructibleObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Projectiles) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Projectiles);
                try
                {
                    item.Projectiles.DeepCopyIn(
                        rhs: rhs.Projectiles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Projectiles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Hazards) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Hazards);
                try
                {
                    item.Hazards.DeepCopyIn(
                        rhs: rhs.Hazards,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Hazards));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoulGems) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.SoulGems);
                try
                {
                    item.SoulGems.DeepCopyIn(
                        rhs: rhs.SoulGems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.SoulGems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LeveledItems) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LeveledItems);
                try
                {
                    item.LeveledItems.DeepCopyIn(
                        rhs: rhs.LeveledItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LeveledItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Weathers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Weathers);
                try
                {
                    item.Weathers.DeepCopyIn(
                        rhs: rhs.Weathers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Weathers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Climates) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Climates);
                try
                {
                    item.Climates.DeepCopyIn(
                        rhs: rhs.Climates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Climates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ShaderParticleGeometries) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ShaderParticleGeometries);
                try
                {
                    item.ShaderParticleGeometries.DeepCopyIn(
                        rhs: rhs.ShaderParticleGeometries,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ShaderParticleGeometries));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.VisualEffects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.VisualEffects);
                try
                {
                    item.VisualEffects.DeepCopyIn(
                        rhs: rhs.VisualEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.VisualEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Regions);
                try
                {
                    item.Regions.DeepCopyIn(
                        rhs: rhs.Regions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Regions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.NavigationMeshInfoMaps) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.NavigationMeshInfoMaps);
                try
                {
                    item.NavigationMeshInfoMaps.DeepCopyIn(
                        rhs: rhs.NavigationMeshInfoMaps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.NavigationMeshInfoMaps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Cells) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Cells);
                try
                {
                    item.Cells.DeepCopyIn(
                        rhs: rhs.Cells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Cells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Worldspaces) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Worldspaces);
                try
                {
                    item.Worldspaces.DeepCopyIn(
                        rhs: rhs.Worldspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Worldspaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DialogTopics) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.DialogTopics);
                try
                {
                    item.DialogTopics.DeepCopyIn(
                        rhs: rhs.DialogTopics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.DialogTopics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Quests) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Quests);
                try
                {
                    item.Quests.DeepCopyIn(
                        rhs: rhs.Quests,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Quests));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.IdleAnimations) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.IdleAnimations);
                try
                {
                    item.IdleAnimations.DeepCopyIn(
                        rhs: rhs.IdleAnimations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.IdleAnimations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Packages) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Packages);
                try
                {
                    item.Packages.DeepCopyIn(
                        rhs: rhs.Packages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Packages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CombatStyles) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.CombatStyles);
                try
                {
                    item.CombatStyles.DeepCopyIn(
                        rhs: rhs.CombatStyles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.CombatStyles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LoadScreens) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LoadScreens);
                try
                {
                    item.LoadScreens.DeepCopyIn(
                        rhs: rhs.LoadScreens,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LoadScreens));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LeveledSpells) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LeveledSpells);
                try
                {
                    item.LeveledSpells.DeepCopyIn(
                        rhs: rhs.LeveledSpells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LeveledSpells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AnimatedObjects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AnimatedObjects);
                try
                {
                    item.AnimatedObjects.DeepCopyIn(
                        rhs: rhs.AnimatedObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AnimatedObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Waters) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Waters);
                try
                {
                    item.Waters.DeepCopyIn(
                        rhs: rhs.Waters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Waters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.EffectShaders) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.EffectShaders);
                try
                {
                    item.EffectShaders.DeepCopyIn(
                        rhs: rhs.EffectShaders,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.EffectShaders));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Explosions) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Explosions);
                try
                {
                    item.Explosions.DeepCopyIn(
                        rhs: rhs.Explosions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Explosions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Debris) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Debris);
                try
                {
                    item.Debris.DeepCopyIn(
                        rhs: rhs.Debris,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Debris));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ImageSpaces) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ImageSpaces);
                try
                {
                    item.ImageSpaces.DeepCopyIn(
                        rhs: rhs.ImageSpaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ImageSpaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ImageSpaceAdapters) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ImageSpaceAdapters);
                try
                {
                    item.ImageSpaceAdapters.DeepCopyIn(
                        rhs: rhs.ImageSpaceAdapters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ImageSpaceAdapters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.FormLists) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.FormLists);
                try
                {
                    item.FormLists.DeepCopyIn(
                        rhs: rhs.FormLists,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.FormLists));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Perks) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Perks);
                try
                {
                    item.Perks.DeepCopyIn(
                        rhs: rhs.Perks,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Perks));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.BodyParts) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.BodyParts);
                try
                {
                    item.BodyParts.DeepCopyIn(
                        rhs: rhs.BodyParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.BodyParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AddonNodes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AddonNodes);
                try
                {
                    item.AddonNodes.DeepCopyIn(
                        rhs: rhs.AddonNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AddonNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ActorValueInformation) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ActorValueInformation);
                try
                {
                    item.ActorValueInformation.DeepCopyIn(
                        rhs: rhs.ActorValueInformation,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ActorValueInformation));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CameraShots) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.CameraShots);
                try
                {
                    item.CameraShots.DeepCopyIn(
                        rhs: rhs.CameraShots,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.CameraShots));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CameraPaths) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.CameraPaths);
                try
                {
                    item.CameraPaths.DeepCopyIn(
                        rhs: rhs.CameraPaths,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.CameraPaths));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.VoiceTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.VoiceTypes);
                try
                {
                    item.VoiceTypes.DeepCopyIn(
                        rhs: rhs.VoiceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.VoiceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MaterialTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MaterialTypes);
                try
                {
                    item.MaterialTypes.DeepCopyIn(
                        rhs: rhs.MaterialTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MaterialTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Impacts) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Impacts);
                try
                {
                    item.Impacts.DeepCopyIn(
                        rhs: rhs.Impacts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Impacts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ImpactDataSets) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ImpactDataSets);
                try
                {
                    item.ImpactDataSets.DeepCopyIn(
                        rhs: rhs.ImpactDataSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ImpactDataSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ArmorAddons) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ArmorAddons);
                try
                {
                    item.ArmorAddons.DeepCopyIn(
                        rhs: rhs.ArmorAddons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ArmorAddons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.EncounterZones) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.EncounterZones);
                try
                {
                    item.EncounterZones.DeepCopyIn(
                        rhs: rhs.EncounterZones,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.EncounterZones));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Locations) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Locations);
                try
                {
                    item.Locations.DeepCopyIn(
                        rhs: rhs.Locations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Locations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Messages) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Messages);
                try
                {
                    item.Messages.DeepCopyIn(
                        rhs: rhs.Messages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Messages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DefaultObjectManagers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.DefaultObjectManagers);
                try
                {
                    item.DefaultObjectManagers.DeepCopyIn(
                        rhs: rhs.DefaultObjectManagers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.DefaultObjectManagers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LightingTemplates) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LightingTemplates);
                try
                {
                    item.LightingTemplates.DeepCopyIn(
                        rhs: rhs.LightingTemplates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LightingTemplates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MusicTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MusicTypes);
                try
                {
                    item.MusicTypes.DeepCopyIn(
                        rhs: rhs.MusicTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MusicTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Footsteps) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Footsteps);
                try
                {
                    item.Footsteps.DeepCopyIn(
                        rhs: rhs.Footsteps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Footsteps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.FootstepSets) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.FootstepSets);
                try
                {
                    item.FootstepSets.DeepCopyIn(
                        rhs: rhs.FootstepSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.FootstepSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.StoryManagerBranchNodes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.StoryManagerBranchNodes);
                try
                {
                    item.StoryManagerBranchNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerBranchNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.StoryManagerBranchNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.StoryManagerQuestNodes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.StoryManagerQuestNodes);
                try
                {
                    item.StoryManagerQuestNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerQuestNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.StoryManagerQuestNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.StoryManagerEventNodes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.StoryManagerEventNodes);
                try
                {
                    item.StoryManagerEventNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerEventNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.StoryManagerEventNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DialogBranches) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.DialogBranches);
                try
                {
                    item.DialogBranches.DeepCopyIn(
                        rhs: rhs.DialogBranches,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.DialogBranches));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MusicTracks) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MusicTracks);
                try
                {
                    item.MusicTracks.DeepCopyIn(
                        rhs: rhs.MusicTracks,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MusicTracks));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DialogViews) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.DialogViews);
                try
                {
                    item.DialogViews.DeepCopyIn(
                        rhs: rhs.DialogViews,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.DialogViews));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.WordsOfPower) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.WordsOfPower);
                try
                {
                    item.WordsOfPower.DeepCopyIn(
                        rhs: rhs.WordsOfPower,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.WordsOfPower));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Shouts) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Shouts);
                try
                {
                    item.Shouts.DeepCopyIn(
                        rhs: rhs.Shouts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Shouts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.EquipTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.EquipTypes);
                try
                {
                    item.EquipTypes.DeepCopyIn(
                        rhs: rhs.EquipTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.EquipTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Relationships) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Relationships);
                try
                {
                    item.Relationships.DeepCopyIn(
                        rhs: rhs.Relationships,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Relationships));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Scenes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Scenes);
                try
                {
                    item.Scenes.DeepCopyIn(
                        rhs: rhs.Scenes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Scenes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AssociationTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AssociationTypes);
                try
                {
                    item.AssociationTypes.DeepCopyIn(
                        rhs: rhs.AssociationTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AssociationTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Outfits) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Outfits);
                try
                {
                    item.Outfits.DeepCopyIn(
                        rhs: rhs.Outfits,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Outfits));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ArtObjects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ArtObjects);
                try
                {
                    item.ArtObjects.DeepCopyIn(
                        rhs: rhs.ArtObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ArtObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MaterialObjects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MaterialObjects);
                try
                {
                    item.MaterialObjects.DeepCopyIn(
                        rhs: rhs.MaterialObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MaterialObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MovementTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MovementTypes);
                try
                {
                    item.MovementTypes.DeepCopyIn(
                        rhs: rhs.MovementTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MovementTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundDescriptors) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.SoundDescriptors);
                try
                {
                    item.SoundDescriptors.DeepCopyIn(
                        rhs: rhs.SoundDescriptors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.SoundDescriptors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DualCastData) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.DualCastData);
                try
                {
                    item.DualCastData.DeepCopyIn(
                        rhs: rhs.DualCastData,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.DualCastData));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundCategories) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.SoundCategories);
                try
                {
                    item.SoundCategories.DeepCopyIn(
                        rhs: rhs.SoundCategories,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.SoundCategories));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundOutputModels) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.SoundOutputModels);
                try
                {
                    item.SoundOutputModels.DeepCopyIn(
                        rhs: rhs.SoundOutputModels,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.SoundOutputModels));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CollisionLayers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.CollisionLayers);
                try
                {
                    item.CollisionLayers.DeepCopyIn(
                        rhs: rhs.CollisionLayers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.CollisionLayers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Colors) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Colors);
                try
                {
                    item.Colors.DeepCopyIn(
                        rhs: rhs.Colors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Colors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ReverbParameters) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ReverbParameters);
                try
                {
                    item.ReverbParameters.DeepCopyIn(
                        rhs: rhs.ReverbParameters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ReverbParameters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.VolumetricLightings) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.VolumetricLightings);
                try
                {
                    item.VolumetricLightings.DeepCopyIn(
                        rhs: rhs.VolumetricLightings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.VolumetricLightings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Fallout4Mod DeepCopy(
            IFallout4ModGetter item,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            Fallout4Mod ret = (Fallout4Mod)((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).GetNew();
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Fallout4Mod DeepCopy(
            IFallout4ModGetter item,
            out Fallout4Mod.ErrorMask errorMask,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Fallout4Mod ret = (Fallout4Mod)((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).GetNew();
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Fallout4Mod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Fallout4Mod DeepCopy(
            IFallout4ModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Fallout4Mod ret = (Fallout4Mod)((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).GetNew();
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Fallout4Mod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Fallout4Mod_Registration.Instance;
        public static Fallout4Mod_Registration Registration => Fallout4Mod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => Fallout4ModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return Fallout4ModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => Fallout4ModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFallout4ModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFallout4ModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFallout4ModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Mutagen
namespace Mutagen.Bethesda.Fallout4
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Keywords;
        public bool LocationReferenceTypes;
        public bool Actions;
        public bool TextureSets;
        public bool Globals;
        public bool Classes;
        public bool Factions;
        public bool HeadParts;
        public bool Hairs;
        public bool Eyes;
        public bool Races;
        public bool SoundMarkers;
        public bool AcousticSpaces;
        public bool MagicEffects;
        public bool LandscapeTextures;
        public bool ObjectEffects;
        public bool Spells;
        public bool Scrolls;
        public bool Activators;
        public bool TalkingActivators;
        public bool Armors;
        public bool Books;
        public bool Containers;
        public bool Doors;
        public bool Ingredients;
        public bool Lights;
        public bool MiscItems;
        public bool AlchemicalApparatuses;
        public bool Statics;
        public bool MoveableStatics;
        public bool Grasses;
        public bool Trees;
        public bool Florae;
        public bool Furniture;
        public bool Weapons;
        public bool Ammunitions;
        public bool Npcs;
        public bool LeveledNpcs;
        public bool Keys;
        public bool Ingestibles;
        public bool IdleMarkers;
        public bool ConstructibleObjects;
        public bool Projectiles;
        public bool Hazards;
        public bool SoulGems;
        public bool LeveledItems;
        public bool Weathers;
        public bool Climates;
        public bool ShaderParticleGeometries;
        public bool VisualEffects;
        public bool Regions;
        public bool NavigationMeshInfoMaps;
        public bool Cells;
        public bool Worldspaces;
        public bool DialogTopics;
        public bool Quests;
        public bool IdleAnimations;
        public bool Packages;
        public bool CombatStyles;
        public bool LoadScreens;
        public bool LeveledSpells;
        public bool AnimatedObjects;
        public bool Waters;
        public bool EffectShaders;
        public bool Explosions;
        public bool Debris;
        public bool ImageSpaces;
        public bool ImageSpaceAdapters;
        public bool FormLists;
        public bool Perks;
        public bool BodyParts;
        public bool AddonNodes;
        public bool ActorValueInformation;
        public bool CameraShots;
        public bool CameraPaths;
        public bool VoiceTypes;
        public bool MaterialTypes;
        public bool Impacts;
        public bool ImpactDataSets;
        public bool ArmorAddons;
        public bool EncounterZones;
        public bool Locations;
        public bool Messages;
        public bool DefaultObjectManagers;
        public bool LightingTemplates;
        public bool MusicTypes;
        public bool Footsteps;
        public bool FootstepSets;
        public bool StoryManagerBranchNodes;
        public bool StoryManagerQuestNodes;
        public bool StoryManagerEventNodes;
        public bool DialogBranches;
        public bool MusicTracks;
        public bool DialogViews;
        public bool WordsOfPower;
        public bool Shouts;
        public bool EquipTypes;
        public bool Relationships;
        public bool Scenes;
        public bool AssociationTypes;
        public bool Outfits;
        public bool ArtObjects;
        public bool MaterialObjects;
        public bool MovementTypes;
        public bool SoundDescriptors;
        public bool DualCastData;
        public bool SoundCategories;
        public bool SoundOutputModels;
        public bool CollisionLayers;
        public bool Colors;
        public bool ReverbParameters;
        public bool VolumetricLightings;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Keywords = defaultValue;
            LocationReferenceTypes = defaultValue;
            Actions = defaultValue;
            TextureSets = defaultValue;
            Globals = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
            HeadParts = defaultValue;
            Hairs = defaultValue;
            Eyes = defaultValue;
            Races = defaultValue;
            SoundMarkers = defaultValue;
            AcousticSpaces = defaultValue;
            MagicEffects = defaultValue;
            LandscapeTextures = defaultValue;
            ObjectEffects = defaultValue;
            Spells = defaultValue;
            Scrolls = defaultValue;
            Activators = defaultValue;
            TalkingActivators = defaultValue;
            Armors = defaultValue;
            Books = defaultValue;
            Containers = defaultValue;
            Doors = defaultValue;
            Ingredients = defaultValue;
            Lights = defaultValue;
            MiscItems = defaultValue;
            AlchemicalApparatuses = defaultValue;
            Statics = defaultValue;
            MoveableStatics = defaultValue;
            Grasses = defaultValue;
            Trees = defaultValue;
            Florae = defaultValue;
            Furniture = defaultValue;
            Weapons = defaultValue;
            Ammunitions = defaultValue;
            Npcs = defaultValue;
            LeveledNpcs = defaultValue;
            Keys = defaultValue;
            Ingestibles = defaultValue;
            IdleMarkers = defaultValue;
            ConstructibleObjects = defaultValue;
            Projectiles = defaultValue;
            Hazards = defaultValue;
            SoulGems = defaultValue;
            LeveledItems = defaultValue;
            Weathers = defaultValue;
            Climates = defaultValue;
            ShaderParticleGeometries = defaultValue;
            VisualEffects = defaultValue;
            Regions = defaultValue;
            NavigationMeshInfoMaps = defaultValue;
            Cells = defaultValue;
            Worldspaces = defaultValue;
            DialogTopics = defaultValue;
            Quests = defaultValue;
            IdleAnimations = defaultValue;
            Packages = defaultValue;
            CombatStyles = defaultValue;
            LoadScreens = defaultValue;
            LeveledSpells = defaultValue;
            AnimatedObjects = defaultValue;
            Waters = defaultValue;
            EffectShaders = defaultValue;
            Explosions = defaultValue;
            Debris = defaultValue;
            ImageSpaces = defaultValue;
            ImageSpaceAdapters = defaultValue;
            FormLists = defaultValue;
            Perks = defaultValue;
            BodyParts = defaultValue;
            AddonNodes = defaultValue;
            ActorValueInformation = defaultValue;
            CameraShots = defaultValue;
            CameraPaths = defaultValue;
            VoiceTypes = defaultValue;
            MaterialTypes = defaultValue;
            Impacts = defaultValue;
            ImpactDataSets = defaultValue;
            ArmorAddons = defaultValue;
            EncounterZones = defaultValue;
            Locations = defaultValue;
            Messages = defaultValue;
            DefaultObjectManagers = defaultValue;
            LightingTemplates = defaultValue;
            MusicTypes = defaultValue;
            Footsteps = defaultValue;
            FootstepSets = defaultValue;
            StoryManagerBranchNodes = defaultValue;
            StoryManagerQuestNodes = defaultValue;
            StoryManagerEventNodes = defaultValue;
            DialogBranches = defaultValue;
            MusicTracks = defaultValue;
            DialogViews = defaultValue;
            WordsOfPower = defaultValue;
            Shouts = defaultValue;
            EquipTypes = defaultValue;
            Relationships = defaultValue;
            Scenes = defaultValue;
            AssociationTypes = defaultValue;
            Outfits = defaultValue;
            ArtObjects = defaultValue;
            MaterialObjects = defaultValue;
            MovementTypes = defaultValue;
            SoundDescriptors = defaultValue;
            DualCastData = defaultValue;
            SoundCategories = defaultValue;
            SoundOutputModels = defaultValue;
            CollisionLayers = defaultValue;
            Colors = defaultValue;
            ReverbParameters = defaultValue;
            VolumetricLightings = defaultValue;
        }
    }

    public interface IFallout4ModDisposableGetter : IFallout4ModGetter, IModDisposeGetter
    {
    }

    /// <summary>
    /// Different game release versions a Fallout4 mod can have
    /// </summary>
    public enum Fallout4Release
    {
        Fallout4 = 1
        //Fallout4LE = 1,
        //Fallout4SE = 2,
        //Fallout4VR = 3
    }

    public static class Fallout4ReleaseExt
    {
        public static GameRelease ToGameRelease(this Fallout4Release release)
        {
            return release switch
            {
                Fallout4Release.Fallout4 => GameRelease.Fallout4,
                //Fallout4Release.Fallout4LE => GameRelease.Fallout4,
                //Fallout4Release.Fallout4SE => GameRelease.Fallout4,
                //Fallout4Release.Fallout4VR => GameRelease.Fallout4,
                _ => throw new ArgumentException()
            };
        }

        public static Fallout4Release ToFallout4Release(this GameRelease release)
        {
            return release switch
            {
                GameRelease.Fallout4 => Fallout4Release.Fallout4,
                //GameRelease.Fallout4LE => Fallout4Release.Fallout4LE,
                //GameRelease.Fallout4SE => Fallout4Release.Fallout4SE,
                //GameRelease.Fallout4VR => Fallout4Release.Fallout4VR,
                _ => throw new ArgumentException()
            };
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class Fallout4ModBinaryWriteTranslation
    {
        public readonly static Fallout4ModBinaryWriteTranslation Instance = new Fallout4ModBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IFallout4ModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            RecordTypeConverter? recordTypeConverter = null)
        {
            if (importMask?.GameSettings ?? true)
            {
                var GameSettingsItem = item.GameSettings;
                if (GameSettingsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GameSettingsItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: GameSettingsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Keywords ?? true)
            {
                var KeywordsItem = item.Keywords;
                if (KeywordsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)KeywordsItem).BinaryWriteTranslator).Write<IKeywordGetter>(
                        item: KeywordsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LocationReferenceTypes ?? true)
            {
                var LocationReferenceTypesItem = item.LocationReferenceTypes;
                if (LocationReferenceTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LocationReferenceTypesItem).BinaryWriteTranslator).Write<ILocationReferenceTypeGetter>(
                        item: LocationReferenceTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Actions ?? true)
            {
                var ActionsItem = item.Actions;
                if (ActionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ActionsItem).BinaryWriteTranslator).Write<IActionRecordGetter>(
                        item: ActionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.TextureSets ?? true)
            {
                var TextureSetsItem = item.TextureSets;
                if (TextureSetsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)TextureSetsItem).BinaryWriteTranslator).Write<ITextureSetGetter>(
                        item: TextureSetsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Globals ?? true)
            {
                var GlobalsItem = item.Globals;
                if (GlobalsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GlobalsItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: GlobalsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Classes ?? true)
            {
                var ClassesItem = item.Classes;
                if (ClassesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ClassesItem).BinaryWriteTranslator).Write<IClassGetter>(
                        item: ClassesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Factions ?? true)
            {
                var FactionsItem = item.Factions;
                if (FactionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FactionsItem).BinaryWriteTranslator).Write<IFactionGetter>(
                        item: FactionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.HeadParts ?? true)
            {
                var HeadPartsItem = item.HeadParts;
                if (HeadPartsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)HeadPartsItem).BinaryWriteTranslator).Write<IHeadPartGetter>(
                        item: HeadPartsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Hairs ?? true)
            {
                var HairsItem = item.Hairs;
                if (HairsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)HairsItem).BinaryWriteTranslator).Write<IHairGetter>(
                        item: HairsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Eyes ?? true)
            {
                var EyesItem = item.Eyes;
                if (EyesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EyesItem).BinaryWriteTranslator).Write<IEyesGetter>(
                        item: EyesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Races ?? true)
            {
                var RacesItem = item.Races;
                if (RacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)RacesItem).BinaryWriteTranslator).Write<IRaceGetter>(
                        item: RacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoundMarkers ?? true)
            {
                var SoundMarkersItem = item.SoundMarkers;
                if (SoundMarkersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoundMarkersItem).BinaryWriteTranslator).Write<ISoundMarkerGetter>(
                        item: SoundMarkersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AcousticSpaces ?? true)
            {
                var AcousticSpacesItem = item.AcousticSpaces;
                if (AcousticSpacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AcousticSpacesItem).BinaryWriteTranslator).Write<IAcousticSpaceGetter>(
                        item: AcousticSpacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MagicEffects ?? true)
            {
                var MagicEffectsItem = item.MagicEffects;
                if (MagicEffectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MagicEffectsItem).BinaryWriteTranslator).Write<IMagicEffectGetter>(
                        item: MagicEffectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LandscapeTextures ?? true)
            {
                var LandscapeTexturesItem = item.LandscapeTextures;
                if (LandscapeTexturesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LandscapeTexturesItem).BinaryWriteTranslator).Write<ILandscapeTextureGetter>(
                        item: LandscapeTexturesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ObjectEffects ?? true)
            {
                var ObjectEffectsItem = item.ObjectEffects;
                if (ObjectEffectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ObjectEffectsItem).BinaryWriteTranslator).Write<IObjectEffectGetter>(
                        item: ObjectEffectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Spells ?? true)
            {
                var SpellsItem = item.Spells;
                if (SpellsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SpellsItem).BinaryWriteTranslator).Write<ISpellGetter>(
                        item: SpellsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Scrolls ?? true)
            {
                var ScrollsItem = item.Scrolls;
                if (ScrollsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ScrollsItem).BinaryWriteTranslator).Write<IScrollGetter>(
                        item: ScrollsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Activators ?? true)
            {
                var ActivatorsItem = item.Activators;
                if (ActivatorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ActivatorsItem).BinaryWriteTranslator).Write<IActivatorGetter>(
                        item: ActivatorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.TalkingActivators ?? true)
            {
                var TalkingActivatorsItem = item.TalkingActivators;
                if (TalkingActivatorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)TalkingActivatorsItem).BinaryWriteTranslator).Write<ITalkingActivatorGetter>(
                        item: TalkingActivatorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Armors ?? true)
            {
                var ArmorsItem = item.Armors;
                if (ArmorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ArmorsItem).BinaryWriteTranslator).Write<IArmorGetter>(
                        item: ArmorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Books ?? true)
            {
                var BooksItem = item.Books;
                if (BooksItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)BooksItem).BinaryWriteTranslator).Write<IBookGetter>(
                        item: BooksItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Containers ?? true)
            {
                var ContainersItem = item.Containers;
                if (ContainersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ContainersItem).BinaryWriteTranslator).Write<IContainerGetter>(
                        item: ContainersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Doors ?? true)
            {
                var DoorsItem = item.Doors;
                if (DoorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DoorsItem).BinaryWriteTranslator).Write<IDoorGetter>(
                        item: DoorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Ingredients ?? true)
            {
                var IngredientsItem = item.Ingredients;
                if (IngredientsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IngredientsItem).BinaryWriteTranslator).Write<IIngredientGetter>(
                        item: IngredientsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Lights ?? true)
            {
                var LightsItem = item.Lights;
                if (LightsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LightsItem).BinaryWriteTranslator).Write<ILightGetter>(
                        item: LightsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MiscItems ?? true)
            {
                var MiscItemsItem = item.MiscItems;
                if (MiscItemsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MiscItemsItem).BinaryWriteTranslator).Write<IMiscItemGetter>(
                        item: MiscItemsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AlchemicalApparatuses ?? true)
            {
                var AlchemicalApparatusesItem = item.AlchemicalApparatuses;
                if (AlchemicalApparatusesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AlchemicalApparatusesItem).BinaryWriteTranslator).Write<IAlchemicalApparatusGetter>(
                        item: AlchemicalApparatusesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Statics ?? true)
            {
                var StaticsItem = item.Statics;
                if (StaticsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)StaticsItem).BinaryWriteTranslator).Write<IStaticGetter>(
                        item: StaticsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MoveableStatics ?? true)
            {
                var MoveableStaticsItem = item.MoveableStatics;
                if (MoveableStaticsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MoveableStaticsItem).BinaryWriteTranslator).Write<IMoveableStaticGetter>(
                        item: MoveableStaticsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Grasses ?? true)
            {
                var GrassesItem = item.Grasses;
                if (GrassesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GrassesItem).BinaryWriteTranslator).Write<IGrassGetter>(
                        item: GrassesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Trees ?? true)
            {
                var TreesItem = item.Trees;
                if (TreesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)TreesItem).BinaryWriteTranslator).Write<ITreeGetter>(
                        item: TreesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Florae ?? true)
            {
                var FloraeItem = item.Florae;
                if (FloraeItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FloraeItem).BinaryWriteTranslator).Write<IFloraGetter>(
                        item: FloraeItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Furniture ?? true)
            {
                var FurnitureItem = item.Furniture;
                if (FurnitureItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FurnitureItem).BinaryWriteTranslator).Write<IFurnitureGetter>(
                        item: FurnitureItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Weapons ?? true)
            {
                var WeaponsItem = item.Weapons;
                if (WeaponsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WeaponsItem).BinaryWriteTranslator).Write<IWeaponGetter>(
                        item: WeaponsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Ammunitions ?? true)
            {
                var AmmunitionsItem = item.Ammunitions;
                if (AmmunitionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AmmunitionsItem).BinaryWriteTranslator).Write<IAmmunitionGetter>(
                        item: AmmunitionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Npcs ?? true)
            {
                var NpcsItem = item.Npcs;
                if (NpcsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)NpcsItem).BinaryWriteTranslator).Write<INpcGetter>(
                        item: NpcsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LeveledNpcs ?? true)
            {
                var LeveledNpcsItem = item.LeveledNpcs;
                if (LeveledNpcsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LeveledNpcsItem).BinaryWriteTranslator).Write<ILeveledNpcGetter>(
                        item: LeveledNpcsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Keys ?? true)
            {
                var KeysItem = item.Keys;
                if (KeysItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)KeysItem).BinaryWriteTranslator).Write<IKeyGetter>(
                        item: KeysItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Ingestibles ?? true)
            {
                var IngestiblesItem = item.Ingestibles;
                if (IngestiblesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IngestiblesItem).BinaryWriteTranslator).Write<IIngestibleGetter>(
                        item: IngestiblesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.IdleMarkers ?? true)
            {
                var IdleMarkersItem = item.IdleMarkers;
                if (IdleMarkersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IdleMarkersItem).BinaryWriteTranslator).Write<IIdleMarkerGetter>(
                        item: IdleMarkersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ConstructibleObjects ?? true)
            {
                var ConstructibleObjectsItem = item.ConstructibleObjects;
                if (ConstructibleObjectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ConstructibleObjectsItem).BinaryWriteTranslator).Write<IConstructibleObjectGetter>(
                        item: ConstructibleObjectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Projectiles ?? true)
            {
                var ProjectilesItem = item.Projectiles;
                if (ProjectilesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ProjectilesItem).BinaryWriteTranslator).Write<IProjectileGetter>(
                        item: ProjectilesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Hazards ?? true)
            {
                var HazardsItem = item.Hazards;
                if (HazardsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)HazardsItem).BinaryWriteTranslator).Write<IHazardGetter>(
                        item: HazardsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoulGems ?? true)
            {
                var SoulGemsItem = item.SoulGems;
                if (SoulGemsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoulGemsItem).BinaryWriteTranslator).Write<ISoulGemGetter>(
                        item: SoulGemsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LeveledItems ?? true)
            {
                var LeveledItemsItem = item.LeveledItems;
                if (LeveledItemsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LeveledItemsItem).BinaryWriteTranslator).Write<ILeveledItemGetter>(
                        item: LeveledItemsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Weathers ?? true)
            {
                var WeathersItem = item.Weathers;
                if (WeathersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WeathersItem).BinaryWriteTranslator).Write<IWeatherGetter>(
                        item: WeathersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Climates ?? true)
            {
                var ClimatesItem = item.Climates;
                if (ClimatesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ClimatesItem).BinaryWriteTranslator).Write<IClimateGetter>(
                        item: ClimatesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ShaderParticleGeometries ?? true)
            {
                var ShaderParticleGeometriesItem = item.ShaderParticleGeometries;
                if (ShaderParticleGeometriesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ShaderParticleGeometriesItem).BinaryWriteTranslator).Write<IShaderParticleGeometryGetter>(
                        item: ShaderParticleGeometriesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.VisualEffects ?? true)
            {
                var VisualEffectsItem = item.VisualEffects;
                if (VisualEffectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)VisualEffectsItem).BinaryWriteTranslator).Write<IVisualEffectGetter>(
                        item: VisualEffectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Regions ?? true)
            {
                var RegionsItem = item.Regions;
                if (RegionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)RegionsItem).BinaryWriteTranslator).Write<IRegionGetter>(
                        item: RegionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.NavigationMeshInfoMaps ?? true)
            {
                var NavigationMeshInfoMapsItem = item.NavigationMeshInfoMaps;
                if (NavigationMeshInfoMapsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)NavigationMeshInfoMapsItem).BinaryWriteTranslator).Write<INavigationMeshInfoMapGetter>(
                        item: NavigationMeshInfoMapsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Cells ?? true)
            {
                var CellsItem = item.Cells;
                if (CellsItem.Records.Count > 0)
                {
                    ((ListGroupBinaryWriteTranslation)((IBinaryItem)CellsItem).BinaryWriteTranslator).Write<ICellBlockGetter>(
                        item: CellsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Worldspaces ?? true)
            {
                var WorldspacesItem = item.Worldspaces;
                if (WorldspacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WorldspacesItem).BinaryWriteTranslator).Write<IWorldspaceGetter>(
                        item: WorldspacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.DialogTopics ?? true)
            {
                var DialogTopicsItem = item.DialogTopics;
                if (DialogTopicsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DialogTopicsItem).BinaryWriteTranslator).Write<IDialogTopicGetter>(
                        item: DialogTopicsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Quests ?? true)
            {
                var QuestsItem = item.Quests;
                if (QuestsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)QuestsItem).BinaryWriteTranslator).Write<IQuestGetter>(
                        item: QuestsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.IdleAnimations ?? true)
            {
                var IdleAnimationsItem = item.IdleAnimations;
                if (IdleAnimationsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IdleAnimationsItem).BinaryWriteTranslator).Write<IIdleAnimationGetter>(
                        item: IdleAnimationsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Packages ?? true)
            {
                var PackagesItem = item.Packages;
                if (PackagesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)PackagesItem).BinaryWriteTranslator).Write<IPackageGetter>(
                        item: PackagesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.CombatStyles ?? true)
            {
                var CombatStylesItem = item.CombatStyles;
                if (CombatStylesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)CombatStylesItem).BinaryWriteTranslator).Write<ICombatStyleGetter>(
                        item: CombatStylesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LoadScreens ?? true)
            {
                var LoadScreensItem = item.LoadScreens;
                if (LoadScreensItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LoadScreensItem).BinaryWriteTranslator).Write<ILoadScreenGetter>(
                        item: LoadScreensItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LeveledSpells ?? true)
            {
                var LeveledSpellsItem = item.LeveledSpells;
                if (LeveledSpellsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LeveledSpellsItem).BinaryWriteTranslator).Write<ILeveledSpellGetter>(
                        item: LeveledSpellsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AnimatedObjects ?? true)
            {
                var AnimatedObjectsItem = item.AnimatedObjects;
                if (AnimatedObjectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AnimatedObjectsItem).BinaryWriteTranslator).Write<IAnimatedObjectGetter>(
                        item: AnimatedObjectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Waters ?? true)
            {
                var WatersItem = item.Waters;
                if (WatersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WatersItem).BinaryWriteTranslator).Write<IWaterGetter>(
                        item: WatersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.EffectShaders ?? true)
            {
                var EffectShadersItem = item.EffectShaders;
                if (EffectShadersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EffectShadersItem).BinaryWriteTranslator).Write<IEffectShaderGetter>(
                        item: EffectShadersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Explosions ?? true)
            {
                var ExplosionsItem = item.Explosions;
                if (ExplosionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ExplosionsItem).BinaryWriteTranslator).Write<IExplosionGetter>(
                        item: ExplosionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Debris ?? true)
            {
                var DebrisItem = item.Debris;
                if (DebrisItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DebrisItem).BinaryWriteTranslator).Write<IDebrisGetter>(
                        item: DebrisItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ImageSpaces ?? true)
            {
                var ImageSpacesItem = item.ImageSpaces;
                if (ImageSpacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ImageSpacesItem).BinaryWriteTranslator).Write<IImageSpaceGetter>(
                        item: ImageSpacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ImageSpaceAdapters ?? true)
            {
                var ImageSpaceAdaptersItem = item.ImageSpaceAdapters;
                if (ImageSpaceAdaptersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ImageSpaceAdaptersItem).BinaryWriteTranslator).Write<IImageSpaceAdapterGetter>(
                        item: ImageSpaceAdaptersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.FormLists ?? true)
            {
                var FormListsItem = item.FormLists;
                if (FormListsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FormListsItem).BinaryWriteTranslator).Write<IFormListGetter>(
                        item: FormListsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Perks ?? true)
            {
                var PerksItem = item.Perks;
                if (PerksItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)PerksItem).BinaryWriteTranslator).Write<IPerkGetter>(
                        item: PerksItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.BodyParts ?? true)
            {
                var BodyPartsItem = item.BodyParts;
                if (BodyPartsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)BodyPartsItem).BinaryWriteTranslator).Write<IBodyPartDataGetter>(
                        item: BodyPartsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AddonNodes ?? true)
            {
                var AddonNodesItem = item.AddonNodes;
                if (AddonNodesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AddonNodesItem).BinaryWriteTranslator).Write<IAddonNodeGetter>(
                        item: AddonNodesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ActorValueInformation ?? true)
            {
                var ActorValueInformationItem = item.ActorValueInformation;
                if (ActorValueInformationItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ActorValueInformationItem).BinaryWriteTranslator).Write<IActorValueInformationGetter>(
                        item: ActorValueInformationItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.CameraShots ?? true)
            {
                var CameraShotsItem = item.CameraShots;
                if (CameraShotsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)CameraShotsItem).BinaryWriteTranslator).Write<ICameraShotGetter>(
                        item: CameraShotsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.CameraPaths ?? true)
            {
                var CameraPathsItem = item.CameraPaths;
                if (CameraPathsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)CameraPathsItem).BinaryWriteTranslator).Write<ICameraPathGetter>(
                        item: CameraPathsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.VoiceTypes ?? true)
            {
                var VoiceTypesItem = item.VoiceTypes;
                if (VoiceTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)VoiceTypesItem).BinaryWriteTranslator).Write<IVoiceTypeGetter>(
                        item: VoiceTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MaterialTypes ?? true)
            {
                var MaterialTypesItem = item.MaterialTypes;
                if (MaterialTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MaterialTypesItem).BinaryWriteTranslator).Write<IMaterialTypeGetter>(
                        item: MaterialTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Impacts ?? true)
            {
                var ImpactsItem = item.Impacts;
                if (ImpactsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ImpactsItem).BinaryWriteTranslator).Write<IImpactGetter>(
                        item: ImpactsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ImpactDataSets ?? true)
            {
                var ImpactDataSetsItem = item.ImpactDataSets;
                if (ImpactDataSetsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ImpactDataSetsItem).BinaryWriteTranslator).Write<IImpactDataSetGetter>(
                        item: ImpactDataSetsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ArmorAddons ?? true)
            {
                var ArmorAddonsItem = item.ArmorAddons;
                if (ArmorAddonsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ArmorAddonsItem).BinaryWriteTranslator).Write<IArmorAddonGetter>(
                        item: ArmorAddonsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.EncounterZones ?? true)
            {
                var EncounterZonesItem = item.EncounterZones;
                if (EncounterZonesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EncounterZonesItem).BinaryWriteTranslator).Write<IEncounterZoneGetter>(
                        item: EncounterZonesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Locations ?? true)
            {
                var LocationsItem = item.Locations;
                if (LocationsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LocationsItem).BinaryWriteTranslator).Write<ILocationGetter>(
                        item: LocationsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Messages ?? true)
            {
                var MessagesItem = item.Messages;
                if (MessagesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MessagesItem).BinaryWriteTranslator).Write<IMessageGetter>(
                        item: MessagesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.DefaultObjectManagers ?? true)
            {
                var DefaultObjectManagersItem = item.DefaultObjectManagers;
                if (DefaultObjectManagersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DefaultObjectManagersItem).BinaryWriteTranslator).Write<IDefaultObjectManagerGetter>(
                        item: DefaultObjectManagersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LightingTemplates ?? true)
            {
                var LightingTemplatesItem = item.LightingTemplates;
                if (LightingTemplatesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LightingTemplatesItem).BinaryWriteTranslator).Write<ILightingTemplateGetter>(
                        item: LightingTemplatesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MusicTypes ?? true)
            {
                var MusicTypesItem = item.MusicTypes;
                if (MusicTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MusicTypesItem).BinaryWriteTranslator).Write<IMusicTypeGetter>(
                        item: MusicTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Footsteps ?? true)
            {
                var FootstepsItem = item.Footsteps;
                if (FootstepsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FootstepsItem).BinaryWriteTranslator).Write<IFootstepGetter>(
                        item: FootstepsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.FootstepSets ?? true)
            {
                var FootstepSetsItem = item.FootstepSets;
                if (FootstepSetsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FootstepSetsItem).BinaryWriteTranslator).Write<IFootstepSetGetter>(
                        item: FootstepSetsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.StoryManagerBranchNodes ?? true)
            {
                var StoryManagerBranchNodesItem = item.StoryManagerBranchNodes;
                if (StoryManagerBranchNodesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)StoryManagerBranchNodesItem).BinaryWriteTranslator).Write<IStoryManagerBranchNodeGetter>(
                        item: StoryManagerBranchNodesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.StoryManagerQuestNodes ?? true)
            {
                var StoryManagerQuestNodesItem = item.StoryManagerQuestNodes;
                if (StoryManagerQuestNodesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)StoryManagerQuestNodesItem).BinaryWriteTranslator).Write<IStoryManagerQuestNodeGetter>(
                        item: StoryManagerQuestNodesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.StoryManagerEventNodes ?? true)
            {
                var StoryManagerEventNodesItem = item.StoryManagerEventNodes;
                if (StoryManagerEventNodesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)StoryManagerEventNodesItem).BinaryWriteTranslator).Write<IStoryManagerEventNodeGetter>(
                        item: StoryManagerEventNodesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.DialogBranches ?? true)
            {
                var DialogBranchesItem = item.DialogBranches;
                if (DialogBranchesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DialogBranchesItem).BinaryWriteTranslator).Write<IDialogBranchGetter>(
                        item: DialogBranchesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MusicTracks ?? true)
            {
                var MusicTracksItem = item.MusicTracks;
                if (MusicTracksItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MusicTracksItem).BinaryWriteTranslator).Write<IMusicTrackGetter>(
                        item: MusicTracksItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.DialogViews ?? true)
            {
                var DialogViewsItem = item.DialogViews;
                if (DialogViewsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DialogViewsItem).BinaryWriteTranslator).Write<IDialogViewGetter>(
                        item: DialogViewsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.WordsOfPower ?? true)
            {
                var WordsOfPowerItem = item.WordsOfPower;
                if (WordsOfPowerItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WordsOfPowerItem).BinaryWriteTranslator).Write<IWordOfPowerGetter>(
                        item: WordsOfPowerItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Shouts ?? true)
            {
                var ShoutsItem = item.Shouts;
                if (ShoutsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ShoutsItem).BinaryWriteTranslator).Write<IShoutGetter>(
                        item: ShoutsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.EquipTypes ?? true)
            {
                var EquipTypesItem = item.EquipTypes;
                if (EquipTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EquipTypesItem).BinaryWriteTranslator).Write<IEquipTypeGetter>(
                        item: EquipTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Relationships ?? true)
            {
                var RelationshipsItem = item.Relationships;
                if (RelationshipsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)RelationshipsItem).BinaryWriteTranslator).Write<IRelationshipGetter>(
                        item: RelationshipsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Scenes ?? true)
            {
                var ScenesItem = item.Scenes;
                if (ScenesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ScenesItem).BinaryWriteTranslator).Write<ISceneGetter>(
                        item: ScenesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AssociationTypes ?? true)
            {
                var AssociationTypesItem = item.AssociationTypes;
                if (AssociationTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AssociationTypesItem).BinaryWriteTranslator).Write<IAssociationTypeGetter>(
                        item: AssociationTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Outfits ?? true)
            {
                var OutfitsItem = item.Outfits;
                if (OutfitsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)OutfitsItem).BinaryWriteTranslator).Write<IOutfitGetter>(
                        item: OutfitsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ArtObjects ?? true)
            {
                var ArtObjectsItem = item.ArtObjects;
                if (ArtObjectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ArtObjectsItem).BinaryWriteTranslator).Write<IArtObjectGetter>(
                        item: ArtObjectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MaterialObjects ?? true)
            {
                var MaterialObjectsItem = item.MaterialObjects;
                if (MaterialObjectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MaterialObjectsItem).BinaryWriteTranslator).Write<IMaterialObjectGetter>(
                        item: MaterialObjectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MovementTypes ?? true)
            {
                var MovementTypesItem = item.MovementTypes;
                if (MovementTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MovementTypesItem).BinaryWriteTranslator).Write<IMovementTypeGetter>(
                        item: MovementTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoundDescriptors ?? true)
            {
                var SoundDescriptorsItem = item.SoundDescriptors;
                if (SoundDescriptorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoundDescriptorsItem).BinaryWriteTranslator).Write<ISoundDescriptorGetter>(
                        item: SoundDescriptorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.DualCastData ?? true)
            {
                var DualCastDataItem = item.DualCastData;
                if (DualCastDataItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DualCastDataItem).BinaryWriteTranslator).Write<IDualCastDataGetter>(
                        item: DualCastDataItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoundCategories ?? true)
            {
                var SoundCategoriesItem = item.SoundCategories;
                if (SoundCategoriesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoundCategoriesItem).BinaryWriteTranslator).Write<ISoundCategoryGetter>(
                        item: SoundCategoriesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoundOutputModels ?? true)
            {
                var SoundOutputModelsItem = item.SoundOutputModels;
                if (SoundOutputModelsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoundOutputModelsItem).BinaryWriteTranslator).Write<ISoundOutputModelGetter>(
                        item: SoundOutputModelsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.CollisionLayers ?? true)
            {
                var CollisionLayersItem = item.CollisionLayers;
                if (CollisionLayersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)CollisionLayersItem).BinaryWriteTranslator).Write<ICollisionLayerGetter>(
                        item: CollisionLayersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Colors ?? true)
            {
                var ColorsItem = item.Colors;
                if (ColorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ColorsItem).BinaryWriteTranslator).Write<IColorRecordGetter>(
                        item: ColorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ReverbParameters ?? true)
            {
                var ReverbParametersItem = item.ReverbParameters;
                if (ReverbParametersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ReverbParametersItem).BinaryWriteTranslator).Write<IReverbParametersGetter>(
                        item: ReverbParametersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.VolumetricLightings ?? true)
            {
                var VolumetricLightingsItem = item.VolumetricLightings;
                if (VolumetricLightingsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)VolumetricLightingsItem).BinaryWriteTranslator).Write<IVolumetricLightingGetter>(
                        item: VolumetricLightingsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IFallout4ModGetter item,
            ModKey modKey,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            WriteRecordTypes(
                item: item,
                writer: writer,
                importMask: importMask);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            Write(
                item: (IFallout4ModGetter)item,
                importMask: importMask,
                writer: writer,
                param: param,
                modKey: modKey);
        }

    }

    public partial class Fallout4ModBinaryCreateTranslation
    {
        public readonly static Fallout4ModBinaryCreateTranslation Instance = new Fallout4ModBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IFallout4Mod item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IFallout4Mod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            GroupMask? importMask,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        recordTypeConverter: null);
                    return (int)Fallout4Mod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    if (importMask?.Keywords ?? true)
                    {
                        item.Keywords.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Keywords;
                }
                case RecordTypeInts.LCRT:
                {
                    if (importMask?.LocationReferenceTypes ?? true)
                    {
                        item.LocationReferenceTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    if (importMask?.Actions ?? true)
                    {
                        item.Actions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Actions;
                }
                case RecordTypeInts.TXST:
                {
                    if (importMask?.TextureSets ?? true)
                    {
                        item.TextureSets.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    if (importMask?.Globals ?? true)
                    {
                        item.Globals.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Globals;
                }
                case RecordTypeInts.CLAS:
                {
                    if (importMask?.Classes ?? true)
                    {
                        item.Classes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    if (importMask?.Factions ?? true)
                    {
                        item.Factions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Factions;
                }
                case RecordTypeInts.HDPT:
                {
                    if (importMask?.HeadParts ?? true)
                    {
                        item.HeadParts.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HAIR:
                {
                    if (importMask?.Hairs ?? true)
                    {
                        item.Hairs.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Hairs;
                }
                case RecordTypeInts.EYES:
                {
                    if (importMask?.Eyes ?? true)
                    {
                        item.Eyes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Eyes;
                }
                case RecordTypeInts.RACE:
                {
                    if (importMask?.Races ?? true)
                    {
                        item.Races.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    if (importMask?.SoundMarkers ?? true)
                    {
                        item.SoundMarkers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.SoundMarkers;
                }
                case RecordTypeInts.ASPC:
                {
                    if (importMask?.AcousticSpaces ?? true)
                    {
                        item.AcousticSpaces.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AcousticSpaces;
                }
                case RecordTypeInts.MGEF:
                {
                    if (importMask?.MagicEffects ?? true)
                    {
                        item.MagicEffects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.LTEX:
                {
                    if (importMask?.LandscapeTextures ?? true)
                    {
                        item.LandscapeTextures.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LandscapeTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    if (importMask?.ObjectEffects ?? true)
                    {
                        item.ObjectEffects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ObjectEffects;
                }
                case RecordTypeInts.SPEL:
                {
                    if (importMask?.Spells ?? true)
                    {
                        item.Spells.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Spells;
                }
                case RecordTypeInts.SCRL:
                {
                    if (importMask?.Scrolls ?? true)
                    {
                        item.Scrolls.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Scrolls;
                }
                case RecordTypeInts.ACTI:
                {
                    if (importMask?.Activators ?? true)
                    {
                        item.Activators.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Activators;
                }
                case RecordTypeInts.TACT:
                {
                    if (importMask?.TalkingActivators ?? true)
                    {
                        item.TalkingActivators.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.TalkingActivators;
                }
                case RecordTypeInts.ARMO:
                {
                    if (importMask?.Armors ?? true)
                    {
                        item.Armors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    if (importMask?.Books ?? true)
                    {
                        item.Books.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Books;
                }
                case RecordTypeInts.CONT:
                {
                    if (importMask?.Containers ?? true)
                    {
                        item.Containers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    if (importMask?.Doors ?? true)
                    {
                        item.Doors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    if (importMask?.Ingredients ?? true)
                    {
                        item.Ingredients.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    if (importMask?.Lights ?? true)
                    {
                        item.Lights.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    if (importMask?.MiscItems ?? true)
                    {
                        item.MiscItems.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MiscItems;
                }
                case RecordTypeInts.APPA:
                {
                    if (importMask?.AlchemicalApparatuses ?? true)
                    {
                        item.AlchemicalApparatuses.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AlchemicalApparatuses;
                }
                case RecordTypeInts.STAT:
                {
                    if (importMask?.Statics ?? true)
                    {
                        item.Statics.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Statics;
                }
                case RecordTypeInts.MSTT:
                {
                    if (importMask?.MoveableStatics ?? true)
                    {
                        item.MoveableStatics.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MoveableStatics;
                }
                case RecordTypeInts.GRAS:
                {
                    if (importMask?.Grasses ?? true)
                    {
                        item.Grasses.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    if (importMask?.Trees ?? true)
                    {
                        item.Trees.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    if (importMask?.Florae ?? true)
                    {
                        item.Florae.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Florae;
                }
                case RecordTypeInts.FURN:
                {
                    if (importMask?.Furniture ?? true)
                    {
                        item.Furniture.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    if (importMask?.Weapons ?? true)
                    {
                        item.Weapons.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    if (importMask?.Ammunitions ?? true)
                    {
                        item.Ammunitions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    if (importMask?.Npcs ?? true)
                    {
                        item.Npcs.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Npcs;
                }
                case RecordTypeInts.LVLN:
                {
                    if (importMask?.LeveledNpcs ?? true)
                    {
                        item.LeveledNpcs.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LeveledNpcs;
                }
                case RecordTypeInts.KEYM:
                {
                    if (importMask?.Keys ?? true)
                    {
                        item.Keys.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    if (importMask?.Ingestibles ?? true)
                    {
                        item.Ingestibles.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Ingestibles;
                }
                case RecordTypeInts.IDLM:
                {
                    if (importMask?.IdleMarkers ?? true)
                    {
                        item.IdleMarkers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.IdleMarkers;
                }
                case RecordTypeInts.COBJ:
                {
                    if (importMask?.ConstructibleObjects ?? true)
                    {
                        item.ConstructibleObjects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ConstructibleObjects;
                }
                case RecordTypeInts.PROJ:
                {
                    if (importMask?.Projectiles ?? true)
                    {
                        item.Projectiles.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Projectiles;
                }
                case RecordTypeInts.HAZD:
                {
                    if (importMask?.Hazards ?? true)
                    {
                        item.Hazards.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Hazards;
                }
                case RecordTypeInts.SLGM:
                {
                    if (importMask?.SoulGems ?? true)
                    {
                        item.SoulGems.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.SoulGems;
                }
                case RecordTypeInts.LVLI:
                {
                    if (importMask?.LeveledItems ?? true)
                    {
                        item.LeveledItems.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    if (importMask?.Weathers ?? true)
                    {
                        item.Weathers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Weathers;
                }
                case RecordTypeInts.CLMT:
                {
                    if (importMask?.Climates ?? true)
                    {
                        item.Climates.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Climates;
                }
                case RecordTypeInts.SPGD:
                {
                    if (importMask?.ShaderParticleGeometries ?? true)
                    {
                        item.ShaderParticleGeometries.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ShaderParticleGeometries;
                }
                case RecordTypeInts.RFCT:
                {
                    if (importMask?.VisualEffects ?? true)
                    {
                        item.VisualEffects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.VisualEffects;
                }
                case RecordTypeInts.REGN:
                {
                    if (importMask?.Regions ?? true)
                    {
                        item.Regions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Regions;
                }
                case RecordTypeInts.NAVI:
                {
                    if (importMask?.NavigationMeshInfoMaps ?? true)
                    {
                        item.NavigationMeshInfoMaps.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.NavigationMeshInfoMaps;
                }
                case RecordTypeInts.CELL:
                {
                    if (importMask?.Cells ?? true)
                    {
                        item.Cells.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    if (importMask?.Worldspaces ?? true)
                    {
                        item.Worldspaces.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.DIAL:
                {
                    if (importMask?.DialogTopics ?? true)
                    {
                        item.DialogTopics.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.DialogTopics;
                }
                case RecordTypeInts.QUST:
                {
                    if (importMask?.Quests ?? true)
                    {
                        item.Quests.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    if (importMask?.IdleAnimations ?? true)
                    {
                        item.IdleAnimations.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    if (importMask?.Packages ?? true)
                    {
                        item.Packages.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Packages;
                }
                case RecordTypeInts.CSTY:
                {
                    if (importMask?.CombatStyles ?? true)
                    {
                        item.CombatStyles.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    if (importMask?.LoadScreens ?? true)
                    {
                        item.LoadScreens.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.LVSP:
                {
                    if (importMask?.LeveledSpells ?? true)
                    {
                        item.LeveledSpells.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LeveledSpells;
                }
                case RecordTypeInts.ANIO:
                {
                    if (importMask?.AnimatedObjects ?? true)
                    {
                        item.AnimatedObjects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    if (importMask?.Waters ?? true)
                    {
                        item.Waters.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    if (importMask?.EffectShaders ?? true)
                    {
                        item.EffectShaders.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.EffectShaders;
                }
                case RecordTypeInts.EXPL:
                {
                    if (importMask?.Explosions ?? true)
                    {
                        item.Explosions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Explosions;
                }
                case RecordTypeInts.DEBR:
                {
                    if (importMask?.Debris ?? true)
                    {
                        item.Debris.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Debris;
                }
                case RecordTypeInts.IMGS:
                {
                    if (importMask?.ImageSpaces ?? true)
                    {
                        item.ImageSpaces.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.IMAD:
                {
                    if (importMask?.ImageSpaceAdapters ?? true)
                    {
                        item.ImageSpaceAdapters.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ImageSpaceAdapters;
                }
                case RecordTypeInts.FLST:
                {
                    if (importMask?.FormLists ?? true)
                    {
                        item.FormLists.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.FormLists;
                }
                case RecordTypeInts.PERK:
                {
                    if (importMask?.Perks ?? true)
                    {
                        item.Perks.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Perks;
                }
                case RecordTypeInts.BPTD:
                {
                    if (importMask?.BodyParts ?? true)
                    {
                        item.BodyParts.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.BodyParts;
                }
                case RecordTypeInts.ADDN:
                {
                    if (importMask?.AddonNodes ?? true)
                    {
                        item.AddonNodes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AddonNodes;
                }
                case RecordTypeInts.AVIF:
                {
                    if (importMask?.ActorValueInformation ?? true)
                    {
                        item.ActorValueInformation.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ActorValueInformation;
                }
                case RecordTypeInts.CAMS:
                {
                    if (importMask?.CameraShots ?? true)
                    {
                        item.CameraShots.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.CameraShots;
                }
                case RecordTypeInts.CPTH:
                {
                    if (importMask?.CameraPaths ?? true)
                    {
                        item.CameraPaths.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.CameraPaths;
                }
                case RecordTypeInts.VTYP:
                {
                    if (importMask?.VoiceTypes ?? true)
                    {
                        item.VoiceTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.MATT:
                {
                    if (importMask?.MaterialTypes ?? true)
                    {
                        item.MaterialTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MaterialTypes;
                }
                case RecordTypeInts.IPCT:
                {
                    if (importMask?.Impacts ?? true)
                    {
                        item.Impacts.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Impacts;
                }
                case RecordTypeInts.IPDS:
                {
                    if (importMask?.ImpactDataSets ?? true)
                    {
                        item.ImpactDataSets.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ImpactDataSets;
                }
                case RecordTypeInts.ARMA:
                {
                    if (importMask?.ArmorAddons ?? true)
                    {
                        item.ArmorAddons.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ArmorAddons;
                }
                case RecordTypeInts.ECZN:
                {
                    if (importMask?.EncounterZones ?? true)
                    {
                        item.EncounterZones.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.EncounterZones;
                }
                case RecordTypeInts.LCTN:
                {
                    if (importMask?.Locations ?? true)
                    {
                        item.Locations.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Locations;
                }
                case RecordTypeInts.MESG:
                {
                    if (importMask?.Messages ?? true)
                    {
                        item.Messages.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Messages;
                }
                case RecordTypeInts.DOBJ:
                {
                    if (importMask?.DefaultObjectManagers ?? true)
                    {
                        item.DefaultObjectManagers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.DefaultObjectManagers;
                }
                case RecordTypeInts.LGTM:
                {
                    if (importMask?.LightingTemplates ?? true)
                    {
                        item.LightingTemplates.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LightingTemplates;
                }
                case RecordTypeInts.MUSC:
                {
                    if (importMask?.MusicTypes ?? true)
                    {
                        item.MusicTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MusicTypes;
                }
                case RecordTypeInts.FSTP:
                {
                    if (importMask?.Footsteps ?? true)
                    {
                        item.Footsteps.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Footsteps;
                }
                case RecordTypeInts.FSTS:
                {
                    if (importMask?.FootstepSets ?? true)
                    {
                        item.FootstepSets.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.FootstepSets;
                }
                case RecordTypeInts.SMBN:
                {
                    if (importMask?.StoryManagerBranchNodes ?? true)
                    {
                        item.StoryManagerBranchNodes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.StoryManagerBranchNodes;
                }
                case RecordTypeInts.SMQN:
                {
                    if (importMask?.StoryManagerQuestNodes ?? true)
                    {
                        item.StoryManagerQuestNodes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.StoryManagerQuestNodes;
                }
                case RecordTypeInts.SMEN:
                {
                    if (importMask?.StoryManagerEventNodes ?? true)
                    {
                        item.StoryManagerEventNodes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.StoryManagerEventNodes;
                }
                case RecordTypeInts.DLBR:
                {
                    if (importMask?.DialogBranches ?? true)
                    {
                        item.DialogBranches.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.DialogBranches;
                }
                case RecordTypeInts.MUST:
                {
                    if (importMask?.MusicTracks ?? true)
                    {
                        item.MusicTracks.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MusicTracks;
                }
                case RecordTypeInts.DLVW:
                {
                    if (importMask?.DialogViews ?? true)
                    {
                        item.DialogViews.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.DialogViews;
                }
                case RecordTypeInts.WOOP:
                {
                    if (importMask?.WordsOfPower ?? true)
                    {
                        item.WordsOfPower.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.WordsOfPower;
                }
                case RecordTypeInts.SHOU:
                {
                    if (importMask?.Shouts ?? true)
                    {
                        item.Shouts.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Shouts;
                }
                case RecordTypeInts.EQUP:
                {
                    if (importMask?.EquipTypes ?? true)
                    {
                        item.EquipTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.EquipTypes;
                }
                case RecordTypeInts.RELA:
                {
                    if (importMask?.Relationships ?? true)
                    {
                        item.Relationships.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Relationships;
                }
                case RecordTypeInts.SCEN:
                {
                    if (importMask?.Scenes ?? true)
                    {
                        item.Scenes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Scenes;
                }
                case RecordTypeInts.ASTP:
                {
                    if (importMask?.AssociationTypes ?? true)
                    {
                        item.AssociationTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AssociationTypes;
                }
                case RecordTypeInts.OTFT:
                {
                    if (importMask?.Outfits ?? true)
                    {
                        item.Outfits.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Outfits;
                }
                case RecordTypeInts.ARTO:
                {
                    if (importMask?.ArtObjects ?? true)
                    {
                        item.ArtObjects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ArtObjects;
                }
                case RecordTypeInts.MATO:
                {
                    if (importMask?.MaterialObjects ?? true)
                    {
                        item.MaterialObjects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MaterialObjects;
                }
                case RecordTypeInts.MOVT:
                {
                    if (importMask?.MovementTypes ?? true)
                    {
                        item.MovementTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.SNDR:
                {
                    if (importMask?.SoundDescriptors ?? true)
                    {
                        item.SoundDescriptors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.SoundDescriptors;
                }
                case RecordTypeInts.DUAL:
                {
                    if (importMask?.DualCastData ?? true)
                    {
                        item.DualCastData.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.DualCastData;
                }
                case RecordTypeInts.SNCT:
                {
                    if (importMask?.SoundCategories ?? true)
                    {
                        item.SoundCategories.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.SoundCategories;
                }
                case RecordTypeInts.SOPM:
                {
                    if (importMask?.SoundOutputModels ?? true)
                    {
                        item.SoundOutputModels.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.SoundOutputModels;
                }
                case RecordTypeInts.COLL:
                {
                    if (importMask?.CollisionLayers ?? true)
                    {
                        item.CollisionLayers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.CollisionLayers;
                }
                case RecordTypeInts.CLFM:
                {
                    if (importMask?.Colors ?? true)
                    {
                        item.Colors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Colors;
                }
                case RecordTypeInts.REVB:
                {
                    if (importMask?.ReverbParameters ?? true)
                    {
                        item.ReverbParameters.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ReverbParameters;
                }
                case RecordTypeInts.VOLI:
                {
                    if (importMask?.VolumetricLightings ?? true)
                    {
                        item.VolumetricLightings.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.VolumetricLightings;
                }
                default:
                    frame.Position += contentLength;
                    return default(int?);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class Fallout4ModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFallout4ModGetter item,
            MutagenWriter writer,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            Fallout4ModBinaryWriteTranslation.Instance.Write(
                item: item,
                importMask: importMask,
                writer: writer,
                param: param,
                modKey: modKey);
        }

        public static void WriteToBinary(
            this IFallout4ModGetter item,
            string path,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            bool disposeStrings = param.StringsWriter == null;
            var stringsWriter = param.StringsWriter ?? (EnumExt.HasFlag((int)item.ModHeader.Flags, (int)ModHeaderCommonFlag.Localized) ? new StringsWriter(modKey, Path.Combine(Path.GetDirectoryName(path)!, "Strings")) : null);
            var bundle = new WritingBundle(item.Fallout4Release.ToGameRelease())
            {
                StringsWriter = stringsWriter
            };
            using var memStream = new MemoryTributary();
            using (var writer = new MutagenWriter(
                memStream,
                bundle,
                dispose: false))
            {
                Fallout4ModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
            using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                memStream.Position = 0;
                memStream.CopyTo(fs);
            }
            if (disposeStrings)
            {
                param.StringsWriter?.Dispose();
            }
        }

        public static void WriteToBinary(
            this IFallout4ModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            using (var writer = new MutagenWriter(
                stream: stream,
                new WritingBundle(item.Fallout4Release.ToGameRelease()),
                dispose: false))
            {
                Fallout4ModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    [DebuggerDisplay("{GameRelease} {ModKey.ToString()}")]
    public partial class Fallout4ModBinaryOverlay : IFallout4ModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Fallout4Mod_Registration.Instance;
        public static Fallout4Mod_Registration Registration => Fallout4Mod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => Fallout4ModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => Fallout4ModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFallout4ModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFallout4ModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFallout4ModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public Fallout4Release Fallout4Release { get; }
        public GameRelease GameRelease => Fallout4Release.ToGameRelease();
        IReadOnlyCache<T, FormKey> IModGetter.GetTopLevelGroupGetter<T>() => this.GetTopLevelGroupGetter<T>();
        void IModGetter.WriteToBinary(string path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(string path, BinaryWriteParameters? param) => this.WriteToBinaryParallel(path, param: param);
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public bool CanUseLocalization => true;
        public bool UsingLocalization => this.ModHeader.Flags.HasFlag(Fallout4ModHeader.HeaderFlag.Localized);
        public IEnumerable<FormLinkInformation> ContainedFormLinks => Fallout4ModCommon.Instance.GetContainedFormLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout4Mod, TSetter, TGetter>> IMajorRecordContextEnumerable<IFallout4Mod>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout4Mod, IMajorRecordCommon, IMajorRecordCommonGetter>> IMajorRecordContextEnumerable<IFallout4Mod>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        uint IModGetter.NextFormID => ModHeader.Stats.NextFormID;
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _data;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _data.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private IFallout4ModHeaderGetter? _ModHeader => _ModHeaderLocation.HasValue ? Fallout4ModHeaderBinaryOverlay.Fallout4ModHeaderFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max), _package), _package) : default;
        public IFallout4ModHeaderGetter ModHeader => _ModHeader ?? new Fallout4ModHeader();
        #endregion
        #region GameSettings
        private RangeInt64? _GameSettingsLocation;
        private IGroupGetter<IGameSettingGetter>? _GameSettings => _GameSettingsLocation.HasValue ? GroupBinaryOverlay<IGameSettingGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _GameSettingsLocation!.Value.Min, _GameSettingsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new Group<GameSetting>(this);
        #endregion
        #region Keywords
        private RangeInt64? _KeywordsLocation;
        private IGroupGetter<IKeywordGetter>? _Keywords => _KeywordsLocation.HasValue ? GroupBinaryOverlay<IKeywordGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _KeywordsLocation!.Value.Min, _KeywordsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IKeywordGetter> Keywords => _Keywords ?? new Group<Keyword>(this);
        #endregion
        #region LocationReferenceTypes
        private RangeInt64? _LocationReferenceTypesLocation;
        private IGroupGetter<ILocationReferenceTypeGetter>? _LocationReferenceTypes => _LocationReferenceTypesLocation.HasValue ? GroupBinaryOverlay<ILocationReferenceTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LocationReferenceTypesLocation!.Value.Min, _LocationReferenceTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes => _LocationReferenceTypes ?? new Group<LocationReferenceType>(this);
        #endregion
        #region Actions
        private RangeInt64? _ActionsLocation;
        private IGroupGetter<IActionRecordGetter>? _Actions => _ActionsLocation.HasValue ? GroupBinaryOverlay<IActionRecordGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ActionsLocation!.Value.Min, _ActionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IActionRecordGetter> Actions => _Actions ?? new Group<ActionRecord>(this);
        #endregion
        #region TextureSets
        private RangeInt64? _TextureSetsLocation;
        private IGroupGetter<ITextureSetGetter>? _TextureSets => _TextureSetsLocation.HasValue ? GroupBinaryOverlay<ITextureSetGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _TextureSetsLocation!.Value.Min, _TextureSetsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ITextureSetGetter> TextureSets => _TextureSets ?? new Group<TextureSet>(this);
        #endregion
        #region Globals
        private RangeInt64? _GlobalsLocation;
        private IGroupGetter<IGlobalGetter>? _Globals => _GlobalsLocation.HasValue ? GroupBinaryOverlay<IGlobalGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _GlobalsLocation!.Value.Min, _GlobalsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IGlobalGetter> Globals => _Globals ?? new Group<Global>(this);
        #endregion
        #region Classes
        private RangeInt64? _ClassesLocation;
        private IGroupGetter<IClassGetter>? _Classes => _ClassesLocation.HasValue ? GroupBinaryOverlay<IClassGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ClassesLocation!.Value.Min, _ClassesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IClassGetter> Classes => _Classes ?? new Group<Class>(this);
        #endregion
        #region Factions
        private RangeInt64? _FactionsLocation;
        private IGroupGetter<IFactionGetter>? _Factions => _FactionsLocation.HasValue ? GroupBinaryOverlay<IFactionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FactionsLocation!.Value.Min, _FactionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFactionGetter> Factions => _Factions ?? new Group<Faction>(this);
        #endregion
        #region HeadParts
        private RangeInt64? _HeadPartsLocation;
        private IGroupGetter<IHeadPartGetter>? _HeadParts => _HeadPartsLocation.HasValue ? GroupBinaryOverlay<IHeadPartGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _HeadPartsLocation!.Value.Min, _HeadPartsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IHeadPartGetter> HeadParts => _HeadParts ?? new Group<HeadPart>(this);
        #endregion
        #region Hairs
        private RangeInt64? _HairsLocation;
        private IGroupGetter<IHairGetter>? _Hairs => _HairsLocation.HasValue ? GroupBinaryOverlay<IHairGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _HairsLocation!.Value.Min, _HairsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IHairGetter> Hairs => _Hairs ?? new Group<Hair>(this);
        #endregion
        #region Eyes
        private RangeInt64? _EyesLocation;
        private IGroupGetter<IEyesGetter>? _Eyes => _EyesLocation.HasValue ? GroupBinaryOverlay<IEyesGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _EyesLocation!.Value.Min, _EyesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IEyesGetter> Eyes => _Eyes ?? new Group<Eyes>(this);
        #endregion
        #region Races
        private RangeInt64? _RacesLocation;
        private IGroupGetter<IRaceGetter>? _Races => _RacesLocation.HasValue ? GroupBinaryOverlay<IRaceGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _RacesLocation!.Value.Min, _RacesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IRaceGetter> Races => _Races ?? new Group<Race>(this);
        #endregion
        #region SoundMarkers
        private RangeInt64? _SoundMarkersLocation;
        private IGroupGetter<ISoundMarkerGetter>? _SoundMarkers => _SoundMarkersLocation.HasValue ? GroupBinaryOverlay<ISoundMarkerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoundMarkersLocation!.Value.Min, _SoundMarkersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoundMarkerGetter> SoundMarkers => _SoundMarkers ?? new Group<SoundMarker>(this);
        #endregion
        #region AcousticSpaces
        private RangeInt64? _AcousticSpacesLocation;
        private IGroupGetter<IAcousticSpaceGetter>? _AcousticSpaces => _AcousticSpacesLocation.HasValue ? GroupBinaryOverlay<IAcousticSpaceGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AcousticSpacesLocation!.Value.Min, _AcousticSpacesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAcousticSpaceGetter> AcousticSpaces => _AcousticSpaces ?? new Group<AcousticSpace>(this);
        #endregion
        #region MagicEffects
        private RangeInt64? _MagicEffectsLocation;
        private IGroupGetter<IMagicEffectGetter>? _MagicEffects => _MagicEffectsLocation.HasValue ? GroupBinaryOverlay<IMagicEffectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MagicEffectsLocation!.Value.Min, _MagicEffectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMagicEffectGetter> MagicEffects => _MagicEffects ?? new Group<MagicEffect>(this);
        #endregion
        #region LandscapeTextures
        private RangeInt64? _LandscapeTexturesLocation;
        private IGroupGetter<ILandscapeTextureGetter>? _LandscapeTextures => _LandscapeTexturesLocation.HasValue ? GroupBinaryOverlay<ILandscapeTextureGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LandscapeTexturesLocation!.Value.Min, _LandscapeTexturesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILandscapeTextureGetter> LandscapeTextures => _LandscapeTextures ?? new Group<LandscapeTexture>(this);
        #endregion
        #region ObjectEffects
        private RangeInt64? _ObjectEffectsLocation;
        private IGroupGetter<IObjectEffectGetter>? _ObjectEffects => _ObjectEffectsLocation.HasValue ? GroupBinaryOverlay<IObjectEffectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ObjectEffectsLocation!.Value.Min, _ObjectEffectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IObjectEffectGetter> ObjectEffects => _ObjectEffects ?? new Group<ObjectEffect>(this);
        #endregion
        #region Spells
        private RangeInt64? _SpellsLocation;
        private IGroupGetter<ISpellGetter>? _Spells => _SpellsLocation.HasValue ? GroupBinaryOverlay<ISpellGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SpellsLocation!.Value.Min, _SpellsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISpellGetter> Spells => _Spells ?? new Group<Spell>(this);
        #endregion
        #region Scrolls
        private RangeInt64? _ScrollsLocation;
        private IGroupGetter<IScrollGetter>? _Scrolls => _ScrollsLocation.HasValue ? GroupBinaryOverlay<IScrollGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ScrollsLocation!.Value.Min, _ScrollsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IScrollGetter> Scrolls => _Scrolls ?? new Group<Scroll>(this);
        #endregion
        #region Activators
        private RangeInt64? _ActivatorsLocation;
        private IGroupGetter<IActivatorGetter>? _Activators => _ActivatorsLocation.HasValue ? GroupBinaryOverlay<IActivatorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ActivatorsLocation!.Value.Min, _ActivatorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IActivatorGetter> Activators => _Activators ?? new Group<Activator>(this);
        #endregion
        #region TalkingActivators
        private RangeInt64? _TalkingActivatorsLocation;
        private IGroupGetter<ITalkingActivatorGetter>? _TalkingActivators => _TalkingActivatorsLocation.HasValue ? GroupBinaryOverlay<ITalkingActivatorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _TalkingActivatorsLocation!.Value.Min, _TalkingActivatorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ITalkingActivatorGetter> TalkingActivators => _TalkingActivators ?? new Group<TalkingActivator>(this);
        #endregion
        #region Armors
        private RangeInt64? _ArmorsLocation;
        private IGroupGetter<IArmorGetter>? _Armors => _ArmorsLocation.HasValue ? GroupBinaryOverlay<IArmorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ArmorsLocation!.Value.Min, _ArmorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IArmorGetter> Armors => _Armors ?? new Group<Armor>(this);
        #endregion
        #region Books
        private RangeInt64? _BooksLocation;
        private IGroupGetter<IBookGetter>? _Books => _BooksLocation.HasValue ? GroupBinaryOverlay<IBookGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _BooksLocation!.Value.Min, _BooksLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IBookGetter> Books => _Books ?? new Group<Book>(this);
        #endregion
        #region Containers
        private RangeInt64? _ContainersLocation;
        private IGroupGetter<IContainerGetter>? _Containers => _ContainersLocation.HasValue ? GroupBinaryOverlay<IContainerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ContainersLocation!.Value.Min, _ContainersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IContainerGetter> Containers => _Containers ?? new Group<Container>(this);
        #endregion
        #region Doors
        private RangeInt64? _DoorsLocation;
        private IGroupGetter<IDoorGetter>? _Doors => _DoorsLocation.HasValue ? GroupBinaryOverlay<IDoorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DoorsLocation!.Value.Min, _DoorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDoorGetter> Doors => _Doors ?? new Group<Door>(this);
        #endregion
        #region Ingredients
        private RangeInt64? _IngredientsLocation;
        private IGroupGetter<IIngredientGetter>? _Ingredients => _IngredientsLocation.HasValue ? GroupBinaryOverlay<IIngredientGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _IngredientsLocation!.Value.Min, _IngredientsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IIngredientGetter> Ingredients => _Ingredients ?? new Group<Ingredient>(this);
        #endregion
        #region Lights
        private RangeInt64? _LightsLocation;
        private IGroupGetter<ILightGetter>? _Lights => _LightsLocation.HasValue ? GroupBinaryOverlay<ILightGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LightsLocation!.Value.Min, _LightsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILightGetter> Lights => _Lights ?? new Group<Light>(this);
        #endregion
        #region MiscItems
        private RangeInt64? _MiscItemsLocation;
        private IGroupGetter<IMiscItemGetter>? _MiscItems => _MiscItemsLocation.HasValue ? GroupBinaryOverlay<IMiscItemGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MiscItemsLocation!.Value.Min, _MiscItemsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMiscItemGetter> MiscItems => _MiscItems ?? new Group<MiscItem>(this);
        #endregion
        #region AlchemicalApparatuses
        private RangeInt64? _AlchemicalApparatusesLocation;
        private IGroupGetter<IAlchemicalApparatusGetter>? _AlchemicalApparatuses => _AlchemicalApparatusesLocation.HasValue ? GroupBinaryOverlay<IAlchemicalApparatusGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AlchemicalApparatusesLocation!.Value.Min, _AlchemicalApparatusesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatuses => _AlchemicalApparatuses ?? new Group<AlchemicalApparatus>(this);
        #endregion
        #region Statics
        private RangeInt64? _StaticsLocation;
        private IGroupGetter<IStaticGetter>? _Statics => _StaticsLocation.HasValue ? GroupBinaryOverlay<IStaticGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _StaticsLocation!.Value.Min, _StaticsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IStaticGetter> Statics => _Statics ?? new Group<Static>(this);
        #endregion
        #region MoveableStatics
        private RangeInt64? _MoveableStaticsLocation;
        private IGroupGetter<IMoveableStaticGetter>? _MoveableStatics => _MoveableStaticsLocation.HasValue ? GroupBinaryOverlay<IMoveableStaticGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MoveableStaticsLocation!.Value.Min, _MoveableStaticsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMoveableStaticGetter> MoveableStatics => _MoveableStatics ?? new Group<MoveableStatic>(this);
        #endregion
        #region Grasses
        private RangeInt64? _GrassesLocation;
        private IGroupGetter<IGrassGetter>? _Grasses => _GrassesLocation.HasValue ? GroupBinaryOverlay<IGrassGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _GrassesLocation!.Value.Min, _GrassesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IGrassGetter> Grasses => _Grasses ?? new Group<Grass>(this);
        #endregion
        #region Trees
        private RangeInt64? _TreesLocation;
        private IGroupGetter<ITreeGetter>? _Trees => _TreesLocation.HasValue ? GroupBinaryOverlay<ITreeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _TreesLocation!.Value.Min, _TreesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ITreeGetter> Trees => _Trees ?? new Group<Tree>(this);
        #endregion
        #region Florae
        private RangeInt64? _FloraeLocation;
        private IGroupGetter<IFloraGetter>? _Florae => _FloraeLocation.HasValue ? GroupBinaryOverlay<IFloraGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FloraeLocation!.Value.Min, _FloraeLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFloraGetter> Florae => _Florae ?? new Group<Flora>(this);
        #endregion
        #region Furniture
        private RangeInt64? _FurnitureLocation;
        private IGroupGetter<IFurnitureGetter>? _Furniture => _FurnitureLocation.HasValue ? GroupBinaryOverlay<IFurnitureGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FurnitureLocation!.Value.Min, _FurnitureLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFurnitureGetter> Furniture => _Furniture ?? new Group<Furniture>(this);
        #endregion
        #region Weapons
        private RangeInt64? _WeaponsLocation;
        private IGroupGetter<IWeaponGetter>? _Weapons => _WeaponsLocation.HasValue ? GroupBinaryOverlay<IWeaponGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WeaponsLocation!.Value.Min, _WeaponsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWeaponGetter> Weapons => _Weapons ?? new Group<Weapon>(this);
        #endregion
        #region Ammunitions
        private RangeInt64? _AmmunitionsLocation;
        private IGroupGetter<IAmmunitionGetter>? _Ammunitions => _AmmunitionsLocation.HasValue ? GroupBinaryOverlay<IAmmunitionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AmmunitionsLocation!.Value.Min, _AmmunitionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAmmunitionGetter> Ammunitions => _Ammunitions ?? new Group<Ammunition>(this);
        #endregion
        #region Npcs
        private RangeInt64? _NpcsLocation;
        private IGroupGetter<INpcGetter>? _Npcs => _NpcsLocation.HasValue ? GroupBinaryOverlay<INpcGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _NpcsLocation!.Value.Min, _NpcsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<INpcGetter> Npcs => _Npcs ?? new Group<Npc>(this);
        #endregion
        #region LeveledNpcs
        private RangeInt64? _LeveledNpcsLocation;
        private IGroupGetter<ILeveledNpcGetter>? _LeveledNpcs => _LeveledNpcsLocation.HasValue ? GroupBinaryOverlay<ILeveledNpcGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LeveledNpcsLocation!.Value.Min, _LeveledNpcsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILeveledNpcGetter> LeveledNpcs => _LeveledNpcs ?? new Group<LeveledNpc>(this);
        #endregion
        #region Keys
        private RangeInt64? _KeysLocation;
        private IGroupGetter<IKeyGetter>? _Keys => _KeysLocation.HasValue ? GroupBinaryOverlay<IKeyGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _KeysLocation!.Value.Min, _KeysLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IKeyGetter> Keys => _Keys ?? new Group<Key>(this);
        #endregion
        #region Ingestibles
        private RangeInt64? _IngestiblesLocation;
        private IGroupGetter<IIngestibleGetter>? _Ingestibles => _IngestiblesLocation.HasValue ? GroupBinaryOverlay<IIngestibleGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _IngestiblesLocation!.Value.Min, _IngestiblesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IIngestibleGetter> Ingestibles => _Ingestibles ?? new Group<Ingestible>(this);
        #endregion
        #region IdleMarkers
        private RangeInt64? _IdleMarkersLocation;
        private IGroupGetter<IIdleMarkerGetter>? _IdleMarkers => _IdleMarkersLocation.HasValue ? GroupBinaryOverlay<IIdleMarkerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _IdleMarkersLocation!.Value.Min, _IdleMarkersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IIdleMarkerGetter> IdleMarkers => _IdleMarkers ?? new Group<IdleMarker>(this);
        #endregion
        #region ConstructibleObjects
        private RangeInt64? _ConstructibleObjectsLocation;
        private IGroupGetter<IConstructibleObjectGetter>? _ConstructibleObjects => _ConstructibleObjectsLocation.HasValue ? GroupBinaryOverlay<IConstructibleObjectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ConstructibleObjectsLocation!.Value.Min, _ConstructibleObjectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IConstructibleObjectGetter> ConstructibleObjects => _ConstructibleObjects ?? new Group<ConstructibleObject>(this);
        #endregion
        #region Projectiles
        private RangeInt64? _ProjectilesLocation;
        private IGroupGetter<IProjectileGetter>? _Projectiles => _ProjectilesLocation.HasValue ? GroupBinaryOverlay<IProjectileGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ProjectilesLocation!.Value.Min, _ProjectilesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IProjectileGetter> Projectiles => _Projectiles ?? new Group<Projectile>(this);
        #endregion
        #region Hazards
        private RangeInt64? _HazardsLocation;
        private IGroupGetter<IHazardGetter>? _Hazards => _HazardsLocation.HasValue ? GroupBinaryOverlay<IHazardGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _HazardsLocation!.Value.Min, _HazardsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IHazardGetter> Hazards => _Hazards ?? new Group<Hazard>(this);
        #endregion
        #region SoulGems
        private RangeInt64? _SoulGemsLocation;
        private IGroupGetter<ISoulGemGetter>? _SoulGems => _SoulGemsLocation.HasValue ? GroupBinaryOverlay<ISoulGemGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoulGemsLocation!.Value.Min, _SoulGemsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoulGemGetter> SoulGems => _SoulGems ?? new Group<SoulGem>(this);
        #endregion
        #region LeveledItems
        private RangeInt64? _LeveledItemsLocation;
        private IGroupGetter<ILeveledItemGetter>? _LeveledItems => _LeveledItemsLocation.HasValue ? GroupBinaryOverlay<ILeveledItemGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LeveledItemsLocation!.Value.Min, _LeveledItemsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILeveledItemGetter> LeveledItems => _LeveledItems ?? new Group<LeveledItem>(this);
        #endregion
        #region Weathers
        private RangeInt64? _WeathersLocation;
        private IGroupGetter<IWeatherGetter>? _Weathers => _WeathersLocation.HasValue ? GroupBinaryOverlay<IWeatherGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WeathersLocation!.Value.Min, _WeathersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWeatherGetter> Weathers => _Weathers ?? new Group<Weather>(this);
        #endregion
        #region Climates
        private RangeInt64? _ClimatesLocation;
        private IGroupGetter<IClimateGetter>? _Climates => _ClimatesLocation.HasValue ? GroupBinaryOverlay<IClimateGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ClimatesLocation!.Value.Min, _ClimatesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IClimateGetter> Climates => _Climates ?? new Group<Climate>(this);
        #endregion
        #region ShaderParticleGeometries
        private RangeInt64? _ShaderParticleGeometriesLocation;
        private IGroupGetter<IShaderParticleGeometryGetter>? _ShaderParticleGeometries => _ShaderParticleGeometriesLocation.HasValue ? GroupBinaryOverlay<IShaderParticleGeometryGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ShaderParticleGeometriesLocation!.Value.Min, _ShaderParticleGeometriesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IShaderParticleGeometryGetter> ShaderParticleGeometries => _ShaderParticleGeometries ?? new Group<ShaderParticleGeometry>(this);
        #endregion
        #region VisualEffects
        private RangeInt64? _VisualEffectsLocation;
        private IGroupGetter<IVisualEffectGetter>? _VisualEffects => _VisualEffectsLocation.HasValue ? GroupBinaryOverlay<IVisualEffectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _VisualEffectsLocation!.Value.Min, _VisualEffectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IVisualEffectGetter> VisualEffects => _VisualEffects ?? new Group<VisualEffect>(this);
        #endregion
        #region Regions
        private RangeInt64? _RegionsLocation;
        private IGroupGetter<IRegionGetter>? _Regions => _RegionsLocation.HasValue ? GroupBinaryOverlay<IRegionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _RegionsLocation!.Value.Min, _RegionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IRegionGetter> Regions => _Regions ?? new Group<Region>(this);
        #endregion
        #region NavigationMeshInfoMaps
        private RangeInt64? _NavigationMeshInfoMapsLocation;
        private IGroupGetter<INavigationMeshInfoMapGetter>? _NavigationMeshInfoMaps => _NavigationMeshInfoMapsLocation.HasValue ? GroupBinaryOverlay<INavigationMeshInfoMapGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _NavigationMeshInfoMapsLocation!.Value.Min, _NavigationMeshInfoMapsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<INavigationMeshInfoMapGetter> NavigationMeshInfoMaps => _NavigationMeshInfoMaps ?? new Group<NavigationMeshInfoMap>(this);
        #endregion
        #region Cells
        private RangeInt64? _CellsLocation;
        private IListGroupGetter<ICellBlockGetter>? _Cells => _CellsLocation.HasValue ? ListGroupBinaryOverlay<ICellBlockGetter>.ListGroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CellsLocation!.Value.Min, _CellsLocation!.Value.Max), _package), _package) : default;
        public IListGroupGetter<ICellBlockGetter> Cells => _Cells ?? new ListGroup<CellBlock>();
        #endregion
        #region Worldspaces
        private RangeInt64? _WorldspacesLocation;
        private IGroupGetter<IWorldspaceGetter>? _Worldspaces => _WorldspacesLocation.HasValue ? GroupBinaryOverlay<IWorldspaceGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WorldspacesLocation!.Value.Min, _WorldspacesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWorldspaceGetter> Worldspaces => _Worldspaces ?? new Group<Worldspace>(this);
        #endregion
        #region DialogTopics
        private RangeInt64? _DialogTopicsLocation;
        private IGroupGetter<IDialogTopicGetter>? _DialogTopics => _DialogTopicsLocation.HasValue ? GroupBinaryOverlay<IDialogTopicGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DialogTopicsLocation!.Value.Min, _DialogTopicsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDialogTopicGetter> DialogTopics => _DialogTopics ?? new Group<DialogTopic>(this);
        #endregion
        #region Quests
        private RangeInt64? _QuestsLocation;
        private IGroupGetter<IQuestGetter>? _Quests => _QuestsLocation.HasValue ? GroupBinaryOverlay<IQuestGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _QuestsLocation!.Value.Min, _QuestsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IQuestGetter> Quests => _Quests ?? new Group<Quest>(this);
        #endregion
        #region IdleAnimations
        private RangeInt64? _IdleAnimationsLocation;
        private IGroupGetter<IIdleAnimationGetter>? _IdleAnimations => _IdleAnimationsLocation.HasValue ? GroupBinaryOverlay<IIdleAnimationGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _IdleAnimationsLocation!.Value.Min, _IdleAnimationsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IIdleAnimationGetter> IdleAnimations => _IdleAnimations ?? new Group<IdleAnimation>(this);
        #endregion
        #region Packages
        private RangeInt64? _PackagesLocation;
        private IGroupGetter<IPackageGetter>? _Packages => _PackagesLocation.HasValue ? GroupBinaryOverlay<IPackageGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _PackagesLocation!.Value.Min, _PackagesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IPackageGetter> Packages => _Packages ?? new Group<Package>(this);
        #endregion
        #region CombatStyles
        private RangeInt64? _CombatStylesLocation;
        private IGroupGetter<ICombatStyleGetter>? _CombatStyles => _CombatStylesLocation.HasValue ? GroupBinaryOverlay<ICombatStyleGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CombatStylesLocation!.Value.Min, _CombatStylesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ICombatStyleGetter> CombatStyles => _CombatStyles ?? new Group<CombatStyle>(this);
        #endregion
        #region LoadScreens
        private RangeInt64? _LoadScreensLocation;
        private IGroupGetter<ILoadScreenGetter>? _LoadScreens => _LoadScreensLocation.HasValue ? GroupBinaryOverlay<ILoadScreenGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LoadScreensLocation!.Value.Min, _LoadScreensLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILoadScreenGetter> LoadScreens => _LoadScreens ?? new Group<LoadScreen>(this);
        #endregion
        #region LeveledSpells
        private RangeInt64? _LeveledSpellsLocation;
        private IGroupGetter<ILeveledSpellGetter>? _LeveledSpells => _LeveledSpellsLocation.HasValue ? GroupBinaryOverlay<ILeveledSpellGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LeveledSpellsLocation!.Value.Min, _LeveledSpellsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILeveledSpellGetter> LeveledSpells => _LeveledSpells ?? new Group<LeveledSpell>(this);
        #endregion
        #region AnimatedObjects
        private RangeInt64? _AnimatedObjectsLocation;
        private IGroupGetter<IAnimatedObjectGetter>? _AnimatedObjects => _AnimatedObjectsLocation.HasValue ? GroupBinaryOverlay<IAnimatedObjectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AnimatedObjectsLocation!.Value.Min, _AnimatedObjectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAnimatedObjectGetter> AnimatedObjects => _AnimatedObjects ?? new Group<AnimatedObject>(this);
        #endregion
        #region Waters
        private RangeInt64? _WatersLocation;
        private IGroupGetter<IWaterGetter>? _Waters => _WatersLocation.HasValue ? GroupBinaryOverlay<IWaterGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WatersLocation!.Value.Min, _WatersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWaterGetter> Waters => _Waters ?? new Group<Water>(this);
        #endregion
        #region EffectShaders
        private RangeInt64? _EffectShadersLocation;
        private IGroupGetter<IEffectShaderGetter>? _EffectShaders => _EffectShadersLocation.HasValue ? GroupBinaryOverlay<IEffectShaderGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _EffectShadersLocation!.Value.Min, _EffectShadersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IEffectShaderGetter> EffectShaders => _EffectShaders ?? new Group<EffectShader>(this);
        #endregion
        #region Explosions
        private RangeInt64? _ExplosionsLocation;
        private IGroupGetter<IExplosionGetter>? _Explosions => _ExplosionsLocation.HasValue ? GroupBinaryOverlay<IExplosionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ExplosionsLocation!.Value.Min, _ExplosionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IExplosionGetter> Explosions => _Explosions ?? new Group<Explosion>(this);
        #endregion
        #region Debris
        private RangeInt64? _DebrisLocation;
        private IGroupGetter<IDebrisGetter>? _Debris => _DebrisLocation.HasValue ? GroupBinaryOverlay<IDebrisGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DebrisLocation!.Value.Min, _DebrisLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDebrisGetter> Debris => _Debris ?? new Group<Debris>(this);
        #endregion
        #region ImageSpaces
        private RangeInt64? _ImageSpacesLocation;
        private IGroupGetter<IImageSpaceGetter>? _ImageSpaces => _ImageSpacesLocation.HasValue ? GroupBinaryOverlay<IImageSpaceGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ImageSpacesLocation!.Value.Min, _ImageSpacesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IImageSpaceGetter> ImageSpaces => _ImageSpaces ?? new Group<ImageSpace>(this);
        #endregion
        #region ImageSpaceAdapters
        private RangeInt64? _ImageSpaceAdaptersLocation;
        private IGroupGetter<IImageSpaceAdapterGetter>? _ImageSpaceAdapters => _ImageSpaceAdaptersLocation.HasValue ? GroupBinaryOverlay<IImageSpaceAdapterGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ImageSpaceAdaptersLocation!.Value.Min, _ImageSpaceAdaptersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IImageSpaceAdapterGetter> ImageSpaceAdapters => _ImageSpaceAdapters ?? new Group<ImageSpaceAdapter>(this);
        #endregion
        #region FormLists
        private RangeInt64? _FormListsLocation;
        private IGroupGetter<IFormListGetter>? _FormLists => _FormListsLocation.HasValue ? GroupBinaryOverlay<IFormListGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FormListsLocation!.Value.Min, _FormListsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFormListGetter> FormLists => _FormLists ?? new Group<FormList>(this);
        #endregion
        #region Perks
        private RangeInt64? _PerksLocation;
        private IGroupGetter<IPerkGetter>? _Perks => _PerksLocation.HasValue ? GroupBinaryOverlay<IPerkGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _PerksLocation!.Value.Min, _PerksLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IPerkGetter> Perks => _Perks ?? new Group<Perk>(this);
        #endregion
        #region BodyParts
        private RangeInt64? _BodyPartsLocation;
        private IGroupGetter<IBodyPartDataGetter>? _BodyParts => _BodyPartsLocation.HasValue ? GroupBinaryOverlay<IBodyPartDataGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _BodyPartsLocation!.Value.Min, _BodyPartsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IBodyPartDataGetter> BodyParts => _BodyParts ?? new Group<BodyPartData>(this);
        #endregion
        #region AddonNodes
        private RangeInt64? _AddonNodesLocation;
        private IGroupGetter<IAddonNodeGetter>? _AddonNodes => _AddonNodesLocation.HasValue ? GroupBinaryOverlay<IAddonNodeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AddonNodesLocation!.Value.Min, _AddonNodesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAddonNodeGetter> AddonNodes => _AddonNodes ?? new Group<AddonNode>(this);
        #endregion
        #region ActorValueInformation
        private RangeInt64? _ActorValueInformationLocation;
        private IGroupGetter<IActorValueInformationGetter>? _ActorValueInformation => _ActorValueInformationLocation.HasValue ? GroupBinaryOverlay<IActorValueInformationGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ActorValueInformationLocation!.Value.Min, _ActorValueInformationLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IActorValueInformationGetter> ActorValueInformation => _ActorValueInformation ?? new Group<ActorValueInformation>(this);
        #endregion
        #region CameraShots
        private RangeInt64? _CameraShotsLocation;
        private IGroupGetter<ICameraShotGetter>? _CameraShots => _CameraShotsLocation.HasValue ? GroupBinaryOverlay<ICameraShotGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CameraShotsLocation!.Value.Min, _CameraShotsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ICameraShotGetter> CameraShots => _CameraShots ?? new Group<CameraShot>(this);
        #endregion
        #region CameraPaths
        private RangeInt64? _CameraPathsLocation;
        private IGroupGetter<ICameraPathGetter>? _CameraPaths => _CameraPathsLocation.HasValue ? GroupBinaryOverlay<ICameraPathGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CameraPathsLocation!.Value.Min, _CameraPathsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ICameraPathGetter> CameraPaths => _CameraPaths ?? new Group<CameraPath>(this);
        #endregion
        #region VoiceTypes
        private RangeInt64? _VoiceTypesLocation;
        private IGroupGetter<IVoiceTypeGetter>? _VoiceTypes => _VoiceTypesLocation.HasValue ? GroupBinaryOverlay<IVoiceTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _VoiceTypesLocation!.Value.Min, _VoiceTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IVoiceTypeGetter> VoiceTypes => _VoiceTypes ?? new Group<VoiceType>(this);
        #endregion
        #region MaterialTypes
        private RangeInt64? _MaterialTypesLocation;
        private IGroupGetter<IMaterialTypeGetter>? _MaterialTypes => _MaterialTypesLocation.HasValue ? GroupBinaryOverlay<IMaterialTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MaterialTypesLocation!.Value.Min, _MaterialTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMaterialTypeGetter> MaterialTypes => _MaterialTypes ?? new Group<MaterialType>(this);
        #endregion
        #region Impacts
        private RangeInt64? _ImpactsLocation;
        private IGroupGetter<IImpactGetter>? _Impacts => _ImpactsLocation.HasValue ? GroupBinaryOverlay<IImpactGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ImpactsLocation!.Value.Min, _ImpactsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IImpactGetter> Impacts => _Impacts ?? new Group<Impact>(this);
        #endregion
        #region ImpactDataSets
        private RangeInt64? _ImpactDataSetsLocation;
        private IGroupGetter<IImpactDataSetGetter>? _ImpactDataSets => _ImpactDataSetsLocation.HasValue ? GroupBinaryOverlay<IImpactDataSetGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ImpactDataSetsLocation!.Value.Min, _ImpactDataSetsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IImpactDataSetGetter> ImpactDataSets => _ImpactDataSets ?? new Group<ImpactDataSet>(this);
        #endregion
        #region ArmorAddons
        private RangeInt64? _ArmorAddonsLocation;
        private IGroupGetter<IArmorAddonGetter>? _ArmorAddons => _ArmorAddonsLocation.HasValue ? GroupBinaryOverlay<IArmorAddonGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ArmorAddonsLocation!.Value.Min, _ArmorAddonsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IArmorAddonGetter> ArmorAddons => _ArmorAddons ?? new Group<ArmorAddon>(this);
        #endregion
        #region EncounterZones
        private RangeInt64? _EncounterZonesLocation;
        private IGroupGetter<IEncounterZoneGetter>? _EncounterZones => _EncounterZonesLocation.HasValue ? GroupBinaryOverlay<IEncounterZoneGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _EncounterZonesLocation!.Value.Min, _EncounterZonesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IEncounterZoneGetter> EncounterZones => _EncounterZones ?? new Group<EncounterZone>(this);
        #endregion
        #region Locations
        private RangeInt64? _LocationsLocation;
        private IGroupGetter<ILocationGetter>? _Locations => _LocationsLocation.HasValue ? GroupBinaryOverlay<ILocationGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LocationsLocation!.Value.Min, _LocationsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILocationGetter> Locations => _Locations ?? new Group<Location>(this);
        #endregion
        #region Messages
        private RangeInt64? _MessagesLocation;
        private IGroupGetter<IMessageGetter>? _Messages => _MessagesLocation.HasValue ? GroupBinaryOverlay<IMessageGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MessagesLocation!.Value.Min, _MessagesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMessageGetter> Messages => _Messages ?? new Group<Message>(this);
        #endregion
        #region DefaultObjectManagers
        private RangeInt64? _DefaultObjectManagersLocation;
        private IGroupGetter<IDefaultObjectManagerGetter>? _DefaultObjectManagers => _DefaultObjectManagersLocation.HasValue ? GroupBinaryOverlay<IDefaultObjectManagerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DefaultObjectManagersLocation!.Value.Min, _DefaultObjectManagersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDefaultObjectManagerGetter> DefaultObjectManagers => _DefaultObjectManagers ?? new Group<DefaultObjectManager>(this);
        #endregion
        #region LightingTemplates
        private RangeInt64? _LightingTemplatesLocation;
        private IGroupGetter<ILightingTemplateGetter>? _LightingTemplates => _LightingTemplatesLocation.HasValue ? GroupBinaryOverlay<ILightingTemplateGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LightingTemplatesLocation!.Value.Min, _LightingTemplatesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILightingTemplateGetter> LightingTemplates => _LightingTemplates ?? new Group<LightingTemplate>(this);
        #endregion
        #region MusicTypes
        private RangeInt64? _MusicTypesLocation;
        private IGroupGetter<IMusicTypeGetter>? _MusicTypes => _MusicTypesLocation.HasValue ? GroupBinaryOverlay<IMusicTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MusicTypesLocation!.Value.Min, _MusicTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMusicTypeGetter> MusicTypes => _MusicTypes ?? new Group<MusicType>(this);
        #endregion
        #region Footsteps
        private RangeInt64? _FootstepsLocation;
        private IGroupGetter<IFootstepGetter>? _Footsteps => _FootstepsLocation.HasValue ? GroupBinaryOverlay<IFootstepGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FootstepsLocation!.Value.Min, _FootstepsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFootstepGetter> Footsteps => _Footsteps ?? new Group<Footstep>(this);
        #endregion
        #region FootstepSets
        private RangeInt64? _FootstepSetsLocation;
        private IGroupGetter<IFootstepSetGetter>? _FootstepSets => _FootstepSetsLocation.HasValue ? GroupBinaryOverlay<IFootstepSetGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FootstepSetsLocation!.Value.Min, _FootstepSetsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFootstepSetGetter> FootstepSets => _FootstepSets ?? new Group<FootstepSet>(this);
        #endregion
        #region StoryManagerBranchNodes
        private RangeInt64? _StoryManagerBranchNodesLocation;
        private IGroupGetter<IStoryManagerBranchNodeGetter>? _StoryManagerBranchNodes => _StoryManagerBranchNodesLocation.HasValue ? GroupBinaryOverlay<IStoryManagerBranchNodeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _StoryManagerBranchNodesLocation!.Value.Min, _StoryManagerBranchNodesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IStoryManagerBranchNodeGetter> StoryManagerBranchNodes => _StoryManagerBranchNodes ?? new Group<StoryManagerBranchNode>(this);
        #endregion
        #region StoryManagerQuestNodes
        private RangeInt64? _StoryManagerQuestNodesLocation;
        private IGroupGetter<IStoryManagerQuestNodeGetter>? _StoryManagerQuestNodes => _StoryManagerQuestNodesLocation.HasValue ? GroupBinaryOverlay<IStoryManagerQuestNodeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _StoryManagerQuestNodesLocation!.Value.Min, _StoryManagerQuestNodesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IStoryManagerQuestNodeGetter> StoryManagerQuestNodes => _StoryManagerQuestNodes ?? new Group<StoryManagerQuestNode>(this);
        #endregion
        #region StoryManagerEventNodes
        private RangeInt64? _StoryManagerEventNodesLocation;
        private IGroupGetter<IStoryManagerEventNodeGetter>? _StoryManagerEventNodes => _StoryManagerEventNodesLocation.HasValue ? GroupBinaryOverlay<IStoryManagerEventNodeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _StoryManagerEventNodesLocation!.Value.Min, _StoryManagerEventNodesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IStoryManagerEventNodeGetter> StoryManagerEventNodes => _StoryManagerEventNodes ?? new Group<StoryManagerEventNode>(this);
        #endregion
        #region DialogBranches
        private RangeInt64? _DialogBranchesLocation;
        private IGroupGetter<IDialogBranchGetter>? _DialogBranches => _DialogBranchesLocation.HasValue ? GroupBinaryOverlay<IDialogBranchGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DialogBranchesLocation!.Value.Min, _DialogBranchesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDialogBranchGetter> DialogBranches => _DialogBranches ?? new Group<DialogBranch>(this);
        #endregion
        #region MusicTracks
        private RangeInt64? _MusicTracksLocation;
        private IGroupGetter<IMusicTrackGetter>? _MusicTracks => _MusicTracksLocation.HasValue ? GroupBinaryOverlay<IMusicTrackGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MusicTracksLocation!.Value.Min, _MusicTracksLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMusicTrackGetter> MusicTracks => _MusicTracks ?? new Group<MusicTrack>(this);
        #endregion
        #region DialogViews
        private RangeInt64? _DialogViewsLocation;
        private IGroupGetter<IDialogViewGetter>? _DialogViews => _DialogViewsLocation.HasValue ? GroupBinaryOverlay<IDialogViewGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DialogViewsLocation!.Value.Min, _DialogViewsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDialogViewGetter> DialogViews => _DialogViews ?? new Group<DialogView>(this);
        #endregion
        #region WordsOfPower
        private RangeInt64? _WordsOfPowerLocation;
        private IGroupGetter<IWordOfPowerGetter>? _WordsOfPower => _WordsOfPowerLocation.HasValue ? GroupBinaryOverlay<IWordOfPowerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WordsOfPowerLocation!.Value.Min, _WordsOfPowerLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWordOfPowerGetter> WordsOfPower => _WordsOfPower ?? new Group<WordOfPower>(this);
        #endregion
        #region Shouts
        private RangeInt64? _ShoutsLocation;
        private IGroupGetter<IShoutGetter>? _Shouts => _ShoutsLocation.HasValue ? GroupBinaryOverlay<IShoutGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ShoutsLocation!.Value.Min, _ShoutsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IShoutGetter> Shouts => _Shouts ?? new Group<Shout>(this);
        #endregion
        #region EquipTypes
        private RangeInt64? _EquipTypesLocation;
        private IGroupGetter<IEquipTypeGetter>? _EquipTypes => _EquipTypesLocation.HasValue ? GroupBinaryOverlay<IEquipTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _EquipTypesLocation!.Value.Min, _EquipTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IEquipTypeGetter> EquipTypes => _EquipTypes ?? new Group<EquipType>(this);
        #endregion
        #region Relationships
        private RangeInt64? _RelationshipsLocation;
        private IGroupGetter<IRelationshipGetter>? _Relationships => _RelationshipsLocation.HasValue ? GroupBinaryOverlay<IRelationshipGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _RelationshipsLocation!.Value.Min, _RelationshipsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IRelationshipGetter> Relationships => _Relationships ?? new Group<Relationship>(this);
        #endregion
        #region Scenes
        private RangeInt64? _ScenesLocation;
        private IGroupGetter<ISceneGetter>? _Scenes => _ScenesLocation.HasValue ? GroupBinaryOverlay<ISceneGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ScenesLocation!.Value.Min, _ScenesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISceneGetter> Scenes => _Scenes ?? new Group<Scene>(this);
        #endregion
        #region AssociationTypes
        private RangeInt64? _AssociationTypesLocation;
        private IGroupGetter<IAssociationTypeGetter>? _AssociationTypes => _AssociationTypesLocation.HasValue ? GroupBinaryOverlay<IAssociationTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AssociationTypesLocation!.Value.Min, _AssociationTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAssociationTypeGetter> AssociationTypes => _AssociationTypes ?? new Group<AssociationType>(this);
        #endregion
        #region Outfits
        private RangeInt64? _OutfitsLocation;
        private IGroupGetter<IOutfitGetter>? _Outfits => _OutfitsLocation.HasValue ? GroupBinaryOverlay<IOutfitGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _OutfitsLocation!.Value.Min, _OutfitsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IOutfitGetter> Outfits => _Outfits ?? new Group<Outfit>(this);
        #endregion
        #region ArtObjects
        private RangeInt64? _ArtObjectsLocation;
        private IGroupGetter<IArtObjectGetter>? _ArtObjects => _ArtObjectsLocation.HasValue ? GroupBinaryOverlay<IArtObjectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ArtObjectsLocation!.Value.Min, _ArtObjectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IArtObjectGetter> ArtObjects => _ArtObjects ?? new Group<ArtObject>(this);
        #endregion
        #region MaterialObjects
        private RangeInt64? _MaterialObjectsLocation;
        private IGroupGetter<IMaterialObjectGetter>? _MaterialObjects => _MaterialObjectsLocation.HasValue ? GroupBinaryOverlay<IMaterialObjectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MaterialObjectsLocation!.Value.Min, _MaterialObjectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMaterialObjectGetter> MaterialObjects => _MaterialObjects ?? new Group<MaterialObject>(this);
        #endregion
        #region MovementTypes
        private RangeInt64? _MovementTypesLocation;
        private IGroupGetter<IMovementTypeGetter>? _MovementTypes => _MovementTypesLocation.HasValue ? GroupBinaryOverlay<IMovementTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MovementTypesLocation!.Value.Min, _MovementTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMovementTypeGetter> MovementTypes => _MovementTypes ?? new Group<MovementType>(this);
        #endregion
        #region SoundDescriptors
        private RangeInt64? _SoundDescriptorsLocation;
        private IGroupGetter<ISoundDescriptorGetter>? _SoundDescriptors => _SoundDescriptorsLocation.HasValue ? GroupBinaryOverlay<ISoundDescriptorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoundDescriptorsLocation!.Value.Min, _SoundDescriptorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoundDescriptorGetter> SoundDescriptors => _SoundDescriptors ?? new Group<SoundDescriptor>(this);
        #endregion
        #region DualCastData
        private RangeInt64? _DualCastDataLocation;
        private IGroupGetter<IDualCastDataGetter>? _DualCastData => _DualCastDataLocation.HasValue ? GroupBinaryOverlay<IDualCastDataGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DualCastDataLocation!.Value.Min, _DualCastDataLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDualCastDataGetter> DualCastData => _DualCastData ?? new Group<DualCastData>(this);
        #endregion
        #region SoundCategories
        private RangeInt64? _SoundCategoriesLocation;
        private IGroupGetter<ISoundCategoryGetter>? _SoundCategories => _SoundCategoriesLocation.HasValue ? GroupBinaryOverlay<ISoundCategoryGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoundCategoriesLocation!.Value.Min, _SoundCategoriesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoundCategoryGetter> SoundCategories => _SoundCategories ?? new Group<SoundCategory>(this);
        #endregion
        #region SoundOutputModels
        private RangeInt64? _SoundOutputModelsLocation;
        private IGroupGetter<ISoundOutputModelGetter>? _SoundOutputModels => _SoundOutputModelsLocation.HasValue ? GroupBinaryOverlay<ISoundOutputModelGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoundOutputModelsLocation!.Value.Min, _SoundOutputModelsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoundOutputModelGetter> SoundOutputModels => _SoundOutputModels ?? new Group<SoundOutputModel>(this);
        #endregion
        #region CollisionLayers
        private RangeInt64? _CollisionLayersLocation;
        private IGroupGetter<ICollisionLayerGetter>? _CollisionLayers => _CollisionLayersLocation.HasValue ? GroupBinaryOverlay<ICollisionLayerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CollisionLayersLocation!.Value.Min, _CollisionLayersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ICollisionLayerGetter> CollisionLayers => _CollisionLayers ?? new Group<CollisionLayer>(this);
        #endregion
        #region Colors
        private RangeInt64? _ColorsLocation;
        private IGroupGetter<IColorRecordGetter>? _Colors => _ColorsLocation.HasValue ? GroupBinaryOverlay<IColorRecordGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ColorsLocation!.Value.Min, _ColorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IColorRecordGetter> Colors => _Colors ?? new Group<ColorRecord>(this);
        #endregion
        #region ReverbParameters
        private RangeInt64? _ReverbParametersLocation;
        private IGroupGetter<IReverbParametersGetter>? _ReverbParameters => _ReverbParametersLocation.HasValue ? GroupBinaryOverlay<IReverbParametersGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ReverbParametersLocation!.Value.Min, _ReverbParametersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IReverbParametersGetter> ReverbParameters => _ReverbParameters ?? new Group<ReverbParameters>(this);
        #endregion
        #region VolumetricLightings
        private RangeInt64? _VolumetricLightingsLocation;
        private IGroupGetter<IVolumetricLightingGetter>? _VolumetricLightings => _VolumetricLightingsLocation.HasValue ? GroupBinaryOverlay<IVolumetricLightingGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _VolumetricLightingsLocation!.Value.Min, _VolumetricLightingsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IVolumetricLightingGetter> VolumetricLightings => _VolumetricLightings ?? new Group<VolumetricLighting>(this);
        #endregion
        protected Fallout4ModBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose,
            Fallout4Release release)
        {
            this.ModKey = modKey;
            this.Fallout4Release = release;
            this._data = stream;
            this._package = new BinaryOverlayFactoryPackage(stream.MetaData);
            this._shouldDispose = shouldDispose;
        }

        public static Fallout4ModBinaryOverlay Fallout4ModFactory(
            ReadOnlyMemorySlice<byte> data,
            ModKey modKey,
            Fallout4Release release,
            IStringsFolderLookup? stringsLookup = null)
        {
            var meta = new ParsingBundle(release.ToGameRelease(), new MasterReferenceReader(modKey));
            meta.RecordInfoCache = new RecordInfoCache(() => new MutagenMemoryReadStream(data, meta));
            meta.StringsLookup = stringsLookup;
            return Fallout4ModFactory(
                release: release,
                stream: new MutagenMemoryReadStream(
                    data: data,
                    metaData: meta),
                modKey: modKey,
                shouldDispose: false);
        }

        public static Fallout4ModBinaryOverlay Fallout4ModFactory(
            ModPath path,
            Fallout4Release release,
            StringsReadParameters? stringsParam = null)
        {
            var meta = new ParsingBundle(release.ToGameRelease(), new MasterReferenceReader(path.ModKey))
            {
                RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, release.ToGameRelease()))
            };
            var stream = new MutagenBinaryReadStream(
                path: path.Path,
                metaData: meta);
            try
            {
                if (stream.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = stream.GetInt32(offset: 8);
                if (EnumExt.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                {
                    meta.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(Path.GetDirectoryName(path.Path)!, stringsParam, path.ModKey);
                }
                return Fallout4ModFactory(
                    stream: stream,
                    path.ModKey,
                    release: release,
                    shouldDispose: true);
            }
            catch (Exception)
            {
                stream.Dispose();
                throw;
            }
        }

        public static Fallout4ModBinaryOverlay Fallout4ModFactory(
            IMutagenReadStream stream,
            ModKey modKey,
            Fallout4Release release,
            bool shouldDispose)
        {
            var ret = new Fallout4ModBinaryOverlay(
                stream: stream,
                release: release,
                modKey: modKey,
                shouldDispose: shouldDispose);
            BinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }


        public ParseResult FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos);
                    _package.MetaData.MasterReferences!.SetTo(
                        this.ModHeader.MasterReferences.Select(
                            master => new MasterReference()
                            {
                                Master = master.Master,
                                FileSize = master.FileSize,
                            }));
                    return (int)Fallout4Mod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    _GameSettingsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    _KeywordsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Keywords;
                }
                case RecordTypeInts.LCRT:
                {
                    _LocationReferenceTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    _ActionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Actions;
                }
                case RecordTypeInts.TXST:
                {
                    _TextureSetsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    _GlobalsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Globals;
                }
                case RecordTypeInts.CLAS:
                {
                    _ClassesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    _FactionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Factions;
                }
                case RecordTypeInts.HDPT:
                {
                    _HeadPartsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HAIR:
                {
                    _HairsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Hairs;
                }
                case RecordTypeInts.EYES:
                {
                    _EyesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Eyes;
                }
                case RecordTypeInts.RACE:
                {
                    _RacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    _SoundMarkersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.SoundMarkers;
                }
                case RecordTypeInts.ASPC:
                {
                    _AcousticSpacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.AcousticSpaces;
                }
                case RecordTypeInts.MGEF:
                {
                    _MagicEffectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.LTEX:
                {
                    _LandscapeTexturesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.LandscapeTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    _ObjectEffectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.ObjectEffects;
                }
                case RecordTypeInts.SPEL:
                {
                    _SpellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Spells;
                }
                case RecordTypeInts.SCRL:
                {
                    _ScrollsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Scrolls;
                }
                case RecordTypeInts.ACTI:
                {
                    _ActivatorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Activators;
                }
                case RecordTypeInts.TACT:
                {
                    _TalkingActivatorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.TalkingActivators;
                }
                case RecordTypeInts.ARMO:
                {
                    _ArmorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    _BooksLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Books;
                }
                case RecordTypeInts.CONT:
                {
                    _ContainersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    _DoorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    _IngredientsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    _LightsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    _MiscItemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.MiscItems;
                }
                case RecordTypeInts.APPA:
                {
                    _AlchemicalApparatusesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.AlchemicalApparatuses;
                }
                case RecordTypeInts.STAT:
                {
                    _StaticsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Statics;
                }
                case RecordTypeInts.MSTT:
                {
                    _MoveableStaticsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.MoveableStatics;
                }
                case RecordTypeInts.GRAS:
                {
                    _GrassesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    _TreesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    _FloraeLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Florae;
                }
                case RecordTypeInts.FURN:
                {
                    _FurnitureLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    _WeaponsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    _AmmunitionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    _NpcsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Npcs;
                }
                case RecordTypeInts.LVLN:
                {
                    _LeveledNpcsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.LeveledNpcs;
                }
                case RecordTypeInts.KEYM:
                {
                    _KeysLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    _IngestiblesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Ingestibles;
                }
                case RecordTypeInts.IDLM:
                {
                    _IdleMarkersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.IdleMarkers;
                }
                case RecordTypeInts.COBJ:
                {
                    _ConstructibleObjectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.ConstructibleObjects;
                }
                case RecordTypeInts.PROJ:
                {
                    _ProjectilesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Projectiles;
                }
                case RecordTypeInts.HAZD:
                {
                    _HazardsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Hazards;
                }
                case RecordTypeInts.SLGM:
                {
                    _SoulGemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.SoulGems;
                }
                case RecordTypeInts.LVLI:
                {
                    _LeveledItemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    _WeathersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Weathers;
                }
                case RecordTypeInts.CLMT:
                {
                    _ClimatesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Climates;
                }
                case RecordTypeInts.SPGD:
                {
                    _ShaderParticleGeometriesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.ShaderParticleGeometries;
                }
                case RecordTypeInts.RFCT:
                {
                    _VisualEffectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.VisualEffects;
                }
                case RecordTypeInts.REGN:
                {
                    _RegionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Regions;
                }
                case RecordTypeInts.NAVI:
                {
                    _NavigationMeshInfoMapsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.NavigationMeshInfoMaps;
                }
                case RecordTypeInts.CELL:
                {
                    _CellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    _WorldspacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.DIAL:
                {
                    _DialogTopicsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.DialogTopics;
                }
                case RecordTypeInts.QUST:
                {
                    _QuestsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    _IdleAnimationsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    _PackagesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Packages;
                }
                case RecordTypeInts.CSTY:
                {
                    _CombatStylesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    _LoadScreensLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.LVSP:
                {
                    _LeveledSpellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.LeveledSpells;
                }
                case RecordTypeInts.ANIO:
                {
                    _AnimatedObjectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    _WatersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    _EffectShadersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.EffectShaders;
                }
                case RecordTypeInts.EXPL:
                {
                    _ExplosionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Explosions;
                }
                case RecordTypeInts.DEBR:
                {
                    _DebrisLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Debris;
                }
                case RecordTypeInts.IMGS:
                {
                    _ImageSpacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.IMAD:
                {
                    _ImageSpaceAdaptersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.ImageSpaceAdapters;
                }
                case RecordTypeInts.FLST:
                {
                    _FormListsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.FormLists;
                }
                case RecordTypeInts.PERK:
                {
                    _PerksLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Perks;
                }
                case RecordTypeInts.BPTD:
                {
                    _BodyPartsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.BodyParts;
                }
                case RecordTypeInts.ADDN:
                {
                    _AddonNodesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.AddonNodes;
                }
                case RecordTypeInts.AVIF:
                {
                    _ActorValueInformationLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.ActorValueInformation;
                }
                case RecordTypeInts.CAMS:
                {
                    _CameraShotsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.CameraShots;
                }
                case RecordTypeInts.CPTH:
                {
                    _CameraPathsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.CameraPaths;
                }
                case RecordTypeInts.VTYP:
                {
                    _VoiceTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.MATT:
                {
                    _MaterialTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.MaterialTypes;
                }
                case RecordTypeInts.IPCT:
                {
                    _ImpactsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Impacts;
                }
                case RecordTypeInts.IPDS:
                {
                    _ImpactDataSetsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.ImpactDataSets;
                }
                case RecordTypeInts.ARMA:
                {
                    _ArmorAddonsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.ArmorAddons;
                }
                case RecordTypeInts.ECZN:
                {
                    _EncounterZonesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.EncounterZones;
                }
                case RecordTypeInts.LCTN:
                {
                    _LocationsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Locations;
                }
                case RecordTypeInts.MESG:
                {
                    _MessagesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Messages;
                }
                case RecordTypeInts.DOBJ:
                {
                    _DefaultObjectManagersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.DefaultObjectManagers;
                }
                case RecordTypeInts.LGTM:
                {
                    _LightingTemplatesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.LightingTemplates;
                }
                case RecordTypeInts.MUSC:
                {
                    _MusicTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.MusicTypes;
                }
                case RecordTypeInts.FSTP:
                {
                    _FootstepsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Footsteps;
                }
                case RecordTypeInts.FSTS:
                {
                    _FootstepSetsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.FootstepSets;
                }
                case RecordTypeInts.SMBN:
                {
                    _StoryManagerBranchNodesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.StoryManagerBranchNodes;
                }
                case RecordTypeInts.SMQN:
                {
                    _StoryManagerQuestNodesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.StoryManagerQuestNodes;
                }
                case RecordTypeInts.SMEN:
                {
                    _StoryManagerEventNodesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.StoryManagerEventNodes;
                }
                case RecordTypeInts.DLBR:
                {
                    _DialogBranchesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.DialogBranches;
                }
                case RecordTypeInts.MUST:
                {
                    _MusicTracksLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.MusicTracks;
                }
                case RecordTypeInts.DLVW:
                {
                    _DialogViewsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.DialogViews;
                }
                case RecordTypeInts.WOOP:
                {
                    _WordsOfPowerLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.WordsOfPower;
                }
                case RecordTypeInts.SHOU:
                {
                    _ShoutsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Shouts;
                }
                case RecordTypeInts.EQUP:
                {
                    _EquipTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.EquipTypes;
                }
                case RecordTypeInts.RELA:
                {
                    _RelationshipsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Relationships;
                }
                case RecordTypeInts.SCEN:
                {
                    _ScenesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Scenes;
                }
                case RecordTypeInts.ASTP:
                {
                    _AssociationTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.AssociationTypes;
                }
                case RecordTypeInts.OTFT:
                {
                    _OutfitsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Outfits;
                }
                case RecordTypeInts.ARTO:
                {
                    _ArtObjectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.ArtObjects;
                }
                case RecordTypeInts.MATO:
                {
                    _MaterialObjectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.MaterialObjects;
                }
                case RecordTypeInts.MOVT:
                {
                    _MovementTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.SNDR:
                {
                    _SoundDescriptorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.SoundDescriptors;
                }
                case RecordTypeInts.DUAL:
                {
                    _DualCastDataLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.DualCastData;
                }
                case RecordTypeInts.SNCT:
                {
                    _SoundCategoriesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.SoundCategories;
                }
                case RecordTypeInts.SOPM:
                {
                    _SoundOutputModelsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.SoundOutputModels;
                }
                case RecordTypeInts.COLL:
                {
                    _CollisionLayersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.CollisionLayers;
                }
                case RecordTypeInts.CLFM:
                {
                    _ColorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.Colors;
                }
                case RecordTypeInts.REVB:
                {
                    _ReverbParametersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.ReverbParameters;
                }
                case RecordTypeInts.VOLI:
                {
                    _VolumetricLightingsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)Fallout4Mod_FieldIndex.VolumetricLightings;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            Fallout4ModMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFallout4ModGetter rhs)) return false;
            return ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IFallout4ModGetter? obj)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => Fallout4ModMixIn.GetEqualsMask(this, (IFallout4ModGetter)rhs, include);
    }

}
#endregion

#endregion

