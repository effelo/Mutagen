/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class EffectData :
        IEffectData,
        ILoquiObjectSetter<EffectData>,
        IEquatable<IEffectDataGetter>
    {
        #region Ctor
        public EffectData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Magnitude
        public Single Magnitude { get; set; } = default;
        #endregion
        #region Area
        public Int32 Area { get; set; } = default;
        #endregion
        #region Duration
        public Int32 Duration { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            EffectDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IEffectDataGetter rhs)) return false;
            return ((EffectDataCommon)((IEffectDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IEffectDataGetter? obj)
        {
            return ((EffectDataCommon)((IEffectDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((EffectDataCommon)((IEffectDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Magnitude = initialValue;
                this.Area = initialValue;
                this.Duration = initialValue;
            }

            public Mask(
                TItem Magnitude,
                TItem Area,
                TItem Duration)
            {
                this.Magnitude = Magnitude;
                this.Area = Area;
                this.Duration = Duration;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Magnitude;
            public TItem Area;
            public TItem Duration;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Magnitude, rhs.Magnitude)) return false;
                if (!object.Equals(this.Area, rhs.Area)) return false;
                if (!object.Equals(this.Duration, rhs.Duration)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Magnitude);
                hash.Add(this.Area);
                hash.Add(this.Duration);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Magnitude)) return false;
                if (!eval(this.Area)) return false;
                if (!eval(this.Duration)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Magnitude)) return true;
                if (eval(this.Area)) return true;
                if (eval(this.Duration)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new EffectData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Magnitude = eval(this.Magnitude);
                obj.Area = eval(this.Area);
                obj.Duration = eval(this.Duration);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(EffectData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, EffectData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(EffectData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Magnitude ?? true)
                    {
                        fg.AppendItem(Magnitude, "Magnitude");
                    }
                    if (printMask?.Area ?? true)
                    {
                        fg.AppendItem(Area, "Area");
                    }
                    if (printMask?.Duration ?? true)
                    {
                        fg.AppendItem(Duration, "Duration");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Magnitude;
            public Exception? Area;
            public Exception? Duration;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                EffectData_FieldIndex enu = (EffectData_FieldIndex)index;
                switch (enu)
                {
                    case EffectData_FieldIndex.Magnitude:
                        return Magnitude;
                    case EffectData_FieldIndex.Area:
                        return Area;
                    case EffectData_FieldIndex.Duration:
                        return Duration;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                EffectData_FieldIndex enu = (EffectData_FieldIndex)index;
                switch (enu)
                {
                    case EffectData_FieldIndex.Magnitude:
                        this.Magnitude = ex;
                        break;
                    case EffectData_FieldIndex.Area:
                        this.Area = ex;
                        break;
                    case EffectData_FieldIndex.Duration:
                        this.Duration = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                EffectData_FieldIndex enu = (EffectData_FieldIndex)index;
                switch (enu)
                {
                    case EffectData_FieldIndex.Magnitude:
                        this.Magnitude = (Exception?)obj;
                        break;
                    case EffectData_FieldIndex.Area:
                        this.Area = (Exception?)obj;
                        break;
                    case EffectData_FieldIndex.Duration:
                        this.Duration = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Magnitude != null) return true;
                if (Area != null) return true;
                if (Duration != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Magnitude, "Magnitude");
                fg.AppendItem(Area, "Area");
                fg.AppendItem(Duration, "Duration");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Magnitude = this.Magnitude.Combine(rhs.Magnitude);
                ret.Area = this.Area.Combine(rhs.Area);
                ret.Duration = this.Duration.Combine(rhs.Duration);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Magnitude;
            public bool Area;
            public bool Duration;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Magnitude = defaultOn;
                this.Area = defaultOn;
                this.Duration = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Magnitude, null));
                ret.Add((Area, null));
                ret.Add((Duration, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = EffectData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => EffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static EffectData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new EffectData();
            ((EffectDataSetterCommon)((IEffectDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out EffectData item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((EffectDataSetterCommon)((IEffectDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static EffectData GetNew()
        {
            return new EffectData();
        }

    }
    #endregion

    #region Interface
    public partial interface IEffectData :
        IEffectDataGetter,
        ILoquiObjectSetter<IEffectData>
    {
        new Single Magnitude { get; set; }
        new Int32 Area { get; set; }
        new Int32 Duration { get; set; }
    }

    public partial interface IEffectDataGetter :
        ILoquiObject,
        ILoquiObject<IEffectDataGetter>,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => EffectData_Registration.Instance;
        Single Magnitude { get; }
        Int32 Area { get; }
        Int32 Duration { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class EffectDataMixIn
    {
        public static void Clear(this IEffectData item)
        {
            ((EffectDataSetterCommon)((IEffectDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static EffectData.Mask<bool> GetEqualsMask(
            this IEffectDataGetter item,
            IEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EffectDataCommon)((IEffectDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IEffectDataGetter item,
            string? name = null,
            EffectData.Mask<bool>? printMask = null)
        {
            return ((EffectDataCommon)((IEffectDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IEffectDataGetter item,
            FileGeneration fg,
            string? name = null,
            EffectData.Mask<bool>? printMask = null)
        {
            ((EffectDataCommon)((IEffectDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IEffectDataGetter item,
            IEffectDataGetter rhs)
        {
            return ((EffectDataCommon)((IEffectDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IEffectData lhs,
            IEffectDataGetter rhs)
        {
            ((EffectDataSetterTranslationCommon)((IEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IEffectData lhs,
            IEffectDataGetter rhs,
            EffectData.TranslationMask? copyMask = null)
        {
            ((EffectDataSetterTranslationCommon)((IEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IEffectData lhs,
            IEffectDataGetter rhs,
            out EffectData.ErrorMask errorMask,
            EffectData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((EffectDataSetterTranslationCommon)((IEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = EffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IEffectData lhs,
            IEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((EffectDataSetterTranslationCommon)((IEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static EffectData DeepCopy(
            this IEffectDataGetter item,
            EffectData.TranslationMask? copyMask = null)
        {
            return ((EffectDataSetterTranslationCommon)((IEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static EffectData DeepCopy(
            this IEffectDataGetter item,
            out EffectData.ErrorMask errorMask,
            EffectData.TranslationMask? copyMask = null)
        {
            return ((EffectDataSetterTranslationCommon)((IEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static EffectData DeepCopy(
            this IEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((EffectDataSetterTranslationCommon)((IEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IEffectData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EffectDataSetterCommon)((IEffectDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum EffectData_FieldIndex
    {
        Magnitude = 0,
        Area = 1,
        Duration = 2,
    }
    #endregion

    #region Registration
    public partial class EffectData_Registration : ILoquiRegistration
    {
        public static readonly EffectData_Registration Instance = new EffectData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 135,
            version: 0);

        public const string GUID = "09ebdd2c-420c-40fa-bd21-a1977c94208d";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(EffectData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(EffectData.ErrorMask);

        public static readonly Type ClassType = typeof(EffectData);

        public static readonly Type GetterType = typeof(IEffectDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IEffectData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.EffectData";

        public const string Name = "EffectData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.EFIT;
        public static readonly Type BinaryWriteTranslation = typeof(EffectDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class EffectDataSetterCommon
    {
        public static readonly EffectDataSetterCommon Instance = new EffectDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IEffectData item)
        {
            ClearPartial();
            item.Magnitude = default;
            item.Area = default;
            item.Duration = default;
        }
        
        #region Mutagen
        public void RemapLinks(IEffectData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IEffectData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.EFIT)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: EffectDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class EffectDataCommon
    {
        public static readonly EffectDataCommon Instance = new EffectDataCommon();

        public EffectData.Mask<bool> GetEqualsMask(
            IEffectDataGetter item,
            IEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new EffectData.Mask<bool>(false);
            ((EffectDataCommon)((IEffectDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IEffectDataGetter item,
            IEffectDataGetter rhs,
            EffectData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Magnitude = item.Magnitude.EqualsWithin(rhs.Magnitude);
            ret.Area = item.Area == rhs.Area;
            ret.Duration = item.Duration == rhs.Duration;
        }
        
        public string ToString(
            IEffectDataGetter item,
            string? name = null,
            EffectData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IEffectDataGetter item,
            FileGeneration fg,
            string? name = null,
            EffectData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"EffectData =>");
            }
            else
            {
                fg.AppendLine($"{name} (EffectData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IEffectDataGetter item,
            FileGeneration fg,
            EffectData.Mask<bool>? printMask = null)
        {
            if (printMask?.Magnitude ?? true)
            {
                fg.AppendItem(item.Magnitude, "Magnitude");
            }
            if (printMask?.Area ?? true)
            {
                fg.AppendItem(item.Area, "Area");
            }
            if (printMask?.Duration ?? true)
            {
                fg.AppendItem(item.Duration, "Duration");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IEffectDataGetter? lhs,
            IEffectDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Magnitude.EqualsWithin(rhs.Magnitude)) return false;
            if (lhs.Area != rhs.Area) return false;
            if (lhs.Duration != rhs.Duration) return false;
            return true;
        }
        
        public virtual int GetHashCode(IEffectDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Magnitude);
            hash.Add(item.Area);
            hash.Add(item.Duration);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return EffectData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IEffectDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class EffectDataSetterTranslationCommon
    {
        public static readonly EffectDataSetterTranslationCommon Instance = new EffectDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IEffectData item,
            IEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)EffectData_FieldIndex.Magnitude) ?? true))
            {
                item.Magnitude = rhs.Magnitude;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectData_FieldIndex.Area) ?? true))
            {
                item.Area = rhs.Area;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectData_FieldIndex.Duration) ?? true))
            {
                item.Duration = rhs.Duration;
            }
        }
        
        #endregion
        
        public EffectData DeepCopy(
            IEffectDataGetter item,
            EffectData.TranslationMask? copyMask = null)
        {
            EffectData ret = (EffectData)((EffectDataCommon)((IEffectDataGetter)item).CommonInstance()!).GetNew();
            ((EffectDataSetterTranslationCommon)((IEffectDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public EffectData DeepCopy(
            IEffectDataGetter item,
            out EffectData.ErrorMask errorMask,
            EffectData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            EffectData ret = (EffectData)((EffectDataCommon)((IEffectDataGetter)item).CommonInstance()!).GetNew();
            ((EffectDataSetterTranslationCommon)((IEffectDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = EffectData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public EffectData DeepCopy(
            IEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            EffectData ret = (EffectData)((EffectDataCommon)((IEffectDataGetter)item).CommonInstance()!).GetNew();
            ((EffectDataSetterTranslationCommon)((IEffectDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class EffectData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectData_Registration.Instance;
        public static EffectData_Registration Registration => EffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => EffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return EffectDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => EffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IEffectDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class EffectDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static EffectDataBinaryWriteTranslation Instance = new EffectDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IEffectDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Magnitude);
            writer.Write(item.Area);
            writer.Write(item.Duration);
        }

        public void Write(
            MutagenWriter writer,
            IEffectDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.EFIT),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IEffectDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class EffectDataBinaryCreateTranslation
    {
        public readonly static EffectDataBinaryCreateTranslation Instance = new EffectDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IEffectData item,
            MutagenFrame frame)
        {
            item.Magnitude = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Area = frame.ReadInt32();
            item.Duration = frame.ReadInt32();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class EffectDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IEffectDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EffectDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class EffectDataBinaryOverlay :
        BinaryOverlay,
        IEffectDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectData_Registration.Instance;
        public static EffectData_Registration Registration => EffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => EffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => EffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IEffectDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => EffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Single Magnitude => _data.Slice(0x0, 0x4).Float();
        public Int32 Area => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x4, 0x4));
        public Int32 Duration => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x8, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected EffectDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static EffectDataBinaryOverlay EffectDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new EffectDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static EffectDataBinaryOverlay EffectDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return EffectDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            EffectDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IEffectDataGetter rhs)) return false;
            return ((EffectDataCommon)((IEffectDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IEffectDataGetter? obj)
        {
            return ((EffectDataCommon)((IEffectDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((EffectDataCommon)((IEffectDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

