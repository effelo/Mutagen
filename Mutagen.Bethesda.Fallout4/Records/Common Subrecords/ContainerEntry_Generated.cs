/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ContainerEntry :
        IContainerEntry,
        ILoquiObjectSetter<ContainerEntry>,
        IEquatable<IContainerEntryGetter>
    {
        #region Ctor
        public ContainerEntry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Item
        public ContainerItem Item { get; set; } = new ContainerItem();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IContainerItemGetter IContainerEntryGetter.Item => Item;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtraData? _Data;
        public ExtraData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExtraDataGetter? IContainerEntryGetter.Data => this.Data;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ContainerEntryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IContainerEntryGetter rhs)) return false;
            return ((ContainerEntryCommon)((IContainerEntryGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IContainerEntryGetter? obj)
        {
            return ((ContainerEntryCommon)((IContainerEntryGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ContainerEntryCommon)((IContainerEntryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Item = new MaskItem<TItem, ContainerItem.Mask<TItem>?>(initialValue, new ContainerItem.Mask<TItem>(initialValue));
                this.Data = new MaskItem<TItem, ExtraData.Mask<TItem>?>(initialValue, new ExtraData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Item,
                TItem Data)
            {
                this.Item = new MaskItem<TItem, ContainerItem.Mask<TItem>?>(Item, new ContainerItem.Mask<TItem>(Item));
                this.Data = new MaskItem<TItem, ExtraData.Mask<TItem>?>(Data, new ExtraData.Mask<TItem>(Data));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ContainerItem.Mask<TItem>?>? Item { get; set; }
            public MaskItem<TItem, ExtraData.Mask<TItem>?>? Data { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Item, rhs.Item)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Item);
                hash.Add(this.Data);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Item != null)
                {
                    if (!eval(this.Item.Overall)) return false;
                    if (this.Item.Specific != null && !this.Item.Specific.All(eval)) return false;
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Item != null)
                {
                    if (eval(this.Item.Overall)) return true;
                    if (this.Item.Specific != null && this.Item.Specific.Any(eval)) return true;
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ContainerEntry.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Item = this.Item == null ? null : new MaskItem<R, ContainerItem.Mask<R>?>(eval(this.Item.Overall), this.Item.Specific?.Translate(eval));
                obj.Data = this.Data == null ? null : new MaskItem<R, ExtraData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ContainerEntry.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ContainerEntry.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ContainerEntry.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Item?.Overall ?? true)
                    {
                        Item?.ToString(fg);
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, ContainerItem.ErrorMask?>? Item;
            public MaskItem<Exception?, ExtraData.ErrorMask?>? Data;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ContainerEntry_FieldIndex enu = (ContainerEntry_FieldIndex)index;
                switch (enu)
                {
                    case ContainerEntry_FieldIndex.Item:
                        return Item;
                    case ContainerEntry_FieldIndex.Data:
                        return Data;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ContainerEntry_FieldIndex enu = (ContainerEntry_FieldIndex)index;
                switch (enu)
                {
                    case ContainerEntry_FieldIndex.Item:
                        this.Item = new MaskItem<Exception?, ContainerItem.ErrorMask?>(ex, null);
                        break;
                    case ContainerEntry_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, ExtraData.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ContainerEntry_FieldIndex enu = (ContainerEntry_FieldIndex)index;
                switch (enu)
                {
                    case ContainerEntry_FieldIndex.Item:
                        this.Item = (MaskItem<Exception?, ContainerItem.ErrorMask?>?)obj;
                        break;
                    case ContainerEntry_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, ExtraData.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Item != null) return true;
                if (Data != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                Item?.ToString(fg);
                Data?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Item = this.Item.Combine(rhs.Item, (l, r) => l.Combine(r));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public ContainerItem.TranslationMask? Item;
            public ExtraData.TranslationMask? Data;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Item != null ? Item.OnOverall : DefaultOn, Item?.GetCrystal()));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ContainerEntry_Registration.TriggeringRecordType;
        public IEnumerable<FormLinkInformation> ContainedFormLinks => ContainerEntryCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ContainerEntrySetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ContainerEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ContainerEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static ContainerEntry CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ContainerEntry();
            ((ContainerEntrySetterCommon)((IContainerEntryGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ContainerEntry item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ContainerEntrySetterCommon)((IContainerEntryGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ContainerEntry GetNew()
        {
            return new ContainerEntry();
        }

    }
    #endregion

    #region Interface
    public partial interface IContainerEntry :
        IContainerEntryGetter,
        ILoquiObjectSetter<IContainerEntry>,
        IFormLinkContainer
    {
        new ContainerItem Item { get; set; }
        new ExtraData? Data { get; set; }
    }

    public partial interface IContainerEntryGetter :
        ILoquiObject,
        ILoquiObject<IContainerEntryGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ContainerEntry_Registration.Instance;
        IContainerItemGetter Item { get; }
        IExtraDataGetter? Data { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ContainerEntryMixIn
    {
        public static void Clear(this IContainerEntry item)
        {
            ((ContainerEntrySetterCommon)((IContainerEntryGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ContainerEntry.Mask<bool> GetEqualsMask(
            this IContainerEntryGetter item,
            IContainerEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ContainerEntryCommon)((IContainerEntryGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IContainerEntryGetter item,
            string? name = null,
            ContainerEntry.Mask<bool>? printMask = null)
        {
            return ((ContainerEntryCommon)((IContainerEntryGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IContainerEntryGetter item,
            FileGeneration fg,
            string? name = null,
            ContainerEntry.Mask<bool>? printMask = null)
        {
            ((ContainerEntryCommon)((IContainerEntryGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IContainerEntryGetter item,
            IContainerEntryGetter rhs)
        {
            return ((ContainerEntryCommon)((IContainerEntryGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IContainerEntry lhs,
            IContainerEntryGetter rhs)
        {
            ((ContainerEntrySetterTranslationCommon)((IContainerEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IContainerEntry lhs,
            IContainerEntryGetter rhs,
            ContainerEntry.TranslationMask? copyMask = null)
        {
            ((ContainerEntrySetterTranslationCommon)((IContainerEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IContainerEntry lhs,
            IContainerEntryGetter rhs,
            out ContainerEntry.ErrorMask errorMask,
            ContainerEntry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ContainerEntrySetterTranslationCommon)((IContainerEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ContainerEntry.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IContainerEntry lhs,
            IContainerEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ContainerEntrySetterTranslationCommon)((IContainerEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ContainerEntry DeepCopy(
            this IContainerEntryGetter item,
            ContainerEntry.TranslationMask? copyMask = null)
        {
            return ((ContainerEntrySetterTranslationCommon)((IContainerEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ContainerEntry DeepCopy(
            this IContainerEntryGetter item,
            out ContainerEntry.ErrorMask errorMask,
            ContainerEntry.TranslationMask? copyMask = null)
        {
            return ((ContainerEntrySetterTranslationCommon)((IContainerEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ContainerEntry DeepCopy(
            this IContainerEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ContainerEntrySetterTranslationCommon)((IContainerEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IContainerEntry item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ContainerEntrySetterCommon)((IContainerEntryGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ContainerEntry_FieldIndex
    {
        Item = 0,
        Data = 1,
    }
    #endregion

    #region Registration
    public partial class ContainerEntry_Registration : ILoquiRegistration
    {
        public static readonly ContainerEntry_Registration Instance = new ContainerEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 171,
            version: 0);

        public const string GUID = "012b2a3c-ad31-4b45-a5ca-f54760049575";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(ContainerEntry.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ContainerEntry.ErrorMask);

        public static readonly Type ClassType = typeof(ContainerEntry);

        public static readonly Type GetterType = typeof(IContainerEntryGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IContainerEntry);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ContainerEntry";

        public const string Name = "ContainerEntry";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CNTO;
        public static readonly Type BinaryWriteTranslation = typeof(ContainerEntryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ContainerEntrySetterCommon
    {
        public static readonly ContainerEntrySetterCommon Instance = new ContainerEntrySetterCommon();

        partial void ClearPartial();
        
        public void Clear(IContainerEntry item)
        {
            ClearPartial();
            item.Item.Clear();
            item.Data = null;
        }
        
        #region Mutagen
        public void RemapLinks(IContainerEntry obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Item.RemapLinks(mapping);
            obj.Data?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IContainerEntry item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ContainerEntryBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ContainerEntryBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ContainerEntryCommon
    {
        public static readonly ContainerEntryCommon Instance = new ContainerEntryCommon();

        public ContainerEntry.Mask<bool> GetEqualsMask(
            IContainerEntryGetter item,
            IContainerEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ContainerEntry.Mask<bool>(false);
            ((ContainerEntryCommon)((IContainerEntryGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IContainerEntryGetter item,
            IContainerEntryGetter rhs,
            ContainerEntry.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Item = MaskItemExt.Factory(item.Item.GetEqualsMask(rhs.Item, include), include);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IContainerEntryGetter item,
            string? name = null,
            ContainerEntry.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IContainerEntryGetter item,
            FileGeneration fg,
            string? name = null,
            ContainerEntry.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ContainerEntry =>");
            }
            else
            {
                fg.AppendLine($"{name} (ContainerEntry) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IContainerEntryGetter item,
            FileGeneration fg,
            ContainerEntry.Mask<bool>? printMask = null)
        {
            if (printMask?.Item?.Overall ?? true)
            {
                item.Item?.ToString(fg, "Item");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IContainerEntryGetter? lhs,
            IContainerEntryGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.Item, rhs.Item)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IContainerEntryGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Item);
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ContainerEntry.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IContainerEntryGetter obj)
        {
            foreach (var item in obj.Item.ContainedFormLinks)
            {
                yield return item;
            }
            if (obj.Data is IFormLinkContainerGetter DatalinkCont)
            {
                foreach (var item in DatalinkCont.ContainedFormLinks)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ContainerEntrySetterTranslationCommon
    {
        public static readonly ContainerEntrySetterTranslationCommon Instance = new ContainerEntrySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IContainerEntry item,
            IContainerEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ContainerEntry_FieldIndex.Item) ?? true))
            {
                errorMask?.PushIndex((int)ContainerEntry_FieldIndex.Item);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ContainerEntry_FieldIndex.Item) ?? true))
                    {
                        item.Item = rhs.Item.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)ContainerEntry_FieldIndex.Item),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ContainerEntry_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)ContainerEntry_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ContainerEntry_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public ContainerEntry DeepCopy(
            IContainerEntryGetter item,
            ContainerEntry.TranslationMask? copyMask = null)
        {
            ContainerEntry ret = (ContainerEntry)((ContainerEntryCommon)((IContainerEntryGetter)item).CommonInstance()!).GetNew();
            ((ContainerEntrySetterTranslationCommon)((IContainerEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ContainerEntry DeepCopy(
            IContainerEntryGetter item,
            out ContainerEntry.ErrorMask errorMask,
            ContainerEntry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ContainerEntry ret = (ContainerEntry)((ContainerEntryCommon)((IContainerEntryGetter)item).CommonInstance()!).GetNew();
            ((ContainerEntrySetterTranslationCommon)((IContainerEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ContainerEntry.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ContainerEntry DeepCopy(
            IContainerEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ContainerEntry ret = (ContainerEntry)((ContainerEntryCommon)((IContainerEntryGetter)item).CommonInstance()!).GetNew();
            ((ContainerEntrySetterTranslationCommon)((IContainerEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ContainerEntry
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ContainerEntry_Registration.Instance;
        public static ContainerEntry_Registration Registration => ContainerEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ContainerEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ContainerEntrySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ContainerEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IContainerEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IContainerEntryGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IContainerEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ContainerEntryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ContainerEntryBinaryWriteTranslation Instance = new ContainerEntryBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IContainerEntryGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            var ItemItem = item.Item;
            ((ContainerItemBinaryWriteTranslation)((IBinaryItem)ItemItem).BinaryWriteTranslator).Write(
                item: ItemItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Data.TryGet(out var DataItem))
            {
                ((ExtraDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IContainerEntryGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IContainerEntryGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ContainerEntryBinaryCreateTranslation
    {
        public readonly static ContainerEntryBinaryCreateTranslation Instance = new ContainerEntryBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IContainerEntry item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IContainerEntry item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CNTO:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ContainerEntry_FieldIndex.Item) return ParseResult.Stop;
                    item.Item = Mutagen.Bethesda.Fallout4.ContainerItem.CreateFromBinary(frame: frame);
                    return (int)ContainerEntry_FieldIndex.Item;
                }
                case RecordTypeInts.COED:
                {
                    item.Data = Mutagen.Bethesda.Fallout4.ExtraData.CreateFromBinary(frame: frame);
                    return (int)ContainerEntry_FieldIndex.Data;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ContainerEntryBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IContainerEntryGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ContainerEntryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ContainerEntryBinaryOverlay :
        BinaryOverlay,
        IContainerEntryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ContainerEntry_Registration.Instance;
        public static ContainerEntry_Registration Registration => ContainerEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ContainerEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ContainerEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IContainerEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IContainerEntryGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IContainerEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => ContainerEntryCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ContainerEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ContainerEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Item
        private RangeInt32? _ItemLocation;
        private IContainerItemGetter? _Item => _ItemLocation.HasValue ? ContainerItemBinaryOverlay.ContainerItemFactory(new OverlayStream(_data.Slice(_ItemLocation!.Value.Min), _package), _package) : default;
        public IContainerItemGetter Item => _Item ?? new ContainerItem();
        #endregion
        #region Data
        private RangeInt32? _DataLocation;
        public IExtraDataGetter? Data => _DataLocation.HasValue ? ExtraDataBinaryOverlay.ExtraDataFactory(new OverlayStream(_data.Slice(_DataLocation!.Value.Min), _package), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ContainerEntryBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ContainerEntryBinaryOverlay ContainerEntryFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ContainerEntryBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ContainerEntryBinaryOverlay ContainerEntryFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ContainerEntryFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CNTO:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)ContainerEntry_FieldIndex.Item) return ParseResult.Stop;
                    _ItemLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)ContainerEntry_FieldIndex.Item;
                }
                case RecordTypeInts.COED:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)ContainerEntry_FieldIndex.Data;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ContainerEntryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IContainerEntryGetter rhs)) return false;
            return ((ContainerEntryCommon)((IContainerEntryGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IContainerEntryGetter? obj)
        {
            return ((ContainerEntryCommon)((IContainerEntryGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ContainerEntryCommon)((IContainerEntryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

