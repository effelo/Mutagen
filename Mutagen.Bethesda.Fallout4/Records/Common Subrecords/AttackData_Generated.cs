/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class AttackData :
        IAttackData,
        ILoquiObjectSetter<AttackData>,
        IEquatable<IAttackDataGetter>
    {
        #region Ctor
        public AttackData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DamageMult
        public Single DamageMult { get; set; } = default;
        #endregion
        #region Chance
        public Single Chance { get; set; } = default;
        #endregion
        #region Spell
        public FormLink<IASpellGetter> Spell { get; set; } = new FormLink<IASpellGetter>();
        #endregion
        #region Flags
        public AttackData.Flag Flags { get; set; } = default;
        #endregion
        #region AttackAngle
        public Single AttackAngle { get; set; } = default;
        #endregion
        #region StrikeAngle
        public Single StrikeAngle { get; set; } = default;
        #endregion
        #region Stagger
        public Single Stagger { get; set; } = default;
        #endregion
        #region AttackType
        public FormLink<IKeywordGetter> AttackType { get; set; } = new FormLink<IKeywordGetter>();
        #endregion
        #region Knockdown
        public Single Knockdown { get; set; } = default;
        #endregion
        #region RecoveryTime
        public Single RecoveryTime { get; set; } = default;
        #endregion
        #region StaminaMult
        public Single StaminaMult { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AttackDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAttackDataGetter rhs)) return false;
            return ((AttackDataCommon)((IAttackDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAttackDataGetter? obj)
        {
            return ((AttackDataCommon)((IAttackDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AttackDataCommon)((IAttackDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.DamageMult = initialValue;
                this.Chance = initialValue;
                this.Spell = initialValue;
                this.Flags = initialValue;
                this.AttackAngle = initialValue;
                this.StrikeAngle = initialValue;
                this.Stagger = initialValue;
                this.AttackType = initialValue;
                this.Knockdown = initialValue;
                this.RecoveryTime = initialValue;
                this.StaminaMult = initialValue;
            }

            public Mask(
                TItem DamageMult,
                TItem Chance,
                TItem Spell,
                TItem Flags,
                TItem AttackAngle,
                TItem StrikeAngle,
                TItem Stagger,
                TItem AttackType,
                TItem Knockdown,
                TItem RecoveryTime,
                TItem StaminaMult)
            {
                this.DamageMult = DamageMult;
                this.Chance = Chance;
                this.Spell = Spell;
                this.Flags = Flags;
                this.AttackAngle = AttackAngle;
                this.StrikeAngle = StrikeAngle;
                this.Stagger = Stagger;
                this.AttackType = AttackType;
                this.Knockdown = Knockdown;
                this.RecoveryTime = RecoveryTime;
                this.StaminaMult = StaminaMult;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem DamageMult;
            public TItem Chance;
            public TItem Spell;
            public TItem Flags;
            public TItem AttackAngle;
            public TItem StrikeAngle;
            public TItem Stagger;
            public TItem AttackType;
            public TItem Knockdown;
            public TItem RecoveryTime;
            public TItem StaminaMult;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.DamageMult, rhs.DamageMult)) return false;
                if (!object.Equals(this.Chance, rhs.Chance)) return false;
                if (!object.Equals(this.Spell, rhs.Spell)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.AttackAngle, rhs.AttackAngle)) return false;
                if (!object.Equals(this.StrikeAngle, rhs.StrikeAngle)) return false;
                if (!object.Equals(this.Stagger, rhs.Stagger)) return false;
                if (!object.Equals(this.AttackType, rhs.AttackType)) return false;
                if (!object.Equals(this.Knockdown, rhs.Knockdown)) return false;
                if (!object.Equals(this.RecoveryTime, rhs.RecoveryTime)) return false;
                if (!object.Equals(this.StaminaMult, rhs.StaminaMult)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.DamageMult);
                hash.Add(this.Chance);
                hash.Add(this.Spell);
                hash.Add(this.Flags);
                hash.Add(this.AttackAngle);
                hash.Add(this.StrikeAngle);
                hash.Add(this.Stagger);
                hash.Add(this.AttackType);
                hash.Add(this.Knockdown);
                hash.Add(this.RecoveryTime);
                hash.Add(this.StaminaMult);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.DamageMult)) return false;
                if (!eval(this.Chance)) return false;
                if (!eval(this.Spell)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.AttackAngle)) return false;
                if (!eval(this.StrikeAngle)) return false;
                if (!eval(this.Stagger)) return false;
                if (!eval(this.AttackType)) return false;
                if (!eval(this.Knockdown)) return false;
                if (!eval(this.RecoveryTime)) return false;
                if (!eval(this.StaminaMult)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.DamageMult)) return true;
                if (eval(this.Chance)) return true;
                if (eval(this.Spell)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.AttackAngle)) return true;
                if (eval(this.StrikeAngle)) return true;
                if (eval(this.Stagger)) return true;
                if (eval(this.AttackType)) return true;
                if (eval(this.Knockdown)) return true;
                if (eval(this.RecoveryTime)) return true;
                if (eval(this.StaminaMult)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AttackData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.DamageMult = eval(this.DamageMult);
                obj.Chance = eval(this.Chance);
                obj.Spell = eval(this.Spell);
                obj.Flags = eval(this.Flags);
                obj.AttackAngle = eval(this.AttackAngle);
                obj.StrikeAngle = eval(this.StrikeAngle);
                obj.Stagger = eval(this.Stagger);
                obj.AttackType = eval(this.AttackType);
                obj.Knockdown = eval(this.Knockdown);
                obj.RecoveryTime = eval(this.RecoveryTime);
                obj.StaminaMult = eval(this.StaminaMult);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AttackData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AttackData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AttackData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.DamageMult ?? true)
                    {
                        fg.AppendItem(DamageMult, "DamageMult");
                    }
                    if (printMask?.Chance ?? true)
                    {
                        fg.AppendItem(Chance, "Chance");
                    }
                    if (printMask?.Spell ?? true)
                    {
                        fg.AppendItem(Spell, "Spell");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.AttackAngle ?? true)
                    {
                        fg.AppendItem(AttackAngle, "AttackAngle");
                    }
                    if (printMask?.StrikeAngle ?? true)
                    {
                        fg.AppendItem(StrikeAngle, "StrikeAngle");
                    }
                    if (printMask?.Stagger ?? true)
                    {
                        fg.AppendItem(Stagger, "Stagger");
                    }
                    if (printMask?.AttackType ?? true)
                    {
                        fg.AppendItem(AttackType, "AttackType");
                    }
                    if (printMask?.Knockdown ?? true)
                    {
                        fg.AppendItem(Knockdown, "Knockdown");
                    }
                    if (printMask?.RecoveryTime ?? true)
                    {
                        fg.AppendItem(RecoveryTime, "RecoveryTime");
                    }
                    if (printMask?.StaminaMult ?? true)
                    {
                        fg.AppendItem(StaminaMult, "StaminaMult");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? DamageMult;
            public Exception? Chance;
            public Exception? Spell;
            public Exception? Flags;
            public Exception? AttackAngle;
            public Exception? StrikeAngle;
            public Exception? Stagger;
            public Exception? AttackType;
            public Exception? Knockdown;
            public Exception? RecoveryTime;
            public Exception? StaminaMult;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                AttackData_FieldIndex enu = (AttackData_FieldIndex)index;
                switch (enu)
                {
                    case AttackData_FieldIndex.DamageMult:
                        return DamageMult;
                    case AttackData_FieldIndex.Chance:
                        return Chance;
                    case AttackData_FieldIndex.Spell:
                        return Spell;
                    case AttackData_FieldIndex.Flags:
                        return Flags;
                    case AttackData_FieldIndex.AttackAngle:
                        return AttackAngle;
                    case AttackData_FieldIndex.StrikeAngle:
                        return StrikeAngle;
                    case AttackData_FieldIndex.Stagger:
                        return Stagger;
                    case AttackData_FieldIndex.AttackType:
                        return AttackType;
                    case AttackData_FieldIndex.Knockdown:
                        return Knockdown;
                    case AttackData_FieldIndex.RecoveryTime:
                        return RecoveryTime;
                    case AttackData_FieldIndex.StaminaMult:
                        return StaminaMult;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                AttackData_FieldIndex enu = (AttackData_FieldIndex)index;
                switch (enu)
                {
                    case AttackData_FieldIndex.DamageMult:
                        this.DamageMult = ex;
                        break;
                    case AttackData_FieldIndex.Chance:
                        this.Chance = ex;
                        break;
                    case AttackData_FieldIndex.Spell:
                        this.Spell = ex;
                        break;
                    case AttackData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case AttackData_FieldIndex.AttackAngle:
                        this.AttackAngle = ex;
                        break;
                    case AttackData_FieldIndex.StrikeAngle:
                        this.StrikeAngle = ex;
                        break;
                    case AttackData_FieldIndex.Stagger:
                        this.Stagger = ex;
                        break;
                    case AttackData_FieldIndex.AttackType:
                        this.AttackType = ex;
                        break;
                    case AttackData_FieldIndex.Knockdown:
                        this.Knockdown = ex;
                        break;
                    case AttackData_FieldIndex.RecoveryTime:
                        this.RecoveryTime = ex;
                        break;
                    case AttackData_FieldIndex.StaminaMult:
                        this.StaminaMult = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                AttackData_FieldIndex enu = (AttackData_FieldIndex)index;
                switch (enu)
                {
                    case AttackData_FieldIndex.DamageMult:
                        this.DamageMult = (Exception?)obj;
                        break;
                    case AttackData_FieldIndex.Chance:
                        this.Chance = (Exception?)obj;
                        break;
                    case AttackData_FieldIndex.Spell:
                        this.Spell = (Exception?)obj;
                        break;
                    case AttackData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case AttackData_FieldIndex.AttackAngle:
                        this.AttackAngle = (Exception?)obj;
                        break;
                    case AttackData_FieldIndex.StrikeAngle:
                        this.StrikeAngle = (Exception?)obj;
                        break;
                    case AttackData_FieldIndex.Stagger:
                        this.Stagger = (Exception?)obj;
                        break;
                    case AttackData_FieldIndex.AttackType:
                        this.AttackType = (Exception?)obj;
                        break;
                    case AttackData_FieldIndex.Knockdown:
                        this.Knockdown = (Exception?)obj;
                        break;
                    case AttackData_FieldIndex.RecoveryTime:
                        this.RecoveryTime = (Exception?)obj;
                        break;
                    case AttackData_FieldIndex.StaminaMult:
                        this.StaminaMult = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (DamageMult != null) return true;
                if (Chance != null) return true;
                if (Spell != null) return true;
                if (Flags != null) return true;
                if (AttackAngle != null) return true;
                if (StrikeAngle != null) return true;
                if (Stagger != null) return true;
                if (AttackType != null) return true;
                if (Knockdown != null) return true;
                if (RecoveryTime != null) return true;
                if (StaminaMult != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(DamageMult, "DamageMult");
                fg.AppendItem(Chance, "Chance");
                fg.AppendItem(Spell, "Spell");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(AttackAngle, "AttackAngle");
                fg.AppendItem(StrikeAngle, "StrikeAngle");
                fg.AppendItem(Stagger, "Stagger");
                fg.AppendItem(AttackType, "AttackType");
                fg.AppendItem(Knockdown, "Knockdown");
                fg.AppendItem(RecoveryTime, "RecoveryTime");
                fg.AppendItem(StaminaMult, "StaminaMult");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.DamageMult = this.DamageMult.Combine(rhs.DamageMult);
                ret.Chance = this.Chance.Combine(rhs.Chance);
                ret.Spell = this.Spell.Combine(rhs.Spell);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.AttackAngle = this.AttackAngle.Combine(rhs.AttackAngle);
                ret.StrikeAngle = this.StrikeAngle.Combine(rhs.StrikeAngle);
                ret.Stagger = this.Stagger.Combine(rhs.Stagger);
                ret.AttackType = this.AttackType.Combine(rhs.AttackType);
                ret.Knockdown = this.Knockdown.Combine(rhs.Knockdown);
                ret.RecoveryTime = this.RecoveryTime.Combine(rhs.RecoveryTime);
                ret.StaminaMult = this.StaminaMult.Combine(rhs.StaminaMult);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool DamageMult;
            public bool Chance;
            public bool Spell;
            public bool Flags;
            public bool AttackAngle;
            public bool StrikeAngle;
            public bool Stagger;
            public bool AttackType;
            public bool Knockdown;
            public bool RecoveryTime;
            public bool StaminaMult;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.DamageMult = defaultOn;
                this.Chance = defaultOn;
                this.Spell = defaultOn;
                this.Flags = defaultOn;
                this.AttackAngle = defaultOn;
                this.StrikeAngle = defaultOn;
                this.Stagger = defaultOn;
                this.AttackType = defaultOn;
                this.Knockdown = defaultOn;
                this.RecoveryTime = defaultOn;
                this.StaminaMult = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((DamageMult, null));
                ret.Add((Chance, null));
                ret.Add((Spell, null));
                ret.Add((Flags, null));
                ret.Add((AttackAngle, null));
                ret.Add((StrikeAngle, null));
                ret.Add((Stagger, null));
                ret.Add((AttackType, null));
                ret.Add((Knockdown, null));
                ret.Add((RecoveryTime, null));
                ret.Add((StaminaMult, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AttackData_Registration.TriggeringRecordType;
        public IEnumerable<FormLinkInformation> ContainedFormLinks => AttackDataCommon.Instance.GetContainedFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AttackDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AttackDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AttackDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static AttackData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AttackData();
            ((AttackDataSetterCommon)((IAttackDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AttackData item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((AttackDataSetterCommon)((IAttackDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static AttackData GetNew()
        {
            return new AttackData();
        }

    }
    #endregion

    #region Interface
    public partial interface IAttackData :
        IAttackDataGetter,
        ILoquiObjectSetter<IAttackData>,
        IFormLinkContainer
    {
        new Single DamageMult { get; set; }
        new Single Chance { get; set; }
        new FormLink<IASpellGetter> Spell { get; set; }
        new AttackData.Flag Flags { get; set; }
        new Single AttackAngle { get; set; }
        new Single StrikeAngle { get; set; }
        new Single Stagger { get; set; }
        new FormLink<IKeywordGetter> AttackType { get; set; }
        new Single Knockdown { get; set; }
        new Single RecoveryTime { get; set; }
        new Single StaminaMult { get; set; }
    }

    public partial interface IAttackDataGetter :
        ILoquiObject,
        ILoquiObject<IAttackDataGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => AttackData_Registration.Instance;
        Single DamageMult { get; }
        Single Chance { get; }
        FormLink<IASpellGetter> Spell { get; }
        AttackData.Flag Flags { get; }
        Single AttackAngle { get; }
        Single StrikeAngle { get; }
        Single Stagger { get; }
        FormLink<IKeywordGetter> AttackType { get; }
        Single Knockdown { get; }
        Single RecoveryTime { get; }
        Single StaminaMult { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AttackDataMixIn
    {
        public static void Clear(this IAttackData item)
        {
            ((AttackDataSetterCommon)((IAttackDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AttackData.Mask<bool> GetEqualsMask(
            this IAttackDataGetter item,
            IAttackDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AttackDataCommon)((IAttackDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAttackDataGetter item,
            string? name = null,
            AttackData.Mask<bool>? printMask = null)
        {
            return ((AttackDataCommon)((IAttackDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAttackDataGetter item,
            FileGeneration fg,
            string? name = null,
            AttackData.Mask<bool>? printMask = null)
        {
            ((AttackDataCommon)((IAttackDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAttackDataGetter item,
            IAttackDataGetter rhs)
        {
            return ((AttackDataCommon)((IAttackDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAttackData lhs,
            IAttackDataGetter rhs)
        {
            ((AttackDataSetterTranslationCommon)((IAttackDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAttackData lhs,
            IAttackDataGetter rhs,
            AttackData.TranslationMask? copyMask = null)
        {
            ((AttackDataSetterTranslationCommon)((IAttackDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAttackData lhs,
            IAttackDataGetter rhs,
            out AttackData.ErrorMask errorMask,
            AttackData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AttackDataSetterTranslationCommon)((IAttackDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AttackData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAttackData lhs,
            IAttackDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AttackDataSetterTranslationCommon)((IAttackDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AttackData DeepCopy(
            this IAttackDataGetter item,
            AttackData.TranslationMask? copyMask = null)
        {
            return ((AttackDataSetterTranslationCommon)((IAttackDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AttackData DeepCopy(
            this IAttackDataGetter item,
            out AttackData.ErrorMask errorMask,
            AttackData.TranslationMask? copyMask = null)
        {
            return ((AttackDataSetterTranslationCommon)((IAttackDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AttackData DeepCopy(
            this IAttackDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AttackDataSetterTranslationCommon)((IAttackDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAttackData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AttackDataSetterCommon)((IAttackDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum AttackData_FieldIndex
    {
        DamageMult = 0,
        Chance = 1,
        Spell = 2,
        Flags = 3,
        AttackAngle = 4,
        StrikeAngle = 5,
        Stagger = 6,
        AttackType = 7,
        Knockdown = 8,
        RecoveryTime = 9,
        StaminaMult = 10,
    }
    #endregion

    #region Registration
    public partial class AttackData_Registration : ILoquiRegistration
    {
        public static readonly AttackData_Registration Instance = new AttackData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 58,
            version: 0);

        public const string GUID = "160c5128-07dc-42fc-9507-6ca11301e07a";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(AttackData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AttackData.ErrorMask);

        public static readonly Type ClassType = typeof(AttackData);

        public static readonly Type GetterType = typeof(IAttackDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAttackData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.AttackData";

        public const string Name = "AttackData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ATKD;
        public static readonly Type BinaryWriteTranslation = typeof(AttackDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class AttackDataSetterCommon
    {
        public static readonly AttackDataSetterCommon Instance = new AttackDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAttackData item)
        {
            ClearPartial();
            item.DamageMult = default;
            item.Chance = default;
            item.Spell = FormLink<IASpellGetter>.Null;
            item.Flags = default;
            item.AttackAngle = default;
            item.StrikeAngle = default;
            item.Stagger = default;
            item.AttackType = FormLink<IKeywordGetter>.Null;
            item.Knockdown = default;
            item.RecoveryTime = default;
            item.StaminaMult = default;
        }
        
        #region Mutagen
        public void RemapLinks(IAttackData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Spell = obj.Spell.Relink(mapping);
            obj.AttackType = obj.AttackType.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAttackData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RecordTypes.ATKD)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: AttackDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class AttackDataCommon
    {
        public static readonly AttackDataCommon Instance = new AttackDataCommon();

        public AttackData.Mask<bool> GetEqualsMask(
            IAttackDataGetter item,
            IAttackDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AttackData.Mask<bool>(false);
            ((AttackDataCommon)((IAttackDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAttackDataGetter item,
            IAttackDataGetter rhs,
            AttackData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.DamageMult = item.DamageMult.EqualsWithin(rhs.DamageMult);
            ret.Chance = item.Chance.EqualsWithin(rhs.Chance);
            ret.Spell = item.Spell.Equals(rhs.Spell);
            ret.Flags = item.Flags == rhs.Flags;
            ret.AttackAngle = item.AttackAngle.EqualsWithin(rhs.AttackAngle);
            ret.StrikeAngle = item.StrikeAngle.EqualsWithin(rhs.StrikeAngle);
            ret.Stagger = item.Stagger.EqualsWithin(rhs.Stagger);
            ret.AttackType = item.AttackType.Equals(rhs.AttackType);
            ret.Knockdown = item.Knockdown.EqualsWithin(rhs.Knockdown);
            ret.RecoveryTime = item.RecoveryTime.EqualsWithin(rhs.RecoveryTime);
            ret.StaminaMult = item.StaminaMult.EqualsWithin(rhs.StaminaMult);
        }
        
        public string ToString(
            IAttackDataGetter item,
            string? name = null,
            AttackData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAttackDataGetter item,
            FileGeneration fg,
            string? name = null,
            AttackData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AttackData =>");
            }
            else
            {
                fg.AppendLine($"{name} (AttackData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAttackDataGetter item,
            FileGeneration fg,
            AttackData.Mask<bool>? printMask = null)
        {
            if (printMask?.DamageMult ?? true)
            {
                fg.AppendItem(item.DamageMult, "DamageMult");
            }
            if (printMask?.Chance ?? true)
            {
                fg.AppendItem(item.Chance, "Chance");
            }
            if (printMask?.Spell ?? true)
            {
                fg.AppendItem(item.Spell.FormKey, "Spell");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.AttackAngle ?? true)
            {
                fg.AppendItem(item.AttackAngle, "AttackAngle");
            }
            if (printMask?.StrikeAngle ?? true)
            {
                fg.AppendItem(item.StrikeAngle, "StrikeAngle");
            }
            if (printMask?.Stagger ?? true)
            {
                fg.AppendItem(item.Stagger, "Stagger");
            }
            if (printMask?.AttackType ?? true)
            {
                fg.AppendItem(item.AttackType.FormKey, "AttackType");
            }
            if (printMask?.Knockdown ?? true)
            {
                fg.AppendItem(item.Knockdown, "Knockdown");
            }
            if (printMask?.RecoveryTime ?? true)
            {
                fg.AppendItem(item.RecoveryTime, "RecoveryTime");
            }
            if (printMask?.StaminaMult ?? true)
            {
                fg.AppendItem(item.StaminaMult, "StaminaMult");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAttackDataGetter? lhs,
            IAttackDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.DamageMult.EqualsWithin(rhs.DamageMult)) return false;
            if (!lhs.Chance.EqualsWithin(rhs.Chance)) return false;
            if (!lhs.Spell.Equals(rhs.Spell)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.AttackAngle.EqualsWithin(rhs.AttackAngle)) return false;
            if (!lhs.StrikeAngle.EqualsWithin(rhs.StrikeAngle)) return false;
            if (!lhs.Stagger.EqualsWithin(rhs.Stagger)) return false;
            if (!lhs.AttackType.Equals(rhs.AttackType)) return false;
            if (!lhs.Knockdown.EqualsWithin(rhs.Knockdown)) return false;
            if (!lhs.RecoveryTime.EqualsWithin(rhs.RecoveryTime)) return false;
            if (!lhs.StaminaMult.EqualsWithin(rhs.StaminaMult)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IAttackDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.DamageMult);
            hash.Add(item.Chance);
            hash.Add(item.Spell);
            hash.Add(item.Flags);
            hash.Add(item.AttackAngle);
            hash.Add(item.StrikeAngle);
            hash.Add(item.Stagger);
            hash.Add(item.AttackType);
            hash.Add(item.Knockdown);
            hash.Add(item.RecoveryTime);
            hash.Add(item.StaminaMult);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return AttackData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IAttackDataGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Spell);
            yield return FormLinkInformation.Factory(obj.AttackType);
            yield break;
        }
        
        #endregion
        
    }
    public partial class AttackDataSetterTranslationCommon
    {
        public static readonly AttackDataSetterTranslationCommon Instance = new AttackDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAttackData item,
            IAttackDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)AttackData_FieldIndex.DamageMult) ?? true))
            {
                item.DamageMult = rhs.DamageMult;
            }
            if ((copyMask?.GetShouldTranslate((int)AttackData_FieldIndex.Chance) ?? true))
            {
                item.Chance = rhs.Chance;
            }
            if ((copyMask?.GetShouldTranslate((int)AttackData_FieldIndex.Spell) ?? true))
            {
                item.Spell = new FormLink<IASpellGetter>(rhs.Spell.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)AttackData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)AttackData_FieldIndex.AttackAngle) ?? true))
            {
                item.AttackAngle = rhs.AttackAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)AttackData_FieldIndex.StrikeAngle) ?? true))
            {
                item.StrikeAngle = rhs.StrikeAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)AttackData_FieldIndex.Stagger) ?? true))
            {
                item.Stagger = rhs.Stagger;
            }
            if ((copyMask?.GetShouldTranslate((int)AttackData_FieldIndex.AttackType) ?? true))
            {
                item.AttackType = new FormLink<IKeywordGetter>(rhs.AttackType.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)AttackData_FieldIndex.Knockdown) ?? true))
            {
                item.Knockdown = rhs.Knockdown;
            }
            if ((copyMask?.GetShouldTranslate((int)AttackData_FieldIndex.RecoveryTime) ?? true))
            {
                item.RecoveryTime = rhs.RecoveryTime;
            }
            if ((copyMask?.GetShouldTranslate((int)AttackData_FieldIndex.StaminaMult) ?? true))
            {
                item.StaminaMult = rhs.StaminaMult;
            }
        }
        
        #endregion
        
        public AttackData DeepCopy(
            IAttackDataGetter item,
            AttackData.TranslationMask? copyMask = null)
        {
            AttackData ret = (AttackData)((AttackDataCommon)((IAttackDataGetter)item).CommonInstance()!).GetNew();
            ((AttackDataSetterTranslationCommon)((IAttackDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AttackData DeepCopy(
            IAttackDataGetter item,
            out AttackData.ErrorMask errorMask,
            AttackData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AttackData ret = (AttackData)((AttackDataCommon)((IAttackDataGetter)item).CommonInstance()!).GetNew();
            ((AttackDataSetterTranslationCommon)((IAttackDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AttackData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AttackData DeepCopy(
            IAttackDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AttackData ret = (AttackData)((AttackDataCommon)((IAttackDataGetter)item).CommonInstance()!).GetNew();
            ((AttackDataSetterTranslationCommon)((IAttackDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class AttackData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AttackData_Registration.Instance;
        public static AttackData_Registration Registration => AttackData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AttackDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AttackDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AttackDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAttackDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAttackDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAttackDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class AttackDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static AttackDataBinaryWriteTranslation Instance = new AttackDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IAttackDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DamageMult);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Chance);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Spell);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<AttackData.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AttackAngle);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.StrikeAngle);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Stagger);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AttackType);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Knockdown);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RecoveryTime);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.StaminaMult);
        }

        public void Write(
            MutagenWriter writer,
            IAttackDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.ATKD),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAttackDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AttackDataBinaryCreateTranslation
    {
        public readonly static AttackDataBinaryCreateTranslation Instance = new AttackDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAttackData item,
            MutagenFrame frame)
        {
            item.DamageMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Chance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Spell = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.Flags = EnumBinaryTranslation<AttackData.Flag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.AttackAngle = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.StrikeAngle = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Stagger = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.AttackType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.Knockdown = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.RecoveryTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.StaminaMult = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class AttackDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAttackDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AttackDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class AttackDataBinaryOverlay :
        BinaryOverlay,
        IAttackDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AttackData_Registration.Instance;
        public static AttackData_Registration Registration => AttackData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AttackDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AttackDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAttackDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAttackDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAttackDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public IEnumerable<FormLinkInformation> ContainedFormLinks => AttackDataCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AttackDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AttackDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Single DamageMult => _data.Slice(0x0, 0x4).Float();
        public Single Chance => _data.Slice(0x4, 0x4).Float();
        public FormLink<IASpellGetter> Spell => new FormLink<IASpellGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x8, 0x4))));
        public AttackData.Flag Flags => (AttackData.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0xC, 0x4));
        public Single AttackAngle => _data.Slice(0x10, 0x4).Float();
        public Single StrikeAngle => _data.Slice(0x14, 0x4).Float();
        public Single Stagger => _data.Slice(0x18, 0x4).Float();
        public FormLink<IKeywordGetter> AttackType => new FormLink<IKeywordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x1C, 0x4))));
        public Single Knockdown => _data.Slice(0x20, 0x4).Float();
        public Single RecoveryTime => _data.Slice(0x24, 0x4).Float();
        public Single StaminaMult => _data.Slice(0x28, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AttackDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static AttackDataBinaryOverlay AttackDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AttackDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + stream.GetSubrecord().TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x2C + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static AttackDataBinaryOverlay AttackDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return AttackDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AttackDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAttackDataGetter rhs)) return false;
            return ((AttackDataCommon)((IAttackDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAttackDataGetter? obj)
        {
            return ((AttackDataCommon)((IAttackDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AttackDataCommon)((IAttackDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

