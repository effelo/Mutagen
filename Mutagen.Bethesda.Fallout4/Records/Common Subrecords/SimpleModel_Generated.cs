/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    /// <summary>
    /// Implemented by: [Model]
    /// </summary>
    public partial class SimpleModel :
        ISimpleModel,
        ILoquiObjectSetter<SimpleModel>,
        IEquatable<ISimpleModelGetter>
    {
        #region Ctor
        public SimpleModel()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region File
        public String File { get; set; } = string.Empty;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _Data;
        public MemorySlice<Byte>? Data
        {
            get => this._Data;
            set => this._Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISimpleModelGetter.Data => this.Data;
        #endregion

        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SimpleModelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISimpleModelGetter rhs)) return false;
            return ((SimpleModelCommon)((ISimpleModelGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISimpleModelGetter? obj)
        {
            return ((SimpleModelCommon)((ISimpleModelGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SimpleModelCommon)((ISimpleModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.File = initialValue;
                this.Data = initialValue;
            }

            public Mask(
                TItem File,
                TItem Data)
            {
                this.File = File;
                this.Data = Data;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem File;
            public TItem Data;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.File, rhs.File)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.File);
                hash.Add(this.Data);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.File)) return false;
                if (!eval(this.Data)) return false;
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.File)) return true;
                if (eval(this.Data)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SimpleModel.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.File = eval(this.File);
                obj.Data = eval(this.Data);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SimpleModel.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SimpleModel.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SimpleModel.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.File ?? true)
                    {
                        fg.AppendItem(File, "File");
                    }
                    if (printMask?.Data ?? true)
                    {
                        fg.AppendItem(Data, "Data");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? File;
            public Exception? Data;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                SimpleModel_FieldIndex enu = (SimpleModel_FieldIndex)index;
                switch (enu)
                {
                    case SimpleModel_FieldIndex.File:
                        return File;
                    case SimpleModel_FieldIndex.Data:
                        return Data;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                SimpleModel_FieldIndex enu = (SimpleModel_FieldIndex)index;
                switch (enu)
                {
                    case SimpleModel_FieldIndex.File:
                        this.File = ex;
                        break;
                    case SimpleModel_FieldIndex.Data:
                        this.Data = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                SimpleModel_FieldIndex enu = (SimpleModel_FieldIndex)index;
                switch (enu)
                {
                    case SimpleModel_FieldIndex.File:
                        this.File = (Exception?)obj;
                        break;
                    case SimpleModel_FieldIndex.Data:
                        this.Data = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (File != null) return true;
                if (Data != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public virtual void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected virtual void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(File, "File");
                fg.AppendItem(Data, "Data");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.File = this.File.Combine(rhs.File);
                ret.Data = this.Data.Combine(rhs.Data);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool File;
            public bool Data;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.File = defaultOn;
                this.Data = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((File, null));
                ret.Add((Data, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SimpleModel_Registration.TriggeringRecordType;
        public virtual IEnumerable<FormLinkInformation> ContainedFormLinks => SimpleModelCommon.Instance.GetContainedFormLinks(this);
        public virtual void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SimpleModelSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => SimpleModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SimpleModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public static SimpleModel CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SimpleModel();
            ((SimpleModelSetterCommon)((ISimpleModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SimpleModel item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((SimpleModelSetterCommon)((ISimpleModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SimpleModel GetNew()
        {
            return new SimpleModel();
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [Model]
    /// </summary>
    public partial interface ISimpleModel :
        ISimpleModelGetter,
        ILoquiObjectSetter<ISimpleModel>,
        IFormLinkContainer
    {
        new String File { get; set; }
        new MemorySlice<Byte>? Data { get; set; }
    }

    /// <summary>
    /// Implemented by: [Model]
    /// </summary>
    public partial interface ISimpleModelGetter :
        ILoquiObject,
        ILoquiObject<ISimpleModelGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => SimpleModel_Registration.Instance;
        String File { get; }
        ReadOnlyMemorySlice<Byte>? Data { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SimpleModelMixIn
    {
        public static void Clear(this ISimpleModel item)
        {
            ((SimpleModelSetterCommon)((ISimpleModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SimpleModel.Mask<bool> GetEqualsMask(
            this ISimpleModelGetter item,
            ISimpleModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SimpleModelCommon)((ISimpleModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISimpleModelGetter item,
            string? name = null,
            SimpleModel.Mask<bool>? printMask = null)
        {
            return ((SimpleModelCommon)((ISimpleModelGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISimpleModelGetter item,
            FileGeneration fg,
            string? name = null,
            SimpleModel.Mask<bool>? printMask = null)
        {
            ((SimpleModelCommon)((ISimpleModelGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISimpleModelGetter item,
            ISimpleModelGetter rhs)
        {
            return ((SimpleModelCommon)((ISimpleModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISimpleModel lhs,
            ISimpleModelGetter rhs)
        {
            ((SimpleModelSetterTranslationCommon)((ISimpleModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISimpleModel lhs,
            ISimpleModelGetter rhs,
            SimpleModel.TranslationMask? copyMask = null)
        {
            ((SimpleModelSetterTranslationCommon)((ISimpleModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISimpleModel lhs,
            ISimpleModelGetter rhs,
            out SimpleModel.ErrorMask errorMask,
            SimpleModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SimpleModelSetterTranslationCommon)((ISimpleModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SimpleModel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISimpleModel lhs,
            ISimpleModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SimpleModelSetterTranslationCommon)((ISimpleModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SimpleModel DeepCopy(
            this ISimpleModelGetter item,
            SimpleModel.TranslationMask? copyMask = null)
        {
            return ((SimpleModelSetterTranslationCommon)((ISimpleModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SimpleModel DeepCopy(
            this ISimpleModelGetter item,
            out SimpleModel.ErrorMask errorMask,
            SimpleModel.TranslationMask? copyMask = null)
        {
            return ((SimpleModelSetterTranslationCommon)((ISimpleModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SimpleModel DeepCopy(
            this ISimpleModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SimpleModelSetterTranslationCommon)((ISimpleModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISimpleModel item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SimpleModelSetterCommon)((ISimpleModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum SimpleModel_FieldIndex
    {
        File = 0,
        Data = 1,
    }
    #endregion

    #region Registration
    public partial class SimpleModel_Registration : ILoquiRegistration
    {
        public static readonly SimpleModel_Registration Instance = new SimpleModel_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 83,
            version: 0);

        public const string GUID = "b01327de-7969-4c42-bea3-9aeb86194e57";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(SimpleModel.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SimpleModel.ErrorMask);

        public static readonly Type ClassType = typeof(SimpleModel);

        public static readonly Type GetterType = typeof(ISimpleModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISimpleModel);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.SimpleModel";

        public const string Name = "SimpleModel";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MODL;
        public static readonly Type BinaryWriteTranslation = typeof(SimpleModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class SimpleModelSetterCommon
    {
        public static readonly SimpleModelSetterCommon Instance = new SimpleModelSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ISimpleModel item)
        {
            ClearPartial();
            item.File = string.Empty;
            item.Data = default;
        }
        
        #region Mutagen
        public void RemapLinks(ISimpleModel obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISimpleModel item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: SimpleModelBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SimpleModelBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class SimpleModelCommon
    {
        public static readonly SimpleModelCommon Instance = new SimpleModelCommon();

        public SimpleModel.Mask<bool> GetEqualsMask(
            ISimpleModelGetter item,
            ISimpleModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SimpleModel.Mask<bool>(false);
            ((SimpleModelCommon)((ISimpleModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISimpleModelGetter item,
            ISimpleModelGetter rhs,
            SimpleModel.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.File = string.Equals(item.File, rhs.File);
            ret.Data = MemorySliceExt.Equal(item.Data, rhs.Data);
        }
        
        public string ToString(
            ISimpleModelGetter item,
            string? name = null,
            SimpleModel.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISimpleModelGetter item,
            FileGeneration fg,
            string? name = null,
            SimpleModel.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SimpleModel =>");
            }
            else
            {
                fg.AppendLine($"{name} (SimpleModel) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISimpleModelGetter item,
            FileGeneration fg,
            SimpleModel.Mask<bool>? printMask = null)
        {
            if (printMask?.File ?? true)
            {
                fg.AppendItem(item.File, "File");
            }
            if ((printMask?.Data ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                fg.AppendLine($"Data => {SpanExt.ToHexString(DataItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISimpleModelGetter? lhs,
            ISimpleModelGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.File, rhs.File)) return false;
            if (!MemorySliceExt.Equal(lhs.Data, rhs.Data)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ISimpleModelGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.File);
            if (item.Data.TryGet(out var DataItem))
            {
                hash.Add(DataItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return SimpleModel.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(ISimpleModelGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class SimpleModelSetterTranslationCommon
    {
        public static readonly SimpleModelSetterTranslationCommon Instance = new SimpleModelSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            ISimpleModel item,
            ISimpleModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)SimpleModel_FieldIndex.File) ?? true))
            {
                item.File = rhs.File;
            }
            if ((copyMask?.GetShouldTranslate((int)SimpleModel_FieldIndex.Data) ?? true))
            {
                if(rhs.Data.TryGet(out var Datarhs))
                {
                    item.Data = Datarhs.ToArray();
                }
                else
                {
                    item.Data = default;
                }
            }
        }
        
        #endregion
        
        public SimpleModel DeepCopy(
            ISimpleModelGetter item,
            SimpleModel.TranslationMask? copyMask = null)
        {
            SimpleModel ret = (SimpleModel)((SimpleModelCommon)((ISimpleModelGetter)item).CommonInstance()!).GetNew();
            ((SimpleModelSetterTranslationCommon)((ISimpleModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SimpleModel DeepCopy(
            ISimpleModelGetter item,
            out SimpleModel.ErrorMask errorMask,
            SimpleModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SimpleModel ret = (SimpleModel)((SimpleModelCommon)((ISimpleModelGetter)item).CommonInstance()!).GetNew();
            ((SimpleModelSetterTranslationCommon)((ISimpleModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SimpleModel.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SimpleModel DeepCopy(
            ISimpleModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SimpleModel ret = (SimpleModel)((SimpleModelCommon)((ISimpleModelGetter)item).CommonInstance()!).GetNew();
            ((SimpleModelSetterTranslationCommon)((ISimpleModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class SimpleModel
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SimpleModel_Registration.Instance;
        public static SimpleModel_Registration Registration => SimpleModel_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => SimpleModelCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return SimpleModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => SimpleModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISimpleModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISimpleModelGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISimpleModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SimpleModelBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static SimpleModelBinaryWriteTranslation Instance = new SimpleModelBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ISimpleModelGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.File,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MODL),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Data,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MODT));
        }

        public virtual void Write(
            MutagenWriter writer,
            ISimpleModelGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISimpleModelGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SimpleModelBinaryCreateTranslation
    {
        public readonly static SimpleModelBinaryCreateTranslation Instance = new SimpleModelBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISimpleModel item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            ISimpleModel item,
            MutagenFrame frame,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)SimpleModel_FieldIndex.File) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.File = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)SimpleModel_FieldIndex.File;
                }
                case RecordTypeInts.MODT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Data = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)SimpleModel_FieldIndex.Data;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SimpleModelBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISimpleModelGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SimpleModelBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class SimpleModelBinaryOverlay :
        BinaryOverlay,
        ISimpleModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SimpleModel_Registration.Instance;
        public static SimpleModel_Registration Registration => SimpleModel_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => SimpleModelCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => SimpleModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISimpleModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISimpleModelGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISimpleModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public virtual IEnumerable<FormLinkInformation> ContainedFormLinks => SimpleModelCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => SimpleModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SimpleModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region File
        private int? _FileLocation;
        public String File => _FileLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FileLocation.Value, _package.MetaData.Constants)) : string.Empty;
        #endregion
        #region Data
        private int? _DataLocation;
        public ReadOnlyMemorySlice<Byte>? Data => _DataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _DataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SimpleModelBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static SimpleModelBinaryOverlay SimpleModelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SimpleModelBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static SimpleModelBinaryOverlay SimpleModelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return SimpleModelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public virtual ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MODL:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)SimpleModel_FieldIndex.File) return ParseResult.Stop;
                    _FileLocation = (stream.Position - offset);
                    return (int)SimpleModel_FieldIndex.File;
                }
                case RecordTypeInts.MODT:
                {
                    _DataLocation = (stream.Position - offset);
                    return (int)SimpleModel_FieldIndex.Data;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SimpleModelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISimpleModelGetter rhs)) return false;
            return ((SimpleModelCommon)((ISimpleModelGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ISimpleModelGetter? obj)
        {
            return ((SimpleModelCommon)((ISimpleModelGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SimpleModelCommon)((ISimpleModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

