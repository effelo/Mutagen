/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ScriptObjectProperty :
        ScriptProperty,
        IScriptObjectProperty,
        ILoquiObjectSetter<ScriptObjectProperty>,
        IEquatable<IScriptObjectPropertyGetter>
    {
        #region Ctor
        public ScriptObjectProperty()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Object
        public FormLink<IFallout4MajorRecordGetter> Object { get; set; } = new FormLink<IFallout4MajorRecordGetter>();
        #endregion
        #region Alias
        public readonly static Int16 _Alias_Default = -1;
        public Int16 Alias { get; set; } = _Alias_Default;
        #endregion
        #region Unused
        public UInt16 Unused { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScriptObjectPropertyMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScriptObjectPropertyGetter rhs)) return false;
            return ((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IScriptObjectPropertyGetter? obj)
        {
            return ((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ScriptProperty.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Object = initialValue;
                this.Alias = initialValue;
                this.Unused = initialValue;
            }

            public Mask(
                TItem Name,
                TItem Flags,
                TItem Object,
                TItem Alias,
                TItem Unused)
            : base(
                Name: Name,
                Flags: Flags)
            {
                this.Object = Object;
                this.Alias = Alias;
                this.Unused = Unused;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Object;
            public TItem Alias;
            public TItem Unused;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Object, rhs.Object)) return false;
                if (!object.Equals(this.Alias, rhs.Alias)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Object);
                hash.Add(this.Alias);
                hash.Add(this.Unused);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Object)) return false;
                if (!eval(this.Alias)) return false;
                if (!eval(this.Unused)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Object)) return true;
                if (eval(this.Alias)) return true;
                if (eval(this.Unused)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ScriptObjectProperty.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Object = eval(this.Object);
                obj.Alias = eval(this.Alias);
                obj.Unused = eval(this.Unused);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ScriptObjectProperty.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ScriptObjectProperty.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ScriptObjectProperty.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Object ?? true)
                    {
                        fg.AppendItem(Object, "Object");
                    }
                    if (printMask?.Alias ?? true)
                    {
                        fg.AppendItem(Alias, "Alias");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        fg.AppendItem(Unused, "Unused");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ScriptProperty.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Object;
            public Exception? Alias;
            public Exception? Unused;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ScriptObjectProperty_FieldIndex enu = (ScriptObjectProperty_FieldIndex)index;
                switch (enu)
                {
                    case ScriptObjectProperty_FieldIndex.Object:
                        return Object;
                    case ScriptObjectProperty_FieldIndex.Alias:
                        return Alias;
                    case ScriptObjectProperty_FieldIndex.Unused:
                        return Unused;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ScriptObjectProperty_FieldIndex enu = (ScriptObjectProperty_FieldIndex)index;
                switch (enu)
                {
                    case ScriptObjectProperty_FieldIndex.Object:
                        this.Object = ex;
                        break;
                    case ScriptObjectProperty_FieldIndex.Alias:
                        this.Alias = ex;
                        break;
                    case ScriptObjectProperty_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ScriptObjectProperty_FieldIndex enu = (ScriptObjectProperty_FieldIndex)index;
                switch (enu)
                {
                    case ScriptObjectProperty_FieldIndex.Object:
                        this.Object = (Exception?)obj;
                        break;
                    case ScriptObjectProperty_FieldIndex.Alias:
                        this.Alias = (Exception?)obj;
                        break;
                    case ScriptObjectProperty_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Object != null) return true;
                if (Alias != null) return true;
                if (Unused != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Object, "Object");
                fg.AppendItem(Alias, "Alias");
                fg.AppendItem(Unused, "Unused");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Object = this.Object.Combine(rhs.Object);
                ret.Alias = this.Alias.Combine(rhs.Alias);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ScriptProperty.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Object;
            public bool Alias;
            public bool Unused;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Object = defaultOn;
                this.Alias = defaultOn;
                this.Unused = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Object, null));
                ret.Add((Alias, null));
                ret.Add((Unused, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ScriptObjectPropertyCommon.Instance.GetContainedFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScriptObjectPropertySetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScriptObjectPropertyBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScriptObjectPropertyBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static ScriptObjectProperty CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ScriptObjectProperty();
            ((ScriptObjectPropertySetterCommon)((IScriptObjectPropertyGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ScriptObjectProperty item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ScriptObjectPropertySetterCommon)((IScriptObjectPropertyGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ScriptObjectProperty GetNew()
        {
            return new ScriptObjectProperty();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptObjectProperty :
        IScriptObjectPropertyGetter,
        IScriptProperty,
        ILoquiObjectSetter<IScriptObjectProperty>,
        IFormLinkContainer
    {
        new FormLink<IFallout4MajorRecordGetter> Object { get; set; }
        new Int16 Alias { get; set; }
        new UInt16 Unused { get; set; }
    }

    public partial interface IScriptObjectPropertyGetter :
        IScriptPropertyGetter,
        ILoquiObject<IScriptObjectPropertyGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => ScriptObjectProperty_Registration.Instance;
        FormLink<IFallout4MajorRecordGetter> Object { get; }
        Int16 Alias { get; }
        UInt16 Unused { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScriptObjectPropertyMixIn
    {
        public static void Clear(this IScriptObjectProperty item)
        {
            ((ScriptObjectPropertySetterCommon)((IScriptObjectPropertyGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScriptObjectProperty.Mask<bool> GetEqualsMask(
            this IScriptObjectPropertyGetter item,
            IScriptObjectPropertyGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptObjectPropertyGetter item,
            string? name = null,
            ScriptObjectProperty.Mask<bool>? printMask = null)
        {
            return ((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptObjectPropertyGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptObjectProperty.Mask<bool>? printMask = null)
        {
            ((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IScriptObjectPropertyGetter item,
            IScriptObjectPropertyGetter rhs)
        {
            return ((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IScriptObjectProperty lhs,
            IScriptObjectPropertyGetter rhs,
            out ScriptObjectProperty.ErrorMask errorMask,
            ScriptObjectProperty.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScriptObjectPropertySetterTranslationCommon)((IScriptObjectPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ScriptObjectProperty.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScriptObjectProperty lhs,
            IScriptObjectPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScriptObjectPropertySetterTranslationCommon)((IScriptObjectPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ScriptObjectProperty DeepCopy(
            this IScriptObjectPropertyGetter item,
            ScriptObjectProperty.TranslationMask? copyMask = null)
        {
            return ((ScriptObjectPropertySetterTranslationCommon)((IScriptObjectPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScriptObjectProperty DeepCopy(
            this IScriptObjectPropertyGetter item,
            out ScriptObjectProperty.ErrorMask errorMask,
            ScriptObjectProperty.TranslationMask? copyMask = null)
        {
            return ((ScriptObjectPropertySetterTranslationCommon)((IScriptObjectPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScriptObjectProperty DeepCopy(
            this IScriptObjectPropertyGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScriptObjectPropertySetterTranslationCommon)((IScriptObjectPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IScriptObjectProperty item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScriptObjectPropertySetterCommon)((IScriptObjectPropertyGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ScriptObjectProperty_FieldIndex
    {
        Name = 0,
        Flags = 1,
        Object = 2,
        Alias = 3,
        Unused = 4,
    }
    #endregion

    #region Registration
    public partial class ScriptObjectProperty_Registration : ILoquiRegistration
    {
        public static readonly ScriptObjectProperty_Registration Instance = new ScriptObjectProperty_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 94,
            version: 0);

        public const string GUID = "2e12e8d5-7b18-4bc5-8e43-602766b864cb";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ScriptObjectProperty.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptObjectProperty.ErrorMask);

        public static readonly Type ClassType = typeof(ScriptObjectProperty);

        public static readonly Type GetterType = typeof(IScriptObjectPropertyGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptObjectProperty);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ScriptObjectProperty";

        public const string Name = "ScriptObjectProperty";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(ScriptObjectPropertyBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptObjectPropertySetterCommon : ScriptPropertySetterCommon
    {
        public new static readonly ScriptObjectPropertySetterCommon Instance = new ScriptObjectPropertySetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScriptObjectProperty item)
        {
            ClearPartial();
            item.Object = FormLink<IFallout4MajorRecordGetter>.Null;
            item.Alias = ScriptObjectProperty._Alias_Default;
            item.Unused = default;
            base.Clear(item);
        }
        
        public override void Clear(IScriptProperty item)
        {
            Clear(item: (IScriptObjectProperty)item);
        }
        
        #region Mutagen
        public void RemapLinks(IScriptObjectProperty obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Object = obj.Object.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScriptObjectProperty item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ScriptObjectPropertyBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IScriptProperty item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ScriptObjectProperty)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ScriptObjectPropertyCommon : ScriptPropertyCommon
    {
        public new static readonly ScriptObjectPropertyCommon Instance = new ScriptObjectPropertyCommon();

        public ScriptObjectProperty.Mask<bool> GetEqualsMask(
            IScriptObjectPropertyGetter item,
            IScriptObjectPropertyGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptObjectProperty.Mask<bool>(false);
            ((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptObjectPropertyGetter item,
            IScriptObjectPropertyGetter rhs,
            ScriptObjectProperty.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Object = item.Object.Equals(rhs.Object);
            ret.Alias = item.Alias == rhs.Alias;
            ret.Unused = item.Unused == rhs.Unused;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IScriptObjectPropertyGetter item,
            string? name = null,
            ScriptObjectProperty.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScriptObjectPropertyGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptObjectProperty.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptObjectProperty =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptObjectProperty) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScriptObjectPropertyGetter item,
            FileGeneration fg,
            ScriptObjectProperty.Mask<bool>? printMask = null)
        {
            ScriptPropertyCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Object ?? true)
            {
                fg.AppendItem(item.Object.FormKey, "Object");
            }
            if (printMask?.Alias ?? true)
            {
                fg.AppendItem(item.Alias, "Alias");
            }
            if (printMask?.Unused ?? true)
            {
                fg.AppendItem(item.Unused, "Unused");
            }
        }
        
        public static ScriptObjectProperty_FieldIndex ConvertFieldIndex(ScriptProperty_FieldIndex index)
        {
            switch (index)
            {
                case ScriptProperty_FieldIndex.Name:
                    return (ScriptObjectProperty_FieldIndex)((int)index);
                case ScriptProperty_FieldIndex.Flags:
                    return (ScriptObjectProperty_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptObjectPropertyGetter? lhs,
            IScriptObjectPropertyGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IScriptPropertyGetter)lhs, (IScriptPropertyGetter)rhs)) return false;
            if (!lhs.Object.Equals(rhs.Object)) return false;
            if (lhs.Alias != rhs.Alias) return false;
            if (lhs.Unused != rhs.Unused) return false;
            return true;
        }
        
        public override bool Equals(
            IScriptPropertyGetter? lhs,
            IScriptPropertyGetter? rhs)
        {
            return Equals(
                lhs: (IScriptObjectPropertyGetter?)lhs,
                rhs: rhs as IScriptObjectPropertyGetter);
        }
        
        public virtual int GetHashCode(IScriptObjectPropertyGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Object);
            hash.Add(item.Alias);
            hash.Add(item.Unused);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IScriptPropertyGetter item)
        {
            return GetHashCode(item: (IScriptObjectPropertyGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ScriptObjectProperty.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IScriptObjectPropertyGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Object);
            yield break;
        }
        
        #endregion
        
    }
    public partial class ScriptObjectPropertySetterTranslationCommon : ScriptPropertySetterTranslationCommon
    {
        public new static readonly ScriptObjectPropertySetterTranslationCommon Instance = new ScriptObjectPropertySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IScriptObjectProperty item,
            IScriptObjectPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IScriptProperty)item,
                (IScriptPropertyGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ScriptObjectProperty_FieldIndex.Object) ?? true))
            {
                item.Object = new FormLink<IFallout4MajorRecordGetter>(rhs.Object.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptObjectProperty_FieldIndex.Alias) ?? true))
            {
                item.Alias = rhs.Alias;
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptObjectProperty_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused;
            }
        }
        
        
        public override void DeepCopyIn(
            IScriptProperty item,
            IScriptPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScriptObjectProperty)item,
                rhs: (IScriptObjectPropertyGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ScriptObjectProperty DeepCopy(
            IScriptObjectPropertyGetter item,
            ScriptObjectProperty.TranslationMask? copyMask = null)
        {
            ScriptObjectProperty ret = (ScriptObjectProperty)((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)item).CommonInstance()!).GetNew();
            ((ScriptObjectPropertySetterTranslationCommon)((IScriptObjectPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ScriptObjectProperty DeepCopy(
            IScriptObjectPropertyGetter item,
            out ScriptObjectProperty.ErrorMask errorMask,
            ScriptObjectProperty.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptObjectProperty ret = (ScriptObjectProperty)((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)item).CommonInstance()!).GetNew();
            ((ScriptObjectPropertySetterTranslationCommon)((IScriptObjectPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ScriptObjectProperty.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ScriptObjectProperty DeepCopy(
            IScriptObjectPropertyGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScriptObjectProperty ret = (ScriptObjectProperty)((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)item).CommonInstance()!).GetNew();
            ((ScriptObjectPropertySetterTranslationCommon)((IScriptObjectPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ScriptObjectProperty
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptObjectProperty_Registration.Instance;
        public new static ScriptObjectProperty_Registration Registration => ScriptObjectProperty_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScriptObjectPropertyCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ScriptObjectPropertySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScriptObjectPropertySetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScriptObjectPropertyBinaryWriteTranslation :
        ScriptPropertyBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ScriptObjectPropertyBinaryWriteTranslation Instance = new ScriptObjectPropertyBinaryWriteTranslation();

        public static void WriteEmbedded(
            IScriptObjectPropertyGetter item,
            MutagenWriter writer)
        {
            ScriptPropertyBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Object);
            writer.Write(item.Alias);
            writer.Write(item.Unused);
        }

        public void Write(
            MutagenWriter writer,
            IScriptObjectPropertyGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScriptObjectPropertyGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IScriptPropertyGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScriptObjectPropertyGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ScriptObjectPropertyBinaryCreateTranslation : ScriptPropertyBinaryCreateTranslation
    {
        public new readonly static ScriptObjectPropertyBinaryCreateTranslation Instance = new ScriptObjectPropertyBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IScriptObjectProperty item,
            MutagenFrame frame)
        {
            ScriptPropertyBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Object = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.Alias = frame.ReadInt16();
            item.Unused = frame.ReadUInt16();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ScriptObjectPropertyBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScriptObjectPropertyBinaryOverlay :
        ScriptPropertyBinaryOverlay,
        IScriptObjectPropertyGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptObjectProperty_Registration.Instance;
        public new static ScriptObjectProperty_Registration Registration => ScriptObjectProperty_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScriptObjectPropertyCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScriptObjectPropertySetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public override IEnumerable<FormLinkInformation> ContainedFormLinks => ScriptObjectPropertyCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScriptObjectPropertyBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScriptObjectPropertyBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public FormLink<IFallout4MajorRecordGetter> Object => new FormLink<IFallout4MajorRecordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x0, 0x4))));
        public Int16 Alias => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x4, 0x2));
        public UInt16 Unused => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x6, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScriptObjectPropertyBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ScriptObjectPropertyBinaryOverlay ScriptObjectPropertyFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ScriptObjectPropertyBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0x8),
                package: package);
            int offset = stream.Position;
            stream.Position += 0x8;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ScriptObjectPropertyBinaryOverlay ScriptObjectPropertyFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ScriptObjectPropertyFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScriptObjectPropertyMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScriptObjectPropertyGetter rhs)) return false;
            return ((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IScriptObjectPropertyGetter? obj)
        {
            return ((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptObjectPropertyCommon)((IScriptObjectPropertyGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

