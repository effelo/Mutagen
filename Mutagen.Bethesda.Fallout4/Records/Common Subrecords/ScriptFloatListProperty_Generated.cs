/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ScriptFloatListProperty :
        ScriptProperty,
        IScriptFloatListProperty,
        ILoquiObjectSetter<ScriptFloatListProperty>,
        IEquatable<IScriptFloatListPropertyGetter>
    {
        #region Ctor
        public ScriptFloatListProperty()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Single> _Data = new ExtendedList<Single>();
        public ExtendedList<Single> Data
        {
            get => this._Data;
            protected set => this._Data = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Single> IScriptFloatListPropertyGetter.Data => _Data;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScriptFloatListPropertyMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScriptFloatListPropertyGetter rhs)) return false;
            return ((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IScriptFloatListPropertyGetter? obj)
        {
            return ((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ScriptProperty.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Data = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem Name,
                TItem Flags,
                TItem Data)
            : base(
                Name: Name,
                Flags: Flags)
            {
                this.Data = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Data, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Data;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Data);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null)
                    {
                        foreach (var item in this.Data.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null)
                    {
                        foreach (var item in this.Data.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ScriptFloatListProperty.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Data != null)
                {
                    obj.Data = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Data.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Data.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Data.Specific = l;
                        foreach (var item in Data.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ScriptFloatListProperty.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ScriptFloatListProperty.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ScriptFloatListProperty.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.Data?.Overall ?? true)
                        && Data.TryGet(out var DataItem))
                    {
                        fg.AppendLine("Data =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(DataItem.Overall);
                            if (DataItem.Specific != null)
                            {
                                foreach (var subItem in DataItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ScriptProperty.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Data;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ScriptFloatListProperty_FieldIndex enu = (ScriptFloatListProperty_FieldIndex)index;
                switch (enu)
                {
                    case ScriptFloatListProperty_FieldIndex.Data:
                        return Data;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ScriptFloatListProperty_FieldIndex enu = (ScriptFloatListProperty_FieldIndex)index;
                switch (enu)
                {
                    case ScriptFloatListProperty_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ScriptFloatListProperty_FieldIndex enu = (ScriptFloatListProperty_FieldIndex)index;
                switch (enu)
                {
                    case ScriptFloatListProperty_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Data != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (Data.TryGet(out var DataItem))
                {
                    fg.AppendLine("Data =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(DataItem.Overall);
                        if (DataItem.Specific != null)
                        {
                            foreach (var subItem in DataItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Data = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Data?.Overall, rhs.Data?.Overall), ExceptionExt.Combine(this.Data?.Specific, rhs.Data?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ScriptProperty.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Data;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Data = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Data, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScriptFloatListPropertyBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScriptFloatListPropertyBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        public new static ScriptFloatListProperty CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ScriptFloatListProperty();
            ((ScriptFloatListPropertySetterCommon)((IScriptFloatListPropertyGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ScriptFloatListProperty item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((ScriptFloatListPropertySetterCommon)((IScriptFloatListPropertyGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ScriptFloatListProperty GetNew()
        {
            return new ScriptFloatListProperty();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptFloatListProperty :
        IScriptFloatListPropertyGetter,
        IScriptProperty,
        ILoquiObjectSetter<IScriptFloatListProperty>
    {
        new ExtendedList<Single> Data { get; }
    }

    public partial interface IScriptFloatListPropertyGetter :
        IScriptPropertyGetter,
        ILoquiObject<IScriptFloatListPropertyGetter>,
        IBinaryItem
    {
        static new ILoquiRegistration Registration => ScriptFloatListProperty_Registration.Instance;
        IReadOnlyList<Single> Data { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScriptFloatListPropertyMixIn
    {
        public static void Clear(this IScriptFloatListProperty item)
        {
            ((ScriptFloatListPropertySetterCommon)((IScriptFloatListPropertyGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScriptFloatListProperty.Mask<bool> GetEqualsMask(
            this IScriptFloatListPropertyGetter item,
            IScriptFloatListPropertyGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptFloatListPropertyGetter item,
            string? name = null,
            ScriptFloatListProperty.Mask<bool>? printMask = null)
        {
            return ((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptFloatListPropertyGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptFloatListProperty.Mask<bool>? printMask = null)
        {
            ((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IScriptFloatListPropertyGetter item,
            IScriptFloatListPropertyGetter rhs)
        {
            return ((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IScriptFloatListProperty lhs,
            IScriptFloatListPropertyGetter rhs,
            out ScriptFloatListProperty.ErrorMask errorMask,
            ScriptFloatListProperty.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScriptFloatListPropertySetterTranslationCommon)((IScriptFloatListPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ScriptFloatListProperty.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScriptFloatListProperty lhs,
            IScriptFloatListPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScriptFloatListPropertySetterTranslationCommon)((IScriptFloatListPropertyGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ScriptFloatListProperty DeepCopy(
            this IScriptFloatListPropertyGetter item,
            ScriptFloatListProperty.TranslationMask? copyMask = null)
        {
            return ((ScriptFloatListPropertySetterTranslationCommon)((IScriptFloatListPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScriptFloatListProperty DeepCopy(
            this IScriptFloatListPropertyGetter item,
            out ScriptFloatListProperty.ErrorMask errorMask,
            ScriptFloatListProperty.TranslationMask? copyMask = null)
        {
            return ((ScriptFloatListPropertySetterTranslationCommon)((IScriptFloatListPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScriptFloatListProperty DeepCopy(
            this IScriptFloatListPropertyGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScriptFloatListPropertySetterTranslationCommon)((IScriptFloatListPropertyGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IScriptFloatListProperty item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScriptFloatListPropertySetterCommon)((IScriptFloatListPropertyGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum ScriptFloatListProperty_FieldIndex
    {
        Name = 0,
        Flags = 1,
        Data = 2,
    }
    #endregion

    #region Registration
    public partial class ScriptFloatListProperty_Registration : ILoquiRegistration
    {
        public static readonly ScriptFloatListProperty_Registration Instance = new ScriptFloatListProperty_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 102,
            version: 0);

        public const string GUID = "c5545dbc-082b-409a-abeb-e10a22ac291d";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(ScriptFloatListProperty.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptFloatListProperty.ErrorMask);

        public static readonly Type ClassType = typeof(ScriptFloatListProperty);

        public static readonly Type GetterType = typeof(IScriptFloatListPropertyGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptFloatListProperty);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ScriptFloatListProperty";

        public const string Name = "ScriptFloatListProperty";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(ScriptFloatListPropertyBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptFloatListPropertySetterCommon : ScriptPropertySetterCommon
    {
        public new static readonly ScriptFloatListPropertySetterCommon Instance = new ScriptFloatListPropertySetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScriptFloatListProperty item)
        {
            ClearPartial();
            item.Data.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IScriptProperty item)
        {
            Clear(item: (IScriptFloatListProperty)item);
        }
        
        #region Mutagen
        public void RemapLinks(IScriptFloatListProperty obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScriptFloatListProperty item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ScriptFloatListPropertyBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IScriptProperty item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ScriptFloatListProperty)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ScriptFloatListPropertyCommon : ScriptPropertyCommon
    {
        public new static readonly ScriptFloatListPropertyCommon Instance = new ScriptFloatListPropertyCommon();

        public ScriptFloatListProperty.Mask<bool> GetEqualsMask(
            IScriptFloatListPropertyGetter item,
            IScriptFloatListPropertyGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptFloatListProperty.Mask<bool>(false);
            ((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptFloatListPropertyGetter item,
            IScriptFloatListPropertyGetter rhs,
            ScriptFloatListProperty.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Data = item.Data.CollectionEqualsHelper(
                rhs.Data,
                (l, r) => l.EqualsWithin(r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IScriptFloatListPropertyGetter item,
            string? name = null,
            ScriptFloatListProperty.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScriptFloatListPropertyGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptFloatListProperty.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptFloatListProperty =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptFloatListProperty) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScriptFloatListPropertyGetter item,
            FileGeneration fg,
            ScriptFloatListProperty.Mask<bool>? printMask = null)
        {
            ScriptPropertyCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Data?.Overall ?? true)
            {
                fg.AppendLine("Data =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Data)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public static ScriptFloatListProperty_FieldIndex ConvertFieldIndex(ScriptProperty_FieldIndex index)
        {
            switch (index)
            {
                case ScriptProperty_FieldIndex.Name:
                    return (ScriptFloatListProperty_FieldIndex)((int)index);
                case ScriptProperty_FieldIndex.Flags:
                    return (ScriptFloatListProperty_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptFloatListPropertyGetter? lhs,
            IScriptFloatListPropertyGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals((IScriptPropertyGetter)lhs, (IScriptPropertyGetter)rhs)) return false;
            if (!lhs.Data.SequenceEqualNullable(rhs.Data)) return false;
            return true;
        }
        
        public override bool Equals(
            IScriptPropertyGetter? lhs,
            IScriptPropertyGetter? rhs)
        {
            return Equals(
                lhs: (IScriptFloatListPropertyGetter?)lhs,
                rhs: rhs as IScriptFloatListPropertyGetter);
        }
        
        public virtual int GetHashCode(IScriptFloatListPropertyGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Data);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IScriptPropertyGetter item)
        {
            return GetHashCode(item: (IScriptFloatListPropertyGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ScriptFloatListProperty.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IScriptFloatListPropertyGetter obj)
        {
            foreach (var item in base.GetContainedFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ScriptFloatListPropertySetterTranslationCommon : ScriptPropertySetterTranslationCommon
    {
        public new static readonly ScriptFloatListPropertySetterTranslationCommon Instance = new ScriptFloatListPropertySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IScriptFloatListProperty item,
            IScriptFloatListPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IScriptProperty)item,
                (IScriptPropertyGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ScriptFloatListProperty_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)ScriptFloatListProperty_FieldIndex.Data);
                try
                {
                    item.Data.SetTo(rhs.Data);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IScriptProperty item,
            IScriptPropertyGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IScriptFloatListProperty)item,
                rhs: (IScriptFloatListPropertyGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ScriptFloatListProperty DeepCopy(
            IScriptFloatListPropertyGetter item,
            ScriptFloatListProperty.TranslationMask? copyMask = null)
        {
            ScriptFloatListProperty ret = (ScriptFloatListProperty)((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)item).CommonInstance()!).GetNew();
            ((ScriptFloatListPropertySetterTranslationCommon)((IScriptFloatListPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ScriptFloatListProperty DeepCopy(
            IScriptFloatListPropertyGetter item,
            out ScriptFloatListProperty.ErrorMask errorMask,
            ScriptFloatListProperty.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptFloatListProperty ret = (ScriptFloatListProperty)((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)item).CommonInstance()!).GetNew();
            ((ScriptFloatListPropertySetterTranslationCommon)((IScriptFloatListPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ScriptFloatListProperty.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ScriptFloatListProperty DeepCopy(
            IScriptFloatListPropertyGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScriptFloatListProperty ret = (ScriptFloatListProperty)((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)item).CommonInstance()!).GetNew();
            ((ScriptFloatListPropertySetterTranslationCommon)((IScriptFloatListPropertyGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ScriptFloatListProperty
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptFloatListProperty_Registration.Instance;
        public new static ScriptFloatListProperty_Registration Registration => ScriptFloatListProperty_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScriptFloatListPropertyCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ScriptFloatListPropertySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScriptFloatListPropertySetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScriptFloatListPropertyBinaryWriteTranslation :
        ScriptPropertyBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ScriptFloatListPropertyBinaryWriteTranslation Instance = new ScriptFloatListPropertyBinaryWriteTranslation();

        public static void WriteEmbedded(
            IScriptFloatListPropertyGetter item,
            MutagenWriter writer)
        {
            ScriptPropertyBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<Single>.Instance.Write(
                writer: writer,
                items: item.Data,
                countLengthLength: 4,
                transl: FloatBinaryTranslation.Instance.Write);
        }

        public void Write(
            MutagenWriter writer,
            IScriptFloatListPropertyGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScriptFloatListPropertyGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IScriptPropertyGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScriptFloatListPropertyGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ScriptFloatListPropertyBinaryCreateTranslation : ScriptPropertyBinaryCreateTranslation
    {
        public new readonly static ScriptFloatListPropertyBinaryCreateTranslation Instance = new ScriptFloatListPropertyBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IScriptFloatListProperty item,
            MutagenFrame frame)
        {
            ScriptPropertyBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Data.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<Single>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    frame: frame,
                    transl: FloatBinaryTranslation.Instance.Parse));
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ScriptFloatListPropertyBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class ScriptFloatListPropertyBinaryOverlay :
        ScriptPropertyBinaryOverlay,
        IScriptFloatListPropertyGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptFloatListProperty_Registration.Instance;
        public new static ScriptFloatListProperty_Registration Registration => ScriptFloatListProperty_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScriptFloatListPropertyCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScriptFloatListPropertySetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScriptFloatListPropertyBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScriptFloatListPropertyBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Data
        public IReadOnlyList<Single> Data => BinaryOverlayList.FactoryByCountLength<Single>(_data, _package, 4, countLength: 4, (s, p) => s.Float());
        protected int DataEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScriptFloatListPropertyBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ScriptFloatListPropertyBinaryOverlay ScriptFloatListPropertyFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ScriptFloatListPropertyBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.DataEndingPos = BinaryPrimitives.ReadInt32LittleEndian(ret._data) * 4 + 4;
            stream.Position += ret.DataEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ScriptFloatListPropertyBinaryOverlay ScriptFloatListPropertyFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ScriptFloatListPropertyFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScriptFloatListPropertyMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScriptFloatListPropertyGetter rhs)) return false;
            return ((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IScriptFloatListPropertyGetter? obj)
        {
            return ((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptFloatListPropertyCommon)((IScriptFloatListPropertyGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

