/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Noggog;
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Text;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    /// <summary>
    /// Implemented by: [VirtualMachineAdapter, DialogResponsesAdapter, PackageAdapter, PerkAdapter, QuestAdapter, SceneAdapter]
    /// </summary>
    public abstract partial class AVirtualMachineAdapter :
        IAVirtualMachineAdapter,
        ILoquiObjectSetter<AVirtualMachineAdapter>,
        IEquatable<IAVirtualMachineAdapterGetter>
    {
        #region Ctor
        public AVirtualMachineAdapter()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Version
        public readonly static Int16 _Version_Default = 5;
        public Int16 Version { get; set; } = _Version_Default;
        #endregion
        #region ObjectFormat
        public readonly static UInt16 _ObjectFormat_Default = 2;
        public UInt16 ObjectFormat { get; set; } = _ObjectFormat_Default;
        #endregion
        #region Scripts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ScriptEntry> _Scripts = new ExtendedList<ScriptEntry>();
        public ExtendedList<ScriptEntry> Scripts
        {
            get => this._Scripts;
            protected set => this._Scripts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IScriptEntryGetter> IAVirtualMachineAdapterGetter.Scripts => _Scripts;
        #endregion

        #endregion

        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AVirtualMachineAdapterMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAVirtualMachineAdapterGetter rhs)) return false;
            return ((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAVirtualMachineAdapterGetter? obj)
        {
            return ((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Version = initialValue;
                this.ObjectFormat = initialValue;
                this.Scripts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScriptEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ScriptEntry.Mask<TItem>?>>());
            }

            public Mask(
                TItem Version,
                TItem ObjectFormat,
                TItem Scripts)
            {
                this.Version = Version;
                this.ObjectFormat = ObjectFormat;
                this.Scripts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScriptEntry.Mask<TItem>?>>?>(Scripts, Enumerable.Empty<MaskItemIndexed<TItem, ScriptEntry.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Version;
            public TItem ObjectFormat;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ScriptEntry.Mask<TItem>?>>?>? Scripts;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Version, rhs.Version)) return false;
                if (!object.Equals(this.ObjectFormat, rhs.ObjectFormat)) return false;
                if (!object.Equals(this.Scripts, rhs.Scripts)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Version);
                hash.Add(this.ObjectFormat);
                hash.Add(this.Scripts);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Version)) return false;
                if (!eval(this.ObjectFormat)) return false;
                if (this.Scripts != null)
                {
                    if (!eval(this.Scripts.Overall)) return false;
                    if (this.Scripts.Specific != null)
                    {
                        foreach (var item in this.Scripts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Version)) return true;
                if (eval(this.ObjectFormat)) return true;
                if (this.Scripts != null)
                {
                    if (eval(this.Scripts.Overall)) return true;
                    if (this.Scripts.Specific != null)
                    {
                        foreach (var item in this.Scripts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AVirtualMachineAdapter.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Version = eval(this.Version);
                obj.ObjectFormat = eval(this.ObjectFormat);
                if (Scripts != null)
                {
                    obj.Scripts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ScriptEntry.Mask<R>?>>?>(eval(this.Scripts.Overall), Enumerable.Empty<MaskItemIndexed<R, ScriptEntry.Mask<R>?>>());
                    if (Scripts.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ScriptEntry.Mask<R>?>>();
                        obj.Scripts.Specific = l;
                        foreach (var item in Scripts.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ScriptEntry.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ScriptEntry.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AVirtualMachineAdapter.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AVirtualMachineAdapter.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AVirtualMachineAdapter.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Version ?? true)
                    {
                        fg.AppendItem(Version, "Version");
                    }
                    if (printMask?.ObjectFormat ?? true)
                    {
                        fg.AppendItem(ObjectFormat, "ObjectFormat");
                    }
                    if ((printMask?.Scripts?.Overall ?? true)
                        && Scripts.TryGet(out var ScriptsItem))
                    {
                        fg.AppendLine("Scripts =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ScriptsItem.Overall);
                            if (ScriptsItem.Specific != null)
                            {
                                foreach (var subItem in ScriptsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Version;
            public Exception? ObjectFormat;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScriptEntry.ErrorMask?>>?>? Scripts;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                AVirtualMachineAdapter_FieldIndex enu = (AVirtualMachineAdapter_FieldIndex)index;
                switch (enu)
                {
                    case AVirtualMachineAdapter_FieldIndex.Version:
                        return Version;
                    case AVirtualMachineAdapter_FieldIndex.ObjectFormat:
                        return ObjectFormat;
                    case AVirtualMachineAdapter_FieldIndex.Scripts:
                        return Scripts;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                AVirtualMachineAdapter_FieldIndex enu = (AVirtualMachineAdapter_FieldIndex)index;
                switch (enu)
                {
                    case AVirtualMachineAdapter_FieldIndex.Version:
                        this.Version = ex;
                        break;
                    case AVirtualMachineAdapter_FieldIndex.ObjectFormat:
                        this.ObjectFormat = ex;
                        break;
                    case AVirtualMachineAdapter_FieldIndex.Scripts:
                        this.Scripts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScriptEntry.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                AVirtualMachineAdapter_FieldIndex enu = (AVirtualMachineAdapter_FieldIndex)index;
                switch (enu)
                {
                    case AVirtualMachineAdapter_FieldIndex.Version:
                        this.Version = (Exception?)obj;
                        break;
                    case AVirtualMachineAdapter_FieldIndex.ObjectFormat:
                        this.ObjectFormat = (Exception?)obj;
                        break;
                    case AVirtualMachineAdapter_FieldIndex.Scripts:
                        this.Scripts = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScriptEntry.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (Version != null) return true;
                if (ObjectFormat != null) return true;
                if (Scripts != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public virtual void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected virtual void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Version, "Version");
                fg.AppendItem(ObjectFormat, "ObjectFormat");
                if (Scripts.TryGet(out var ScriptsItem))
                {
                    fg.AppendLine("Scripts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ScriptsItem.Overall);
                        if (ScriptsItem.Specific != null)
                        {
                            foreach (var subItem in ScriptsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Version = this.Version.Combine(rhs.Version);
                ret.ObjectFormat = this.ObjectFormat.Combine(rhs.ObjectFormat);
                ret.Scripts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ScriptEntry.ErrorMask?>>?>(ExceptionExt.Combine(this.Scripts?.Overall, rhs.Scripts?.Overall), ExceptionExt.Combine(this.Scripts?.Specific, rhs.Scripts?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Version;
            public bool ObjectFormat;
            public ScriptEntry.TranslationMask? Scripts;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Version = defaultOn;
                this.ObjectFormat = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Version, null));
                ret.Add((ObjectFormat, null));
                ret.Add((Scripts == null ? DefaultOn : !Scripts.GetCrystal().CopyNothing, Scripts?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AVirtualMachineAdapter_Registration.TriggeringRecordType;
        public virtual IEnumerable<FormLinkInformation> ContainedFormLinks => AVirtualMachineAdapterCommon.Instance.GetContainedFormLinks(this);
        public virtual void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AVirtualMachineAdapterSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => AVirtualMachineAdapterBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AVirtualMachineAdapterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        void IClearable.Clear()
        {
            ((AVirtualMachineAdapterSetterCommon)((IAVirtualMachineAdapterGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static AVirtualMachineAdapter GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [VirtualMachineAdapter, DialogResponsesAdapter, PackageAdapter, PerkAdapter, QuestAdapter, SceneAdapter]
    /// </summary>
    public partial interface IAVirtualMachineAdapter :
        IAVirtualMachineAdapterGetter,
        ILoquiObjectSetter<IAVirtualMachineAdapter>,
        IFormLinkContainer
    {
        new Int16 Version { get; set; }
        new UInt16 ObjectFormat { get; set; }
        new ExtendedList<ScriptEntry> Scripts { get; }
    }

    /// <summary>
    /// Implemented by: [VirtualMachineAdapter, DialogResponsesAdapter, PackageAdapter, PerkAdapter, QuestAdapter, SceneAdapter]
    /// </summary>
    public partial interface IAVirtualMachineAdapterGetter :
        ILoquiObject,
        ILoquiObject<IAVirtualMachineAdapterGetter>,
        IFormLinkContainerGetter,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => AVirtualMachineAdapter_Registration.Instance;
        Int16 Version { get; }
        UInt16 ObjectFormat { get; }
        IReadOnlyList<IScriptEntryGetter> Scripts { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AVirtualMachineAdapterMixIn
    {
        public static void Clear(this IAVirtualMachineAdapter item)
        {
            ((AVirtualMachineAdapterSetterCommon)((IAVirtualMachineAdapterGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AVirtualMachineAdapter.Mask<bool> GetEqualsMask(
            this IAVirtualMachineAdapterGetter item,
            IAVirtualMachineAdapterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAVirtualMachineAdapterGetter item,
            string? name = null,
            AVirtualMachineAdapter.Mask<bool>? printMask = null)
        {
            return ((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAVirtualMachineAdapterGetter item,
            FileGeneration fg,
            string? name = null,
            AVirtualMachineAdapter.Mask<bool>? printMask = null)
        {
            ((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAVirtualMachineAdapterGetter item,
            IAVirtualMachineAdapterGetter rhs)
        {
            return ((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAVirtualMachineAdapter lhs,
            IAVirtualMachineAdapterGetter rhs)
        {
            ((AVirtualMachineAdapterSetterTranslationCommon)((IAVirtualMachineAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAVirtualMachineAdapter lhs,
            IAVirtualMachineAdapterGetter rhs,
            AVirtualMachineAdapter.TranslationMask? copyMask = null)
        {
            ((AVirtualMachineAdapterSetterTranslationCommon)((IAVirtualMachineAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAVirtualMachineAdapter lhs,
            IAVirtualMachineAdapterGetter rhs,
            out AVirtualMachineAdapter.ErrorMask errorMask,
            AVirtualMachineAdapter.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AVirtualMachineAdapterSetterTranslationCommon)((IAVirtualMachineAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AVirtualMachineAdapter.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAVirtualMachineAdapter lhs,
            IAVirtualMachineAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AVirtualMachineAdapterSetterTranslationCommon)((IAVirtualMachineAdapterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AVirtualMachineAdapter DeepCopy(
            this IAVirtualMachineAdapterGetter item,
            AVirtualMachineAdapter.TranslationMask? copyMask = null)
        {
            return ((AVirtualMachineAdapterSetterTranslationCommon)((IAVirtualMachineAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AVirtualMachineAdapter DeepCopy(
            this IAVirtualMachineAdapterGetter item,
            out AVirtualMachineAdapter.ErrorMask errorMask,
            AVirtualMachineAdapter.TranslationMask? copyMask = null)
        {
            return ((AVirtualMachineAdapterSetterTranslationCommon)((IAVirtualMachineAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AVirtualMachineAdapter DeepCopy(
            this IAVirtualMachineAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AVirtualMachineAdapterSetterTranslationCommon)((IAVirtualMachineAdapterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAVirtualMachineAdapter item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AVirtualMachineAdapterSetterCommon)((IAVirtualMachineAdapterGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4.Internals
{
    #region Field Index
    public enum AVirtualMachineAdapter_FieldIndex
    {
        Version = 0,
        ObjectFormat = 1,
        Scripts = 2,
    }
    #endregion

    #region Registration
    public partial class AVirtualMachineAdapter_Registration : ILoquiRegistration
    {
        public static readonly AVirtualMachineAdapter_Registration Instance = new AVirtualMachineAdapter_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Fallout4.ProtocolKey,
            msgID: 91,
            version: 0);

        public const string GUID = "fa07e160-72ef-43d5-9f19-66c1803dfa93";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(AVirtualMachineAdapter.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AVirtualMachineAdapter.ErrorMask);

        public static readonly Type ClassType = typeof(AVirtualMachineAdapter);

        public static readonly Type GetterType = typeof(IAVirtualMachineAdapterGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAVirtualMachineAdapter);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.AVirtualMachineAdapter";

        public const string Name = "AVirtualMachineAdapter";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.VMAD;
        public static readonly Type BinaryWriteTranslation = typeof(AVirtualMachineAdapterBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    public partial class AVirtualMachineAdapterSetterCommon
    {
        public static readonly AVirtualMachineAdapterSetterCommon Instance = new AVirtualMachineAdapterSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAVirtualMachineAdapter item)
        {
            ClearPartial();
            item.Version = AVirtualMachineAdapter._Version_Default;
            item.ObjectFormat = AVirtualMachineAdapter._ObjectFormat_Default;
            item.Scripts.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IAVirtualMachineAdapter obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Scripts.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAVirtualMachineAdapter item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
        }
        
        #endregion
        
    }
    public partial class AVirtualMachineAdapterCommon
    {
        public static readonly AVirtualMachineAdapterCommon Instance = new AVirtualMachineAdapterCommon();

        public AVirtualMachineAdapter.Mask<bool> GetEqualsMask(
            IAVirtualMachineAdapterGetter item,
            IAVirtualMachineAdapterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AVirtualMachineAdapter.Mask<bool>(false);
            ((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAVirtualMachineAdapterGetter item,
            IAVirtualMachineAdapterGetter rhs,
            AVirtualMachineAdapter.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Version = item.Version == rhs.Version;
            ret.ObjectFormat = item.ObjectFormat == rhs.ObjectFormat;
            ret.Scripts = item.Scripts.CollectionEqualsHelper(
                rhs.Scripts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IAVirtualMachineAdapterGetter item,
            string? name = null,
            AVirtualMachineAdapter.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAVirtualMachineAdapterGetter item,
            FileGeneration fg,
            string? name = null,
            AVirtualMachineAdapter.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AVirtualMachineAdapter =>");
            }
            else
            {
                fg.AppendLine($"{name} (AVirtualMachineAdapter) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAVirtualMachineAdapterGetter item,
            FileGeneration fg,
            AVirtualMachineAdapter.Mask<bool>? printMask = null)
        {
            if (printMask?.Version ?? true)
            {
                fg.AppendItem(item.Version, "Version");
            }
            if (printMask?.ObjectFormat ?? true)
            {
                fg.AppendItem(item.ObjectFormat, "ObjectFormat");
            }
            if (printMask?.Scripts?.Overall ?? true)
            {
                fg.AppendLine("Scripts =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Scripts)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAVirtualMachineAdapterGetter? lhs,
            IAVirtualMachineAdapterGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Version != rhs.Version) return false;
            if (lhs.ObjectFormat != rhs.ObjectFormat) return false;
            if (!lhs.Scripts.SequenceEqualNullable(rhs.Scripts)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IAVirtualMachineAdapterGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Version);
            hash.Add(item.ObjectFormat);
            hash.Add(item.Scripts);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return AVirtualMachineAdapter.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormLinkInformation> GetContainedFormLinks(IAVirtualMachineAdapterGetter obj)
        {
            foreach (var item in obj.Scripts.WhereCastable<IScriptEntryGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.ContainedFormLinks))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class AVirtualMachineAdapterSetterTranslationCommon
    {
        public static readonly AVirtualMachineAdapterSetterTranslationCommon Instance = new AVirtualMachineAdapterSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IAVirtualMachineAdapter item,
            IAVirtualMachineAdapterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)AVirtualMachineAdapter_FieldIndex.Version) ?? true))
            {
                item.Version = rhs.Version;
            }
            if ((copyMask?.GetShouldTranslate((int)AVirtualMachineAdapter_FieldIndex.ObjectFormat) ?? true))
            {
                item.ObjectFormat = rhs.ObjectFormat;
            }
            if ((copyMask?.GetShouldTranslate((int)AVirtualMachineAdapter_FieldIndex.Scripts) ?? true))
            {
                errorMask?.PushIndex((int)AVirtualMachineAdapter_FieldIndex.Scripts);
                try
                {
                    item.Scripts.SetTo(
                        rhs.Scripts
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public AVirtualMachineAdapter DeepCopy(
            IAVirtualMachineAdapterGetter item,
            AVirtualMachineAdapter.TranslationMask? copyMask = null)
        {
            AVirtualMachineAdapter ret = (AVirtualMachineAdapter)((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)item).CommonInstance()!).GetNew();
            ((AVirtualMachineAdapterSetterTranslationCommon)((IAVirtualMachineAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AVirtualMachineAdapter DeepCopy(
            IAVirtualMachineAdapterGetter item,
            out AVirtualMachineAdapter.ErrorMask errorMask,
            AVirtualMachineAdapter.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AVirtualMachineAdapter ret = (AVirtualMachineAdapter)((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)item).CommonInstance()!).GetNew();
            ((AVirtualMachineAdapterSetterTranslationCommon)((IAVirtualMachineAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AVirtualMachineAdapter.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AVirtualMachineAdapter DeepCopy(
            IAVirtualMachineAdapterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AVirtualMachineAdapter ret = (AVirtualMachineAdapter)((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)item).CommonInstance()!).GetNew();
            ((AVirtualMachineAdapterSetterTranslationCommon)((IAVirtualMachineAdapterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class AVirtualMachineAdapter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AVirtualMachineAdapter_Registration.Instance;
        public static AVirtualMachineAdapter_Registration Registration => AVirtualMachineAdapter_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => AVirtualMachineAdapterCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return AVirtualMachineAdapterSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => AVirtualMachineAdapterSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAVirtualMachineAdapterGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAVirtualMachineAdapterGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAVirtualMachineAdapterGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class AVirtualMachineAdapterBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static AVirtualMachineAdapterBinaryWriteTranslation Instance = new AVirtualMachineAdapterBinaryWriteTranslation();

        static partial void WriteBinaryScriptsCustom(
            MutagenWriter writer,
            IAVirtualMachineAdapterGetter item);

        public static void WriteBinaryScripts(
            MutagenWriter writer,
            IAVirtualMachineAdapterGetter item)
        {
            WriteBinaryScriptsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IAVirtualMachineAdapterGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Version);
            writer.Write(item.ObjectFormat);
            AVirtualMachineAdapterBinaryWriteTranslation.WriteBinaryScripts(
                writer: writer,
                item: item);
        }

        public virtual void Write(
            MutagenWriter writer,
            IAVirtualMachineAdapterGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.VMAD),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAVirtualMachineAdapterGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AVirtualMachineAdapterBinaryCreateTranslation
    {
        public readonly static AVirtualMachineAdapterBinaryCreateTranslation Instance = new AVirtualMachineAdapterBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAVirtualMachineAdapter item,
            MutagenFrame frame)
        {
            item.Version = frame.ReadInt16();
            item.ObjectFormat = frame.ReadUInt16();
            AVirtualMachineAdapterBinaryCreateTranslation.FillBinaryScriptsCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryScriptsCustom(
            MutagenFrame frame,
            IAVirtualMachineAdapter item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class AVirtualMachineAdapterBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAVirtualMachineAdapterGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AVirtualMachineAdapterBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4.Internals
{
    public partial class AVirtualMachineAdapterBinaryOverlay :
        BinaryOverlay,
        IAVirtualMachineAdapterGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AVirtualMachineAdapter_Registration.Instance;
        public static AVirtualMachineAdapter_Registration Registration => AVirtualMachineAdapter_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => AVirtualMachineAdapterCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => AVirtualMachineAdapterSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAVirtualMachineAdapterGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAVirtualMachineAdapterGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAVirtualMachineAdapterGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);

        public virtual IEnumerable<FormLinkInformation> ContainedFormLinks => AVirtualMachineAdapterCommon.Instance.GetContainedFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => AVirtualMachineAdapterBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AVirtualMachineAdapterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Int16 Version => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x0, 0x2));
        public UInt16 ObjectFormat => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x2, 0x2));
        #region Scripts
        protected int ScriptsEndingPos;
        partial void CustomScriptsEndPos();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AVirtualMachineAdapterBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }


        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AVirtualMachineAdapterMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAVirtualMachineAdapterGetter rhs)) return false;
            return ((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IAVirtualMachineAdapterGetter? obj)
        {
            return ((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AVirtualMachineAdapterCommon)((IAVirtualMachineAdapterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

